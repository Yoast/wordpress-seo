os: linux
dist: xenial
language: php

services:
  - mysql

branches:
  only:
    - master
    - trunk
    - /^release\/*/
    - /^hotfix\/\d+\.\d+(\.\d+)?(-\S*)?$/
    - /^feature\/*/
    # Also build tags like 1.1.1 or 1.1 for deployment.
    - /^\d+\.\d+(\.\d+)?(-\S*)?$/

stages:
  # Don't run the test steps on tag builds, this makes tag deployments a ton faster.
  - name: test
    if: NOT tag is present
  - ðŸš€ deployment

jobs:
  fast_finish: true
  include:
    - php: 7.2
      env: PHPCS=1 CHECKJS=1 SECURITY=1 TRAVIS_NODE_VERSION=14
    - php: 7.4
      name: "PHP 7.4: Check CS"
      before_install: skip
      before_script: skip
      install:
        - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
        - travis_retry composer install --no-interaction
      script:
        - composer check-cs-threshold
      after_script: skip
    - php: 7.3.24
      env: WP_VERSION=latest WP_MULTISITE=1 COVERAGE=1
    - php: 5.6
      env: WP_VERSION=5.6 WP_MULTISITE=1 PHPLINT=1 PHPUNIT=1
      # Use 'trusty' to test against MySQL 5.6, 'xenial' contains 5.7 by default.
      dist: trusty
    - php: 7.3
      env: WP_VERSION=master PHPUNIT=1
    - php: 7.4
      env: WP_VERSION=latest PHPUNIT=1 PHPLINT=1
    - php: 8.0
      env: WP_VERSION=latest PHPUNIT=1 PHPLINT=1
    - php: "nightly"
      env: PHPLINT=1
    - stage: ðŸš€ deployment
      name: "Deploy to S3"
      if: branch = deploy # Only build when on the `deploy` branch, this functionality is not used yet and is taking a long time to complete.
      env: SC_ATTR=wordpress-seo
      before_script: skip
      script: grunt artifact
      install:
        - yarn global add grunt-cli
        - yarn install
      deploy:
        skip_cleanup: true
        provider: s3
        access_key_id: AKIAJRNLQAPRL5UKDJKQ
        secret_access_key:
          secure: TE13B5MDyw16DxEIRpbXPtxb1LZAzi8jdCU4FZuTzNsdVaowlAXUEFFB+g8uapoQhJKqvZrwvrpqifRPhH0tcRlJ5Z0A+qWp8WhiFGmipp3gJBblacviAIvswGzKFN8+DgQVwHSKpzk3ZjEkDkH/KYq6OTYPL/g5oRwsjI0Ug9w=
        bucket: yoast-seo-builds
        region: us-east-1
        local-dir: artifact
        upload-dir: $TRAVIS_BRANCH
        on:
          repo: Yoast/wordpress-seo
          all_branches: true
    - stage: ðŸš€ deployment
      name: "Deploy to Yoast-dist"
      php: 7.2
      env: TRAVIS_NODE_VERSION=14
      install:
        - yarn global add grunt-cli
        - yarn install
      before_script: skip
      script:
        - |
          if [[ ! -z "$TRAVIS_TAG" ]]; then
            grunt set-version -new-version=$TRAVIS_TAG
            grunt update-version
          fi
        - grunt artifact
      if: ( tag IS present OR branch =~ /^feature\// OR branch =~ /^release\// OR branch =~ /^hotfix\// OR branch = trunk ) AND type != pull_request
      before_install:
        - nvm install $TRAVIS_NODE_VERSION
        - curl -o- -L https://yarnpkg.com/install.sh | bash
        - export PATH=$HOME/.yarn/bin:$PATH
        - openssl aes-256-cbc -K $encrypted_e268719177eb_key -iv $encrypted_e268719177eb_iv -in config/travis/deploy_keys/id_rsa_yoast_dist.enc -out config/travis/deploy_keys/id_rsa_yoast_dist -d
        - chmod 600 config/travis/deploy_keys/id_rsa_yoast_dist
        - eval $(ssh-agent -s)
        - ssh-add config/travis/deploy_keys/id_rsa_yoast_dist

      # If the commit was tagged, create an artifact and push it to the distribution github
      deploy:
        skip_cleanup: true
        provider: script
        script: bash config/travis/deploy_to_dist.sh ${TRAVIS_TAG:-$TRAVIS_BRANCH} wordpress-seo
        on:
          repo: $TRAVIS_REPO_SLUG
          all_branches: true

  allow_failures:
    # Allow failures for unstable builds.
    - php: "nightly"
    - php: 7.3
      env: WP_VERSION=master PHPUNIT=1

cache:
  yarn: true
  directories:
    - $HOME/.composer/cache
    - .cache
    - node_modules

before_install:
  - export SECURITYCHECK_DIR=/tmp/security-checker
  - if [[ -z "$CC_TEST_REPORTER_ID" ]]; then COVERAGE="0"; fi
  - if [[ "$COVERAGE" != "1" ]]; then phpenv config-rm xdebug.ini || echo 'No xdebug config.'; fi
  - |
    if [[ "$CHECKJS" == "1" ]]; then
      nvm install $TRAVIS_NODE_VERSION
      curl -o- -L https://yarnpkg.com/install.sh | bash
      export PATH=$HOME/.yarn/bin:$PATH
      echo -e "machine github.com\n  login $CI_GITHUB_USER_TOKEN" > ~/.netrc
    fi

install:
  - |
    if [[ "$PHPUNIT" == "1" || "$COVERAGE" == "1" || "$TRAVIS_BUILD_STAGE_NAME" == "ðŸš€ deployment" ]]; then
      # The prefix-dependencies task only works on PHP 7.1 and we need to prefix our dependencies to accurately test them.
      # So we temporarily switch PHP versions, do a full install and then remove the package.
      # Then switch back to the PHP version we want to test and delete the vendor directory.
      phpenv local 7.1
      travis_retry composer install --no-interaction --ignore-platform-reqs
      travis_retry composer remove humbug/php-scoper --dev --ignore-platform-reqs
      travis_retry composer remove atanamo/php-codeshift --dev --ignore-platform-reqs
      # Dependency injection compilation only works on PHP 7+.
      # It makes use of reflection-based PHP code that only works on PHP 7+.
      travis_retry composer du
      phpenv local --unset
      rm -rf vendor/*
    fi
  - |
    if [[ "$COVERAGE" == "1" ]]; then
      # Install phpcov so we can combine the coverage results of unit and integration tests.
      travis_retry composer require phpunit/phpcov ^3.1
    fi
  - |
    if [[ ${TRAVIS_PHP_VERSION:0:1} == "8" || $TRAVIS_PHP_VERSION == "nightly" ]]; then
      travis_retry composer install --no-interaction --ignore-platform-reqs --no-scripts --no-suggest
    elif [[ "$PHPUNIT" == "1" || "$COVERAGE" == "1" || "$PHPLINT" == "1" ]]; then
      # Run composer update as we have dev dependencies locked at PHP ^7.0 versions.
      travis_retry composer update --no-interaction --no-scripts
      travis_retry composer install --no-interaction --no-scripts
      travis_retry composer du --no-scripts
    elif [[ "$TRAVIS_BUILD_STAGE_NAME" == "ðŸš€ deployment" ]]; then
      travis_retry composer update
      travis_retry composer install --no-dev --no-interaction
      composer du
    fi
  - |
    if [[ "$CHECKJS" == "1" ]]; then
      yarn global add grunt-cli
      yarn install
    fi
  - if [[ "$SECURITY" == "1" ]]; then wget -P $SECURITYCHECK_DIR https://github.com/fabpot/local-php-security-checker/releases/download/v1.2.0/local-php-security-checker_1.2.0_linux_amd64 && chmod +x $SECURITYCHECK_DIR/local-php-security-checker_1.2.0_linux_amd64;fi

before_script:
  # Careful: The HTTPS version of the following URL is different, therefore we need to use HTTP.
  - |
    if [[ "$PHPUNIT" == "1" || "$COVERAGE" == "1" ]]; then
      if [[ "$WP_VERSION" == "latest" ]]; then
        curl -s http://api.wordpress.org/core/version-check/1.7/ > /tmp/wp-latest.json
        WP_VERSION=$(grep -o '"version":"[^"]*' /tmp/wp-latest.json | sed 's/"version":"//')
      fi
      PLUGIN_SLUG=$(basename $(pwd))
      export WP_DEVELOP_DIR=/tmp/wordpress/
      git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ /tmp/wordpress
      cd ..
      cp -r "$PLUGIN_SLUG" "/tmp/wordpress/src/wp-content/plugins/$PLUGIN_SLUG"
      cd /tmp/wordpress/
      cp wp-tests-config-sample.php wp-tests-config.php
      sed -i "s/youremptytestdbnamehere/wordpress_tests/" wp-tests-config.php
      sed -i "s/yourusernamehere/travis/" wp-tests-config.php
      sed -i "s/yourpasswordhere//" wp-tests-config.php
      mysql -e "CREATE DATABASE wordpress_tests;" -uroot
      cd "/tmp/wordpress/src/wp-content/plugins/$PLUGIN_SLUG"
      mkdir src/generated/assets
      echo "<?php return [ 'post-edit-' . ( new WPSEO_Admin_Asset_Manager() )->flatten_version( WPSEO_VERSION ) . '.js' => [ 'dependencies' => [] ] ];" >> src/generated/assets/plugin.php
      echo "<?php return [];" >> src/generated/assets/externals.php
      echo "<?php return [];" >> src/generated/assets/languages.php
    fi
  - phpenv rehash
  - |
    if [[ "$COVERAGE" == "1" ]]; then
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      chmod +x ./cc-test-reporter
      ./cc-test-reporter before-build
      mkdir -p /tmp/coverage
    fi
  - export -f travis_fold
  - export -f travis_time_start
  - export -f travis_time_finish
  - mysql --version
  - phpenv versions
  - php --version
  - php -m
  - curl --version
  - git --version
  - svn --version
  - |
    if [[ "$CHECKJS" == "1" ]]; then
      npm --version
      node --version
      yarn --version
      grunt --version
    fi
  - locale -a

script:
  # JavaScript checks
  - |
    if [[ "$CHECKJS" == "1" ]]; then
      travis_fold start "JavaScript.check" && travis_time_start
      yarn lint
      travis_time_finish && travis_fold end "JavaScript.check"
    fi
  # JavaScript tests
  - |
    if [[ "$CHECKJS" == "1" ]]; then
      travis_fold start "JavaScript.tests" && travis_time_start
      yarn test
      travis_time_finish && travis_fold end "JavaScript.tests"
    fi
  # PHP Linting
  - |
    if [[ "$PHPLINT" == "1" ]]; then
      travis_fold start "PHP.check" && travis_time_start
      composer lint
      travis_time_finish && travis_fold end "PHP.check"
    fi
  # PHP Unit
  - |
    if [[ "$PHPUNIT" == "1" && ${TRAVIS_PHP_VERSION:0:1} != "8" && $TRAVIS_PHP_VERSION != "nightly" ]]; then
      travis_fold start "PHP.integration-tests" && travis_time_start
      vendor/bin/phpunit -c phpunit-integration.xml.dist
      travis_time_finish && travis_fold end "PHP.integration-tests"
    fi;
  - |
    if [[ "$PHPUNIT" == "1" ]] && [[ ${TRAVIS_PHP_VERSION:0:1} == "8" || $TRAVIS_PHP_VERSION == "nightly" ]]; then
      travis_fold start "PHP.integration-tests" && travis_time_start
      composer remove --dev yoast/wp-test-utils phpunit/phpunit --ignore-platform-reqs --no-interaction
      travis_retry composer require --dev yoast/wp-test-utils:"^1.0.0" phpunit/phpunit:"^7.5" --update-with-dependencies --ignore-platform-reqs --no-interaction
      vendor/bin/phpunit -c phpunit-integration.xml.dist
      travis_time_finish && travis_fold end "PHP.integration-tests"
    fi;
  - |
    if [[ "$PHPUNIT" == "1" && ${TRAVIS_PHP_VERSION:0:1} != "8" && $TRAVIS_PHP_VERSION != "nightly" ]]; then
      travis_fold start "PHP.tests" && travis_time_start
      vendor/bin/phpunit
      travis_time_finish && travis_fold end "PHP.tests"
    fi;
  - |
    if [[ "$PHPUNIT" == "1" ]] && [[ ${TRAVIS_PHP_VERSION:0:1} == "8" || $TRAVIS_PHP_VERSION == "nightly" ]]; then
      travis_fold start "PHP.tests" && travis_time_start
      composer remove --dev yoast/wp-test-utils phpunit/phpunit --ignore-platform-reqs --no-interaction
      composer require --dev yoast/wp-test-utils phpunit/phpunit:"^9.0" --update-with-dependencies --ignore-platform-reqs --no-interaction
      vendor/bin/phpunit
      travis_time_finish && travis_fold end "PHP.tests"
    fi
  - |
    if [[ "$COVERAGE" == "1" ]]; then
      travis_fold start "PHP.coverage" && travis_time_start
      vendor/bin/phpunit -c phpunit-integration.xml.dist --coverage-php /tmp/coverage/integration-tests.cov
      travis_time_finish && travis_fold end "PHP.coverage"
    fi
  - |
    if [[ "$COVERAGE" == "1" ]]; then
      travis_fold start "PHP.coverage" && travis_time_start
      vendor/bin/phpunit --coverage-php /tmp/coverage/tests.cov
      travis_time_finish && travis_fold end "PHP.coverage"
    fi
  # Validate the composer.json file.
  # @link https://getcomposer.org/doc/03-cli.md#validate
  - if [[ $TRAVIS_PHP_VERSION == "5.6" || $TRAVIS_PHP_VERSION == "7.4" ]]; then composer validate --no-check-all; fi

  # Check for known security vulnerabilities in the currently locked-in dependencies.
  - if [[ "$SECURITY" == "1" ]]; then $SECURITYCHECK_DIR/local-php-security-checker_1.2.0_linux_amd64 --path=$(pwd)/composer.lock;fi

after_script:
  - |
    if [[ "$COVERAGE" == "1" ]]; then
      ./vendor/bin/phpcov merge /tmp/coverage --clover build/logs/clover.xml
    fi
  - if [[ "$COVERAGE" == "1" ]]; then ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT; fi

notifications:
  slack:
    secure: W3StABr+AdcdQawTObK4nbsnn5nLrTTtZfVpD/GEN6gvSOQcykbGEC5+ceYg0jn5b4StDyCiTo5blEsrpVICFpYKc44+ogah+qaGRUfVRS/rpOvn4AueXTWn4JxhZzuxqKMiTmyW+MQG0uYM7sk7Q5S+15jj6ilkj4QATaBVNbY=
  email: false
