export default TurkishStemmer;
declare class TurkishStemmer extends SnowballStemmer {
    static get methodObject(): null;
    static get a_0(): Among[];
    static get a_1(): Among[];
    static get a_2(): Among[];
    static get a_3(): Among[];
    static get a_4(): Among[];
    static get a_5(): Among[];
    static get a_6(): Among[];
    static get a_7(): Among[];
    static get a_8(): Among[];
    static get a_9(): Among[];
    static get a_10(): Among[];
    static get a_11(): Among[];
    static get a_12(): Among[];
    static get a_13(): Among[];
    static get a_14(): Among[];
    static get a_15(): Among[];
    static get a_16(): Among[];
    static get a_17(): Among[];
    static get a_18(): Among[];
    static get a_19(): Among[];
    static get a_20(): Among[];
    static get a_21(): Among[];
    static get a_22(): Among[];
    static get a_23(): Among[];
    static get g_vowel(): number[];
    static get g_U(): number[];
    static get g_vowel1(): number[];
    static get g_vowel2(): number[];
    static get g_vowel3(): number[];
    static get g_vowel4(): number[];
    static get g_vowel5(): number[];
    static get g_vowel6(): number[];
    constructor(morphologyData: any);
    set B_continue_stemming_noun_suffixes(v: any);
    get B_continue_stemming_noun_suffixes(): any;
    _$esjava$B_continue_stemming_noun_suffixes: any;
    set I_strlen(v: any);
    get I_strlen(): any;
    _$esjava$I_strlen: any;
    r_check_vowel_harmony$esjava$0(): boolean;
    r_mark_suffix_with_optional_n_consonant$esjava$0(): boolean;
    r_mark_suffix_with_optional_s_consonant$esjava$0(): boolean;
    r_mark_suffix_with_optional_y_consonant$esjava$0(): boolean;
    r_mark_suffix_with_optional_U_vowel$esjava$0(): boolean;
    r_mark_possessives$esjava$0(): boolean;
    r_mark_sU$esjava$0(): boolean;
    r_mark_lArI$esjava$0(): boolean;
    r_mark_yU$esjava$0(): boolean;
    r_mark_nU$esjava$0(): boolean;
    r_mark_nUn$esjava$0(): boolean;
    r_mark_yA$esjava$0(): boolean;
    r_mark_nA$esjava$0(): boolean;
    r_mark_DA$esjava$0(): boolean;
    r_mark_ndA$esjava$0(): boolean;
    r_mark_DAn$esjava$0(): boolean;
    r_mark_ndAn$esjava$0(): boolean;
    r_mark_ylA$esjava$0(): boolean;
    r_mark_ki$esjava$0(): boolean;
    r_mark_ncA$esjava$0(): boolean;
    r_mark_yUm$esjava$0(): boolean;
    r_mark_sUn$esjava$0(): boolean;
    r_mark_yUz$esjava$0(): boolean;
    r_mark_sUnUz$esjava$0(): boolean;
    r_mark_lAr$esjava$0(): boolean;
    r_mark_nUz$esjava$0(): boolean;
    r_mark_DUr$esjava$0(): boolean;
    r_mark_cAsInA$esjava$0(): boolean;
    r_mark_yDU$esjava$0(): boolean;
    r_mark_ysA$esjava$0(): boolean;
    r_mark_ymUs_$esjava$0(): boolean;
    r_mark_yken$esjava$0(): boolean;
    r_stem_nominal_verb_suffixes$esjava$0(): boolean;
    r_stem_suffix_chain_before_ki$esjava$0(): boolean;
    r_stem_noun_suffixes$esjava$0(): boolean;
    r_post_process_last_consonants$esjava$0(): boolean;
    r_append_U_to_stems_ending_with_d_or_g$esjava$0(): boolean;
    r_more_than_one_syllable_word$esjava$0(): boolean;
    r_is_reserved_word$esjava$0(): boolean;
    r_postlude$esjava$0(): boolean;
    stem$esjava$0(): boolean;
}
declare class SnowballStemmer extends SnowballProgram {
    stem$esjava$0(): void;
    stem(...args: any[]): any;
}
declare class Among {
    static toCharArray$esjava$1(s: any): any[];
    constructor(s: any, substring_i: any, result: any, methodname: any, methodobject: any);
    set s_size(v: any);
    get s_size(): any;
    set s(v: any);
    get s(): any;
    set substring_i(v: any);
    get substring_i(): any;
    set result(v: any);
    get result(): any;
    set methodobject(v: any);
    get methodobject(): any;
    set method(v: any);
    get method(): any;
    _$esjava$s_size: any;
    _$esjava$s: any;
    _$esjava$substring_i: any;
    _$esjava$result: any;
    _$esjava$method: any;
    _$esjava$methodobject: any;
}
declare class SnowballProgram {
    set current(v: any);
    get current(): any;
    setCurrent$esjava$1(value: any): void;
    set cursor(v: any);
    get cursor(): any;
    set limit(v: any);
    get limit(): any;
    set limit_backward(v: any);
    get limit_backward(): any;
    set bra(v: any);
    get bra(): any;
    set ket(v: any);
    get ket(): any;
    getCurrent$esjava$0(): any;
    _$esjava$current: any;
    _$esjava$cursor: any;
    _$esjava$limit: any;
    _$esjava$limit_backward: any;
    _$esjava$bra: any;
    _$esjava$ket: any;
    copy_from$esjava$1(other: any): void;
    in_grouping$esjava$3(s: any, min: any, max: any): boolean;
    in_grouping_b$esjava$3(s: any, min: any, max: any): boolean;
    out_grouping$esjava$3(s: any, min: any, max: any): boolean;
    out_grouping_b$esjava$3(s: any, min: any, max: any): boolean;
    in_range$esjava$2(min: any, max: any): boolean;
    in_range_b$esjava$2(min: any, max: any): boolean;
    out_range$esjava$2(min: any, max: any): boolean;
    out_range_b$esjava$2(min: any, max: any): boolean;
    eq_s$esjava$2(s_size: any, s: any): boolean;
    eq_s_b$esjava$2(s_size: any, s: any): boolean;
    eq_v$esjava$1(s: any): boolean;
    eq_v_b$esjava$1(s: any): boolean;
    find_among$esjava$2(v: any, v_size: any): any;
    find_among_b$esjava$2(v: any, v_size: any): any;
    replace_s$esjava$3(c_bra: any, c_ket: any, s: any): number;
    slice_check$esjava$0(): void;
    slice_from$esjava$1(s: any): void;
    slice_del$esjava$0(): void;
    insert$esjava$3(c_bra: any, c_ket: any, s: any): void;
    slice_to$esjava$1(s: any): any;
    setCurrent(...args: any[]): any;
    getCurrent(...args: any[]): any;
    copy_from(...args: any[]): any;
    in_grouping(...args: any[]): any;
    in_grouping_b(...args: any[]): any;
    out_grouping(...args: any[]): any;
    out_grouping_b(...args: any[]): any;
    in_range(...args: any[]): any;
    in_range_b(...args: any[]): any;
    out_range(...args: any[]): any;
    out_range_b(...args: any[]): any;
    eq_s(...args: any[]): any;
    eq_s_b(...args: any[]): any;
    eq_v(...args: any[]): any;
    eq_v_b(...args: any[]): any;
    find_among(...args: any[]): any;
    find_among_b(...args: any[]): any;
    replace_s(...args: any[]): any;
    slice_check(...args: any[]): any;
    slice_from(...args: any[]): any;
    slice_del(...args: any[]): any;
    insert(...args: any[]): any;
    slice_to(...args: any[]): any;
}
