yoastWebpackJsonp([4],[
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 8\n// module chunks = 0 1 2 3 4 5 6 7 8 9\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 30\n// module chunks = 0 1 2 3 4 5 6 8\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),
/* 31 */,
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayEach = __webpack_require__(1118),\n    baseEach = __webpack_require__(558),\n    castFunction = __webpack_require__(1161),\n    isArray = __webpack_require__(64);\n\n/**\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\n * or `_.forOwn` for object iteration.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEachRight\n * @example\n *\n * _.forEach([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `1` then `2`.\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forEach(collection, iteratee) {\n  var func = isArray(collection) ? arrayEach : baseEach;\n  return func(collection, castFunction(iteratee));\n}\n\nmodule.exports = forEach;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/forEach.js\n// module id = 32\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/forEach.js?");

/***/ }),
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/inherits/inherits_browser.js\n// module id = 44\n// module chunks = 0 1 2 3 4 7\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/inherits/inherits_browser.js?");

/***/ }),
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isUndefined = __webpack_require__(66);\nvar isNumber = __webpack_require__(1122);\n/**\n * A function that only returns an empty that can be used as an empty marker\n *\n * @returns {Array} A list of empty marks.\n */\nvar emptyMarker = function emptyMarker() {\n    return [];\n};\n/**\n * Construct the AssessmentResult value object.\n *\n * @param {Object} [values] The values for this assessment result.\n *\n * @constructor\n */\nvar AssessmentResult = function AssessmentResult(values) {\n    this._hasScore = false;\n    this._identifier = \"\";\n    this._hasMarks = false;\n    this._marker = emptyMarker;\n    this.score = 0;\n    this.text = \"\";\n    if (isUndefined(values)) {\n        values = {};\n    }\n    if (!isUndefined(values.score)) {\n        this.setScore(values.score);\n    }\n    if (!isUndefined(values.text)) {\n        this.setText(values.text);\n    }\n};\n/**\n * Check if a score is available.\n * @returns {boolean} Whether or not a score is available.\n */\nAssessmentResult.prototype.hasScore = function () {\n    return this._hasScore;\n};\n/**\n * Get the available score\n * @returns {number} The score associated with the AssessmentResult.\n */\nAssessmentResult.prototype.getScore = function () {\n    return this.score;\n};\n/**\n * Set the score for the assessment.\n * @param {number} score The score to be used for the score property\n * @returns {void}\n */\nAssessmentResult.prototype.setScore = function (score) {\n    if (isNumber(score)) {\n        this.score = score;\n        this._hasScore = true;\n    }\n};\n/**\n * Check if a text is available.\n * @returns {boolean} Whether or not a text is available.\n */\nAssessmentResult.prototype.hasText = function () {\n    return this.text !== \"\";\n};\n/**\n * Get the available text\n * @returns {string} The text associated with the AssessmentResult.\n */\nAssessmentResult.prototype.getText = function () {\n    return this.text;\n};\n/**\n * Set the text for the assessment.\n * @param {string} text The text to be used for the text property\n * @returns {void}\n */\nAssessmentResult.prototype.setText = function (text) {\n    if (isUndefined(text)) {\n        text = \"\";\n    }\n    this.text = text;\n};\n/**\n * Sets the identifier\n *\n * @param {string} identifier An alphanumeric identifier for this result.\n * @returns {void}\n */\nAssessmentResult.prototype.setIdentifier = function (identifier) {\n    this._identifier = identifier;\n};\n/**\n * Gets the identifier\n *\n * @returns {string} An alphanumeric identifier for this result.\n */\nAssessmentResult.prototype.getIdentifier = function () {\n    return this._identifier;\n};\n/**\n * Sets the marker, a pure function that can return the marks for a given Paper\n *\n * @param {Function} marker The marker to set.\n * @returns {void}\n */\nAssessmentResult.prototype.setMarker = function (marker) {\n    this._marker = marker;\n};\n/**\n * Returns whether or not this result has a marker that can be used to mark for a given Paper\n *\n * @returns {boolean} Whether or this result has a marker.\n */\nAssessmentResult.prototype.hasMarker = function () {\n    return this._hasMarks && this._marker !== emptyMarker;\n};\n/**\n * Gets the marker, a pure function that can return the marks for a given Paper\n *\n * @returns {Function} The marker.\n */\nAssessmentResult.prototype.getMarker = function () {\n    return this._marker;\n};\n/**\n * Sets the value of _hasMarks to determine if there is something to mark.\n *\n * @param {boolean} hasMarks Is there something to mark.\n * @returns {void}\n */\nAssessmentResult.prototype.setHasMarks = function (hasMarks) {\n    this._hasMarks = hasMarks;\n};\n/**\n * Returns the value of _hasMarks to determine if there is something to mark.\n *\n * @returns {boolean} Is there something to mark.\n */\nAssessmentResult.prototype.hasMarks = function () {\n    return this._hasMarks;\n};\nmodule.exports = AssessmentResult;\n//# sourceMappingURL=AssessmentResult.js.map\n//# sourceMappingURL=AssessmentResult.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/AssessmentResult.js\n// module id = 51\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/AssessmentResult.js?");

/***/ }),
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayMap = __webpack_require__(327),\n    baseIteratee = __webpack_require__(267),\n    baseMap = __webpack_require__(1201),\n    isArray = __webpack_require__(64);\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/map.js\n// module id = 63\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/map.js?");

/***/ }),
/* 64 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArray.js\n// module id = 64\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArray.js?");

/***/ }),
/* 65 */,
/* 66 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isUndefined.js\n// module id = 66\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isUndefined.js?");

/***/ }),
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = Object({\"NODE_ENV\":\"development\"}).NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(1370);\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(1371);\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(137)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util/util.js\n// module id = 79\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util/util.js?");

/***/ }),
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/stripSpaces */\n/**\n * Strip double spaces from text\n *\n * @param {String} text The text to strip spaces from.\n * @returns {String} The text without double spaces\n */\n\nmodule.exports = function (text) {\n    // Replace multiple spaces with single space\n    text = text.replace(/\\s{2,}/g, \" \");\n    // Replace spaces followed by periods with only the period.\n    text = text.replace(/\\s\\./g, \".\");\n    // Remove first/last character if space\n    text = text.replace(/^\\s+|\\s+$/g, \"\");\n    return text;\n};\n//# sourceMappingURL=stripSpaces.js.map\n//# sourceMappingURL=stripSpaces.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripSpaces.js\n// module id = 84\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripSpaces.js?");

/***/ }),
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isObject.js\n// module id = 96\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isObject.js?");

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseKeys = __webpack_require__(1081),\n    getTag = __webpack_require__(711),\n    isArguments = __webpack_require__(388),\n    isArray = __webpack_require__(64),\n    isArrayLike = __webpack_require__(168),\n    isBuffer = __webpack_require__(400),\n    isPrototype = __webpack_require__(561),\n    isTypedArray = __webpack_require__(560);\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isEmpty.js\n// module id = 97\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isEmpty.js?");

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseMerge = __webpack_require__(1205),\n    createAssigner = __webpack_require__(1278);\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/merge.js\n// module id = 98\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/merge.js?");

/***/ }),
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable no-unused-vars */\n/**\n * Represents the defaults of an assessment.\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Assessment = function () {\n  function Assessment() {\n    _classCallCheck(this, Assessment);\n  }\n\n  _createClass(Assessment, [{\n    key: \"getResult\",\n\n    /**\n     * Executes the assessment and return its result.\n     *\n     * @param {Paper} paper The paper to run this assessment on.\n     * @param {Researcher} researcher The researcher used for the assessment.\n     * @param {object} i18n The i18n-object used for parsing translations.\n     *\n     * @returns {AssessmentResult} The result of the assessment.\n     */\n    value: function getResult(paper, researcher, i18n) {\n      throw \"The method getResult is not implemented\";\n    }\n    /**\n     * Checks whether the assessment is applicable\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     *\n     * @returns {boolean} True.\n     */\n\n  }, {\n    key: \"isApplicable\",\n    value: function isApplicable(paper) {\n      return true;\n    }\n  }]);\n\n  return Assessment;\n}();\n/* eslint-enable no-unused-vars */\n\nmodule.exports = Assessment;\n//# sourceMappingURL=assessment.js.map\n//# sourceMappingURL=assessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessment.js\n// module id = 107\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessment.js?");

/***/ }),
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayFilter = __webpack_require__(710),\n    baseFilter = __webpack_require__(1202),\n    baseIteratee = __webpack_require__(267),\n    isArray = __webpack_require__(64);\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/filter.js\n// module id = 112\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/filter.js?");

/***/ }),
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

eval("var freeGlobal = __webpack_require__(706);\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_root.js\n// module id = 121\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_root.js?");

/***/ }),
/* 122 */,
/* 123 */,
/* 124 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isObjectLike.js\n// module id = 124\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isObjectLike.js?");

/***/ }),
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIndexOf = __webpack_require__(1104),\n    isArrayLike = __webpack_require__(168),\n    isString = __webpack_require__(1250),\n    toInteger = __webpack_require__(692),\n    values = __webpack_require__(1251);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nmodule.exports = includes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/includes.js\n// module id = 147\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/includes.js?");

/***/ }),
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

eval("var toString = __webpack_require__(1090);\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n    reHasRegExpChar = RegExp(reRegExpChar.source);\n\n/**\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escapeRegExp('[lodash](https://lodash.com/)');\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n */\nfunction escapeRegExp(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string))\n    ? string.replace(reRegExpChar, '\\\\$&')\n    : string;\n}\n\nmodule.exports = escapeRegExp;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/escapeRegExp.js\n// module id = 162\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/escapeRegExp.js?");

/***/ }),
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/stripHTMLTags */\n\nvar stripSpaces = __webpack_require__(84);\nvar blockElements = __webpack_require__(684).blockElements;\nvar blockElementStartRegex = new RegExp(\"^<(\" + blockElements.join(\"|\") + \")[^>]*?>\", \"i\");\nvar blockElementEndRegex = new RegExp(\"</(\" + blockElements.join(\"|\") + \")[^>]*?>$\", \"i\");\n/**\n * Strip incomplete tags within a text. Strips an endtag at the beginning of a string and the start tag at the end of a\n * start of a string.\n * @param {String} text The text to strip the HTML-tags from at the begin and end.\n * @returns {String} The text without HTML-tags at the begin and end.\n */\nvar stripIncompleteTags = function stripIncompleteTags(text) {\n    text = text.replace(/^(<\\/([^>]+)>)+/i, \"\");\n    text = text.replace(/(<([^/>]+)>)+$/i, \"\");\n    return text;\n};\n/**\n * Removes the block element tags at the beginning and end of a string and returns this string.\n *\n * @param {string} text The unformatted string.\n * @returns {string} The text with removed HTML begin and end block elements\n */\nvar stripBlockTagsAtStartEnd = function stripBlockTagsAtStartEnd(text) {\n    text = text.replace(blockElementStartRegex, \"\");\n    text = text.replace(blockElementEndRegex, \"\");\n    return text;\n};\n/**\n * Strip HTML-tags from text\n *\n * @param {String} text The text to strip the HTML-tags from.\n * @returns {String} The text without HTML-tags.\n */\nvar stripFullTags = function stripFullTags(text) {\n    text = text.replace(/(<([^>]+)>)/ig, \" \");\n    text = stripSpaces(text);\n    return text;\n};\nmodule.exports = {\n    stripFullTags: stripFullTags,\n    stripIncompleteTags: stripIncompleteTags,\n    stripBlockTagsAtStartEnd: stripBlockTagsAtStartEnd\n};\n//# sourceMappingURL=stripHTMLTags.js.map\n//# sourceMappingURL=stripHTMLTags.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripHTMLTags.js\n// module id = 167\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripHTMLTags.js?");

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isFunction = __webpack_require__(389),\n    isLength = __webpack_require__(585);\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArrayLike.js\n// module id = 168\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArrayLike.js?");

/***/ }),
/* 169 */,
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * @preserve jed.js https://github.com/SlexAxton/Jed\n */\n/*\n-----------\nA gettext compatible i18n library for modern JavaScript Applications\n\nby Alex Sexton - AlexSexton [at] gmail - @SlexAxton\n\nMIT License\n\nA jQuery Foundation project - requires CLA to contribute -\nhttps://contribute.jquery.org/CLA/\n\n\n\nJed offers the entire applicable GNU gettext spec'd set of\nfunctions, but also offers some nicer wrappers around them.\nThe api for gettext was written for a language with no function\noverloading, so Jed allows a little more of that.\n\nMany thanks to Joshua I. Miller - unrtst@cpan.org - who wrote\ngettext.js back in 2008. I was able to vet a lot of my ideas\nagainst his. I also made sure Jed passed against his tests\nin order to offer easy upgrades -- jsgettext.berlios.de\n*/\n(function (root, undef) {\n\n  // Set up some underscore-style functions, if you already have\n  // underscore, feel free to delete this section, and use it\n  // directly, however, the amount of functions used doesn't\n  // warrant having underscore as a full dependency.\n  // Underscore 1.3.0 was used to port and is licensed\n  // under the MIT License by Jeremy Ashkenas.\n  var ArrayProto    = Array.prototype,\n      ObjProto      = Object.prototype,\n      slice         = ArrayProto.slice,\n      hasOwnProp    = ObjProto.hasOwnProperty,\n      nativeForEach = ArrayProto.forEach,\n      breaker       = {};\n\n  // We're not using the OOP style _ so we don't need the\n  // extra level of indirection. This still means that you\n  // sub out for real `_` though.\n  var _ = {\n    forEach : function( obj, iterator, context ) {\n      var i, l, key;\n      if ( obj === null ) {\n        return;\n      }\n\n      if ( nativeForEach && obj.forEach === nativeForEach ) {\n        obj.forEach( iterator, context );\n      }\n      else if ( obj.length === +obj.length ) {\n        for ( i = 0, l = obj.length; i < l; i++ ) {\n          if ( i in obj && iterator.call( context, obj[i], i, obj ) === breaker ) {\n            return;\n          }\n        }\n      }\n      else {\n        for ( key in obj) {\n          if ( hasOwnProp.call( obj, key ) ) {\n            if ( iterator.call (context, obj[key], key, obj ) === breaker ) {\n              return;\n            }\n          }\n        }\n      }\n    },\n    extend : function( obj ) {\n      this.forEach( slice.call( arguments, 1 ), function ( source ) {\n        for ( var prop in source ) {\n          obj[prop] = source[prop];\n        }\n      });\n      return obj;\n    }\n  };\n  // END Miniature underscore impl\n\n  // Jed is a constructor function\n  var Jed = function ( options ) {\n    // Some minimal defaults\n    this.defaults = {\n      \"locale_data\" : {\n        \"messages\" : {\n          \"\" : {\n            \"domain\"       : \"messages\",\n            \"lang\"         : \"en\",\n            \"plural_forms\" : \"nplurals=2; plural=(n != 1);\"\n          }\n          // There are no default keys, though\n        }\n      },\n      // The default domain if one is missing\n      \"domain\" : \"messages\",\n      // enable debug mode to log untranslated strings to the console\n      \"debug\" : false\n    };\n\n    // Mix in the sent options with the default options\n    this.options = _.extend( {}, this.defaults, options );\n    this.textdomain( this.options.domain );\n\n    if ( options.domain && ! this.options.locale_data[ this.options.domain ] ) {\n      throw new Error('Text domain set to non-existent domain: `' + options.domain + '`');\n    }\n  };\n\n  // The gettext spec sets this character as the default\n  // delimiter for context lookups.\n  // e.g.: context\\u0004key\n  // If your translation company uses something different,\n  // just change this at any time and it will use that instead.\n  Jed.context_delimiter = String.fromCharCode( 4 );\n\n  function getPluralFormFunc ( plural_form_string ) {\n    return Jed.PF.compile( plural_form_string || \"nplurals=2; plural=(n != 1);\");\n  }\n\n  function Chain( key, i18n ){\n    this._key = key;\n    this._i18n = i18n;\n  }\n\n  // Create a chainable api for adding args prettily\n  _.extend( Chain.prototype, {\n    onDomain : function ( domain ) {\n      this._domain = domain;\n      return this;\n    },\n    withContext : function ( context ) {\n      this._context = context;\n      return this;\n    },\n    ifPlural : function ( num, pkey ) {\n      this._val = num;\n      this._pkey = pkey;\n      return this;\n    },\n    fetch : function ( sArr ) {\n      if ( {}.toString.call( sArr ) != '[object Array]' ) {\n        sArr = [].slice.call(arguments, 0);\n      }\n      return ( sArr && sArr.length ? Jed.sprintf : function(x){ return x; } )(\n        this._i18n.dcnpgettext(this._domain, this._context, this._key, this._pkey, this._val),\n        sArr\n      );\n    }\n  });\n\n  // Add functions to the Jed prototype.\n  // These will be the functions on the object that's returned\n  // from creating a `new Jed()`\n  // These seem redundant, but they gzip pretty well.\n  _.extend( Jed.prototype, {\n    // The sexier api start point\n    translate : function ( key ) {\n      return new Chain( key, this );\n    },\n\n    textdomain : function ( domain ) {\n      if ( ! domain ) {\n        return this._textdomain;\n      }\n      this._textdomain = domain;\n    },\n\n    gettext : function ( key ) {\n      return this.dcnpgettext.call( this, undef, undef, key );\n    },\n\n    dgettext : function ( domain, key ) {\n     return this.dcnpgettext.call( this, domain, undef, key );\n    },\n\n    dcgettext : function ( domain , key /*, category */ ) {\n      // Ignores the category anyways\n      return this.dcnpgettext.call( this, domain, undef, key );\n    },\n\n    ngettext : function ( skey, pkey, val ) {\n      return this.dcnpgettext.call( this, undef, undef, skey, pkey, val );\n    },\n\n    dngettext : function ( domain, skey, pkey, val ) {\n      return this.dcnpgettext.call( this, domain, undef, skey, pkey, val );\n    },\n\n    dcngettext : function ( domain, skey, pkey, val/*, category */) {\n      return this.dcnpgettext.call( this, domain, undef, skey, pkey, val );\n    },\n\n    pgettext : function ( context, key ) {\n      return this.dcnpgettext.call( this, undef, context, key );\n    },\n\n    dpgettext : function ( domain, context, key ) {\n      return this.dcnpgettext.call( this, domain, context, key );\n    },\n\n    dcpgettext : function ( domain, context, key/*, category */) {\n      return this.dcnpgettext.call( this, domain, context, key );\n    },\n\n    npgettext : function ( context, skey, pkey, val ) {\n      return this.dcnpgettext.call( this, undef, context, skey, pkey, val );\n    },\n\n    dnpgettext : function ( domain, context, skey, pkey, val ) {\n      return this.dcnpgettext.call( this, domain, context, skey, pkey, val );\n    },\n\n    // The most fully qualified gettext function. It has every option.\n    // Since it has every option, we can use it from every other method.\n    // This is the bread and butter.\n    // Technically there should be one more argument in this function for 'Category',\n    // but since we never use it, we might as well not waste the bytes to define it.\n    dcnpgettext : function ( domain, context, singular_key, plural_key, val ) {\n      // Set some defaults\n\n      plural_key = plural_key || singular_key;\n\n      // Use the global domain default if one\n      // isn't explicitly passed in\n      domain = domain || this._textdomain;\n\n      var fallback;\n\n      // Handle special cases\n\n      // No options found\n      if ( ! this.options ) {\n        // There's likely something wrong, but we'll return the correct key for english\n        // We do this by instantiating a brand new Jed instance with the default set\n        // for everything that could be broken.\n        fallback = new Jed();\n        return fallback.dcnpgettext.call( fallback, undefined, undefined, singular_key, plural_key, val );\n      }\n\n      // No translation data provided\n      if ( ! this.options.locale_data ) {\n        throw new Error('No locale data provided.');\n      }\n\n      if ( ! this.options.locale_data[ domain ] ) {\n        throw new Error('Domain `' + domain + '` was not found.');\n      }\n\n      if ( ! this.options.locale_data[ domain ][ \"\" ] ) {\n        throw new Error('No locale meta information provided.');\n      }\n\n      // Make sure we have a truthy key. Otherwise we might start looking\n      // into the empty string key, which is the options for the locale\n      // data.\n      if ( ! singular_key ) {\n        throw new Error('No translation key found.');\n      }\n\n      var key  = context ? context + Jed.context_delimiter + singular_key : singular_key,\n          locale_data = this.options.locale_data,\n          dict = locale_data[ domain ],\n          defaultConf = (locale_data.messages || this.defaults.locale_data.messages)[\"\"],\n          pluralForms = dict[\"\"].plural_forms || dict[\"\"][\"Plural-Forms\"] || dict[\"\"][\"plural-forms\"] || defaultConf.plural_forms || defaultConf[\"Plural-Forms\"] || defaultConf[\"plural-forms\"],\n          val_list,\n          res;\n\n      var val_idx;\n      if (val === undefined) {\n        // No value passed in; assume singular key lookup.\n        val_idx = 0;\n\n      } else {\n        // Value has been passed in; use plural-forms calculations.\n\n        // Handle invalid numbers, but try casting strings for good measure\n        if ( typeof val != 'number' ) {\n          val = parseInt( val, 10 );\n\n          if ( isNaN( val ) ) {\n            throw new Error('The number that was passed in is not a number.');\n          }\n        }\n\n        val_idx = getPluralFormFunc(pluralForms)(val);\n      }\n\n      // Throw an error if a domain isn't found\n      if ( ! dict ) {\n        throw new Error('No domain named `' + domain + '` could be found.');\n      }\n\n      val_list = dict[ key ];\n\n      // If there is no match, then revert back to\n      // english style singular/plural with the keys passed in.\n      if ( ! val_list || val_idx > val_list.length ) {\n        if (this.options.missing_key_callback) {\n          this.options.missing_key_callback(key, domain);\n        }\n        res = [ singular_key, plural_key ];\n\n        // collect untranslated strings\n        if (this.options.debug===true) {\n          console.log(res[ getPluralFormFunc(pluralForms)( val ) ]);\n        }\n        return res[ getPluralFormFunc()( val ) ];\n      }\n\n      res = val_list[ val_idx ];\n\n      // This includes empty strings on purpose\n      if ( ! res  ) {\n        res = [ singular_key, plural_key ];\n        return res[ getPluralFormFunc()( val ) ];\n      }\n      return res;\n    }\n  });\n\n\n  // We add in sprintf capabilities for post translation value interolation\n  // This is not internally used, so you can remove it if you have this\n  // available somewhere else, or want to use a different system.\n\n  // We _slightly_ modify the normal sprintf behavior to more gracefully handle\n  // undefined values.\n\n  /**\n   sprintf() for JavaScript 0.7-beta1\n   http://www.diveintojavascript.com/projects/javascript-sprintf\n\n   Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions are met:\n       * Redistributions of source code must retain the above copyright\n         notice, this list of conditions and the following disclaimer.\n       * Redistributions in binary form must reproduce the above copyright\n         notice, this list of conditions and the following disclaimer in the\n         documentation and/or other materials provided with the distribution.\n       * Neither the name of sprintf() for JavaScript nor the\n         names of its contributors may be used to endorse or promote products\n         derived from this software without specific prior written permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   DISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY\n   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n  var sprintf = (function() {\n    function get_type(variable) {\n      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n    }\n    function str_repeat(input, multiplier) {\n      for (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}\n      return output.join('');\n    }\n\n    var str_format = function() {\n      if (!str_format.cache.hasOwnProperty(arguments[0])) {\n        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n      }\n      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n    };\n\n    str_format.format = function(parse_tree, argv) {\n      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n      for (i = 0; i < tree_length; i++) {\n        node_type = get_type(parse_tree[i]);\n        if (node_type === 'string') {\n          output.push(parse_tree[i]);\n        }\n        else if (node_type === 'array') {\n          match = parse_tree[i]; // convenience purposes only\n          if (match[2]) { // keyword argument\n            arg = argv[cursor];\n            for (k = 0; k < match[2].length; k++) {\n              if (!arg.hasOwnProperty(match[2][k])) {\n                throw(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n              }\n              arg = arg[match[2][k]];\n            }\n          }\n          else if (match[1]) { // positional argument (explicit)\n            arg = argv[match[1]];\n          }\n          else { // positional argument (implicit)\n            arg = argv[cursor++];\n          }\n\n          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {\n            throw(sprintf('[sprintf] expecting number but found %s', get_type(arg)));\n          }\n\n          // Jed EDIT\n          if ( typeof arg == 'undefined' || arg === null ) {\n            arg = '';\n          }\n          // Jed EDIT\n\n          switch (match[8]) {\n            case 'b': arg = arg.toString(2); break;\n            case 'c': arg = String.fromCharCode(arg); break;\n            case 'd': arg = parseInt(arg, 10); break;\n            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n            case 'o': arg = arg.toString(8); break;\n            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n            case 'u': arg = Math.abs(arg); break;\n            case 'x': arg = arg.toString(16); break;\n            case 'X': arg = arg.toString(16).toUpperCase(); break;\n          }\n          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n          pad_length = match[6] - String(arg).length;\n          pad = match[6] ? str_repeat(pad_character, pad_length) : '';\n          output.push(match[5] ? arg + pad : pad + arg);\n        }\n      }\n      return output.join('');\n    };\n\n    str_format.cache = {};\n\n    str_format.parse = function(fmt) {\n      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n      while (_fmt) {\n        if ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n          parse_tree.push(match[0]);\n        }\n        else if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n          parse_tree.push('%');\n        }\n        else if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {\n          if (match[2]) {\n            arg_names |= 1;\n            var field_list = [], replacement_field = match[2], field_match = [];\n            if ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n              field_list.push(field_match[1]);\n              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                if ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n                  field_list.push(field_match[1]);\n                }\n                else if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n                  field_list.push(field_match[1]);\n                }\n                else {\n                  throw('[sprintf] huh?');\n                }\n              }\n            }\n            else {\n              throw('[sprintf] huh?');\n            }\n            match[2] = field_list;\n          }\n          else {\n            arg_names |= 2;\n          }\n          if (arg_names === 3) {\n            throw('[sprintf] mixing positional and named placeholders is not (yet) supported');\n          }\n          parse_tree.push(match);\n        }\n        else {\n          throw('[sprintf] huh?');\n        }\n        _fmt = _fmt.substring(match[0].length);\n      }\n      return parse_tree;\n    };\n\n    return str_format;\n  })();\n\n  var vsprintf = function(fmt, argv) {\n    argv.unshift(fmt);\n    return sprintf.apply(null, argv);\n  };\n\n  Jed.parse_plural = function ( plural_forms, n ) {\n    plural_forms = plural_forms.replace(/n/g, n);\n    return Jed.parse_expression(plural_forms);\n  };\n\n  Jed.sprintf = function ( fmt, args ) {\n    if ( {}.toString.call( args ) == '[object Array]' ) {\n      return vsprintf( fmt, [].slice.call(args) );\n    }\n    return sprintf.apply(this, [].slice.call(arguments) );\n  };\n\n  Jed.prototype.sprintf = function () {\n    return Jed.sprintf.apply(this, arguments);\n  };\n  // END sprintf Implementation\n\n  // Start the Plural forms section\n  // This is a full plural form expression parser. It is used to avoid\n  // running 'eval' or 'new Function' directly against the plural\n  // forms.\n  //\n  // This can be important if you get translations done through a 3rd\n  // party vendor. I encourage you to use this instead, however, I\n  // also will provide a 'precompiler' that you can use at build time\n  // to output valid/safe function representations of the plural form\n  // expressions. This means you can build this code out for the most\n  // part.\n  Jed.PF = {};\n\n  Jed.PF.parse = function ( p ) {\n    var plural_str = Jed.PF.extractPluralExpr( p );\n    return Jed.PF.parser.parse.call(Jed.PF.parser, plural_str);\n  };\n\n  Jed.PF.compile = function ( p ) {\n    // Handle trues and falses as 0 and 1\n    function imply( val ) {\n      return (val === true ? 1 : val ? val : 0);\n    }\n\n    var ast = Jed.PF.parse( p );\n    return function ( n ) {\n      return imply( Jed.PF.interpreter( ast )( n ) );\n    };\n  };\n\n  Jed.PF.interpreter = function ( ast ) {\n    return function ( n ) {\n      var res;\n      switch ( ast.type ) {\n        case 'GROUP':\n          return Jed.PF.interpreter( ast.expr )( n );\n        case 'TERNARY':\n          if ( Jed.PF.interpreter( ast.expr )( n ) ) {\n            return Jed.PF.interpreter( ast.truthy )( n );\n          }\n          return Jed.PF.interpreter( ast.falsey )( n );\n        case 'OR':\n          return Jed.PF.interpreter( ast.left )( n ) || Jed.PF.interpreter( ast.right )( n );\n        case 'AND':\n          return Jed.PF.interpreter( ast.left )( n ) && Jed.PF.interpreter( ast.right )( n );\n        case 'LT':\n          return Jed.PF.interpreter( ast.left )( n ) < Jed.PF.interpreter( ast.right )( n );\n        case 'GT':\n          return Jed.PF.interpreter( ast.left )( n ) > Jed.PF.interpreter( ast.right )( n );\n        case 'LTE':\n          return Jed.PF.interpreter( ast.left )( n ) <= Jed.PF.interpreter( ast.right )( n );\n        case 'GTE':\n          return Jed.PF.interpreter( ast.left )( n ) >= Jed.PF.interpreter( ast.right )( n );\n        case 'EQ':\n          return Jed.PF.interpreter( ast.left )( n ) == Jed.PF.interpreter( ast.right )( n );\n        case 'NEQ':\n          return Jed.PF.interpreter( ast.left )( n ) != Jed.PF.interpreter( ast.right )( n );\n        case 'MOD':\n          return Jed.PF.interpreter( ast.left )( n ) % Jed.PF.interpreter( ast.right )( n );\n        case 'VAR':\n          return n;\n        case 'NUM':\n          return ast.val;\n        default:\n          throw new Error(\"Invalid Token found.\");\n      }\n    };\n  };\n\n  Jed.PF.extractPluralExpr = function ( p ) {\n    // trim first\n    p = p.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n\n    if (! /;\\s*$/.test(p)) {\n      p = p.concat(';');\n    }\n\n    var nplurals_re = /nplurals\\=(\\d+);/,\n        plural_re = /plural\\=(.*);/,\n        nplurals_matches = p.match( nplurals_re ),\n        res = {},\n        plural_matches;\n\n    // Find the nplurals number\n    if ( nplurals_matches.length > 1 ) {\n      res.nplurals = nplurals_matches[1];\n    }\n    else {\n      throw new Error('nplurals not found in plural_forms string: ' + p );\n    }\n\n    // remove that data to get to the formula\n    p = p.replace( nplurals_re, \"\" );\n    plural_matches = p.match( plural_re );\n\n    if (!( plural_matches && plural_matches.length > 1 ) ) {\n      throw new Error('`plural` expression not found: ' + p);\n    }\n    return plural_matches[ 1 ];\n  };\n\n  /* Jison generated parser */\n  Jed.PF.parser = (function(){\n\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"expressions\":3,\"e\":4,\"EOF\":5,\"?\":6,\":\":7,\"||\":8,\"&&\":9,\"<\":10,\"<=\":11,\">\":12,\">=\":13,\"!=\":14,\"==\":15,\"%\":16,\"(\":17,\")\":18,\"n\":19,\"NUMBER\":20,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",6:\"?\",7:\":\",8:\"||\",9:\"&&\",10:\"<\",11:\"<=\",12:\">\",13:\">=\",14:\"!=\",15:\"==\",16:\"%\",17:\"(\",18:\")\",19:\"n\",20:\"NUMBER\"},\nproductions_: [0,[3,2],[4,5],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,1],[4,1]],\nperformAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: return { type : 'GROUP', expr: $$[$0-1] };\nbreak;\ncase 2:this.$ = { type: 'TERNARY', expr: $$[$0-4], truthy : $$[$0-2], falsey: $$[$0] };\nbreak;\ncase 3:this.$ = { type: \"OR\", left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 4:this.$ = { type: \"AND\", left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 5:this.$ = { type: 'LT', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 6:this.$ = { type: 'LTE', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 7:this.$ = { type: 'GT', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 8:this.$ = { type: 'GTE', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 9:this.$ = { type: 'NEQ', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 10:this.$ = { type: 'EQ', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 11:this.$ = { type: 'MOD', left: $$[$0-2], right: $$[$0] };\nbreak;\ncase 12:this.$ = { type: 'GROUP', expr: $$[$0-1] };\nbreak;\ncase 13:this.$ = { type: 'VAR' };\nbreak;\ncase 14:this.$ = { type: 'NUM', val: Number(yytext) };\nbreak;\n}\n},\ntable: [{3:1,4:2,17:[1,3],19:[1,4],20:[1,5]},{1:[3]},{5:[1,6],6:[1,7],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16]},{4:17,17:[1,3],19:[1,4],20:[1,5]},{5:[2,13],6:[2,13],7:[2,13],8:[2,13],9:[2,13],10:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],16:[2,13],18:[2,13]},{5:[2,14],6:[2,14],7:[2,14],8:[2,14],9:[2,14],10:[2,14],11:[2,14],12:[2,14],13:[2,14],14:[2,14],15:[2,14],16:[2,14],18:[2,14]},{1:[2,1]},{4:18,17:[1,3],19:[1,4],20:[1,5]},{4:19,17:[1,3],19:[1,4],20:[1,5]},{4:20,17:[1,3],19:[1,4],20:[1,5]},{4:21,17:[1,3],19:[1,4],20:[1,5]},{4:22,17:[1,3],19:[1,4],20:[1,5]},{4:23,17:[1,3],19:[1,4],20:[1,5]},{4:24,17:[1,3],19:[1,4],20:[1,5]},{4:25,17:[1,3],19:[1,4],20:[1,5]},{4:26,17:[1,3],19:[1,4],20:[1,5]},{4:27,17:[1,3],19:[1,4],20:[1,5]},{6:[1,7],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[1,28]},{6:[1,7],7:[1,29],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16]},{5:[2,3],6:[2,3],7:[2,3],8:[2,3],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[2,3]},{5:[2,4],6:[2,4],7:[2,4],8:[2,4],9:[2,4],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[2,4]},{5:[2,5],6:[2,5],7:[2,5],8:[2,5],9:[2,5],10:[2,5],11:[2,5],12:[2,5],13:[2,5],14:[2,5],15:[2,5],16:[1,16],18:[2,5]},{5:[2,6],6:[2,6],7:[2,6],8:[2,6],9:[2,6],10:[2,6],11:[2,6],12:[2,6],13:[2,6],14:[2,6],15:[2,6],16:[1,16],18:[2,6]},{5:[2,7],6:[2,7],7:[2,7],8:[2,7],9:[2,7],10:[2,7],11:[2,7],12:[2,7],13:[2,7],14:[2,7],15:[2,7],16:[1,16],18:[2,7]},{5:[2,8],6:[2,8],7:[2,8],8:[2,8],9:[2,8],10:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[1,16],18:[2,8]},{5:[2,9],6:[2,9],7:[2,9],8:[2,9],9:[2,9],10:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[1,16],18:[2,9]},{5:[2,10],6:[2,10],7:[2,10],8:[2,10],9:[2,10],10:[2,10],11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[2,10],16:[1,16],18:[2,10]},{5:[2,11],6:[2,11],7:[2,11],8:[2,11],9:[2,11],10:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],16:[2,11],18:[2,11]},{5:[2,12],6:[2,12],7:[2,12],8:[2,12],9:[2,12],10:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],16:[2,12],18:[2,12]},{4:30,17:[1,3],19:[1,4],20:[1,5]},{5:[2,2],6:[1,7],7:[2,2],8:[1,8],9:[1,9],10:[1,10],11:[1,11],12:[1,12],13:[1,13],14:[1,14],15:[1,15],16:[1,16],18:[2,2]}],\ndefaultActions: {6:[2,1]},\nparseError: function parseError(str, hash) {\n    throw new Error(str);\n},\nparse: function parse(input) {\n    var self = this,\n        stack = [0],\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    if (typeof this.lexer.yylloc == 'undefined')\n        this.lexer.yylloc = {};\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n\n    if (typeof this.yy.parseError === 'function')\n        this.parseError = this.yy.parseError;\n\n    function popStack (n) {\n        stack.length = stack.length - 2*n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n    function lex() {\n        var token;\n        token = self.lexer.lex() || 1; // $end = 1\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length-1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol == null)\n                symbol = lex();\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n        // handle parse error\n        _handle_error:\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n\n            if (!recovering) {\n                // Report error\n                expected = [];\n                for (p in table[state]) if (this.terminals_[p] && p > 2) {\n                    expected.push(\"'\"+this.terminals_[p]+\"'\");\n                }\n                var errStr = '';\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+this.lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + this.terminals_[symbol]+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == 1 /*EOF*/ ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr,\n                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol == EOF) {\n                    throw new Error(errStr || 'Parsing halted.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            while (1) {\n                // check for error recovery rule in this state\n                if ((TERROR.toString()) in table[state]) {\n                    break;\n                }\n                if (state == 0) {\n                    throw new Error(errStr || 'Parsing halted.');\n                }\n                popStack(1);\n                state = stack[stack.length-1];\n            }\n\n            preErrorSymbol = symbol; // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(this.lexer.yytext);\n                lstack.push(this.lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = this.lexer.yyleng;\n                    yytext = this.lexer.yytext;\n                    yylineno = this.lexer.yylineno;\n                    yyloc = this.lexer.yylloc;\n                    if (recovering > 0)\n                        recovering--;\n                } else { // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2: // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3: // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};/* Jison generated lexer */\nvar lexer = (function(){\n\nvar lexer = ({EOF:1,\nparseError:function parseError(str, hash) {\n        if (this.yy.parseError) {\n            this.yy.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._less = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};\n        return this;\n    },\ninput:function () {\n        var ch = this._input[0];\n        this.yytext+=ch;\n        this.yyleng++;\n        this.match+=ch;\n        this.matched+=ch;\n        var lines = ch.match(/\\n/);\n        if (lines) this.yylineno++;\n        this._input = this._input.slice(1);\n        return ch;\n    },\nunput:function (ch) {\n        this._input = ch + this._input;\n        return this;\n    },\nmore:function () {\n        this._more = true;\n        return this;\n    },\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\\n/g, \"\");\n    },\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c+\"^\";\n    },\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) this.done = true;\n\n        var token,\n            match,\n            col,\n            lines;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i=0;i < rules.length; i++) {\n            match = this._input.match(this.rules[rules[i]]);\n            if (match) {\n                lines = match[0].match(/\\n.*/g);\n                if (lines) this.yylineno += lines.length;\n                this.yylloc = {first_line: this.yylloc.last_line,\n                               last_line: this.yylineno+1,\n                               first_column: this.yylloc.last_column,\n                               last_column: lines ? lines[lines.length-1].length-1 : this.yylloc.last_column + match[0].length}\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                this._more = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, rules[i],this.conditionStack[this.conditionStack.length-1]);\n                if (token) return token;\n                else return;\n            }\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\\n'+this.showPosition(),\n                    {text: \"\", token: null, line: this.yylineno});\n        }\n    },\nlex:function lex() {\n        var r = this.next();\n        if (typeof r !== 'undefined') {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\npopState:function popState() {\n        return this.conditionStack.pop();\n    },\n_currentRules:function _currentRules() {\n        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;\n    },\ntopState:function () {\n        return this.conditionStack[this.conditionStack.length-2];\n    },\npushState:function begin(condition) {\n        this.begin(condition);\n    }});\nlexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 20\nbreak;\ncase 2:return 19\nbreak;\ncase 3:return 8\nbreak;\ncase 4:return 9\nbreak;\ncase 5:return 6\nbreak;\ncase 6:return 7\nbreak;\ncase 7:return 11\nbreak;\ncase 8:return 13\nbreak;\ncase 9:return 10\nbreak;\ncase 10:return 12\nbreak;\ncase 11:return 14\nbreak;\ncase 12:return 15\nbreak;\ncase 13:return 16\nbreak;\ncase 14:return 17\nbreak;\ncase 15:return 18\nbreak;\ncase 16:return 5\nbreak;\ncase 17:return 'INVALID'\nbreak;\n}\n};\nlexer.rules = [/^\\s+/,/^[0-9]+(\\.[0-9]+)?\\b/,/^n\\b/,/^\\|\\|/,/^&&/,/^\\?/,/^:/,/^<=/,/^>=/,/^</,/^>/,/^!=/,/^==/,/^%/,/^\\(/,/^\\)/,/^$/,/^./];\nlexer.conditions = {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],\"inclusive\":true}};return lexer;})()\nparser.lexer = lexer;\nreturn parser;\n})();\n// End parser\n\n  // Handle node, amd, and global systems\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = Jed;\n    }\n    exports.Jed = Jed;\n  }\n  else {\n    if (typeof define === 'function' && define.amd) {\n      define(function() {\n        return Jed;\n      });\n    }\n    // Leak a global regardless of module system\n    root['Jed'] = Jed;\n  }\n\n})(this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/jed/jed.js\n// module id = 170\n// module chunks = 0 1 2 3 4 6 7 9\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/jed/jed.js?");

/***/ }),
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(324),\n    getRawTag = __webpack_require__(1155),\n    objectToString = __webpack_require__(1156);\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseGetTag.js\n// module id = 174\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseGetTag.js?");

/***/ }),
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/countWords */\n\nvar getWords = __webpack_require__(229);\n/**\n * Calculates the wordcount of a certain text.\n *\n * @param {string} text The text to be counted.\n * @returns {int} The word count of the given text.\n */\nmodule.exports = function (text) {\n  return getWords(text).length;\n};\n//# sourceMappingURL=countWords.js.map\n//# sourceMappingURL=countWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/countWords.js\n// module id = 185\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/countWords.js?");

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * The function getting the language part of the locale.\n *\n * @param {string} locale The locale.\n * @returns {string} The language part of the locale.\n */\n\nmodule.exports = function (locale) {\n  return locale.split(\"_\")[0];\n};\n//# sourceMappingURL=getLanguage.js.map\n//# sourceMappingURL=getLanguage.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getLanguage.js\n// module id = 186\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getLanguage.js?");

/***/ }),
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

eval("var MapCache = __webpack_require__(685);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/memoize.js\n// module id = 214\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/memoize.js?");

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar map = __webpack_require__(63);\nvar isUndefined = __webpack_require__(66);\nvar forEach = __webpack_require__(32);\nvar isNaN = __webpack_require__(1360);\nvar filter = __webpack_require__(112);\nvar flatMap = __webpack_require__(586);\nvar isEmpty = __webpack_require__(97);\nvar negate = __webpack_require__(1203);\nvar memoize = __webpack_require__(214);\nvar core = __webpack_require__(359);\nvar getBlocks = __webpack_require__(684).getBlocks;\nvar normalizeQuotes = __webpack_require__(328).normalize;\nvar unifyWhitespace = __webpack_require__(1204).unifyNonBreakingSpace;\n// All characters that indicate a sentence delimiter.\nvar fullStop = \".\";\n// The \\u2026 character is an ellipsis\nvar sentenceDelimiters = \"?!;\\u2026\";\nvar newLines = \"\\n\\r|\\n|\\r\";\nvar fullStopRegex = new RegExp(\"^[\" + fullStop + \"]$\");\nvar sentenceDelimiterRegex = new RegExp(\"^[\" + sentenceDelimiters + \"]$\");\nvar sentenceRegex = new RegExp(\"^[^\" + fullStop + sentenceDelimiters + \"<\\\\(\\\\)\\\\[\\\\]]+$\");\nvar htmlStartRegex = /^<([^>\\s/]+)[^>]*>$/mi;\nvar htmlEndRegex = /^<\\/([^>\\s]+)[^>]*>$/mi;\nvar newLineRegex = new RegExp(newLines);\nvar blockStartRegex = /^\\s*[[({]\\s*$/;\nvar blockEndRegex = /^\\s*[\\])}]\\s*$/;\nvar tokens = [];\nvar sentenceTokenizer;\n/**\n * Creates a tokenizer to create tokens from a sentence.\n *\n * @returns {void}\n */\nfunction createTokenizer() {\n    tokens = [];\n    sentenceTokenizer = core(function (token) {\n        tokens.push(token);\n    });\n    sentenceTokenizer.addRule(htmlStartRegex, \"html-start\");\n    sentenceTokenizer.addRule(htmlEndRegex, \"html-end\");\n    sentenceTokenizer.addRule(blockStartRegex, \"block-start\");\n    sentenceTokenizer.addRule(blockEndRegex, \"block-end\");\n    sentenceTokenizer.addRule(fullStopRegex, \"full-stop\");\n    sentenceTokenizer.addRule(sentenceDelimiterRegex, \"sentence-delimiter\");\n    sentenceTokenizer.addRule(sentenceRegex, \"sentence\");\n}\n/**\n * Returns whether or not a certain character is a capital letter.\n *\n * @param {string} character The character to check.\n * @returns {boolean} Whether or not the character is a capital letter.\n */\nfunction isCapitalLetter(character) {\n    return character !== character.toLocaleLowerCase();\n}\n/**\n * Returns whether or not a certain character is a number.\n *\n * @param {string} character The character to check.\n * @returns {boolean} Whether or not the character is a capital letter.\n */\nfunction isNumber(character) {\n    return !isNaN(parseInt(character, 10));\n}\n/**\n * Returns whether or not a given HTML tag is a break tag.\n *\n * @param {string} htmlTag The HTML tag to check.\n * @returns {boolean} Whether or not the given HTML tag is a break tag.\n */\nfunction isBreakTag(htmlTag) {\n    return (/<br/.test(htmlTag)\n    );\n}\n/**\n * Returns whether or not a given character is quotation mark.\n *\n * @param {string} character The character to check.\n * @returns {boolean} Whether or not the given character is a quotation mark.\n */\nfunction isQuotation(character) {\n    character = normalizeQuotes(character);\n    return \"'\" === character || \"\\\"\" === character;\n}\n/**\n * Returns whether or not a given character is a punctuation mark that can be at the beginning\n * of a sentence, like ¿ and ¡ used in Spanish.\n *\n * @param {string} character The character to check.\n * @returns {boolean} Whether or not the given character is a punctuation mark.\n */\nfunction isPunctuation(character) {\n    return \"¿\" === character || \"¡\" === character;\n}\n/**\n * Tokenizes a sentence, assumes that the text has already been split into blocks.\n *\n * @param {string} text The text to tokenize.\n * @returns {Array} An array of tokens.\n */\nfunction tokenizeSentences(text) {\n    createTokenizer();\n    sentenceTokenizer.onText(text);\n    sentenceTokenizer.end();\n    return tokens;\n}\n/**\n * Removes duplicate whitespace from a given text.\n *\n * @param {string} text The text with duplicate whitespace.\n * @returns {string} The text without duplicate whitespace.\n */\nfunction removeDuplicateWhitespace(text) {\n    return text.replace(/\\s+/, \" \");\n}\n/**\n * Retrieves the next two characters from an array with the two next tokens.\n *\n * @param {Array} nextTokens The two next tokens. Might be undefined.\n * @returns {string} The next two characters.\n */\nfunction getNextTwoCharacters(nextTokens) {\n    var next = \"\";\n    if (!isUndefined(nextTokens[0])) {\n        next += nextTokens[0].src;\n    }\n    if (!isUndefined(nextTokens[1])) {\n        next += nextTokens[1].src;\n    }\n    next = removeDuplicateWhitespace(next);\n    return next;\n}\n/**\n * Checks if the sentenceBeginning beginning is a valid beginning.\n *\n * @param {string} sentenceBeginning The beginning of the sentence to validate.\n * @returns {boolean} Returns true if it is a valid beginning, false if it is not.\n */\nfunction isValidSentenceBeginning(sentenceBeginning) {\n    return isCapitalLetter(sentenceBeginning) || isNumber(sentenceBeginning) || isQuotation(sentenceBeginning) || isPunctuation(sentenceBeginning);\n}\n/**\n * Checks if the token is a valid sentence ending.\n *\n * @param {Object} token The token to validate.\n * @returns {boolean} Returns true if the token is valid ending, false if it is not.\n */\nfunction isSentenceStart(token) {\n    return !isUndefined(token) && (\"html-start\" === token.type || \"html-end\" === token.type || \"block-start\" === token.type);\n}\n/**\n * Returns an array of sentences for a given array of tokens, assumes that the text has already been split into blocks.\n *\n * @param {Array} tokens The tokens from the sentence tokenizer.\n * @returns {Array<string>} A list of sentences.\n */\nfunction getSentencesFromTokens(tokens) {\n    var tokenSentences = [],\n        currentSentence = \"\",\n        nextSentenceStart;\n    var sliced;\n    // Drop the first and last HTML tag if both are present.\n    do {\n        sliced = false;\n        var firstToken = tokens[0];\n        var lastToken = tokens[tokens.length - 1];\n        if (firstToken.type === \"html-start\" && lastToken.type === \"html-end\") {\n            tokens = tokens.slice(1, tokens.length - 1);\n            sliced = true;\n        }\n    } while (sliced && tokens.length > 1);\n    forEach(tokens, function (token, i) {\n        var hasNextSentence;\n        var nextToken = tokens[i + 1];\n        var secondToNextToken = tokens[i + 2];\n        var nextCharacters;\n        switch (token.type) {\n            case \"html-start\":\n            case \"html-end\":\n                if (isBreakTag(token.src)) {\n                    tokenSentences.push(currentSentence);\n                    currentSentence = \"\";\n                } else {\n                    currentSentence += token.src;\n                }\n                break;\n            case \"sentence\":\n                currentSentence += token.src;\n                break;\n            case \"sentence-delimiter\":\n                currentSentence += token.src;\n                if (!isUndefined(nextToken) && \"block-end\" !== nextToken.type && \"sentence-delimiter\" !== nextToken.type) {\n                    tokenSentences.push(currentSentence);\n                    currentSentence = \"\";\n                }\n                break;\n            case \"full-stop\":\n                currentSentence += token.src;\n                nextCharacters = getNextTwoCharacters([nextToken, secondToNextToken]);\n                // For a new sentence we need to check the next two characters.\n                hasNextSentence = nextCharacters.length >= 2;\n                nextSentenceStart = hasNextSentence ? nextCharacters[1] : \"\";\n                // If the next character is a number, never split. For example: IPv4-numbers.\n                if (hasNextSentence && isNumber(nextCharacters[0])) {\n                    break;\n                }\n                // Only split on sentence delimiters when the next sentence looks like the start of a sentence.\n                if (hasNextSentence && isValidSentenceBeginning(nextSentenceStart) || isSentenceStart(nextToken)) {\n                    tokenSentences.push(currentSentence);\n                    currentSentence = \"\";\n                }\n                break;\n            case \"block-start\":\n                currentSentence += token.src;\n                break;\n            case \"block-end\":\n                currentSentence += token.src;\n                nextCharacters = getNextTwoCharacters([nextToken, secondToNextToken]);\n                // For a new sentence we need to check the next two characters.\n                hasNextSentence = nextCharacters.length >= 2;\n                nextSentenceStart = hasNextSentence ? nextCharacters[0] : \"\";\n                // If the next character is a number, never split. For example: IPv4-numbers.\n                if (hasNextSentence && isNumber(nextCharacters[0])) {\n                    break;\n                }\n                if (hasNextSentence && isValidSentenceBeginning(nextSentenceStart) || isSentenceStart(nextToken)) {\n                    tokenSentences.push(currentSentence);\n                    currentSentence = \"\";\n                }\n                break;\n        }\n    });\n    if (\"\" !== currentSentence) {\n        tokenSentences.push(currentSentence);\n    }\n    tokenSentences = map(tokenSentences, function (sentence) {\n        return sentence.trim();\n    });\n    return tokenSentences;\n}\n/**\n * Returns the sentences from a certain block.\n *\n * @param {string} block The HTML inside a HTML block.\n * @returns {Array<string>} The list of sentences in the block.\n */\nfunction getSentencesFromBlock(block) {\n    var tokens = tokenizeSentences(block);\n    return tokens.length === 0 ? [] : getSentencesFromTokens(tokens);\n}\nvar getSentencesFromBlockCached = memoize(getSentencesFromBlock);\n/**\n * Returns sentences in a string.\n *\n * @param {String} text The string to count sentences in.\n * @returns {Array} Sentences found in the text.\n */\nmodule.exports = function (text) {\n    text = unifyWhitespace(text);\n    var sentences,\n        blocks = getBlocks(text);\n    // Split each block on newlines.\n    blocks = flatMap(blocks, function (block) {\n        return block.split(newLineRegex);\n    });\n    sentences = flatMap(blocks, getSentencesFromBlockCached);\n    return filter(sentences, negate(isEmpty));\n};\n//# sourceMappingURL=getSentences.js.map\n//# sourceMappingURL=getSentences.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getSentences.js\n// module id = 215\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getSentences.js?");

/***/ }),
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */
/***/ (function(module, exports) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/events/events.js\n// module id = 227\n// module chunks = 0 1 2 3 4 7\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/events/events.js?");

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsNative = __webpack_require__(1165),\n    getValue = __webpack_require__(1168);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getNative.js\n// module id = 228\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getNative.js?");

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/countWords */\n\nvar stripTags = __webpack_require__(167).stripFullTags;\nvar stripSpaces = __webpack_require__(84);\nvar removePunctuation = __webpack_require__(689);\nvar map = __webpack_require__(63);\nvar filter = __webpack_require__(112);\n/**\n * Returns an array with words used in the text.\n *\n * @param {string} text The text to be counted.\n * @returns {Array} The array with all words.\n */\nmodule.exports = function (text) {\n    text = stripSpaces(stripTags(text));\n    if (text === \"\") {\n        return [];\n    }\n    var words = text.split(/\\s/g);\n    words = map(words, function (word) {\n        return removePunctuation(word);\n    });\n    return filter(words, function (word) {\n        return word.trim() !== \"\";\n    });\n};\n//# sourceMappingURL=getWords.js.map\n//# sourceMappingURL=getWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getWords.js\n// module id = 229\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getWords.js?");

/***/ }),
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseMatches = __webpack_require__(1334),\n    baseMatchesProperty = __webpack_require__(1352),\n    identity = __webpack_require__(325),\n    isArray = __webpack_require__(64),\n    property = __webpack_require__(1358);\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIteratee.js\n// module id = 267\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIteratee.js?");

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/matchTextWithWord */\n\nvar stripSomeTags = __webpack_require__(1228);\nvar stripSpaces = __webpack_require__(84);\nvar removePunctuation = __webpack_require__(689);\nvar unifyWhitespace = __webpack_require__(1204).unifyAllSpaces;\nvar matchStringWithTransliteration = __webpack_require__(1214);\nvar normalizeQuotes = __webpack_require__(328).normalize;\nvar map = __webpack_require__(63);\n/**\n * Returns the number of matches in a given string\n *\n * @param {string} text The text to use for matching the wordToMatch.\n * @param {string} wordToMatch The word to match in the text\n * @param {string} locale The locale used for transliteration.\n * @param {string} [extraBoundary] An extra string that can be added to the wordboundary regex\n * @returns {Object} The matches found and the number of matches.\n */\nmodule.exports = function (text, wordToMatch, locale, extraBoundary) {\n    text = stripSomeTags(text);\n    text = unifyWhitespace(text);\n    text = normalizeQuotes(text);\n    wordToMatch = normalizeQuotes(wordToMatch);\n    var matches = matchStringWithTransliteration(text, wordToMatch, locale, extraBoundary);\n    matches = map(matches, function (keyword) {\n        return stripSpaces(removePunctuation(keyword));\n    });\n    return {\n        count: matches.length,\n        matches: matches\n    };\n};\n//# sourceMappingURL=matchTextWithWord.js.map\n//# sourceMappingURL=matchTextWithWord.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchTextWithWord.js\n// module id = 268\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchTextWithWord.js?");

/***/ }),
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/querystring-es3/encode.js\n// module id = 287\n// module chunks = 0 1 2 3 4 7\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/querystring-es3/encode.js?");

/***/ }),
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeKeys = __webpack_require__(1079),\n    baseKeys = __webpack_require__(1081),\n    isArrayLike = __webpack_require__(168);\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/keys.js\n// module id = 323\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/keys.js?");

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(121);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Symbol.js\n// module id = 324\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Symbol.js?");

/***/ }),
/* 325 */
/***/ (function(module, exports) {

eval("/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/identity.js\n// module id = 325\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/identity.js?");

/***/ }),
/* 326 */
/***/ (function(module, exports) {

eval("/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/eq.js\n// module id = 326\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/eq.js?");

/***/ }),
/* 327 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayMap.js\n// module id = 327\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayMap.js?");

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Normalizes single quotes to 'regular' quotes.\n *\n * @param {string} text Text to normalize.\n * @returns {string} The normalized text.\n */\n\nfunction normalizeSingleQuotes(text) {\n    return text.replace(/[‘’‛`]/g, \"'\");\n}\n/**\n * Normalizes double quotes to 'regular' quotes.\n *\n * @param {string} text Text to normalize.\n * @returns {string} The normalized text.\n */\nfunction normalizeDoubleQuotes(text) {\n    return text.replace(/[“”〝〞〟‟„]/g, \"\\\"\");\n}\n/**\n * Normalizes quotes to 'regular' quotes.\n *\n * @param {string} text Text to normalize.\n * @returns {string} The normalized text.\n */\nfunction normalizeQuotes(text) {\n    return normalizeDoubleQuotes(normalizeSingleQuotes(text));\n}\nmodule.exports = {\n    normalizeSingle: normalizeSingleQuotes,\n    normalizeDouble: normalizeDoubleQuotes,\n    normalize: normalizeQuotes\n};\n//# sourceMappingURL=quotes.js.map\n//# sourceMappingURL=quotes.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/quotes.js\n// module id = 328\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/quotes.js?");

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(690);\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = __webpack_require__(567);\nutil.inherits = __webpack_require__(44);\n/*</replacement>*/\n\nvar Readable = __webpack_require__(1222);\nvar Writable = __webpack_require__(1101);\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_duplex.js\n// module id = 329\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_duplex.js?");

/***/ }),
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(228);\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nativeCreate.js\n// module id = 350\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nativeCreate.js?");

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

eval("var eq = __webpack_require__(326);\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_assocIndexOf.js\n// module id = 351\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_assocIndexOf.js?");

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isKeyable = __webpack_require__(1179);\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getMapData.js\n// module id = 352\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getMapData.js?");

/***/ }),
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */
/***/ (function(module, exports) {

eval("var findMatchingRule = function(rules, text){\n  var i;\n  for(i=0; i<rules.length; i++)\n    if(rules[i].regex.test(text))\n      return rules[i];\n  return undefined;\n};\n\nvar findMaxIndexAndRule = function(rules, text){\n  var i, rule, last_matching_rule;\n  for(i=0; i<text.length; i++){\n    rule = findMatchingRule(rules, text.substring(0, i + 1));\n    if(rule)\n      last_matching_rule = rule;\n    else if(last_matching_rule)\n      return {max_index: i, rule: last_matching_rule};\n  }\n  return last_matching_rule ? {max_index: text.length, rule: last_matching_rule} : undefined;\n};\n\nmodule.exports = function(onToken_orig){\n  var buffer = \"\";\n  var rules = [];\n  var line = 1;\n  var col = 1;\n\n  var onToken = function(src, type){\n    onToken_orig({\n      type: type,\n      src: src,\n      line: line,\n      col: col\n    });\n    var lines = src.split(\"\\n\");\n    line += lines.length - 1;\n    col = (lines.length > 1 ? 1 : col) + lines[lines.length - 1].length;\n  };\n\n  return {\n    addRule: function(regex, type){\n      rules.push({regex: regex, type: type});\n    },\n    onText: function(text){\n      var str = buffer + text;\n      var m = findMaxIndexAndRule(rules, str);\n      while(m && m.max_index !== str.length){\n        onToken(str.substring(0, m.max_index), m.rule.type);\n\n        //now find the next token\n        str = str.substring(m.max_index);\n        m = findMaxIndexAndRule(rules, str);\n      }\n      buffer = str;\n    },\n    end: function(){\n      if(buffer.length === 0)\n        return;\n\n      var rule = findMatchingRule(rules, buffer);\n      if(!rule){\n        var err = new Error(\"unable to tokenize\");\n        err.tokenizer2 = {\n          buffer: buffer,\n          line: line,\n          col: col\n        };\n        throw err;\n      }\n\n      onToken(buffer, rule.type);\n    }\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/tokenizer2/core.js\n// module id = 359\n// module chunks = 0 1 2 3 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/tokenizer2/core.js?");

/***/ }),
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsArguments = __webpack_require__(1154),\n    isObjectLike = __webpack_require__(124);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArguments.js\n// module id = 388\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArguments.js?");

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(174),\n    isObject = __webpack_require__(96);\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isFunction.js\n// module id = 389\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isFunction.js?");

/***/ }),
/* 390 */,
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/createRegexFromArray */\n\nvar addWordBoundary = __webpack_require__(565);\nvar map = __webpack_require__(63);\n/**\n * Creates a regex of combined strings from the input array.\n *\n * @param {array} array The array with strings\n * @param {boolean} [disableWordBoundary] Boolean indicating whether or not to disable word boundaries\n * @returns {RegExp} regex The regex created from the array.\n */\nmodule.exports = function (array, disableWordBoundary) {\n    var regexString;\n    var _disableWordBoundary = disableWordBoundary || false;\n    var boundedArray = map(array, function (string) {\n        if (_disableWordBoundary) {\n            return string;\n        }\n        return addWordBoundary(string, true);\n    });\n    regexString = \"(\" + boundedArray.join(\")|(\") + \")\";\n    return new RegExp(regexString, \"ig\");\n};\n//# sourceMappingURL=createRegexFromArray.js.map\n//# sourceMappingURL=createRegexFromArray.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/createRegexFromArray.js\n// module id = 391\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/createRegexFromArray.js?");

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar forEach = __webpack_require__(32);\nvar getWords = __webpack_require__(229);\nvar matchParticiples = __webpack_require__(1485)();\nvar regularParticipleRegex = matchParticiples.regularParticiples;\nvar irregularParticipleRegex = matchParticiples.irregularParticiples;\nvar EnglishParticiple = __webpack_require__(1491);\nvar FrenchParticiple = __webpack_require__(1496);\nvar SpanishParticiple = __webpack_require__(1497);\nvar ItalianParticiple = __webpack_require__(1498);\nvar DutchParticiple = __webpack_require__(1499);\n/**\n * Creates participle objects for the participles found in a sentence part.\n *\n * @param {string} sentencePartText The sentence part to find participles in.\n * @param {Array} auxiliaries The list of auxiliaries from the sentence part.\n * @param {string} language The language to find the participles for.\n * @returns {Array} The list with participle objects.\n */\nmodule.exports = function (sentencePartText, auxiliaries, language) {\n    var words = getWords(sentencePartText);\n    var foundParticiples = [];\n    forEach(words, function (word) {\n        var type = \"\";\n        if (regularParticipleRegex(word, language).length !== 0) {\n            type = \"regular\";\n        }\n        if (irregularParticipleRegex(word, language).length !== 0) {\n            type = \"irregular\";\n        }\n        if (type !== \"\") {\n            switch (language) {\n                case \"fr\":\n                    foundParticiples.push(new FrenchParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type, language: language }));\n                    break;\n                case \"es\":\n                    foundParticiples.push(new SpanishParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type, language: language }));\n                    break;\n                case \"it\":\n                    foundParticiples.push(new ItalianParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type, language: language }));\n                    break;\n                case \"nl\":\n                    foundParticiples.push(new DutchParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type, language: language }));\n                    break;\n                case \"en\":\n                default:\n                    foundParticiples.push(new EnglishParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type, language: language }));\n                    break;\n            }\n        }\n    });\n    return foundParticiples;\n};\n//# sourceMappingURL=getParticiples.js.map\n//# sourceMappingURL=getParticiples.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getParticiples.js\n// module id = 392\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getParticiples.js?");

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getType = __webpack_require__(1252).getType;\nvar isSameType = __webpack_require__(1252).isSameType;\nvar defaults = __webpack_require__(1128);\nvar forEach = __webpack_require__(32);\n/**\n * Default attributes to be used by the Participle if they are left undefined.\n * @type { { auxiliaries: array, type: string } }\n */\nvar defaultAttributes = {\n    auxiliaries: [],\n    type: \"\",\n    language: \"\"\n};\n/**\n * Validates the type of all attributes. Throws an error if the type is invalid.\n *\n * @param {object} attributes The object containing all attributes.\n * @returns {void}\n */\nvar validateAttributes = function validateAttributes(attributes) {\n    forEach(attributes, function (attributeValue, attributeName) {\n        var expectedType = getType(defaultAttributes[attributeName]);\n        if (isSameType(attributeValue, expectedType) === false) {\n            throw Error(\"Attribute \" + attributeName + \" has invalid type. Expected \" + expectedType + \", got \" + getType(attributeValue) + \".\");\n        }\n    });\n};\n/**\n * Construct the Participle object and set the participle, sentence part, auxiliary and type.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part where the participle is from.\n * @param {object} attributes The object containing all attributes.\n * @constructor\n */\nvar Participle = function Participle(participle, sentencePart, attributes) {\n    this.setParticiple(participle);\n    this.setSentencePart(sentencePart);\n    this._determinesSentencePartIsPassive = false;\n    attributes = attributes || {};\n    defaults(attributes, defaultAttributes);\n    validateAttributes(attributes);\n    this._attributes = attributes;\n};\n/**\n * Sets the participle.\n * @param {string} participle The participle.\n * @returns {void}.\n */\nParticiple.prototype.setParticiple = function (participle) {\n    if (participle === \"\") {\n        throw Error(\"The participle should not be empty.\");\n    }\n    this._participle = participle;\n};\n/**\n * Returns the participle.\n * @returns {String} The participle.\n */\nParticiple.prototype.getParticiple = function () {\n    return this._participle;\n};\n/**\n * Sets the SentencePart.\n *\n * @param {string} sentencePart The sentence part.\n * @returns {void}.\n */\nParticiple.prototype.setSentencePart = function (sentencePart) {\n    if (sentencePart === \"\") {\n        throw Error(\"The sentence part should not be empty.\");\n    }\n    this._sentencePart = sentencePart;\n};\n/**\n * Returns the sentence part.\n * @returns {String} The sentence part.\n */\nParticiple.prototype.getSentencePart = function () {\n    return this._sentencePart;\n};\n/**\n * Returns the type.\n * @returns {String} The type.\n */\nParticiple.prototype.getType = function () {\n    return this._attributes.type;\n};\n/**\n * Returns the auxiliaries.\n * @returns {String} The auxiliaries.\n */\nParticiple.prototype.getAuxiliaries = function () {\n    return this._attributes.auxiliaries;\n};\n/**\n * Returns the language.\n * @returns {string} The language.\n */\nParticiple.prototype.getLanguage = function () {\n    return this._attributes.language;\n};\n/**\n * Returns if the participle is passive or not.\n * @returns {boolean} True if it is passive.\n */\nParticiple.prototype.determinesSentencePartIsPassive = function () {\n    return this._determinesSentencePartIsPassive;\n};\n/**\n * Determines if the sentence is passive or not.\n * @param {boolean} passive Whether the sentence part is passive.\n * @returns {void}\n */\nParticiple.prototype.setSentencePartPassiveness = function (passive) {\n    if (!isSameType(passive, \"boolean\")) {\n        throw Error(\"Passiveness had invalid type. Expected boolean, got \" + getType(passive) + \".\");\n    }\n    this._determinesSentencePartIsPassive = passive;\n};\nmodule.exports = Participle;\n//# sourceMappingURL=Participle.js.map\n//# sourceMappingURL=Participle.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Participle.js\n// module id = 393\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Participle.js?");

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Constructs a sentence part object.\n *\n * @param {string} sentencePartText The text in the sentence part.\n * @param {Array} auxiliaries The list of auxiliaries from the sentence part.\n * @param {string} locale The locale used for this sentence part.\n *\n * @constructor\n */\n\nvar SentencePart = function SentencePart(sentencePartText, auxiliaries, locale) {\n  this._sentencePartText = sentencePartText;\n  this._auxiliaries = auxiliaries;\n  this._locale = locale;\n  this._isPassive = false;\n};\n/**\n * Returns the sentence part string.\n *\n * @returns {string} The sentence part.\n */\nSentencePart.prototype.getSentencePartText = function () {\n  return this._sentencePartText;\n};\n/**\n * Returns the passiveness of a sentence part.\n *\n * @returns {boolean} returns true if passive, otherwise returns false.\n */\nSentencePart.prototype.isPassive = function () {\n  return this._isPassive;\n};\n/**\n * Returns the list of auxiliaries from a sentence part.\n *\n * @returns {Array} The list of auxiliaries.\n */\nSentencePart.prototype.getAuxiliaries = function () {\n  return this._auxiliaries;\n};\n/**\n * Returns the locale of the sentence part.\n *\n * @returns {string} The locale of the sentence part.\n */\nSentencePart.prototype.getLocale = function () {\n  return this._locale;\n};\n/**\n * Sets the passiveness of the sentence part.\n *\n * @param {boolean} passive Whether the sentence part is passive or not.\n * @returns {void}\n */\nSentencePart.prototype.setPassive = function (passive) {\n  this._isPassive = passive;\n};\nmodule.exports = SentencePart;\n//# sourceMappingURL=SentencePart.js.map\n//# sourceMappingURL=SentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/SentencePart.js\n// module id = 394\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/SentencePart.js?");

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Checks if `n` is between `start` and `end` but not including `start`.\n *\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\n\nfunction inRangeEndInclusive(number, start, end) {\n    return number > start && number <= end;\n}\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`.\n *\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nfunction inRangeStartInclusive(number, start, end) {\n    return number >= start && number < end;\n}\n/**\n * Checks if `n` is between `start` and `end`, including both.\n *\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nfunction inRangeStartEndInclusive(number, start, end) {\n    return number >= start && number <= end;\n}\nmodule.exports = {\n    inRange: inRangeEndInclusive,\n    inRangeStartInclusive: inRangeStartInclusive,\n    inRangeEndInclusive: inRangeEndInclusive,\n    inRangeStartEndInclusive: inRangeStartEndInclusive\n};\n//# sourceMappingURL=inRange.js.map\n//# sourceMappingURL=inRange.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/inRange.js\n// module id = 395\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/inRange.js?");

/***/ }),
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(121),\n    stubFalse = __webpack_require__(1157);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isBuffer.js\n// module id = 400\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isBuffer.js?");

/***/ }),
/* 401 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseUnary.js\n// module id = 401\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseUnary.js?");

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

eval("var identity = __webpack_require__(325),\n    overRest = __webpack_require__(1210),\n    setToString = __webpack_require__(1211);\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseRest.js\n// module id = 402\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseRest.js?");

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Parser = __webpack_require__(1216),\n    DomHandler = __webpack_require__(1380);\n\nfunction defineProp(name, value){\n\tdelete module.exports[name];\n\tmodule.exports[name] = value;\n\treturn value;\n}\n\nmodule.exports = {\n\tParser: Parser,\n\tTokenizer: __webpack_require__(1217),\n\tElementType: __webpack_require__(566),\n\tDomHandler: DomHandler,\n\tget FeedHandler(){\n\t\treturn defineProp(\"FeedHandler\", __webpack_require__(1382));\n\t},\n\tget Stream(){\n\t\treturn defineProp(\"Stream\", __webpack_require__(1383));\n\t},\n\tget WritableStream(){\n\t\treturn defineProp(\"WritableStream\", __webpack_require__(1221));\n\t},\n\tget ProxyHandler(){\n\t\treturn defineProp(\"ProxyHandler\", __webpack_require__(1398));\n\t},\n\tget DomUtils(){\n\t\treturn defineProp(\"DomUtils\", __webpack_require__(1399));\n\t},\n\tget CollectingHandler(){\n\t\treturn defineProp(\"CollectingHandler\", __webpack_require__(1411));\n\t},\n\t// For legacy support\n\tDefaultHandler: DomHandler,\n\tget RssHandler(){\n\t\treturn defineProp(\"RssHandler\", this.FeedHandler);\n\t},\n\t//helper methods\n\tparseDOM: function(data, options){\n\t\tvar handler = new DomHandler(options);\n\t\tnew Parser(handler, options).end(data);\n\t\treturn handler.dom;\n\t},\n\tparseFeed: function(feed, options){\n\t\tvar handler = new module.exports.FeedHandler(options);\n\t\tnew Parser(handler, options).end(feed);\n\t\treturn handler.dom;\n\t},\n\tcreateDomStream: function(cb, options, elementCb){\n\t\tvar handler = new DomHandler(cb, options, elementCb);\n\t\treturn new Parser(handler, options);\n\t},\n\t// List of all events that the parser emits\n\tEVENTS: { /* Format: eventname: number of arguments */\n\t\tattribute: 2,\n\t\tcdatastart: 0,\n\t\tcdataend: 0,\n\t\ttext: 1,\n\t\tprocessinginstruction: 2,\n\t\tcomment: 1,\n\t\tcommentend: 0,\n\t\tclosetag: 1,\n\t\topentag: 2,\n\t\topentagname: 1,\n\t\terror: 1,\n\t\tend: 0\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/index.js\n// module id = 403\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/index.js?");

/***/ }),
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */,
/* 534 */,
/* 535 */,
/* 536 */,
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */,
/* 544 */,
/* 545 */,
/* 546 */,
/* 547 */,
/* 548 */,
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseForOwn = __webpack_require__(1152),\n    createBaseEach = __webpack_require__(1160);\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseEach.js\n// module id = 558\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseEach.js?");

/***/ }),
/* 559 */
/***/ (function(module, exports) {

eval("/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isIndex.js\n// module id = 559\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isIndex.js?");

/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsTypedArray = __webpack_require__(1158),\n    baseUnary = __webpack_require__(401),\n    nodeUtil = __webpack_require__(1080);\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isTypedArray.js\n// module id = 560\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isTypedArray.js?");

/***/ }),
/* 561 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isPrototype.js\n// module id = 561\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isPrototype.js?");

/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

eval("var listCacheClear = __webpack_require__(1173),\n    listCacheDelete = __webpack_require__(1174),\n    listCacheGet = __webpack_require__(1175),\n    listCacheHas = __webpack_require__(1176),\n    listCacheSet = __webpack_require__(1177);\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_ListCache.js\n// module id = 562\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_ListCache.js?");

/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(174),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isSymbol.js\n// module id = 563\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isSymbol.js?");

/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isSymbol = __webpack_require__(563);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_toKey.js\n// module id = 564\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_toKey.js?");

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/addWordboundary */\n/**\n * Returns a string that can be used in a regex to match a matchString with word boundaries.\n *\n * @param {string} matchString The string to generate a regex string for.\n * @param {boolean} [positiveLookAhead] Boolean indicating whether or not to include a positive look ahead\n * for the word boundaries at the end.\n * @param {string} [extraWordBoundary] Extra characters to match a word boundary on.\n * @returns {string} A regex string that matches the matchString with word boundaries.\n */\n\nmodule.exports = function (matchString) {\n    var positiveLookAhead = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var extraWordBoundary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n\n    var wordBoundary, wordBoundaryStart, wordBoundaryEnd;\n    wordBoundary = \"[ \\\\u00a0\\xA0\\\\n\\\\r\\\\t.,()\\u201D\\u201C\\u301D\\u301E\\u301F\\u201F\\u201E\\\"+\\\\-;!\\xA1?\\xBF:/\\xBB\\xAB\\u2039\\u203A\" + extraWordBoundary + \"<>\";\n    wordBoundaryStart = \"(^|\" + wordBoundary + \"'‘’‛`])\";\n    if (positiveLookAhead) {\n        wordBoundaryEnd = \"($|((?=\" + wordBoundary + \"]))|((['‘’‛`])(\" + wordBoundary + \"])))\";\n    } else {\n        wordBoundaryEnd = \"($|(\" + wordBoundary + \"])|((['‘’‛`])(\" + wordBoundary + \"])))\";\n    }\n    return wordBoundaryStart + matchString + wordBoundaryEnd;\n};\n//# sourceMappingURL=addWordboundary.js.map\n//# sourceMappingURL=addWordboundary.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/addWordboundary.js\n// module id = 565\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/addWordboundary.js?");

/***/ }),
/* 566 */
/***/ (function(module, exports) {

eval("//Types of elements found in the DOM\nmodule.exports = {\n\tText: \"text\", //Text\n\tDirective: \"directive\", //<? ... ?>\n\tComment: \"comment\", //<!-- ... -->\n\tScript: \"script\", //<script> tags\n\tStyle: \"style\", //<style> tags\n\tTag: \"tag\", //Any tag\n\tCDATA: \"cdata\", //<![CDATA[ ... ]]>\n\tDoctype: \"doctype\",\n\n\tisTag: function(elem){\n\t\treturn elem.type === \"tag\" || elem.type === \"script\" || elem.type === \"style\";\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domelementtype/index.js\n// module id = 566\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domelementtype/index.js?");

/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1100).Buffer))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/core-util-is/lib/util.js\n// module id = 567\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/core-util-is/lib/util.js?");

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isEmpty = __webpack_require__(97);\n/**\n * Sets sentence part passiveness to passive if no exception rules for the participle apply.\n *\n * @returns {void}\n */\nmodule.exports = function () {\n    if (isEmpty(this.getParticiple())) {\n        this.setSentencePartPassiveness(false);\n        return;\n    }\n    this.setSentencePartPassiveness(this.isPassive());\n};\n//# sourceMappingURL=checkException.js.map\n//# sourceMappingURL=checkException.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/checkException.js\n// module id = 568\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/checkException.js?");

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getWordIndices = __webpack_require__(1108);\nvar includesIndex = __webpack_require__(1253);\nvar arrayToRegex = __webpack_require__(391);\nvar cannotDirectlyPrecedePassiveParticipleFrench = __webpack_require__(1109)().cannotDirectlyPrecedePassiveParticiple;\nvar cannotDirectlyPrecedePassiveParticipleEnglish = __webpack_require__(1110)().cannotDirectlyPrecedePassiveParticiple;\nvar cannotDirectlyPrecedePassiveParticipleSpanish = __webpack_require__(1112)().cannotDirectlyPrecedePassiveParticiple;\nvar cannotDirectlyPrecedePassiveParticipleItalian = __webpack_require__(1113)().cannotDirectlyPrecedePassiveParticiple;\nvar cannotDirectlyPrecedePassiveParticipleDutch = __webpack_require__(1254)().cannotDirectlyPrecedePassiveParticiple;\n/**\n * Checks whether the participle is directly preceded by a word from the direct precedence exception list.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {number} participleIndex The index of the participle.\n * @param {string} language The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the direct precedence exception list is directly preceding\n * the participle, otherwise returns false.\n */\nmodule.exports = function (sentencePart, participleIndex, language) {\n    var directPrecedenceExceptionRegex = void 0;\n    switch (language) {\n        case \"fr\":\n            directPrecedenceExceptionRegex = arrayToRegex(cannotDirectlyPrecedePassiveParticipleFrench);\n            break;\n        case \"es\":\n            directPrecedenceExceptionRegex = arrayToRegex(cannotDirectlyPrecedePassiveParticipleSpanish);\n            break;\n        case \"it\":\n            directPrecedenceExceptionRegex = arrayToRegex(cannotDirectlyPrecedePassiveParticipleItalian);\n            break;\n        case \"nl\":\n            directPrecedenceExceptionRegex = arrayToRegex(cannotDirectlyPrecedePassiveParticipleDutch);\n            break;\n        case \"en\":\n        default:\n            directPrecedenceExceptionRegex = arrayToRegex(cannotDirectlyPrecedePassiveParticipleEnglish);\n            break;\n    }\n    var directPrecedenceExceptionMatch = getWordIndices(sentencePart, directPrecedenceExceptionRegex);\n    return includesIndex(directPrecedenceExceptionMatch, participleIndex);\n};\n//# sourceMappingURL=directPrecedenceException.js.map\n//# sourceMappingURL=directPrecedenceException.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/directPrecedenceException.js\n// module id = 569\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/directPrecedenceException.js?");

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// These passive auxiliaries start with be-, ge- or er- en and with -t, and therefore look like a participle.\n\nvar participleLike = [\"bekommst\", \"bekommt\", \"bekamst\", \"bekommest\", \"bekommet\", \"bekämest\", \"bekämst\", \"bekämet\", \"bekämt\", \"gekriegt\", \"gehörst\", \"gehört\", \"gehörtest\", \"gehörtet\", \"gehörest\", \"gehöret\", \"erhältst\", \"erhält\", \"erhaltet\", \"erhielt\", \"erhieltest\", \"erhieltst\", \"erhieltet\", \"erhaltest\"];\n// These are all other passive auxiliaries.\nvar otherAuxiliaries = [\"werde\", \"wirst\", \"wird\", \"werden\", \"werdet\", \"wurde\", \"ward\", \"wurdest\", \"wardst\", \"wurden\", \"wurdet\", \"worden\", \"werdest\", \"würde\", \"würdest\", \"würden\", \"würdet\", \"bekomme\", \"bekommen\", \"bekam\", \"bekamen\", \"bekäme\", \"bekämen\", \"kriege\", \"kriegst\", \"kriegt\", \"kriegen\", \"kriegte\", \"kriegtest\", \"kriegten\", \"kriegtet\", \"kriegest\", \"krieget\", \"gehöre\", \"gehören\", \"gehörte\", \"gehörten\", \"erhalte\", \"erhalten\", \"erhielten\", \"erhielte\"];\n// These first person plural auxiliaries also function as an infinitive.\nvar infinitiveAuxiliaries = [\"werden\", \"bekommen\", \"kriegen\", \"gehören\", \"erhalten\"];\n/**\n * Returns lists with auxiliaries.\n * @returns {Array} The lists with auxiliaries.\n */\nmodule.exports = function () {\n    return {\n        participleLike: participleLike,\n        otherAuxiliaries: otherAuxiliaries.concat(infinitiveAuxiliaries),\n        // These auxiliaries are filtered from the beginning and end of word combinations in the prominent words.\n        filteredAuxiliaries: participleLike.concat(otherAuxiliaries),\n        // These auxiliaries are not filtered from the beginning of word combinations in the prominent words.\n        infinitiveAuxiliaries: infinitiveAuxiliaries,\n        allAuxiliaries: participleLike.concat(otherAuxiliaries, infinitiveAuxiliaries)\n    };\n};\n//# sourceMappingURL=auxiliaries.js.map\n//# sourceMappingURL=auxiliaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/auxiliaries.js\n// module id = 570\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/auxiliaries.js?");

/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaults = __webpack_require__(1128);\n/**\n * Represents a marked piece of text\n *\n * @param {Object} properties The properties of this Mark.\n * @param {string} properties.original The original text that should be marked.\n * @param {string} properties.marked The new text including marks.\n * @constructor\n */\nfunction Mark(properties) {\n  defaults(properties, { original: \"\", marked: \"\" });\n  this._properties = properties;\n}\n/**\n * Returns the original text\n *\n * @returns {string} The original text.\n */\nMark.prototype.getOriginal = function () {\n  return this._properties.original;\n};\n/**\n * Returns the marked text\n *\n * @returns {string} The replaced text.\n */\nMark.prototype.getMarked = function () {\n  return this._properties.marked;\n};\n/**\n * Applies this mark to the given text\n *\n * @param {string} text The original text without the mark applied.\n * @returns {string} The A new text with the mark applied to it.\n */\nMark.prototype.applyWithReplace = function (text) {\n  // Cute method to replace everything in a string without using regex.\n  return text.split(this._properties.original).join(this._properties.marked);\n};\nmodule.exports = Mark;\n//# sourceMappingURL=Mark.js.map\n//# sourceMappingURL=Mark.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Mark.js\n// module id = 571\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Mark.js?");

/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar punycode = __webpack_require__(593);\nvar util = __webpack_require__(594);\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = __webpack_require__(595);\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/url/url.js\n// module id = 572\n// module chunks = 0 1 2 3 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/url/url.js?");

/***/ }),
/* 573 */,
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(137)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/setimmediate/setImmediate.js\n// module id = 574\n// module chunks = 0 1 2 3 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/setimmediate/setImmediate.js?");

/***/ }),
/* 575 */,
/* 576 */,
/* 577 */,
/* 578 */,
/* 579 */,
/* 580 */,
/* 581 */,
/* 582 */,
/* 583 */,
/* 584 */,
/* 585 */
/***/ (function(module, exports) {

eval("/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isLength.js\n// module id = 585\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isLength.js?");

/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFlatten = __webpack_require__(587),\n    map = __webpack_require__(63);\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/flatMap.js\n// module id = 586\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/flatMap.js?");

/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayPush = __webpack_require__(1121),\n    isFlattenable = __webpack_require__(1361);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFlatten.js\n// module id = 587\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFlatten.js?");

/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns rounded number to fix floating point bug http://floating-point-gui.de\n * @param {number} number The unrounded number\n * @returns {number} Rounded number\n */\n\nmodule.exports = function (number) {\n    if (Math.round(number) === number) {\n        return Math.round(number);\n    }\n    return Math.round(number * 10) / 10;\n};\n//# sourceMappingURL=formatNumber.js.map\n//# sourceMappingURL=formatNumber.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/formatNumber.js\n// module id = 588\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/formatNumber.js?");

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/getTopicCount */\n\nvar matchTextWithArray = __webpack_require__(1546);\nvar normalizeQuotes = __webpack_require__(328).normalize;\nvar parseSynonyms = __webpack_require__(1547);\nvar unique = __webpack_require__(1103);\nvar isEmpty = __webpack_require__(97);\nvar getSentences = __webpack_require__(215);\nvar arrayToRegex = __webpack_require__(391);\nvar addMark = __webpack_require__(1548);\nvar Mark = __webpack_require__(571);\n/**\n * Calculates the topic count, i.e., how many times the keyword or its synonyms were encountered in the text.\n *\n * @param {Object}  paper                   The paper containing keyword, text and potentially synonyms.\n * @param {boolean} [onlyKeyword=false]     Whether to only use the keyword for the count.\n *\n * @returns {number} The keyword count.\n */\nmodule.exports = function (paper) {\n    var onlyKeyword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var keyword = paper.getKeyword();\n    var synonyms = parseSynonyms(paper.getSynonyms());\n    var text = normalizeQuotes(paper.getText());\n    var sentences = getSentences(text);\n    var topicWords = [];\n    if (onlyKeyword === true) {\n        topicWords = topicWords.concat(keyword);\n    } else {\n        topicWords = topicWords.concat(keyword, synonyms).filter(Boolean);\n        topicWords.sort(function (a, b) {\n            return b.length - a.length;\n        });\n    }\n    if (isEmpty(topicWords)) {\n        return {\n            count: 0,\n            matches: [],\n            markings: [],\n            matchesIndices: []\n        };\n    }\n    var topicFound = [];\n    var topicFoundInSentence = [];\n    var markings = [];\n    var indexOfSentence = 0;\n    var indexRunningThroughSentence = 0;\n    var matchesIndices = [];\n    sentences.forEach(function (sentence) {\n        topicFoundInSentence = matchTextWithArray(sentence, topicWords).matches;\n        if (topicFoundInSentence.length > 0) {\n            topicFoundInSentence.forEach(function (occurrence) {\n                var indexOfOccurrenceInSentence = sentence.indexOf(occurrence, indexRunningThroughSentence);\n                matchesIndices.push({\n                    index: indexOfOccurrenceInSentence + indexOfSentence,\n                    match: occurrence\n                });\n                indexRunningThroughSentence += indexOfOccurrenceInSentence + occurrence.length;\n            });\n            markings = markings.concat(new Mark({\n                original: sentence,\n                marked: sentence.replace(arrayToRegex(topicFoundInSentence), function (x) {\n                    return addMark(x);\n                })\n            }));\n        }\n        topicFound = topicFound.concat(topicFoundInSentence);\n        indexOfSentence += sentence.length + 1;\n    });\n    return {\n        count: topicFound.length,\n        matches: unique(topicFound).sort(function (a, b) {\n            return b.length - a.length;\n        }),\n        markings: markings,\n        matchesIndices: matchesIndices\n    };\n};\n//# sourceMappingURL=topicCount.js.map\n//# sourceMappingURL=topicCount.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/topicCount.js\n// module id = 589\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/topicCount.js?");

/***/ }),
/* 590 */,
/* 591 */,
/* 592 */,
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttrue\n\t) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\t\treturn punycode;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30)(module), __webpack_require__(8)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/punycode/punycode.js\n// module id = 593\n// module chunks = 0 1 2 3 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/punycode/punycode.js?");

/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/url/util.js\n// module id = 594\n// module chunks = 0 1 2 3 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/url/util.js?");

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(596);\nexports.encode = exports.stringify = __webpack_require__(287);\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/querystring-es3/index.js\n// module id = 595\n// module chunks = 0 1 2 3 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/querystring-es3/index.js?");

/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/querystring-es3/decode.js\n// module id = 596\n// module chunks = 0 1 2 3 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/querystring-es3/decode.js?");

/***/ }),
/* 597 */,
/* 598 */,
/* 599 */,
/* 600 */,
/* 601 */,
/* 602 */,
/* 603 */,
/* 604 */,
/* 605 */,
/* 606 */,
/* 607 */,
/* 608 */,
/* 609 */,
/* 610 */,
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */,
/* 615 */,
/* 616 */,
/* 617 */,
/* 618 */,
/* 619 */,
/* 620 */,
/* 621 */,
/* 622 */,
/* 623 */,
/* 624 */,
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */,
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */,
/* 643 */,
/* 644 */,
/* 645 */,
/* 646 */,
/* 647 */,
/* 648 */,
/* 649 */,
/* 650 */,
/* 651 */,
/* 652 */,
/* 653 */,
/* 654 */,
/* 655 */,
/* 656 */,
/* 657 */,
/* 658 */,
/* 659 */,
/* 660 */,
/* 661 */,
/* 662 */,
/* 663 */,
/* 664 */,
/* 665 */,
/* 666 */,
/* 667 */,
/* 668 */,
/* 669 */,
/* 670 */,
/* 671 */,
/* 672 */,
/* 673 */,
/* 674 */,
/* 675 */,
/* 676 */,
/* 677 */,
/* 678 */,
/* 679 */,
/* 680 */,
/* 681 */,
/* 682 */,
/* 683 */,
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar blockElements = [\"address\", \"article\", \"aside\", \"blockquote\", \"canvas\", \"dd\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hgroup\", \"hr\", \"li\", \"main\", \"nav\", \"noscript\", \"ol\", \"output\", \"p\", \"pre\", \"section\", \"table\", \"tfoot\", \"ul\", \"video\"];\nvar inlineElements = [\"b\", \"big\", \"i\", \"small\", \"tt\", \"abbr\", \"acronym\", \"cite\", \"code\", \"dfn\", \"em\", \"kbd\", \"strong\", \"samp\", \"time\", \"var\", \"a\", \"bdo\", \"br\", \"img\", \"map\", \"object\", \"q\", \"script\", \"span\", \"sub\", \"sup\", \"button\", \"input\", \"label\", \"select\", \"textarea\"];\nvar blockElementsRegex = new RegExp(\"^(\" + blockElements.join(\"|\") + \")$\", \"i\");\nvar inlineElementsRegex = new RegExp(\"^(\" + inlineElements.join(\"|\") + \")$\", \"i\");\nvar blockElementStartRegex = new RegExp(\"^<(\" + blockElements.join(\"|\") + \")[^>]*?>$\", \"i\");\nvar blockElementEndRegex = new RegExp(\"^</(\" + blockElements.join(\"|\") + \")[^>]*?>$\", \"i\");\nvar inlineElementStartRegex = new RegExp(\"^<(\" + inlineElements.join(\"|\") + \")[^>]*>$\", \"i\");\nvar inlineElementEndRegex = new RegExp(\"^</(\" + inlineElements.join(\"|\") + \")[^>]*>$\", \"i\");\nvar otherElementStartRegex = /^<([^>\\s/]+)[^>]*>$/;\nvar otherElementEndRegex = /^<\\/([^>\\s]+)[^>]*>$/;\nvar contentRegex = /^[^<]+$/;\nvar greaterThanContentRegex = /^<[^><]*$/;\nvar commentRegex = /<!--(.|[\\r\\n])*?-->/g;\nvar core = __webpack_require__(359);\nvar forEach = __webpack_require__(32);\nvar memoize = __webpack_require__(214);\nvar tokens = [];\nvar htmlBlockTokenizer;\n/**\n * Creates a tokenizer to tokenize HTML into blocks.\n *\n * @returns {void}\n */\nfunction createTokenizer() {\n    tokens = [];\n    htmlBlockTokenizer = core(function (token) {\n        tokens.push(token);\n    });\n    htmlBlockTokenizer.addRule(contentRegex, \"content\");\n    htmlBlockTokenizer.addRule(greaterThanContentRegex, \"greater-than-sign-content\");\n    htmlBlockTokenizer.addRule(blockElementStartRegex, \"block-start\");\n    htmlBlockTokenizer.addRule(blockElementEndRegex, \"block-end\");\n    htmlBlockTokenizer.addRule(inlineElementStartRegex, \"inline-start\");\n    htmlBlockTokenizer.addRule(inlineElementEndRegex, \"inline-end\");\n    htmlBlockTokenizer.addRule(otherElementStartRegex, \"other-element-start\");\n    htmlBlockTokenizer.addRule(otherElementEndRegex, \"other-element-end\");\n}\n/**\n * Returns whether or not the given element name is a block element.\n *\n * @param {string} htmlElementName The name of the HTML element.\n * @returns {boolean} Whether or not it is a block element.\n */\nfunction isBlockElement(htmlElementName) {\n    return blockElementsRegex.test(htmlElementName);\n}\n/**\n * Returns whether or not the given element name is an inline element.\n *\n * @param {string} htmlElementName The name of the HTML element.\n * @returns {boolean} Whether or not it is an inline element.\n */\nfunction isInlineElement(htmlElementName) {\n    return inlineElementsRegex.test(htmlElementName);\n}\n/**\n * Splits a text into blocks based on HTML block elements.\n *\n * @param {string} text The text to split.\n * @returns {Array} A list of blocks based on HTML block elements.\n */\nfunction getBlocks(text) {\n    var blocks = [],\n        depth = 0,\n        blockStartTag = \"\",\n        currentBlock = \"\",\n        blockEndTag = \"\";\n    // Remove all comments because it is very hard to tokenize them.\n    text = text.replace(commentRegex, \"\");\n    createTokenizer();\n    htmlBlockTokenizer.onText(text);\n    htmlBlockTokenizer.end();\n    forEach(tokens, function (token, i) {\n        var nextToken = tokens[i + 1];\n        switch (token.type) {\n            case \"content\":\n            case \"greater-than-sign-content\":\n            case \"inline-start\":\n            case \"inline-end\":\n            case \"other-tag\":\n            case \"other-element-start\":\n            case \"other-element-end\":\n            case \"greater than sign\":\n                if (!nextToken || depth === 0 && (nextToken.type === \"block-start\" || nextToken.type === \"block-end\")) {\n                    currentBlock += token.src;\n                    blocks.push(currentBlock);\n                    blockStartTag = \"\";\n                    currentBlock = \"\";\n                    blockEndTag = \"\";\n                } else {\n                    currentBlock += token.src;\n                }\n                break;\n            case \"block-start\":\n                if (depth !== 0) {\n                    if (currentBlock.trim() !== \"\") {\n                        blocks.push(currentBlock);\n                    }\n                    currentBlock = \"\";\n                    blockEndTag = \"\";\n                }\n                depth++;\n                blockStartTag = token.src;\n                break;\n            case \"block-end\":\n                depth--;\n                blockEndTag = token.src;\n                /*\n                 * We try to match the most deep blocks so discard any other blocks that have been started but not\n                 * finished.\n                 */\n                if (\"\" !== blockStartTag && \"\" !== blockEndTag) {\n                    blocks.push(blockStartTag + currentBlock + blockEndTag);\n                } else if (\"\" !== currentBlock.trim()) {\n                    blocks.push(currentBlock);\n                }\n                blockStartTag = \"\";\n                currentBlock = \"\";\n                blockEndTag = \"\";\n                break;\n        }\n        // Handles HTML with too many closing tags.\n        if (depth < 0) {\n            depth = 0;\n        }\n    });\n    return blocks;\n}\nmodule.exports = {\n    blockElements: blockElements,\n    inlineElements: inlineElements,\n    isBlockElement: isBlockElement,\n    isInlineElement: isInlineElement,\n    getBlocks: memoize(getBlocks)\n};\n//# sourceMappingURL=html.js.map\n//# sourceMappingURL=html.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/html.js\n// module id = 684\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/html.js?");

/***/ }),
/* 685 */
/***/ (function(module, exports, __webpack_require__) {

eval("var mapCacheClear = __webpack_require__(1162),\n    mapCacheDelete = __webpack_require__(1178),\n    mapCacheGet = __webpack_require__(1180),\n    mapCacheHas = __webpack_require__(1181),\n    mapCacheSet = __webpack_require__(1182);\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_MapCache.js\n// module id = 685\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_MapCache.js?");

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(228),\n    root = __webpack_require__(121);\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Map.js\n// module id = 686\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Map.js?");

/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArray = __webpack_require__(64),\n    isKey = __webpack_require__(1089),\n    stringToPath = __webpack_require__(1354),\n    toString = __webpack_require__(1090);\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_castPath.js\n// module id = 687\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_castPath.js?");

/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeKeys = __webpack_require__(1079),\n    baseKeysIn = __webpack_require__(1365),\n    isArrayLike = __webpack_require__(168);\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/keysIn.js\n// module id = 688\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/keysIn.js?");

/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// Replace all other punctuation characters at the beginning or at the end of a word.\n\nvar punctuationRegexString = \"[\\\\\\u2013\\\\-\\\\(\\\\)_\\\\[\\\\]\\u2019\\u201C\\u201D\\\"'.?!:;,\\xBF\\xA1\\xAB\\xBB\\u2039\\u203A\\u2014\\xD7+&<>]+\";\nvar punctuationRegexStart = new RegExp(\"^\" + punctuationRegexString);\nvar punctuationRegexEnd = new RegExp(punctuationRegexString + \"$\");\n/**\n * Replaces punctuation characters from the given text string.\n *\n * @param {String} text The text to remove the punctuation characters for.\n *\n * @returns {String} The sanitized text.\n */\nmodule.exports = function (text) {\n  text = text.replace(punctuationRegexStart, \"\");\n  text = text.replace(punctuationRegexEnd, \"\");\n  return text;\n};\n//# sourceMappingURL=removePunctuation.js.map\n//# sourceMappingURL=removePunctuation.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/removePunctuation.js\n// module id = 689\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/removePunctuation.js?");

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(137)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/node_modules/process-nextick-args/index.js\n// module id = 690\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/node_modules/process-nextick-args/index.js?");

/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(1100)\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/safe-buffer/index.js\n// module id = 691\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/safe-buffer/index.js?");

/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

eval("var toFinite = __webpack_require__(1236);\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toInteger.js\n// module id = 692\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toInteger.js?");

/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getWordIndices = __webpack_require__(1108);\nvar precedesIndex = __webpack_require__(1493);\nvar arrayToRegex = __webpack_require__(391);\nvar cannotBeBetweenAuxiliaryAndParticipleFrench = __webpack_require__(1109)().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nvar cannotBeBetweenAuxiliaryAndParticipleEnglish = __webpack_require__(1110)().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nvar cannotBeBetweenAuxiliaryAndParticipleSpanish = __webpack_require__(1112)().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nvar cannotBeBetweenAuxiliaryAndParticipleItalian = __webpack_require__(1113)().cannotBeBetweenPassiveAuxiliaryAndParticiple;\n/**\n * Checks whether a word from the precedence exception list occurs anywhere in the sentence part before the participle.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {number} participleIndex The index of the participle.\n * @param {string} language The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the precedence exception list occurs anywhere in the\n * sentence part before the participle, otherwise returns false.\n */\nmodule.exports = function (sentencePart, participleIndex, language) {\n    var precedenceExceptionRegex;\n    switch (language) {\n        case \"fr\":\n            precedenceExceptionRegex = arrayToRegex(cannotBeBetweenAuxiliaryAndParticipleFrench);\n            break;\n        case \"es\":\n            precedenceExceptionRegex = arrayToRegex(cannotBeBetweenAuxiliaryAndParticipleSpanish);\n            break;\n        case \"it\":\n            precedenceExceptionRegex = arrayToRegex(cannotBeBetweenAuxiliaryAndParticipleItalian);\n            break;\n        case \"en\":\n        default:\n            precedenceExceptionRegex = arrayToRegex(cannotBeBetweenAuxiliaryAndParticipleEnglish);\n            break;\n    }\n    var precedenceExceptionMatch = getWordIndices(sentencePart, precedenceExceptionRegex);\n    return precedesIndex(precedenceExceptionMatch, participleIndex);\n};\n//# sourceMappingURL=precedenceException.js.map\n//# sourceMappingURL=precedenceException.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/precedenceException.js\n// module id = 693\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/precedenceException.js?");

/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// These word need to be checked with s/e/es suffixes.\n\nvar adjectivesVerbs = [\n// The following words are participles of verbs that cannot be passives.\n\"allé\", \"arrivé\", \"décédé\", \"demeuré\", \"entré\", \"été\", \"né\", \"resté\", \"retombé\", \"tombé\",\n// The following words are non-participles ending in é.\n\"achalandé\", \"aéroporté\", \"affilé\", \"affixé\", \"âgé\", \"aîné\", \"aisé\", \"aligoté\", \"alizé\", \"alliacé\", \"alluré\", \"alphabétisé\", \"alvéolé\", \"aminé\", \"ammoniaqué\", \"ampoulé\", \"archi-prouvé\", \"archi-usé\", \"asexué\", \"autoguidé\", \"autopropulsé\", \"aviné\", \"baleiné\", \"barbelé\", \"baryté\", \"bien-aimé\", \"bisexué\", \"bouqueté\", \"brioché\", \"burkinabé\", \"cagoulé\", \"calamistré\", \"cannelé\", \"carabiné\", \"carboné\", \"caréné\", \"carié\", \"carminé\", \"carné\", \"carpé\", \"censé\", \"cérusé\", \"charançonné\", \"chenillé\", \"chocolaté\", \"chtarbé\", \"citronné\", \"cofondé\", \"contrecollé\", \"côtelé\", \"courbaturé\", \"crawlé\", \"crossé\", \"crustacé\", \"cutané\", \"damasquiné\", \"damassé\", \"débellé\", \"décavé\", \"déguenillé\", \"demi-paralysé\", \"denté\", \"dépenaillé\", \"désenchanté\", \"désodé\", \"diapré\", \"ébranché\", \"écervelé\", \"effréné\", \"effronté\", \"éhonté\", \"embourgeoisé\", \"embroussaillé\", \"embruiné\", \"émerillonné\", \"encalminé\", \"encaustiqué\", \"encorné\", \"endiablé\", \"endiamanté\", \"enfoiré\", \"enfouraillé\", \"ensellé\", \"entrelardé\", \"éploré\", \"ergoté\", \"erroné\", \"étagé\", \"éthéré\", \"éversé\", \"éwé\", \"ex-associé\", \"exorbité\", \"expansé\", \"famé\", \"férié\", \"fibré\", \"filoguidé\", \"flammé\", \"fleurdelisé\", \"fliqué\", \"flûté\", \"forcené\", \"fortuné\", \"foulbé\", \"frelaté\", \"friqué\", \"futé\", \"gazonné\", \"gracieusé\", \"gradé\", \"granulé\", \"herminé\", \"hiérarchisé\", \"huppé\", \"hydrogéné\", \"igné\", \"illettré\", \"illimité\", \"imbriqué\", \"immaculé\", \"immérité\", \"immodéré\", \"immunodéprimé\", \"impayé\", \"impensé\", \"impollué\", \"imprononcé\", \"inaccoutumé\", \"inachevé\", \"inactivé\", \"inadapté\", \"inaltéré\", \"inanimé\", \"inapproprié\", \"inarticulé\", \"inavoué\", \"inchangé\", \"inconditionné\", \"inconsidéré\", \"inconsolé\", \"incontesté\", \"incontrôlé\", \"incréé\", \"indéfriché\", \"indéterminé\", \"indifférencié\", \"indiscipliné\", \"indiscuté\", \"indivisé\", \"indompté\", \"inébranlé\", \"inemployé\", \"inentamé\", \"inespéré\", \"inexpérimenté\", \"inexpliqué\", \"inexploité\", \"inexploré\", \"inexprimé\", \"infondé\", \"informulé\", \"infortuné\", \"inhabité\", \"inimité\", \"injustifié\", \"inné\", \"innommé\", \"inoccupé\", \"inopiné\", \"inorganisé\", \"inoublié\", \"insensé\", \"insoupçonné\", \"instantané\", \"insubordonné\", \"insurpassé\", \"intentionné\", \"interallié\", \"intouché\", \"inusité\", \"inutilisé\", \"invertébré\", \"inviolé\", \"iodé\", \"irraisonné\", \"irréalisé\", \"lacté\", \"lamé\", \"lamifié\", \"larvé\", \"laryngé\", \"léopardé\", \"lettré\", \"lié\", \"lifté\", \"losangé\", \"luné\", \"lunetté\", \"madré\", \"maillé\", \"malaisé\", \"malavisé\", \"maléficié\", \"malfamé\", \"malformé\", \"malintentionné\", \"mendé\", \"ménopausé\", \"mentholé\", \"mi-accablé\", \"mi-allongé\", \"mi-café\", \"mi-consterné\", \"mi-enterré\", \"mi-étonné\", \"mi-pincé\", \"mi-terrorisé\", \"miellé\", \"millimétré\", \"miraculé\", \"momentané\", \"monoclé\", \"monté\", \"mordoré\", \"mort-né\", \"névrosé\", \"nitré\", \"non-initié\", \"nouveau-né\", \"olé-olé\", \"ongulé\", \"paillé\", \"palé\", \"papilionacé\", \"paqueté\", \"paraffiné\", \"passé\", \"pasteurisé\", \"patenté\", \"paysagé\", \"pédonculé\", \"pestiféré\", \"platiné\", \"pocheté\", \"polychromé\", \"poplité\", \"potelé\", \"pourpré\", \"praliné\", \"précité\", \"prédigéré\", \"préencollé\", \"préfabriqué\", \"prématuré\", \"premier-né\", \"préprogrammé\", \"prostré\", \"protéiné\", \"pyramidé\", \"quadrilobé\", \"racé\", \"re-café\", \"re-rêvé\", \"re-vérifié\", \"rebarré\", \"redécoré\", \"relargué\", \"remonté\", \"rentré\", \"résiné\", \"ressuscité\", \"réticulé\", \"retourné\", \"revérifié\", \"revivifié\", \"rose-thé\", \"safrané\", \"satiné\", \"saumoné\", \"sébacé\", \"sensé\", \"sexué\", \"sigillé\", \"silicosé\", \"simultané\", \"sinistré\", \"soufré\", \"sous-cutané\", \"sous-développé\", \"sous-qualifié\", \"soussigné\", \"spiralé\", \"spontané\", \"stratifié\", \"sulfaté\", \"sulfuré\", \"sulfurisé\", \"suractivé\", \"suranné\", \"surbooké\", \"surbrodé\", \"surdéveloppé\", \"surdimensionné\", \"surdoué\", \"surentraîné\", \"suroxygéné\", \"surpeuplé\", \"surqualifié\", \"susmentionné\", \"susnommé\", \"systématisé\", \"tarabiscoté\", \"taupé\", \"thrombosé\", \"tiercé\", \"timoré\", \"tiqueté\", \"transcutané\", \"triphasé\", \"usagé\", \"usité\", \"vallonné\", \"vanillé\", \"vascularisé\", \"veinulé\", \"venté\", \"vergé\", \"vert-de-grisé\", \"vertébré\", \"vitaminé\", \"vulcanisé\", \"zélé\"];\n/*\nThe following words are nouns ending in -é or -ée and starting with a vowel.\nThese words need to be checked with -s suffixes and l' and d' prefixes.\n */\nvar nounsStartingWithVowel = [\"à-côté\", \"abbé\", \"absurdité\", \"accessibilité\", \"acerbité\", \"acidité\", \"acmé\", \"acné\", \"âcreté\", \"activité\", \"actualité\", \"acuité\", \"adaptabilité\", \"adiposité\", \"admissibilité\", \"adversité\", \"affabilité\", \"affectivité\", \"affidé\", \"affinité\", \"agilité\", \"agressivité\", \"alacrité\", \"alcalinité\", \"altérité\", \"amabilité\", \"ambiguïté\", \"amé\", \"aménité\", \"américanité\", \"amirauté\", \"amitié\", \"amoralité\", \"ancestralité\", \"ancienneté\", \"anfractuosité\", \"angulosité\", \"animalité\", \"animosité\", \"anormalité\", \"anti-acné\", \"anti-cité\", \"anti-criminalité\", \"anti-gravité\", \"anti-intimité\", \"anti-société\", \"antigravité\", \"antiquité\", \"anxiété\", \"aparté\", \"applicabilité\", \"âpreté\", \"archevêché\", \"aridité\", \"artificialité\", \"asexualité\", \"asociabilité\", \"aspérité\", \"assiduité\", \"astarté\", \"atrocité\", \"austérité\", \"authenticité\", \"autodafé\", \"autorité\", \"avé\", \"aveugle-né\", \"avidité\", \"ébriété\", \"effectivité\", \"efficacité\", \"égalité\", \"élasticité\", \"électricité\", \"élément-clé\", \"élémentarité\", \"éligibilité\", \"émotivité\", \"empaffé\", \"énormité\", \"entièreté\", \"entité\", \"enviandé\", \"épitomé\", \"équanimité\", \"équité\", \"étanchéité\", \"éternité\", \"ethnicité\", \"étrangéité\", \"étrangeté\", \"euromarché\", \"évêché\", \"éventualité\", \"ex-abbé\", \"ex-fiancé\", \"excentricité\", \"exclusivité\", \"exemplarité\", \"exhaustivité\", \"exiguïté\", \"extériorité\", \"externalité\", \"exterritorialité\", \"extrémité\", \"idée-clé\", \"identité\", \"illégalité\", \"illégitimité\", \"imbécillité\", \"immatérialité\", \"immaturité\", \"immédiateté\", \"immensité\", \"immobilité\", \"immoralité\", \"immortalité\", \"immuabilité\", \"immunité\", \"immutabilité\", \"impalpabilité\", \"impartialité\", \"impassibilité\", \"impeccabilité\", \"impécuniosité\", \"impénétrabilité\", \"imperméabilité\", \"impersonnalité\", \"impétuosité\", \"impiété\", \"implacabilité\", \"impopularité\", \"impossibilité\", \"impraticabilité\", \"imprévisibilité\", \"improbabilité\", \"impudicité\", \"impulsivité\", \"impunité\", \"impureté\", \"inaccessibilité\", \"inactivité\", \"inanité\", \"inauthenticité\", \"incapacité\", \"incommodité\", \"incommunicabilité\", \"incompatibilité\", \"incongruité\", \"incorruptibilité\", \"incrédibilité\", \"incrédulité\", \"incuriosité\", \"indemnité\", \"indestructibilité\", \"indignité\", \"indisponibilité\", \"individualité\", \"indivisibilité\", \"indocilité\", \"industrie-clé\", \"inefficacité\", \"inégalité\", \"inéligibilité\", \"inéluctabilité\", \"inévitabilité\", \"inexorabilité\", \"infaillibilité\", \"infécondité\", \"infériorité\", \"infertilité\", \"infidélité\", \"infinité\", \"infirmité\", \"inflammabilité\", \"inflexibilité\", \"ingéniosité\", \"ingénuité\", \"inhospitalité\", \"inhumanité\", \"inimitié\", \"iniquité\", \"innocuité\", \"inopportunité\", \"insalubrité\", \"insanité\", \"insécurité\", \"insensibilité\", \"inséparabilité\", \"insincérité\", \"insipidité\", \"insonorité\", \"instabilité\", \"instantanéité\", \"insularité\", \"intangibilité\", \"intégralité\", \"intégrité\", \"intelligibilité\", \"intemporalité\", \"intensité\", \"intentionnalité\", \"interactivité\", \"intériorité\", \"intimité\", \"intrépidité\", \"inusabilité\", \"inutilité\", \"invalidité\", \"inventivité\", \"invincibilité\", \"inviolabilité\", \"invisibilité\", \"invulnérabilité\", \"irrationalité\", \"irréalité\", \"irrecevabilité\", \"irrégularité\", \"irréligiosité\", \"irresponsabilité\", \"irréversibilité\", \"irrévocabilité\", \"irritabilité\", \"obésité\", \"objectivité\", \"obliquité\", \"obscénité\", \"obscurité\", \"obséquiosité\", \"officialité\", \"oiseau-clé\", \"oisiveté\", \"okoumé\", \"onctuosité\", \"opacité\", \"opiniâtreté\", \"opportunité\", \"oralité\", \"originalité\", \"ubiquité\", \"ukulélé\", \"unanimité\", \"unicité\", \"uniformité\", \"unilatéralité\", \"unité\", \"universalité\", \"université\", \"urbanité\", \"utilité\", \"yé-yé\", \"yéyé\", \"achillée\", \"almée\", \"aménorrhée\", \"année\", \"anti-nausée\", \"apnée\", \"apogée\", \"araignée\", \"arrière-pensée\", \"assiettée\", \"athénée\", \"auloffée\", \"aveugle-née\", \"avrillée\", \"azalée\", \"échauffourée\", \"écuellée\", \"élysée\", \"embardée\", \"empyrée\", \"épée\", \"épopée\", \"étuvée\", \"ex-allée\", \"ex-dulcinée\", \"ex-fiancée\", \"ex-lycée\", \"idée\", \"ipomée\", \"odyssée\", \"onomatopée\", \"orchidée\", \"orée\", \"orphée\", \"urée\"];\n/*\nThe following words are nouns ending in -é or -ée and starting with a consonant.\nThese words need to be checked with -s suffixes.\n*/\nvar nounsStartingWithConsonant = [\"banalité\", \"bas-côté\", \"beaupré\", \"beauté\", \"bébé\", \"bédé\", \"bénédicité\", \"bénignité\", \"bestialité\", \"bien-fondé\", \"biodiversité\", \"bipolarité\", \"bisexualité\", \"blé\", \"bonté\", \"bout-rimé\", \"bovidé\", \"brièveté\", \"brutalité\", \"caducité\", \"café\", \"callosité\", \"camélidé\", \"canapé\", \"capacité\", \"capillarité\", \"captivité\", \"carte-clé\", \"caté\", \"catholicité\", \"causalité\", \"causticité\", \"cavité\", \"cécité\", \"célébrité\", \"célérité\", \"cérébralité\", \"cétacé\", \"charité\", \"chassé-croisé\", \"chasteté\", \"cherté\", \"chétivité\", \"chimpanzé\", \"chrétienté\", \"ciné\", \"cinéma-vérité\", \"circularité\", \"citoyenneté\", \"civilité\", \"clandé\", \"clandestinité\", \"clarté\", \"clé\", \"clergé\", \"co-propriété\", \"coaccusé\", \"cochonceté\", \"code-clé\", \"collectivité\", \"collégialité\", \"combativité\", \"comestibilité\", \"comité\", \"commodité\", \"communauté\", \"communicabilité\", \"compacité\", \"comparabilité\", \"compatibilité\", \"compétitivité\", \"complémentarité\", \"complexité\", \"complicité\", \"comptabilité\", \"comté\", \"concavité\", \"condé\", \"conductibilité\", \"conductivité\", \"confidentialité\", \"conformité\", \"confraternité\", \"congé\", \"conjugalité\", \"connectivité\", \"consanguinité\", \"constitutionnalité\", \"contiguïté\", \"continuité\", \"contrariété\", \"contre-gré\", \"contre-plaqué\", \"contre-vérité\", \"contreplaqué\", \"contrevérité\", \"convexité\", \"convivialité\", \"coopé\", \"copropriété\", \"cordialité\", \"coré\", \"coriacité\", \"corporalité\", \"côté\", \"créativité\", \"crédibilité\", \"crédulité\", \"crétacé\", \"criminalité\", \"cruauté\", \"crudité\", \"culpabilité\", \"cupidité\", \"curiosité\", \"cybercafé\", \"cyprinidé\", \"dangerosité\", \"daphné\", \"dé\", \"débotté\", \"décimalité\", \"décision-clé\", \"déclivité\", \"déductibilité\", \"défectuosité\", \"degré\", \"déité\", \"déloyauté\", \"demi-clarté\", \"demi-degré\", \"demi-liberté\", \"demi-obscurité\", \"demi-vérité\", \"dénatalité\", \"densité\", \"député\", \"dératé\", \"dernier-né\", \"désirabilité\", \"dextérité\", \"difficulté\", \"difformité\", \"dignité\", \"discontinuité\", \"disparité\", \"disponibilité\", \"diversité\", \"divinité\", \"docilité\", \"domesticité\", \"doyenné\", \"dualité\", \"duché\", \"duplicité\", \"durabilité\", \"dureté\", \"faculté\", \"faillibilité\", \"faisabilité\", \"familiarité\", \"fatalité\", \"fatuité\", \"fausseté\", \"fébrilité\", \"fécondité\", \"félidé\", \"félinité\", \"féminité\", \"féodalité\", \"fermeté\", \"férocité\", \"ferté\", \"fertilité\", \"festivité\", \"fétidité\", \"fiabilité\", \"fibrillé\", \"fidélité\", \"fierté\", \"finalité\", \"fiscalité\", \"fixité\", \"flaccidité\", \"flatuosité\", \"flexibilité\", \"flexuosité\", \"flottabilité\", \"fluidité\", \"fonctionnalité\", \"formalité\", \"fossé\", \"fragilité\", \"francité\", \"fraternité\", \"friabilité\", \"frigidité\", \"frilosité\", \"fringillidé\", \"frivolité\", \"frugalité\", \"fugacité\", \"furtivité\", \"futilité\", \"gaieté\", \"gaîté\", \"gallinacé\", \"gémellité\", \"généralité\", \"générosité\", \"génialité\", \"génitalité\", \"germanité\", \"gibbosité\", \"globalité\", \"godemiché\", \"gracieuseté\", \"gracilité\", \"grand-duché\", \"granité\", \"gratuité\", \"gravidité\", \"gré\", \"grossièreté\", \"habileté\", \"habitabilité\", \"haute-fidélité\", \"henné\", \"hérédité\", \"hétérogénéité\", \"hétérosexualité\", \"hilarité\", \"histocompatibilité\", \"historicité\", \"homme-clé\", \"homogénéité\", \"homosexualité\", \"honnêteté\", \"honorabilité\", \"horizontalité\", \"hospitalité\", \"hostilité\", \"humanité\", \"humidité\", \"humilité\", \"hyperacidité\", \"hyperactivité\", \"hypercoagulabilité\", \"hyperémotivité\", \"hypermarché\", \"hyperréactivité\", \"hypersensibilité\", \"jovialité\", \"joyeuseté\", \"jubé\", \"judaïcité\", \"judaïté\", \"judéité\", \"juvénilité\", \"karaoké\", \"karaté\", \"karité\", \"kiné\", \"koré\", \"lâcheté\", \"laïcité\", \"lamedé\", \"lascivité\", \"latéralité\", \"latinité\", \"laubé\", \"laxité\", \"lé\", \"légalité\", \"légèreté\", \"légitimité\", \"lèse-majesté\", \"létalité\", \"lettre-clé\", \"libéralité\", \"liberté\", \"licéité\", \"limpidité\", \"liquidité\", \"lisibilité\", \"littéralité\", \"lividité\", \"localité\", \"longanimité\", \"longévité\", \"loquacité\", \"loyauté\", \"lubricité\", \"lucidité\", \"luminosité\", \"macramé\", \"magnanimité\", \"majesté\", \"majorité\", \"mal-aimé\", \"mal-baisé\", \"malhonnêteté\", \"malignité\", \"malinké\", \"malléabilité\", \"malpropreté\", \"maniabilité\", \"manoeuvrabilité\", \"marginalité\", \"masculinité\", \"maskinongé\", \"massivité\", \"matérialité\", \"maternité\", \"matité\", \"maturité\", \"mauvaiseté\", \"méchanceté\", \"médiocrité\", \"médiumnité\", \"mémé\", \"mémorabilité\", \"mendicité\", \"mensualité\", \"mentalité\", \"merveillosité\", \"méticulosité\", \"mi-capacité\", \"mi-été\", \"mi-meublé\", \"mi-porté\", \"mi-réalité\", \"mi-résigné\", \"miché\", \"microgravité\", \"minorité\", \"mitoyenneté\", \"mixité\", \"mobilité\", \"mocheté\", \"modalité\", \"modernité\", \"modicité\", \"moment-clé\", \"mondanité\", \"monstruosité\", \"mont-de-piété\", \"monumentalité\", \"mooré\", \"moralité\", \"morbidité\", \"morosité\", \"mortalité\", \"mot-clé\", \"motilité\", \"motricité\", \"mousmé\", \"mucosité\", \"multiplicité\", \"multipropriété\", \"municipalité\", \"musicalité\", \"mutabilité\", \"mutité\", \"mutualité\", \"naïveté\", \"narghilé\", \"narguilé\", \"natalité\", \"nationalité\", \"nativité\", \"navigabilité\", \"nébulosité\", \"négativité\", \"néné\", \"nervosité\", \"nescafé\", \"netteté\", \"neutralité\", \"névé\", \"niakoué\", \"niébé\", \"nocivité\", \"non-conformité\", \"non-culpabilité\", \"nordicité\", \"normalité\", \"notabilité\", \"notoriété\", \"nouveauté\", \"nouvelleté\", \"nubilité\", \"nudité\", \"nue-propriété\", \"nullité\", \"nuptialité\", \"papauté\", \"papé\", \"parenté\", \"parité\", \"partialité\", \"particularité\", \"passiveté\", \"passivité\", \"pâté\", \"paternité\", \"pause-café\", \"pauses-café\", \"pauvreté\", \"pédé\", \"pédégé\", \"pénalité\", \"pépé\", \"pérennité\", \"perfectibilité\", \"périodicité\", \"perméabilité\", \"permissivité\", \"péroné\", \"perpétuité\", \"perplexité\", \"perré\", \"personnage-clé\", \"personnalité\", \"perspicacité\", \"perversité\", \"pèse-bébé\", \"petit-salé\", \"photosensibilité\", \"phrase-clé\", \"pilosité\", \"pisé\", \"pitié\", \"placidité\", \"plasticité\", \"plausibilité\", \"pluralité\", \"pluviosité\", \"point-clé\", \"poiré\", \"poire-vérité\", \"polarité\", \"polycopié\", \"polytonalité\", \"ponctualité\", \"pongé\", \"popularité\", \"porosité\", \"portabilité\", \"porte-bébé\", \"porte-clé\", \"position-clé\", \"positivité\", \"possessivité\", \"possibilité\", \"poste-clé\", \"postérité\", \"potentialité\", \"pousse-café\", \"pré\", \"pré-salé\", \"précarité\", \"préciosité\", \"précocité\", \"prématurité\", \"prévisibilité\", \"prévôté\", \"prieuré\", \"primauté\", \"principauté\", \"priorité\", \"privauté\", \"probabilité\", \"probité\", \"prodigalité\", \"productivité\", \"profitabilité\", \"prolixité\", \"promiscuité\", \"proportionnalité\", \"propreté\", \"propriété\", \"prospérité\", \"proximité\", \"psyché\", \"puberté\", \"publicité\", \"pudicité\", \"puérilité\", \"pugnacité\", \"puîné\", \"pureté\", \"pusillanimité\", \"qualité\", \"quantité\", \"quarté\", \"quasi-impossibilité\", \"quasi-impunité\", \"quasi-nudité\", \"quasi-totalité\", \"quasi-unanimité\", \"question-clé\", \"quinté\", \"quotidienneté\", \"quotité\", \"radioactivité\", \"raisiné\", \"rapacité\", \"raphé\", \"rapidité\", \"rareté\", \"rationalité\", \"raucité\", \"ré\", \"réactivité\", \"réalité\", \"récépissé\", \"réceptivité\", \"recevabilité\", \"réciprocité\", \"récré\", \"régularité\", \"relativité\", \"religiosité\", \"rentabilité\", \"reportage-vérité\", \"respectabilité\", \"responsabilité\", \"réversibilité\", \"rigidité\", \"risibilité\", \"rivalité\", \"romanité\", \"rotondité\", \"roulé-boulé\", \"royauté\", \"rugosité\", \"rusticité\", \"sagacité\", \"saint-honoré\", \"sainteté\", \"saké\", \"salacité\", \"saleté\", \"salinité\", \"salmonidé\", \"salubrité\", \"santé\", \"sapidité\", \"satiété\", \"sauveté\", \"scène-clé\", \"scientificité\", \"scissiparité\", \"scolarité\", \"scrupulosité\", \"sécurité\", \"sédentarité\", \"sélectivité\", \"semi-liberté\", \"séné\", \"sénevé\", \"sénilité\", \"sensibilité\", \"sensorialité\", \"sensualité\", \"sentimentalité\", \"septicité\", \"sérénité\", \"sergé\", \"séropositivité\", \"sérosité\", \"serviabilité\", \"servilité\", \"sévérité\", \"sexualité\", \"similarité\", \"simplicité\", \"simultanéité\", \"sincérité\", \"singularité\", \"sinuosité\", \"sobriété\", \"sociabilité\", \"société\", \"solennité\", \"solidarité\", \"solidité\", \"solubilité\", \"soluté\", \"solvabilité\", \"sommité\", \"somptuosité\", \"sonorité\", \"sordidité\", \"sororité\", \"soudaineté\", \"sous-comité\", \"sous-humanité\", \"souveraineté\", \"spasticité\", \"spécialité\", \"spécificité\", \"sphéricité\", \"spiritualité\", \"spontanéité\", \"sportivité\", \"spumosité\", \"stabilité\", \"sténopé\", \"stérilité\", \"stupidité\", \"suavité\", \"subjectivité\", \"sublimité\", \"subtilité\", \"succédané\", \"suggestibilité\", \"suggestivité\", \"superficialité\", \"superfluité\", \"supériorité\", \"supermarché\", \"supraconductivité\", \"suractivité\", \"surcapacité\", \"surdité\", \"sûreté\", \"surgé\", \"surhumanité\", \"surintensité\", \"surréalité\", \"susceptibilité\", \"suzeraineté\", \"synthé\", \"taboulé\", \"taciturnité\", \"tamouré\", \"tangibilité\", \"tarpé\", \"technicité\", \"télé\", \"témérité\", \"témoin-clé\", \"temporalité\", \"ténacité\", \"tendreté\", \"ténébrionidé\", \"ténuité\", \"territorialité\", \"tévé\", \"thé\", \"théâtralité\", \"tiaré\", \"timidité\", \"tollé\", \"tonalité\", \"tonicité\", \"totalité\", \"toxicité\", \"traçabilité\", \"tranquillité\", \"translucidité\", \"transsexualité\", \"trinité\", \"trivialité\", \"tsé-tsé\", \"tubérosité\", \"turbé\", \"vacuité\", \"vahiné\", \"validité\", \"vanité\", \"variabilité\", \"variété\", \"vassalité\", \"vastité\", \"velléité\", \"vélocité\", \"vénalité\", \"vénusté\", \"véracité\", \"verbosité\", \"vérité\", \"versatilité\", \"verticalité\", \"vétusté\", \"viabilité\", \"vicinalité\", \"vicomté\", \"viduité\", \"virginité\", \"virilité\", \"virtualité\", \"virtuosité\", \"viscosité\", \"visibilité\", \"vitalité\", \"vivacité\", \"volatilité\", \"volonté\", \"volubilité\", \"volupté\", \"voracité\", \"vulgarité\", \"vulnérabilité\", \"batée\", \"becquée\", \"billevesée\", \"bolée\", \"bondrée\", \"borée\", \"bouée\", \"bougainvillée\", \"brouettée\", \"buée\", \"caducée\", \"canne-épée\", \"casserolée\", \"cavée\", \"centaurée\", \"cépée\", \"céphalée\", \"charretée\", \"chaudronnée\", \"chicorée\", \"chorée\", \"cochlée\", \"cochonnée\", \"colée\", \"contre-allée\", \"contre-plongée\", \"corvée\", \"coryphée\", \"cucurbitacée\", \"cuillerée\", \"culée\", \"cylindrée\", \"demi-journée\", \"demi-volée\", \"denrée\", \"dernière-née\", \"diarrhée\", \"diatomée\", \"dionée\", \"dragée\", \"dulcinée\", \"dysménorrhée\", \"dyspnée\", \"fée\", \"feuillée\", \"flopée\", \"fournée\", \"fricassée\", \"friselée\", \"galathée\", \"galée\", \"giboulée\", \"giroflée\", \"gonorrhée\", \"goulée\", \"graminée\", \"guinée\", \"gynécée\", \"haquenée\", \"hottée\", \"hyménée\", \"hyperborée\", \"hypogée\", \"journée\", \"lance-fusée\", \"litée\", \"logorrhée\", \"lycée\", \"macchabée\", \"mainlevée\", \"maisonnée\", \"mal-aimée\", \"mal-baisée\", \"maréchaussée\", \"marée\", \"mausolée\", \"mélopée\", \"mi-effrontée\", \"mi-journée\", \"miellée\", \"mijaurée\", \"mosquée\", \"moteur-fusée\", \"muflée\", \"nausée\", \"nuée\", \"nuitée\", \"panacée\", \"pâtée\", \"peignée\", \"pelletée\", \"pépée\", \"périgée\", \"périnée\", \"pharmacopée\", \"pipée\", \"platée\", \"pochetée\", \"pochetée\", \"poignée\", \"poirée\", \"poisson-épée\", \"porte-épée\", \"potée\", \"poupée\", \"première-née\", \"prérentrée\", \"presse-purée\", \"prytanée\", \"purée\", \"quasi-fiancée\", \"ramée\", \"raz-de-marée\", \"resucée\", \"rétrofusée\", \"rez-de-chaussée\", \"risée\", \"ruchée\", \"scarabée\", \"séborrhée\", \"sigisbée\", \"simagrée\", \"singe-araignée\", \"soirée\", \"solanacée\", \"tablée\", \"tinée\", \"trachée\", \"trâlée\", \"transfusée\", \"travée\", \"trépanée\", \"trochée\", \"trophée\", \"vallée\", \"ventrée\", \"vesprée\"];\n// These words do not need to be checked with any suffixes.\nvar others = [\"bé\", \"cré\", \"crédié\", \"é\", \"loucedé\", \"eussé\", \"hé\", \"malgré\", \"moitié-moitié\", \"ohé\", \"olé\", \"ollé\", \"sacrédié\", \"d'emblée\", \"quasi-instantanée\"];\nmodule.exports = function () {\n    return {\n        adjectivesVerbs: adjectivesVerbs,\n        nounsStartingWithVowel: nounsStartingWithVowel,\n        nounsStartingWithConsonant: nounsStartingWithConsonant,\n        others: others\n    };\n};\n//# sourceMappingURL=exceptionsParticiples.js.map\n//# sourceMappingURL=exceptionsParticiples.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/exceptionsParticiples.js\n// module id = 694\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/exceptionsParticiples.js?");

/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar indexOf = __webpack_require__(1558);\nvar getLanguage = __webpack_require__(186);\n/**\n * Checks whether the language of the locale is available.\n *\n * @param {string} locale The locale to get the language from.\n * @param {array} languages The list of languages to match.\n * @returns {boolean} Returns true if the language is found in the array.\n */\nmodule.exports = function (locale, languages) {\n  var language = getLanguage(locale);\n  return indexOf(languages, language) > -1;\n};\n//# sourceMappingURL=getLanguageAvailability.js.map\n//# sourceMappingURL=getLanguageAvailability.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getLanguageAvailability.js\n// module id = 695\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getLanguageAvailability.js?");

/***/ }),
/* 696 */,
/* 697 */,
/* 698 */,
/* 699 */,
/* 700 */,
/* 701 */,
/* 702 */,
/* 703 */,
/* 704 */,
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Removes all marks from a text\n *\n * @param {string} text The marked text.\n * @returns {string} The unmarked text.\n */\n\nmodule.exports = function (text) {\n  return text.replace(new RegExp(\"<yoastmark[^>]*>\", \"g\"), \"\").replace(new RegExp(\"</yoastmark>\", \"g\"), \"\");\n};\n//# sourceMappingURL=removeMarks.js.map\n//# sourceMappingURL=removeMarks.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/removeMarks.js\n// module id = 705\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/removeMarks.js?");

/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_freeGlobal.js\n// module id = 706\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_freeGlobal.js?");

/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ListCache = __webpack_require__(562),\n    stackClear = __webpack_require__(1336),\n    stackDelete = __webpack_require__(1337),\n    stackGet = __webpack_require__(1338),\n    stackHas = __webpack_require__(1339),\n    stackSet = __webpack_require__(1340);\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Stack.js\n// module id = 707\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Stack.js?");

/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

eval("var MapCache = __webpack_require__(685),\n    setCacheAdd = __webpack_require__(1342),\n    setCacheHas = __webpack_require__(1343);\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_SetCache.js\n// module id = 708\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_SetCache.js?");

/***/ }),
/* 709 */
/***/ (function(module, exports) {

eval("/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cacheHas.js\n// module id = 709\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cacheHas.js?");

/***/ }),
/* 710 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayFilter.js\n// module id = 710\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayFilter.js?");

/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

eval("var DataView = __webpack_require__(1348),\n    Map = __webpack_require__(686),\n    Promise = __webpack_require__(1349),\n    Set = __webpack_require__(1196),\n    WeakMap = __webpack_require__(1350),\n    baseGetTag = __webpack_require__(174),\n    toSource = __webpack_require__(1083);\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getTag.js\n// module id = 711\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getTag.js?");

/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Marks a text with HTML tags\n *\n * @param {string} text The unmarked text.\n * @returns {string} The marked text.\n */\n\nmodule.exports = function (text) {\n  return \"<yoastmark class='yoast-text-mark'>\" + text + \"</yoastmark>\";\n};\n//# sourceMappingURL=addMark.js.map\n//# sourceMappingURL=addMark.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/addMark.js\n// module id = 712\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/addMark.js?");

/***/ }),
/* 713 */,
/* 714 */,
/* 715 */,
/* 716 */,
/* 717 */,
/* 718 */,
/* 719 */,
/* 720 */,
/* 721 */,
/* 722 */,
/* 723 */,
/* 724 */,
/* 725 */,
/* 726 */,
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */,
/* 731 */,
/* 732 */,
/* 733 */,
/* 734 */,
/* 735 */,
/* 736 */,
/* 737 */,
/* 738 */,
/* 739 */,
/* 740 */,
/* 741 */,
/* 742 */,
/* 743 */,
/* 744 */,
/* 745 */,
/* 746 */,
/* 747 */,
/* 748 */,
/* 749 */,
/* 750 */,
/* 751 */,
/* 752 */,
/* 753 */,
/* 754 */,
/* 755 */,
/* 756 */,
/* 757 */,
/* 758 */,
/* 759 */,
/* 760 */,
/* 761 */,
/* 762 */,
/* 763 */,
/* 764 */,
/* 765 */,
/* 766 */,
/* 767 */,
/* 768 */,
/* 769 */,
/* 770 */,
/* 771 */,
/* 772 */,
/* 773 */,
/* 774 */,
/* 775 */,
/* 776 */,
/* 777 */,
/* 778 */,
/* 779 */,
/* 780 */,
/* 781 */,
/* 782 */,
/* 783 */,
/* 784 */,
/* 785 */,
/* 786 */,
/* 787 */,
/* 788 */,
/* 789 */,
/* 790 */,
/* 791 */,
/* 792 */,
/* 793 */,
/* 794 */,
/* 795 */,
/* 796 */,
/* 797 */,
/* 798 */,
/* 799 */,
/* 800 */,
/* 801 */,
/* 802 */,
/* 803 */,
/* 804 */,
/* 805 */,
/* 806 */,
/* 807 */,
/* 808 */,
/* 809 */,
/* 810 */,
/* 811 */,
/* 812 */,
/* 813 */,
/* 814 */,
/* 815 */,
/* 816 */,
/* 817 */,
/* 818 */,
/* 819 */,
/* 820 */,
/* 821 */,
/* 822 */,
/* 823 */,
/* 824 */,
/* 825 */,
/* 826 */,
/* 827 */,
/* 828 */,
/* 829 */,
/* 830 */,
/* 831 */,
/* 832 */,
/* 833 */,
/* 834 */,
/* 835 */,
/* 836 */,
/* 837 */,
/* 838 */,
/* 839 */,
/* 840 */,
/* 841 */,
/* 842 */,
/* 843 */,
/* 844 */,
/* 845 */,
/* 846 */,
/* 847 */,
/* 848 */,
/* 849 */,
/* 850 */,
/* 851 */,
/* 852 */,
/* 853 */,
/* 854 */,
/* 855 */,
/* 856 */,
/* 857 */,
/* 858 */,
/* 859 */,
/* 860 */,
/* 861 */,
/* 862 */,
/* 863 */,
/* 864 */,
/* 865 */,
/* 866 */,
/* 867 */,
/* 868 */,
/* 869 */,
/* 870 */,
/* 871 */,
/* 872 */,
/* 873 */,
/* 874 */,
/* 875 */,
/* 876 */,
/* 877 */,
/* 878 */,
/* 879 */,
/* 880 */,
/* 881 */,
/* 882 */,
/* 883 */,
/* 884 */,
/* 885 */,
/* 886 */,
/* 887 */,
/* 888 */,
/* 889 */,
/* 890 */,
/* 891 */,
/* 892 */,
/* 893 */,
/* 894 */,
/* 895 */,
/* 896 */,
/* 897 */,
/* 898 */,
/* 899 */,
/* 900 */,
/* 901 */,
/* 902 */,
/* 903 */,
/* 904 */,
/* 905 */,
/* 906 */,
/* 907 */,
/* 908 */,
/* 909 */,
/* 910 */,
/* 911 */,
/* 912 */,
/* 913 */,
/* 914 */,
/* 915 */,
/* 916 */,
/* 917 */,
/* 918 */,
/* 919 */,
/* 920 */,
/* 921 */,
/* 922 */,
/* 923 */,
/* 924 */,
/* 925 */,
/* 926 */,
/* 927 */,
/* 928 */,
/* 929 */,
/* 930 */,
/* 931 */,
/* 932 */,
/* 933 */,
/* 934 */,
/* 935 */,
/* 936 */,
/* 937 */,
/* 938 */,
/* 939 */,
/* 940 */,
/* 941 */,
/* 942 */,
/* 943 */,
/* 944 */,
/* 945 */,
/* 946 */,
/* 947 */,
/* 948 */,
/* 949 */,
/* 950 */,
/* 951 */,
/* 952 */,
/* 953 */,
/* 954 */,
/* 955 */,
/* 956 */,
/* 957 */,
/* 958 */,
/* 959 */,
/* 960 */,
/* 961 */,
/* 962 */,
/* 963 */,
/* 964 */,
/* 965 */,
/* 966 */,
/* 967 */,
/* 968 */,
/* 969 */,
/* 970 */,
/* 971 */,
/* 972 */,
/* 973 */,
/* 974 */,
/* 975 */,
/* 976 */,
/* 977 */,
/* 978 */,
/* 979 */,
/* 980 */,
/* 981 */,
/* 982 */,
/* 983 */,
/* 984 */,
/* 985 */,
/* 986 */,
/* 987 */,
/* 988 */,
/* 989 */,
/* 990 */,
/* 991 */,
/* 992 */,
/* 993 */,
/* 994 */,
/* 995 */,
/* 996 */,
/* 997 */,
/* 998 */,
/* 999 */,
/* 1000 */,
/* 1001 */,
/* 1002 */,
/* 1003 */,
/* 1004 */,
/* 1005 */,
/* 1006 */,
/* 1007 */,
/* 1008 */,
/* 1009 */,
/* 1010 */,
/* 1011 */,
/* 1012 */,
/* 1013 */,
/* 1014 */,
/* 1015 */,
/* 1016 */,
/* 1017 */,
/* 1018 */,
/* 1019 */,
/* 1020 */,
/* 1021 */,
/* 1022 */,
/* 1023 */,
/* 1024 */,
/* 1025 */,
/* 1026 */,
/* 1027 */,
/* 1028 */,
/* 1029 */,
/* 1030 */,
/* 1031 */,
/* 1032 */,
/* 1033 */,
/* 1034 */,
/* 1035 */,
/* 1036 */,
/* 1037 */,
/* 1038 */,
/* 1039 */,
/* 1040 */,
/* 1041 */,
/* 1042 */,
/* 1043 */,
/* 1044 */,
/* 1045 */,
/* 1046 */,
/* 1047 */,
/* 1048 */,
/* 1049 */,
/* 1050 */,
/* 1051 */,
/* 1052 */,
/* 1053 */,
/* 1054 */,
/* 1055 */,
/* 1056 */,
/* 1057 */,
/* 1058 */,
/* 1059 */,
/* 1060 */,
/* 1061 */,
/* 1062 */,
/* 1063 */,
/* 1064 */,
/* 1065 */,
/* 1066 */,
/* 1067 */,
/* 1068 */,
/* 1069 */,
/* 1070 */,
/* 1071 */,
/* 1072 */,
/* 1073 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Interpreters a score and gives it a particular rating.\n *\n * @param {Number} score The score to interpreter.\n * @returns {string} The rating, given based on the score.\n */\n\nvar ScoreToRating = function ScoreToRating(score) {\n    if (score === -1) {\n        return \"error\";\n    }\n    if (score === 0) {\n        return \"feedback\";\n    }\n    if (score <= 4) {\n        return \"bad\";\n    }\n    if (score > 4 && score <= 7) {\n        return \"ok\";\n    }\n    if (score > 7) {\n        return \"good\";\n    }\n    return \"\";\n};\nmodule.exports = ScoreToRating;\n//# sourceMappingURL=scoreToRating.js.map\n//# sourceMappingURL=scoreToRating.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/interpreters/scoreToRating.js\n// module id = 1073\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/interpreters/scoreToRating.js?");

/***/ }),
/* 1074 */,
/* 1075 */,
/* 1076 */,
/* 1077 */,
/* 1078 */
/***/ (function(module, exports, __webpack_require__) {

eval("var createBaseFor = __webpack_require__(1153);\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFor.js\n// module id = 1078\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFor.js?");

/***/ }),
/* 1079 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseTimes = __webpack_require__(1119),\n    isArguments = __webpack_require__(388),\n    isArray = __webpack_require__(64),\n    isBuffer = __webpack_require__(400),\n    isIndex = __webpack_require__(559),\n    isTypedArray = __webpack_require__(560);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayLikeKeys.js\n// module id = 1079\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayLikeKeys.js?");

/***/ }),
/* 1080 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(706);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nodeUtil.js\n// module id = 1080\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nodeUtil.js?");

/***/ }),
/* 1081 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isPrototype = __webpack_require__(561),\n    nativeKeys = __webpack_require__(1159);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseKeys.js\n// module id = 1081\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseKeys.js?");

/***/ }),
/* 1082 */
/***/ (function(module, exports) {

eval("/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_overArg.js\n// module id = 1082\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_overArg.js?");

/***/ }),
/* 1083 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_toSource.js\n// module id = 1083\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_toSource.js?");

/***/ }),
/* 1084 */,
/* 1085 */,
/* 1086 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Researcher = __webpack_require__(1191);\nvar MissingArgument = __webpack_require__(1095);\nvar removeDuplicateMarks = __webpack_require__(1555);\nvar AssessmentResult = __webpack_require__(51);\nvar showTrace = __webpack_require__(1557).showTrace;\nvar isUndefined = __webpack_require__(66);\nvar isFunction = __webpack_require__(389);\nvar forEach = __webpack_require__(32);\nvar filter = __webpack_require__(112);\nvar map = __webpack_require__(63);\nvar findIndex = __webpack_require__(1235);\nvar find = __webpack_require__(1105);\nvar ScoreRating = 9;\n/**\n * Creates the Assessor.\n *\n * @param {Object} i18n The i18n object used for translations.\n * @param {Object} options The options for this assessor.\n * @param {Object} options.marker The marker to pass the list of marks to.\n *\n * @constructor\n */\nvar Assessor = function Assessor(i18n, options) {\n    this.setI18n(i18n);\n    this._assessments = [];\n    this._options = options || {};\n};\n/**\n * Checks if the i18n object is defined and sets it.\n *\n * @param {Object} i18n The i18n object used for translations.\n * @throws {MissingArgument} Parameter needs to be a valid i18n object.\n * @returns {void}\n */\nAssessor.prototype.setI18n = function (i18n) {\n    if (isUndefined(i18n)) {\n        throw new MissingArgument(\"The assessor requires an i18n object.\");\n    }\n    this.i18n = i18n;\n};\n/**\n * Gets all available assessments.\n * @returns {object} assessment\n */\nAssessor.prototype.getAvailableAssessments = function () {\n    return this._assessments;\n};\n/**\n * Checks whether or not the Assessment is applicable.\n *\n * @param {Object} assessment The Assessment object that needs to be checked.\n * @param {Paper} paper The Paper object to check against.\n * @param {Researcher} [researcher] The Researcher object containing additional information.\n * @returns {boolean} Whether or not the Assessment is applicable.\n */\nAssessor.prototype.isApplicable = function (assessment, paper, researcher) {\n    if (assessment.hasOwnProperty(\"isApplicable\") || typeof assessment.isApplicable === \"function\") {\n        return assessment.isApplicable(paper, researcher);\n    }\n    return true;\n};\n/**\n * Determines whether or not an assessment has a marker.\n *\n * @param {Object} assessment The assessment to check for.\n * @returns {boolean} Whether or not the assessment has a marker.\n */\nAssessor.prototype.hasMarker = function (assessment) {\n    if (!isUndefined(window) && !isUndefined(window.yoastHideMarkers) && window.yoastHideMarkers) {\n        return false;\n    }\n    return isFunction(this._options.marker) && (assessment.hasOwnProperty(\"getMarks\") || typeof assessment.getMarks === \"function\");\n};\n/**\n * Returns the specific marker for this assessor.\n *\n * @returns {Function} The specific marker for this assessor.\n */\nAssessor.prototype.getSpecificMarker = function () {\n    return this._options.marker;\n};\n/**\n * Returns the paper that was most recently assessed.\n *\n * @returns {Paper} The paper that was most recently assessed.\n */\nAssessor.prototype.getPaper = function () {\n    return this._lastPaper;\n};\n/**\n * Returns the marker for a given assessment, composes the specific marker with the assessment getMarks function.\n *\n * @param {Object} assessment The assessment for which we are retrieving the composed marker.\n * @param {Paper} paper The paper to retrieve the marker for.\n * @param {Researcher} researcher The researcher for the paper.\n * @returns {Function} A function that can mark the given paper according to the given assessment.\n */\nAssessor.prototype.getMarker = function (assessment, paper, researcher) {\n    var specificMarker = this._options.marker;\n    return function () {\n        var marks = assessment.getMarks(paper, researcher);\n        marks = removeDuplicateMarks(marks);\n        specificMarker(paper, marks);\n    };\n};\n/**\n * Runs the researches defined in the tasklist or the default researches.\n *\n * @param {Paper} paper The paper to run assessments on.\n * @returns {void}\n */\nAssessor.prototype.assess = function (paper) {\n    var researcher = new Researcher(paper);\n    var assessments = this.getAvailableAssessments();\n    this.results = [];\n    assessments = filter(assessments, function (assessment) {\n        return this.isApplicable(assessment, paper, researcher);\n    }.bind(this));\n    this.setHasMarkers(false);\n    this.results = map(assessments, this.executeAssessment.bind(this, paper, researcher));\n    this._lastPaper = paper;\n};\n/**\n * Sets the value of has markers with a boolean to determine if there are markers.\n *\n * @param {boolean} hasMarkers True when there are markers, otherwise it is false.\n * @returns {void}\n */\nAssessor.prototype.setHasMarkers = function (hasMarkers) {\n    this._hasMarkers = hasMarkers;\n};\n/**\n * Returns true when there are markers.\n *\n * @returns {boolean} Are there markers\n */\nAssessor.prototype.hasMarkers = function () {\n    return this._hasMarkers;\n};\n/**\n * Executes an assessment and returns the AssessmentResult.\n *\n * @param {Paper} paper The paper to pass to the assessment.\n * @param {Researcher} researcher The researcher to pass to the assessment.\n * @param {Object} assessment The assessment to execute.\n * @returns {AssessmentResult} The result of the assessment.\n */\nAssessor.prototype.executeAssessment = function (paper, researcher, assessment) {\n    var result;\n    try {\n        result = assessment.getResult(paper, researcher, this.i18n);\n        result.setIdentifier(assessment.identifier);\n        if (result.hasMarks() && this.hasMarker(assessment)) {\n            this.setHasMarkers(true);\n            result.setMarker(this.getMarker(assessment, paper, researcher));\n        }\n    } catch (assessmentError) {\n        showTrace(assessmentError);\n        result = new AssessmentResult();\n        result.setScore(-1);\n        result.setText(this.i18n.sprintf(\n        /* Translators: %1$s expands to the name of the assessment. */\n        this.i18n.dgettext(\"js-text-analysis\", \"An error occurred in the '%1$s' assessment\"), assessment.identifier, assessmentError));\n    }\n    return result;\n};\n/**\n * Filters out all assessmentresults that have no score and no text.\n *\n * @returns {Array<AssessmentResult>} The array with all the valid assessments.\n */\nAssessor.prototype.getValidResults = function () {\n    return filter(this.results, function (result) {\n        return this.isValidResult(result);\n    }.bind(this));\n};\n/**\n * Returns if an assessmentResult is valid.\n *\n * @param {object} assessmentResult The assessmentResult to validate.\n * @returns {boolean} whether or not the result is valid.\n */\nAssessor.prototype.isValidResult = function (assessmentResult) {\n    return assessmentResult.hasScore() && assessmentResult.hasText();\n};\n/**\n * Returns the overallscore. Calculates the totalscore by adding all scores and dividing these\n * by the number of results times the ScoreRating.\n *\n * @returns {number} The overallscore\n */\nAssessor.prototype.calculateOverallScore = function () {\n    var results = this.getValidResults();\n    var totalScore = 0;\n    forEach(results, function (assessmentResult) {\n        totalScore += assessmentResult.getScore();\n    });\n    return Math.round(totalScore / (results.length * ScoreRating) * 100) || 0;\n};\n/**\n * Register an assessment to add it to the internal assessments object.\n *\n * @param {string} name The name of the assessment.\n * @param {object} assessment The object containing function to run as an assessment and it's requirements.\n * @returns {boolean} Whether registering the assessment was successful.\n * @private\n */\nAssessor.prototype.addAssessment = function (name, assessment) {\n    if (!assessment.hasOwnProperty(\"identifier\")) {\n        assessment.identifier = name;\n    }\n    this._assessments.push(assessment);\n    return true;\n};\n/**\n * Remove a specific Assessment from the list of Assessments.\n *\n * @param {string} name The Assessment to remove from the list of assessments.\n * @returns {void}\n */\nAssessor.prototype.removeAssessment = function (name) {\n    var toDelete = findIndex(this._assessments, function (assessment) {\n        return assessment.hasOwnProperty(\"identifier\") && name === assessment.identifier;\n    });\n    if (-1 !== toDelete) {\n        this._assessments.splice(toDelete, 1);\n    }\n};\n/**\n * Returns an assessment by identifier\n *\n * @param {string} identifier The identifier of the assessment.\n * @returns {undefined|Object} The object if found, otherwise undefined.\n */\nAssessor.prototype.getAssessment = function (identifier) {\n    return find(this._assessments, function (assessment) {\n        return assessment.hasOwnProperty(\"identifier\") && identifier === assessment.identifier;\n    });\n};\n/**\n * Checks which of the available assessments are applicable and returns an array with applicable assessments.\n *\n * @returns {Array} The array with applicable assessments.\n */\nAssessor.prototype.getApplicableAssessments = function () {\n    var availableAssessments = this.getAvailableAssessments();\n    return filter(availableAssessments, function (availableAssessment) {\n        return this.isApplicable(availableAssessment, this.getPaper());\n    }.bind(this));\n};\nmodule.exports = Assessor;\n//# sourceMappingURL=assessor.js.map\n//# sourceMappingURL=assessor.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessor.js\n// module id = 1086\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessor.js?");

/***/ }),
/* 1087 */
/***/ (function(module, exports) {

eval("/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setToArray.js\n// module id = 1087\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setToArray.js?");

/***/ }),
/* 1088 */
/***/ (function(module, exports, __webpack_require__) {

eval("var castPath = __webpack_require__(687),\n    toKey = __webpack_require__(564);\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseGet.js\n// module id = 1088\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseGet.js?");

/***/ }),
/* 1089 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArray = __webpack_require__(64),\n    isSymbol = __webpack_require__(563);\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isKey.js\n// module id = 1089\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isKey.js?");

/***/ }),
/* 1090 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseToString = __webpack_require__(1356);\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toString.js\n// module id = 1090\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toString.js?");

/***/ }),
/* 1091 */
/***/ (function(module, exports, __webpack_require__) {

eval("var defineProperty = __webpack_require__(1207);\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAssignValue.js\n// module id = 1091\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAssignValue.js?");

/***/ }),
/* 1092 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArrayLike = __webpack_require__(168),\n    isObjectLike = __webpack_require__(124);\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArrayLikeObject.js\n// module id = 1092\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isArrayLikeObject.js?");

/***/ }),
/* 1093 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assignValue = __webpack_require__(1124),\n    baseAssignValue = __webpack_require__(1091);\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copyObject.js\n// module id = 1093\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copyObject.js?");

/***/ }),
/* 1094 */
/***/ (function(module, exports, __webpack_require__) {

eval("var eq = __webpack_require__(326),\n    isArrayLike = __webpack_require__(168),\n    isIndex = __webpack_require__(559),\n    isObject = __webpack_require__(96);\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isIterateeCall.js\n// module id = 1094\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isIterateeCall.js?");

/***/ }),
/* 1095 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function MissingArgumentError(message) {\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.message = message;\n};\n__webpack_require__(79).inherits(module.exports, Error);\n//# sourceMappingURL=missingArgument.js.map\n//# sourceMappingURL=missingArgument.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/errors/missingArgument.js\n// module id = 1095\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/errors/missingArgument.js?");

/***/ }),
/* 1096 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar urlFromAnchorRegex = /href=([\"'])([^\"']+)\\1/i;\nvar urlMethods = __webpack_require__(572);\n/**\n * Removes a hash from a URL, assumes a well formed URL.\n *\n * @param {string} url The URL to remove a hash from.\n * @returns {string} The URL without the hash.\n */\nfunction removeHash(url) {\n    return url.split(\"#\")[0];\n}\n/**\n * Removes all query args from a URL, assumes a well formed URL.\n *\n * @param {string} url The URL to remove the query args from.\n * @returns {string} The URL without the query args.\n */\nfunction removeQueryArgs(url) {\n    return url.split(\"?\")[0];\n}\n/**\n * Removes the trailing slash of a URL.\n *\n * @param {string} url The URL to remove the trailing slash from.\n * @returns {string} A URL without a trailing slash.\n */\nfunction removeTrailingSlash(url) {\n    return url.replace(/\\/$/, \"\");\n}\n/**\n * Adds a trailing slash to a URL if it is not present.\n *\n * @param {string} url The URL to add a trailing slash to.\n * @returns {string} A URL with a trailing slash.\n */\nfunction addTrailingSlash(url) {\n    return removeTrailingSlash(url) + \"/\";\n}\n/**\n * Retrieves the URL from an anchor tag.\n *\n * @param {string} anchorTag An anchor tag.\n * @returns {string} The URL in the anchor tag.\n */\nfunction getFromAnchorTag(anchorTag) {\n    var urlMatch = urlFromAnchorRegex.exec(anchorTag);\n    return urlMatch === null ? \"\" : urlMatch[2];\n}\n/**\n * Returns whether or not the given URLs are equal.\n *\n * @param {string} urlA The first URL to compare.\n * @param {string} urlB The second URL to compare.\n *\n * @returns {boolean} Whether or not the given URLs are equal.\n */\nfunction areEqual(urlA, urlB) {\n    // Make sure we are comparing URLs without query arguments and hashes.\n    urlA = removeQueryArgs(removeHash(urlA));\n    urlB = removeQueryArgs(removeHash(urlB));\n    return addTrailingSlash(urlA) === addTrailingSlash(urlB);\n}\n/**\n * Returns the domain name of a URL.\n *\n * @param {string} url The URL to retrieve the domain name of.\n * @returns {string} The domain name of the URL.\n */\nfunction getHostname(url) {\n    url = urlMethods.parse(url);\n    return url.hostname;\n}\n/**\n * Returns the protocol of a URL.\n *\n * Note that the colon (http:) is also part of the protocol, conform to node's url.parse api.\n *\n * @param {string} url The URL to retrieve the protocol of.\n * @returns {string|null} The protocol of the URL or null if no protocol is present.\n */\nfunction getProtocol(url) {\n    return urlMethods.parse(url).protocol;\n}\n/**\n * Determine whether a URL is internal.\n *\n * @param {string} url The URL to test.\n * @param {string} host The current host.\n *\n * @returns {boolean} Whether or not the URL is internal.\n */\nfunction isInternalLink(url, host) {\n    var parsedUrl = urlMethods.parse(url, false, true);\n    // Check if the URL starts with a single slash.\n    if (url.indexOf(\"//\") === -1 && url.indexOf(\"/\") === 0) {\n        return true;\n    }\n    // Check if the URL starts with a # indicating a fragment.\n    if (url.indexOf(\"#\") === 0) {\n        return false;\n    }\n    // No host indicates an internal link.\n    if (!parsedUrl.host) {\n        return true;\n    }\n    return parsedUrl.host === host;\n}\n/**\n * Checks whether the protocol is either HTTP: or HTTPS:.\n *\n * @param {string} protocol The protocol to test.\n *\n * @returns {boolean} Whether the protocol is http(s):.\n */\nfunction protocolIsHttpScheme(protocol) {\n    if (!protocol) {\n        return false;\n    }\n    return protocol === \"http:\" || protocol === \"https:\";\n}\n/**\n * Determines whether the link is a relative fragment URL.\n *\n * @param {string} url The URL to test.\n *\n * @returns {boolean} Whether the link is a relative fragment URL.\n */\nfunction isRelativeFragmentURL(url) {\n    return url.indexOf(\"#\") === 0;\n}\nmodule.exports = {\n    removeHash: removeHash,\n    removeQueryArgs: removeQueryArgs,\n    removeTrailingSlash: removeTrailingSlash,\n    addTrailingSlash: addTrailingSlash,\n    getFromAnchorTag: getFromAnchorTag,\n    areEqual: areEqual,\n    getHostname: getHostname,\n    getProtocol: getProtocol,\n    isInternalLink: isInternalLink,\n    protocolIsHttpScheme: protocolIsHttpScheme,\n    isRelativeFragmentURL: isRelativeFragmentURL\n};\n//# sourceMappingURL=url.js.map\n//# sourceMappingURL=url.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/url.js\n// module id = 1096\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/url.js?");

/***/ }),
/* 1097 */
/***/ (function(module, exports) {

eval("module.exports = {\"Aacute\":\"Á\",\"aacute\":\"á\",\"Abreve\":\"Ă\",\"abreve\":\"ă\",\"ac\":\"∾\",\"acd\":\"∿\",\"acE\":\"∾̳\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"Acy\":\"А\",\"acy\":\"а\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"af\":\"⁡\",\"Afr\":\"𝔄\",\"afr\":\"𝔞\",\"Agrave\":\"À\",\"agrave\":\"à\",\"alefsym\":\"ℵ\",\"aleph\":\"ℵ\",\"Alpha\":\"Α\",\"alpha\":\"α\",\"Amacr\":\"Ā\",\"amacr\":\"ā\",\"amalg\":\"⨿\",\"amp\":\"&\",\"AMP\":\"&\",\"andand\":\"⩕\",\"And\":\"⩓\",\"and\":\"∧\",\"andd\":\"⩜\",\"andslope\":\"⩘\",\"andv\":\"⩚\",\"ang\":\"∠\",\"ange\":\"⦤\",\"angle\":\"∠\",\"angmsdaa\":\"⦨\",\"angmsdab\":\"⦩\",\"angmsdac\":\"⦪\",\"angmsdad\":\"⦫\",\"angmsdae\":\"⦬\",\"angmsdaf\":\"⦭\",\"angmsdag\":\"⦮\",\"angmsdah\":\"⦯\",\"angmsd\":\"∡\",\"angrt\":\"∟\",\"angrtvb\":\"⊾\",\"angrtvbd\":\"⦝\",\"angsph\":\"∢\",\"angst\":\"Å\",\"angzarr\":\"⍼\",\"Aogon\":\"Ą\",\"aogon\":\"ą\",\"Aopf\":\"𝔸\",\"aopf\":\"𝕒\",\"apacir\":\"⩯\",\"ap\":\"≈\",\"apE\":\"⩰\",\"ape\":\"≊\",\"apid\":\"≋\",\"apos\":\"'\",\"ApplyFunction\":\"⁡\",\"approx\":\"≈\",\"approxeq\":\"≊\",\"Aring\":\"Å\",\"aring\":\"å\",\"Ascr\":\"𝒜\",\"ascr\":\"𝒶\",\"Assign\":\"≔\",\"ast\":\"*\",\"asymp\":\"≈\",\"asympeq\":\"≍\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"awconint\":\"∳\",\"awint\":\"⨑\",\"backcong\":\"≌\",\"backepsilon\":\"϶\",\"backprime\":\"‵\",\"backsim\":\"∽\",\"backsimeq\":\"⋍\",\"Backslash\":\"∖\",\"Barv\":\"⫧\",\"barvee\":\"⊽\",\"barwed\":\"⌅\",\"Barwed\":\"⌆\",\"barwedge\":\"⌅\",\"bbrk\":\"⎵\",\"bbrktbrk\":\"⎶\",\"bcong\":\"≌\",\"Bcy\":\"Б\",\"bcy\":\"б\",\"bdquo\":\"„\",\"becaus\":\"∵\",\"because\":\"∵\",\"Because\":\"∵\",\"bemptyv\":\"⦰\",\"bepsi\":\"϶\",\"bernou\":\"ℬ\",\"Bernoullis\":\"ℬ\",\"Beta\":\"Β\",\"beta\":\"β\",\"beth\":\"ℶ\",\"between\":\"≬\",\"Bfr\":\"𝔅\",\"bfr\":\"𝔟\",\"bigcap\":\"⋂\",\"bigcirc\":\"◯\",\"bigcup\":\"⋃\",\"bigodot\":\"⨀\",\"bigoplus\":\"⨁\",\"bigotimes\":\"⨂\",\"bigsqcup\":\"⨆\",\"bigstar\":\"★\",\"bigtriangledown\":\"▽\",\"bigtriangleup\":\"△\",\"biguplus\":\"⨄\",\"bigvee\":\"⋁\",\"bigwedge\":\"⋀\",\"bkarow\":\"⤍\",\"blacklozenge\":\"⧫\",\"blacksquare\":\"▪\",\"blacktriangle\":\"▴\",\"blacktriangledown\":\"▾\",\"blacktriangleleft\":\"◂\",\"blacktriangleright\":\"▸\",\"blank\":\"␣\",\"blk12\":\"▒\",\"blk14\":\"░\",\"blk34\":\"▓\",\"block\":\"█\",\"bne\":\"=⃥\",\"bnequiv\":\"≡⃥\",\"bNot\":\"⫭\",\"bnot\":\"⌐\",\"Bopf\":\"𝔹\",\"bopf\":\"𝕓\",\"bot\":\"⊥\",\"bottom\":\"⊥\",\"bowtie\":\"⋈\",\"boxbox\":\"⧉\",\"boxdl\":\"┐\",\"boxdL\":\"╕\",\"boxDl\":\"╖\",\"boxDL\":\"╗\",\"boxdr\":\"┌\",\"boxdR\":\"╒\",\"boxDr\":\"╓\",\"boxDR\":\"╔\",\"boxh\":\"─\",\"boxH\":\"═\",\"boxhd\":\"┬\",\"boxHd\":\"╤\",\"boxhD\":\"╥\",\"boxHD\":\"╦\",\"boxhu\":\"┴\",\"boxHu\":\"╧\",\"boxhU\":\"╨\",\"boxHU\":\"╩\",\"boxminus\":\"⊟\",\"boxplus\":\"⊞\",\"boxtimes\":\"⊠\",\"boxul\":\"┘\",\"boxuL\":\"╛\",\"boxUl\":\"╜\",\"boxUL\":\"╝\",\"boxur\":\"└\",\"boxuR\":\"╘\",\"boxUr\":\"╙\",\"boxUR\":\"╚\",\"boxv\":\"│\",\"boxV\":\"║\",\"boxvh\":\"┼\",\"boxvH\":\"╪\",\"boxVh\":\"╫\",\"boxVH\":\"╬\",\"boxvl\":\"┤\",\"boxvL\":\"╡\",\"boxVl\":\"╢\",\"boxVL\":\"╣\",\"boxvr\":\"├\",\"boxvR\":\"╞\",\"boxVr\":\"╟\",\"boxVR\":\"╠\",\"bprime\":\"‵\",\"breve\":\"˘\",\"Breve\":\"˘\",\"brvbar\":\"¦\",\"bscr\":\"𝒷\",\"Bscr\":\"ℬ\",\"bsemi\":\"⁏\",\"bsim\":\"∽\",\"bsime\":\"⋍\",\"bsolb\":\"⧅\",\"bsol\":\"\\\\\",\"bsolhsub\":\"⟈\",\"bull\":\"•\",\"bullet\":\"•\",\"bump\":\"≎\",\"bumpE\":\"⪮\",\"bumpe\":\"≏\",\"Bumpeq\":\"≎\",\"bumpeq\":\"≏\",\"Cacute\":\"Ć\",\"cacute\":\"ć\",\"capand\":\"⩄\",\"capbrcup\":\"⩉\",\"capcap\":\"⩋\",\"cap\":\"∩\",\"Cap\":\"⋒\",\"capcup\":\"⩇\",\"capdot\":\"⩀\",\"CapitalDifferentialD\":\"ⅅ\",\"caps\":\"∩︀\",\"caret\":\"⁁\",\"caron\":\"ˇ\",\"Cayleys\":\"ℭ\",\"ccaps\":\"⩍\",\"Ccaron\":\"Č\",\"ccaron\":\"č\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"Ccirc\":\"Ĉ\",\"ccirc\":\"ĉ\",\"Cconint\":\"∰\",\"ccups\":\"⩌\",\"ccupssm\":\"⩐\",\"Cdot\":\"Ċ\",\"cdot\":\"ċ\",\"cedil\":\"¸\",\"Cedilla\":\"¸\",\"cemptyv\":\"⦲\",\"cent\":\"¢\",\"centerdot\":\"·\",\"CenterDot\":\"·\",\"cfr\":\"𝔠\",\"Cfr\":\"ℭ\",\"CHcy\":\"Ч\",\"chcy\":\"ч\",\"check\":\"✓\",\"checkmark\":\"✓\",\"Chi\":\"Χ\",\"chi\":\"χ\",\"circ\":\"ˆ\",\"circeq\":\"≗\",\"circlearrowleft\":\"↺\",\"circlearrowright\":\"↻\",\"circledast\":\"⊛\",\"circledcirc\":\"⊚\",\"circleddash\":\"⊝\",\"CircleDot\":\"⊙\",\"circledR\":\"®\",\"circledS\":\"Ⓢ\",\"CircleMinus\":\"⊖\",\"CirclePlus\":\"⊕\",\"CircleTimes\":\"⊗\",\"cir\":\"○\",\"cirE\":\"⧃\",\"cire\":\"≗\",\"cirfnint\":\"⨐\",\"cirmid\":\"⫯\",\"cirscir\":\"⧂\",\"ClockwiseContourIntegral\":\"∲\",\"CloseCurlyDoubleQuote\":\"”\",\"CloseCurlyQuote\":\"’\",\"clubs\":\"♣\",\"clubsuit\":\"♣\",\"colon\":\":\",\"Colon\":\"∷\",\"Colone\":\"⩴\",\"colone\":\"≔\",\"coloneq\":\"≔\",\"comma\":\",\",\"commat\":\"@\",\"comp\":\"∁\",\"compfn\":\"∘\",\"complement\":\"∁\",\"complexes\":\"ℂ\",\"cong\":\"≅\",\"congdot\":\"⩭\",\"Congruent\":\"≡\",\"conint\":\"∮\",\"Conint\":\"∯\",\"ContourIntegral\":\"∮\",\"copf\":\"𝕔\",\"Copf\":\"ℂ\",\"coprod\":\"∐\",\"Coproduct\":\"∐\",\"copy\":\"©\",\"COPY\":\"©\",\"copysr\":\"℗\",\"CounterClockwiseContourIntegral\":\"∳\",\"crarr\":\"↵\",\"cross\":\"✗\",\"Cross\":\"⨯\",\"Cscr\":\"𝒞\",\"cscr\":\"𝒸\",\"csub\":\"⫏\",\"csube\":\"⫑\",\"csup\":\"⫐\",\"csupe\":\"⫒\",\"ctdot\":\"⋯\",\"cudarrl\":\"⤸\",\"cudarrr\":\"⤵\",\"cuepr\":\"⋞\",\"cuesc\":\"⋟\",\"cularr\":\"↶\",\"cularrp\":\"⤽\",\"cupbrcap\":\"⩈\",\"cupcap\":\"⩆\",\"CupCap\":\"≍\",\"cup\":\"∪\",\"Cup\":\"⋓\",\"cupcup\":\"⩊\",\"cupdot\":\"⊍\",\"cupor\":\"⩅\",\"cups\":\"∪︀\",\"curarr\":\"↷\",\"curarrm\":\"⤼\",\"curlyeqprec\":\"⋞\",\"curlyeqsucc\":\"⋟\",\"curlyvee\":\"⋎\",\"curlywedge\":\"⋏\",\"curren\":\"¤\",\"curvearrowleft\":\"↶\",\"curvearrowright\":\"↷\",\"cuvee\":\"⋎\",\"cuwed\":\"⋏\",\"cwconint\":\"∲\",\"cwint\":\"∱\",\"cylcty\":\"⌭\",\"dagger\":\"†\",\"Dagger\":\"‡\",\"daleth\":\"ℸ\",\"darr\":\"↓\",\"Darr\":\"↡\",\"dArr\":\"⇓\",\"dash\":\"‐\",\"Dashv\":\"⫤\",\"dashv\":\"⊣\",\"dbkarow\":\"⤏\",\"dblac\":\"˝\",\"Dcaron\":\"Ď\",\"dcaron\":\"ď\",\"Dcy\":\"Д\",\"dcy\":\"д\",\"ddagger\":\"‡\",\"ddarr\":\"⇊\",\"DD\":\"ⅅ\",\"dd\":\"ⅆ\",\"DDotrahd\":\"⤑\",\"ddotseq\":\"⩷\",\"deg\":\"°\",\"Del\":\"∇\",\"Delta\":\"Δ\",\"delta\":\"δ\",\"demptyv\":\"⦱\",\"dfisht\":\"⥿\",\"Dfr\":\"𝔇\",\"dfr\":\"𝔡\",\"dHar\":\"⥥\",\"dharl\":\"⇃\",\"dharr\":\"⇂\",\"DiacriticalAcute\":\"´\",\"DiacriticalDot\":\"˙\",\"DiacriticalDoubleAcute\":\"˝\",\"DiacriticalGrave\":\"`\",\"DiacriticalTilde\":\"˜\",\"diam\":\"⋄\",\"diamond\":\"⋄\",\"Diamond\":\"⋄\",\"diamondsuit\":\"♦\",\"diams\":\"♦\",\"die\":\"¨\",\"DifferentialD\":\"ⅆ\",\"digamma\":\"ϝ\",\"disin\":\"⋲\",\"div\":\"÷\",\"divide\":\"÷\",\"divideontimes\":\"⋇\",\"divonx\":\"⋇\",\"DJcy\":\"Ђ\",\"djcy\":\"ђ\",\"dlcorn\":\"⌞\",\"dlcrop\":\"⌍\",\"dollar\":\"$\",\"Dopf\":\"𝔻\",\"dopf\":\"𝕕\",\"Dot\":\"¨\",\"dot\":\"˙\",\"DotDot\":\"⃜\",\"doteq\":\"≐\",\"doteqdot\":\"≑\",\"DotEqual\":\"≐\",\"dotminus\":\"∸\",\"dotplus\":\"∔\",\"dotsquare\":\"⊡\",\"doublebarwedge\":\"⌆\",\"DoubleContourIntegral\":\"∯\",\"DoubleDot\":\"¨\",\"DoubleDownArrow\":\"⇓\",\"DoubleLeftArrow\":\"⇐\",\"DoubleLeftRightArrow\":\"⇔\",\"DoubleLeftTee\":\"⫤\",\"DoubleLongLeftArrow\":\"⟸\",\"DoubleLongLeftRightArrow\":\"⟺\",\"DoubleLongRightArrow\":\"⟹\",\"DoubleRightArrow\":\"⇒\",\"DoubleRightTee\":\"⊨\",\"DoubleUpArrow\":\"⇑\",\"DoubleUpDownArrow\":\"⇕\",\"DoubleVerticalBar\":\"∥\",\"DownArrowBar\":\"⤓\",\"downarrow\":\"↓\",\"DownArrow\":\"↓\",\"Downarrow\":\"⇓\",\"DownArrowUpArrow\":\"⇵\",\"DownBreve\":\"̑\",\"downdownarrows\":\"⇊\",\"downharpoonleft\":\"⇃\",\"downharpoonright\":\"⇂\",\"DownLeftRightVector\":\"⥐\",\"DownLeftTeeVector\":\"⥞\",\"DownLeftVectorBar\":\"⥖\",\"DownLeftVector\":\"↽\",\"DownRightTeeVector\":\"⥟\",\"DownRightVectorBar\":\"⥗\",\"DownRightVector\":\"⇁\",\"DownTeeArrow\":\"↧\",\"DownTee\":\"⊤\",\"drbkarow\":\"⤐\",\"drcorn\":\"⌟\",\"drcrop\":\"⌌\",\"Dscr\":\"𝒟\",\"dscr\":\"𝒹\",\"DScy\":\"Ѕ\",\"dscy\":\"ѕ\",\"dsol\":\"⧶\",\"Dstrok\":\"Đ\",\"dstrok\":\"đ\",\"dtdot\":\"⋱\",\"dtri\":\"▿\",\"dtrif\":\"▾\",\"duarr\":\"⇵\",\"duhar\":\"⥯\",\"dwangle\":\"⦦\",\"DZcy\":\"Џ\",\"dzcy\":\"џ\",\"dzigrarr\":\"⟿\",\"Eacute\":\"É\",\"eacute\":\"é\",\"easter\":\"⩮\",\"Ecaron\":\"Ě\",\"ecaron\":\"ě\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"ecir\":\"≖\",\"ecolon\":\"≕\",\"Ecy\":\"Э\",\"ecy\":\"э\",\"eDDot\":\"⩷\",\"Edot\":\"Ė\",\"edot\":\"ė\",\"eDot\":\"≑\",\"ee\":\"ⅇ\",\"efDot\":\"≒\",\"Efr\":\"𝔈\",\"efr\":\"𝔢\",\"eg\":\"⪚\",\"Egrave\":\"È\",\"egrave\":\"è\",\"egs\":\"⪖\",\"egsdot\":\"⪘\",\"el\":\"⪙\",\"Element\":\"∈\",\"elinters\":\"⏧\",\"ell\":\"ℓ\",\"els\":\"⪕\",\"elsdot\":\"⪗\",\"Emacr\":\"Ē\",\"emacr\":\"ē\",\"empty\":\"∅\",\"emptyset\":\"∅\",\"EmptySmallSquare\":\"◻\",\"emptyv\":\"∅\",\"EmptyVerySmallSquare\":\"▫\",\"emsp13\":\" \",\"emsp14\":\" \",\"emsp\":\" \",\"ENG\":\"Ŋ\",\"eng\":\"ŋ\",\"ensp\":\" \",\"Eogon\":\"Ę\",\"eogon\":\"ę\",\"Eopf\":\"𝔼\",\"eopf\":\"𝕖\",\"epar\":\"⋕\",\"eparsl\":\"⧣\",\"eplus\":\"⩱\",\"epsi\":\"ε\",\"Epsilon\":\"Ε\",\"epsilon\":\"ε\",\"epsiv\":\"ϵ\",\"eqcirc\":\"≖\",\"eqcolon\":\"≕\",\"eqsim\":\"≂\",\"eqslantgtr\":\"⪖\",\"eqslantless\":\"⪕\",\"Equal\":\"⩵\",\"equals\":\"=\",\"EqualTilde\":\"≂\",\"equest\":\"≟\",\"Equilibrium\":\"⇌\",\"equiv\":\"≡\",\"equivDD\":\"⩸\",\"eqvparsl\":\"⧥\",\"erarr\":\"⥱\",\"erDot\":\"≓\",\"escr\":\"ℯ\",\"Escr\":\"ℰ\",\"esdot\":\"≐\",\"Esim\":\"⩳\",\"esim\":\"≂\",\"Eta\":\"Η\",\"eta\":\"η\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"euro\":\"€\",\"excl\":\"!\",\"exist\":\"∃\",\"Exists\":\"∃\",\"expectation\":\"ℰ\",\"exponentiale\":\"ⅇ\",\"ExponentialE\":\"ⅇ\",\"fallingdotseq\":\"≒\",\"Fcy\":\"Ф\",\"fcy\":\"ф\",\"female\":\"♀\",\"ffilig\":\"ﬃ\",\"fflig\":\"ﬀ\",\"ffllig\":\"ﬄ\",\"Ffr\":\"𝔉\",\"ffr\":\"𝔣\",\"filig\":\"ﬁ\",\"FilledSmallSquare\":\"◼\",\"FilledVerySmallSquare\":\"▪\",\"fjlig\":\"fj\",\"flat\":\"♭\",\"fllig\":\"ﬂ\",\"fltns\":\"▱\",\"fnof\":\"ƒ\",\"Fopf\":\"𝔽\",\"fopf\":\"𝕗\",\"forall\":\"∀\",\"ForAll\":\"∀\",\"fork\":\"⋔\",\"forkv\":\"⫙\",\"Fouriertrf\":\"ℱ\",\"fpartint\":\"⨍\",\"frac12\":\"½\",\"frac13\":\"⅓\",\"frac14\":\"¼\",\"frac15\":\"⅕\",\"frac16\":\"⅙\",\"frac18\":\"⅛\",\"frac23\":\"⅔\",\"frac25\":\"⅖\",\"frac34\":\"¾\",\"frac35\":\"⅗\",\"frac38\":\"⅜\",\"frac45\":\"⅘\",\"frac56\":\"⅚\",\"frac58\":\"⅝\",\"frac78\":\"⅞\",\"frasl\":\"⁄\",\"frown\":\"⌢\",\"fscr\":\"𝒻\",\"Fscr\":\"ℱ\",\"gacute\":\"ǵ\",\"Gamma\":\"Γ\",\"gamma\":\"γ\",\"Gammad\":\"Ϝ\",\"gammad\":\"ϝ\",\"gap\":\"⪆\",\"Gbreve\":\"Ğ\",\"gbreve\":\"ğ\",\"Gcedil\":\"Ģ\",\"Gcirc\":\"Ĝ\",\"gcirc\":\"ĝ\",\"Gcy\":\"Г\",\"gcy\":\"г\",\"Gdot\":\"Ġ\",\"gdot\":\"ġ\",\"ge\":\"≥\",\"gE\":\"≧\",\"gEl\":\"⪌\",\"gel\":\"⋛\",\"geq\":\"≥\",\"geqq\":\"≧\",\"geqslant\":\"⩾\",\"gescc\":\"⪩\",\"ges\":\"⩾\",\"gesdot\":\"⪀\",\"gesdoto\":\"⪂\",\"gesdotol\":\"⪄\",\"gesl\":\"⋛︀\",\"gesles\":\"⪔\",\"Gfr\":\"𝔊\",\"gfr\":\"𝔤\",\"gg\":\"≫\",\"Gg\":\"⋙\",\"ggg\":\"⋙\",\"gimel\":\"ℷ\",\"GJcy\":\"Ѓ\",\"gjcy\":\"ѓ\",\"gla\":\"⪥\",\"gl\":\"≷\",\"glE\":\"⪒\",\"glj\":\"⪤\",\"gnap\":\"⪊\",\"gnapprox\":\"⪊\",\"gne\":\"⪈\",\"gnE\":\"≩\",\"gneq\":\"⪈\",\"gneqq\":\"≩\",\"gnsim\":\"⋧\",\"Gopf\":\"𝔾\",\"gopf\":\"𝕘\",\"grave\":\"`\",\"GreaterEqual\":\"≥\",\"GreaterEqualLess\":\"⋛\",\"GreaterFullEqual\":\"≧\",\"GreaterGreater\":\"⪢\",\"GreaterLess\":\"≷\",\"GreaterSlantEqual\":\"⩾\",\"GreaterTilde\":\"≳\",\"Gscr\":\"𝒢\",\"gscr\":\"ℊ\",\"gsim\":\"≳\",\"gsime\":\"⪎\",\"gsiml\":\"⪐\",\"gtcc\":\"⪧\",\"gtcir\":\"⩺\",\"gt\":\">\",\"GT\":\">\",\"Gt\":\"≫\",\"gtdot\":\"⋗\",\"gtlPar\":\"⦕\",\"gtquest\":\"⩼\",\"gtrapprox\":\"⪆\",\"gtrarr\":\"⥸\",\"gtrdot\":\"⋗\",\"gtreqless\":\"⋛\",\"gtreqqless\":\"⪌\",\"gtrless\":\"≷\",\"gtrsim\":\"≳\",\"gvertneqq\":\"≩︀\",\"gvnE\":\"≩︀\",\"Hacek\":\"ˇ\",\"hairsp\":\" \",\"half\":\"½\",\"hamilt\":\"ℋ\",\"HARDcy\":\"Ъ\",\"hardcy\":\"ъ\",\"harrcir\":\"⥈\",\"harr\":\"↔\",\"hArr\":\"⇔\",\"harrw\":\"↭\",\"Hat\":\"^\",\"hbar\":\"ℏ\",\"Hcirc\":\"Ĥ\",\"hcirc\":\"ĥ\",\"hearts\":\"♥\",\"heartsuit\":\"♥\",\"hellip\":\"…\",\"hercon\":\"⊹\",\"hfr\":\"𝔥\",\"Hfr\":\"ℌ\",\"HilbertSpace\":\"ℋ\",\"hksearow\":\"⤥\",\"hkswarow\":\"⤦\",\"hoarr\":\"⇿\",\"homtht\":\"∻\",\"hookleftarrow\":\"↩\",\"hookrightarrow\":\"↪\",\"hopf\":\"𝕙\",\"Hopf\":\"ℍ\",\"horbar\":\"―\",\"HorizontalLine\":\"─\",\"hscr\":\"𝒽\",\"Hscr\":\"ℋ\",\"hslash\":\"ℏ\",\"Hstrok\":\"Ħ\",\"hstrok\":\"ħ\",\"HumpDownHump\":\"≎\",\"HumpEqual\":\"≏\",\"hybull\":\"⁃\",\"hyphen\":\"‐\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"ic\":\"⁣\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"Icy\":\"И\",\"icy\":\"и\",\"Idot\":\"İ\",\"IEcy\":\"Е\",\"iecy\":\"е\",\"iexcl\":\"¡\",\"iff\":\"⇔\",\"ifr\":\"𝔦\",\"Ifr\":\"ℑ\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"ii\":\"ⅈ\",\"iiiint\":\"⨌\",\"iiint\":\"∭\",\"iinfin\":\"⧜\",\"iiota\":\"℩\",\"IJlig\":\"Ĳ\",\"ijlig\":\"ĳ\",\"Imacr\":\"Ī\",\"imacr\":\"ī\",\"image\":\"ℑ\",\"ImaginaryI\":\"ⅈ\",\"imagline\":\"ℐ\",\"imagpart\":\"ℑ\",\"imath\":\"ı\",\"Im\":\"ℑ\",\"imof\":\"⊷\",\"imped\":\"Ƶ\",\"Implies\":\"⇒\",\"incare\":\"℅\",\"in\":\"∈\",\"infin\":\"∞\",\"infintie\":\"⧝\",\"inodot\":\"ı\",\"intcal\":\"⊺\",\"int\":\"∫\",\"Int\":\"∬\",\"integers\":\"ℤ\",\"Integral\":\"∫\",\"intercal\":\"⊺\",\"Intersection\":\"⋂\",\"intlarhk\":\"⨗\",\"intprod\":\"⨼\",\"InvisibleComma\":\"⁣\",\"InvisibleTimes\":\"⁢\",\"IOcy\":\"Ё\",\"iocy\":\"ё\",\"Iogon\":\"Į\",\"iogon\":\"į\",\"Iopf\":\"𝕀\",\"iopf\":\"𝕚\",\"Iota\":\"Ι\",\"iota\":\"ι\",\"iprod\":\"⨼\",\"iquest\":\"¿\",\"iscr\":\"𝒾\",\"Iscr\":\"ℐ\",\"isin\":\"∈\",\"isindot\":\"⋵\",\"isinE\":\"⋹\",\"isins\":\"⋴\",\"isinsv\":\"⋳\",\"isinv\":\"∈\",\"it\":\"⁢\",\"Itilde\":\"Ĩ\",\"itilde\":\"ĩ\",\"Iukcy\":\"І\",\"iukcy\":\"і\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"Jcirc\":\"Ĵ\",\"jcirc\":\"ĵ\",\"Jcy\":\"Й\",\"jcy\":\"й\",\"Jfr\":\"𝔍\",\"jfr\":\"𝔧\",\"jmath\":\"ȷ\",\"Jopf\":\"𝕁\",\"jopf\":\"𝕛\",\"Jscr\":\"𝒥\",\"jscr\":\"𝒿\",\"Jsercy\":\"Ј\",\"jsercy\":\"ј\",\"Jukcy\":\"Є\",\"jukcy\":\"є\",\"Kappa\":\"Κ\",\"kappa\":\"κ\",\"kappav\":\"ϰ\",\"Kcedil\":\"Ķ\",\"kcedil\":\"ķ\",\"Kcy\":\"К\",\"kcy\":\"к\",\"Kfr\":\"𝔎\",\"kfr\":\"𝔨\",\"kgreen\":\"ĸ\",\"KHcy\":\"Х\",\"khcy\":\"х\",\"KJcy\":\"Ќ\",\"kjcy\":\"ќ\",\"Kopf\":\"𝕂\",\"kopf\":\"𝕜\",\"Kscr\":\"𝒦\",\"kscr\":\"𝓀\",\"lAarr\":\"⇚\",\"Lacute\":\"Ĺ\",\"lacute\":\"ĺ\",\"laemptyv\":\"⦴\",\"lagran\":\"ℒ\",\"Lambda\":\"Λ\",\"lambda\":\"λ\",\"lang\":\"⟨\",\"Lang\":\"⟪\",\"langd\":\"⦑\",\"langle\":\"⟨\",\"lap\":\"⪅\",\"Laplacetrf\":\"ℒ\",\"laquo\":\"«\",\"larrb\":\"⇤\",\"larrbfs\":\"⤟\",\"larr\":\"←\",\"Larr\":\"↞\",\"lArr\":\"⇐\",\"larrfs\":\"⤝\",\"larrhk\":\"↩\",\"larrlp\":\"↫\",\"larrpl\":\"⤹\",\"larrsim\":\"⥳\",\"larrtl\":\"↢\",\"latail\":\"⤙\",\"lAtail\":\"⤛\",\"lat\":\"⪫\",\"late\":\"⪭\",\"lates\":\"⪭︀\",\"lbarr\":\"⤌\",\"lBarr\":\"⤎\",\"lbbrk\":\"❲\",\"lbrace\":\"{\",\"lbrack\":\"[\",\"lbrke\":\"⦋\",\"lbrksld\":\"⦏\",\"lbrkslu\":\"⦍\",\"Lcaron\":\"Ľ\",\"lcaron\":\"ľ\",\"Lcedil\":\"Ļ\",\"lcedil\":\"ļ\",\"lceil\":\"⌈\",\"lcub\":\"{\",\"Lcy\":\"Л\",\"lcy\":\"л\",\"ldca\":\"⤶\",\"ldquo\":\"“\",\"ldquor\":\"„\",\"ldrdhar\":\"⥧\",\"ldrushar\":\"⥋\",\"ldsh\":\"↲\",\"le\":\"≤\",\"lE\":\"≦\",\"LeftAngleBracket\":\"⟨\",\"LeftArrowBar\":\"⇤\",\"leftarrow\":\"←\",\"LeftArrow\":\"←\",\"Leftarrow\":\"⇐\",\"LeftArrowRightArrow\":\"⇆\",\"leftarrowtail\":\"↢\",\"LeftCeiling\":\"⌈\",\"LeftDoubleBracket\":\"⟦\",\"LeftDownTeeVector\":\"⥡\",\"LeftDownVectorBar\":\"⥙\",\"LeftDownVector\":\"⇃\",\"LeftFloor\":\"⌊\",\"leftharpoondown\":\"↽\",\"leftharpoonup\":\"↼\",\"leftleftarrows\":\"⇇\",\"leftrightarrow\":\"↔\",\"LeftRightArrow\":\"↔\",\"Leftrightarrow\":\"⇔\",\"leftrightarrows\":\"⇆\",\"leftrightharpoons\":\"⇋\",\"leftrightsquigarrow\":\"↭\",\"LeftRightVector\":\"⥎\",\"LeftTeeArrow\":\"↤\",\"LeftTee\":\"⊣\",\"LeftTeeVector\":\"⥚\",\"leftthreetimes\":\"⋋\",\"LeftTriangleBar\":\"⧏\",\"LeftTriangle\":\"⊲\",\"LeftTriangleEqual\":\"⊴\",\"LeftUpDownVector\":\"⥑\",\"LeftUpTeeVector\":\"⥠\",\"LeftUpVectorBar\":\"⥘\",\"LeftUpVector\":\"↿\",\"LeftVectorBar\":\"⥒\",\"LeftVector\":\"↼\",\"lEg\":\"⪋\",\"leg\":\"⋚\",\"leq\":\"≤\",\"leqq\":\"≦\",\"leqslant\":\"⩽\",\"lescc\":\"⪨\",\"les\":\"⩽\",\"lesdot\":\"⩿\",\"lesdoto\":\"⪁\",\"lesdotor\":\"⪃\",\"lesg\":\"⋚︀\",\"lesges\":\"⪓\",\"lessapprox\":\"⪅\",\"lessdot\":\"⋖\",\"lesseqgtr\":\"⋚\",\"lesseqqgtr\":\"⪋\",\"LessEqualGreater\":\"⋚\",\"LessFullEqual\":\"≦\",\"LessGreater\":\"≶\",\"lessgtr\":\"≶\",\"LessLess\":\"⪡\",\"lesssim\":\"≲\",\"LessSlantEqual\":\"⩽\",\"LessTilde\":\"≲\",\"lfisht\":\"⥼\",\"lfloor\":\"⌊\",\"Lfr\":\"𝔏\",\"lfr\":\"𝔩\",\"lg\":\"≶\",\"lgE\":\"⪑\",\"lHar\":\"⥢\",\"lhard\":\"↽\",\"lharu\":\"↼\",\"lharul\":\"⥪\",\"lhblk\":\"▄\",\"LJcy\":\"Љ\",\"ljcy\":\"љ\",\"llarr\":\"⇇\",\"ll\":\"≪\",\"Ll\":\"⋘\",\"llcorner\":\"⌞\",\"Lleftarrow\":\"⇚\",\"llhard\":\"⥫\",\"lltri\":\"◺\",\"Lmidot\":\"Ŀ\",\"lmidot\":\"ŀ\",\"lmoustache\":\"⎰\",\"lmoust\":\"⎰\",\"lnap\":\"⪉\",\"lnapprox\":\"⪉\",\"lne\":\"⪇\",\"lnE\":\"≨\",\"lneq\":\"⪇\",\"lneqq\":\"≨\",\"lnsim\":\"⋦\",\"loang\":\"⟬\",\"loarr\":\"⇽\",\"lobrk\":\"⟦\",\"longleftarrow\":\"⟵\",\"LongLeftArrow\":\"⟵\",\"Longleftarrow\":\"⟸\",\"longleftrightarrow\":\"⟷\",\"LongLeftRightArrow\":\"⟷\",\"Longleftrightarrow\":\"⟺\",\"longmapsto\":\"⟼\",\"longrightarrow\":\"⟶\",\"LongRightArrow\":\"⟶\",\"Longrightarrow\":\"⟹\",\"looparrowleft\":\"↫\",\"looparrowright\":\"↬\",\"lopar\":\"⦅\",\"Lopf\":\"𝕃\",\"lopf\":\"𝕝\",\"loplus\":\"⨭\",\"lotimes\":\"⨴\",\"lowast\":\"∗\",\"lowbar\":\"_\",\"LowerLeftArrow\":\"↙\",\"LowerRightArrow\":\"↘\",\"loz\":\"◊\",\"lozenge\":\"◊\",\"lozf\":\"⧫\",\"lpar\":\"(\",\"lparlt\":\"⦓\",\"lrarr\":\"⇆\",\"lrcorner\":\"⌟\",\"lrhar\":\"⇋\",\"lrhard\":\"⥭\",\"lrm\":\"‎\",\"lrtri\":\"⊿\",\"lsaquo\":\"‹\",\"lscr\":\"𝓁\",\"Lscr\":\"ℒ\",\"lsh\":\"↰\",\"Lsh\":\"↰\",\"lsim\":\"≲\",\"lsime\":\"⪍\",\"lsimg\":\"⪏\",\"lsqb\":\"[\",\"lsquo\":\"‘\",\"lsquor\":\"‚\",\"Lstrok\":\"Ł\",\"lstrok\":\"ł\",\"ltcc\":\"⪦\",\"ltcir\":\"⩹\",\"lt\":\"<\",\"LT\":\"<\",\"Lt\":\"≪\",\"ltdot\":\"⋖\",\"lthree\":\"⋋\",\"ltimes\":\"⋉\",\"ltlarr\":\"⥶\",\"ltquest\":\"⩻\",\"ltri\":\"◃\",\"ltrie\":\"⊴\",\"ltrif\":\"◂\",\"ltrPar\":\"⦖\",\"lurdshar\":\"⥊\",\"luruhar\":\"⥦\",\"lvertneqq\":\"≨︀\",\"lvnE\":\"≨︀\",\"macr\":\"¯\",\"male\":\"♂\",\"malt\":\"✠\",\"maltese\":\"✠\",\"Map\":\"⤅\",\"map\":\"↦\",\"mapsto\":\"↦\",\"mapstodown\":\"↧\",\"mapstoleft\":\"↤\",\"mapstoup\":\"↥\",\"marker\":\"▮\",\"mcomma\":\"⨩\",\"Mcy\":\"М\",\"mcy\":\"м\",\"mdash\":\"—\",\"mDDot\":\"∺\",\"measuredangle\":\"∡\",\"MediumSpace\":\" \",\"Mellintrf\":\"ℳ\",\"Mfr\":\"𝔐\",\"mfr\":\"𝔪\",\"mho\":\"℧\",\"micro\":\"µ\",\"midast\":\"*\",\"midcir\":\"⫰\",\"mid\":\"∣\",\"middot\":\"·\",\"minusb\":\"⊟\",\"minus\":\"−\",\"minusd\":\"∸\",\"minusdu\":\"⨪\",\"MinusPlus\":\"∓\",\"mlcp\":\"⫛\",\"mldr\":\"…\",\"mnplus\":\"∓\",\"models\":\"⊧\",\"Mopf\":\"𝕄\",\"mopf\":\"𝕞\",\"mp\":\"∓\",\"mscr\":\"𝓂\",\"Mscr\":\"ℳ\",\"mstpos\":\"∾\",\"Mu\":\"Μ\",\"mu\":\"μ\",\"multimap\":\"⊸\",\"mumap\":\"⊸\",\"nabla\":\"∇\",\"Nacute\":\"Ń\",\"nacute\":\"ń\",\"nang\":\"∠⃒\",\"nap\":\"≉\",\"napE\":\"⩰̸\",\"napid\":\"≋̸\",\"napos\":\"ŉ\",\"napprox\":\"≉\",\"natural\":\"♮\",\"naturals\":\"ℕ\",\"natur\":\"♮\",\"nbsp\":\" \",\"nbump\":\"≎̸\",\"nbumpe\":\"≏̸\",\"ncap\":\"⩃\",\"Ncaron\":\"Ň\",\"ncaron\":\"ň\",\"Ncedil\":\"Ņ\",\"ncedil\":\"ņ\",\"ncong\":\"≇\",\"ncongdot\":\"⩭̸\",\"ncup\":\"⩂\",\"Ncy\":\"Н\",\"ncy\":\"н\",\"ndash\":\"–\",\"nearhk\":\"⤤\",\"nearr\":\"↗\",\"neArr\":\"⇗\",\"nearrow\":\"↗\",\"ne\":\"≠\",\"nedot\":\"≐̸\",\"NegativeMediumSpace\":\"​\",\"NegativeThickSpace\":\"​\",\"NegativeThinSpace\":\"​\",\"NegativeVeryThinSpace\":\"​\",\"nequiv\":\"≢\",\"nesear\":\"⤨\",\"nesim\":\"≂̸\",\"NestedGreaterGreater\":\"≫\",\"NestedLessLess\":\"≪\",\"NewLine\":\"\\n\",\"nexist\":\"∄\",\"nexists\":\"∄\",\"Nfr\":\"𝔑\",\"nfr\":\"𝔫\",\"ngE\":\"≧̸\",\"nge\":\"≱\",\"ngeq\":\"≱\",\"ngeqq\":\"≧̸\",\"ngeqslant\":\"⩾̸\",\"nges\":\"⩾̸\",\"nGg\":\"⋙̸\",\"ngsim\":\"≵\",\"nGt\":\"≫⃒\",\"ngt\":\"≯\",\"ngtr\":\"≯\",\"nGtv\":\"≫̸\",\"nharr\":\"↮\",\"nhArr\":\"⇎\",\"nhpar\":\"⫲\",\"ni\":\"∋\",\"nis\":\"⋼\",\"nisd\":\"⋺\",\"niv\":\"∋\",\"NJcy\":\"Њ\",\"njcy\":\"њ\",\"nlarr\":\"↚\",\"nlArr\":\"⇍\",\"nldr\":\"‥\",\"nlE\":\"≦̸\",\"nle\":\"≰\",\"nleftarrow\":\"↚\",\"nLeftarrow\":\"⇍\",\"nleftrightarrow\":\"↮\",\"nLeftrightarrow\":\"⇎\",\"nleq\":\"≰\",\"nleqq\":\"≦̸\",\"nleqslant\":\"⩽̸\",\"nles\":\"⩽̸\",\"nless\":\"≮\",\"nLl\":\"⋘̸\",\"nlsim\":\"≴\",\"nLt\":\"≪⃒\",\"nlt\":\"≮\",\"nltri\":\"⋪\",\"nltrie\":\"⋬\",\"nLtv\":\"≪̸\",\"nmid\":\"∤\",\"NoBreak\":\"⁠\",\"NonBreakingSpace\":\" \",\"nopf\":\"𝕟\",\"Nopf\":\"ℕ\",\"Not\":\"⫬\",\"not\":\"¬\",\"NotCongruent\":\"≢\",\"NotCupCap\":\"≭\",\"NotDoubleVerticalBar\":\"∦\",\"NotElement\":\"∉\",\"NotEqual\":\"≠\",\"NotEqualTilde\":\"≂̸\",\"NotExists\":\"∄\",\"NotGreater\":\"≯\",\"NotGreaterEqual\":\"≱\",\"NotGreaterFullEqual\":\"≧̸\",\"NotGreaterGreater\":\"≫̸\",\"NotGreaterLess\":\"≹\",\"NotGreaterSlantEqual\":\"⩾̸\",\"NotGreaterTilde\":\"≵\",\"NotHumpDownHump\":\"≎̸\",\"NotHumpEqual\":\"≏̸\",\"notin\":\"∉\",\"notindot\":\"⋵̸\",\"notinE\":\"⋹̸\",\"notinva\":\"∉\",\"notinvb\":\"⋷\",\"notinvc\":\"⋶\",\"NotLeftTriangleBar\":\"⧏̸\",\"NotLeftTriangle\":\"⋪\",\"NotLeftTriangleEqual\":\"⋬\",\"NotLess\":\"≮\",\"NotLessEqual\":\"≰\",\"NotLessGreater\":\"≸\",\"NotLessLess\":\"≪̸\",\"NotLessSlantEqual\":\"⩽̸\",\"NotLessTilde\":\"≴\",\"NotNestedGreaterGreater\":\"⪢̸\",\"NotNestedLessLess\":\"⪡̸\",\"notni\":\"∌\",\"notniva\":\"∌\",\"notnivb\":\"⋾\",\"notnivc\":\"⋽\",\"NotPrecedes\":\"⊀\",\"NotPrecedesEqual\":\"⪯̸\",\"NotPrecedesSlantEqual\":\"⋠\",\"NotReverseElement\":\"∌\",\"NotRightTriangleBar\":\"⧐̸\",\"NotRightTriangle\":\"⋫\",\"NotRightTriangleEqual\":\"⋭\",\"NotSquareSubset\":\"⊏̸\",\"NotSquareSubsetEqual\":\"⋢\",\"NotSquareSuperset\":\"⊐̸\",\"NotSquareSupersetEqual\":\"⋣\",\"NotSubset\":\"⊂⃒\",\"NotSubsetEqual\":\"⊈\",\"NotSucceeds\":\"⊁\",\"NotSucceedsEqual\":\"⪰̸\",\"NotSucceedsSlantEqual\":\"⋡\",\"NotSucceedsTilde\":\"≿̸\",\"NotSuperset\":\"⊃⃒\",\"NotSupersetEqual\":\"⊉\",\"NotTilde\":\"≁\",\"NotTildeEqual\":\"≄\",\"NotTildeFullEqual\":\"≇\",\"NotTildeTilde\":\"≉\",\"NotVerticalBar\":\"∤\",\"nparallel\":\"∦\",\"npar\":\"∦\",\"nparsl\":\"⫽⃥\",\"npart\":\"∂̸\",\"npolint\":\"⨔\",\"npr\":\"⊀\",\"nprcue\":\"⋠\",\"nprec\":\"⊀\",\"npreceq\":\"⪯̸\",\"npre\":\"⪯̸\",\"nrarrc\":\"⤳̸\",\"nrarr\":\"↛\",\"nrArr\":\"⇏\",\"nrarrw\":\"↝̸\",\"nrightarrow\":\"↛\",\"nRightarrow\":\"⇏\",\"nrtri\":\"⋫\",\"nrtrie\":\"⋭\",\"nsc\":\"⊁\",\"nsccue\":\"⋡\",\"nsce\":\"⪰̸\",\"Nscr\":\"𝒩\",\"nscr\":\"𝓃\",\"nshortmid\":\"∤\",\"nshortparallel\":\"∦\",\"nsim\":\"≁\",\"nsime\":\"≄\",\"nsimeq\":\"≄\",\"nsmid\":\"∤\",\"nspar\":\"∦\",\"nsqsube\":\"⋢\",\"nsqsupe\":\"⋣\",\"nsub\":\"⊄\",\"nsubE\":\"⫅̸\",\"nsube\":\"⊈\",\"nsubset\":\"⊂⃒\",\"nsubseteq\":\"⊈\",\"nsubseteqq\":\"⫅̸\",\"nsucc\":\"⊁\",\"nsucceq\":\"⪰̸\",\"nsup\":\"⊅\",\"nsupE\":\"⫆̸\",\"nsupe\":\"⊉\",\"nsupset\":\"⊃⃒\",\"nsupseteq\":\"⊉\",\"nsupseteqq\":\"⫆̸\",\"ntgl\":\"≹\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"ntlg\":\"≸\",\"ntriangleleft\":\"⋪\",\"ntrianglelefteq\":\"⋬\",\"ntriangleright\":\"⋫\",\"ntrianglerighteq\":\"⋭\",\"Nu\":\"Ν\",\"nu\":\"ν\",\"num\":\"#\",\"numero\":\"№\",\"numsp\":\" \",\"nvap\":\"≍⃒\",\"nvdash\":\"⊬\",\"nvDash\":\"⊭\",\"nVdash\":\"⊮\",\"nVDash\":\"⊯\",\"nvge\":\"≥⃒\",\"nvgt\":\">⃒\",\"nvHarr\":\"⤄\",\"nvinfin\":\"⧞\",\"nvlArr\":\"⤂\",\"nvle\":\"≤⃒\",\"nvlt\":\"<⃒\",\"nvltrie\":\"⊴⃒\",\"nvrArr\":\"⤃\",\"nvrtrie\":\"⊵⃒\",\"nvsim\":\"∼⃒\",\"nwarhk\":\"⤣\",\"nwarr\":\"↖\",\"nwArr\":\"⇖\",\"nwarrow\":\"↖\",\"nwnear\":\"⤧\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"oast\":\"⊛\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"ocir\":\"⊚\",\"Ocy\":\"О\",\"ocy\":\"о\",\"odash\":\"⊝\",\"Odblac\":\"Ő\",\"odblac\":\"ő\",\"odiv\":\"⨸\",\"odot\":\"⊙\",\"odsold\":\"⦼\",\"OElig\":\"Œ\",\"oelig\":\"œ\",\"ofcir\":\"⦿\",\"Ofr\":\"𝔒\",\"ofr\":\"𝔬\",\"ogon\":\"˛\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ogt\":\"⧁\",\"ohbar\":\"⦵\",\"ohm\":\"Ω\",\"oint\":\"∮\",\"olarr\":\"↺\",\"olcir\":\"⦾\",\"olcross\":\"⦻\",\"oline\":\"‾\",\"olt\":\"⧀\",\"Omacr\":\"Ō\",\"omacr\":\"ō\",\"Omega\":\"Ω\",\"omega\":\"ω\",\"Omicron\":\"Ο\",\"omicron\":\"ο\",\"omid\":\"⦶\",\"ominus\":\"⊖\",\"Oopf\":\"𝕆\",\"oopf\":\"𝕠\",\"opar\":\"⦷\",\"OpenCurlyDoubleQuote\":\"“\",\"OpenCurlyQuote\":\"‘\",\"operp\":\"⦹\",\"oplus\":\"⊕\",\"orarr\":\"↻\",\"Or\":\"⩔\",\"or\":\"∨\",\"ord\":\"⩝\",\"order\":\"ℴ\",\"orderof\":\"ℴ\",\"ordf\":\"ª\",\"ordm\":\"º\",\"origof\":\"⊶\",\"oror\":\"⩖\",\"orslope\":\"⩗\",\"orv\":\"⩛\",\"oS\":\"Ⓢ\",\"Oscr\":\"𝒪\",\"oscr\":\"ℴ\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"osol\":\"⊘\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"otimesas\":\"⨶\",\"Otimes\":\"⨷\",\"otimes\":\"⊗\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"ovbar\":\"⌽\",\"OverBar\":\"‾\",\"OverBrace\":\"⏞\",\"OverBracket\":\"⎴\",\"OverParenthesis\":\"⏜\",\"para\":\"¶\",\"parallel\":\"∥\",\"par\":\"∥\",\"parsim\":\"⫳\",\"parsl\":\"⫽\",\"part\":\"∂\",\"PartialD\":\"∂\",\"Pcy\":\"П\",\"pcy\":\"п\",\"percnt\":\"%\",\"period\":\".\",\"permil\":\"‰\",\"perp\":\"⊥\",\"pertenk\":\"‱\",\"Pfr\":\"𝔓\",\"pfr\":\"𝔭\",\"Phi\":\"Φ\",\"phi\":\"φ\",\"phiv\":\"ϕ\",\"phmmat\":\"ℳ\",\"phone\":\"☎\",\"Pi\":\"Π\",\"pi\":\"π\",\"pitchfork\":\"⋔\",\"piv\":\"ϖ\",\"planck\":\"ℏ\",\"planckh\":\"ℎ\",\"plankv\":\"ℏ\",\"plusacir\":\"⨣\",\"plusb\":\"⊞\",\"pluscir\":\"⨢\",\"plus\":\"+\",\"plusdo\":\"∔\",\"plusdu\":\"⨥\",\"pluse\":\"⩲\",\"PlusMinus\":\"±\",\"plusmn\":\"±\",\"plussim\":\"⨦\",\"plustwo\":\"⨧\",\"pm\":\"±\",\"Poincareplane\":\"ℌ\",\"pointint\":\"⨕\",\"popf\":\"𝕡\",\"Popf\":\"ℙ\",\"pound\":\"£\",\"prap\":\"⪷\",\"Pr\":\"⪻\",\"pr\":\"≺\",\"prcue\":\"≼\",\"precapprox\":\"⪷\",\"prec\":\"≺\",\"preccurlyeq\":\"≼\",\"Precedes\":\"≺\",\"PrecedesEqual\":\"⪯\",\"PrecedesSlantEqual\":\"≼\",\"PrecedesTilde\":\"≾\",\"preceq\":\"⪯\",\"precnapprox\":\"⪹\",\"precneqq\":\"⪵\",\"precnsim\":\"⋨\",\"pre\":\"⪯\",\"prE\":\"⪳\",\"precsim\":\"≾\",\"prime\":\"′\",\"Prime\":\"″\",\"primes\":\"ℙ\",\"prnap\":\"⪹\",\"prnE\":\"⪵\",\"prnsim\":\"⋨\",\"prod\":\"∏\",\"Product\":\"∏\",\"profalar\":\"⌮\",\"profline\":\"⌒\",\"profsurf\":\"⌓\",\"prop\":\"∝\",\"Proportional\":\"∝\",\"Proportion\":\"∷\",\"propto\":\"∝\",\"prsim\":\"≾\",\"prurel\":\"⊰\",\"Pscr\":\"𝒫\",\"pscr\":\"𝓅\",\"Psi\":\"Ψ\",\"psi\":\"ψ\",\"puncsp\":\" \",\"Qfr\":\"𝔔\",\"qfr\":\"𝔮\",\"qint\":\"⨌\",\"qopf\":\"𝕢\",\"Qopf\":\"ℚ\",\"qprime\":\"⁗\",\"Qscr\":\"𝒬\",\"qscr\":\"𝓆\",\"quaternions\":\"ℍ\",\"quatint\":\"⨖\",\"quest\":\"?\",\"questeq\":\"≟\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"rAarr\":\"⇛\",\"race\":\"∽̱\",\"Racute\":\"Ŕ\",\"racute\":\"ŕ\",\"radic\":\"√\",\"raemptyv\":\"⦳\",\"rang\":\"⟩\",\"Rang\":\"⟫\",\"rangd\":\"⦒\",\"range\":\"⦥\",\"rangle\":\"⟩\",\"raquo\":\"»\",\"rarrap\":\"⥵\",\"rarrb\":\"⇥\",\"rarrbfs\":\"⤠\",\"rarrc\":\"⤳\",\"rarr\":\"→\",\"Rarr\":\"↠\",\"rArr\":\"⇒\",\"rarrfs\":\"⤞\",\"rarrhk\":\"↪\",\"rarrlp\":\"↬\",\"rarrpl\":\"⥅\",\"rarrsim\":\"⥴\",\"Rarrtl\":\"⤖\",\"rarrtl\":\"↣\",\"rarrw\":\"↝\",\"ratail\":\"⤚\",\"rAtail\":\"⤜\",\"ratio\":\"∶\",\"rationals\":\"ℚ\",\"rbarr\":\"⤍\",\"rBarr\":\"⤏\",\"RBarr\":\"⤐\",\"rbbrk\":\"❳\",\"rbrace\":\"}\",\"rbrack\":\"]\",\"rbrke\":\"⦌\",\"rbrksld\":\"⦎\",\"rbrkslu\":\"⦐\",\"Rcaron\":\"Ř\",\"rcaron\":\"ř\",\"Rcedil\":\"Ŗ\",\"rcedil\":\"ŗ\",\"rceil\":\"⌉\",\"rcub\":\"}\",\"Rcy\":\"Р\",\"rcy\":\"р\",\"rdca\":\"⤷\",\"rdldhar\":\"⥩\",\"rdquo\":\"”\",\"rdquor\":\"”\",\"rdsh\":\"↳\",\"real\":\"ℜ\",\"realine\":\"ℛ\",\"realpart\":\"ℜ\",\"reals\":\"ℝ\",\"Re\":\"ℜ\",\"rect\":\"▭\",\"reg\":\"®\",\"REG\":\"®\",\"ReverseElement\":\"∋\",\"ReverseEquilibrium\":\"⇋\",\"ReverseUpEquilibrium\":\"⥯\",\"rfisht\":\"⥽\",\"rfloor\":\"⌋\",\"rfr\":\"𝔯\",\"Rfr\":\"ℜ\",\"rHar\":\"⥤\",\"rhard\":\"⇁\",\"rharu\":\"⇀\",\"rharul\":\"⥬\",\"Rho\":\"Ρ\",\"rho\":\"ρ\",\"rhov\":\"ϱ\",\"RightAngleBracket\":\"⟩\",\"RightArrowBar\":\"⇥\",\"rightarrow\":\"→\",\"RightArrow\":\"→\",\"Rightarrow\":\"⇒\",\"RightArrowLeftArrow\":\"⇄\",\"rightarrowtail\":\"↣\",\"RightCeiling\":\"⌉\",\"RightDoubleBracket\":\"⟧\",\"RightDownTeeVector\":\"⥝\",\"RightDownVectorBar\":\"⥕\",\"RightDownVector\":\"⇂\",\"RightFloor\":\"⌋\",\"rightharpoondown\":\"⇁\",\"rightharpoonup\":\"⇀\",\"rightleftarrows\":\"⇄\",\"rightleftharpoons\":\"⇌\",\"rightrightarrows\":\"⇉\",\"rightsquigarrow\":\"↝\",\"RightTeeArrow\":\"↦\",\"RightTee\":\"⊢\",\"RightTeeVector\":\"⥛\",\"rightthreetimes\":\"⋌\",\"RightTriangleBar\":\"⧐\",\"RightTriangle\":\"⊳\",\"RightTriangleEqual\":\"⊵\",\"RightUpDownVector\":\"⥏\",\"RightUpTeeVector\":\"⥜\",\"RightUpVectorBar\":\"⥔\",\"RightUpVector\":\"↾\",\"RightVectorBar\":\"⥓\",\"RightVector\":\"⇀\",\"ring\":\"˚\",\"risingdotseq\":\"≓\",\"rlarr\":\"⇄\",\"rlhar\":\"⇌\",\"rlm\":\"‏\",\"rmoustache\":\"⎱\",\"rmoust\":\"⎱\",\"rnmid\":\"⫮\",\"roang\":\"⟭\",\"roarr\":\"⇾\",\"robrk\":\"⟧\",\"ropar\":\"⦆\",\"ropf\":\"𝕣\",\"Ropf\":\"ℝ\",\"roplus\":\"⨮\",\"rotimes\":\"⨵\",\"RoundImplies\":\"⥰\",\"rpar\":\")\",\"rpargt\":\"⦔\",\"rppolint\":\"⨒\",\"rrarr\":\"⇉\",\"Rrightarrow\":\"⇛\",\"rsaquo\":\"›\",\"rscr\":\"𝓇\",\"Rscr\":\"ℛ\",\"rsh\":\"↱\",\"Rsh\":\"↱\",\"rsqb\":\"]\",\"rsquo\":\"’\",\"rsquor\":\"’\",\"rthree\":\"⋌\",\"rtimes\":\"⋊\",\"rtri\":\"▹\",\"rtrie\":\"⊵\",\"rtrif\":\"▸\",\"rtriltri\":\"⧎\",\"RuleDelayed\":\"⧴\",\"ruluhar\":\"⥨\",\"rx\":\"℞\",\"Sacute\":\"Ś\",\"sacute\":\"ś\",\"sbquo\":\"‚\",\"scap\":\"⪸\",\"Scaron\":\"Š\",\"scaron\":\"š\",\"Sc\":\"⪼\",\"sc\":\"≻\",\"sccue\":\"≽\",\"sce\":\"⪰\",\"scE\":\"⪴\",\"Scedil\":\"Ş\",\"scedil\":\"ş\",\"Scirc\":\"Ŝ\",\"scirc\":\"ŝ\",\"scnap\":\"⪺\",\"scnE\":\"⪶\",\"scnsim\":\"⋩\",\"scpolint\":\"⨓\",\"scsim\":\"≿\",\"Scy\":\"С\",\"scy\":\"с\",\"sdotb\":\"⊡\",\"sdot\":\"⋅\",\"sdote\":\"⩦\",\"searhk\":\"⤥\",\"searr\":\"↘\",\"seArr\":\"⇘\",\"searrow\":\"↘\",\"sect\":\"§\",\"semi\":\";\",\"seswar\":\"⤩\",\"setminus\":\"∖\",\"setmn\":\"∖\",\"sext\":\"✶\",\"Sfr\":\"𝔖\",\"sfr\":\"𝔰\",\"sfrown\":\"⌢\",\"sharp\":\"♯\",\"SHCHcy\":\"Щ\",\"shchcy\":\"щ\",\"SHcy\":\"Ш\",\"shcy\":\"ш\",\"ShortDownArrow\":\"↓\",\"ShortLeftArrow\":\"←\",\"shortmid\":\"∣\",\"shortparallel\":\"∥\",\"ShortRightArrow\":\"→\",\"ShortUpArrow\":\"↑\",\"shy\":\"­\",\"Sigma\":\"Σ\",\"sigma\":\"σ\",\"sigmaf\":\"ς\",\"sigmav\":\"ς\",\"sim\":\"∼\",\"simdot\":\"⩪\",\"sime\":\"≃\",\"simeq\":\"≃\",\"simg\":\"⪞\",\"simgE\":\"⪠\",\"siml\":\"⪝\",\"simlE\":\"⪟\",\"simne\":\"≆\",\"simplus\":\"⨤\",\"simrarr\":\"⥲\",\"slarr\":\"←\",\"SmallCircle\":\"∘\",\"smallsetminus\":\"∖\",\"smashp\":\"⨳\",\"smeparsl\":\"⧤\",\"smid\":\"∣\",\"smile\":\"⌣\",\"smt\":\"⪪\",\"smte\":\"⪬\",\"smtes\":\"⪬︀\",\"SOFTcy\":\"Ь\",\"softcy\":\"ь\",\"solbar\":\"⌿\",\"solb\":\"⧄\",\"sol\":\"/\",\"Sopf\":\"𝕊\",\"sopf\":\"𝕤\",\"spades\":\"♠\",\"spadesuit\":\"♠\",\"spar\":\"∥\",\"sqcap\":\"⊓\",\"sqcaps\":\"⊓︀\",\"sqcup\":\"⊔\",\"sqcups\":\"⊔︀\",\"Sqrt\":\"√\",\"sqsub\":\"⊏\",\"sqsube\":\"⊑\",\"sqsubset\":\"⊏\",\"sqsubseteq\":\"⊑\",\"sqsup\":\"⊐\",\"sqsupe\":\"⊒\",\"sqsupset\":\"⊐\",\"sqsupseteq\":\"⊒\",\"square\":\"□\",\"Square\":\"□\",\"SquareIntersection\":\"⊓\",\"SquareSubset\":\"⊏\",\"SquareSubsetEqual\":\"⊑\",\"SquareSuperset\":\"⊐\",\"SquareSupersetEqual\":\"⊒\",\"SquareUnion\":\"⊔\",\"squarf\":\"▪\",\"squ\":\"□\",\"squf\":\"▪\",\"srarr\":\"→\",\"Sscr\":\"𝒮\",\"sscr\":\"𝓈\",\"ssetmn\":\"∖\",\"ssmile\":\"⌣\",\"sstarf\":\"⋆\",\"Star\":\"⋆\",\"star\":\"☆\",\"starf\":\"★\",\"straightepsilon\":\"ϵ\",\"straightphi\":\"ϕ\",\"strns\":\"¯\",\"sub\":\"⊂\",\"Sub\":\"⋐\",\"subdot\":\"⪽\",\"subE\":\"⫅\",\"sube\":\"⊆\",\"subedot\":\"⫃\",\"submult\":\"⫁\",\"subnE\":\"⫋\",\"subne\":\"⊊\",\"subplus\":\"⪿\",\"subrarr\":\"⥹\",\"subset\":\"⊂\",\"Subset\":\"⋐\",\"subseteq\":\"⊆\",\"subseteqq\":\"⫅\",\"SubsetEqual\":\"⊆\",\"subsetneq\":\"⊊\",\"subsetneqq\":\"⫋\",\"subsim\":\"⫇\",\"subsub\":\"⫕\",\"subsup\":\"⫓\",\"succapprox\":\"⪸\",\"succ\":\"≻\",\"succcurlyeq\":\"≽\",\"Succeeds\":\"≻\",\"SucceedsEqual\":\"⪰\",\"SucceedsSlantEqual\":\"≽\",\"SucceedsTilde\":\"≿\",\"succeq\":\"⪰\",\"succnapprox\":\"⪺\",\"succneqq\":\"⪶\",\"succnsim\":\"⋩\",\"succsim\":\"≿\",\"SuchThat\":\"∋\",\"sum\":\"∑\",\"Sum\":\"∑\",\"sung\":\"♪\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"sup\":\"⊃\",\"Sup\":\"⋑\",\"supdot\":\"⪾\",\"supdsub\":\"⫘\",\"supE\":\"⫆\",\"supe\":\"⊇\",\"supedot\":\"⫄\",\"Superset\":\"⊃\",\"SupersetEqual\":\"⊇\",\"suphsol\":\"⟉\",\"suphsub\":\"⫗\",\"suplarr\":\"⥻\",\"supmult\":\"⫂\",\"supnE\":\"⫌\",\"supne\":\"⊋\",\"supplus\":\"⫀\",\"supset\":\"⊃\",\"Supset\":\"⋑\",\"supseteq\":\"⊇\",\"supseteqq\":\"⫆\",\"supsetneq\":\"⊋\",\"supsetneqq\":\"⫌\",\"supsim\":\"⫈\",\"supsub\":\"⫔\",\"supsup\":\"⫖\",\"swarhk\":\"⤦\",\"swarr\":\"↙\",\"swArr\":\"⇙\",\"swarrow\":\"↙\",\"swnwar\":\"⤪\",\"szlig\":\"ß\",\"Tab\":\"\\t\",\"target\":\"⌖\",\"Tau\":\"Τ\",\"tau\":\"τ\",\"tbrk\":\"⎴\",\"Tcaron\":\"Ť\",\"tcaron\":\"ť\",\"Tcedil\":\"Ţ\",\"tcedil\":\"ţ\",\"Tcy\":\"Т\",\"tcy\":\"т\",\"tdot\":\"⃛\",\"telrec\":\"⌕\",\"Tfr\":\"𝔗\",\"tfr\":\"𝔱\",\"there4\":\"∴\",\"therefore\":\"∴\",\"Therefore\":\"∴\",\"Theta\":\"Θ\",\"theta\":\"θ\",\"thetasym\":\"ϑ\",\"thetav\":\"ϑ\",\"thickapprox\":\"≈\",\"thicksim\":\"∼\",\"ThickSpace\":\"  \",\"ThinSpace\":\" \",\"thinsp\":\" \",\"thkap\":\"≈\",\"thksim\":\"∼\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"tilde\":\"˜\",\"Tilde\":\"∼\",\"TildeEqual\":\"≃\",\"TildeFullEqual\":\"≅\",\"TildeTilde\":\"≈\",\"timesbar\":\"⨱\",\"timesb\":\"⊠\",\"times\":\"×\",\"timesd\":\"⨰\",\"tint\":\"∭\",\"toea\":\"⤨\",\"topbot\":\"⌶\",\"topcir\":\"⫱\",\"top\":\"⊤\",\"Topf\":\"𝕋\",\"topf\":\"𝕥\",\"topfork\":\"⫚\",\"tosa\":\"⤩\",\"tprime\":\"‴\",\"trade\":\"™\",\"TRADE\":\"™\",\"triangle\":\"▵\",\"triangledown\":\"▿\",\"triangleleft\":\"◃\",\"trianglelefteq\":\"⊴\",\"triangleq\":\"≜\",\"triangleright\":\"▹\",\"trianglerighteq\":\"⊵\",\"tridot\":\"◬\",\"trie\":\"≜\",\"triminus\":\"⨺\",\"TripleDot\":\"⃛\",\"triplus\":\"⨹\",\"trisb\":\"⧍\",\"tritime\":\"⨻\",\"trpezium\":\"⏢\",\"Tscr\":\"𝒯\",\"tscr\":\"𝓉\",\"TScy\":\"Ц\",\"tscy\":\"ц\",\"TSHcy\":\"Ћ\",\"tshcy\":\"ћ\",\"Tstrok\":\"Ŧ\",\"tstrok\":\"ŧ\",\"twixt\":\"≬\",\"twoheadleftarrow\":\"↞\",\"twoheadrightarrow\":\"↠\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"uarr\":\"↑\",\"Uarr\":\"↟\",\"uArr\":\"⇑\",\"Uarrocir\":\"⥉\",\"Ubrcy\":\"Ў\",\"ubrcy\":\"ў\",\"Ubreve\":\"Ŭ\",\"ubreve\":\"ŭ\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ucy\":\"У\",\"ucy\":\"у\",\"udarr\":\"⇅\",\"Udblac\":\"Ű\",\"udblac\":\"ű\",\"udhar\":\"⥮\",\"ufisht\":\"⥾\",\"Ufr\":\"𝔘\",\"ufr\":\"𝔲\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uHar\":\"⥣\",\"uharl\":\"↿\",\"uharr\":\"↾\",\"uhblk\":\"▀\",\"ulcorn\":\"⌜\",\"ulcorner\":\"⌜\",\"ulcrop\":\"⌏\",\"ultri\":\"◸\",\"Umacr\":\"Ū\",\"umacr\":\"ū\",\"uml\":\"¨\",\"UnderBar\":\"_\",\"UnderBrace\":\"⏟\",\"UnderBracket\":\"⎵\",\"UnderParenthesis\":\"⏝\",\"Union\":\"⋃\",\"UnionPlus\":\"⊎\",\"Uogon\":\"Ų\",\"uogon\":\"ų\",\"Uopf\":\"𝕌\",\"uopf\":\"𝕦\",\"UpArrowBar\":\"⤒\",\"uparrow\":\"↑\",\"UpArrow\":\"↑\",\"Uparrow\":\"⇑\",\"UpArrowDownArrow\":\"⇅\",\"updownarrow\":\"↕\",\"UpDownArrow\":\"↕\",\"Updownarrow\":\"⇕\",\"UpEquilibrium\":\"⥮\",\"upharpoonleft\":\"↿\",\"upharpoonright\":\"↾\",\"uplus\":\"⊎\",\"UpperLeftArrow\":\"↖\",\"UpperRightArrow\":\"↗\",\"upsi\":\"υ\",\"Upsi\":\"ϒ\",\"upsih\":\"ϒ\",\"Upsilon\":\"Υ\",\"upsilon\":\"υ\",\"UpTeeArrow\":\"↥\",\"UpTee\":\"⊥\",\"upuparrows\":\"⇈\",\"urcorn\":\"⌝\",\"urcorner\":\"⌝\",\"urcrop\":\"⌎\",\"Uring\":\"Ů\",\"uring\":\"ů\",\"urtri\":\"◹\",\"Uscr\":\"𝒰\",\"uscr\":\"𝓊\",\"utdot\":\"⋰\",\"Utilde\":\"Ũ\",\"utilde\":\"ũ\",\"utri\":\"▵\",\"utrif\":\"▴\",\"uuarr\":\"⇈\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"uwangle\":\"⦧\",\"vangrt\":\"⦜\",\"varepsilon\":\"ϵ\",\"varkappa\":\"ϰ\",\"varnothing\":\"∅\",\"varphi\":\"ϕ\",\"varpi\":\"ϖ\",\"varpropto\":\"∝\",\"varr\":\"↕\",\"vArr\":\"⇕\",\"varrho\":\"ϱ\",\"varsigma\":\"ς\",\"varsubsetneq\":\"⊊︀\",\"varsubsetneqq\":\"⫋︀\",\"varsupsetneq\":\"⊋︀\",\"varsupsetneqq\":\"⫌︀\",\"vartheta\":\"ϑ\",\"vartriangleleft\":\"⊲\",\"vartriangleright\":\"⊳\",\"vBar\":\"⫨\",\"Vbar\":\"⫫\",\"vBarv\":\"⫩\",\"Vcy\":\"В\",\"vcy\":\"в\",\"vdash\":\"⊢\",\"vDash\":\"⊨\",\"Vdash\":\"⊩\",\"VDash\":\"⊫\",\"Vdashl\":\"⫦\",\"veebar\":\"⊻\",\"vee\":\"∨\",\"Vee\":\"⋁\",\"veeeq\":\"≚\",\"vellip\":\"⋮\",\"verbar\":\"|\",\"Verbar\":\"‖\",\"vert\":\"|\",\"Vert\":\"‖\",\"VerticalBar\":\"∣\",\"VerticalLine\":\"|\",\"VerticalSeparator\":\"❘\",\"VerticalTilde\":\"≀\",\"VeryThinSpace\":\" \",\"Vfr\":\"𝔙\",\"vfr\":\"𝔳\",\"vltri\":\"⊲\",\"vnsub\":\"⊂⃒\",\"vnsup\":\"⊃⃒\",\"Vopf\":\"𝕍\",\"vopf\":\"𝕧\",\"vprop\":\"∝\",\"vrtri\":\"⊳\",\"Vscr\":\"𝒱\",\"vscr\":\"𝓋\",\"vsubnE\":\"⫋︀\",\"vsubne\":\"⊊︀\",\"vsupnE\":\"⫌︀\",\"vsupne\":\"⊋︀\",\"Vvdash\":\"⊪\",\"vzigzag\":\"⦚\",\"Wcirc\":\"Ŵ\",\"wcirc\":\"ŵ\",\"wedbar\":\"⩟\",\"wedge\":\"∧\",\"Wedge\":\"⋀\",\"wedgeq\":\"≙\",\"weierp\":\"℘\",\"Wfr\":\"𝔚\",\"wfr\":\"𝔴\",\"Wopf\":\"𝕎\",\"wopf\":\"𝕨\",\"wp\":\"℘\",\"wr\":\"≀\",\"wreath\":\"≀\",\"Wscr\":\"𝒲\",\"wscr\":\"𝓌\",\"xcap\":\"⋂\",\"xcirc\":\"◯\",\"xcup\":\"⋃\",\"xdtri\":\"▽\",\"Xfr\":\"𝔛\",\"xfr\":\"𝔵\",\"xharr\":\"⟷\",\"xhArr\":\"⟺\",\"Xi\":\"Ξ\",\"xi\":\"ξ\",\"xlarr\":\"⟵\",\"xlArr\":\"⟸\",\"xmap\":\"⟼\",\"xnis\":\"⋻\",\"xodot\":\"⨀\",\"Xopf\":\"𝕏\",\"xopf\":\"𝕩\",\"xoplus\":\"⨁\",\"xotime\":\"⨂\",\"xrarr\":\"⟶\",\"xrArr\":\"⟹\",\"Xscr\":\"𝒳\",\"xscr\":\"𝓍\",\"xsqcup\":\"⨆\",\"xuplus\":\"⨄\",\"xutri\":\"△\",\"xvee\":\"⋁\",\"xwedge\":\"⋀\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"YAcy\":\"Я\",\"yacy\":\"я\",\"Ycirc\":\"Ŷ\",\"ycirc\":\"ŷ\",\"Ycy\":\"Ы\",\"ycy\":\"ы\",\"yen\":\"¥\",\"Yfr\":\"𝔜\",\"yfr\":\"𝔶\",\"YIcy\":\"Ї\",\"yicy\":\"ї\",\"Yopf\":\"𝕐\",\"yopf\":\"𝕪\",\"Yscr\":\"𝒴\",\"yscr\":\"𝓎\",\"YUcy\":\"Ю\",\"yucy\":\"ю\",\"yuml\":\"ÿ\",\"Yuml\":\"Ÿ\",\"Zacute\":\"Ź\",\"zacute\":\"ź\",\"Zcaron\":\"Ž\",\"zcaron\":\"ž\",\"Zcy\":\"З\",\"zcy\":\"з\",\"Zdot\":\"Ż\",\"zdot\":\"ż\",\"zeetrf\":\"ℨ\",\"ZeroWidthSpace\":\"​\",\"Zeta\":\"Ζ\",\"zeta\":\"ζ\",\"zfr\":\"𝔷\",\"Zfr\":\"ℨ\",\"ZHcy\":\"Ж\",\"zhcy\":\"ж\",\"zigrarr\":\"⇝\",\"zopf\":\"𝕫\",\"Zopf\":\"ℤ\",\"Zscr\":\"𝒵\",\"zscr\":\"𝓏\",\"zwj\":\"‍\",\"zwnj\":\"‌\"}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/entities.json\n// module id = 1097\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/entities.json?");

/***/ }),
/* 1098 */
/***/ (function(module, exports) {

eval("module.exports = {\"amp\":\"&\",\"apos\":\"'\",\"gt\":\">\",\"lt\":\"<\",\"quot\":\"\\\"\"}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/xml.json\n// module id = 1098\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/xml.json?");

/***/ }),
/* 1099 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(1222);\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(1101);\nexports.Duplex = __webpack_require__(329);\nexports.Transform = __webpack_require__(1226);\nexports.PassThrough = __webpack_require__(1392);\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/readable-browser.js\n// module id = 1099\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/readable-browser.js?");

/***/ }),
/* 1100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(1385)\nvar ieee754 = __webpack_require__(1386)\nvar isArray = __webpack_require__(1223)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/node-libs-browser/node_modules/buffer/index.js\n// module id = 1100\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/node-libs-browser/node_modules/buffer/index.js?");

/***/ }),
/* 1101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(690);\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = __webpack_require__(567);\nutil.inherits = __webpack_require__(44);\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: __webpack_require__(1391)\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(1224);\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(691).Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = __webpack_require__(1225);\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(329);\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(329);\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(137), __webpack_require__(1390).setImmediate, __webpack_require__(8)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_writable.js\n// module id = 1101\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_writable.js?");

/***/ }),
/* 1102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Buffer = __webpack_require__(691).Buffer;\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return -1;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// UTF-8 replacement characters ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd'.repeat(p);\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd'.repeat(p + 1);\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd'.repeat(p + 2);\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character for each buffered byte of a (partial)\n// character needs to be added to the output.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd'.repeat(this.lastTotal - this.lastNeed);\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/node-libs-browser/node_modules/string_decoder/lib/string_decoder.js\n// module id = 1102\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/node-libs-browser/node_modules/string_decoder/lib/string_decoder.js?");

/***/ }),
/* 1103 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseUniq = __webpack_require__(1229);\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/uniq.js\n// module id = 1103\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/uniq.js?");

/***/ }),
/* 1104 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFindIndex = __webpack_require__(1230),\n    baseIsNaN = __webpack_require__(1421),\n    strictIndexOf = __webpack_require__(1422);\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIndexOf.js\n// module id = 1104\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIndexOf.js?");

/***/ }),
/* 1105 */
/***/ (function(module, exports, __webpack_require__) {

eval("var createFind = __webpack_require__(1440),\n    findIndex = __webpack_require__(1235);\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/find.js\n// module id = 1105\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/find.js?");

/***/ }),
/* 1106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar wordBoundaries = __webpack_require__(1479)();\nvar includes = __webpack_require__(147);\nvar addWordBoundary = __webpack_require__(565);\n/**\n * Checks whether a character is present in the list of word boundaries.\n *\n * @param {string} character The character to look for.\n * @returns {boolean} Whether or not the character is present in the list of word boundaries.\n */\nvar characterInBoundary = function characterInBoundary(character) {\n    return includes(wordBoundaries, character);\n};\n/**\n * Checks whether a word is present in a sentence.\n *\n * @param {string} word The word to search for in the sentence.\n * @param {string} sentence The sentence to look through.\n * @returns {boolean} Whether or not the word is present in the sentence.\n */\nvar isWordInSentence = function isWordInSentence(word, sentence) {\n    // To ensure proper matching, make everything lowercase.\n    word = word.toLocaleLowerCase();\n    sentence = sentence.toLocaleLowerCase();\n    var wordWithBoundaries = addWordBoundary(word);\n    var occurrenceStart = sentence.search(new RegExp(wordWithBoundaries, \"ig\"));\n    // Return false if no match has been found.\n    if (occurrenceStart === -1) {\n        return false;\n    }\n    /*\n    If there is a word boundary before the matched word, the regex includes this word boundary in the match.\n    This means that occurrenceStart is the index of the word boundary before the match. Therefore 1 has to\n    be added to occurrenceStart, except when there is no word boundary before the match (i.e. at the start\n    of a sentence).\n     */\n    if (occurrenceStart > 0) {\n        occurrenceStart += 1;\n    }\n    var occurrenceEnd = occurrenceStart + word.length;\n    // Check if the previous and next character are word boundaries to determine if a complete word was detected\n    var previousCharacter = characterInBoundary(sentence[occurrenceStart - 1]) || occurrenceStart === 0;\n    var nextCharacter = characterInBoundary(sentence[occurrenceEnd]) || occurrenceEnd === sentence.length;\n    return previousCharacter && nextCharacter;\n};\nmodule.exports = {\n    characterInBoundary: characterInBoundary,\n    isWordInSentence: isWordInSentence\n};\n//# sourceMappingURL=matchWordInSentence.js.map\n//# sourceMappingURL=matchWordInSentence.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchWordInSentence.js\n// module id = 1106\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchWordInSentence.js?");

/***/ }),
/* 1107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\nThis is a list of irregular participles used in French.\nThese participles have an irregular stem but follow a regular conjugation pattern for feminine and plural forms (adding -e, -es, -s).\nThe following participles were excluded because they are intransitive verbs that cannot be passive:\napparu, réapparu, devenu, redevenu, intervenu, mort, parti, parvenu, provenu, resurvenu, revenu, survenu, venu.\n */\n\nvar irregularsRegular = [\"abâtardi\", \"abattu\", \"abêti\", \"aboli\", \"abouti\", \"abruti\", \"abstenu\", \"abstrait\", \"accompli\", \"accouru\", \"accroupi\", \"accru\", \"accueilli\", \"adjoint\", \"adouci\", \"advenu\", \"affadi\", \"affaibli\", \"affermi\", \"agi\", \"agrandi\", \"aguerri\", \"ahuri\", \"aigri\", \"alangui\", \"alenti\", \"alourdi\", \"aluni\", \"amaigri\", \"amati\", \"amerri\", \"aminci\", \"amoindri\", \"amolli\", \"amorti\", \"anéanti\", \"apâli\", \"aperçu\", \"aplani\", \"appartenu\", \"appauvri\", \"appendu\", \"appesanti\", \"applaudi\", \"approfondi\", \"arrondi\", \"assagi\", \"assailli\", \"assaini\", \"asservi\", \"assombri\", \"assorti\", \"assoupi\", \"assoupli\", \"assourdi\", \"assouvi\", \"assujetti\", \"astreint\", \"attendri\", \"attendu\", \"atterri\", \"attiédi\", \"attrait\", \"autodétruit\", \"avachi\", \"aveuli\", \"avili\", \"banni\", \"barri\", \"bâti\", \"battu\", \"béni\", \"blanchi\", \"blêmi\", \"bleui\", \"blondi\", \"blotti\", \"bonni\", \"bouffi\", \"bouilli\", \"bruni\", \"bu\", \"calmi\", \"candi\", \"ceint\", \"chéri\", \"choisi\", \"circonscrit\", \"circonvenu\", \"combattu\", \"comparu\", \"compati\", \"conclu\", \"concouru\", \"condescendu\", \"conduit\", \"confit\", \"confondu\", \"conjoint\", \"connu\", \"consenti\", \"construit\", \"contenu\", \"contraint\", \"contredit\", \"contrefait\", \"contrevenu\", \"convaincu\", \"convenu\", \"converti\", \"coproduit\", \"correspondu\", \"couru\", \"cousu\", \"craint\", \"cramoisi\", \"crépi\", \"croupi\", \"cru\", \"cueilli\", \"cuit\", \"débattu\", \"décati\", \"déchu\", \"déconfit\", \"déconstruit\", \"décousu\", \"découvert\", \"décrépi\", \"décrit\", \"décru\", \"déçu\", \"dédit\", \"déduit\", \"défailli\", \"défendu\", \"défini\", \"défleuri\", \"défraîchi\", \"dégarni\", \"dégluti\", \"dégourdi\", \"démenti\", \"démoli\", \"démordu\", \"démuni\", \"départi\", \"dépeint\", \"dépendu\", \"dépéri\", \"déplu\", \"dépoli\", \"dépourvu\", \"désobéi\", \"desservi\", \"déteint\", \"détendu\", \"détenu\", \"détruit\", \"dévêtu\", \"discouru\", \"disjoint\", \"disparu\", \"distendu\", \"distrait\", \"dit\", \"diverti\", \"dormi\", \"durci\", \"ébahi\", \"ébaubi\", \"ébaudi\", \"éclairci\", \"éconduit\", \"écrit\", \"élargi\", \"élu\", \"embelli\", \"embouti\", \"émoulu\", \"empli\", \"empreint\", \"empuanti\", \"ému\", \"enchéri\", \"encouru\", \"endolori\", \"endormi\", \"enduit\", \"endurci\", \"enfoui\", \"enfreint\", \"enfui\", \"englouti\", \"engourdi\", \"enhardi\", \"enjoint\", \"enlaidi\", \"ennobli\", \"enorgueilli\", \"enrichi\", \"enseveli\", \"entendu\", \"entr'aperçu\", \"entraperçu\", \"entreclos\", \"entremis\", \"entretenu\", \"entrevu\", \"entrouvert\", \"envahi\", \"épanoui\", \"éperdu\", \"équarri\", \"équivalu\", \"estourbi\", \"établi\", \"éteint\", \"étendu\", \"étourdi\", \"étréci\", \"étreint\", \"eu\", \"évanoui\", \"exclu\", \"extrait\", \"faibli\", \"fait\", \"fallu\", \"farci\", \"feint\", \"fendu\", \"fini\", \"fléchi\", \"fleuri\", \"fondu\", \"forci\", \"foui\", \"fourbi\", \"fourni\", \"foutu\", \"fraîchi\", \"franchi\", \"frémi\", \"frit\", \"fui\", \"garanti\", \"garni\", \"gauchi\", \"gémi\", \"glapi\", \"grandi\", \"grossi\", \"guéri\", \"haï\", \"imparti\", \"induit\", \"infléchi\", \"inscrit\", \"instruit\", \"interdit\", \"interrompu\", \"interverti\", \"introduit\", \"inverti\", \"investi\", \"jailli\", \"jauni\", \"joint\", \"joui\", \"langui\", \"loti\", \"lu\", \"maintenu\", \"méconnu\", \"mécru\", \"médit\", \"menti\", \"minci\", \"moisi\", \"moiti\", \"molli\", \"mordu\", \"morfondu\", \"moulu\", \"mugi\", \"muni\", \"nanti\", \"noirci\", \"nourri\", \"nui\", \"obéi\", \"obscurci\", \"obtenu\", \"offert\", \"oint\", \"ouï\", \"ourdi\", \"ouvert\", \"pâli\", \"parcouru\", \"paru\", \"pâti\", \"peint\", \"pendu\", \"perçu\", \"péri\", \"perverti\", \"pétri\", \"plaint\", \"portrait\", \"pourfendu\", \"pourri\", \"poursuivi\", \"pourvu\", \"prédéfini\", \"prédit\", \"préétabli\", \"prémuni\", \"prescrit\", \"prétendu\", \"prévalu\", \"prévenu\", \"prévu\", \"produit\", \"promu\", \"proscrit\", \"pu\", \"puni\", \"rabattu\", \"rabougri\", \"radouci\", \"raffermi\", \"ragaillardi\", \"raidi\", \"rajeuni\", \"ralenti\", \"ramolli\", \"ranci\", \"ravi\", \"réadmis\", \"réagi\", \"réappris\", \"rebâti\", \"rebattu\", \"rebondi\", \"rebu\", \"reconnu\", \"reconstruit\", \"reconverti\", \"recouru\", \"recouvert\", \"recrépi\", \"récrit\", \"recru\", \"reçu\", \"recueilli\", \"recuit\", \"redécouvert\", \"redéfini\", \"redit\", \"réduit\", \"réécrit\", \"réélu\", \"réentendu\", \"refendu\", \"réfléchi\", \"refondu\", \"refoutu\", \"refroidi\", \"regarni\", \"régi\", \"réinscrit\", \"réintroduit\", \"réinvesti\", \"rejoint\", \"réjoui\", \"relu\", \"relui\", \"rembruni\", \"remordu\", \"rempli\", \"renchéri\", \"rendormi\", \"rendu\", \"rentrait\", \"répandu\", \"reparcouru\", \"réparti\", \"reparu\", \"repeint\", \"rependu\", \"repenti\", \"reperdu\", \"répondu\", \"reproduit\", \"résolu\", \"resplendi\", \"ressaisi\", \"resservi\", \"restreint\", \"resurgi\", \"rétabli\", \"retendu\", \"retenu\", \"retraduit\", \"retrait\", \"retranscrit\", \"rétréci\", \"réuni\", \"réussi\", \"revécu\", \"revendu\", \"reverdi\", \"reverni\", \"revêtu\", \"revu\", \"ri\", \"roidi\", \"rosi\", \"rôti\", \"rougi\", \"roussi\", \"rousti\", \"rouvert\", \"rugi\", \"saisi\", \"sali\", \"satisfait\", \"sauri\", \"secouru\", \"séduit\", \"senti\", \"serti\", \"servi\", \"sévi\", \"souffert\", \"souri\", \"sous-entendu\", \"sous-tendu\", \"souscrit\", \"soustrait\", \"soutenu\", \"souvenu\", \"su\", \"subi\", \"subvenu\", \"suffi\", \"suivi\", \"surenchéri\", \"surgi\", \"suri\", \"survécu\", \"suspendu\", \"tapi\", \"tari\", \"teint\", \"tendu\", \"tenu\", \"terni\", \"terri\", \"tiédi\", \"tondu\", \"tordu\", \"traduit\", \"trahi\", \"trait\", \"transcrit\", \"transi\", \"travesti\", \"tressailli\", \"uni\", \"vagi\", \"vaincu\", \"valu\", \"vécu\", \"vendu\", \"verdi\", \"verni\", \"vêtu\", \"vieilli\", \"vomi\", \"voulu\", \"vu\"];\n/*\nThis is a list of irregular participles used in French.\nThese participles have an irregular stem and follow an irregular conjugation pattern. Therefore all forms are included in the list.\n */\nvar irregularsIrregular = [\"absous\", \"absoute\", \"absoutes\", \"dissous\", \"dissoute\", \"dissoutes\", \"crû\", \"crus\", \"crue\", \"crues\", \"dû\", \"dus\", \"dues\", \"mû\", \"mus\", \"mue\", \"mues\"];\n/*\nThis is a list of irregular participles used in French.\nThese participles have an irregular stem ending in -s. They have the same form in the masculine singular and plural.\nFor feminine singular and feminine plural forms -e and -es are added.\n */\nvar irregularsEndingInS = [\"repris\", \"démis\", \"omis\", \"dépris\", \"retransmis\", \"assis\", \"promis\", \"circoncis\", \"permis\", \"compris\", \"mépris\", \"inclus\", \"soumis\", \"rassis\", \"sursis\", \"enclos\", \"acquis\", \"compromis\", \"commis\", \"désappris\", \"appris\", \"conquis\", \"transmis\", \"remis\", \"surpris\", \"reconquis\", \"mis\", \"enquis\", \"pris\", \"admis\", \"clos\", \"émis\", \"entrepris\", \"épris\", \"requis\"];\nmodule.exports = function () {\n  return {\n    irregularsRegular: irregularsRegular,\n    irregularsIrregular: irregularsIrregular,\n    irregularsEndingInS: irregularsEndingInS\n  };\n};\n//# sourceMappingURL=irregulars.js.map\n//# sourceMappingURL=irregulars.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/irregulars.js\n// module id = 1107\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/irregulars.js?");

/***/ }),
/* 1108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Matches words from a list in sentence parts and returns them and their indices.\n *\n * @param {string} sentencePart The sentence part to match the words in.\n * @param {RegExp} regex The regex used for matching.\n * @returns {Array} The list of result objects.\n */\n\nmodule.exports = function (sentencePart, regex) {\n    var results = [];\n    /* Decided to use a for loop here so that we could retrieve all matches while keeping result objects intact.\n    For every match there is in the sentence part, an object with the match and its index will be pushed into\n    the results array. */\n    for (var match = regex.exec(sentencePart); match !== null; match = regex.exec(sentencePart)) {\n        results.push({\n            match: match[0],\n            index: match.index\n        });\n    }\n    return results;\n};\n//# sourceMappingURL=getIndicesWithRegex.js.map\n//# sourceMappingURL=getIndicesWithRegex.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getIndicesWithRegex.js\n// module id = 1108\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getIndicesWithRegex.js?");

/***/ }),
/* 1109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transitionWords = __webpack_require__(1244)().singleWords;\n/**\n * Returns an object with exceptions for the prominent words researcher\n * @returns {Object} The object filled with exception arrays.\n */\nvar articles = [\"le\", \"la\", \"les\", \"un\", \"une\", \"des\", \"aux\", \"du\", \"au\", \"d'un\", \"d'une\", \"l'un\", \"l'une\"];\nvar cardinalNumerals = [\"deux\", \"trois\", \"quatre\", \"cinq\", \"six\", \"sept\", \"huit\", \"neuf\", \"dix\", \"onze\", \"douze\", \"treize\", \"quatorze\", \"quinze\", \"seize\", \"dix-sept\", \"dix-huit\", \"dix-neuf\", \"vingt\", \"trente\", \"quarante\", \"cinquante\", \"soixante\", \"soixante-dix\", \"quatre-vingt\", \"quatre-vingt-dix\", \"septante\", \"huitante\", \"octante\", \"nonante\", \"cent\", \"mille\", \"million\", \"milliard\"];\n// 'premier' and 'première' are not included because of their secondary meanings ('prime minister', '[movie] premiere')\nvar ordinalNumerals = [\"second\", \"secondes\", \"deuxième\", \"deuxièmes\", \"troisième\", \"troisièmes\", \"quatrième\", \"quatrièmes\", \"cinquième\", \"cinquièmes\", \"sixième\", \"sixièmes\", \"septième\", \"septièmes\", \"huitième\", \"huitièmes\", \"neuvième\", \"neuvièmes\", \"dixième\", \"dixièmes\", \"onzième\", \"onzièmes\", \"douzième\", \"douzièmes\", \"treizième\", \"treizièmes\", \"quatorzième\", \"quatorzièmes\", \"quinzième\", \"quinzièmes\", \"seizième\", \"seizièmes\", \"dix-septième\", \"dix-septièmes\", \"dix-huitième\", \"dix-huitièmes\", \"dix-neuvième\", \"dix-neuvièmes\", \"vingtième\", \"vingtièmes\"];\nvar personalPronounsNominative = [\"je\", \"tu\", \"il\", \"elle\", \"on\", \"nous\", \"vous\", \"ils\", \"elles\", \"qu'il\", \"qu'elle\", \"qu'ils\", \"qu'elles\", \"qu'on\", \"d'elle\", \"d'elles\"];\nvar personalPronounsStressed = [\"moi\", \"toi\", \"lui\", \"soi\", \"eux\", \"d'eux\", \"qu'eux\"];\n// Le, la, les are already included in the articles list.\nvar personalPronounsAccusative = [\"me\", \"te\"];\nvar demonstrativePronouns = [\"celui\", \"celle\", \"ceux\", \"celles\", \"ce\", \"celui-ci\", \"celui-là\", \"celle-ci\", \"celle-là\", \"ceux-ci\", \"ceux-là\", \"celles-ci\", \"celles-là\", \"ceci\", \"cela\", \"ça\", \"cette\", \"cet\", \"ces\"];\nvar possessivePronouns = [\"mon\", \"ton\", \"son\", \"ma\", \"ta\", \"sa\", \"mes\", \"tes\", \"ses\", \"notre\", \"votre\", \"leur\", \"nos\", \"vos\", \"leurs\"];\nvar quantifiers = [\"beaucoup\", \"peu\", \"quelque\", \"quelques\", \"tous\", \"tout\", \"toute\", \"toutes\", \"plusieurs\", \"plein\", \"chaque\", \"suffisant\", \"suffisante\", \"suffisantes\", \"suffisants\", \"faible\", \"moins\", \"tant\", \"plus\", \"divers\", \"diverse\", \"diverses\"];\n// The remaining reflexive personal pronouns are already included in other pronoun lists.\nvar reflexivePronouns = [\"se\"];\nvar indefinitePronouns = [\"aucun\", \"aucune\", \"autre\", \"autres\", \"d'autres\", \"certain\", \"certaine\", \"certaines\", \"certains\", \"chacun\", \"chacune\", \"même\", \"mêmes\", \"quelqu'un\", \"quelqu'une\", \"quelques'uns\", \"quelques'unes\", \"autrui\", \"nul\", \"personne\", \"quiconque\", \"rien\", \"d'aucunes\", \"d'aucuns\", \"nuls\", \"nules\", \"l'autre\", \"tel\", \"telle\", \"tels\", \"telles\"];\nvar relativePronouns = [\"qui\", \"que\", \"lequel\", \"laquelle\", \"auquel\", \"auxquels\", \"auxquelles\", \"duquel\", \"desquels\", \"desquelles\", \"dont\", \"où\", \"quoi\"];\nvar interrogativeProAdverbs = [\"combien\", \"comment\", \"pourquoi\", \"d'où\"];\nvar interrogativeAdjectives = [\"quel\", \"quels\", \"quelle\"];\nvar pronominalAdverbs = [\"y\", \"n'y\"];\nvar locativeAdverbs = [\"là\", \"ici\", \"d'ici\", \"voici\"];\n// 'Vins' is not included because it also means 'wines'.\nvar otherAuxiliaries = [\"a\", \"a-t-elle\", \"a-t-il\", \"a-t-on\", \"ai\", \"ai-je\", \"aie\", \"as\", \"as-tu\", \"aura\", \"aurai\", \"auraient\", \"aurais\", \"aurait\", \"auras\", \"aurez\", \"auriez\", \"aurons\", \"auront\", \"avaient\", \"avais\", \"avait\", \"avez\", \"avez-vous\", \"aviez\", \"avions\", \"avons\", \"avons-nous\", \"ayez\", \"ayons\", \"eu\", \"eûmes\", \"eurent\", \"eus\", \"eut\", \"eûtes\", \"j'ai\", \"j'aurai\", \"j'avais\", \"j'eus\", \"ont\", \"ont-elles\", \"ont-ils\", \"vais\", \"vas\", \"va\", \"allons\", \"allez\", \"vont\", \"vais-je\", \"vas-tu\", \"va-t-il\", \"va-t-elle\", \"va-t-on\", \"allons-nous\", \"allez-vous\", \"vont-elles\", \"vont-ils\", \"allé\", \"allés\", \"j'allai\", \"allai\", \"allas\", \"alla\", \"allâmes\", \"allâtes\", \"allèrent\", \"j'allais\", \"allais\", \"allait\", \"allions\", \"alliez\", \"allaient\", \"j'irai\", \"iras\", \"ira\", \"irons\", \"irez\", \"iront\", \"j'aille\", \"aille\", \"ailles\", \"aillent\", \"j'allasse\", \"allasse\", \"allasses\", \"allât\", \"allassions\", \"allassiez\", \"allassent\", \"j'irais\", \"irais\", \"irait\", \"irions\", \"iriez\", \"iraient\", \"allant\", \"viens\", \"vient\", \"venons\", \"venez\", \"viennent\", \"viens-je\", \"viens-de\", \"vient-il\", \"vient-elle\", \"vient-on\", \"venons-nous\", \"venez-vous\", \"viennent-elles\", \"viennent-ils\", \"vins\", \"vint\", \"vînmes\", \"vîntes\", \"vinrent\", \"venu\", \"venus\", \"venais\", \"venait\", \"venions\", \"veniez\", \"venaient\", \"viendrai\", \"viendras\", \"viendra\", \"viendrons\", \"viendrez\", \"viendront\", \"vienne\", \"viennes\", \"vinsse\", \"vinsses\", \"vînt\", \"vinssions\", \"vinssiez\", \"vinssent\", \"viendrais\", \"viendrait\", \"viendrions\", \"viendriez\", \"viendraient\", \"venant\", \"dois\", \"doit\", \"devons\", \"devez\", \"doivent\", \"dois-je\", \"dois-tu\", \"doit-il\", \"doit-elle\", \"doit-on\", \"devons-nous\", \"devez-vous\", \"doivent-elles\", \"doivent-ils\", \"dus\", \"dut\", \"dûmes\", \"dûtes\", \"durent\", \"dû\", \"devais\", \"devait\", \"devions\", \"deviez\", \"devaient\", \"devrai\", \"devras\", \"devra\", \"devrons\", \"devrez\", \"devront\", \"doive\", \"doives\", \"dusse\", \"dusses\", \"dût\", \"dussions\", \"dussiez\", \"dussent\", \"devrais\", \"devrait\", \"devrions\", \"devriez\", \"devraient\", \"peux\", \"peut\", \"pouvons\", \"pouvez\", \"peuvent\", \"peux-je\", \"peux-tu\", \"peut-il\", \"peut-elle\", \"peut-on\", \"pouvons-nous\", \"pouvez-vous\", \"peuvent-ils\", \"peuvent-elles\", \"pus\", \"put\", \"pûmes\", \"pûtes\", \"purent\", \"pu\", \"pouvais\", \"pouvait\", \"pouvions\", \"pouviez\", \"pouvaient\", \"pourrai\", \"pourras\", \"pourra\", \"pourrons\", \"pourrez\", \"pourront\", \"puisse\", \"puisses\", \"puissions\", \"puissiez\", \"puissent\", \"pusse\", \"pusses\", \"pût\", \"pussions\", \"pussiez\", \"pussent\", \"pourrais\", \"pourrait\", \"pourrions\", \"pourriez\", \"pourraient\", \"pouvant\", \"semble\", \"sembles\", \"semblons\", \"semblez\", \"semblent\", \"semble-je\", \"sembles-il\", \"sembles-elle\", \"sembles-on\", \"semblons-nous\", \"semblez-vous\", \"semblent-ils\", \"semblent-elles\", \"semblai\", \"semblas\", \"sembla\", \"semblâmes\", \"semblâtes\", \"semblèrent\", \"semblais\", \"semblait\", \"semblions\", \"sembliez\", \"semblaient\", \"semblerai\", \"sembleras\", \"semblera\", \"semblerons\", \"semblerez\", \"sembleront\", \"semblé\", \"semblasse\", \"semblasses\", \"semblât\", \"semblassions\", \"semblassiez\", \"semblassent\", \"semblerais\", \"semblerait\", \"semblerions\", \"sembleriez\", \"sembleraient\", \"parais\", \"paraît\", \"ait\", \"paraissons\", \"paraissez\", \"paraissent\", \"parais-je\", \"parais-tu\", \"paraît-il\", \"paraît-elle\", \"paraît-on\", \"ait-il\", \"ait-elle\", \"ait-on\", \"paraissons-nous\", \"paraissez-vous\", \"paraissent-ils\", \"paraissent-elles\", \"parus\", \"parut\", \"parûmes\", \"parûtes\", \"parurent\", \"paraissais\", \"paraissait\", \"paraissions\", \"paraissiez\", \"paraissaient\", \"paraîtrai\", \"paraîtras\", \"paraîtra\", \"paraîtrons\", \"paraîtrez\", \"paraîtront\", \"paru\", \"paraisse\", \"paraisses\", \"parusse\", \"parusses\", \"parût\", \"parussions\", \"parussiez\", \"parussent\", \"paraîtrais\", \"paraîtrait\", \"paraîtrions\", \"paraîtriez\", \"paraîtraient\", \"paraitrais\", \"paraitrait\", \"paraitrions\", \"paraitriez\", \"paraitraient\", \"paraissant\", \"mets\", \"met\", \"mettons\", \"mettez\", \"mettent\", \"mets-je\", \"mets-tu\", \"met-il\", \"met-elle\", \"met-on\", \"mettons-nous\", \"mettez-vous\", \"mettent-ils\", \"mettent-elles\", \"mis\", \"mit\", \"mîmes\", \"mîtes\", \"mirent\", \"mettais\", \"mettait\", \"mettions\", \"mettiez\", \"mettaient\", \"mettrai\", \"mettras\", \"mettra\", \"mettrons\", \"mettrez\", \"mettront\", \"mette\", \"mettes\", \"misse\", \"misses\", \"mît\", \"missions\", \"missiez\", \"missent\", \"mettrais\", \"mettrait\", \"mettrions\", \"mettriez\", \"mettraient\", \"mettant\", \"finis\", \"finit\", \"finissons\", \"finissez\", \"finissent\", \"finis-je\", \"finis-tu\", \"finit-il\", \"finit-elle\", \"finit-on\", \"finissons-nous\", \"finissez-vous\", \"finissent-ils\", \"finissent-elles\", \"finîmes\", \"finîtes\", \"finirent\", \"finissais\", \"finissait\", \"finissions\", \"finissiez\", \"finissaient\", \"finirai\", \"finiras\", \"finira\", \"finirons\", \"finirez\", \"finiront\", \"fini\", \"finisse\", \"finisses\", \"finît\", \"finirais\", \"finirait\", \"finirions\", \"finiriez\", \"finiraient\", \"finissant\", \"n'a\", \"n'ai\", \"n'aie\", \"n'as\", \"n'aura\", \"n'aurai\", \"n'auraient\", \"n'aurais\", \"n'aurait\", \"n'auras\", \"n'aurez\", \"n'auriez\", \"n'aurons\", \"n'auront\", \"n'avaient\", \"n'avais\", \"n'avait\", \"n'avez\", \"n'avez-vous\", \"n'aviez\", \"n'avions\", \"n'avons\", \"n'avons-nous\", \"n'ayez\", \"n'ayons\", \"n'ont\", \"n'ont-elles\", \"n'ont-ils\", \"n'allons\", \"n'allez\", \"n'allais\", \"n'allait\", \"n'allions\", \"n'alliez\", \"n'allaient\", \"n'iras\", \"n'ira\", \"n'irons\", \"n'irez\", \"n'iront\", \"qu'a\"];\nvar otherAuxiliariesInfinitive = [\"avoir\", \"aller\", \"venir\", \"devoir\", \"pouvoir\", \"sembler\", \"paraître\", \"paraitre\", \"mettre\", \"finir\", \"d'avoir\", \"d'aller\", \"n'avoir\"];\nvar copula = [\"suis\", \"es\", \"est\", \"est-ce\", \"n'est\", \"sommes\", \"êtes\", \"sont\", \"suis-je\", \"es-tu\", \"est-il\", \"est-elle\", \"est-on\", \"sommes-nous\", \"êtes-vous\", \"sont-ils\", \"sont-elles\", \"étais\", \"était\", \"étions\", \"étiez\", \"étaient\", \"serai\", \"seras\", \"sera\", \"serons\", \"serez\", \"seront\", \"serais\", \"serait\", \"serions\", \"seriez\", \"seraient\", \"sois\", \"soit\", \"soyons\", \"soyez\", \"soient\", \"été\", \"n'es\", \"n'est-ce\", \"n'êtes\", \"n'était\", \"n'étais\", \"n'étions\", \"n'étiez\", \"n'étaient\", \"qu'est\"];\nvar copulaInfinitive = [\"être\", \"d'être\"];\n/*\n’Excepté' not filtered because might also be participle of 'excepter', 'concernant' not filtered because might also be present participle\nof 'concerner'.\nNot filtered because of primary meaning: 'grâce à' ('grace'), 'en face' ('face'), 'en dehors' ('outside'), 'à côté' ('side'),\n'à droite' ('right'), 'à gauche' ('left'). 'voici' already included in the locative pronoun list.\n'hors' for 'hors de', 'quant' for 'quant à'. ‘travers’ is part of 'à travers.'\n */\nvar prepositions = [\"à\", \"après\", \"d'après\", \"au-delà\", \"au-dessous\", \"au-dessus\", \"avant\", \"avec\", \"concernant\", \"chez\", \"contre\", \"dans\", \"de\", \"depuis\", \"derrière\", \"dès\", \"devant\", \"durant\", \"en\", \"entre\", \"envers\", \"environ\", \"hormis\", \"hors\", \"jusque\", \"jusqu'à\", \"jusqu'au\", \"jusqu'aux\", \"loin\", \"moyennant\", \"outre\", \"par\", \"parmi\", \"pendant\", \"pour\", \"près\", \"quant\", \"sans\", \"sous\", \"sur\", \"travers\", \"vers\", \"voilà\"];\nvar coordinatingConjunctions = [\"et\", \"ni\", \"or\", \"ou\"];\n/*\nEt...et, ou...ou, ni...ni – in their simple forms already in other lists. 'd'une', 'd'autre' are part of 'd'une part…d'autre part'.\n'sinon' is part of 'sinon…du moins'.\n*/\nvar correlativeConjunctions = [\"non\", \"pas\", \"seulement\", \"sitôt\", \"aussitôt\", \"d'autre\"];\n/*\nMany subordinating conjunctions are already included in the prepositions list, transition words list or pronominal adverbs list.\n'autant', 'd'autant', 'd'ici', 'tandis' part of the complex form with 'que', 'lors' as a part of 'lors même que',\n'parce' as a part of 'parce que'\n */\nvar subordinatingConjunctions = [\"afin\", \"autant\", \"comme\", \"d'autant\", \"d'ici\", \"quand\", \"lors\", \"parce\", \"si\", \"tandis\"];\n/*\n These verbs are frequently used in interviews to indicate questions and answers.\n'Dire' ('to say'), 'demander' ('to ask'), 'penser' ('to think')– 16 forms; more specific verbs – 4 forms\n'affirmer', 'ajouter' ('to add'), 'analyser', 'avancer', 'écrire' ('to write'), 'indiquer', 'poursuivre' ('to pursue'), 'préciser', 'résumer',\n 'souvenir' ('to remember'), 'témoigner' ('to witness') – only VS forms (due to their more general nature)\n */\nvar interviewVerbs = [\"dit\", \"disent\", \"dit-il\", \"dit-elle\", \"disent-ils\", \"disent-elles\", \"disait\", \"disait-il\", \"disait-elle\", \"disaient-ils\", \"disaient-elles\", \"dirent\", \"demande\", \"demandent\", \"demande-t-il\", \"demande-t-elle\", \"demandent-ils\", \"demandent-elles\", \"demandait\", \"demandaient\", \"demandait-il\", \"demandait-elle\", \"demandaient-ils\", \"demandaient-elles\", \"demanda\", \"demanda-t-il\", \"demanda-t-elle\", \"demandé\", \"pense\", \"pensent\", \"pense-t-il\", \"pense-t-elle\", \"pensent-ils\", \"pensent-elles\", \"pensait\", \"pensaient\", \"pensait-il\", \"pensait-elle\", \"pensaient-ils\", \"pensaient-elles\", \"pensa\", \"pensa-t-il\", \"pensa-t-elle\", \"pensé\", \"affirme\", \"affirme-t-il\", \"affirme-t-elle\", \"affirmé\", \"avoue\", \"avoue-t-il\", \"avoue-t-elle\", \"avoué\", \"concède\", \"concède-t-il\", \"concède-t-elle\", \"concédé\", \"confie\", \"confie-t-il\", \"confie-t-elle\", \"confié\", \"continue\", \"continue-t-il\", \"continue-t-elle\", \"continué\", \"déclame\", \"déclame-t-il\", \"déclame-t-elle\", \"déclamé\", \"déclare\", \"déclare-t-il\", \"déclare-t-elle\", \"déclaré\", \"déplore\", \"déplore-t-il\", \"déplore-t-elle\", \"déploré\", \"explique\", \"explique-t-il\", \"explique-t-elle\", \"expliqué\", \"lance\", \"lance-t-il\", \"lance-t-elle\", \"lancé\", \"narre\", \"narre-t-il\", \"narre-t-elle\", \"narré\", \"raconte\", \"raconte-t-il\", \"raconte-t-elle\", \"raconté\", \"rappelle\", \"rappelle-t-il\", \"rappelle-t-elle\", \"rappelé\", \"réagit\", \"réagit-il\", \"réagit-elle\", \"réagi\", \"répond\", \"répond-il\", \"répond-elle\", \"répondu\", \"rétorque\", \"rétorque-t-il\", \"rétorque-t-elle\", \"rétorqué\", \"souligne\", \"souligne-t-il\", \"souligne-t-elle\", \"souligné\", \"affirme-t-il\", \"affirme-t-elle\", \"ajoute-t-il\", \"ajoute-t-elle\", \"analyse-t-il\", \"analyse-t-elle\", \"avance-t-il\", \"avance-t-elle\", \"écrit-il\", \"écrit-elle\", \"indique-t-il\", \"indique-t-elle\", \"poursuit-il\", \"poursuit-elle\", \"précise-t-il\", \"précise-t-elle\", \"résume-t-il\", \"résume-t-elle\", \"souvient-il\", \"souvient-elle\", \"témoigne-t-il\", \"témoigne-t-elle\"];\nvar interviewVerbsInfinitive = [\"dire\", \"penser\", \"demander\", \"concéder\", \"continuer\", \"confier\", \"déclamer\", \"déclarer\", \"déplorer\", \"expliquer\", \"lancer\", \"narrer\", \"raconter\", \"rappeler\", \"réagir\", \"répondre\", \"rétorquer\", \"souligner\", \"affirmer\", \"ajouter\", \"analyser\", \"avancer\", \"écrire\", \"indiquer\", \"poursuivre\", \"préciser\", \"résumer\", \"témoigner\"];\n// These transition words were not included in the list for the transition word assessment for various reasons.\nvar additionalTransitionWords = [\"encore\", \"éternellement\", \"immédiatement\", \"compris\", \"comprenant\", \"inclus\", \"naturellement\", \"particulièrement\", \"notablement\", \"actuellement\", \"maintenant\", \"ordinairement\", \"généralement\", \"habituellement\", \"d'habitude\", \"vraiment\", \"finalement\", \"uniquement\", \"peut-être\", \"initialement\", \"déjà\", \"c.-à-d\", \"souvent\", \"fréquemment\", \"régulièrement\", \"simplement\", \"éventuellement\", \"quelquefois\", \"parfois\", \"probable\", \"plausible\", \"jamais\", \"toujours\", \"incidemment\", \"accidentellement\", \"récemment\", \"dernièrement\", \"relativement\", \"clairement\", \"évidemment\", \"apparemment\", \"pourvu\"];\nvar intensifiers = [\"assez\", \"trop\", \"tellement\", \"presque\", \"très\", \"absolument\", \"extrêmement\", \"quasi\", \"quasiment\", \"fort\"];\n// These verbs convey little meaning.\nvar delexicalizedVerbs = [\"fais\", \"fait\", \"faisons\", \"faites\", \"font\", \"fais-je\", \"fait-il\", \"fait-elle\", \"fait-on\", \"faisons-nous\", \"faites-vous\", \"font-ils\", \"font-elles\", \"fis\", \"fit\", \"fîmes\", \"fîtes\", \"firent\", \"faisais\", \"faisait\", \"faisions\", \"faisiez\", \"faisaient\", \"ferai\", \"feras\", \"fera\", \"ferons\", \"ferez\", \"feront\", \"veux\", \"veut\", \"voulons\", \"voulez\", \"veulent\", \"voulus\", \"voulut\", \"voulûmes\", \"voulûtes\", \"voulurent\", \"voulais\", \"voulait\", \"voulions\", \"vouliez\", \"voulaient\", \"voudrai\", \"voudras\", \"voudra\", \"voudrons\", \"voudrez\", \"voudront\", \"voulu\", \"veux-je\", \"veux-tu\", \"veut-il\", \"veut-elle\", \"veut-on\", \"voulons-nous\", \"voulez-vous\", \"veulent-ils\", \"veulent-elles\", \"voudrais\", \"voudrait\", \"voudrions\", \"voudriez\", \"voudraient\", \"voulant\"];\nvar delexicalizedVerbsInfinitive = [\"faire\", \"vouloir\"];\n/* These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.\n Keyword combinations containing these adjectives/adverbs are fine.\n 'Dernier' is also included in generalAdjectivesAdverbsPreceding because it can be used both before and after a noun,\n and it should be filtered out either way.\n */\nvar generalAdjectivesAdverbs = [\"antérieur\", \"antérieures\", \"antérieurs\", \"antérieure\", \"précédent\", \"précédents\", \"précédente\", \"précédentes\", \"facile\", \"faciles\", \"simple\", \"simples\", \"vite\", \"vites\", \"vitesse\", \"vitesses\", \"difficile\", \"difficiles\", \"propre\", \"propres\", \"long\", \"longe\", \"longs\", \"longes\", \"longue\", \"longues\", \"bas\", \"basse\", \"basses\", \"ordinaire\", \"ordinaires\", \"bref\", \"brefs\", \"brève\", \"brèves\", \"sûr\", \"sûrs\", \"sûre\", \"sûres\", \"sure\", \"sures\", \"surs\", \"habituel\", \"habituels\", \"habituelle\", \"habituelles\", \"soi-disant\", \"surtout\", \"récent\", \"récents\", \"récente\", \"récentes\", \"total\", \"totaux\", \"totale\", \"totales\", \"complet\", \"complets\", \"complète\", \"complètes\", \"possible\", \"possibles\", \"communément\", \"constamment\", \"facilement\", \"continuellement\", \"directement\", \"légèrement\", \"dernier\", \"derniers\", \"dernière\", \"dernières\", \"différent\", \"différents\", \"différente\", \"différentes\", \"similaire\", \"similaires\", \"pareil\", \"pareils\", \"pareille\", \"pareilles\", \"largement\", \"mal\", \"super\", \"bien\", \"pire\", \"pires\", \"suivants\", \"suivante\", \"suivantes\", \"prochain\", \"prochaine\", \"prochains\", \"prochaines\", \"proche\", \"proches\", \"fur\"];\n/*\n 'Dernier' is also included in generalAdjectivesAdverbs because it can be used both before and after a noun,\n and it should be filtered out either way.\n */\nvar generalAdjectivesAdverbsPreceding = [\"nouveau\", \"nouvel\", \"nouvelle\", \"nouveaux\", \"nouvelles\", \"vieux\", \"vieil\", \"vieille\", \"vieilles\", \"beau\", \"bel\", \"belle\", \"belles\", \"bon\", \"bons\", \"bonne\", \"bonnes\", \"grand\", \"grande\", \"grands\", \"grandes\", \"haut\", \"hauts\", \"haute\", \"hautes\", \"petit\", \"petite\", \"petits\", \"petites\", \"meilleur\", \"meilleurs\", \"meilleure\", \"meilleures\", \"joli\", \"jolis\", \"jolie\", \"jolies\", \"gros\", \"grosse\", \"grosses\", \"mauvais\", \"mauvaise\", \"mauvaises\", \"dernier\", \"derniers\", \"dernière\", \"dernières\"];\nvar interjections = [\"ah\", \"ha\", \"oh\", \"ho\", \"bis\", \"plouf\", \"vlan\", \"ciel\", \"pouf\", \"paf\", \"crac\", \"hurrah\", \"allo\", \"stop\", \"bravo\", \"ô\", \"eh\", \"hé\", \"aïe\", \"oef\", \"ahi\", \"fi\", \"zest\", \"hem\", \"holà\", \"chut\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"mg\", \"g\", \"kg\", \"ml\", \"dl\", \"cl\", \"l\", \"grammes\", \"gram\", \"once\", \"onces\", \"oz\", \"lbs\", \"càc\", \"cc\", \"càd\", \"càs\", \"càt\", \"cd\", \"cs\", \"ct\"];\nvar timeWords = [\"minute\", \"minutes\", \"heure\", \"heures\", \"journée\", \"journées\", \"semaine\", \"semaines\", \"mois\", \"année\", \"années\", \"aujourd'hui\", \"demain\", \"hier\", \"après-demain\", \"avant-hier\"];\nvar vagueNouns = [\"chose\", \"choses\", \"façon\", \"façons\", \"pièce\", \"pièces\", \"truc\", \"trucs\", \"fois\", \"cas\", \"aspect\", \"aspects\", \"objet\", \"objets\", \"idée\", \"idées\", \"thème\", \"thèmes\", \"sujet\", \"sujets\", \"personnes\", \"manière\", \"manières\", \"sorte\", \"sortes\"];\nvar miscellaneous = [\"ne\", \"oui\", \"d'accord\", \"amen\", \"euro\", \"euros\", \"etc\"];\nvar titlesPreceding = [\"mme\", \"mmes\", \"mlle\", \"mlles\", \"mm\", \"dr\", \"pr\"];\nvar titlesFollowing = [\"jr\", \"sr\"];\nmodule.exports = function () {\n  return {\n    // These word categories are filtered at the ending of word combinations.\n    filteredAtEnding: [].concat(ordinalNumerals, otherAuxiliariesInfinitive, delexicalizedVerbsInfinitive, copulaInfinitive, interviewVerbsInfinitive, generalAdjectivesAdverbsPreceding),\n    // These word categories are filtered at the beginning of word combinations.\n    filteredAtBeginning: generalAdjectivesAdverbs,\n    // These word categories are filtered at the beginning and ending of word combinations.\n    filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),\n    // These word categories are filtered everywhere within word combinations.\n    filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, personalPronounsStressed, reflexivePronouns, interjections, cardinalNumerals, copula, interviewVerbs, otherAuxiliaries, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeAdjectives, relativePronouns, locativeAdverbs, miscellaneous, pronominalAdverbs, recipeWords, timeWords, vagueNouns),\n    // These word categories cannot directly precede a passive participle.\n    cannotDirectlyPrecedePassiveParticiple: [].concat(articles, prepositions, personalPronounsStressed, personalPronounsAccusative, possessivePronouns, reflexivePronouns, indefinitePronouns, interrogativeProAdverbs, interrogativeAdjectives, cardinalNumerals, ordinalNumerals, delexicalizedVerbs, interviewVerbs, delexicalizedVerbsInfinitive),\n    // These word categories cannot intervene between an auxiliary and a corresponding passive participle.\n    cannotBeBetweenPassiveAuxiliaryAndParticiple: [].concat(otherAuxiliaries, otherAuxiliariesInfinitive),\n    // This export contains all of the above words.\n    all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, personalPronounsNominative, personalPronounsAccusative, relativePronouns, quantifiers, indefinitePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, otherAuxiliaries, otherAuxiliariesInfinitive, interrogativeAdjectives, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, interviewVerbsInfinitive, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, generalAdjectivesAdverbsPreceding, recipeWords, vagueNouns, miscellaneous, timeWords, titlesPreceding, titlesFollowing)\n  };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/functionWords.js\n// module id = 1109\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/functionWords.js?");

/***/ }),
/* 1110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar filteredPassiveAuxiliaries = __webpack_require__(1111)().filteredAuxiliaries;\nvar notFilteredPassiveAuxiliaries = __webpack_require__(1111)().notFilteredAuxiliaries;\nvar transitionWords = __webpack_require__(1242)().singleWords;\n/**\n * Returns an object with exceptions for the prominent words researcher\n * @returns {Object} The object filled with exception arrays.\n */\nvar articles = [\"the\", \"an\", \"a\"];\nvar cardinalNumerals = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\", \"hundred\", \"hundreds\", \"thousand\", \"thousands\", \"million\", \"millions\", \"billion\", \"billions\"];\nvar ordinalNumerals = [\"first\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\", \"seventh\", \"eighth\", \"ninth\", \"tenth\", \"eleventh\", \"twelfth\", \"thirteenth\", \"fourteenth\", \"fifteenth\", \"sixteenth\", \"seventeenth\", \"eighteenth\", \"nineteenth\", \"twentieth\"];\nvar personalPronounsNominative = [\"i\", \"you\", \"he\", \"she\", \"it\", \"we\", \"they\"];\nvar personalPronounsAccusative = [\"me\", \"him\", \"us\", \"them\"];\nvar demonstrativePronouns = [\"this\", \"that\", \"these\", \"those\"];\nvar possessivePronouns = [\"my\", \"your\", \"his\", \"her\", \"its\", \"their\", \"our\", \"mine\", \"yours\", \"hers\", \"theirs\", \"ours\"];\nvar quantifiers = [\"all\", \"some\", \"many\", \"lot\", \"lots\", \"ton\", \"tons\", \"bit\", \"no\", \"every\", \"enough\", \"little\", \"much\", \"more\", \"most\", \"plenty\", \"several\", \"few\", \"fewer\", \"kind\", \"kinds\"];\nvar reflexivePronouns = [\"myself\", \"yourself\", \"himself\", \"herself\", \"itself\", \"oneself\", \"ourselves\", \"yourselves\", \"themselves\"];\nvar indefinitePronouns = [\"none\", \"nobody\", \"everyone\", \"everybody\", \"someone\", \"somebody\", \"anyone\", \"anybody\", \"nothing\", \"everything\", \"something\", \"anything\", \"each\", \"other\", \"whatever\", \"whichever\", \"whoever\", \"whomever\", \"whomsoever\", \"whosoever\", \"others\", \"neither\", \"both\", \"either\", \"any\", \"such\"];\nvar indefinitePronounsPossessive = [\"one's\", \"nobody's\", \"everyone's\", \"everybody's\", \"someone's\", \"somebody's\", \"anyone's\", \"anybody's\", \"nothing's\", \"everything's\", \"something's\", \"anything's\", \"whoever's\", \"others'\", \"other's\", \"another's\", \"neither's\", \"either's\"];\nvar interrogativeDeterminers = [\"which\", \"what\", \"whose\"];\nvar interrogativePronouns = [\"who\", \"whom\"];\nvar interrogativeProAdverbs = [\"where\", \"how\", \"why\", \"whether\", \"wherever\", \"whyever\", \"wheresoever\", \"whensoever\", \"howsoever\", \"whysoever\", \"whatsoever\", \"whereso\", \"whomso\", \"whenso\", \"howso\", \"whyso\", \"whoso\", \"whatso\"];\nvar pronominalAdverbs = [\"therefor\", \"therein\", \"hereby\", \"hereto\", \"wherein\", \"therewith\", \"herewith\", \"wherewith\", \"thereby\"];\nvar locativeAdverbs = [\"there\", \"here\", \"whither\", \"thither\", \"hither\", \"whence\", \"thence\"];\nvar adverbialGenitives = [\"always\", \"once\", \"twice\", \"thrice\"];\nvar otherAuxiliaries = [\"can\", \"cannot\", \"can't\", \"could\", \"couldn't\", \"could've\", \"dare\", \"dares\", \"dared\", \"do\", \"don't\", \"does\", \"doesn't\", \"did\", \"didn't\", \"done\", \"have\", \"haven't\", \"had\", \"hadn't\", \"has\", \"hasn't\", \"i've\", \"you've\", \"we've\", \"they've\", \"i'd\", \"you'd\", \"he'd\", \"she'd\", \"it'd\", \"we'd\", \"they'd\", \"would\", \"wouldn't\", \"would've\", \"may\", \"might\", \"must\", \"need\", \"needn't\", \"needs\", \"ought\", \"shall\", \"shalln't\", \"shan't\", \"should\", \"shouldn't\", \"will\", \"won't\", \"i'll\", \"you'll\", \"he'll\", \"she'll\", \"it'll\", \"we'll\", \"they'll\", \"there's\", \"there're\", \"there'll\", \"here's\", \"here're\", \"there'll\"];\nvar copula = [\"appear\", \"appears\", \"appeared\", \"become\", \"becomes\", \"became\", \"come\", \"comes\", \"came\", \"keep\", \"keeps\", \"kept\", \"remain\", \"remains\", \"remained\", \"stay\", \"stays\", \"stayed\", \"turn\", \"turns\", \"turned\"];\n// These verbs should only be included at the beginning of combinations.\nvar continuousVerbs = [\"doing\", \"daring\", \"having\", \"appearing\", \"becoming\", \"coming\", \"keeping\", \"remaining\", \"staying\", \"saying\", \"asking\", \"stating\", \"seeming\", \"letting\", \"making\", \"setting\", \"showing\", \"putting\", \"adding\", \"going\", \"using\", \"trying\", \"containing\"];\nvar prepositions = [\"in\", \"from\", \"with\", \"under\", \"throughout\", \"atop\", \"for\", \"on\", \"of\", \"to\", \"aboard\", \"about\", \"above\", \"abreast\", \"absent\", \"across\", \"adjacent\", \"after\", \"against\", \"along\", \"alongside\", \"amid\", \"mid\", \"among\", \"apropos\", \"apud\", \"around\", \"as\", \"astride\", \"at\", \"ontop\", \"afore\", \"tofore\", \"behind\", \"ahind\", \"below\", \"ablow\", \"beneath\", \"neath\", \"beside\", \"between\", \"atween\", \"beyond\", \"ayond\", \"by\", \"chez\", \"circa\", \"spite\", \"down\", \"except\", \"into\", \"less\", \"like\", \"minus\", \"near\", \"nearer\", \"nearest\", \"anear\", \"notwithstanding\", \"off\", \"onto\", \"opposite\", \"out\", \"outen\", \"over\", \"past\", \"per\", \"pre\", \"qua\", \"sans\", \"sauf\", \"sithence\", \"through\", \"thru\", \"truout\", \"toward\", \"underneath\", \"up\", \"upon\", \"upside\", \"versus\", \"via\", \"vis-à-vis\", \"without\", \"ago\", \"apart\", \"aside\", \"aslant\", \"away\", \"withal\", \"towards\", \"amidst\", \"amongst\", \"midst\", \"whilst\"];\n// Many prepositional adverbs are already listed as preposition.\nvar prepositionalAdverbs = [\"back\", \"within\", \"forward\", \"backward\", \"ahead\"];\nvar coordinatingConjunctions = [\"and\", \"or\", \"and/or\", \"yet\"];\n// 'sooner' is part of 'no sooner...than', 'just' is part of 'just as...so',\n// 'Only' is part of 'not only...but also'.\nvar correlativeConjunctions = [\"sooner\", \"just\", \"only\"];\nvar subordinatingConjunctions = [\"if\", \"even\"];\n// These verbs are frequently used in interviews to indicate questions and answers.\n// 'Claim','claims', 'state' and 'states' are not included, because these words are also nouns.\nvar interviewVerbs = [\"say\", \"says\", \"said\", \"claimed\", \"ask\", \"asks\", \"asked\", \"stated\", \"explain\", \"explains\", \"explained\", \"think\", \"thinks\", \"talks\", \"talked\", \"announces\", \"announced\", \"tells\", \"told\", \"discusses\", \"discussed\", \"suggests\", \"suggested\", \"understands\", \"understood\"];\n// These transition words were not included in the list for the transition word assessment for various reasons.\nvar additionalTransitionWords = [\"again\", \"definitely\", \"eternally\", \"expressively\", \"instead\", \"expressly\", \"immediately\", \"including\", \"instantly\", \"namely\", \"naturally\", \"next\", \"notably\", \"now\", \"nowadays\", \"ordinarily\", \"positively\", \"truly\", \"ultimately\", \"uniquely\", \"usually\", \"almost\", \"maybe\", \"probably\", \"granted\", \"initially\", \"too\", \"actually\", \"already\", \"e.g\", \"i.e\", \"often\", \"regularly\", \"simply\", \"optionally\", \"perhaps\", \"sometimes\", \"likely\", \"never\", \"ever\", \"else\", \"inasmuch\", \"provided\", \"currently\", \"incidentally\", \"elsewhere\", \"particular\", \"recently\", \"relatively\", \"f.i\", \"clearly\", \"apparently\"];\nvar intensifiers = [\"highly\", \"very\", \"really\", \"extremely\", \"absolutely\", \"completely\", \"totally\", \"utterly\", \"quite\", \"somewhat\", \"seriously\", \"fairly\", \"fully\", \"amazingly\"];\n/* These verbs convey little meaning. 'Show', 'shows', 'uses', 'meaning', 'set', 'sets'\n are not included, because these words could be relevant nouns.\n\n */\nvar delexicalizedVerbs = [\"seem\", \"seems\", \"seemed\", \"let\", \"let's\", \"lets\", \"make\", \"makes\", \"made\", \"want\", \"showed\", \"shown\", \"go\", \"goes\", \"went\", \"gone\", \"take\", \"takes\", \"took\", \"taken\", \"put\", \"puts\", \"use\", \"used\", \"try\", \"tries\", \"tried\", \"mean\", \"means\", \"meant\", \"called\", \"based\", \"add\", \"adds\", \"added\", \"contain\", \"contains\", \"contained\", \"consist\", \"consists\", \"consisted\", \"ensure\", \"ensures\", \"ensured\"];\n// These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.\n// Keyword combinations containing these adjectives/adverbs are fine.\nvar generalAdjectivesAdverbs = [\"new\", \"newer\", \"newest\", \"old\", \"older\", \"oldest\", \"previous\", \"good\", \"well\", \"better\", \"best\", \"big\", \"bigger\", \"biggest\", \"easy\", \"easier\", \"easiest\", \"fast\", \"faster\", \"fastest\", \"far\", \"hard\", \"harder\", \"hardest\", \"least\", \"own\", \"large\", \"larger\", \"largest\", \"long\", \"longer\", \"longest\", \"low\", \"lower\", \"lowest\", \"high\", \"higher\", \"highest\", \"regular\", \"simple\", \"simpler\", \"simplest\", \"small\", \"smaller\", \"smallest\", \"tiny\", \"tinier\", \"tiniest\", \"short\", \"shorter\", \"shortest\", \"main\", \"actual\", \"nice\", \"nicer\", \"nicest\", \"real\", \"same\", \"able\", \"certain\", \"usual\", \"so-called\", \"mainly\", \"mostly\", \"recent\", \"anymore\", \"complete\", \"lately\", \"possible\", \"commonly\", \"constantly\", \"continually\", \"directly\", \"easily\", \"nearly\", \"slightly\", \"somewhere\", \"estimated\", \"latest\", \"different\", \"similar\", \"widely\", \"bad\", \"worse\", \"worst\", \"great\", \"specific\", \"available\", \"average\", \"awful\", \"awesome\", \"basic\", \"beautiful\", \"busy\", \"current\", \"entire\", \"everywhere\", \"important\", \"major\", \"multiple\", \"normal\", \"necessary\", \"obvious\", \"partly\", \"special\", \"last\", \"early\", \"earlier\", \"earliest\", \"young\", \"younger\", \"youngest\", \"\"];\nvar interjections = [\"oh\", \"wow\", \"tut-tut\", \"tsk-tsk\", \"ugh\", \"whew\", \"phew\", \"yeah\", \"yea\", \"shh\", \"oops\", \"ouch\", \"aha\", \"yikes\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"tbs\", \"tbsp\", \"spk\", \"lb\", \"qt\", \"pk\", \"bu\", \"oz\", \"pt\", \"mod\", \"doz\", \"hr\", \"f.g\", \"ml\", \"dl\", \"cl\", \"l\", \"mg\", \"g\", \"kg\", \"quart\"];\nvar timeWords = [\"seconds\", \"minute\", \"minutes\", \"hour\", \"hours\", \"day\", \"days\", \"week\", \"weeks\", \"month\", \"months\", \"year\", \"years\", \"today\", \"tomorrow\", \"yesterday\"];\n// 'People' should only be removed in combination with 'some', 'many' and 'few' (and is therefore not yet included in the list below).\nvar vagueNouns = [\"thing\", \"things\", \"way\", \"ways\", \"matter\", \"case\", \"likelihood\", \"ones\", \"piece\", \"pieces\", \"stuff\", \"times\", \"part\", \"parts\", \"percent\", \"instance\", \"instances\", \"aspect\", \"aspects\", \"item\", \"items\", \"idea\", \"theme\", \"person\", \"instance\", \"instances\", \"detail\", \"details\", \"factor\", \"factors\", \"difference\", \"differences\"];\n// 'No' is already included in the quantifier list.\nvar miscellaneous = [\"not\", \"yes\", \"sure\", \"top\", \"bottom\", \"ok\", \"okay\", \"amen\", \"aka\", \"etc\", \"etcetera\", \"sorry\", \"please\"];\nvar titlesPreceding = [\"ms\", \"mss\", \"mrs\", \"mr\", \"dr\", \"prof\"];\nvar titlesFollowing = [\"jr\", \"sr\"];\nmodule.exports = function () {\n    return {\n        // These word categories are filtered at the ending of word combinations.\n        filteredAtEnding: [].concat(ordinalNumerals, continuousVerbs, generalAdjectivesAdverbs),\n        // These word categories are filtered at the beginning and ending of word combinations.\n        filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),\n        // These word categories are filtered everywhere within word combinations.\n        filteredAnywhere: [].concat(transitionWords, adverbialGenitives, personalPronounsNominative, personalPronounsAccusative, reflexivePronouns, interjections, cardinalNumerals, filteredPassiveAuxiliaries, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, miscellaneous, prepositionalAdverbs, pronominalAdverbs, recipeWords, timeWords, vagueNouns),\n        // These categories are used in the passive voice assessment. If they directly precede a participle, the sentence part is not passive.\n        cannotDirectlyPrecedePassiveParticiple: [].concat(articles, prepositions, demonstrativePronouns, possessivePronouns, ordinalNumerals, continuousVerbs, quantifiers),\n        /*\n        These categories are used in the passive voice assessment. If they appear between an auxiliary and a participle,\n        the sentence part is not passive.\n        */\n        cannotBeBetweenPassiveAuxiliaryAndParticiple: [].concat(otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs),\n        // This export contains all of the above words.\n        all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, personalPronounsNominative, personalPronounsAccusative, quantifiers, indefinitePronouns, continuousVerbs, indefinitePronounsPossessive, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, adverbialGenitives, prepositionalAdverbs, filteredPassiveAuxiliaries, notFilteredPassiveAuxiliaries, otherAuxiliaries, copula, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, titlesPreceding, titlesFollowing)\n    };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/functionWords.js\n// module id = 1110\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/functionWords.js?");

/***/ }),
/* 1111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// These auxiliaries are filtered from the beginning of word combinations in the prominent words.\n\nvar filteredAuxiliaries = [\"am\", \"is\", \"are\", \"was\", \"were\", \"been\", \"get\", \"gets\", \"got\", \"gotten\", \"be\", \"she's\", \"he's\", \"it's\", \"i'm\", \"we're\", \"they're\", \"you're\", \"isn't\", \"weren't\", \"wasn't\", \"that's\", \"aren't\"];\n// These auxiliaries are not filtered from the beginning of word combinations in the prominent words.\nvar notFilteredAuxiliaries = [\"being\", \"getting\", \"having\", \"what's\"];\nmodule.exports = function () {\n    return {\n        filteredAuxiliaries: filteredAuxiliaries,\n        notFilteredAuxiliaries: notFilteredAuxiliaries,\n        all: filteredAuxiliaries.concat(notFilteredAuxiliaries)\n    };\n};\n//# sourceMappingURL=auxiliaries.js.map\n//# sourceMappingURL=auxiliaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/auxiliaries.js\n// module id = 1111\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/auxiliaries.js?");

/***/ }),
/* 1112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transitionWords = __webpack_require__(1245)().singleWords;\n/**\n * Returns an array with exceptions for the prominent words researcher\n * @returns {Array} The array filled with exceptions.\n */\nvar articles = [\"el\", \"la\", \"los\", \"las\", \"un\", \"una\", \"unos\", \"unas\"];\n// \"Uno\" is already included in the articles.\nvar cardinalNumerals = [\"dos\", \"tres\", \"cuatro\", \"cinco\", \"seis\", \"siete\", \"ocho\", \"nueve\", \"diez\", \"once\", \"doce\", \"trece\", \"catorce\", \"quince\", \"dieciseis\", \"diecisiete\", \"dieciocho\", \"diecinueve\", \"veinte\", \"cien\", \"centena\", \"mil\", \"millon\", \"millones\"];\nvar ordinalNumerals = [\"primera\", \"segunda\", \"tercera\", \"cuarto\", \"cuarta\", \"quinto\", \"quinta\", \"sexto\", \"sexta\", \"septimo\", \"septima\", \"octavo\", \"octava\", \"noveno\", \"novena\", \"décimo\", \"décima\", \"vigésimo\", \"vigésima\", \"primeros\", \"primeras\", \"segundos\", \"segundas\", \"terceros\", \"terceras\", \"cuartos\", \"cuartas\", \"quintos\", \"quintas\", \"sextos\", \"sextas\", \"septimos\", \"septimas\", \"octavos\", \"octavas\", \"novenos\", \"novenas\", \"décimos\", \"décimas\", \"vigésimos\", \"vigésimas\"];\nvar personalPronounsNominative = [\"yo\", \"tú\", \"él\", \"ella\", \"ello\", \"nosotros\", \"nosotras\", \"vosotros\", \"vosotras\", \"ustedes\", \"ellos\", \"ellas\"];\nvar personalPronounsAccusative = [\"me\", \"te\", \"lo\", \"se\", \"nos\", \"os\", \"les\"];\nvar personalPronounsPrepositional = [\"mí\", \"ti\", \"ud\", \"uds\", \"usted\", \"sí\"];\nvar personalPronounsComitative = [\"conmigo\", \"contigo\", \"consigo\"];\nvar demonstrativePronouns = [\"este\", \"ese\", \"aquel\", \"esta\", \"esa\", \"aquella\", \"estos\", \"esos\", \"aquellos\", \"estas\", \"esas\", \"aquellas\", \"esto\", \"eso\", \"aquello\"];\nvar possessivePronouns = [\"mi\", \"mis\", \"mío\", \"míos\", \"mía\", \"mías\", \"nuestro\", \"nuestros\", \"nuestra\", \"nuestras\", \"tuyo\", \"tuyos\", \"tuya\", \"tuyas\", \"tu\", \"tus\", \"vuestro\", \"vuestros\", \"vuestra\", \"vuestras\", \"suyo\", \"suyos\", \"suya\", \"suyas\", \"su\", \"sus\"];\nvar quantifiers = [\"bastante\", \"bastantes\", \"mucho\", \"muchas\", \"mucha\", \"muchos\", \"demasiado\", \"demasiada\", \"demasiados\", \"demasiadas\", \"poco\", \"poca\", \"pocos\", \"pocas\", \"demás\", \"otros\", \"otras\", \"todo\", \"toda\", \"todos\", \"todas\"];\nvar indefinitePronouns = [\"alguien\", \"algo\", \"algún\", \"alguno\", \"alguna\", \"algunos\", \"algunas\", \"nadie\", \"nada\", \"ningún\", \"ninguno\", \"ninguna\", \"ningunos\", \"ningunas\", \"tanto\", \"tantos\", \"tanta\", \"tantas\"];\nvar interrogativeDeterminers = [\"cuyas\", \"cual\"];\nvar interrogativePronouns = [\"cuyo\"];\n/*\n'Qué' is part of 'por qué' ('why'). The combination 'quien sea' ('whoever') is separated into two entries: 'quien' and 'sea'.\n'quira' is part of 'cuando quiera' ('whenever').\n */\nvar interrogativeProAdverbs = [\"comoquiera\", \"cualesquiera\", \"cualquier\", \"cuanta\", \"cuantas\", \"cuanto\", \"cuantos\", \"cuál\", \"cuáles\", \"cuánta\", \"cuántas\", \"cuánto\", \"cuántos\", \"cómo\", \"dondequiera\", \"dónde\", \"quien\", \"quienes\", \"quienquiera\", \"quién\", \"quiénes\", \"qué\"];\nvar locativeAdverbs = [\"allí\", \"ahí\", \"allá\", \"aquí\", \"acá\", \"adónde\", \"delante\", \"detrás\", \"debajo\", \"adelante\", \"atrás\", \"adentro\", \"afuera\"];\nvar otherAuxiliaries = [\"he\", \"has\", \"ha\", \"hay\", \"hemos\", \"habéis\", \"han\", \"hube\", \"hubiste\", \"hubo\", \"hubimos\", \"hubisteis\", \"hubieron\", \"había\", \"habías\", \"habíamos\", \"habíais\", \"habían\", \"habría\", \"habrías\", \"habríais\", \"habrían\", \"habré\", \"habrás\", \"habrá\", \"habremos\", \"habréis\", \"habrán\", \"haya\", \"hayas\", \"hayamos\", \"hayáis\", \"hayan\", \"hubiera\", \"hubieras\", \"hubiéramos\", \"hubierais\", \"hubieran\", \"hubiese\", \"hubieses\", \"hubiésemos\", \"hubieseis\", \"hubiesen\", \"hubiere\", \"hubieres\", \"hubiéremos\", \"hubiereis\", \"hubieren\", \"habed\", \"habido\", \"debo\", \"debes\", \"debe\", \"debemos\", \"debéis\", \"deben\", \"debí\", \"debiste\", \"debió\", \"debimos\", \"debisteis\", \"debieron\", \"debía\", \"debías\", \"debíamos\", \"debíais\", \"debían\", \"debería\", \"deberías\", \"deberíamos\", \"deberíais\", \"deberían\", \"deberé\", \"deberás\", \"deberá\", \"deberemos\", \"deberéis\", \"deberán\", \"deba\", \"debas\", \"debamos\", \"debáis\", \"deban\", \"debiera\", \"debieras\", \"debiéramos\", \"debierais\", \"debieran\", \"debiese\", \"debieses\", \"debiésemos\", \"debieseis\", \"debiesen\", \"debiere\", \"debieres\", \"debiéremos\", \"debiereis\", \"debieren\", \"debed\", \"debido\", \"empiezo\", \"empiezas\", \"empieza\", \"empezáis\", \"empiezan\", \"empecé\", \"empezaste\", \"empezó\", \"empezamos\", \"empezasteis\", \"empezaron\", \"empezaba\", \"empezabas\", \"empezábamos\", \"empezabais\", \"empezaban\", \"empezaría\", \"empezarías\", \"empezaríamos\", \"empezaríais\", \"empezarían\", \"empezaré\", \"empezarás\", \"empezará\", \"empezaremos\", \"empezaréis\", \"empezarán\", \"empiece\", \"empieces\", \"empecemos\", \"empecéis\", \"empiecen\", \"empezara\", \"empezaras\", \"empezáramos\", \"empezarais\", \"empezaran\", \"empezase\", \"empezases\", \"empezásemos\", \"empezaseis\", \"empezasen\", \"empezare\", \"empezares\", \"empezáremos\", \"empezareis\", \"empezaren\", \"empezad\", \"empezado\", \"comienzo\", \"comienzas\", \"comienza\", \"comenzamos\", \"comenzáis\", \"comienzan\", \"comencé\", \"comenzaste\", \"comenzó\", \"comenzasteis\", \"comenzaron\", \"comenzaba\", \"comenzabas\", \"comenzábamos\", \"comenzabais\", \"comenzaban\", \"comenzaría\", \"comenzarías\", \"comenzaríamos\", \"comenzaríais\", \"comenzarían\", \"comenzaré\", \"comenzarás\", \"comenzará\", \"comenzaremos\", \"comenzaréis\", \"comenzarán\", \"comience\", \"comiences\", \"comencemos\", \"comencéis\", \"comiencen\", \"comenzara\", \"comenzaras\", \"comenzáramos\", \"comenzarais\", \"comenzaran\", \"comenzase\", \"comenzases\", \"comenzásemos\", \"comenzaseis\", \"comenzasen\", \"comenzare\", \"comenzares\", \"comenzáremos\", \"comenzareis\", \"comenzaren\", \"comenzad\", \"comenzado\", \"sigo\", \"sigues\", \"sigue\", \"seguimos\", \"seguis\", \"siguen\", \"seguí\", \"seguiste\", \"siguió\", \"seguisteis\", \"siguieron\", \"seguía\", \"seguías\", \"seguíamos\", \"seguíais\", \"seguían\", \"seguiría\", \"seguirías\", \"seguiríamos\", \"seguiríais\", \"seguirían\", \"seguiré\", \"seguirás\", \"seguirá\", \"seguiremos\", \"seguiréis\", \"seguirán\", \"siga\", \"sigas\", \"sigamos\", \"sigáis\", \"sigan\", \"siguiera\", \"siguieras\", \"siguiéramos\", \"siguierais\", \"siguieran\", \"siguiese\", \"siguieses\", \"siguiésemos\", \"siguieseis\", \"siguiesen\", \"siguiere\", \"siguieres\", \"siguiéremos\", \"siguiereis\", \"siguieren\", \"seguid\", \"seguido\", \"tengo\", \"tienes\", \"tiene\", \"tenemos\", \"tenéis\", \"tienen\", \"tuve\", \"tuviste\", \"tuvo\", \"tuvimos\", \"tuvisteis\", \"tuvieron\", \"tenía\", \"tenías\", \"teníamos\", \"teníais\", \"tenían\", \"tendría\", \"tendrías\", \"tendríamos\", \"tendríais\", \"tendrían\", \"tendré\", \"tendrás\", \"tendrá\", \"tendremos\", \"tendréis\", \"tendrán\", \"tenga\", \"tengas\", \"tengamos\", \"tengáis\", \"tengan\", \"tuviera\", \"tuvieras\", \"tuviéramos\", \"tuvierais\", \"tuvieran\", \"tuviese\", \"tuvieses\", \"tuviésemos\", \"tuvieseis\", \"tuviesen\", \"tuviere\", \"tuvieres\", \"tuviéremos\", \"tuviereis\", \"tuvieren\", \"ten\", \"tened\", \"tenido\", \"ando\", \"andas\", \"andamos\", \"andáis\", \"andan\", \"anduve\", \"anduviste\", \"anduvo\", \"anduvimos\", \"anduvisteis\", \"anduvieron\", \"andaba\", \"andabas\", \"andábamos\", \"andabais\", \"andaban\", \"andaría\", \"andarías\", \"andaríamos\", \"andaríais\", \"andarían\", \"andaré\", \"andarás\", \"andará\", \"andaremos\", \"andaréis\", \"andarán\", \"ande\", \"andes\", \"andemos\", \"andéis\", \"anden\", \"anduviera\", \"anduvieras\", \"anduviéramos\", \"anduvierais\", \"anduvieran\", \"anduviese\", \"anduvieses\", \"anduviésemos\", \"anduvieseis\", \"anduviesen\", \"anduviere\", \"anduvieres\", \"anduviéremos\", \"anduviereis\", \"anduvieren\", \"andad\", \"andado\", \"quedo\", \"quedas\", \"queda\", \"quedamos\", \"quedáis\", \"quedan\", \"quedé\", \"quedasteis\", \"quedaron\", \"quedaba\", \"quedabas\", \"quedábamos\", \"quedabais\", \"quedaban\", \"quedaría\", \"quedarías\", \"quedaríamos\", \"quedaríais\", \"quedarían\", \"quedaré\", \"quedarás\", \"quedará\", \"quedaremos\", \"quedaréis\", \"quedarán\", \"quede\", \"quedes\", \"quedemos\", \"quedéis\", \"queden\", \"quedara\", \"quedaras\", \"quedáramos\", \"quedarais\", \"quedaran\", \"quedase\", \"quedases\", \"quedásemos\", \"quedaseis\", \"quedasen\", \"quedare\", \"quedares\", \"quedáremos\", \"quedareis\", \"quedaren\", \"quedad\", \"quedado\", \"hallo\", \"hallas\", \"halla\", \"hallamos\", \"halláis\", \"hallan\", \"hallé\", \"hallaste\", \"halló\", \"hallasteis\", \"hallaron\", \"hallaba\", \"hallabas\", \"hallábamos\", \"hallabais\", \"hallaban\", \"hallaría\", \"hallarías\", \"hallaríamos\", \"hallaríais\", \"hallarían\", \"hallaré\", \"hallarás\", \"hallará\", \"hallaremos\", \"hallaréis\", \"hallarán\", \"halle\", \"halles\", \"hallemos\", \"halléis\", \"hallen\", \"hallara\", \"hallaras\", \"halláramos\", \"hallarais\", \"hallaran\", \"hallase\", \"hallases\", \"hallásemos\", \"hallaseis\", \"hallasen\", \"hallare\", \"hallares\", \"halláremos\", \"hallareis\", \"hallaren\", \"hallad\", \"hallado\", \"vengo\", \"vienes\", \"viene\", \"venimos\", \"venis\", \"vienen\", \"vine\", \"viniste\", \"vino\", \"vinimos\", \"vinisteis\", \"vinieron\", \"venía\", \"vanías\", \"verníamos\", \"veníais\", \"venían\", \"vendría\", \"vendrías\", \"vendríamos\", \"vendíais\", \"vendrían\", \"vendré\", \"vendrás\", \"vendrá\", \"vendremos\", \"vendréis\", \"vendrán\", \"venga\", \"vengas\", \"vengamos\", \"vengáis\", \"vengan\", \"viniera\", \"vinieras\", \"viniéramos\", \"vinierais\", \"vinieran\", \"viniese\", \"vinieses\", \"viniésemos\", \"vinieseis\", \"viniesen\", \"viniere\", \"vinieres\", \"viniéremos\", \"viniereis\", \"vinieren\", \"ven\", \"venid\", \"venido\", \"abro\", \"abres\", \"abre\", \"abrismos\", \"abrís\", \"abren\", \"abrí\", \"abriste\", \"abrió\", \"abristeis\", \"abrieron\", \"abría\", \"abrías\", \"abríais\", \"abrían\", \"abriría\", \"abrirías\", \"abriríamos\", \"abriríais\", \"abrirían\", \"abriré\", \"abrirás\", \"abrirá\", \"abriremos\", \"abriréis\", \"abrirán\", \"abra\", \"abras\", \"abramos\", \"abráis\", \"abran\", \"abriera\", \"abrieras\", \"abriéramos\", \"abrierais\", \"abrieran\", \"abriese\", \"abrieses\", \"abriésemos\", \"abrieseis\", \"abriesen\", \"abriere\", \"abrieres\", \"abriéremos\", \"abriereis\", \"abrieren\", \"abrid\", \"abierto\", \"voy\", \"vas\", \"va\", \"vamos\", \"vais\", \"van\", \"iba\", \"ibas\", \"íbamos\", \"ibais\", \"iban\", \"iría\", \"irías\", \"iríamos\", \"iríais\", \"irían\", \"iré\", \"irás\", \"irá\", \"iremos\", \"iréis\", \"irán\", \"vaya\", \"vayas\", \"vayamos\", \"vayáis\", \"vayan\", \"ve\", \"id\", \"ido\", \"acabo\", \"acabas\", \"acaba\", \"acabamos\", \"acabáis\", \"acaban\", \"acabé\", \"acabaste\", \"acabó\", \"acabasteis\", \"acabaron\", \"acababa\", \"acababas\", \"acabábamos\", \"acababais\", \"acababan\", \"acabaría\", \"acabarías\", \"acabaríamos\", \"acabaríais\", \"acabarían\", \"acabaré\", \"acabarás\", \"acabará\", \"acabaremos\", \"acabaréis\", \"acabarán\", \"acabe\", \"acabes\", \"acabemos\", \"acabéis\", \"acaben\", \"acabara\", \"acabaras\", \"acabáramos\", \"acabarais\", \"acabaran\", \"acabase\", \"acabases\", \"acabásemos\", \"acabaseis\", \"acabasen\", \"acabare\", \"acabares\", \"acabáremos\", \"acabareis\", \"acabaren\", \"acabad\", \"acabado\", \"llevo\", \"llevas\", \"lleva\", \"llevamos\", \"lleváis\", \"llevan\", \"llevé\", \"llevaste\", \"llevó\", \"llevasteis\", \"llevaron\", \"llevaba\", \"llevabas\", \"llevábamos\", \"llevabais\", \"llevaban\", \"llevaría\", \"llevarías\", \"llevaríamos\", \"llevaríais\", \"llevarían\", \"llevaré\", \"llevarás\", \"llevará\", \"llevaremos\", \"llevaréis\", \"llevarán\", \"lleve\", \"lleves\", \"llevemos\", \"llevéis\", \"lleven\", \"llevara\", \"llevaras\", \"lleváramos\", \"llevarais\", \"llevaran\", \"llevase\", \"llevases\", \"llevásemos\", \"llevaseis\", \"llevasen\", \"llevare\", \"llevares\", \"lleváremos\", \"llevareis\", \"llevaren\", \"llevad\", \"llevado\", \"alcanzo\", \"alcanzas\", \"alcanza\", \"alcanzamos\", \"alcanzáis\", \"alcanzan\", \"alcancé\", \"alcanzaste\", \"alcanzó\", \"alcanzasteis\", \"alcanzaron\", \"alcanzaba\", \"alcanzabas\", \"alcanzábamos\", \"alcanzabais\", \"alcanzaban\", \"alcanzaría\", \"alcanzarías\", \"alcanzaríamos\", \"alcanzaríais\", \"alcanzarían\", \"alcanzaré\", \"alcanzarás\", \"alcanzará\", \"alcanzaremos\", \"alcanzaréis\", \"alcanzarán\", \"alcance\", \"alcances\", \"alcancemos\", \"alcancéis\", \"alcancen\", \"alcanzara\", \"alcanzaras\", \"alcanzáramos\", \"alcanzarais\", \"alcanzaran\", \"alcanzase\", \"alcanzases\", \"alcanzásemos\", \"alcanzaseis\", \"alcanzasen\", \"alcanzare\", \"alcanzares\", \"alcanzáremos\", \"alcanzareis\", \"alcanzaren\", \"alcanzad\", \"alcanzado\", \"digo\", \"dices\", \"dice\", \"decimos\", \"decís\", \"dicen\", \"dije\", \"dijiste\", \"dijo\", \"dijimos\", \"dijisteis\", \"dijeron\", \"decía\", \"decías\", \"decíamos\", \"decíais\", \"decían\", \"diría\", \"dirías\", \"diríamos\", \"diríais\", \"dirían\", \"diré\", \"dirás\", \"dirá\", \"diremos\", \"diréis\", \"dirán\", \"diga\", \"digas\", \"digamos\", \"digáis\", \"digan\", \"dijera\", \"dijeras\", \"dijéramos\", \"dijerais\", \"dijeran\", \"dijese\", \"dijeses\", \"dijésemos\", \"dijeseis\", \"dijesen\", \"dijere\", \"dijeres\", \"dijéremos\", \"dijereis\", \"dijeren\", \"di\", \"decid\", \"dicho\", \"continúo\", \"continúas\", \"continúa\", \"continuamos\", \"continuáis\", \"continúan\", \"continué\", \"continuaste\", \"continuó\", \"continuasteis\", \"continuaron\", \"continuaba\", \"continuabas\", \"continuábamos\", \"continuabais\", \"continuaban\", \"continuaría\", \"continuarías\", \"continuaríamos\", \"continuaríais\", \"continuarían\", \"continuaré\", \"continuarás\", \"continuará\", \"continuaremos\", \"continuaréis\", \"continuarán\", \"continúe\", \"continúes\", \"continuemos\", \"continuéis\", \"continúen\", \"continuara\", \"continuaras\", \"continuáramos\", \"continuarais\", \"continuaran\", \"continuase\", \"continuases\", \"continuásemos\", \"continuaseis\", \"continuasen\", \"continuare\", \"continuares\", \"continuáremos\", \"continuareis\", \"continuaren\", \"continuad\", \"continuado\", \"resulto\", \"resultas\", \"resulta\", \"resultamos\", \"resultáis\", \"resultan\", \"resulté\", \"resultaste\", \"resultó\", \"resultasteis\", \"resultaron\", \"resultaba\", \"resultabas\", \"resultábamos\", \"resultabais\", \"resultaban\", \"resultaría\", \"resultarías\", \"resultaríamos\", \"resultaríais\", \"resultarían\", \"resultaré\", \"resultarás\", \"resultará\", \"resultaremos\", \"resultaréis\", \"resultarán\", \"resulte\", \"resultes\", \"resultemos\", \"resultéis\", \"resulten\", \"resultara\", \"resultaras\", \"resultáramos\", \"resultarais\", \"resultaran\", \"resultase\", \"resultases\", \"resultásemos\", \"resultaseis\", \"resultasen\", \"resultare\", \"resultares\", \"resultáremos\", \"resultareis\", \"resultaren\", \"resultad\", \"resultado\", \"puedo\", \"puedes\", \"puede\", \"podemos\", \"podéis\", \"pueden\", \"pude\", \"pudiste\", \"pudo\", \"pudimos\", \"pudisteis\", \"pudieron\", \"podía\", \"podías\", \"podíamos\", \"podíais\", \"podían\", \"podría\", \"podrías\", \"podríamos\", \"podríais\", \"podrían\", \"podré\", \"podrás\", \"podrá\", \"podremos\", \"podréis\", \"podrán\", \"pueda\", \"puedas\", \"podamos\", \"podáis\", \"puedan\", \"pudiera\", \"pudieras\", \"pudiéramos\", \"pudierais\", \"pudieran\", \"pudiese\", \"pudieses\", \"pudiésemos\", \"pudieseis\", \"pudiesen\", \"pudiere\", \"pudieres\", \"pudiéremos\", \"pudiereis\", \"pudieren\", \"poded\", \"podido\", \"quiero\", \"quieres\", \"quiere\", \"queremos\", \"queréis\", \"quieren\", \"quise\", \"quisiste\", \"quiso\", \"quisimos\", \"quisisteis\", \"quisieron\", \"quería\", \"querías\", \"queríamos\", \"queríais\", \"querían\", \"querría\", \"querrías\", \"querríamos\", \"querríais\", \"querrían\", \"querré\", \"querrás\", \"querrá\", \"querremos\", \"querréis\", \"querrán\", \"quiera\", \"quieras\", \"queramos\", \"queráis\", \"quieran\", \"quisiera\", \"quisieras\", \"quisiéramos\", \"quisierais\", \"quisieran\", \"quisiese\", \"quisieses\", \"quisiésemos\", \"quisieseis\", \"quisiesen\", \"quisiere\", \"quisieres\", \"quisiéremos\", \"quisiereis\", \"quisieren\", \"quered\", \"querido\", \"sabes\", \"sabe\", \"sabemos\", \"sabéis\", \"saben\", \"supe\", \"supiste\", \"supo\", \"supimos\", \"supisteis\", \"supieron\", \"sabía\", \"sabías\", \"sabíamos\", \"sabíais\", \"sabían\", \"sabría\", \"sabrías\", \"sabríamos\", \"sabríais\", \"sabrían\", \"sabré\", \"sabrás\", \"sabrá\", \"sabremos\", \"sabréis\", \"sabrán\", \"sepa\", \"sepas\", \"sepamos\", \"sepáis\", \"sepan\", \"supiera\", \"supieras\", \"supiéramos\", \"supierais\", \"supieran\", \"supiese\", \"supieses\", \"supiésemos\", \"supieseis\", \"supiesen\", \"supiere\", \"supieres\", \"supiéremos\", \"supiereis\", \"supieren\", \"sabed\", \"sabido\", \"suelo\", \"sueles\", \"suele\", \"solemos\", \"soléis\", \"suelen\", \"solí\", \"soliste\", \"solió\", \"solimos\", \"solisteis\", \"solieron\", \"solía\", \"solías\", \"solíamos\", \"solíais\", \"solían\", \"solería\", \"solerías\", \"soleríamos\", \"soleríais\", \"solerían\", \"soleré\", \"solerás\", \"solerá\", \"soleremos\", \"soleréis\", \"solerán\", \"suela\", \"suelas\", \"solamos\", \"soláis\", \"suelan\", \"soliera\", \"solieras\", \"soliéramos\", \"solierais\", \"solieran\", \"soliese\", \"solieses\", \"soliésemos\", \"solieseis\", \"soliesen\", \"soliere\", \"solieres\", \"soliéremos\", \"soliereis\", \"solieren\", \"soled\", \"solido\", \"necesito\", \"necesitas\", \"necesitamos\", \"necesitáis\", \"necesitan\", \"necesité\", \"necesitaste\", \"necesitó\", \"necesitasteis\", \"necesitaron\", \"necesitaba\", \"necesitabas\", \"necesitábamos\", \"necesitabais\", \"necesitaban\", \"necesitaría\", \"necesitarías\", \"necesitaríamos\", \"necesitaríais\", \"necesitarían\", \"necesitaré\", \"necesitarás\", \"necesitará\", \"necesitaremos\", \"necesitaréis\", \"necesitarán\", \"necesite\", \"necesites\", \"necesitemos\", \"necesitéis\", \"necesiten\", \"necesitara\", \"necesitaras\", \"necesitáramos\", \"necesitarais\", \"necesitaran\", \"necesitase\", \"necesitases\", \"necesitásemos\", \"necesitaseis\", \"necesitasen\", \"necesitare\", \"necesitares\", \"necesitáremos\", \"necesitareis\", \"necesitaren\", \"necesita\", \"necesitad\", \"necesitado\"];\nvar otherAuxiliariesInfinitive = [\"haber\", \"deber\", \"empezar\", \"comenzar\", \"seguir\", \"tener\", \"andar\", \"quedar\", \"hallar\", \"venir\", \"abrir\", \"ir\", \"acabar\", \"llevar\", \"alcanzar\", \"decir\", \"continuar\", \"resultar\", \"poder\", \"querer\", \"saber\", \"soler\", \"necesitar\"];\n// Estar is not used to form passives in Spanish.\nvar copulaEstar = [\"estoy\", \"estás\", \"está\", \"estamos\", \"estáis\", \"están\", \"estuve\", \"estuviste\", \"estuvo\", \"estuvimos\", \"estuvisteis\", \"estuvieron\", \"estuba\", \"estabas\", \"estábamos\", \"estabais\", \"estaban\", \"estraría\", \"estarías\", \"estaríamos\", \"estaríais\", \"estarían\", \"estaré\", \"estarás\", \"estará\", \"estaremos\", \"estaréis\", \"estarán\", \"esté\", \"estés\", \"estemos\", \"estéis\", \"estén\", \"estuviera\", \"estuviese\", \"estuvieras\", \"estuviéramos\", \"estuvierais\", \"estuvieran\", \"estuvieses\", \"estuviésemos\", \"estuvieseis\", \"estuviesen\", \"estuviere\", \"estuvieres\", \"estuviéremos\", \"estuviereis\", \"estuvieren\", \"estad\", \"estado\"];\n// Ser is the copula used to form passives in Spanish.\nvar copulaSer = [\"soy\", \"eres\", \"es\", \"somos\", \"sois\", \"son\", \"fui\", \"fuiste\", \"fuimos\", \"fuisteis\", \"fueron\", \"era\", \"eras\", \"éramos\", \"erais\", \"eran\", \"sería\", \"serías\", \"seríamos\", \"seríais\", \"serían\", \"seré\", \"serás\", \"seremos\", \"seréis\", \"serán\", \"sea\", \"seas\", \"seamos\", \"seáis\", \"sean\", \"fueras\", \"fuéramos\", \"fuerais\", \"fueran\", \"fuese\", \"fueses\", \"fuésemos\", \"fueseis\", \"fuesen\", \"fuere\", \"fueres\", \"fuéremos\", \"fuereis\", \"fueren\", \"sé\", \"sed\", \"sido\"];\nvar copulaEstarInfinitive = [\"estar\"];\nvar copulaSerInfinitive = [\"ser\"];\nvar prepositions = [\"a\", \"ante\", \"abajo\", \"adonde\", \"al\", \"allende\", \"alrededor\", \"amén\", \"antes\", \"arriba\", \"aun\", \"bajo\", \"cabe\", \"cabo\", \"con\", \"contigo\", \"contra\", \"de\", \"dejante\", \"del\", \"dentro\", \"desde\", \"donde\", \"durante\", \"en\", \"encima\", \"entre\", \"excepto\", \"fuera\", \"hacia\", \"hasta\", \"incluso\", \"mediante\", \"más\", \"opuesto\", \"par\", \"para\", \"próximo\", \"salvo\", \"según\", \"sin\", \"so\", \"sobre\", \"tras\", \"versus\", \"vía\"];\nvar prepositionalAdverbs = [\"cerca\"];\nvar coordinatingConjunctions = [\"o\", \"y\", \"entonces\", \"e\", \"u\", \"ni\", \"bien\", \"ora\"];\n// 'Igual' is part of 'igual...que'.\nvar correlativeConjunctions = [\"igual\"];\nvar subordinatingConjunctions = [\"apenas\", \"segun\", \"que\"];\n// These verbs are frequently used in interviews to indicate questions and answers.\n// 'Dijo' is already included in the otherAuxiliaries category.\nvar interviewVerbs = [\"apunto\", \"apunta\", \"confieso\", \"confiesa\", \"confesaba\", \"revelado\", \"revelo\", \"revela\", \"revelaba\", \"declarado\", \"declaro\", \"declara\", \"declaba\", \"señalo\", \"señala\", \"señalaba\", \"declaraba\", \"comento\", \"comenta\"];\n// These transition words were not included in the list for the transition word assessment for various reasons.\nvar additionalTransitionWords = [\"básicamente\", \"esencialmente\", \"primeramente\", \"siempre\", \"nunca\", \"ahora\", \"quizá\", \"acaso\", \"inclusive\", \"probablemente\", \"verdaderamente\", \"seguramente\", \"jamás\", \"obviamente\", \"indiscutiblement\", \"inmediatamente\", \"previamente\"];\nvar intensifiers = [\"muy\", \"tan\", \"completamente\", \"suficiente\", \"tal\", \"tales\"];\n// These verbs convey little meaning.\nvar delexicalizedVerbs = [\"hago\", \"haces\", \"hace\", \"hacemos\", \"hacéis\", \"hacen\", \"hice\", \"hiciste\", \"hizo\", \"hicimos\", \"hicisteis\", \"hicieron\", \"hacía\", \"hacías\", \"hacíamos\", \"hacíais\", \"hacían\", \"haría,\", \"harías\", \"haríamos\", \"haríais\", \"harían\", \"haré\", \"harás\", \"hará\", \"haremos\", \"haréis\", \"harán\", \"haga\", \"hagas\", \"hagamos\", \"hagáis\", \"hagan\", \"hiciera\", \"hicieras\", \"hiciéramos\", \"hicierais\", \"hicieran\", \"hiciese\", \"hicieses\", \"hiciésemos\", \"hicieseis\", \"hiciesen\", \"hiciere\", \"hicieres\", \"hiciéremos\", \"hiciereis\", \"hicieren\", \"haz\", \"haced\", \"hecho\", \"parezco\", \"pareces\", \"parece\", \"parecemos\", \"parecéis\", \"parecen\", \"parecí\", \"pareciste\", \"pareció\", \"parecimos\", \"parecisteis\", \"parecieron\", \"parecía\", \"parecías\", \"parecíamos\", \"parecíais\", \"parecían\", \"parecería\", \"parecerías\", \"pareceríamos\", \"pareceríais\", \"parecerían\", \"pareceré\", \"parecerás\", \"parecerá\", \"pareceremos\", \"pareceréis\", \"parecerán\", \"parezca\", \"parezcas\", \"parezcamos\", \"parezcáis\", \"parezcan\", \"pareciera\", \"parecieras\", \"pareciéramos\", \"parecierais\", \"parecieran\", \"pareciese\", \"parecieses\", \"pareciésemos\", \"parecieseis\", \"pareciesen\", \"pareciere\", \"parecieres\", \"pareciéremos\", \"pareciereis\", \"parecieren\", \"pareced\", \"parecido\"];\nvar delexicalizedVerbsInfinitive = [\"hacer\", \"parecer\"];\n// These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.\n// Keyword combinations containing these adjectives/adverbs are fine.\nvar generalAdjectivesAdverbs = [\"enfrente\", \"mejor\", \"peor\", \"menos\", \"claro\", \"bueno\", \"nuevo\", \"nueva\", \"nuevos\", \"nuevas\", \"viejo\", \"viejos\", \"vieja\", \"viejas\", \"anterior\", \"grande\", \"gran\", \"grandes\", \"mayores\", \"fácil\", \"fáciles\", \"rápido\", \"rápida\", \"rápidos\", \"rápidas\", \"lejos\", \"lejas\", \"difícil\", \"difíciles\", \"propio\", \"propios\", \"propia\", \"propias\", \"largo\", \"larga\", \"largos\", \"largas\", \"bajos\", \"baja\", \"bajas\", \"alto\", \"alta\", \"altos\", \"altas\", \"regular\", \"regulares\", \"normal\", \"pequeño\", \"pequeña\", \"pequeños\", \"pequeñas\", \"diminuta\", \"diminuto\", \"diminutas\", \"diminutos\", \"chiquitito\", \"chiquititos\", \"chiquitita\", \"chiquititas\", \"corta\", \"corto\", \"cortas\", \"cortos\", \"principal\", \"principales\", \"mismo\", \"mismos\", \"misma\", \"mismas\", \"capaz\", \"capaces\", \"cierta\", \"cierto\", \"ciertas\", \"ciertos\", \"llamado\", \"llamada\", \"llamados\", \"llamadas\", \"mayormente\", \"reciente\", \"recientes\", \"completa\", \"completo\", \"completas\", \"completos\", \"absoluta\", \"absoluto\", \"absolutas\", \"absolutos\", \"últimamente\", \"posible\", \"común\", \"comúnes\", \"comúnmente\", \"constantemente\", \"continuamente\", \"directamente\", \"fácilmente\", \"casi\", \"ligeramente\", \"estima\", \"estimada\", \"estimado\", \"aproximada\", \"aproximadamente\", \"última\", \"últimas\", \"último\", \"últimos\", \"diferente\", \"diferentes\", \"similar\", \"mal\", \"malo\", \"malos\", \"mala\", \"malas\", \"perfectamente\", \"excelente\", \"final\", \"general\"];\nvar interjections = [\"ah\", \"eh\", \"ejem\", \"ele\", \"achís\", \"adiós\", \"agur\", \"ajá\", \"ajajá\", \"ala\", \"alá\", \"albricias\", \"aleluya\", \"alerta\", \"alirón\", \"aló\", \"amalaya\", \"ar\", \"aro\", \"arrarray\", \"arre\", \"arsa\", \"atatay\", \"aúpa\", \"ax\", \"ay\", \"ayayay\", \"bah\", \"banzai\", \"barajo\", \"bla\", \"bravo\", \"buf\", \"bum\", \"ca\", \"caguendiós\", \"canastos\", \"caracho\", \"caracoles\", \"carajo\", \"caramba\", \"carape\", \"caray\", \"cáscaras\", \"cáspita\", \"cataplum\", \"ce\", \"chao\", \"chau\", \"che\", \"chis\", \"chist\", \"chitón\", \"cho\", \"chucho\", \"chus\", \"cielos\", \"clo\", \"coche\", \"cochi\", \"cojones\", \"concho\", \"coño\", \"córcholis\", \"cuchí\", \"cuidado\", \"cuz\", \"demonio\", \"demontre\", \"despacio\", \"diablo\", \"diantre\", \"dios\", \"ea\", \"epa\", \"equilicuá\", \"estúpido\", \"eureka\", \"evohé\", \"exacto\", \"fantástico\", \"firmes\", \"fo\", \"forte\", \"gua\", \"gualá\", \"guarte\", \"guay\", \"hala\", \"hale\", \"he\", \"hi\", \"hin\", \"hola\", \"hopo\", \"huesque\", \"huiche\", \"huichó\", \"huifa\", \"hurra\", \"huy\", \"ja\", \"jajajá\", \"jajay\", \"jaque\", \"jau\", \"jo\", \"jobar\", \"joder\", \"jolín\", \"jopo\", \"leñe\", \"listo\", \"malhayas\", \"mamola\", \"mecachis\", \"miéchica\", \"mondo\", \"moste\", \"mutis\", \"nanay\", \"narices\", \"oh\", \"ojalá\", \"ojo\", \"okay\", \"ole\", \"olé\", \"órdiga\", \"oste\", \"ostras\", \"ox\", \"oxte\", \"paf\", \"pardiez\", \"paso\", \"pucha\", \"puf\", \"puff\", \"pumba\", \"puñeta\", \"quia\", \"quiúbole\", \"recórcholis\", \"rediez\", \"rediós\", \"salve\", \"sanseacabó\", \"sniff\", \"socorro\", \"ta\", \"tararira\", \"tate\", \"tururú\", \"uf\", \"uh\", \"ui\", \"upa\", \"uste\", \"uy\", \"victoria\", \"vítor\", \"viva\", \"za\", \"zambomba\", \"zapateta\", \"zape\", \"zas\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"kg\", \"mg\", \"gr\", \"g\", \"km\", \"m\", \"l\", \"ml\", \"cl\"];\nvar timeWords = [\"minuto\", \"minutos\", \"hora\", \"horas\", \"día\", \"días\", \"semana\", \"semanas\", \"mes\", \"meses\", \"año\", \"años\", \"hoy\", \"mañana\", \"ayer\"];\n// 'People' should only be removed in combination with 'some', 'many' and 'few' (and is therefore not yet included in the list below).\nvar vagueNouns = [\"cosa\", \"cosas\", \"manera\", \"maneras\", \"caso\", \"casos\", \"pieza\", \"piezas\", \"vez\", \"veces\", \"parte\", \"partes\", \"porcentaje\", \"instancia\", \"aspecto\", \"aspectos\", \"punto\", \"puntos\", \"objeto\", \"objectos\", \"persona\", \"personas\"];\nvar miscellaneous = [\"no\", \"euros\"];\nvar titlesPreceding = [\"sra\", \"sras\", \"srta\", \"sr\", \"sres\", \"dra\", \"dr\", \"profa\", \"prof\"];\nvar titlesFollowing = [\"jr\", \"sr\"];\nmodule.exports = function () {\n    return {\n        // These word categories are filtered at the beginning of word combinations.\n        filteredAtBeginning: generalAdjectivesAdverbs,\n        // These word categories are filtered at the ending of word combinations.\n        filteredAtEnding: [].concat(ordinalNumerals, otherAuxiliariesInfinitive, copulaEstarInfinitive, copulaSerInfinitive, delexicalizedVerbsInfinitive),\n        // These word categories are filtered at the beginning and ending of word combinations.\n        filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),\n        // These word categories are filtered everywhere within word combinations.\n        filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, personalPronounsComitative, interjections, cardinalNumerals, otherAuxiliaries, copulaEstar, copulaSer, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, miscellaneous, prepositionalAdverbs, recipeWords, timeWords, vagueNouns),\n        // These word categories cannot directly precede a passive participle.\n        cannotDirectlyPrecedePassiveParticiple: [].concat(articles, prepositions, personalPronounsAccusative, possessivePronouns, indefinitePronouns, interrogativeProAdverbs, cardinalNumerals, ordinalNumerals, delexicalizedVerbs, delexicalizedVerbsInfinitive, interviewVerbs, interrogativeDeterminers, interrogativePronouns, personalPronounsComitative, personalPronounsPrepositional, prepositionalAdverbs),\n        // These word categories cannot intervene between an auxiliary and a corresponding passive participle.\n        cannotBeBetweenPassiveAuxiliaryAndParticiple: [].concat(copulaEstar, copulaEstarInfinitive),\n        // This export contains all of the above words.\n        all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, personalPronounsNominative, personalPronounsComitative, personalPronounsPrepositional, personalPronounsAccusative, quantifiers, indefinitePronouns, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, prepositionalAdverbs, otherAuxiliaries, otherAuxiliariesInfinitive, copulaEstar, copulaSer, copulaEstarInfinitive, copulaSerInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, titlesPreceding, titlesFollowing)\n    };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/functionWords.js\n// module id = 1112\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/functionWords.js?");

/***/ }),
/* 1113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transitionWords = __webpack_require__(1247)().singleWords;\n/**\n * Returns an object with exceptions for the prominent words researcher.\n * @returns {Object} The object filled with exception arrays.\n */\nvar articles = [\"il\", \"i\", \"la\", \"le\", \"lo\", \"gli\", \"un\", \"uno\", \"una\"];\nvar cardinalNumerals = [\"due\", \"tre\", \"quattro\", \"cinque\", \"sette\", \"otto\", \"nove\", \"dieci\", \"undici\", \"dodici\", \"tredici\", \"quattordici\", \"quindici\", \"sedici\", \"diciassette\", \"diciotto\", \"diciannove\", \"venti\", \"cento\", \"mille\", \"mila\", \"duemila\", \"tremila\", \"quattromila\", \"cinquemila\", \"seimila\", \"settemila\", \"ottomila\", \"novemila\", \"diecimila\", \"milione\", \"milioni\", \"miliardo\", \"miliardi\"];\nvar ordinalNumerals = [\"prima\", \"primi\", \"prime\", \"secondo\", \"seconda\", \"secondi\", \"seconde\", \"terzo\", \"terza\", \"terzi\", \"terze\", \"quarto\", \"quarta\", \"quarti\", \"quarte\", \"quinto\", \"quinta\", \"quinti\", \"quinte\", \"sesto\", \"sesta\", \"sesti\", \"seste\", \"settimo\", \"settima\", \"settimi\", \"settime\", \"ottavo\", \"ottava\", \"ottavi\", \"ottave\", \"nono\", \"nona\", \"noni\", \"none\", \"decimo\", \"decima\", \"decimi\", \"decime\", \"undicesimo\", \"undicesima\", \"undicesimi\", \"undicesime\", \"dodicesimo\", \"dodicesima\", \"dodicesimi\", \"dodicesime\", \"tredicesimo\", \"tredicesima\", \"tredicesimi\", \"tredicesime\", \"quattordicesimo\", \"quattordicesima\", \"quattordicesimi\", \"quattordicesime\", \"quindicesimo\", \"quindicesima\", \"quindicesimi\", \"quindicesime\", \"sedicesimo\", \"sedicesima\", \"sedicesimi\", \"sedicesime\", \"diciassettesimo\", \"diciassettesima\", \"diciassettesimi\", \"diciassettesime\", \"diciannovesimo\", \"diciannovesima\", \"diciannovesimi\", \"diciannovesime\", \"ventesimo\", \"ventesima\", \"ventesimi\", \"ventesime\"];\nvar personalPronounsNominative = [\"io\", \"tu\", \"egli\", \"esso\", \"lui\", \"ella\", \"essa\", \"lei\", \"noi\", \"voi\", \"essi\", \"esse\", \"loro\"];\n// 'La' and 'le' are already included in the list of articles.\nvar personalPronounsAccusative = [\"mi\", \"ti\", \"si\", \"ci\", \"vi\", \"li\", \"me\", \"te\", \"se\", \"glie\", \"glielo\", \"gliela\", \"glieli\", \"gliele\", \"gliene\", \"ce\", \"ve\"];\nvar personalPronounsPrepositional = [\"sé\"];\nvar demonstrativePronouns = [\"ciò\", \"codesto\", \"codesta\", \"codesti\", \"codeste\", \"colei\", \"colui\", \"coloro\", \"costei\", \"costui\", \"costoro\", \"medesimo\", \"medesima\", \"medesimi\", \"medesime\", \"questo\", \"questa\", \"questi\", \"queste\", \"quello\", \"quella\", \"quelli\", \"quelle\", \"quel\", \"quei\", \"quegli\"];\nvar possessivePronouns = [\"mio\", \"mia\", \"miei\", \"mie\", \"tuo\", \"tua\", \"tuoi\", \"tue\", \"suo\", \"sua\", \"suoi\", \"sue\", \"nostro\", \"nostra\", \"nostri\", \"nostre\", \"vostro\", \"vostra\", \"vostri\", \"vostre\"];\n// Already in the list of transition words: appena.\nvar quantifiers = [\"affatto\", \"alcun\", \"alcuna\", \"alcune\", \"alcuni\", \"alcuno\", \"bastantemente\", \"grandemente\", \"massimamente\", \"meno\", \"minimamente\", \"molta\", \"molte\", \"molti\", \"moltissimo\", \"molto\", \"nessun\", \"nessuna\", \"nessuno\", \"niente\", \"nulla\", \"ogni\", \"più\", \"po'\", \"poca\", \"poche\", \"pochi\", \"poco\", \"pochissime\", \"pochissimi\", \"qualche\", \"qualsiasi\", \"qualunque\", \"quintali\", \"rara\", \"rarissima\", \"rarissimo\", \"raro\", \"spesso\", \"spessissimo\", \"sufficientemente\", \"taluno\", \"taluna\", \"taluni\", \"talune\", \"tanta\", \"tante\", \"tanti\", \"tantissime\", \"tantissimi\", \"tanto\", \"tonnellate\", \"troppa\", \"troppe\", \"troppi\", \"troppo\", \"tutta\", \"tutte\", \"tutti\", \"tutto\"];\n// Already in the quantifier list: alcuno, molto, nessuno, poco, taluno tanto, troppo, tutto, nulla, niente.\nvar indefinitePronouns = [\"alcunché\", \"alcunchè\", \"altro\", \"altra\", \"altri\", \"altre\", \"certa\", \"certi\", \"certe\", \"checché\", \"checchè\", \"chicchessia\", \"chiunque\", \"ciascuno\", \"ciascuna\", \"ciascun\", \"diverso\", \"diversa\", \"diversi\", \"diverse\", \"parecchio\", \"parecchia\", \"parecchi\", \"parecchie\", \"qualcosa\", \"qualcuno\", \"qualcuna\", \"vario\", \"varia\", \"vari\", \"varie\"];\nvar interrogativeDeterminers = [\"che\", \"cosa\", \"cui\", \"qual\", \"quale\", \"quali\"];\nvar interrogativePronouns = [\"chi\", \"quanta\", \"quante\", \"quanti\", \"quanto\"];\nvar interrogativeAdverbs = [\"com'è\", \"com'era\", \"com'erano\", \"donde\", \"d'onde\", \"dove\", \"dov'è\", \"dov'era\", \"dov'erano\", \"dovunque\"];\n// 'Ci' and 'vi' are already part of the list of personal pronouns.\nvar pronominalAdverbs = [\"ne\"];\n// 'Via' not included because of primary meaning 'street'.\nvar locativeAdverbs = [\"accanto\", \"altrove\", \"attorno\", \"dappertutto\", \"giù\", \"là\", \"laggiù\", \"lassù\", \"lì\", \"ovunque\", \"qua\", \"quaggiù\", \"quassù\", \"qui\"];\n// 'Essere' is already part of the otherAuxiliaries list.\nvar filteredPassiveAuxiliaries = [\"vengano\", \"vengo\", \"vengono\", \"veniamo\", \"veniate\", \"venimmo\", \"venisse\", \"venissero\", \"venissi\", \"venissimo\", \"veniste\", \"venisti\", \"venite\", \"veniva\", \"venivamo\", \"venivano\", \"venivate\", \"venivi\", \"venivo\", \"venne\", \"vennero\", \"venni\", \"verrà\", \"verrai\", \"verranno\", \"verrebbe\", \"verrebbero\", \"verrei\", \"verremmo\", \"verremo\", \"verreste\", \"verresti\", \"verrete\", \"verrò\", \"viene\", \"vieni\"];\nvar passiveAuxiliariesInfinitive = [\"venire\", \"venir\"];\nvar otherAuxiliaries = [\"abbi\", \"abbia\", \"abbiamo\", \"abbiano\", \"abbiate\", \"abbiente\", \"avemmo\", \"avendo\", \"avente\", \"avesse\", \"avessero\", \"avessi\", \"avessimo\", \"aveste\", \"avesti\", \"avete\", \"aveva\", \"avevamo\", \"avevano\", \"avevate\", \"avevi\", \"avevo\", \"avrà\", \"avrai\", \"avranno\", \"avrebbe\", \"avrebbero\", \"avrei\", \"avremmo\", \"avremo\", \"avreste\", \"avresti\", \"avrete\", \"avrò\", \"avuto\", \"ebbe\", \"ebbero\", \"ebbi\", \"ha\", \"hai\", \"hanno\", \"ho\", \"l'abbi\", \"l'abbia\", \"l'abbiamo\", \"l'abbiano\", \"l'abbiate\", \"l'abbiente\", \"l'avemmo\", \"l'avendo\", \"l'avente\", \"l'avesse\", \"l'avessero\", \"l'avessi\", \"l'avessimo\", \"l'aveste\", \"l'avesti\", \"l'avete\", \"l'aveva\", \"l'avevamo\", \"l'avevano\", \"l'avevate\", \"l'avevi\", \"l'avevo\", \"l'avrà\", \"l'avrai\", \"l'avranno\", \"l'avrebbe\", \"l'avrebbero\", \"l'avrei\", \"l'avremmo\", \"l'avremo\", \"l'avreste\", \"l'avresti\", \"l'avrete\", \"l'avrò\", \"l'avuto\", \"l'ebbe\", \"l'ebbero\", \"l'ebbi\", \"l'ha\", \"l'hai\", \"l'hanno\", \"l'ho\", \"possa\", \"possano\", \"possiamo\", \"possiate\", \"posso\", \"possono\", \"poté\", \"potei\", \"potemmo\", \"potendo\", \"potente\", \"poterono\", \"potesse\", \"potessero\", \"potessi\", \"potessimo\", \"poteste\", \"potesti\", \"potete\", \"potette\", \"potettero\", \"potetti\", \"poteva\", \"potevamo\", \"potevano\", \"potevate\", \"potevi\", \"potevo\", \"potrà\", \"potrai\", \"potranno\", \"potrebbe\", \"potrebbero\", \"potrei\", \"potremmo\", \"potremo\", \"potreste\", \"potresti\", \"potrete\", \"potrò\", \"potuto\", \"può\", \"puoi\", \"voglia\", \"vogliamo\", \"vogliano\", \"vogliate\", \"voglio\", \"vogliono\", \"volemmo\", \"volendo\", \"volente\", \"volesse\", \"volessero\", \"volessi\", \"volessimo\", \"voleste\", \"volesti\", \"volete\", \"voleva\", \"volevamo\", \"volevano\", \"volevate\", \"volevi\", \"volevo\", \"volle\", \"vollero\", \"volli\", \"voluto\", \"vorrà\", \"vorrai\", \"vorranno\", \"vorrebbe\", \"vorrebbero\", \"vorrei\", \"vorremmo\", \"vorremo\", \"vorreste\", \"vorresti\", \"vorrete\", \"vorrò\", \"vuoi\", \"vuole\", \"debba\", \"debbano\", \"debbono\", \"deva\", \"deve\", \"devi\", \"devo\", \"devono\", \"dobbiamo\", \"dobbiate\", \"dové\", \"dovei\", \"dovemmo\", \"dovendo\", \"doverono\", \"dovesse\", \"dovessero\", \"dovessi\", \"dovessimo\", \"doveste\", \"dovesti\", \"dovete\", \"dovette\", \"dovettero\", \"dovetti\", \"doveva\", \"dovevamo\", \"dovevano\", \"dovevate\", \"dovevi\", \"dovevo\", \"dovrà\", \"dovrai\", \"dovranno\", \"dovrebbe\", \"dovrebbero\", \"dovrei\", \"dovremmo\", \"dovremo\", \"dovreste\", \"dovresti\", \"dovrete\", \"dovrò\", \"dovuto\", \"sa\", \"sai\", \"sanno\", \"sapemmo\", \"sapendo\", \"sapesse\", \"sapessero\", \"sapessi\", \"sapessimo\", \"sapeste\", \"sapesti\", \"sapete\", \"sapeva\", \"sapevamo\", \"sapevano\", \"sapevate\", \"sapevi\", \"sapevo\", \"sappi\", \"sappia\", \"sappiamo\", \"sappiano\", \"sappiate\", \"saprà\", \"saprai\", \"sapranno\", \"saprebbe\", \"saprebbero\", \"saprei\", \"sapremmo\", \"sapremo\", \"sapreste\", \"sapresti\", \"saprete\", \"saprò\", \"saputo\", \"seppe\", \"seppero\", \"seppi\", \"so\", \"soglia\", \"sogliamo\", \"sogliano\", \"sogliate\", \"soglio\", \"sogliono\", \"solesse\", \"solessero\", \"solessi\", \"solessimo\", \"soleste\", \"solete\", \"soleva\", \"solevamo\", \"solevano\", \"solevate\", \"solevi\", \"solevo\", \"suoli\", \"sta\", \"stai\", \"stando\", \"stanno\", \"stante\", \"starà\", \"starai\", \"staranno\", \"staremo\", \"starete\", \"starò\", \"stava\", \"stavamo\", \"stavano\", \"stavate\", \"stavi\", \"stavo\", \"stemmo\", \"stessero\", \"stessimo\", \"steste\", \"stesti\", \"stette\", \"stettero\", \"stetti\", \"stia\", \"stiamo\", \"stiano\", \"stiate\", \"sto\"];\nvar otherAuxiliariesInfinitive = [\"avere\", \"l'avere\", \"aver\", \"l'aver\", \"potere\", \"poter\", \"volere\", \"voler\", \"dovere\", \"dover\", \"sapere\", \"saper\", \"solere\", \"stare\", \"star\"];\nvar copula = [\"è\", \"e'\", \"era\", \"erano\", \"eravamo\", \"eravate\", \"eri\", \"ero\", \"essendo\", \"essente\", \"fosse\", \"fossero\", \"fossi\", \"fossimo\", \"foste\", \"fosti\", \"fu\", \"fui\", \"fummo\", \"furono\", \"sarà\", \"sarai\", \"saranno\", \"sarebbe\", \"sarebbero\", \"sarei\", \"saremmo\", \"saremo\", \"sareste\", \"saresti\", \"sarete\", \"sarò\", \"sei\", \"sia\", \"siamo\", \"siano\", \"siate\", \"siete\", \"sii\", \"sono\", \"stata\", \"state\", \"stati\", \"stato\"];\nvar copulaInfinitive = [\"essere\", \"esser\"];\n/*\n'Verso' ('towards') not included because it can also mean 'verse'.\nAlready in other lists: malgrado, nonostante.\n */\nvar prepositions = [\"di\", \"del\", \"dello\", \"della\", \"dei\", \"degli\", \"delle\", \"a\", \"ad\", \"al\", \"allo\", \"alla\", \"ai\", \"agli\", \"alle\", \"da\", \"dal\", \"dallo\", \"dalla\", \"dai\", \"dagli\", \"dalle\", \"in\", \"nel\", \"nello\", \"nella\", \"nei\", \"negli\", \"nelle\", \"con\", \"col\", \"collo\", \"colla\", \"coi\", \"cogli\", \"colle\", \"su\", \"sul\", \"sullo\", \"sulla\", \"sui\", \"sugli\", \"sulle\", \"per\", \"pel\", \"pello\", \"pella\", \"pei\", \"pegli\", \"tra\", \"fra\", \"attraverso\", \"circa\", \"contro\", \"davanti\", \"dentro\", \"dietro\", \"entro\", \"escluso\", \"fuori\", \"insieme\", \"intorno\", \"lontano\", \"lungo\", \"mediante\", \"oltre\", \"presso\", \"rasente\", \"riguardo\", \"senza\", \"sopra\", \"sotto\", \"tramite\", \"vicino\"];\nvar coordinatingConjunctions = [\"e\", \"ed\", \"o\", \"oppure\"];\n/* '\nTale' from 'tale ... quale'.\n'Dall'altra' from 'da una parte... dall'altra'.\nAlready in other lists: vuoi...vuoi, tanto...quanto, quanto...quanto, ora...ora, non solo...ma anche, sia...sia, o...o,\npiù...meno, né...né, altrettanto...così, così...come.\n */\nvar correlativeConjunctions = [\"tale\", \"l'uno\", \"l'altro\", \"tali\", \"dall'altra\"];\n/*\nAlready in another list (transition words, interrogative adverbs, numerals, prepositions):\nperché, quando, mentre, appena [che], sebbene, fino, affinché, finché, dato [che], visto [che], benché,\ncome, prima [che], dopo, per, senza [che], di, sempre, nonostante, malgrado, così [che], in modo...da,\ntanto...da, con, dove, quanto, più...che, meno, peggio...che, meglio...di, se, che, di, a meno che, siccome,\nogni volta [che], anche se, cosicché, invece, bensì, [al] punto [che].\n'Modo' from 'in modgiacché o che'.\n'Volta' from 'una volta che.\nExcluded because of primary meaning: dal momento che, allo scopo di, a furia di ('fury', 'haste', 'rage'),\na forza di ('force'), a condizione che ('condition').\n*/\nvar subordinatingConjunctions = [\"anziché\", \"anzichè\", \"fuorché\", \"fuorchè\", \"giacché\", \"giacchè\", \"laddove\", \"modo\", \"ove\", \"qualora\", \"quantunque\", \"volta\"];\n/*\nThese verbs are frequently used in interviews to indicate questions and answers.\nNot included: 'legge' ('reads', but also: 'law'), 'letto' ('(has) read', but also: bed), 'precisa' ('states', but also: 'precise').\n */\nvar interviewVerbs = [\"dice\", \"dicono\", \"diceva\", \"dicevano\", \"disse\", \"dissero\", \"detto\", \"domanda\", \"domandano\", \"domandava\", \"domandavano\", \"domandò\", \"domandarono\", \"domandato\", \"afferma\", \"affermato\", \"aggiunge\", \"aggiunto\", \"ammette\", \"ammesso\", \"annuncia\", \"annunciato\", \"assicura\", \"assicurato\", \"chiede\", \"chiesto\", \"commentato\", \"conclude\", \"concluso\", \"continua\", \"continuato\", \"denuncia\", \"denunciato\", \"dichiara\", \"dichiarato\", \"esordisce\", \"esordito\", \"inizia\", \"iniziato\", \"precisato\", \"prosegue\", \"proseguito\", \"racconta\", \"raccontato\", \"recita\", \"recitato\", \"replica\", \"replicato\", \"risponde\", \"risposto\", \"rimarca\", \"rimarcato\", \"rivela\", \"rivelato\", \"scandisce\", \"scandito\", \"scrive\", \"scritto\", \"segnala\", \"segnalato\", \"sottolinea\", \"sottolineato\", \"spiega\", \"spiegato\"];\nvar interviewVerbsInfinitive = [\"affermare\", \"aggiungere\", \"ammettere\", \"annunciare\", \"assicurare\", \"chiedere\", \"commentare\", \"concludere\", \"continuare\", \"denunciare\", \"dichiarare\", \"esordire\", \"iniziare\", \"precisare\", \"proseguire\", \"raccontare\", \"recitare\", \"replicare\", \"rispondere\", \"rimarcare\", \"rivelare\", \"scandire\", \"scrivere\", \"segnalare\", \"sottolineare\", \"spiegare\"];\n/*\nThese transition words were not included in the list for the transition word assessment for various reasons.\n'Appunto' ('just', 'exactly') not included for the second meaning of 'note'.\n*/\nvar additionalTransitionWords = [\"eventualmente\", \"forse\", \"mai\", \"probabilmente\"];\nvar intensifiers = [\"addirittura\", \"assolutamente\", \"ben\", \"estremamente\", \"mica\", \"nemmeno\", \"quasi\"];\n// These verbs convey little meaning.\nvar delexicalizedVerbs = [\"fa\", \"fa'\", \"faccia\", \"facciamo\", \"facciano\", \"facciate\", \"faccio\", \"facemmo\", \"facendo\", \"facente\", \"facesse\", \"facessero\", \"facessi\", \"facessimo\", \"faceste\", \"facesti\", \"faceva\", \"facevamo\", \"facevano\", \"facevate\", \"facevi\", \"facevo\", \"fai\", \"fanno\", \"farà\", \"farai\", \"faranno\", \"farebbe\", \"farebbero\", \"farei\", \"faremmo\", \"faremo\", \"fareste\", \"faresti\", \"farete\", \"farò\", \"fate\", \"fatto\", \"fece\", \"fecero\", \"feci\", \"fo\"];\nvar delexicalizedVerbsInfinitive = [\"fare\"];\n/*\nThese adjectives and adverbs are so general, they should never be suggested as a (single) keyword.\n Keyword combinations containing these adjectives/adverbs are fine.\n */\nvar generalAdjectivesAdverbs = [\"anteriore\", \"anteriori\", \"precedente\", \"precedenti\", \"facile\", \"facili\", \"facilissimo\", \"facilissima\", \"facilissimi\", \"facilissime\", \"semplice\", \"semplici\", \"semplicissima\", \"semplicissimo\", \"semplicissimi\", \"semplicissime\", \"semplicemente\", \"rapido\", \"rapida\", \"rapidi\", \"rapide\", \"veloce\", \"veloci\", \"differente\", \"difficile\", \"difficili\", \"difficilissimo\", \"difficilissima\", \"difficilissimi\", \"difficilissime\", \"basso\", \"bassa\", \"bassi\", \"basse\", \"alto\", \"alta\", \"alti\", \"alte\", \"normale\", \"normali\", \"normalmente\", \"corto\", \"corta\", \"corti\", \"corte\", \"breve\", \"brevi\", \"recente\", \"recenti\", \"totale\", \"totali\", \"completo\", \"completa\", \"completi\", \"complete\", \"possibile\", \"possibili\", \"ultimo\", \"ultima\", \"ultimi\", \"ultime\", \"differenti\", \"simile\", \"simili\", \"prossimo\", \"prossima\", \"prossimi\", \"prossime\", \"giusto\", \"giusta\", \"giusti\", \"giuste\", \"giustamente\", \"cosiddetto\", \"bene\", \"meglio\", \"benissimo\", \"male\", \"peggio\", \"malissimo\", \"comunemente\", \"constantemente\", \"direttamente\", \"esattamente\", \"facilmente\", \"generalmente\", \"leggermente\", \"personalmente\", \"recentemente\", \"sinceramente\", \"solamente\", \"avanti\", \"indietro\"];\nvar generalAdjectivesAdverbsPreceding = [\"nuovo\", \"nuova\", \"nuovi\", \"nuove\", \"vecchio\", \"vecchia\", \"vecchi\", \"vecchie\", \"bello\", \"bella\", \"belli\", \"belle\", \"bellissimo\", \"bellissima\", \"bellissimi\", \"bellissime\", \"buono\", \"buona\", \"buoni\", \"buone\", \"buonissimo\", \"buonissima\", \"buonissimi\", \"buonissime\", \"grande\", \"grandi\", \"grandissimo\", \"grandissima\", \"grandissimi\", \"grandissime\", \"lunga\", \"lunghi\", \"lunghe\", \"piccolo\", \"piccola\", \"piccoli\", \"piccole\", \"piccolissimo\", \"piccolissima\", \"piccolissimi\", \"piccolissime\", \"proprio\", \"propria\", \"propri\", \"proprie\", \"solito\", \"solita\", \"soliti\", \"solite\", \"stesso\", \"stessa\", \"stessi\", \"stesse\"];\nvar interjections = [\"accidenti\", \"acciderba\", \"ah\", \"aah\", \"ahi\", \"ahia\", \"ahimé\", \"bah\", \"beh\", \"boh\", \"ca\", \"caspita\", \"chissà\", \"de'\", \"diamine\", \"ecco\", \"eh\", \"ehi\", \"eeh\", \"ehilà\", \"ehm\", \"gna\", \"ih\", \"magari\", \"macché\", \"macchè\", \"mah\", \"mhm\", \"nca\", \"neh\", \"oibò\", \"oh\", \"ohe\", \"ohé\", \"ohilá\", \"ohibò\", \"ohimé\", \"okay\", \"ok\", \"olà\", \"poh\", \"pota\", \"puah\", \"sorbole\", \"to'\", \"toh\", \"ts\", \"uff\", \"uffa\", \"uh\", \"uhi\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"cc\", \"g\", \"hg\", \"hl\", \"kg\", \"l\", \"prs\", \"pz\", \"q.b.\", \"qb\", \"ta\", \"tz\"];\nvar timeWords = [\"minuto\", \"minuti\", \"ora\", \"ore\", \"giorno\", \"giorni\", \"giornata\", \"giornate\", \"settimana\", \"settimane\", \"mese\", \"mesi\", \"anno\", \"anni\", \"oggi\", \"domani\", \"ieri\", \"stamattina\", \"stanotte\", \"stasera\", \"tardi\"];\n// Already included in other lists.\nvar vagueNouns = [\"aspetto\", \"aspetti\", \"caso\", \"casi\", \"cose\", \"idea\", \"idee\", \"istanza\", \"maniera\", \"oggetto\", \"oggetti\", \"parte\", \"parti\", \"persona\", \"persone\", \"pezzo\", \"pezzi\", \"punto\", \"punti\", \"sorta\", \"sorte\", \"tema\", \"temi\", \"volte\"];\nvar miscellaneous = [\"sì\", \"no\", \"non\", \"€\", \"euro\", \"euros\", \"ecc\", \"eccetera\"];\nvar titlesPreceding = [\"sig.na\", \"sig.ra\", \"sig\", \"sigg\", \"dr\", \"dr.ssa\", \"dott\", \"dott.ssa\", \"prof\", \"prof.ssa\", \"gent\", \"gent.mo\", \"gent.mi\", \"gent.ma\", \"gent.me\", \"egr\", \"egr.i\", \"egr.ia\", \"egr.ie\", \"preg.mo\", \"preg.mo\", \"preg.ma\", \"preg.me\", \"ill\", \"ill.mo\", \"ill.mi\", \"ill.ma\", \"ill.me\", \"cav\", \"on\", \"spett\"];\n/*\n Exports all function words concatenated, and specific word categories and category combinations\n to be used as filters for the prominent words.\n */\nmodule.exports = function () {\n  return {\n    // These word categories are filtered at the beginning of word combinations.\n    filteredAtBeginning: generalAdjectivesAdverbs,\n    // These word categories are filtered at the ending of word combinations.\n    filteredAtEnding: [].concat(ordinalNumerals, interviewVerbsInfinitive, passiveAuxiliariesInfinitive, otherAuxiliariesInfinitive, copulaInfinitive, delexicalizedVerbsInfinitive, generalAdjectivesAdverbsPreceding),\n    // These word categories are filtered at the beginning and ending of word combinations.\n    filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),\n    // These word categories are filtered everywhere within word combinations.\n    filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, interjections, cardinalNumerals, filteredPassiveAuxiliaries, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeDeterminers, interrogativePronouns, interrogativeAdverbs, locativeAdverbs, miscellaneous, pronominalAdverbs, recipeWords, timeWords, vagueNouns),\n    // These word categories cannot directly precede a passive participle.\n    cannotDirectlyPrecedePassiveParticiple: [].concat(articles, prepositions, personalPronounsAccusative, possessivePronouns, indefinitePronouns, cardinalNumerals, ordinalNumerals, delexicalizedVerbs, delexicalizedVerbsInfinitive, interviewVerbs, interrogativeDeterminers, interrogativePronouns, personalPronounsPrepositional, interrogativeAdverbs),\n    // These word categories cannot intervene between an auxiliary and a corresponding passive participle.\n    cannotBeBetweenPassiveAuxiliaryAndParticiple: [].concat(otherAuxiliaries, otherAuxiliariesInfinitive),\n    // This export contains all of the above words.\n    all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, quantifiers, indefinitePronouns, interrogativePronouns, interrogativeAdverbs, interrogativeDeterminers, pronominalAdverbs, locativeAdverbs, filteredPassiveAuxiliaries, passiveAuxiliariesInfinitive, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, interviewVerbsInfinitive, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, generalAdjectivesAdverbsPreceding, recipeWords, vagueNouns, miscellaneous, timeWords, titlesPreceding)\n  };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/functionWords.js\n// module id = 1113\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/functionWords.js?");

/***/ }),
/* 1114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isUndefined = __webpack_require__(66);\nvar forEach = __webpack_require__(32);\nvar stripSpaces = __webpack_require__(84);\nvar matchWordInSentence = __webpack_require__(1106).isWordInSentence;\nvar characterInBoundary = __webpack_require__(1106).characterInBoundary;\n/**\n * Returns the indices of a string in a text. If it is found multiple times, it will return multiple indices.\n *\n * @param {string} word The word to find in the text.\n * @param {string} text The text to check for the given word.\n * @returns {Array} All indices found.\n */\nfunction getIndicesByWord(word, text) {\n    var startIndex = 0;\n    var searchStringLength = word.length;\n    var index,\n        indices = [];\n    while ((index = text.indexOf(word, startIndex)) > -1) {\n        // Check if the previous and next character are word boundaries to determine if a complete word was detected\n        var isPreviousCharacterWordBoundary = characterInBoundary(text[index - 1]) || index === 0;\n        var isNextCharacterWordBoundary = characterInBoundary(text[index + searchStringLength]) || text.length === index + searchStringLength;\n        if (isPreviousCharacterWordBoundary && isNextCharacterWordBoundary) {\n            indices.push({\n                index: index,\n                match: word\n            });\n        }\n        startIndex = index + searchStringLength;\n    }\n    return indices;\n}\n/**\n * Matches string with an array, returns the word and the index it was found on.\n *\n * @param {Array} words The array with strings to match.\n * @param {string} text The text to match the strings from the array to.\n * @returns {Array} The array with words, containing the index of the match and the matched string.\n * Returns an empty array if none are found.\n */\nvar getIndicesByWordList = function getIndicesByWordList(words, text) {\n    var matchedWords = [];\n    forEach(words, function (word) {\n        word = stripSpaces(word);\n        if (!matchWordInSentence(word, text)) {\n            return;\n        }\n        matchedWords = matchedWords.concat(getIndicesByWord(word, text));\n    });\n    return matchedWords;\n};\n/**\n * Sorts the array on the index property of each entry.\n *\n * @param {Array} indices The array with indices.\n * @returns {Array} The sorted array with indices.\n */\nvar sortIndices = function sortIndices(indices) {\n    return indices.sort(function (a, b) {\n        return a.index > b.index;\n    });\n};\n/**\n * Filters duplicate entries if the indices overlap.\n *\n * @param {Array} indices The array with indices to be filtered.\n * @returns {Array} The filtered array.\n */\nvar filterIndices = function filterIndices(indices) {\n    indices = sortIndices(indices);\n    var filtered = [];\n    for (var i = 0; i < indices.length; i++) {\n        // If the next index is within the range of the current index and the length of the word, remove it\n        // This makes sure we don't match combinations twice, like \"even though\" and \"though\".\n        if (!isUndefined(indices[i + 1]) && indices[i + 1].index < indices[i].index + indices[i].match.length) {\n            filtered.push(indices[i]);\n            // Adds 1 to i, so we skip the next index that is overlapping with the current index.\n            i++;\n            continue;\n        }\n        filtered.push(indices[i]);\n    }\n    return filtered;\n};\n/**\n * Matches string with an array, returns the word and the index it was found on, and sorts the match instances based on\n * the index property of the match.\n *\n * @param {Array} words The array with strings to match.\n * @param {string} text The text to match the strings from the array to.\n * @returns {Array} The array with words, containing the index of the match and the matched string.\n * Returns an empty array if none are found.\n */\nvar getIndicesByWordListSorted = function getIndicesByWordListSorted(words, text) {\n    var matchedWords = [];\n    forEach(words, function (word) {\n        word = stripSpaces(word);\n        if (!matchWordInSentence(word, text)) {\n            return matchedWords;\n        }\n        matchedWords = matchedWords.concat(getIndicesByWord(word, text));\n    });\n    matchedWords = matchedWords.sort(function (a, b) {\n        if (a.index < b.index) {\n            return -1;\n        }\n        if (a.index > b.index) {\n            return 1;\n        }\n        return 0;\n    });\n    return matchedWords;\n};\nmodule.exports = {\n    getIndicesByWord: getIndicesByWord,\n    getIndicesByWordList: getIndicesByWordList,\n    filterIndices: filterIndices,\n    sortIndices: sortIndices,\n    getIndicesByWordListSorted: getIndicesByWordListSorted\n};\n//# sourceMappingURL=indices.js.map\n//# sourceMappingURL=indices.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/indices.js\n// module id = 1114\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/indices.js?");

/***/ }),
/* 1115 */,
/* 1116 */,
/* 1117 */,
/* 1118 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayEach.js\n// module id = 1118\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayEach.js?");

/***/ }),
/* 1119 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseTimes.js\n// module id = 1119\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseTimes.js?");

/***/ }),
/* 1120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar elementId = \"yoast-measurement-element\";\n/**\n * Creates an hidden element with the purpose to calculate the sizes of elements and adds these elements to the body.\n *\n * @returns {HTMLElement} The created hidden element.\n */\nvar createMeasurementElement = function createMeasurementElement() {\n    var hiddenElement = document.createElement(\"div\");\n    hiddenElement.id = elementId;\n    // Styles to prevent unintended scrolling in Gutenberg.\n    hiddenElement.style.position = \"absolute\";\n    hiddenElement.style.left = \"-9999em\";\n    hiddenElement.style.top = 0;\n    hiddenElement.style.height = 0;\n    hiddenElement.style.overflow = \"hidden\";\n    hiddenElement.style.fontFamily = \"Arial\";\n    hiddenElement.style.fontSize = \"16px\";\n    hiddenElement.style.fontWeight = \"400\";\n    document.body.appendChild(hiddenElement);\n    return hiddenElement;\n};\n/**\n * Measures the width of the text using a hidden element.\n *\n * @param {string} text The text to measure the width for.\n * @returns {number} The width in pixels.\n */\nexports.measureTextWidth = function (text) {\n    var element = document.getElementById(elementId);\n    if (!element) {\n        element = createMeasurementElement();\n    }\n    element.innerHTML = text;\n    return element.offsetWidth;\n};\n//# sourceMappingURL=createMeasurementElement.js.map\n//# sourceMappingURL=createMeasurementElement.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/createMeasurementElement.js\n// module id = 1120\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/createMeasurementElement.js?");

/***/ }),
/* 1121 */
/***/ (function(module, exports) {

eval("/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayPush.js\n// module id = 1121\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayPush.js?");

/***/ }),
/* 1122 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(174),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isNumber.js\n// module id = 1122\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isNumber.js?");

/***/ }),
/* 1123 */
/***/ (function(module, exports, __webpack_require__) {

eval("var overArg = __webpack_require__(1082);\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getPrototype.js\n// module id = 1123\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getPrototype.js?");

/***/ }),
/* 1124 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseAssignValue = __webpack_require__(1091),\n    eq = __webpack_require__(326);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_assignValue.js\n// module id = 1124\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_assignValue.js?");

/***/ }),
/* 1125 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIndexOf = __webpack_require__(1104);\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayIncludes.js\n// module id = 1125\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayIncludes.js?");

/***/ }),
/* 1126 */
/***/ (function(module, exports) {

eval("/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayIncludesWith.js\n// module id = 1126\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayIncludesWith.js?");

/***/ }),
/* 1127 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(96),\n    isSymbol = __webpack_require__(563);\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toNumber.js\n// module id = 1127\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toNumber.js?");

/***/ }),
/* 1128 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseRest = __webpack_require__(402),\n    eq = __webpack_require__(326),\n    isIterateeCall = __webpack_require__(1094),\n    keysIn = __webpack_require__(688);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nmodule.exports = defaults;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/defaults.js\n// module id = 1128\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/defaults.js?");

/***/ }),
/* 1129 */,
/* 1130 */,
/* 1131 */,
/* 1132 */,
/* 1133 */,
/* 1134 */,
/* 1135 */,
/* 1136 */,
/* 1137 */,
/* 1138 */,
/* 1139 */,
/* 1140 */,
/* 1141 */,
/* 1142 */,
/* 1143 */,
/* 1144 */,
/* 1145 */,
/* 1146 */,
/* 1147 */,
/* 1148 */,
/* 1149 */,
/* 1150 */,
/* 1151 */,
/* 1152 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFor = __webpack_require__(1078),\n    keys = __webpack_require__(323);\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseForOwn.js\n// module id = 1152\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseForOwn.js?");

/***/ }),
/* 1153 */
/***/ (function(module, exports) {

eval("/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createBaseFor.js\n// module id = 1153\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createBaseFor.js?");

/***/ }),
/* 1154 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(174),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsArguments.js\n// module id = 1154\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsArguments.js?");

/***/ }),
/* 1155 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(324);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getRawTag.js\n// module id = 1155\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getRawTag.js?");

/***/ }),
/* 1156 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_objectToString.js\n// module id = 1156\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_objectToString.js?");

/***/ }),
/* 1157 */
/***/ (function(module, exports) {

eval("/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/stubFalse.js\n// module id = 1157\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/stubFalse.js?");

/***/ }),
/* 1158 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(174),\n    isLength = __webpack_require__(585),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsTypedArray.js\n// module id = 1158\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsTypedArray.js?");

/***/ }),
/* 1159 */
/***/ (function(module, exports, __webpack_require__) {

eval("var overArg = __webpack_require__(1082);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nativeKeys.js\n// module id = 1159\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nativeKeys.js?");

/***/ }),
/* 1160 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArrayLike = __webpack_require__(168);\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createBaseEach.js\n// module id = 1160\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createBaseEach.js?");

/***/ }),
/* 1161 */
/***/ (function(module, exports, __webpack_require__) {

eval("var identity = __webpack_require__(325);\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_castFunction.js\n// module id = 1161\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_castFunction.js?");

/***/ }),
/* 1162 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Hash = __webpack_require__(1163),\n    ListCache = __webpack_require__(562),\n    Map = __webpack_require__(686);\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheClear.js\n// module id = 1162\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheClear.js?");

/***/ }),
/* 1163 */
/***/ (function(module, exports, __webpack_require__) {

eval("var hashClear = __webpack_require__(1164),\n    hashDelete = __webpack_require__(1169),\n    hashGet = __webpack_require__(1170),\n    hashHas = __webpack_require__(1171),\n    hashSet = __webpack_require__(1172);\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Hash.js\n// module id = 1163\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Hash.js?");

/***/ }),
/* 1164 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(350);\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashClear.js\n// module id = 1164\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashClear.js?");

/***/ }),
/* 1165 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isFunction = __webpack_require__(389),\n    isMasked = __webpack_require__(1166),\n    isObject = __webpack_require__(96),\n    toSource = __webpack_require__(1083);\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsNative.js\n// module id = 1165\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsNative.js?");

/***/ }),
/* 1166 */
/***/ (function(module, exports, __webpack_require__) {

eval("var coreJsData = __webpack_require__(1167);\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isMasked.js\n// module id = 1166\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isMasked.js?");

/***/ }),
/* 1167 */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(121);\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_coreJsData.js\n// module id = 1167\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_coreJsData.js?");

/***/ }),
/* 1168 */
/***/ (function(module, exports) {

eval("/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getValue.js\n// module id = 1168\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getValue.js?");

/***/ }),
/* 1169 */
/***/ (function(module, exports) {

eval("/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashDelete.js\n// module id = 1169\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashDelete.js?");

/***/ }),
/* 1170 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(350);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashGet.js\n// module id = 1170\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashGet.js?");

/***/ }),
/* 1171 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(350);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashHas.js\n// module id = 1171\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashHas.js?");

/***/ }),
/* 1172 */
/***/ (function(module, exports, __webpack_require__) {

eval("var nativeCreate = __webpack_require__(350);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashSet.js\n// module id = 1172\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hashSet.js?");

/***/ }),
/* 1173 */
/***/ (function(module, exports) {

eval("/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheClear.js\n// module id = 1173\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheClear.js?");

/***/ }),
/* 1174 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(351);\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheDelete.js\n// module id = 1174\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheDelete.js?");

/***/ }),
/* 1175 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(351);\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheGet.js\n// module id = 1175\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheGet.js?");

/***/ }),
/* 1176 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(351);\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheHas.js\n// module id = 1176\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheHas.js?");

/***/ }),
/* 1177 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assocIndexOf = __webpack_require__(351);\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheSet.js\n// module id = 1177\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_listCacheSet.js?");

/***/ }),
/* 1178 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(352);\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheDelete.js\n// module id = 1178\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheDelete.js?");

/***/ }),
/* 1179 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isKeyable.js\n// module id = 1179\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isKeyable.js?");

/***/ }),
/* 1180 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(352);\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheGet.js\n// module id = 1180\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheGet.js?");

/***/ }),
/* 1181 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(352);\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheHas.js\n// module id = 1181\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheHas.js?");

/***/ }),
/* 1182 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getMapData = __webpack_require__(352);\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheSet.js\n// module id = 1182\n// module chunks = 0 1 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapCacheSet.js?");

/***/ }),
/* 1183 */,
/* 1184 */,
/* 1185 */,
/* 1186 */,
/* 1187 */,
/* 1188 */,
/* 1189 */,
/* 1190 */,
/* 1191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sentences_1 = __webpack_require__(1333);\nvar merge = __webpack_require__(98);\nvar InvalidTypeError = __webpack_require__(1280);\nvar MissingArgument = __webpack_require__(1095);\nvar isUndefined = __webpack_require__(66);\nvar isEmpty = __webpack_require__(97);\n// Researches\nvar wordCountInText = __webpack_require__(1212);\nvar getLinkStatistics = __webpack_require__(1372);\nvar linkCount = __webpack_require__(1412);\nvar getLinks = __webpack_require__(1227);\nvar urlLength = __webpack_require__(1413);\nvar findKeywordInPageTitle = __webpack_require__(1414);\nvar matchKeywordInSubheadings = __webpack_require__(1415);\nvar getKeywordDensity = __webpack_require__(1419);\nvar keywordCount = __webpack_require__(1420);\nvar stopWordsInKeyword = __webpack_require__(1425);\nvar stopWordsInUrl = __webpack_require__(1428);\nvar calculateFleschReading = __webpack_require__(1429);\nvar metaDescriptionLength = __webpack_require__(1450);\nvar imageCount = __webpack_require__(1238);\nvar altTagCount = __webpack_require__(1452);\nvar keyphraseLength = __webpack_require__(1454);\nvar metaDescriptionKeyword = __webpack_require__(1455);\nvar keywordCountInUrl = __webpack_require__(1456);\nvar findKeywordInFirstParagraph = __webpack_require__(1457);\nvar pageTitleWidth = __webpack_require__(1459);\nvar wordComplexity = __webpack_require__(1460);\nvar getParagraphLength = __webpack_require__(1461);\nvar countSentencesFromText = __webpack_require__(1462);\nvar countSentencesFromDescription = __webpack_require__(1463);\nvar getSubheadingTextLengths = __webpack_require__(1464);\nvar findTransitionWords = __webpack_require__(1466);\nvar passiveVoice = __webpack_require__(1481);\nvar getSentenceBeginnings = __webpack_require__(1525);\nvar relevantWords = __webpack_require__(1534);\nvar readingTime = __webpack_require__(1544);\nvar getTopicDensity = __webpack_require__(1545);\nvar topicCount = __webpack_require__(589);\nvar largestKeywordDistance = __webpack_require__(1550);\n/**\n * This contains all possible, default researches.\n * @param {Paper} paper The Paper object that is needed within the researches.\n * @constructor\n * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.\n */\nvar Researcher = function Researcher(paper) {\n    this.setPaper(paper);\n    this.defaultResearches = {\n        urlLength: urlLength,\n        wordCountInText: wordCountInText,\n        findKeywordInPageTitle: findKeywordInPageTitle,\n        calculateFleschReading: calculateFleschReading,\n        getLinkStatistics: getLinkStatistics,\n        getLinks: getLinks,\n        linkCount: linkCount,\n        imageCount: imageCount,\n        altTagCount: altTagCount,\n        matchKeywordInSubheadings: matchKeywordInSubheadings,\n        keywordCount: keywordCount,\n        getKeywordDensity: getKeywordDensity,\n        stopWordsInKeyword: stopWordsInKeyword,\n        stopWordsInUrl: stopWordsInUrl,\n        metaDescriptionLength: metaDescriptionLength,\n        keyphraseLength: keyphraseLength,\n        keywordCountInUrl: keywordCountInUrl,\n        firstParagraph: findKeywordInFirstParagraph,\n        metaDescriptionKeyword: metaDescriptionKeyword,\n        pageTitleWidth: pageTitleWidth,\n        wordComplexity: wordComplexity,\n        getParagraphLength: getParagraphLength,\n        countSentencesFromText: countSentencesFromText,\n        countSentencesFromDescription: countSentencesFromDescription,\n        getSubheadingTextLengths: getSubheadingTextLengths,\n        findTransitionWords: findTransitionWords,\n        passiveVoice: passiveVoice,\n        getSentenceBeginnings: getSentenceBeginnings,\n        relevantWords: relevantWords,\n        readingTime: readingTime,\n        getTopicDensity: getTopicDensity,\n        topicCount: topicCount,\n        sentences: sentences_1.default,\n        largestKeywordDistance: largestKeywordDistance\n    };\n    this.customResearches = {};\n};\n/**\n * Set the Paper associated with the Researcher.\n * @param {Paper} paper The Paper to use within the Researcher\n * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.\n * @returns {void}\n */\nResearcher.prototype.setPaper = function (paper) {\n    this.paper = paper;\n};\n/**\n * Add a custom research that will be available within the Researcher.\n * @param {string} name A name to reference the research by.\n * @param {function} research The function to be added to the Researcher.\n * @throws {MissingArgument} Research name cannot be empty.\n * @throws {InvalidTypeError} The research requires a valid Function callback.\n * @returns {void}\n */\nResearcher.prototype.addResearch = function (name, research) {\n    if (isUndefined(name) || isEmpty(name)) {\n        throw new MissingArgument(\"Research name cannot be empty\");\n    }\n    if (!(research instanceof Function)) {\n        throw new InvalidTypeError(\"The research requires a Function callback.\");\n    }\n    this.customResearches[name] = research;\n};\n/**\n * Check wheter or not the research is known by the Researcher.\n * @param {string} name The name to reference the research by.\n * @returns {boolean} Whether or not the research is known by the Researcher\n */\nResearcher.prototype.hasResearch = function (name) {\n    return Object.keys(this.getAvailableResearches()).filter(function (research) {\n        return research === name;\n    }).length > 0;\n};\n/**\n * Return all available researches.\n * @returns {Object} An object containing all available researches.\n */\nResearcher.prototype.getAvailableResearches = function () {\n    return merge(this.defaultResearches, this.customResearches);\n};\n/**\n * Return the Research by name.\n * @param {string} name The name to reference the research by.\n * @returns {*} Returns the result of the research or false if research does not exist.\n * @throws {MissingArgument} Research name cannot be empty.\n */\nResearcher.prototype.getResearch = function (name) {\n    if (isUndefined(name) || isEmpty(name)) {\n        throw new MissingArgument(\"Research name cannot be empty\");\n    }\n    if (!this.hasResearch(name)) {\n        return false;\n    }\n    return this.getAvailableResearches()[name](this.paper, this);\n};\nmodule.exports = Researcher;\n//# sourceMappingURL=researcher.js.map\n//# sourceMappingURL=researcher.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researcher.js\n// module id = 1191\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researcher.js?");

/***/ }),
/* 1192 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsEqualDeep = __webpack_require__(1341),\n    isObjectLike = __webpack_require__(124);\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsEqual.js\n// module id = 1192\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsEqual.js?");

/***/ }),
/* 1193 */
/***/ (function(module, exports, __webpack_require__) {

eval("var SetCache = __webpack_require__(708),\n    arraySome = __webpack_require__(1344),\n    cacheHas = __webpack_require__(709);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_equalArrays.js\n// module id = 1193\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_equalArrays.js?");

/***/ }),
/* 1194 */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(121);\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Uint8Array.js\n// module id = 1194\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Uint8Array.js?");

/***/ }),
/* 1195 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayFilter = __webpack_require__(710),\n    stubArray = __webpack_require__(1271);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getSymbols.js\n// module id = 1195\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getSymbols.js?");

/***/ }),
/* 1196 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(228),\n    root = __webpack_require__(121);\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Set.js\n// module id = 1196\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Set.js?");

/***/ }),
/* 1197 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(96);\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isStrictComparable.js\n// module id = 1197\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isStrictComparable.js?");

/***/ }),
/* 1198 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_matchesStrictComparable.js\n// module id = 1198\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_matchesStrictComparable.js?");

/***/ }),
/* 1199 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseHasIn = __webpack_require__(1357),\n    hasPath = __webpack_require__(1200);\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/hasIn.js\n// module id = 1199\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/hasIn.js?");

/***/ }),
/* 1200 */
/***/ (function(module, exports, __webpack_require__) {

eval("var castPath = __webpack_require__(687),\n    isArguments = __webpack_require__(388),\n    isArray = __webpack_require__(64),\n    isIndex = __webpack_require__(559),\n    isLength = __webpack_require__(585),\n    toKey = __webpack_require__(564);\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hasPath.js\n// module id = 1200\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_hasPath.js?");

/***/ }),
/* 1201 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseEach = __webpack_require__(558),\n    isArrayLike = __webpack_require__(168);\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMap.js\n// module id = 1201\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMap.js?");

/***/ }),
/* 1202 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseEach = __webpack_require__(558);\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFilter.js\n// module id = 1202\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFilter.js?");

/***/ }),
/* 1203 */
/***/ (function(module, exports) {

eval("/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/negate.js\n// module id = 1203\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/negate.js?");

/***/ }),
/* 1204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/unifyWhitespace */\n/**\n * Replaces a non breaking space with a normal space\n * @param {string} text The string to replace the non breaking space in.\n * @returns {string} The text with unified spaces.\n */\n\nvar unifyNonBreakingSpace = function unifyNonBreakingSpace(text) {\n    return text.replace(/&nbsp;/g, \" \");\n};\n/**\n * Replaces all whitespaces with a normal space\n * @param {string} text The string to replace the non breaking space in.\n * @returns {string} The text with unified spaces.\n */\nvar unifyWhiteSpace = function unifyWhiteSpace(text) {\n    return text.replace(/\\s/g, \" \");\n};\n/**\n * Converts all whitespace to spaces.\n *\n * @param {string} text The text to replace spaces.\n * @returns {string} The text with unified spaces.\n */\nvar unifyAllSpaces = function unifyAllSpaces(text) {\n    text = unifyNonBreakingSpace(text);\n    return unifyWhiteSpace(text);\n};\nmodule.exports = {\n    unifyNonBreakingSpace: unifyNonBreakingSpace,\n    unifyWhiteSpace: unifyWhiteSpace,\n    unifyAllSpaces: unifyAllSpaces\n};\n//# sourceMappingURL=unifyWhitespace.js.map\n//# sourceMappingURL=unifyWhitespace.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/unifyWhitespace.js\n// module id = 1204\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/unifyWhitespace.js?");

/***/ }),
/* 1205 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(707),\n    assignMergeValue = __webpack_require__(1206),\n    baseFor = __webpack_require__(1078),\n    baseMergeDeep = __webpack_require__(1362),\n    isObject = __webpack_require__(96),\n    keysIn = __webpack_require__(688),\n    safeGet = __webpack_require__(1209);\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    if (isObject(srcValue)) {\n      stack || (stack = new Stack);\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMerge.js\n// module id = 1205\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMerge.js?");

/***/ }),
/* 1206 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseAssignValue = __webpack_require__(1091),\n    eq = __webpack_require__(326);\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_assignMergeValue.js\n// module id = 1206\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_assignMergeValue.js?");

/***/ }),
/* 1207 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(228);\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_defineProperty.js\n// module id = 1207\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_defineProperty.js?");

/***/ }),
/* 1208 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Uint8Array = __webpack_require__(1194);\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneArrayBuffer.js\n// module id = 1208\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneArrayBuffer.js?");

/***/ }),
/* 1209 */
/***/ (function(module, exports) {

eval("/**\n * Gets the value at `key`, unless `key` is \"__proto__\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  return key == '__proto__'\n    ? undefined\n    : object[key];\n}\n\nmodule.exports = safeGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_safeGet.js\n// module id = 1209\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_safeGet.js?");

/***/ }),
/* 1210 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = __webpack_require__(1279);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_overRest.js\n// module id = 1210\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_overRest.js?");

/***/ }),
/* 1211 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseSetToString = __webpack_require__(1367),\n    shortOut = __webpack_require__(1369);\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setToString.js\n// module id = 1211\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setToString.js?");

/***/ }),
/* 1212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar wordCount = __webpack_require__(185);\n/**\n * Count the words in the text\n * @param {Paper} paper The Paper object who's\n * @returns {number} The amount of words found in the text.\n */\nmodule.exports = function (paper) {\n  return wordCount(paper.getText());\n};\n//# sourceMappingURL=wordCountInText.js.map\n//# sourceMappingURL=wordCountInText.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/wordCountInText.js\n// module id = 1212\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/wordCountInText.js?");

/***/ }),
/* 1213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/getAnchorsFromText */\n/**\n * Check for anchors in the textstring and returns them in an array.\n *\n * @param {String} text The text to check for matches.\n * @returns {Array} The matched links in text.\n */\n\nmodule.exports = function (text) {\n    var matches;\n    // Regex matches everything between <a> and </a>\n    matches = text.match(/<a(?:[^>]+)?>(.*?)<\\/a>/ig);\n    if (matches === null) {\n        matches = [];\n    }\n    return matches;\n};\n//# sourceMappingURL=getAnchorsFromText.js.map\n//# sourceMappingURL=getAnchorsFromText.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getAnchorsFromText.js\n// module id = 1213\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getAnchorsFromText.js?");

/***/ }),
/* 1214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar map = __webpack_require__(63);\nvar addWordBoundary = __webpack_require__(565);\nvar stripSpaces = __webpack_require__(84);\nvar transliterate = __webpack_require__(1215);\nvar transliterateWP = __webpack_require__(1375);\n/**\n * Creates a regex from the keyword with included wordboundaries.\n * @param {string} keyword The keyword to create a regex from.\n * @returns {RegExp} Regular expression of the keyword with wordboundaries.\n */\nvar toRegex = function toRegex(keyword) {\n    keyword = addWordBoundary(keyword);\n    return new RegExp(keyword, \"ig\");\n};\n/**\n * Matches a string with and without transliteration.\n * @param {string} text The text to match.\n * @param {string} keyword The keyword to match in the text.\n * @param {string} locale The locale used for transliteration.\n * @returns {Array} All matches from the original as the transliterated text and keyword.\n */\nmodule.exports = function (text, keyword, locale) {\n    var keywordRegex = toRegex(keyword);\n    var matches = text.match(keywordRegex) || [];\n    text = text.replace(keywordRegex, \"\");\n    var transliterateKeyword = transliterate(keyword, locale);\n    var transliterateKeywordRegex = toRegex(transliterateKeyword);\n    var transliterateMatches = text.match(transliterateKeywordRegex) || [];\n    var combinedArray = matches.concat(transliterateMatches);\n    var transliterateWPKeyword = transliterateWP(keyword, locale);\n    if (!(transliterateWPKeyword === transliterateKeyword)) {\n        var transliterateWPKeywordRegex = toRegex(transliterateWPKeyword);\n        var transliterateWPMatches = text.match(transliterateWPKeywordRegex) || [];\n        combinedArray = combinedArray.concat(transliterateWPMatches);\n    }\n    return map(combinedArray, function (keyword) {\n        return stripSpaces(keyword);\n    });\n};\n//# sourceMappingURL=matchTextWithTransliteration.js.map\n//# sourceMappingURL=matchTextWithTransliteration.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchTextWithTransliteration.js\n// module id = 1214\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchTextWithTransliteration.js?");

/***/ }),
/* 1215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/replaceDiacritics */\n\nvar transliterationsMap = __webpack_require__(1374);\n/**\n * Replaces all special characters from the text based on the transliterations map.\n *\n * @param {string} text The text to remove special characters from.\n * @param {string} locale The locale.\n * @returns {string} The text with all special characters replaced.\n */\nmodule.exports = function (text, locale) {\n    var map = transliterationsMap(locale);\n    for (var i = 0; i < map.length; i++) {\n        text = text.replace(map[i].letter, map[i].alternative);\n    }\n    return text;\n};\n//# sourceMappingURL=transliterate.js.map\n//# sourceMappingURL=transliterate.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/transliterate.js\n// module id = 1215\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/transliterate.js?");

/***/ }),
/* 1216 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Tokenizer = __webpack_require__(1217);\n\n/*\n\tOptions:\n\n\txmlMode: Disables the special behavior for script/style tags (false by default)\n\tlowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)\n\tlowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)\n*/\n\n/*\n\tCallbacks:\n\n\toncdataend,\n\toncdatastart,\n\tonclosetag,\n\toncomment,\n\toncommentend,\n\tonerror,\n\tonopentag,\n\tonprocessinginstruction,\n\tonreset,\n\tontext\n*/\n\nvar formTags = {\n\tinput: true,\n\toption: true,\n\toptgroup: true,\n\tselect: true,\n\tbutton: true,\n\tdatalist: true,\n\ttextarea: true\n};\n\nvar openImpliesClose = {\n\ttr      : { tr:true, th:true, td:true },\n\tth      : { th:true },\n\ttd      : { thead:true, th:true, td:true },\n\tbody    : { head:true, link:true, script:true },\n\tli      : { li:true },\n\tp       : { p:true },\n\th1      : { p:true },\n\th2      : { p:true },\n\th3      : { p:true },\n\th4      : { p:true },\n\th5      : { p:true },\n\th6      : { p:true },\n\tselect  : formTags,\n\tinput   : formTags,\n\toutput  : formTags,\n\tbutton  : formTags,\n\tdatalist: formTags,\n\ttextarea: formTags,\n\toption  : { option:true },\n\toptgroup: { optgroup:true }\n};\n\nvar voidElements = {\n\t__proto__: null,\n\tarea: true,\n\tbase: true,\n\tbasefont: true,\n\tbr: true,\n\tcol: true,\n\tcommand: true,\n\tembed: true,\n\tframe: true,\n\thr: true,\n\timg: true,\n\tinput: true,\n\tisindex: true,\n\tkeygen: true,\n\tlink: true,\n\tmeta: true,\n\tparam: true,\n\tsource: true,\n\ttrack: true,\n\twbr: true,\n\n\t//common self closing svg elements\n\tpath: true,\n\tcircle: true,\n\tellipse: true,\n\tline: true,\n\trect: true,\n\tuse: true,\n\tstop: true,\n\tpolyline: true,\n\tpolygon: true\n};\n\nvar re_nameEnd = /\\s|\\//;\n\nfunction Parser(cbs, options){\n\tthis._options = options || {};\n\tthis._cbs = cbs || {};\n\n\tthis._tagname = \"\";\n\tthis._attribname = \"\";\n\tthis._attribvalue = \"\";\n\tthis._attribs = null;\n\tthis._stack = [];\n\n\tthis.startIndex = 0;\n\tthis.endIndex = null;\n\n\tthis._lowerCaseTagNames = \"lowerCaseTags\" in this._options ?\n\t\t\t\t\t\t\t\t\t!!this._options.lowerCaseTags :\n\t\t\t\t\t\t\t\t\t!this._options.xmlMode;\n\tthis._lowerCaseAttributeNames = \"lowerCaseAttributeNames\" in this._options ?\n\t\t\t\t\t\t\t\t\t!!this._options.lowerCaseAttributeNames :\n\t\t\t\t\t\t\t\t\t!this._options.xmlMode;\n\n\tif(this._options.Tokenizer) {\n\t\tTokenizer = this._options.Tokenizer;\n\t}\n\tthis._tokenizer = new Tokenizer(this._options, this);\n\n\tif(this._cbs.onparserinit) this._cbs.onparserinit(this);\n}\n\n__webpack_require__(44)(Parser, __webpack_require__(227).EventEmitter);\n\nParser.prototype._updatePosition = function(initialOffset){\n\tif(this.endIndex === null){\n\t\tif(this._tokenizer._sectionStart <= initialOffset){\n\t\t\tthis.startIndex = 0;\n\t\t} else {\n\t\t\tthis.startIndex = this._tokenizer._sectionStart - initialOffset;\n\t\t}\n\t}\n\telse this.startIndex = this.endIndex + 1;\n\tthis.endIndex = this._tokenizer.getAbsoluteIndex();\n};\n\n//Tokenizer event handlers\nParser.prototype.ontext = function(data){\n\tthis._updatePosition(1);\n\tthis.endIndex--;\n\n\tif(this._cbs.ontext) this._cbs.ontext(data);\n};\n\nParser.prototype.onopentagname = function(name){\n\tif(this._lowerCaseTagNames){\n\t\tname = name.toLowerCase();\n\t}\n\n\tthis._tagname = name;\n\n\tif(!this._options.xmlMode && name in openImpliesClose) {\n\t\tfor(\n\t\t\tvar el;\n\t\t\t(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];\n\t\t\tthis.onclosetag(el)\n\t\t);\n\t}\n\n\tif(this._options.xmlMode || !(name in voidElements)){\n\t\tthis._stack.push(name);\n\t}\n\n\tif(this._cbs.onopentagname) this._cbs.onopentagname(name);\n\tif(this._cbs.onopentag) this._attribs = {};\n};\n\nParser.prototype.onopentagend = function(){\n\tthis._updatePosition(1);\n\n\tif(this._attribs){\n\t\tif(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);\n\t\tthis._attribs = null;\n\t}\n\n\tif(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){\n\t\tthis._cbs.onclosetag(this._tagname);\n\t}\n\n\tthis._tagname = \"\";\n};\n\nParser.prototype.onclosetag = function(name){\n\tthis._updatePosition(1);\n\n\tif(this._lowerCaseTagNames){\n\t\tname = name.toLowerCase();\n\t}\n\n\tif(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){\n\t\tvar pos = this._stack.lastIndexOf(name);\n\t\tif(pos !== -1){\n\t\t\tif(this._cbs.onclosetag){\n\t\t\t\tpos = this._stack.length - pos;\n\t\t\t\twhile(pos--) this._cbs.onclosetag(this._stack.pop());\n\t\t\t}\n\t\t\telse this._stack.length = pos;\n\t\t} else if(name === \"p\" && !this._options.xmlMode){\n\t\t\tthis.onopentagname(name);\n\t\t\tthis._closeCurrentTag();\n\t\t}\n\t} else if(!this._options.xmlMode && (name === \"br\" || name === \"p\")){\n\t\tthis.onopentagname(name);\n\t\tthis._closeCurrentTag();\n\t}\n};\n\nParser.prototype.onselfclosingtag = function(){\n\tif(this._options.xmlMode || this._options.recognizeSelfClosing){\n\t\tthis._closeCurrentTag();\n\t} else {\n\t\tthis.onopentagend();\n\t}\n};\n\nParser.prototype._closeCurrentTag = function(){\n\tvar name = this._tagname;\n\n\tthis.onopentagend();\n\n\t//self-closing tags will be on the top of the stack\n\t//(cheaper check than in onclosetag)\n\tif(this._stack[this._stack.length - 1] === name){\n\t\tif(this._cbs.onclosetag){\n\t\t\tthis._cbs.onclosetag(name);\n\t\t}\n\t\tthis._stack.pop();\n\t}\n};\n\nParser.prototype.onattribname = function(name){\n\tif(this._lowerCaseAttributeNames){\n\t\tname = name.toLowerCase();\n\t}\n\tthis._attribname = name;\n};\n\nParser.prototype.onattribdata = function(value){\n\tthis._attribvalue += value;\n};\n\nParser.prototype.onattribend = function(){\n\tif(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);\n\tif(\n\t\tthis._attribs &&\n\t\t!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)\n\t){\n\t\tthis._attribs[this._attribname] = this._attribvalue;\n\t}\n\tthis._attribname = \"\";\n\tthis._attribvalue = \"\";\n};\n\nParser.prototype._getInstructionName = function(value){\n\tvar idx = value.search(re_nameEnd),\n\t    name = idx < 0 ? value : value.substr(0, idx);\n\n\tif(this._lowerCaseTagNames){\n\t\tname = name.toLowerCase();\n\t}\n\n\treturn name;\n};\n\nParser.prototype.ondeclaration = function(value){\n\tif(this._cbs.onprocessinginstruction){\n\t\tvar name = this._getInstructionName(value);\n\t\tthis._cbs.onprocessinginstruction(\"!\" + name, \"!\" + value);\n\t}\n};\n\nParser.prototype.onprocessinginstruction = function(value){\n\tif(this._cbs.onprocessinginstruction){\n\t\tvar name = this._getInstructionName(value);\n\t\tthis._cbs.onprocessinginstruction(\"?\" + name, \"?\" + value);\n\t}\n};\n\nParser.prototype.oncomment = function(value){\n\tthis._updatePosition(4);\n\n\tif(this._cbs.oncomment) this._cbs.oncomment(value);\n\tif(this._cbs.oncommentend) this._cbs.oncommentend();\n};\n\nParser.prototype.oncdata = function(value){\n\tthis._updatePosition(1);\n\n\tif(this._options.xmlMode || this._options.recognizeCDATA){\n\t\tif(this._cbs.oncdatastart) this._cbs.oncdatastart();\n\t\tif(this._cbs.ontext) this._cbs.ontext(value);\n\t\tif(this._cbs.oncdataend) this._cbs.oncdataend();\n\t} else {\n\t\tthis.oncomment(\"[CDATA[\" + value + \"]]\");\n\t}\n};\n\nParser.prototype.onerror = function(err){\n\tif(this._cbs.onerror) this._cbs.onerror(err);\n};\n\nParser.prototype.onend = function(){\n\tif(this._cbs.onclosetag){\n\t\tfor(\n\t\t\tvar i = this._stack.length;\n\t\t\ti > 0;\n\t\t\tthis._cbs.onclosetag(this._stack[--i])\n\t\t);\n\t}\n\tif(this._cbs.onend) this._cbs.onend();\n};\n\n\n//Resets the parser to a blank state, ready to parse a new HTML document\nParser.prototype.reset = function(){\n\tif(this._cbs.onreset) this._cbs.onreset();\n\tthis._tokenizer.reset();\n\n\tthis._tagname = \"\";\n\tthis._attribname = \"\";\n\tthis._attribs = null;\n\tthis._stack = [];\n\n\tif(this._cbs.onparserinit) this._cbs.onparserinit(this);\n};\n\n//Parses a complete HTML document and pushes it to the handler\nParser.prototype.parseComplete = function(data){\n\tthis.reset();\n\tthis.end(data);\n};\n\nParser.prototype.write = function(chunk){\n\tthis._tokenizer.write(chunk);\n};\n\nParser.prototype.end = function(chunk){\n\tthis._tokenizer.end(chunk);\n};\n\nParser.prototype.pause = function(){\n\tthis._tokenizer.pause();\n};\n\nParser.prototype.resume = function(){\n\tthis._tokenizer.resume();\n};\n\n//alias for backwards compat\nParser.prototype.parseChunk = Parser.prototype.write;\nParser.prototype.done = Parser.prototype.end;\n\nmodule.exports = Parser;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/Parser.js\n// module id = 1216\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/Parser.js?");

/***/ }),
/* 1217 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = Tokenizer;\n\nvar decodeCodePoint = __webpack_require__(1218),\n    entityMap = __webpack_require__(1097),\n    legacyMap = __webpack_require__(1219),\n    xmlMap    = __webpack_require__(1098),\n\n    i = 0,\n\n    TEXT                      = i++,\n    BEFORE_TAG_NAME           = i++, //after <\n    IN_TAG_NAME               = i++,\n    IN_SELF_CLOSING_TAG       = i++,\n    BEFORE_CLOSING_TAG_NAME   = i++,\n    IN_CLOSING_TAG_NAME       = i++,\n    AFTER_CLOSING_TAG_NAME    = i++,\n\n    //attributes\n    BEFORE_ATTRIBUTE_NAME     = i++,\n    IN_ATTRIBUTE_NAME         = i++,\n    AFTER_ATTRIBUTE_NAME      = i++,\n    BEFORE_ATTRIBUTE_VALUE    = i++,\n    IN_ATTRIBUTE_VALUE_DQ     = i++, // \"\n    IN_ATTRIBUTE_VALUE_SQ     = i++, // '\n    IN_ATTRIBUTE_VALUE_NQ     = i++,\n\n    //declarations\n    BEFORE_DECLARATION        = i++, // !\n    IN_DECLARATION            = i++,\n\n    //processing instructions\n    IN_PROCESSING_INSTRUCTION = i++, // ?\n\n    //comments\n    BEFORE_COMMENT            = i++,\n    IN_COMMENT                = i++,\n    AFTER_COMMENT_1           = i++,\n    AFTER_COMMENT_2           = i++,\n\n    //cdata\n    BEFORE_CDATA_1            = i++, // [\n    BEFORE_CDATA_2            = i++, // C\n    BEFORE_CDATA_3            = i++, // D\n    BEFORE_CDATA_4            = i++, // A\n    BEFORE_CDATA_5            = i++, // T\n    BEFORE_CDATA_6            = i++, // A\n    IN_CDATA                  = i++, // [\n    AFTER_CDATA_1             = i++, // ]\n    AFTER_CDATA_2             = i++, // ]\n\n    //special tags\n    BEFORE_SPECIAL            = i++, //S\n    BEFORE_SPECIAL_END        = i++,   //S\n\n    BEFORE_SCRIPT_1           = i++, //C\n    BEFORE_SCRIPT_2           = i++, //R\n    BEFORE_SCRIPT_3           = i++, //I\n    BEFORE_SCRIPT_4           = i++, //P\n    BEFORE_SCRIPT_5           = i++, //T\n    AFTER_SCRIPT_1            = i++, //C\n    AFTER_SCRIPT_2            = i++, //R\n    AFTER_SCRIPT_3            = i++, //I\n    AFTER_SCRIPT_4            = i++, //P\n    AFTER_SCRIPT_5            = i++, //T\n\n    BEFORE_STYLE_1            = i++, //T\n    BEFORE_STYLE_2            = i++, //Y\n    BEFORE_STYLE_3            = i++, //L\n    BEFORE_STYLE_4            = i++, //E\n    AFTER_STYLE_1             = i++, //T\n    AFTER_STYLE_2             = i++, //Y\n    AFTER_STYLE_3             = i++, //L\n    AFTER_STYLE_4             = i++, //E\n\n    BEFORE_ENTITY             = i++, //&\n    BEFORE_NUMERIC_ENTITY     = i++, //#\n    IN_NAMED_ENTITY           = i++,\n    IN_NUMERIC_ENTITY         = i++,\n    IN_HEX_ENTITY             = i++, //X\n\n    j = 0,\n\n    SPECIAL_NONE              = j++,\n    SPECIAL_SCRIPT            = j++,\n    SPECIAL_STYLE             = j++;\n\nfunction whitespace(c){\n\treturn c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n\nfunction characterState(char, SUCCESS){\n\treturn function(c){\n\t\tif(c === char) this._state = SUCCESS;\n\t};\n}\n\nfunction ifElseState(upper, SUCCESS, FAILURE){\n\tvar lower = upper.toLowerCase();\n\n\tif(upper === lower){\n\t\treturn function(c){\n\t\t\tif(c === lower){\n\t\t\t\tthis._state = SUCCESS;\n\t\t\t} else {\n\t\t\t\tthis._state = FAILURE;\n\t\t\t\tthis._index--;\n\t\t\t}\n\t\t};\n\t} else {\n\t\treturn function(c){\n\t\t\tif(c === lower || c === upper){\n\t\t\t\tthis._state = SUCCESS;\n\t\t\t} else {\n\t\t\t\tthis._state = FAILURE;\n\t\t\t\tthis._index--;\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction consumeSpecialNameChar(upper, NEXT_STATE){\n\tvar lower = upper.toLowerCase();\n\n\treturn function(c){\n\t\tif(c === lower || c === upper){\n\t\t\tthis._state = NEXT_STATE;\n\t\t} else {\n\t\t\tthis._state = IN_TAG_NAME;\n\t\t\tthis._index--; //consume the token again\n\t\t}\n\t};\n}\n\nfunction Tokenizer(options, cbs){\n\tthis._state = TEXT;\n\tthis._buffer = \"\";\n\tthis._sectionStart = 0;\n\tthis._index = 0;\n\tthis._bufferOffset = 0; //chars removed from _buffer\n\tthis._baseState = TEXT;\n\tthis._special = SPECIAL_NONE;\n\tthis._cbs = cbs;\n\tthis._running = true;\n\tthis._ended = false;\n\tthis._xmlMode = !!(options && options.xmlMode);\n\tthis._decodeEntities = !!(options && options.decodeEntities);\n}\n\nTokenizer.prototype._stateText = function(c){\n\tif(c === \"<\"){\n\t\tif(this._index > this._sectionStart){\n\t\t\tthis._cbs.ontext(this._getSection());\n\t\t}\n\t\tthis._state = BEFORE_TAG_NAME;\n\t\tthis._sectionStart = this._index;\n\t} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === \"&\"){\n\t\tif(this._index > this._sectionStart){\n\t\t\tthis._cbs.ontext(this._getSection());\n\t\t}\n\t\tthis._baseState = TEXT;\n\t\tthis._state = BEFORE_ENTITY;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateBeforeTagName = function(c){\n\tif(c === \"/\"){\n\t\tthis._state = BEFORE_CLOSING_TAG_NAME;\n\t} else if(c === \"<\"){\n\t\tthis._cbs.ontext(this._getSection());\n\t\tthis._sectionStart = this._index;\n\t} else if(c === \">\" || this._special !== SPECIAL_NONE || whitespace(c)) {\n\t\tthis._state = TEXT;\n\t} else if(c === \"!\"){\n\t\tthis._state = BEFORE_DECLARATION;\n\t\tthis._sectionStart = this._index + 1;\n\t} else if(c === \"?\"){\n\t\tthis._state = IN_PROCESSING_INSTRUCTION;\n\t\tthis._sectionStart = this._index + 1;\n\t} else {\n\t\tthis._state = (!this._xmlMode && (c === \"s\" || c === \"S\")) ?\n\t\t\t\t\t\tBEFORE_SPECIAL : IN_TAG_NAME;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateInTagName = function(c){\n\tif(c === \"/\" || c === \">\" || whitespace(c)){\n\t\tthis._emitToken(\"onopentagname\");\n\t\tthis._state = BEFORE_ATTRIBUTE_NAME;\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._stateBeforeCloseingTagName = function(c){\n\tif(whitespace(c));\n\telse if(c === \">\"){\n\t\tthis._state = TEXT;\n\t} else if(this._special !== SPECIAL_NONE){\n\t\tif(c === \"s\" || c === \"S\"){\n\t\t\tthis._state = BEFORE_SPECIAL_END;\n\t\t} else {\n\t\t\tthis._state = TEXT;\n\t\t\tthis._index--;\n\t\t}\n\t} else {\n\t\tthis._state = IN_CLOSING_TAG_NAME;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateInCloseingTagName = function(c){\n\tif(c === \">\" || whitespace(c)){\n\t\tthis._emitToken(\"onclosetag\");\n\t\tthis._state = AFTER_CLOSING_TAG_NAME;\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._stateAfterCloseingTagName = function(c){\n\t//skip everything until \">\"\n\tif(c === \">\"){\n\t\tthis._state = TEXT;\n\t\tthis._sectionStart = this._index + 1;\n\t}\n};\n\nTokenizer.prototype._stateBeforeAttributeName = function(c){\n\tif(c === \">\"){\n\t\tthis._cbs.onopentagend();\n\t\tthis._state = TEXT;\n\t\tthis._sectionStart = this._index + 1;\n\t} else if(c === \"/\"){\n\t\tthis._state = IN_SELF_CLOSING_TAG;\n\t} else if(!whitespace(c)){\n\t\tthis._state = IN_ATTRIBUTE_NAME;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateInSelfClosingTag = function(c){\n\tif(c === \">\"){\n\t\tthis._cbs.onselfclosingtag();\n\t\tthis._state = TEXT;\n\t\tthis._sectionStart = this._index + 1;\n\t} else if(!whitespace(c)){\n\t\tthis._state = BEFORE_ATTRIBUTE_NAME;\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._stateInAttributeName = function(c){\n\tif(c === \"=\" || c === \"/\" || c === \">\" || whitespace(c)){\n\t\tthis._cbs.onattribname(this._getSection());\n\t\tthis._sectionStart = -1;\n\t\tthis._state = AFTER_ATTRIBUTE_NAME;\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._stateAfterAttributeName = function(c){\n\tif(c === \"=\"){\n\t\tthis._state = BEFORE_ATTRIBUTE_VALUE;\n\t} else if(c === \"/\" || c === \">\"){\n\t\tthis._cbs.onattribend();\n\t\tthis._state = BEFORE_ATTRIBUTE_NAME;\n\t\tthis._index--;\n\t} else if(!whitespace(c)){\n\t\tthis._cbs.onattribend();\n\t\tthis._state = IN_ATTRIBUTE_NAME;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateBeforeAttributeValue = function(c){\n\tif(c === \"\\\"\"){\n\t\tthis._state = IN_ATTRIBUTE_VALUE_DQ;\n\t\tthis._sectionStart = this._index + 1;\n\t} else if(c === \"'\"){\n\t\tthis._state = IN_ATTRIBUTE_VALUE_SQ;\n\t\tthis._sectionStart = this._index + 1;\n\t} else if(!whitespace(c)){\n\t\tthis._state = IN_ATTRIBUTE_VALUE_NQ;\n\t\tthis._sectionStart = this._index;\n\t\tthis._index--; //reconsume token\n\t}\n};\n\nTokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){\n\tif(c === \"\\\"\"){\n\t\tthis._emitToken(\"onattribdata\");\n\t\tthis._cbs.onattribend();\n\t\tthis._state = BEFORE_ATTRIBUTE_NAME;\n\t} else if(this._decodeEntities && c === \"&\"){\n\t\tthis._emitToken(\"onattribdata\");\n\t\tthis._baseState = this._state;\n\t\tthis._state = BEFORE_ENTITY;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){\n\tif(c === \"'\"){\n\t\tthis._emitToken(\"onattribdata\");\n\t\tthis._cbs.onattribend();\n\t\tthis._state = BEFORE_ATTRIBUTE_NAME;\n\t} else if(this._decodeEntities && c === \"&\"){\n\t\tthis._emitToken(\"onattribdata\");\n\t\tthis._baseState = this._state;\n\t\tthis._state = BEFORE_ENTITY;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateInAttributeValueNoQuotes = function(c){\n\tif(whitespace(c) || c === \">\"){\n\t\tthis._emitToken(\"onattribdata\");\n\t\tthis._cbs.onattribend();\n\t\tthis._state = BEFORE_ATTRIBUTE_NAME;\n\t\tthis._index--;\n\t} else if(this._decodeEntities && c === \"&\"){\n\t\tthis._emitToken(\"onattribdata\");\n\t\tthis._baseState = this._state;\n\t\tthis._state = BEFORE_ENTITY;\n\t\tthis._sectionStart = this._index;\n\t}\n};\n\nTokenizer.prototype._stateBeforeDeclaration = function(c){\n\tthis._state = c === \"[\" ? BEFORE_CDATA_1 :\n\t\t\t\t\tc === \"-\" ? BEFORE_COMMENT :\n\t\t\t\t\t\tIN_DECLARATION;\n};\n\nTokenizer.prototype._stateInDeclaration = function(c){\n\tif(c === \">\"){\n\t\tthis._cbs.ondeclaration(this._getSection());\n\t\tthis._state = TEXT;\n\t\tthis._sectionStart = this._index + 1;\n\t}\n};\n\nTokenizer.prototype._stateInProcessingInstruction = function(c){\n\tif(c === \">\"){\n\t\tthis._cbs.onprocessinginstruction(this._getSection());\n\t\tthis._state = TEXT;\n\t\tthis._sectionStart = this._index + 1;\n\t}\n};\n\nTokenizer.prototype._stateBeforeComment = function(c){\n\tif(c === \"-\"){\n\t\tthis._state = IN_COMMENT;\n\t\tthis._sectionStart = this._index + 1;\n\t} else {\n\t\tthis._state = IN_DECLARATION;\n\t}\n};\n\nTokenizer.prototype._stateInComment = function(c){\n\tif(c === \"-\") this._state = AFTER_COMMENT_1;\n};\n\nTokenizer.prototype._stateAfterComment1 = function(c){\n\tif(c === \"-\"){\n\t\tthis._state = AFTER_COMMENT_2;\n\t} else {\n\t\tthis._state = IN_COMMENT;\n\t}\n};\n\nTokenizer.prototype._stateAfterComment2 = function(c){\n\tif(c === \">\"){\n\t\t//remove 2 trailing chars\n\t\tthis._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));\n\t\tthis._state = TEXT;\n\t\tthis._sectionStart = this._index + 1;\n\t} else if(c !== \"-\"){\n\t\tthis._state = IN_COMMENT;\n\t}\n\t// else: stay in AFTER_COMMENT_2 (`--->`)\n};\n\nTokenizer.prototype._stateBeforeCdata1 = ifElseState(\"C\", BEFORE_CDATA_2, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata2 = ifElseState(\"D\", BEFORE_CDATA_3, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata3 = ifElseState(\"A\", BEFORE_CDATA_4, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata4 = ifElseState(\"T\", BEFORE_CDATA_5, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata5 = ifElseState(\"A\", BEFORE_CDATA_6, IN_DECLARATION);\n\nTokenizer.prototype._stateBeforeCdata6 = function(c){\n\tif(c === \"[\"){\n\t\tthis._state = IN_CDATA;\n\t\tthis._sectionStart = this._index + 1;\n\t} else {\n\t\tthis._state = IN_DECLARATION;\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._stateInCdata = function(c){\n\tif(c === \"]\") this._state = AFTER_CDATA_1;\n};\n\nTokenizer.prototype._stateAfterCdata1 = characterState(\"]\", AFTER_CDATA_2);\n\nTokenizer.prototype._stateAfterCdata2 = function(c){\n\tif(c === \">\"){\n\t\t//remove 2 trailing chars\n\t\tthis._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));\n\t\tthis._state = TEXT;\n\t\tthis._sectionStart = this._index + 1;\n\t} else if(c !== \"]\") {\n\t\tthis._state = IN_CDATA;\n\t}\n\t//else: stay in AFTER_CDATA_2 (`]]]>`)\n};\n\nTokenizer.prototype._stateBeforeSpecial = function(c){\n\tif(c === \"c\" || c === \"C\"){\n\t\tthis._state = BEFORE_SCRIPT_1;\n\t} else if(c === \"t\" || c === \"T\"){\n\t\tthis._state = BEFORE_STYLE_1;\n\t} else {\n\t\tthis._state = IN_TAG_NAME;\n\t\tthis._index--; //consume the token again\n\t}\n};\n\nTokenizer.prototype._stateBeforeSpecialEnd = function(c){\n\tif(this._special === SPECIAL_SCRIPT && (c === \"c\" || c === \"C\")){\n\t\tthis._state = AFTER_SCRIPT_1;\n\t} else if(this._special === SPECIAL_STYLE && (c === \"t\" || c === \"T\")){\n\t\tthis._state = AFTER_STYLE_1;\n\t}\n\telse this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar(\"R\", BEFORE_SCRIPT_2);\nTokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar(\"I\", BEFORE_SCRIPT_3);\nTokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar(\"P\", BEFORE_SCRIPT_4);\nTokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar(\"T\", BEFORE_SCRIPT_5);\n\nTokenizer.prototype._stateBeforeScript5 = function(c){\n\tif(c === \"/\" || c === \">\" || whitespace(c)){\n\t\tthis._special = SPECIAL_SCRIPT;\n\t}\n\tthis._state = IN_TAG_NAME;\n\tthis._index--; //consume the token again\n};\n\nTokenizer.prototype._stateAfterScript1 = ifElseState(\"R\", AFTER_SCRIPT_2, TEXT);\nTokenizer.prototype._stateAfterScript2 = ifElseState(\"I\", AFTER_SCRIPT_3, TEXT);\nTokenizer.prototype._stateAfterScript3 = ifElseState(\"P\", AFTER_SCRIPT_4, TEXT);\nTokenizer.prototype._stateAfterScript4 = ifElseState(\"T\", AFTER_SCRIPT_5, TEXT);\n\nTokenizer.prototype._stateAfterScript5 = function(c){\n\tif(c === \">\" || whitespace(c)){\n\t\tthis._special = SPECIAL_NONE;\n\t\tthis._state = IN_CLOSING_TAG_NAME;\n\t\tthis._sectionStart = this._index - 6;\n\t\tthis._index--; //reconsume the token\n\t}\n\telse this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar(\"Y\", BEFORE_STYLE_2);\nTokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar(\"L\", BEFORE_STYLE_3);\nTokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar(\"E\", BEFORE_STYLE_4);\n\nTokenizer.prototype._stateBeforeStyle4 = function(c){\n\tif(c === \"/\" || c === \">\" || whitespace(c)){\n\t\tthis._special = SPECIAL_STYLE;\n\t}\n\tthis._state = IN_TAG_NAME;\n\tthis._index--; //consume the token again\n};\n\nTokenizer.prototype._stateAfterStyle1 = ifElseState(\"Y\", AFTER_STYLE_2, TEXT);\nTokenizer.prototype._stateAfterStyle2 = ifElseState(\"L\", AFTER_STYLE_3, TEXT);\nTokenizer.prototype._stateAfterStyle3 = ifElseState(\"E\", AFTER_STYLE_4, TEXT);\n\nTokenizer.prototype._stateAfterStyle4 = function(c){\n\tif(c === \">\" || whitespace(c)){\n\t\tthis._special = SPECIAL_NONE;\n\t\tthis._state = IN_CLOSING_TAG_NAME;\n\t\tthis._sectionStart = this._index - 5;\n\t\tthis._index--; //reconsume the token\n\t}\n\telse this._state = TEXT;\n};\n\nTokenizer.prototype._stateBeforeEntity = ifElseState(\"#\", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);\nTokenizer.prototype._stateBeforeNumericEntity = ifElseState(\"X\", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);\n\n//for entities terminated with a semicolon\nTokenizer.prototype._parseNamedEntityStrict = function(){\n\t//offset = 1\n\tif(this._sectionStart + 1 < this._index){\n\t\tvar entity = this._buffer.substring(this._sectionStart + 1, this._index),\n\t\t    map = this._xmlMode ? xmlMap : entityMap;\n\n\t\tif(map.hasOwnProperty(entity)){\n\t\t\tthis._emitPartial(map[entity]);\n\t\t\tthis._sectionStart = this._index + 1;\n\t\t}\n\t}\n};\n\n\n//parses legacy entities (without trailing semicolon)\nTokenizer.prototype._parseLegacyEntity = function(){\n\tvar start = this._sectionStart + 1,\n\t    limit = this._index - start;\n\n\tif(limit > 6) limit = 6; //the max length of legacy entities is 6\n\n\twhile(limit >= 2){ //the min length of legacy entities is 2\n\t\tvar entity = this._buffer.substr(start, limit);\n\n\t\tif(legacyMap.hasOwnProperty(entity)){\n\t\t\tthis._emitPartial(legacyMap[entity]);\n\t\t\tthis._sectionStart += limit + 1;\n\t\t\treturn;\n\t\t} else {\n\t\t\tlimit--;\n\t\t}\n\t}\n};\n\nTokenizer.prototype._stateInNamedEntity = function(c){\n\tif(c === \";\"){\n\t\tthis._parseNamedEntityStrict();\n\t\tif(this._sectionStart + 1 < this._index && !this._xmlMode){\n\t\t\tthis._parseLegacyEntity();\n\t\t}\n\t\tthis._state = this._baseState;\n\t} else if((c < \"a\" || c > \"z\") && (c < \"A\" || c > \"Z\") && (c < \"0\" || c > \"9\")){\n\t\tif(this._xmlMode);\n\t\telse if(this._sectionStart + 1 === this._index);\n\t\telse if(this._baseState !== TEXT){\n\t\t\tif(c !== \"=\"){\n\t\t\t\tthis._parseNamedEntityStrict();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._parseLegacyEntity();\n\t\t}\n\n\t\tthis._state = this._baseState;\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._decodeNumericEntity = function(offset, base){\n\tvar sectionStart = this._sectionStart + offset;\n\n\tif(sectionStart !== this._index){\n\t\t//parse entity\n\t\tvar entity = this._buffer.substring(sectionStart, this._index);\n\t\tvar parsed = parseInt(entity, base);\n\n\t\tthis._emitPartial(decodeCodePoint(parsed));\n\t\tthis._sectionStart = this._index;\n\t} else {\n\t\tthis._sectionStart--;\n\t}\n\n\tthis._state = this._baseState;\n};\n\nTokenizer.prototype._stateInNumericEntity = function(c){\n\tif(c === \";\"){\n\t\tthis._decodeNumericEntity(2, 10);\n\t\tthis._sectionStart++;\n\t} else if(c < \"0\" || c > \"9\"){\n\t\tif(!this._xmlMode){\n\t\t\tthis._decodeNumericEntity(2, 10);\n\t\t} else {\n\t\t\tthis._state = this._baseState;\n\t\t}\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._stateInHexEntity = function(c){\n\tif(c === \";\"){\n\t\tthis._decodeNumericEntity(3, 16);\n\t\tthis._sectionStart++;\n\t} else if((c < \"a\" || c > \"f\") && (c < \"A\" || c > \"F\") && (c < \"0\" || c > \"9\")){\n\t\tif(!this._xmlMode){\n\t\t\tthis._decodeNumericEntity(3, 16);\n\t\t} else {\n\t\t\tthis._state = this._baseState;\n\t\t}\n\t\tthis._index--;\n\t}\n};\n\nTokenizer.prototype._cleanup = function (){\n\tif(this._sectionStart < 0){\n\t\tthis._buffer = \"\";\n\t\tthis._bufferOffset += this._index;\n\t\tthis._index = 0;\n\t} else if(this._running){\n\t\tif(this._state === TEXT){\n\t\t\tif(this._sectionStart !== this._index){\n\t\t\t\tthis._cbs.ontext(this._buffer.substr(this._sectionStart));\n\t\t\t}\n\t\t\tthis._buffer = \"\";\n\t\t\tthis._bufferOffset += this._index;\n\t\t\tthis._index = 0;\n\t\t} else if(this._sectionStart === this._index){\n\t\t\t//the section just started\n\t\t\tthis._buffer = \"\";\n\t\t\tthis._bufferOffset += this._index;\n\t\t\tthis._index = 0;\n\t\t} else {\n\t\t\t//remove everything unnecessary\n\t\t\tthis._buffer = this._buffer.substr(this._sectionStart);\n\t\t\tthis._index -= this._sectionStart;\n\t\t\tthis._bufferOffset += this._sectionStart;\n\t\t}\n\n\t\tthis._sectionStart = 0;\n\t}\n};\n\n//TODO make events conditional\nTokenizer.prototype.write = function(chunk){\n\tif(this._ended) this._cbs.onerror(Error(\".write() after done!\"));\n\n\tthis._buffer += chunk;\n\tthis._parse();\n};\n\nTokenizer.prototype._parse = function(){\n\twhile(this._index < this._buffer.length && this._running){\n\t\tvar c = this._buffer.charAt(this._index);\n\t\tif(this._state === TEXT) {\n\t\t\tthis._stateText(c);\n\t\t} else if(this._state === BEFORE_TAG_NAME){\n\t\t\tthis._stateBeforeTagName(c);\n\t\t} else if(this._state === IN_TAG_NAME) {\n\t\t\tthis._stateInTagName(c);\n\t\t} else if(this._state === BEFORE_CLOSING_TAG_NAME){\n\t\t\tthis._stateBeforeCloseingTagName(c);\n\t\t} else if(this._state === IN_CLOSING_TAG_NAME){\n\t\t\tthis._stateInCloseingTagName(c);\n\t\t} else if(this._state === AFTER_CLOSING_TAG_NAME){\n\t\t\tthis._stateAfterCloseingTagName(c);\n\t\t} else if(this._state === IN_SELF_CLOSING_TAG){\n\t\t\tthis._stateInSelfClosingTag(c);\n\t\t}\n\n\t\t/*\n\t\t*\tattributes\n\t\t*/\n\t\telse if(this._state === BEFORE_ATTRIBUTE_NAME){\n\t\t\tthis._stateBeforeAttributeName(c);\n\t\t} else if(this._state === IN_ATTRIBUTE_NAME){\n\t\t\tthis._stateInAttributeName(c);\n\t\t} else if(this._state === AFTER_ATTRIBUTE_NAME){\n\t\t\tthis._stateAfterAttributeName(c);\n\t\t} else if(this._state === BEFORE_ATTRIBUTE_VALUE){\n\t\t\tthis._stateBeforeAttributeValue(c);\n\t\t} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){\n\t\t\tthis._stateInAttributeValueDoubleQuotes(c);\n\t\t} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){\n\t\t\tthis._stateInAttributeValueSingleQuotes(c);\n\t\t} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){\n\t\t\tthis._stateInAttributeValueNoQuotes(c);\n\t\t}\n\n\t\t/*\n\t\t*\tdeclarations\n\t\t*/\n\t\telse if(this._state === BEFORE_DECLARATION){\n\t\t\tthis._stateBeforeDeclaration(c);\n\t\t} else if(this._state === IN_DECLARATION){\n\t\t\tthis._stateInDeclaration(c);\n\t\t}\n\n\t\t/*\n\t\t*\tprocessing instructions\n\t\t*/\n\t\telse if(this._state === IN_PROCESSING_INSTRUCTION){\n\t\t\tthis._stateInProcessingInstruction(c);\n\t\t}\n\n\t\t/*\n\t\t*\tcomments\n\t\t*/\n\t\telse if(this._state === BEFORE_COMMENT){\n\t\t\tthis._stateBeforeComment(c);\n\t\t} else if(this._state === IN_COMMENT){\n\t\t\tthis._stateInComment(c);\n\t\t} else if(this._state === AFTER_COMMENT_1){\n\t\t\tthis._stateAfterComment1(c);\n\t\t} else if(this._state === AFTER_COMMENT_2){\n\t\t\tthis._stateAfterComment2(c);\n\t\t}\n\n\t\t/*\n\t\t*\tcdata\n\t\t*/\n\t\telse if(this._state === BEFORE_CDATA_1){\n\t\t\tthis._stateBeforeCdata1(c);\n\t\t} else if(this._state === BEFORE_CDATA_2){\n\t\t\tthis._stateBeforeCdata2(c);\n\t\t} else if(this._state === BEFORE_CDATA_3){\n\t\t\tthis._stateBeforeCdata3(c);\n\t\t} else if(this._state === BEFORE_CDATA_4){\n\t\t\tthis._stateBeforeCdata4(c);\n\t\t} else if(this._state === BEFORE_CDATA_5){\n\t\t\tthis._stateBeforeCdata5(c);\n\t\t} else if(this._state === BEFORE_CDATA_6){\n\t\t\tthis._stateBeforeCdata6(c);\n\t\t} else if(this._state === IN_CDATA){\n\t\t\tthis._stateInCdata(c);\n\t\t} else if(this._state === AFTER_CDATA_1){\n\t\t\tthis._stateAfterCdata1(c);\n\t\t} else if(this._state === AFTER_CDATA_2){\n\t\t\tthis._stateAfterCdata2(c);\n\t\t}\n\n\t\t/*\n\t\t* special tags\n\t\t*/\n\t\telse if(this._state === BEFORE_SPECIAL){\n\t\t\tthis._stateBeforeSpecial(c);\n\t\t} else if(this._state === BEFORE_SPECIAL_END){\n\t\t\tthis._stateBeforeSpecialEnd(c);\n\t\t}\n\n\t\t/*\n\t\t* script\n\t\t*/\n\t\telse if(this._state === BEFORE_SCRIPT_1){\n\t\t\tthis._stateBeforeScript1(c);\n\t\t} else if(this._state === BEFORE_SCRIPT_2){\n\t\t\tthis._stateBeforeScript2(c);\n\t\t} else if(this._state === BEFORE_SCRIPT_3){\n\t\t\tthis._stateBeforeScript3(c);\n\t\t} else if(this._state === BEFORE_SCRIPT_4){\n\t\t\tthis._stateBeforeScript4(c);\n\t\t} else if(this._state === BEFORE_SCRIPT_5){\n\t\t\tthis._stateBeforeScript5(c);\n\t\t}\n\n\t\telse if(this._state === AFTER_SCRIPT_1){\n\t\t\tthis._stateAfterScript1(c);\n\t\t} else if(this._state === AFTER_SCRIPT_2){\n\t\t\tthis._stateAfterScript2(c);\n\t\t} else if(this._state === AFTER_SCRIPT_3){\n\t\t\tthis._stateAfterScript3(c);\n\t\t} else if(this._state === AFTER_SCRIPT_4){\n\t\t\tthis._stateAfterScript4(c);\n\t\t} else if(this._state === AFTER_SCRIPT_5){\n\t\t\tthis._stateAfterScript5(c);\n\t\t}\n\n\t\t/*\n\t\t* style\n\t\t*/\n\t\telse if(this._state === BEFORE_STYLE_1){\n\t\t\tthis._stateBeforeStyle1(c);\n\t\t} else if(this._state === BEFORE_STYLE_2){\n\t\t\tthis._stateBeforeStyle2(c);\n\t\t} else if(this._state === BEFORE_STYLE_3){\n\t\t\tthis._stateBeforeStyle3(c);\n\t\t} else if(this._state === BEFORE_STYLE_4){\n\t\t\tthis._stateBeforeStyle4(c);\n\t\t}\n\n\t\telse if(this._state === AFTER_STYLE_1){\n\t\t\tthis._stateAfterStyle1(c);\n\t\t} else if(this._state === AFTER_STYLE_2){\n\t\t\tthis._stateAfterStyle2(c);\n\t\t} else if(this._state === AFTER_STYLE_3){\n\t\t\tthis._stateAfterStyle3(c);\n\t\t} else if(this._state === AFTER_STYLE_4){\n\t\t\tthis._stateAfterStyle4(c);\n\t\t}\n\n\t\t/*\n\t\t* entities\n\t\t*/\n\t\telse if(this._state === BEFORE_ENTITY){\n\t\t\tthis._stateBeforeEntity(c);\n\t\t} else if(this._state === BEFORE_NUMERIC_ENTITY){\n\t\t\tthis._stateBeforeNumericEntity(c);\n\t\t} else if(this._state === IN_NAMED_ENTITY){\n\t\t\tthis._stateInNamedEntity(c);\n\t\t} else if(this._state === IN_NUMERIC_ENTITY){\n\t\t\tthis._stateInNumericEntity(c);\n\t\t} else if(this._state === IN_HEX_ENTITY){\n\t\t\tthis._stateInHexEntity(c);\n\t\t}\n\n\t\telse {\n\t\t\tthis._cbs.onerror(Error(\"unknown _state\"), this._state);\n\t\t}\n\n\t\tthis._index++;\n\t}\n\n\tthis._cleanup();\n};\n\nTokenizer.prototype.pause = function(){\n\tthis._running = false;\n};\nTokenizer.prototype.resume = function(){\n\tthis._running = true;\n\n\tif(this._index < this._buffer.length){\n\t\tthis._parse();\n\t}\n\tif(this._ended){\n\t\tthis._finish();\n\t}\n};\n\nTokenizer.prototype.end = function(chunk){\n\tif(this._ended) this._cbs.onerror(Error(\".end() after done!\"));\n\tif(chunk) this.write(chunk);\n\n\tthis._ended = true;\n\n\tif(this._running) this._finish();\n};\n\nTokenizer.prototype._finish = function(){\n\t//if there is remaining data, emit it in a reasonable way\n\tif(this._sectionStart < this._index){\n\t\tthis._handleTrailingData();\n\t}\n\n\tthis._cbs.onend();\n};\n\nTokenizer.prototype._handleTrailingData = function(){\n\tvar data = this._buffer.substr(this._sectionStart);\n\n\tif(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){\n\t\tthis._cbs.oncdata(data);\n\t} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){\n\t\tthis._cbs.oncomment(data);\n\t} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){\n\t\tthis._parseLegacyEntity();\n\t\tif(this._sectionStart < this._index){\n\t\t\tthis._state = this._baseState;\n\t\t\tthis._handleTrailingData();\n\t\t}\n\t} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){\n\t\tthis._decodeNumericEntity(2, 10);\n\t\tif(this._sectionStart < this._index){\n\t\t\tthis._state = this._baseState;\n\t\t\tthis._handleTrailingData();\n\t\t}\n\t} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){\n\t\tthis._decodeNumericEntity(3, 16);\n\t\tif(this._sectionStart < this._index){\n\t\t\tthis._state = this._baseState;\n\t\t\tthis._handleTrailingData();\n\t\t}\n\t} else if(\n\t\tthis._state !== IN_TAG_NAME &&\n\t\tthis._state !== BEFORE_ATTRIBUTE_NAME &&\n\t\tthis._state !== BEFORE_ATTRIBUTE_VALUE &&\n\t\tthis._state !== AFTER_ATTRIBUTE_NAME &&\n\t\tthis._state !== IN_ATTRIBUTE_NAME &&\n\t\tthis._state !== IN_ATTRIBUTE_VALUE_SQ &&\n\t\tthis._state !== IN_ATTRIBUTE_VALUE_DQ &&\n\t\tthis._state !== IN_ATTRIBUTE_VALUE_NQ &&\n\t\tthis._state !== IN_CLOSING_TAG_NAME\n\t){\n\t\tthis._cbs.ontext(data);\n\t}\n\t//else, ignore remaining data\n\t//TODO add a way to remove current tag\n};\n\nTokenizer.prototype.reset = function(){\n\tTokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);\n};\n\nTokenizer.prototype.getAbsoluteIndex = function(){\n\treturn this._bufferOffset + this._index;\n};\n\nTokenizer.prototype._getSection = function(){\n\treturn this._buffer.substring(this._sectionStart, this._index);\n};\n\nTokenizer.prototype._emitToken = function(name){\n\tthis._cbs[name](this._getSection());\n\tthis._sectionStart = -1;\n};\n\nTokenizer.prototype._emitPartial = function(value){\n\tif(this._baseState !== TEXT){\n\t\tthis._cbs.onattribdata(value); //TODO implement the new event\n\t} else {\n\t\tthis._cbs.ontext(value);\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/Tokenizer.js\n// module id = 1217\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/Tokenizer.js?");

/***/ }),
/* 1218 */
/***/ (function(module, exports, __webpack_require__) {

eval("var decodeMap = __webpack_require__(1379);\n\nmodule.exports = decodeCodePoint;\n\n// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119\nfunction decodeCodePoint(codePoint){\n\n\tif((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){\n\t\treturn \"\\uFFFD\";\n\t}\n\n\tif(codePoint in decodeMap){\n\t\tcodePoint = decodeMap[codePoint];\n\t}\n\n\tvar output = \"\";\n\n\tif(codePoint > 0xFFFF){\n\t\tcodePoint -= 0x10000;\n\t\toutput += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);\n\t\tcodePoint = 0xDC00 | codePoint & 0x3FF;\n\t}\n\n\toutput += String.fromCharCode(codePoint);\n\treturn output;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/lib/decode_codepoint.js\n// module id = 1218\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/lib/decode_codepoint.js?");

/***/ }),
/* 1219 */
/***/ (function(module, exports) {

eval("module.exports = {\"Aacute\":\"Á\",\"aacute\":\"á\",\"Acirc\":\"Â\",\"acirc\":\"â\",\"acute\":\"´\",\"AElig\":\"Æ\",\"aelig\":\"æ\",\"Agrave\":\"À\",\"agrave\":\"à\",\"amp\":\"&\",\"AMP\":\"&\",\"Aring\":\"Å\",\"aring\":\"å\",\"Atilde\":\"Ã\",\"atilde\":\"ã\",\"Auml\":\"Ä\",\"auml\":\"ä\",\"brvbar\":\"¦\",\"Ccedil\":\"Ç\",\"ccedil\":\"ç\",\"cedil\":\"¸\",\"cent\":\"¢\",\"copy\":\"©\",\"COPY\":\"©\",\"curren\":\"¤\",\"deg\":\"°\",\"divide\":\"÷\",\"Eacute\":\"É\",\"eacute\":\"é\",\"Ecirc\":\"Ê\",\"ecirc\":\"ê\",\"Egrave\":\"È\",\"egrave\":\"è\",\"ETH\":\"Ð\",\"eth\":\"ð\",\"Euml\":\"Ë\",\"euml\":\"ë\",\"frac12\":\"½\",\"frac14\":\"¼\",\"frac34\":\"¾\",\"gt\":\">\",\"GT\":\">\",\"Iacute\":\"Í\",\"iacute\":\"í\",\"Icirc\":\"Î\",\"icirc\":\"î\",\"iexcl\":\"¡\",\"Igrave\":\"Ì\",\"igrave\":\"ì\",\"iquest\":\"¿\",\"Iuml\":\"Ï\",\"iuml\":\"ï\",\"laquo\":\"«\",\"lt\":\"<\",\"LT\":\"<\",\"macr\":\"¯\",\"micro\":\"µ\",\"middot\":\"·\",\"nbsp\":\" \",\"not\":\"¬\",\"Ntilde\":\"Ñ\",\"ntilde\":\"ñ\",\"Oacute\":\"Ó\",\"oacute\":\"ó\",\"Ocirc\":\"Ô\",\"ocirc\":\"ô\",\"Ograve\":\"Ò\",\"ograve\":\"ò\",\"ordf\":\"ª\",\"ordm\":\"º\",\"Oslash\":\"Ø\",\"oslash\":\"ø\",\"Otilde\":\"Õ\",\"otilde\":\"õ\",\"Ouml\":\"Ö\",\"ouml\":\"ö\",\"para\":\"¶\",\"plusmn\":\"±\",\"pound\":\"£\",\"quot\":\"\\\"\",\"QUOT\":\"\\\"\",\"raquo\":\"»\",\"reg\":\"®\",\"REG\":\"®\",\"sect\":\"§\",\"shy\":\"­\",\"sup1\":\"¹\",\"sup2\":\"²\",\"sup3\":\"³\",\"szlig\":\"ß\",\"THORN\":\"Þ\",\"thorn\":\"þ\",\"times\":\"×\",\"Uacute\":\"Ú\",\"uacute\":\"ú\",\"Ucirc\":\"Û\",\"ucirc\":\"û\",\"Ugrave\":\"Ù\",\"ugrave\":\"ù\",\"uml\":\"¨\",\"Uuml\":\"Ü\",\"uuml\":\"ü\",\"Yacute\":\"Ý\",\"yacute\":\"ý\",\"yen\":\"¥\",\"yuml\":\"ÿ\"}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/legacy.json\n// module id = 1219\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/legacy.json?");

/***/ }),
/* 1220 */
/***/ (function(module, exports) {

eval("// This object will be used as the prototype for Nodes when creating a\n// DOM-Level-1-compliant structure.\nvar NodePrototype = module.exports = {\n\tget firstChild() {\n\t\tvar children = this.children;\n\t\treturn children && children[0] || null;\n\t},\n\tget lastChild() {\n\t\tvar children = this.children;\n\t\treturn children && children[children.length - 1] || null;\n\t},\n\tget nodeType() {\n\t\treturn nodeTypes[this.type] || nodeTypes.element;\n\t}\n};\n\nvar domLvl1 = {\n\ttagName: \"name\",\n\tchildNodes: \"children\",\n\tparentNode: \"parent\",\n\tpreviousSibling: \"prev\",\n\tnextSibling: \"next\",\n\tnodeValue: \"data\"\n};\n\nvar nodeTypes = {\n\telement: 1,\n\ttext: 3,\n\tcdata: 4,\n\tcomment: 8\n};\n\nObject.keys(domLvl1).forEach(function(key) {\n\tvar shorthand = domLvl1[key];\n\tObject.defineProperty(NodePrototype, key, {\n\t\tget: function() {\n\t\t\treturn this[shorthand] || null;\n\t\t},\n\t\tset: function(val) {\n\t\t\tthis[shorthand] = val;\n\t\t\treturn val;\n\t\t}\n\t});\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domhandler/lib/node.js\n// module id = 1220\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domhandler/lib/node.js?");

/***/ }),
/* 1221 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = Stream;\n\nvar Parser = __webpack_require__(1216),\n    WritableStream = __webpack_require__(1384).Writable || __webpack_require__(1397).Writable,\n    StringDecoder = __webpack_require__(1102).StringDecoder,\n    Buffer = __webpack_require__(1100).Buffer;\n\nfunction Stream(cbs, options){\n\tvar parser = this._parser = new Parser(cbs, options);\n\tvar decoder = this._decoder = new StringDecoder();\n\n\tWritableStream.call(this, {decodeStrings: false});\n\n\tthis.once(\"finish\", function(){\n\t\tparser.end(decoder.end());\n\t});\n}\n\n__webpack_require__(44)(Stream, WritableStream);\n\nWritableStream.prototype._write = function(chunk, encoding, cb){\n\tif(chunk instanceof Buffer) chunk = this._decoder.write(chunk);\n\tthis._parser.write(chunk);\n\tcb();\n};\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/WritableStream.js\n// module id = 1221\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/WritableStream.js?");

/***/ }),
/* 1222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(690);\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = __webpack_require__(1223);\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = __webpack_require__(227).EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = __webpack_require__(1224);\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(691).Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = __webpack_require__(567);\nutil.inherits = __webpack_require__(44);\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = __webpack_require__(1387);\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = __webpack_require__(1388);\nvar destroyImpl = __webpack_require__(1225);\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(329);\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = __webpack_require__(1102).StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(329);\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = __webpack_require__(1102).StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(137)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_readable.js\n// module id = 1222\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_readable.js?");

/***/ }),
/* 1223 */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/isarray/index.js\n// module id = 1223\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/isarray/index.js?");

/***/ }),
/* 1224 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(227).EventEmitter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/internal/streams/stream-browser.js\n// module id = 1224\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/internal/streams/stream-browser.js?");

/***/ }),
/* 1225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(690);\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/internal/streams/destroy.js\n// module id = 1225\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/internal/streams/destroy.js?");

/***/ }),
/* 1226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\n\nmodule.exports = Transform;\n\nvar Duplex = __webpack_require__(329);\n\n/*<replacement>*/\nvar util = __webpack_require__(567);\nutil.inherits = __webpack_require__(44);\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_transform.js\n// module id = 1226\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_transform.js?");

/***/ }),
/* 1227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/getLinkStatistics */\n\nvar getAnchors = __webpack_require__(1213);\nvar map = __webpack_require__(63);\nvar url = __webpack_require__(1096);\n/**\n * Checks a text for anchors and returns the number found.\n *\n * @param {Object} paper The paper to get the text from.\n * @returns {Array} An array with the anchors\n */\nmodule.exports = function (paper) {\n  var anchors = getAnchors(paper.getText());\n  return map(anchors, url.getFromAnchorTag);\n};\n//# sourceMappingURL=getLinks.js.map\n//# sourceMappingURL=getLinks.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getLinks.js\n// module id = 1227\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getLinks.js?");

/***/ }),
/* 1228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/stripNonTextTags */\n\nvar stripSpaces = __webpack_require__(84);\n/**\n * Strips all tags from the text, except li, p, dd and h1-h6 tags from the text that contain content to check.\n *\n * @param {string} text The text to strip tags from\n * @returns {string} The text stripped of tags, except for li, p, dd and h1-h6 tags.\n */\nmodule.exports = function (text) {\n  text = text.replace(/<(?!li|\\/li|p|\\/p|h1|\\/h1|h2|\\/h2|h3|\\/h3|h4|\\/h4|h5|\\/h5|h6|\\/h6|dd).*?>/g, \"\");\n  text = stripSpaces(text);\n  return text;\n};\n//# sourceMappingURL=stripNonTextTags.js.map\n//# sourceMappingURL=stripNonTextTags.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripNonTextTags.js\n// module id = 1228\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripNonTextTags.js?");

/***/ }),
/* 1229 */
/***/ (function(module, exports, __webpack_require__) {

eval("var SetCache = __webpack_require__(708),\n    arrayIncludes = __webpack_require__(1125),\n    arrayIncludesWith = __webpack_require__(1126),\n    cacheHas = __webpack_require__(709),\n    createSet = __webpack_require__(1423),\n    setToArray = __webpack_require__(1087);\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseUniq.js\n// module id = 1229\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseUniq.js?");

/***/ }),
/* 1230 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFindIndex.js\n// module id = 1230\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseFindIndex.js?");

/***/ }),
/* 1231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar stopwords = __webpack_require__(1426)();\nvar toRegex = __webpack_require__(1282);\n/**\n * Checks a text to see if there are any stopwords, that are defined in the stopwords config.\n *\n * @param {string} text The input text to match stopwords.\n * @returns {Array} An array with all stopwords found in the text.\n */\nmodule.exports = function (text) {\n    var i,\n        matches = [];\n    for (i = 0; i < stopwords.length; i++) {\n        if (text.match(toRegex(stopwords[i])) !== null) {\n            matches.push(stopwords[i]);\n        }\n    }\n    return matches;\n};\n//# sourceMappingURL=stopWordsInText.js.map\n//# sourceMappingURL=stopWordsInText.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/stopWordsInText.js\n// module id = 1231\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/stopWordsInText.js?");

/***/ }),
/* 1232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/replaceDiacritics */\n\nvar diacriticsRemovalMap = __webpack_require__(1427);\n/**\n * Replaces all diacritics from the text based on the diacritics removal map.\n *\n * @param {string} text The text to remove diacritics from.\n * @returns {string} The text with all diacritics replaced.\n */\nmodule.exports = function (text) {\n    var map = diacriticsRemovalMap();\n    for (var i = 0; i < map.length; i++) {\n        text = text.replace(map[i].letters, map[i].base);\n    }\n    return text;\n};\n//# sourceMappingURL=replaceDiacritics.js.map\n//# sourceMappingURL=replaceDiacritics.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/replaceDiacritics.js\n// module id = 1232\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/replaceDiacritics.js?");

/***/ }),
/* 1233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/sanitizeString */\n\nvar stripTags = __webpack_require__(167).stripFullTags;\nvar stripSpaces = __webpack_require__(84);\n/**\n * Strip HTMLtags characters from string that break regex\n *\n * @param {String} text The text to strip the characters from.\n * @returns {String} The text without characters.\n */\nmodule.exports = function (text) {\n  text = stripTags(text);\n  text = stripSpaces(text);\n  return text;\n};\n//# sourceMappingURL=sanitizeString.js.map\n//# sourceMappingURL=sanitizeString.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/sanitizeString.js\n// module id = 1233\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/sanitizeString.js?");

/***/ }),
/* 1234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/countSyllables */\n\nvar syllableMatchers = __webpack_require__(1432);\nvar getWords = __webpack_require__(229);\nvar forEach = __webpack_require__(32);\nvar filter = __webpack_require__(112);\nvar find = __webpack_require__(1105);\nvar isUndefined = __webpack_require__(66);\nvar map = __webpack_require__(63);\nvar sum = __webpack_require__(1283);\nvar memoize = __webpack_require__(214);\nvar flatMap = __webpack_require__(586);\nvar SyllableCountIterator = __webpack_require__(1442);\nvar DeviationFragment = __webpack_require__(1444);\n/**\n * Counts vowel groups inside a word.\n *\n * @param {string} word A text with words to count syllables.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} the syllable count.\n */\nvar countVowelGroups = function countVowelGroups(word, locale) {\n    var numberOfSyllables = 0;\n    var vowelRegex = new RegExp(\"[^\" + syllableMatchers(locale).vowels + \"]\", \"ig\");\n    var foundVowels = word.split(vowelRegex);\n    var filteredWords = filter(foundVowels, function (vowel) {\n        return vowel !== \"\";\n    });\n    numberOfSyllables += filteredWords.length;\n    return numberOfSyllables;\n};\n/**\n * Counts the syllables using vowel exclusions. These are used for groups of vowels that are more or less\n * than 1 syllable.\n *\n * @param {String} word The word to count syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found in the given word.\n */\nvar countVowelDeviations = function countVowelDeviations(word, locale) {\n    var syllableCountIterator = new SyllableCountIterator(syllableMatchers(locale));\n    return syllableCountIterator.countSyllables(word);\n};\n/**\n * Returns the number of syllables for the word if it is in the list of full word deviations.\n *\n * @param {String} word The word to retrieve the syllables for.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found.\n */\nvar countFullWordDeviations = function countFullWordDeviations(word, locale) {\n    var fullWordDeviations = syllableMatchers(locale).deviations.words.full;\n    var deviation = find(fullWordDeviations, function (fullWordDeviation) {\n        return fullWordDeviation.word === word;\n    });\n    if (!isUndefined(deviation)) {\n        return deviation.syllables;\n    }\n    return 0;\n};\n/**\n * Creates an array of deviation fragments for a certain locale.\n *\n * @param {Object} syllableConfig Syllable config for a certain locale.\n * @returns {DeviationFragment[]} A list of deviation fragments\n */\nfunction createDeviationFragments(syllableConfig) {\n    var deviationFragments = [];\n    var deviations = syllableConfig.deviations;\n    if (!isUndefined(deviations.words) && !isUndefined(deviations.words.fragments)) {\n        deviationFragments = flatMap(deviations.words.fragments, function (fragments, fragmentLocation) {\n            return map(fragments, function (fragment) {\n                fragment.location = fragmentLocation;\n                return new DeviationFragment(fragment);\n            });\n        });\n    }\n    return deviationFragments;\n}\nvar createDeviationFragmentsMemoized = memoize(createDeviationFragments);\n/**\n * Counts syllables in partial exclusions. If these are found, returns the number of syllables  found, and the modified word.\n * The word is modified so the excluded part isn't counted by the normal syllable counter.\n *\n * @param {String} word The word to count syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {object} The number of syllables found and the modified word.\n */\nvar countPartialWordDeviations = function countPartialWordDeviations(word, locale) {\n    var deviationFragments = createDeviationFragmentsMemoized(syllableMatchers(locale));\n    var remainingParts = word;\n    var syllableCount = 0;\n    forEach(deviationFragments, function (deviationFragment) {\n        if (deviationFragment.occursIn(remainingParts)) {\n            remainingParts = deviationFragment.removeFrom(remainingParts);\n            syllableCount += deviationFragment.getSyllables();\n        }\n    });\n    return { word: remainingParts, syllableCount: syllableCount };\n};\n/**\n * Count the number of syllables in a word, using vowels and exceptions.\n *\n * @param {String} word The word to count the number of syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found in a word.\n */\nvar countUsingVowels = function countUsingVowels(word, locale) {\n    var syllableCount = 0;\n    syllableCount += countVowelGroups(word, locale);\n    syllableCount += countVowelDeviations(word, locale);\n    return syllableCount;\n};\n/**\n * Counts the number of syllables in a word.\n *\n * @param {string} word The word to count syllables of.\n * @param {string} locale The locale of the word.\n * @returns {number} The syllable count for the word.\n */\nvar countSyllablesInWord = function countSyllablesInWord(word, locale) {\n    var syllableCount = 0;\n    var fullWordExclusion = countFullWordDeviations(word, locale);\n    if (fullWordExclusion !== 0) {\n        return fullWordExclusion;\n    }\n    var partialExclusions = countPartialWordDeviations(word, locale);\n    word = partialExclusions.word;\n    syllableCount += partialExclusions.syllableCount;\n    syllableCount += countUsingVowels(word, locale);\n    return syllableCount;\n};\n/**\n * Counts the number of syllables in a text per word based on vowels.\n * Uses exclusion words for words that cannot be matched with vowel matching.\n *\n * @param {String} text The text to count the syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {int} The total number of syllables found in the text.\n */\nvar countSyllablesInText = function countSyllablesInText(text, locale) {\n    text = text.toLocaleLowerCase();\n    var words = getWords(text);\n    var syllableCounts = map(words, function (word) {\n        return countSyllablesInWord(word, locale);\n    });\n    return sum(syllableCounts);\n};\nmodule.exports = countSyllablesInText;\n//# sourceMappingURL=count.js.map\n//# sourceMappingURL=count.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/syllables/count.js\n// module id = 1234\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/syllables/count.js?");

/***/ }),
/* 1235 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFindIndex = __webpack_require__(1230),\n    baseIteratee = __webpack_require__(267),\n    toInteger = __webpack_require__(692);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/findIndex.js\n// module id = 1235\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/findIndex.js?");

/***/ }),
/* 1236 */
/***/ (function(module, exports, __webpack_require__) {

eval("var toNumber = __webpack_require__(1127);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toFinite.js\n// module id = 1236\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toFinite.js?");

/***/ }),
/* 1237 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFlatten = __webpack_require__(587);\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/flatten.js\n// module id = 1237\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/flatten.js?");

/***/ }),
/* 1238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module researches/imageInText */\n\nvar imageInText = __webpack_require__(1239);\n/**\n * Checks the amount of images in the text.\n *\n * @param {Paper} paper The paper to check for images\n * @returns {number} The amount of found images\n */\nmodule.exports = function (paper) {\n  return imageInText(paper.getText()).length;\n};\n//# sourceMappingURL=imageCountInText.js.map\n//# sourceMappingURL=imageCountInText.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/imageCountInText.js\n// module id = 1238\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/imageCountInText.js?");

/***/ }),
/* 1239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/imageInText */\n\nvar matchStringWithRegex = __webpack_require__(1451);\n/**\n * Checks the text for images.\n *\n * @param {string} text The textstring to check for images\n * @returns {Array} Array containing all types of found images\n */\nmodule.exports = function (text) {\n  return matchStringWithRegex(text, \"<img(?:[^>]+)?>\");\n};\n//# sourceMappingURL=imageInText.js.map\n//# sourceMappingURL=imageInText.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/imageInText.js\n// module id = 1239\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/imageInText.js?");

/***/ }),
/* 1240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar map = __webpack_require__(63);\nvar flatMap = __webpack_require__(586);\nvar filter = __webpack_require__(112);\nvar getBlocks = __webpack_require__(684).getBlocks;\n/**\n * Matches the paragraphs in <p>-tags and returns the text in them.\n * @param {string} text The text to match paragraph in.\n * @returns {array} An array containing all paragraphs texts.\n */\nvar getParagraphsInTags = function getParagraphsInTags(text) {\n    var paragraphs = [];\n    // Matches everything between the <p> and </p> tags.\n    var regex = /<p(?:[^>]+)?>(.*?)<\\/p>/ig;\n    var match;\n    while ((match = regex.exec(text)) !== null) {\n        paragraphs.push(match);\n    }\n    // Returns only the text from within the paragraph tags.\n    return map(paragraphs, function (paragraph) {\n        return paragraph[1];\n    });\n};\n/**\n * Returns an array with all paragraphs from the text.\n * @param {string} text The text to match paragraph in.\n * @returns {Array} The array containing all paragraphs from the text.\n */\nmodule.exports = function (text) {\n    var paragraphs = getParagraphsInTags(text);\n    if (paragraphs.length > 0) {\n        return paragraphs;\n    }\n    // If no <p> tags found, split on double linebreaks.\n    var blocks = getBlocks(text);\n    blocks = filter(blocks, function (block) {\n        // Match explicit paragraph tags, or if a block has no HTML tags.\n        return 0 !== block.indexOf(\"<h\");\n    });\n    paragraphs = flatMap(blocks, function (block) {\n        return block.split(\"\\n\\n\");\n    });\n    if (paragraphs.length > 0) {\n        return paragraphs;\n    }\n    // If no paragraphs are found, return an array containing the entire text.\n    return [text];\n};\n//# sourceMappingURL=matchParagraphs.js.map\n//# sourceMappingURL=matchParagraphs.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchParagraphs.js\n// module id = 1240\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchParagraphs.js?");

/***/ }),
/* 1241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar wordCount = __webpack_require__(185);\nvar forEach = __webpack_require__(32);\nvar stripHTMLTags = __webpack_require__(167).stripFullTags;\n/**\n * Returns an array with the number of words in a sentence.\n * @param {Array} sentences Array with sentences from text.\n * @returns {Array} Array with amount of words in each sentence.\n */\nmodule.exports = function (sentences) {\n    var sentencesWordCount = [];\n    forEach(sentences, function (sentence) {\n        // For counting words we want to omit the HTMLtags.\n        var strippedSentence = stripHTMLTags(sentence);\n        var length = wordCount(strippedSentence);\n        if (length <= 0) {\n            return;\n        }\n        sentencesWordCount.push({\n            sentence: sentence,\n            sentenceLength: wordCount(sentence)\n        });\n    });\n    return sentencesWordCount;\n};\n//# sourceMappingURL=sentencesLength.js.map\n//# sourceMappingURL=sentencesLength.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/sentencesLength.js\n// module id = 1241\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/sentencesLength.js?");

/***/ }),
/* 1242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/transitionWords */\n\nvar singleWords = [\"accordingly\", \"additionally\", \"afterward\", \"afterwards\", \"albeit\", \"also\", \"although\", \"altogether\", \"another\", \"basically\", \"because\", \"before\", \"besides\", \"but\", \"certainly\", \"chiefly\", \"comparatively\", \"concurrently\", \"consequently\", \"contrarily\", \"conversely\", \"correspondingly\", \"despite\", \"doubtedly\", \"during\", \"e.g.\", \"earlier\", \"emphatically\", \"equally\", \"especially\", \"eventually\", \"evidently\", \"explicitly\", \"finally\", \"firstly\", \"following\", \"formerly\", \"forthwith\", \"fourthly\", \"further\", \"furthermore\", \"generally\", \"hence\", \"henceforth\", \"however\", \"i.e.\", \"identically\", \"indeed\", \"instead\", \"last\", \"lastly\", \"later\", \"lest\", \"likewise\", \"markedly\", \"meanwhile\", \"moreover\", \"nevertheless\", \"nonetheless\", \"nor\", \"notwithstanding\", \"obviously\", \"occasionally\", \"otherwise\", \"overall\", \"particularly\", \"presently\", \"previously\", \"rather\", \"regardless\", \"secondly\", \"shortly\", \"significantly\", \"similarly\", \"simultaneously\", \"since\", \"so\", \"soon\", \"specifically\", \"still\", \"straightaway\", \"subsequently\", \"surely\", \"surprisingly\", \"than\", \"then\", \"thereafter\", \"therefore\", \"thereupon\", \"thirdly\", \"though\", \"thus\", \"till\", \"undeniably\", \"undoubtedly\", \"unless\", \"unlike\", \"unquestionably\", \"until\", \"when\", \"whenever\", \"whereas\", \"while\"];\nvar multipleWords = [\"above all\", \"after all\", \"after that\", \"all in all\", \"all of a sudden\", \"all things considered\", \"analogous to\", \"although this may be true\", \"analogous to\", \"another key point\", \"as a matter of fact\", \"as a result\", \"as an illustration\", \"as can be seen\", \"as has been noted\", \"as I have noted\", \"as I have said\", \"as I have shown\", \"as long as\", \"as much as\", \"as shown above\", \"as soon as\", \"as well as\", \"at any rate\", \"at first\", \"at last\", \"at least\", \"at length\", \"at the present time\", \"at the same time\", \"at this instant\", \"at this point\", \"at this time\", \"balanced against\", \"being that\", \"by all means\", \"by and large\", \"by comparison\", \"by the same token\", \"by the time\", \"compared to\", \"be that as it may\", \"coupled with\", \"different from\", \"due to\", \"equally important\", \"even if\", \"even more\", \"even so\", \"even though\", \"first thing to remember\", \"for example\", \"for fear that\", \"for instance\", \"for one thing\", \"for that reason\", \"for the most part\", \"for the purpose of\", \"for the same reason\", \"for this purpose\", \"for this reason\", \"from time to time\", \"given that\", \"given these points\", \"important to realize\", \"in a word\", \"in addition\", \"in another case\", \"in any case\", \"in any event\", \"in brief\", \"in case\", \"in conclusion\", \"in contrast\", \"in detail\", \"in due time\", \"in effect\", \"in either case\", \"in essence\", \"in fact\", \"in general\", \"in light of\", \"in like fashion\", \"in like manner\", \"in order that\", \"in order to\", \"in other words\", \"in particular\", \"in reality\", \"in short\", \"in similar fashion\", \"in spite of\", \"in sum\", \"in summary\", \"in that case\", \"in the event that\", \"in the final analysis\", \"in the first place\", \"in the fourth place\", \"in the hope that\", \"in the light of\", \"in the long run\", \"in the meantime\", \"in the same fashion\", \"in the same way\", \"in the second place\", \"in the third place\", \"in this case\", \"in this situation\", \"in time\", \"in truth\", \"in view of\", \"inasmuch as\", \"most compelling evidence\", \"most important\", \"must be remembered\", \"not to mention\", \"now that\", \"of course\", \"on account of\", \"on balance\", \"on condition that\", \"on one hand\", \"on the condition that\", \"on the contrary\", \"on the negative side\", \"on the other hand\", \"on the positive side\", \"on the whole\", \"on this occasion\", \"once\", \"once in a while\", \"only if\", \"owing to\", \"point often overlooked\", \"prior to\", \"provided that\", \"seeing that\", \"so as to\", \"so far\", \"so long as\", \"so that\", \"sooner or later\", \"such as\", \"summing up\", \"take the case of\", \"that is\", \"that is to say\", \"then again\", \"this time\", \"to be sure\", \"to begin with\", \"to clarify\", \"to conclude\", \"to demonstrate\", \"to emphasize\", \"to enumerate\", \"to explain\", \"to illustrate\", \"to list\", \"to point out\", \"to put it another way\", \"to put it differently\", \"to repeat\", \"to rephrase it\", \"to say nothing of\", \"to sum up\", \"to summarize\", \"to that end\", \"to the end that\", \"to this end\", \"together with\", \"under those circumstances\", \"until now\", \"up against\", \"up to the present time\", \"vis a vis\", \"what's more\", \"while it may be true\", \"while this may be true\", \"with attention to\", \"with the result that\", \"with this in mind\", \"with this intention\", \"with this purpose in mind\", \"without a doubt\", \"without delay\", \"without doubt\", \"without reservation\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/transitionWords.js\n// module id = 1242\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/transitionWords.js?");

/***/ }),
/* 1243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/transitionWords */\n\nvar singleWords = [\"aber\", \"abschließend\", \"abschliessend\", \"alldieweil\", \"allerdings\", \"also\", \"anderenteils\", \"andererseits\", \"andernteils\", \"anfaenglich\", \"anfänglich\", \"anfangs\", \"angenommen\", \"anschliessend\", \"anschließend\", \"aufgrund\", \"ausgenommen\", \"ausserdem\", \"außerdem\", \"beispielsweise\", \"bevor\", \"beziehungsweise\", \"bspw\", \"bzw\", \"d.h\", \"da\", \"dabei\", \"dadurch\", \"dafuer\", \"dafür\", \"dagegen\", \"daher\", \"dahingegen\", \"danach\", \"dann\", \"darauf\", \"darum\", \"dass\", \"davor\", \"dazu\", \"dementgegen\", \"dementsprechend\", \"demgegenüber\", \"demgegenueber\", \"demgemaess\", \"demgemäß\", \"demzufolge\", \"denn\", \"dennoch\", \"dergestalt\", \"desto\", \"deshalb\", \"desungeachtet\", \"deswegen\", \"doch\", \"dort\", \"drittens\", \"ebenfalls\", \"ebenso\", \"endlich\", \"ehe\", \"einerseits\", \"einesteils\", \"entsprechend\", \"entweder\", \"erst\", \"erstens\", \"falls\", \"ferner\", \"folgerichtig\", \"folglich\", \"fürderhin\", \"fuerderhin\", \"genauso\", \"hierdurch\", \"hierzu\", \"hingegen\", \"immerhin\", \"indem\", \"indes\", \"indessen\", \"infolge\", \"infolgedessen\", \"insofern\", \"insoweit\", \"inzwischen\", \"jedenfalls\", \"jedoch\", \"kurzum\", \"m.a.w\", \"mitnichten\", \"mitunter\", \"möglicherweise\", \"moeglicherweise\", \"nachdem\", \"nebenher\", \"nichtsdestotrotz\", \"nichtsdestoweniger\", \"ob\", \"obenrein\", \"obgleich\", \"obschon\", \"obwohl\", \"obzwar\", \"ohnehin\", \"richtigerweise\", \"schliesslich\", \"schließlich\", \"seit\", \"seitdem\", \"sobald\", \"sodass\", \"so dass\", \"sofern\", \"sogar\", \"solang\", \"solange\", \"somit\", \"sondern\", \"sooft\", \"soviel\", \"soweit\", \"sowie\", \"sowohl\", \"statt\", \"stattdessen\", \"trotz\", \"trotzdem\", \"überdies\", \"übrigens\", \"ueberdies\", \"uebrigens\", \"ungeachtet\", \"vielmehr\", \"vorausgesetzt\", \"vorher\", \"waehrend\", \"während\", \"währenddessen\", \"waehrenddessen\", \"weder\", \"wegen\", \"weil\", \"weiter\", \"weiterhin\", \"wenn\", \"wenngleich\", \"wennschon\", \"wennzwar\", \"weshalb\", \"widrigenfalls\", \"wiewohl\", \"wobei\", \"wohingegen\", \"z.b\", \"zudem\", \"zuerst\", \"zufolge\", \"zuletzt\", \"zumal\", \"zuvor\", \"zwar\", \"zweitens\"];\nvar multipleWords = [\"abgesehen von\", \"abgesehen davon\", \"als dass\", \"als wenn\", \"anders ausgedrückt\", \"anders ausgedrueckt\", \"anders formuliert\", \"anders gefasst\", \"anders gefragt\", \"anders gesagt\", \"anders gesprochen\", \"anstatt dass\", \"auch wenn\", \"auf grund\", \"auf jeden fall\", \"aus diesem grund\", \"ausser dass\", \"außer dass\", \"ausser wenn\", \"außer wenn\", \"besser ausgedrückt\", \"besser ausgedrueckt\", \"besser formuliert\", \"besser gesagt\", \"besser gesprochen\", \"bloss dass\", \"bloß dass\", \"das heisst\", \"das heißt\", \"des weiteren\", \"dessen ungeachtet\", \"ebenso wie\", \"genauso wie\", \"geschweige denn\", \"im fall\", \"im falle\", \"im folgenden\", \"im gegensatz dazu\", \"im grunde genommen\", \"in diesem sinne\", \"je nachdem\", \"kurz gesagt\", \"mit anderen worten\", \"ohne dass\", \"so dass\", \"umso mehr als\", \"umso weniger als\", \"umso mehr, als\", \"umso weniger, als\", \"unbeschadet dessen\", \"und zwar\", \"ungeachtet dessen\", \"unter dem strich\", \"zum beispiel\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/transitionWords.js\n// module id = 1243\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/transitionWords.js?");

/***/ }),
/* 1244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/transitionWords */\n\nvar singleWords = [\"ainsi\", \"alors\", \"aussi\", \"car\", \"cependant\", \"certainement\", \"certes\", \"conséquemment\", \"d'abord\", \"d'ailleurs\", \"d'après\", \"davantage\", \"désormais\", \"deuxièmement\", \"donc\", \"dorénavant\", \"effectivement\", \"également\", \"enfin\", \"ensuite\", \"entre-temps\", \"essentiellement\", \"excepté\", \"finalement\", \"globalement\", \"jusqu'ici\", \"là-dessus\", \"lorsque\", \"mais\", \"malgré\", \"néanmoins\", \"notamment\", \"partant\", \"plutôt\", \"pourtant\", \"précédemment\", \"premièrement\", \"probablement\", \"puis\", \"puisque\", \"quoique\", \"sauf\", \"selon\", \"semblablement\", \"sinon\", \"suivant\", \"toutefois\", \"troisièmement\"];\nvar multipleWords = [\"à cause de\", \"à ce jour\", \"à ce propos\", \"à ce sujet\", \"à cet égard\", \"à cette fin\", \"à compter de\", \"à condition que\", \"à défaut de\", \"à force de\", \"à juste titre\", \"à la lumière de\", \"à la suite de\", \"à l'aide de\", \"à l'appui de\", \"à l'encontre de\", \"à l'époque actuelle\", \"à l'exception de\", \"à l'exclusion de\", \"à l'heure actuelle\", \"à l'image de\", \"à l'instar de\", \"à l'inverse\", \"à l'inverse de\", \"à l'opposé\", \"à la condition que\", \"à mesure que\", \"à moins que\", \"à nouveau\", \"à partir de\", \"à première vue\", \"à savoir\", \"à seule fin que\", \"à supposer que\", \"à tel point que\", \"à tout prendre\", \"à vrai dire\", \"afin de\", \"afin d'attirer l'attention sur\", \"afin que\", \"ainsi donc\", \"ainsi que\", \"alors que\", \"antérieurement\", \"après cela\", \"après quoi\", \"après que\", \"après réflexion\", \"après tout\", \"attendu que\", \"au cas où\", \"au contraire\", \"au fond\", \"au fur et à mesure\", \"au lieu de\", \"au même temps\", \"au moment où\", \"au moyen de\", \"au point que\", \"au risque de\", \"au surplus\", \"au total\", \"aussi bien que\", \"aussitôt que\", \"autant que\", \"autrement dit\", \"avant que\", \"avant tout\", \"ayant fini\", \"bien que\", \"c'est à dire que\", \"c'est ainsi que\", \"c'est dans ce but que\", \"c'est dire\", \"c'est le cas de\", \"c'est pour cela que\", \"c'est la raison pour laquelle\", \"c'est pourquoi\", \"c'est qu'en effet\", \"c'est-à-dire\", \"ça confirme que\", \"ça montre que\", \"ça prouve que\", \"cela étant\", \"cela dit\", \"cependant que\", \"compte tenu\", \"comme l'illustre\", \"comme le souligne\", \"comme on pouvait s'y attendre\", \"comme quoi\", \"comme si\", \"commençons par examiner\", \"comparativement à\", \"conformément à\", \"contrairement à\", \"considérons par exemple\", \"d'autant plus\", \"d'autant que\", \"d'autre part\", \"d'ici là\", \"d'où\", \"d'un autre côté\", \"d'un côté\", \"d'une façon générale\", \"dans ce cas\", \"dans ces conditions\", \"dans cet esprit\", \"dans l'ensemble\", \"dans l'état actuel des choses\", \"dans l'éventualité où\", \"dans l'hypothèse où\", \"dans la mesure où\", \"dans le but de\", \"dans le cadre de\", \"dans le cas où\", \"dans les circonstances actuelles\", \"dans les grandes lignes\", \"dans un autre ordre d'idée\", \"dans un délai de\", \"de ce fait\", \"de cette façon\", \"de crainte que\", \"de façon à\", \"de façon à ce que\", \"de façon que\", \"de fait\", \"de l'autre côté\", \"de la même manière\", \"de la même façon que\", \"de manière que\", \"de même\", \"de même qu'à\", \"de même que\", \"de nos jours\", \"de peur que\", \"de prime abord\", \"de sorte que\", \"de surcroît\", \"de telle manière que\", \"de telle sorte que\", \"de toute évidence\", \"de toute façon\", \"de toute manière\", \"depuis que\", \"dès lors que\", \"dès maintenant\", \"dès qua\", \"dès que\", \"du fait que\", \"du moins\", \"du moment que\", \"du point de vue de\", \"du reste\", \"d'ici là\", \"d'ores et déjà\", \"en admettant que\", \"en attendant que\", \"en bref\", \"en cas de\", \"en cas que\", \"en ce cas\", \"en ce domaine\", \"en ce moment\", \"en ce qui a trait à\", \"en ce qui concerne\", \"en ce sens\", \"en cela\", \"en comparaison de\", \"en conclusion\", \"en conformité avec\", \"en conséquence\", \"en d'autres termes\", \"en définitive\", \"en dépit de\", \"en dernier lieu\", \"en deuxième lieu\", \"en effet\", \"en face de\", \"en fait\", \"en fin de compte\", \"en général\", \"en guise de conclusion\", \"en matière de\", \"en même temps que\", \"en outre\", \"en particulier\", \"en plus\", \"en premier lieu\", \"en principe\", \"en raison de\", \"en réalité\", \"en règle générale\", \"en résumé\", \"en revanche\", \"en second lieu\", \"en somme\", \"en sorte que\", \"en supposant que\", \"en tant que\", \"en terminant\", \"en théorie\", \"en tout cas\", \"en tout premier lieu\", \"en troisième lieu\", \"en un mot\", \"en vérité\", \"en vue que\", \"encore que\", \"encore une fois\", \"entre autres\", \"et même\", \"et puis\", \"étant donné qu'à\", \"étant donné que\", \"face à\", \"grâce à\", \"il est à noter que\", \"il est indéniable que\", \"il est question de\", \"il est vrai que\", \"il faut dire aussi que\", \"il faut reconnaître que\", \"il faut souligner que\", \"il ne faut pas oublier que\", \"il s'ensuit que\", \"il suffit de prendre pour exemple\", \"jusqu'ici\", \"il y a aussi\", \"jusqu'à ce que\", \"jusqu'à ce jour\", \"jusqu'à maintenant\", \"jusqu'à présent\", \"jusqu'au moment où\", \"jusqu'ici\", \"l'aspect le plus important de\", \"l'exemple le plus significatif\", \"jusqu'au moment où\", \"la preuve c'est que\", \"loin que\", \"mais en réalité\", \"malgré cela\", \"malgré tout\", \"même si\", \"mentionnons que\", \"mis à part le fait que\", \"notons que\", \"nul doute que\", \"ou bien\", \"outre cela\", \"où que\", \"par ailleurs\", \"par conséquent\", \"par contre\", \"par exception\", \"par exemple\", \"par la suite\", \"par l'entremise de\", \"par l'intermédiaire de\", \"par rapport à\", \"par suite\", \"par suite de\", \"par surcroît\", \"parce que\", \"pareillement\", \"partant de ce fait\", \"pas du tout\", \"pendant que\", \"plus précisément\", \"plus tard\", \"pour ainsi dire\", \"pour autant que\", \"pour ce qui est de\", \"pour ces motifs\", \"pour ces raisons\", \"pour cette raison\", \"pour commencer\", \"pour conclure\", \"pour le moment\", \"pour marquer la causalité\", \"pour l'instant\", \"pour peu que\", \"pour prendre un autre exemple\", \"pour que\", \"pour résumé\", \"pour terminer\", \"pour tout dire\", \"pour toutes ces raisons\", \"pourvu que\", \"prenons le cas de\", \"quand bien même que\", \"quand même\", \"quant à\", \"quel que soit\", \"qui plus est\", \"qui que\", \"quitte à\", \"quoi qu'il en soit\", \"quoi que\", \"quoiqu'il en soit\", \"sans délai\", \"sans doute\", \"sans parler de\", \"sans préjuger\", \"sans tarder\", \"sauf si\", \"selon que\", \"si bien que\", \"si ce n'est que\", \"si l'on songe que\", \"sitôt que\", \"somme toute\", \"sous cette réserve\", \"sous prétexte que\", \"sous réserve de\", \"sous réserve que\", \"suivant que\", \"supposé que\", \"sur le plan de\", \"tandis que\", \"tant et si bien que\", \"tant que\", \"tel que\", \"tellement que\", \"touchant à\", \"tout à fait\", \"tout bien pesé\", \"tout compte fait\", \"tout d'abord\", \"tout d'abord examinons\", \"tout d'abord il faut dire que\", \"tout de même\", \"tout en reconnaissant que\", \"une fois de plus\", \"vu que\"];\n/**\n * Returns an list with transition words to be used by the assessments.\n * @returns {Object} The list filled with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/transitionWords.js\n// module id = 1244\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/transitionWords.js?");

/***/ }),
/* 1245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/transitionWords */\n\nvar singleWords = [\"además\", \"adicional\", \"así\", \"asimismo\", \"aún\", \"aunque\", \"ciertamente\", \"como\", \"concluyendo\", \"conque\", \"contrariamente\", \"cuando\", \"decididamente\", \"decisivamente\", \"después\", \"diferentemente\", \"efectivamente\", \"entonces\", \"especialmente\", \"específicamente\", \"eventualmente\", \"evidentemente\", \"finalmente\", \"frecuentemente\", \"generalmente\", \"igualmente\", \"lógicamente\", \"luego\", \"mas\", \"mientras\", \"pero\", \"por\", \"porque\", \"posteriormente\", \"primero\", \"principalmente\", \"pronto\", \"próximamente\", \"pues\", \"raramente\", \"realmente\", \"seguidamente\", \"segundo\", \"semejantemente\", \"si\", \"siguiente\", \"sino\", \"súbitamente\", \"supongamos\", \"también\", \"tampoco\", \"tercero\", \"verbigracia\", \"vice-versa\", \"ya\"];\nvar multipleWords = [\"a causa de\", \"a continuación\", \"a diferencia de\", \"a fin de cuentas\", \"a la inversa\", \"a la misma vez\", \"a más de\", \"a más de esto\", \"a menos que\", \"a no ser que\", \"a pesar de\", \"a pesar de eso\", \"a pesar de todo\", \"a peser de\", \"a propósito\", \"a saber\", \"a todo esto\", \"ahora bien\", \"al contrario\", \"al fin y al cabo\", \"al final\", \"al inicio\", \"al mismo tiempo\", \"al principio\", \"ante todo\", \"antes bien\", \"antes de\", \"antes de nada\", \"antes que nada\", \"aparte de\", \"as así como\", \"así como\", \"así mismo\", \"así pues\", \"así que\", \"así y todo\", \"aún así\", \"claro está que\", \"claro que\", \"claro que sí\", \"como caso típico\", \"como decíamos\", \"como era de esperar\", \"como es de esperar\", \"como muestra\", \"como resultado\", \"como se ha notado\", \"como sigue\", \"comparado con\", \"con el objeto de\", \"con el propósito de\", \"con que\", \"con relación a\", \"con tal de que\", \"con todo\", \"dado que\", \"de ahí\", \"de cierta manera\", \"de cualquier manera\", \"de cualquier modo\", \"de ello resulta que\", \"de este modo\", \"de golpe\", \"de hecho\", \"de igual manera\", \"de igual modo\", \"de igualmanera\", \"de la manera siguiente\", \"de la misma forma\", \"de la misma manera\", \"de manera semejante\", \"del mismo modo\", \"de modo que\", \"de nuevo\", \"de otra manera\", \"de otro modo\", \"de pronto\", \"de qualquier manera\", \"de repente\", \"de suerte que\", \"de tal modo\", \"de todas formas\", \"de todas maneras\", \"de todos modos\", \"de veras\", \"debido a\", \"debido a que\", \"del mismo modo\", \"dentro de poco\", \"desde entonces\", \"después de\", \"después de todo\", \"ejemplo de esto\", \"el caso es que\", \"en aquel tiempo\", \"en cambio\", \"en cierto modo\", \"en comparación con\", \"en conclusión\", \"en concreto\", \"en conformidad con\", \"en consecuencia\", \"en consiguiente\", \"en contraste con\", \"en cualquier caso\", \"en cuanto\", \"en cuanto a\", \"en definitiva\", \"en efecto\", \"en el caso de que\", \"en este sentido\", \"en fin\", \"en fin de cuentas\", \"en general\", \"en lugar de\", \"en otras palabras\", \"en otro orden\", \"en otros términos\", \"en particular\", \"en primer lugar\", \"en primer término\", \"en primera instancia\", \"en realidad\", \"en relación a\", \"en relación con\", \"en representación de\", \"en resumen\", \"en resumidas cuentas\", \"en segundo lugar\", \"en seguida\", \"en síntesis\", \"en suma\", \"en todo caso\", \"en último término\", \"en verdad\", \"en vez de\", \"en virtud de\", \"entre ellas figura\", \"entre ellos figura\", \"es cierto que\", \"es decir\", \"es evidente que\", \"es incuestionable\", \"es indudable\", \"es más\", \"está claro que\", \"esto indica\", \"excepto si\", \"generalmente por ejemplo\", \"gracias a\", \"hasta aquí\", \"hasta cierto punto\", \"hasta el momento\", \"hay que añadir\", \"igual que\", \"la mayor parte del tiempo\", \"la mayoría del tiempo\", \"lo que es peor\", \"más tarde\", \"mejor dicho\", \"mientras tanto\", \"mirándolo todo\", \"nadie puede ignorar\", \"no faltaría más\", \"no obstante\", \"o sea\", \"otra vez\", \"otro aspecto\", \"par ilustrar\", \"para concluir\", \"para conclusión\", \"para continuar\", \"para empezar\", \"para finalizar\", \"para mencionar una cosa\", \"para que\", \"para resumir\", \"para terminar\", \"pongamos por caso\", \"por añadidura\", \"por cierto\", \"por consiguiente\", \"por ejemplo\", \"por el consiguiente\", \"por el contrario\", \"por el hecho que\", \"por eso\", \"por esta razón\", \"por esto\", \"por fin\", \"por la mayor parte\", \"por lo general\", \"por lo que\", \"por lo tanto\", \"por otro lado\", \"por otra parte\", \"por otro lado\", \"por supuesto\", \"por tanto\", \"por último\", \"por un lado\", \"por una parte\", \"primero que nada\", \"primero que todo\", \"pues bien\", \"puesto que\", \"rara vez\", \"resulta que\", \"sea como sea\", \"seguidamente entre tanto\", \"si bien\", \"siempre que\", \"siempre y cuando\", \"sigue que\", \"sin duda\", \"sin embargo\", \"sin ir más lejos\", \"sobre todo\", \"supuesto que\", \"tal como\", \"tales como\", \"tan pronto como\", \"tanto como\", \"una vez\", \"ya que\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/transitionWords.js\n// module id = 1245\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/transitionWords.js?");

/***/ }),
/* 1246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar singleWords = [\"aangezien\", \"al\", \"aldus\", \"allereerst\", \"als\", \"alsook\", \"anderzijds\", \"bijgevolg\", \"bijvoorbeeld\", \"bovendien\", \"concluderend\", \"daardoor\", \"daarentegen\", \"daarmee\", \"daarna\", \"daarnaast\", \"daarom\", \"daartoe\", \"daarvoor\", \"dadelijk\", \"dan\", \"desondanks\", \"dienovereenkomstig\", \"dientegevolge\", \"doch\", \"doordat\", \"dus\", \"echter\", \"eerst\", \"evenals\", \"eveneens\", \"evenzeer\", \"hierom\", \"hoewel\", \"immers\", \"indien\", \"integendeel\", \"intussen\", \"kortom\", \"later\", \"maar\", \"mits\", \"nadat\", \"namelijk\", \"net als\", \"niettemin\", \"noch\", \"ofschoon\", \"omdat\", \"ondanks\", \"ondertussen\", \"ook\", \"opdat\", \"resumerend\", \"samengevat\", \"samenvattend\", \"tegenwoordig\", \"teneinde\", \"tenzij\", \"terwijl\", \"tevens\", \"toch\", \"toen\", \"uiteindelijk\", \"vanwege\", \"vervolgens\", \"voorafgaand\", \"vooralsnog\", \"voordat\", \"voorts\", \"vroeger\", \"waardoor\", \"waarmee\", \"waaronder\", \"wanneer\", \"want\", \"zoals\", \"zodat\", \"zodoende\", \"zodra\"];\nvar multipleWords = [\"aan de andere kant\", \"aan de ene kant\", \"aangenomen dat\", \"al met al\", \"alles afwegend\", \"alles bij elkaar\", \"alles in aanmerking nemend\", \"als gevolg van\", \"anders gezegd\", \"daar staat tegenover\", \"daarbij komt\", \"daaruit volgt\", \"dat betekent\", \"dat blijkt uit\", \"de oorzaak daarvan is\", \"de oorzaak hiervan is\", \"door middel van\", \"een voorbeeld hiervan\", \"een voorbeeld van\", \"gesteld dat\", \"hetzelfde als\", \"hieruit kunnen we afleiden\", \"hieruit volgt\", \"hoe het ook zij\", \"in de derde plaats\", \"in de eerste plaats\", \"in de tweede plaats\", \"in één woord\", \"in het bijzonder\", \"in het geval dat\", \"in plaats van\", \"in tegenstelling tot\", \"in vergelijking met\", \"maar ook\", \"met als doel\", \"met andere woorden\", \"met behulp van\", \"met de bedoeling\", \"neem nou\", \"net als\", \"om kort te gaan\", \"onder andere\", \"op dezelfde wijze\", \"stel dat\", \"te danken aan\", \"te wijten aan\", \"ten derde\", \"ten eerste\", \"ten gevolge van\", \"ten slotte\", \"ten tweede\", \"ter conclusie\", \"ter illustratie\", \"ter verduidelijking\", \"tot nog toe\", \"tot slot\", \"vandaar dat\", \"vergeleken met\", \"voor het geval dat\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/transitionWords.js\n// module id = 1246\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/transitionWords.js?");

/***/ }),
/* 1247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/transitionWords */\n\nvar singleWords = [\"abbastanza\", \"acciocché\", \"acciocchè\", \"adesso\", \"affinché\", \"affinchè\", \"allora\", \"almeno\", \"alquanto\", \"altrettanto\", \"altrimenti\", \"analogamente\", \"anche\", \"ancora\", \"antecedentemente\", \"anzi\", \"anzitutto\", \"apertamente\", \"appena\", \"assai\", \"attualmente\", \"benché\", \"benchè\", \"beninteso\", \"bensì\", \"brevemente\", \"bruscamente\", \"casomai\", \"celermente\", \"certamente\", \"certo\", \"chiaramente\", \"ciononostante\", \"cioé\", \"cioè\", \"comparabilmente\", \"come\", \"complessivamente\", \"completamente\", \"comunque\", \"concisamente\", \"concludendo\", \"conformemente\", \"congiuntamente\", \"conseguentemente\", \"considerando\", \"considerato\", \"considerevolmente\", \"contemporaneamente\", \"continuamente\", \"contrariamente\", \"controbilanciato\", \"così\", \"cosicché\", \"cosicchè\", \"dapprima\", \"dato\", \"davvero\", \"definitivamente\", \"dettagliatamente\", \"differentemente\", \"diversamente\", \"dopo\", \"dopodiché\", \"dopodichè\", \"durante\", \"dunque\", \"eccetto\", \"eccome\", \"effettivamente\", \"egualmente\", \"elencando\", \"enfaticamente\", \"eppure\", \"esaurientemente\", \"esplicitamente\", \"espressamente\", \"estesamente\", \"evidentemente\", \"finalmente\", \"finché\", \"finchè\", \"fino\", \"finora\", \"fintanto\", \"fintanto che\", \"fintantoché\", \"fintantochè\", \"fondamentalmente\", \"frattanto\", \"frequentemente\", \"generalmente\", \"già\", \"gradualmente\", \"illustrando\", \"immantinente\", \"immediatamente\", \"importantissimo\", \"incontestabilmente\", \"incredibilmente\", \"indipendentemente\", \"indiscutibilmente\", \"indubbiamente\", \"infatti\", \"infine\", \"innanzitutto\", \"innegabilmente\", \"inoltre\", \"insomma\", \"intanto\", \"interamente\", \"istantaneamente\", \"invece\", \"logicamente\", \"lentamente\", \"ma\", \"malgrado\", \"marcatamente\", \"memorabile\", \"mentre\", \"motivatamente\", \"naturalmente\", \"né\", \"nè\", \"neanche\", \"neppure\", \"nonché\", \"nonchè\", \"nondimeno\", \"nonostante\", \"notevolmente\", \"occasionalmente\", \"oltretutto\", \"onde\", \"onestamente\", \"ossia\", \"ostinatamente\", \"ovvero\", \"ovviamente\", \"parimenti\", \"particolarmente\", \"peraltro\", \"perché\", \"perchè\", \"perciò\", \"perlomeno\", \"però\", \"pertanto\", \"pesantemente\", \"piuttosto\", \"poi\", \"poiché\", \"poichè\", \"praticamente\", \"precedentemente\", \"preferibilmente\", \"precisamente\", \"prematuramente\", \"presto\", \"prima\", \"primariamente\", \"primo\", \"principalmente\", \"prontamente\", \"proporzionalmente\", \"pure\", \"purché\", \"purchè\", \"quando\", \"quanto\", \"quantomeno\", \"quindi\", \"raramente\", \"realmente\", \"relativamente\", \"riassumendo\", \"riformulando\", \"ripetutamente\", \"saltuariamente\", \"schiettamente\", \"sebbene\", \"secondariamente\", \"secondo\", \"sempre\", \"sennò\", \"seguente\", \"sensibilmente\", \"seppure\", \"seriamente\", \"siccome\", \"sicuramente\", \"significativamente\", \"similmente\", \"simultaneamente\", \"singolarmente\", \"sinteticamente\", \"solitamente\", \"solo\", \"soltanto\", \"soprattutto\", \"sopravvalutato\", \"sorprendentemente\", \"sostanzialmente\", \"sottolineando\", \"sottovalutato\", \"specialmente\", \"specificamente\", \"specificatamente\", \"subitamente\", \"subito\", \"successivamente\", \"successivo\", \"talmente\", \"terzo\", \"totalmente\", \"tranne\", \"tuttavia\", \"ugualmente\", \"ulteriormente\", \"ultimamente\", \"veramente\", \"verosimilmente\", \"visto\"];\nvar multipleWords = [\"a breve\", \"a causa\", \"a causa di\", \"a condizione che\", \"a conseguenza\", \"a conti fatti\", \"a differenza di\", \"a differenza del\", \"a differenza della\", \"a differenza dei\", \"a differenza degli\", \"a differenza delle\", \"a dire il vero\", \"a dire la verità\", \"a dirla tutta\", \"a dispetto di\", \"a lungo\", \"a lungo termine\", \"a maggior ragione\", \"a meno che non\", \"a parte\", \"a patto che\", \"a prescindere\", \"a prima vista\", \"a proposito\", \"a qualunque costo\", \"a quanto\", \"a quel proposito\", \"a quel tempo\", \"a quell'epoca\", \"a questo fine\", \"a questo proposito\", \"a questo punto\", \"a questo riguardo\", \"a questo scopo\", \"a riguardo\", \"a seguire\", \"a seguito\", \"a sottolineare\", \"a tal fine\", \"a tal proposito\", \"a tempo debito\", \"a tutti gli effetti\", \"a tutti i costi\", \"a una prima occhiata\", \"ad eccezione di\", \"ad esempio\", \"ad essere maliziosi\", \"ad essere sinceri\", \"ad ogni buon conto\", \"ad ogni costo\", \"ad ogni modo\", \"ad una prima occhiata\", \"adesso che\", \"al che\", \"al contrario\", \"al contrario di\", \"al fine di\", \"al fine di fare\", \"al giorno d'oggi\", \"al momento\", \"al momento giusto\", \"al momento opportuno\", \"al più presto\", \"al posto di\", \"al suo posto\", \"al termine\", \"all'epoca\", \"all'infuori di\", \"all'inizio\", \"all'opposto\", \"all'ultimo\", \"alla fine\", \"alla fine della fiera\", \"alla luce\", \"alla luce di\", \"alla lunga\", \"alla moda\", \"alla stessa maniera\", \"allo scopo di\", \"allo stesso modo\", \"allo stesso tempo\", \"anch'esso\", \"anch'io\", \"anche se\", \"ancora più\", \"ancora di più\", \"assumendo che\", \"bisogna chiarire che\", \"bisogna considerare che\", \"causato da\", \"ciò nondimeno\", \"ciò nonostante\", \"col tempo\", \"con il tempo\", \"come a dire\", \"come abbiamo dimostrato\", \"come è stato notato\", \"come è stato detto\", \"come è stato dimostrato\", \"come hanno detto\", \"come ho detto\", \"come ho dimostrato\", \"come ho notato\", \"come potete notare\", \"come potete vedere\", \"come puoi notare\", \"come puoi vedere\", \"come si è dimostrato\", \"come si può vedere\", \"come si può notare\", \"come sopra indicato\", \"comunque sia\", \"con attenzione\", \"con enfasi\", \"con il risultato che\", \"con l'obiettivo di\", \"con ostinazione\", \"con questa intenzione\", \"con questa idea\", \"con queste idee\", \"con questo in testa\", \"con questo scopo\", \"così che\", \"così da\", \"d'altra parte\", \"d'altro canto\", \"d'altro lato\", \"d'altronde\", \"d'ora in avanti\", \"d'ora in poi\", \"da allora\", \"da quando\", \"da quanto\", \"da quel momento\", \"da quella volta\", \"da questo momento in poi\", \"da questo momento\", \"da qui\", \"da ultimo\", \"da un certo punto di vista\", \"da un lato\", \"da una parte\", \"dall'altro lato\", \"dall'epoca\", \"dal che\", \"dato che\", \"dato per assunto che\", \"davanti a\", \"del tutto\", \"dell'epoca\", \"detto questo\", \"di certo\", \"di colpo\", \"di conseguenza\", \"di fatto\", \"di fronte\", \"di fronte a\", \"di lì a poco\", \"di punto in bianco\", \"di quando in quando\", \"di quanto non sia\", \"di quel tempo\", \"di qui a\", \"di rado\", \"di seguito\", \"di si\", \"di sicuro\", \"di solito\", \"di tanto in tanto\", \"di tutt'altra pasta\", \"di quando in quando\", \"differente da\", \"diversamente da\", \"diverso da\", \"dopotutto\", \"dovuto a\", \"e anche\", \"e inoltre\", \"entro breve\", \"fermo restando che\", \"faccia a faccia\", \"fin da\", \"fin dall'inizio\", \"fin quando\", \"finché non\", \"finchè non\", \"fin dal primo momento\", \"fin dall'inizio\", \"fino a\", \"fino a questo momento\", \"fino ad oggi\", \"fino ai giorni nostri\", \"fino adesso\", \"fino a un certo punto\", \"fino adesso\", \"fra quanto\", \"il prima possibile\", \"in aggiunta\", \"in altre parole\", \"in altri termini\", \"in ambo i casi\", \"in breve\", \"in caso di\", \"in conclusione\", \"in conformità\", \"in confronto\", \"in confronto a\", \"in conseguenza\", \"in considerazione\", \"in considerazione di\", \"in definitiva\", \"in dettaglio\", \"importante rendersi conto\", \"in effetti\", \"in entrambi i casi\", \"in fin dei conti\", \"in generale\", \"in genere\", \"in linea di massima\", \"in poche parole\", \"il più possibile\", \"in maggior parte\", \"in maniera analoga\", \"in maniera convincente\", \"in maniera esauriente\", \"in maniera esaustiva\", \"in maniera esplicita\", \"in maniera evidente\", \"in maniera incontestabile\", \"in maniera indiscutibile\", \"in maniera innegabile\", \"in maniera significativa\", \"in maniera simile\", \"in modo allusivo\", \"in modo analogo\", \"in modo che\", \"in modo convincente\", \"in modo da\", \"in modo identico\", \"in modo notevole\", \"in modo significativo\", \"in modo significativo\", \"in modo simile\", \"in ogni caso\", \"in ogni modo\", \"in ogni momento\", \"in parte considerevole\", \"in parti uguali\", \"in particolare\", \"in particolare per\", \"in particolare\", \"in più\", \"in pratica\", \"in precedenza\", \"in prima battuta\", \"in prima istanza\", \"in primo luogo\", \"in rapporto\", \"in qualche modo\", \"in qualsiasi modo\", \"in qualsiasi momento\", \"in qualunque modo\", \"in qualunque momento\", \"in quarta battuta\", \"in quarta istanza\", \"in quarto luogo\", \"in quel caso\", \"in quelle circostanze\", \"in questa occasione\", \"in questa situazione\", \"in questo caso\", \"in questo caso particolare\", \"in questo istante\", \"in questo momento\", \"in rare occasioni\", \"in realtà\", \"in seconda battuta\", \"in seconda istanza\", \"in secondo luogo\", \"in seguito\", \"in sintesi\", \"in sostanza\", \"in tempo\", \"in terza battuta\", \"in terza istanza\", \"in terzo luogo\", \"in totale\", \"in tutto\", \"in ugual maniera\", \"in ugual misura\", \"in ugual modo\", \"in ultima analisi\", \"in ultima istanza\", \"in un altro caso\", \"in una parola\", \"in verità\", \"insieme a\", \"insieme con\", \"invece che\", \"invece di\", \"la prima cosa da considerare\", \"la prima cosa da tenere a mente\", \"lo stesso\", \"mentre potrebbe essere vero\", \"motivo per cui\", \"motivo per il quale\", \"ne consegue che\", \"ne deriva che\", \"nei dettagli\", \"nel caso\", \"nel caso che\", \"nel caso in cui\", \"nel complesso\", \"nel corso del\", \"nel corso di\", \"nel frattempo\", \"nel lungo periodo\", \"nel mentre\", \"nell'eventualità che\", \"nella misura in cui\", \"nella speranza che\", \"nella stessa maniera\", \"nella stessa misura\", \"nello specifico\", \"nello stesso modo\", \"nello stesso momento\", \"nello stesso stile\", \"non appena\", \"non per essere maliziosi\", \"non più da\", \"nonostante ciò\", \"nonostante tutto\", \"ogni qualvolta\", \"ogni tanto\", \"ogni volta\", \"oltre a\", \"oltre a ciò\", \"ora che\", \"passo dopo passo\", \"per causa di\", \"per certo\", \"per chiarezza\", \"per chiarire\", \"per come\", \"per concludere\", \"per conto di\", \"per contro\", \"per cui\", \"per davvero\", \"per di più\", \"per dirla in altro modo\", \"per dirla meglio\", \"per dirla tutta\", \"per es.\", \"per esempio\", \"per essere sinceri\", \"per far vedere\", \"per farla breve\", \"per finire\", \"per l'avvenire\", \"per l'ultima volta\", \"per la maggior parte\", \"per la stessa ragione\", \"per la verità\", \"per lo più\", \"per mettere in luce\", \"per metterla in altro modo\", \"per non dire di\", \"per non parlare di\", \"per ora\", \"per ovvi motivi\", \"per paura di\", \"per paura dei\", \"per paura delle\", \"per paura degli\", \"per prima cosa\", \"per quanto\", \"per questa ragione\", \"per questo motivo\", \"per riassumere\", \"per sottolineare\", \"per timore\", \"per trarre le conclusioni\", \"per ultima\", \"per ultime\", \"per ultimi\", \"per ultimo\", \"per via di\", \"perché si\", \"perchè si\", \"perfino se\", \"piano piano\", \"più di ogni altra cosa\", \"più di tutto\", \"più facilmente\", \"più importante\", \"più tardi\", \"poco a poco\", \"poco dopo\", \"prendiamo il caso di\", \"presto o tardi\", \"prima che\", \"prima di\", \"prima di ogni cosa\", \"prima di tutto\", \"prima o dopo\", \"prima o poi\", \"questo è probabilmente vero\", \"questo potrebbe essere vero\", \"restando inteso che\", \"riassumendo\", \"quanto prima\", \"questa volta\", \"se confrontato con\", \"se e solo se\", \"se no\", \"seduta stante\", \"sempreché\", \"semprechè\", \"sempre che\", \"senz'altro\", \"senza alcun riguardo\", \"senza dubbio\", \"senz'ombra di dubbio\", \"senza ombra di dubbio\", \"senza riguardo per\", \"senza tregua\", \"senza ulteriore ritardo\", \"sia quel che sia\", \"solo se\", \"sotto questa luce\", \"sperando che\", \"sta volta\", \"su tutto\", \"subito dopo\", \"sul serio\", \"tanto per cominciare\", \"tanto quanto\", \"tra breve\", \"tra l'altro\", \"tra poco\", \"tra quanto\", \"tutte le volte\", \"tutti insieme\", \"tutto a un tratto\", \"tutto ad un tratto\", \"tutto d'un tratto\", \"tutto considerato\", \"tutto sommato\", \"un passo alla volta\", \"un tempo\", \"una volta\", \"una volta ogni tanto\", \"unito a\", \"va chiarito che\", \"va considerato che\", \"vada come vada\", \"vale a dire\", \"visto che\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/transitionWords.js\n// module id = 1247\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/transitionWords.js?");

/***/ }),
/* 1248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar singleWords = [\"ademais\", \"afinal\", \"aliás\", \"analogamente\", \"anteriormente\", \"assim\", \"certamente\", \"conforme\", \"conquanto\", \"contudo\", \"decerto\", \"embora\", \"enfim\", \"enquanto\", \"então\", \"entretanto\", \"eventualmente\", \"igualmente\", \"inegavelmente\", \"inesperadamente\", \"mas\", \"outrossim\", \"pois\", \"porquanto\", \"porque\", \"portanto\", \"posteriormente\", \"precipuamente\", \"primeiramente\", \"primordialmente\", \"principalmente\", \"salvo\", \"semelhantemente\", \"similarmente\", \"sobretudo\", \"surpreendentemente\", \"todavia\"];\nvar multipleWords = [\"a fim de\", \"a fim de que\", \"a menos que\", \"a princípio\", \"a saber\", \"acima de tudo\", \"ainda assim\", \"ainda mais\", \"ainda que\", \"além disso\", \"antes de mais nada\", \"antes de tudo\", \"antes que\", \"ao mesmo tempo\", \"ao passo que\", \"ao propósito\", \"apesar de\", \"às vezes\", \"assim como\", \"assim que\", \"assim sendo\", \"assim também\", \"bem como\", \"com a finalidade de\", \"com efeito\", \"com o fim de\", \"com o intuito de\", \"com o propósito de\", \"com toda a certeza\", \"como resultado\", \"como se\", \"da mesma forma\", \"de acordo com\", \"de conformidade com\", \"de fato\", \"de maneira idêntica\", \"de tal forma que\", \"de tal sorte que\", \"depois que\", \"desde que\", \"dessa forma\", \"dessa maneira\", \"desse modo\", \"do mesmo modo\", \"é provável\", \"em conclusão\", \"em contrapartida\", \"em contraste com\", \"em outras palavras\", \"em primeiro lugar\", \"em princípio\", \"em resumo\", \"em seguida\", \"em segundo lugar\", \"em síntese\", \"em suma\", \"em terceiro lugar\", \"em virtude de\", \"finalmente agora atualmente\", \"isto é\", \"já que\", \"logo após\", \"logo depois\", \"logo que\", \"mesmo que\", \"não apenas\", \"nesse hiato\", \"nesse ínterim\", \"nesse meio tempo\", \"nesse sentido\", \"no entanto\", \"no momento em que\", \"ou por outra\", \"ou seja\", \"para que\", \"pelo contrário\", \"por analogia\", \"por causa de\", \"por certo\", \"por conseguinte\", \"por conseqüência\", \"por exemplo\", \"por fim\", \"por isso\", \"por mais que\", \"por menos que\", \"por outro lado\", \"posto que\", \"se acaso\", \"se bem que\", \"seja como for\", \"sem dúvida\", \"só para exemplificar\", \"só para ilustrar\", \"só que\", \"sob o mesmo ponto de vista\", \"talvez provavelmente\", \"tanto quanto\", \"uma vez que\", \"visto que\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/portuguese/transitionWords.js\n// module id = 1248\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/portuguese/transitionWords.js?");

/***/ }),
/* 1249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/transitionWords */\n\nvar singleWords = [\"безусловно\", \"бесспорно\", \"вероятно\", \"вестимо\", \"вдобавок\", \"видимо\", \"вишь\", \"во-вторых\", \"во-первых\", \"вообще-то\", \"впрочем\", \"дабы\", \"едва\", \"ежели\", \"если\", \"затем \", \"зачем\", \"ибо\", \"итак\", \"кабы\", \"кажется\", \"кажись\", \"коли\", \"кстати\", \"лишь\", \"лучше\", \"наверно\", \"наверное\", \"например\", \"небось\", \"нежели\", \"несомненно\", \"но\", \"однако\", \"особенно\", \"оттого\", \"отчего\", \"поди\", \"пожалуй\", \"позволь\", \"позвольте\", \"покамест\", \"покуда\", \"поскольку\", \"потому\", \"притом\", \"причем\", \"только\", \"хотя\", \"чтоб\", \"чтобы\", \"чуть\", \"якобы\"];\nvar multipleWords = [\"а вдобавок\", \"а вот\", \"а именно\", \"а не то\", \"а не\", \"а потом\", \"а также\", \"без всякого сомнения\", \"без того чтобы не\", \"без того, чтобы не\", \"благодаря тому\", \"более того\", \"будто бы\", \"будь то\", \"буквально\", \"в итоге\", \"в конце концов\", \"в общей сложности\", \"в общем-то\", \"в общем\", \"в отношении того что\", \"в отношении того, что\", \"в принципе\", \"в противовес тому что\", \"в противовес тому, что\", \"в противоположность тому\", \"в результате\", \"в самом деле\", \"в свою очередь\", \"в связи с тем что\", \"в связи с тем\", \"в силу того что\", \"в силу того\", \"в силу чего\", \"в случа\", \"в сравнении с тем\", \"в сущности говоря\", \"в сущности\", \"в таком случае\", \"в то время как\", \"в то время, как\", \"в том случае\", \"в частности\", \"в-третьих\", \"ввиду того\", \"вернее говоря\", \"вероятнее всего\", \"видите ли\", \"видишь ли\", \"вместе с тем\", \"вместо того\", \"вне всякого сомнения\", \"вне сомнения\", \"во всяком случае\", \"воля ваша\", \"воля твоя\", \"вообще говоря\", \"вопреки тому\", \"вплоть до того\", \"вроде того как\", \"вроде того что\", \"вроде того\", \"вроде того\", \"вследствие того что\", \"вследствие чего\", \"грубо говоря\", \"да еще\", \"да и то\", \"дай бог память\", \"даром что\", \"для того чтобы\", \"для того, чтобы\", \"до тех пор пока\", \"до тех пор, пока\", \"до того как\", \"до того, как\", \"едва лишь\", \"едва только\", \"ежели бы\", \"если угодно\", \"жалко, что\", \"жаль, что\", \"за счет того что\", \"за счет того, что\", \"знамо дело\", \"и вот еще\", \"из-за того что\", \"из-за того, что\", \"иначе говоря\", \"исходя из того\", \"к вашему сведению\", \"к несчастью\", \"к огорчению\", \"к примеру сказать\", \"к примеру\", \"к прискорбию\", \"к радости\", \"к слову сказать\", \"к сожалению\", \"к стыду своему\", \"к стыду\", \"к счастью\", \"к твоему сведению\", \"к тому же\", \"к удивлению\", \"к ужасу\", \"к чести\", \"как будто\", \"как бы там ни было\", \"как бы то ни было\", \"как бы\", \"как вам известно\", \"как вдруг\", \"как видите\", \"как видишь\", \"как видно\", \"как водится\", \"как выяснилось\", \"как выясняется\", \"как говорилось\", \"как говорится\", \"как если бы\", \"как знать\", \"как известно\", \"как на заказ\", \"как назло\", \"как нарочно\", \"как ни говори\", \"как ни говорите\", \"как ни странно\", \"как оказалось\", \"как оказывается\", \"как полагается\", \"как положено\", \"как правило\", \"как принято говорить\", \"как принято\", \"как сказано\", \"как скоро\", \"как следствие\", \"как словно\", \"как только\", \"как хотите\", \"как это ни странно\", \"ко всему прочему\", \"коль скоро\", \"коль уж\", \"коротко говоря\", \"короче говоря\", \"кроме всего прочего\", \"кстати говоря\", \"кстати сказать\", \"лишь бы\", \"лишь только\", \"мало сказать\", \"мало того\", \"между нами говоря\", \"между прочим\", \"между тем как\", \"может статься\", \"можно подумать\", \"мягко выражаясь\", \"мягко говоря\", \"на беду\", \"на ваш взгляд\", \"на мой взгляд\", \"на несчастье\", \"на основании того что\", \"на основании того, что\", \"на первый взгляд\", \"на самом деле\", \"на случай\", \"на твой взгляд\", \"на худой конец\", \"надо полагать\", \"наряду с тем что\", \"наряду с тем\", \"насчет того что\", \"насчет того, что\", \"не в пример тому как\", \"не в пример тому, как\", \"не то чтобы\", \"невзирая на то\", \"независимо от того\", \"несмотря на то\", \"ничего не скажешь\", \"но вообще-то\", \"но кроме того\", \"однако же\", \"откровенно сказать\", \"относительно того что\", \"относительно того, что\", \"перед тем\", \"по вашему мнению\", \"по видимости\", \"по всей вероятности\", \"по всей видимости\", \"по данным\", \"по замыслу\", \"по идее\", \"по крайней мере\", \"по мере того как\", \"по мере того, как\", \"по мнению\", \"по моему мнению\", \"по обыкновению\", \"по обычаю\", \"по определению\", \"по поводу того\", \"по правде говоря\", \"по правде сказать\", \"по правде\", \"по преданию\", \"по причине того\", \"по прогнозам\", \"по сведениям\", \"по своему обыкновению\", \"по слухам\", \"по совести говоря\", \"по совести сказать\", \"по совести\", \"по сообщению\", \"по сообщениям\", \"по справедливости говоря\", \"по справедливости\", \"по сравнению\", \"по статистике\", \"по сути говоря\", \"по сути дела\", \"по сути\", \"по существу говоря\", \"по существу\", \"по счастью\", \"по твоему мнению\", \"по чести говоря\", \"по чести признаться\", \"по чести сказать\", \"по-вашему\", \"по-видимому\", \"по-ихнему\", \"по-моему\", \"по-нашему\", \"по-твоему\", \"под видом того что\", \"под видом того, что\", \"под предлогом\", \"подобно тому\", \"подумать только\", \"помимо всего прочего\", \"помимо всего\", \"помимо того\", \"помимо того\", \"помимо этого\", \"понятное дело\", \"попросту говоря\", \"попросту сказать\", \"после того\", \"потому как\", \"потому что\", \"правду говоря\", \"правду сказать\", \"правильнее говоря\", \"прежде всего\", \"прежде нежели\", \"прежде чем\", \"при всем том\", \"при условии что\", \"при условии, что\", \"против обыкновения\", \"проще говоря\", \"проще сказать\", \"прямо-таки как\", \"пускай бы\", \"равно как\", \"ради того чтобы\", \"разве что\", \"разумеется\", \"с вашего позволения\", \"с вашего разрешения\", \"с другой стороны\", \"с моей точки зрения\", \"с одной стороны\", \"с позволения сказать\", \"с твоего позволения\", \"с твоего разрешения\", \"с тем чтобы\", \"с тех пор как\", \"с той целью чтобы\", \"с точки зрения\", \"само собой разумеется\", \"сверх того что\", \"сверх того\", \"сказать по правде\", \"сказать по совести\", \"сказать по чести\", \"скорее всего\", \"смотря по тому\", \"со своей стороны\", \"собственно говоря\", \"совсем как\", \"стало быть\", \"стоит отметить\", \"строго говоря\", \"судя по всему\", \"судя по тому\", \"так или иначе\", \"так как\", \"так что\", \"так чтобы\", \"тем более что\", \"тем не менее\", \"тем паче что\", \"то бишь\", \"то есть\", \"тогда как\", \"только бы\", \"только лишь\", \"только чуть\", \"точнее говоря\", \"точнее сказать\", \"точно так же\", \"что и говорить\", \"что ни говори\", \"что ни говорите\", \"чуть лишь\", \"чуть только\", \"шутка ли сказать\", \"шутка ли\", \"шутка сказать\", \"это значит, что\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/transitionWords.js\n// module id = 1249\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/transitionWords.js?");

/***/ }),
/* 1250 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(174),\n    isArray = __webpack_require__(64),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isString.js\n// module id = 1250\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isString.js?");

/***/ }),
/* 1251 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseValues = __webpack_require__(1480),\n    keys = __webpack_require__(323);\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/values.js\n// module id = 1251\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/values.js?");

/***/ }),
/* 1252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Gets the parsed type name of subjects.\n *\n * @param {array|object|string|number} subject The subject to get the parsed type from.\n * @returns {string} The parsed type name.\n */\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\nvar getType = function getType(subject) {\n    if (Array.isArray(subject)) {\n        return \"array\";\n    }\n    return typeof subject === \"undefined\" ? \"undefined\" : _typeof(subject);\n};\n/**\n * Validates the type of subjects. Throws an error if the type is invalid.\n *\n * @param {object} subject The object containing all subjects.\n * @param {string} expectedType The expected type.\n * @returns {boolean} Returns true if types matches expected type. Otherwise returns false.\n */\nvar isSameType = function isSameType(subject, expectedType) {\n    var passedType = getType(subject);\n    return passedType === expectedType;\n};\nmodule.exports = {\n    getType: getType,\n    isSameType: isSameType\n};\n//# sourceMappingURL=types.js.map\n//# sourceMappingURL=types.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/types.js\n// module id = 1252\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/types.js?");

/***/ }),
/* 1253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isEmpty = __webpack_require__(97);\nvar forEach = __webpack_require__(32);\nvar includes = __webpack_require__(147);\n/**\n * Checks whether a given word is directly preceded by a word from a list of words.\n *\n * @param {Array} precedingWords The array of objects with matches and indices.\n * @param {number} matchIndex The index of the word for which to check whether it's preceded by one of the other words.\n * @param {boolean} addSpace True if a space should be added.\n *\n * @returns {boolean} Returns true if the match is preceded by a given word, otherwise returns false.\n */\nmodule.exports = function (precedingWords, matchIndex) {\n    var addSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    /*\n    1 if there is a space between the match and the preceding word\n    (because the end word boundary is not included in the match).\n    0 if the preceding word is a contraction.\n    */\n    var space = addSpace ? 1 : 0;\n    if (isEmpty(precedingWords)) {\n        return false;\n    }\n    var precedingWordsEndIndices = [];\n    forEach(precedingWords, function (precedingWord) {\n        var precedingWordsEndIndex = precedingWord.index + precedingWord.match.length + space;\n        precedingWordsEndIndices.push(precedingWordsEndIndex);\n    });\n    return includes(precedingWordsEndIndices, matchIndex);\n};\n//# sourceMappingURL=includesIndex.js.map\n//# sourceMappingURL=includesIndex.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/includesIndex.js\n// module id = 1253\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/includesIndex.js?");

/***/ }),
/* 1254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transitionWords = __webpack_require__(1246)().singleWords;\n/**\n * Returns an array with exceptions for the prominent words researcher.\n * @returns {Array} The array filled with exceptions.\n */\nvar articles = [\"de\", \"het\", \"een\", \"der\", \"des\", \"den\"];\nvar cardinalNumerals = [\"eén\", \"één\", \"twee\", \"drie\", \"vier\", \"vijf\", \"zes\", \"zeven\", \"acht\", \"negen\", \"tien\", \"elf\", \"twaalf\", \"dertien\", \"veertien\", \"vijftien\", \"zestien\", \"zeventien\", \"achttien\", \"negentien\", \"twintig\", \"honderd\", \"honderden\", \"duizend\", \"duizenden\", \"miljoen\", \"miljoenen\", \"biljoen\", \"biljoenen\"];\nvar ordinalNumerals = [\"eerste\", \"tweede\", \"derde\", \"vierde\", \"vijfde\", \"zesde\", \"zevende\", \"achtste\", \"negende\", \"tiende\", \"elfde\", \"twaalfde\", \"dertiende\", \"veertiende\", \"vijftiende\", \"zestiende\", \"zeventiende\", \"achttiende\", \"negentiende\", \"twinstigste\"];\n// 'Het' is already included in the list of articles.\nvar personalPronounsNominative = [\"ik\", \"je\", \"jij\", \"hij\", \"ze\", \"we\", \"wij\", \"jullie\", \"zij\", \"u\", \"ge\", \"gij\", \"men\"];\nvar personalPronounsAccusative = [\"mij\", \"jou\", \"hem\", \"haar\", \"hen\", \"hun\", \"uw\"];\nvar demonstrativePronouns = [\"dit\", \"dat\", \"deze\", \"die\", \"zelf\"];\n// What to do with 'zijn', since it is also a verb?\nvar possessivePronouns = [\"mijn\", \"mijne\", \"jouw\", \"jouwe\", \"zijne\", \"hare\", \"ons\", \"onze\", \"hunne\", \"uwe\", \"elkaars\", \"elkanders\"];\nvar quantifiers = [\"alle\", \"sommige\", \"sommigen\", \"weinig\", \"weinige\", \"weinigen\", \"veel\", \"vele\", \"velen\", \"geen\", \"beetje\", \"elke\", \"elk\", \"genoeg\", \"meer\", \"meest\", \"meeste\", \"meesten\", \"paar\", \"zoveel\", \"enkele\", \"enkelen\", \"zoveelste\", \"hoeveelste\", \"laatste\", \"laatsten\", \"iedere\", \"allemaal\", \"zekere\", \"ander\", \"andere\", \"gene\", \"enig\", \"enige\", \"verscheidene\", \"verschillende\", \"voldoende\", \"allerlei\", \"allerhande\", \"enerlei\", \"enerhande\", \"beiderlei\", \"beiderhande\", \"tweeërlei\", \"tweeërhande\", \"drieërlei\", \"drieërhande\", \"velerlei\", \"velerhande\", \"menigerlei\", \"menigerhande\", \"enigerlei\", \"enigerhande\", \"generlei\", \"generhande\"];\nvar reflexivePronouns = [\"mezelf\", \"mijzelf\", \"jezelf\", \"jouzelf\", \"zichzelf\", \"haarzelf\", \"hemzelf\", \"onszelf\", \"julliezelf\", \"henzelf\", \"hunzelf\", \"uzelf\", \"zich\"];\nvar reciprocalPronouns = [\"mekaar\", \"elkaar\", \"elkander\", \"mekander\"];\nvar indefinitePronouns = [\"iedereen\", \"ieder\", \"eenieder\", \"alleman\", \"allen\", \"alles\", \"iemand\", \"niemand\", \"iets\", \"niets\", \"menigeen\"];\nvar indefinitePronounsPossessive = [\"ieders\", \"aller\", \"iedereens\", \"eenieders\"];\nvar relativePronouns = [\"welke\", \"welk\", \"wat\", \"wie\", \"wiens\", \"wier\"];\nvar interrogativeProAdverbs = [\"hoe\", \"waarom\", \"waar\", \"hoezo\", \"hoeveel\"];\nvar pronominalAdverbs = [\"daaraan\", \"daarachter\", \"daaraf\", \"daarbij\", \"daarbinnen\", \"daarboven\", \"daarbuiten\", \"daardoorheen\", \"daarheen\", \"daarin\", \"daarjegens\", \"daarmede\", \"daarnaar\", \"daarnaartoe\", \"daaromtrent\", \"daaronder\", \"daarop\", \"daarover\", \"daaroverheen\", \"daarrond\", \"daartegen\", \"daartussen\", \"daartussenuit\", \"daaruit\", \"daarvan\", \"daarvandaan\", \"eraan\", \"erachter\", \"erachteraan\", \"eraf\", \"erbij\", \"erbinnen\", \"erboven\", \"erbuiten\", \"erdoor\", \"erdoorheen\", \"erheen\", \"erin\", \"erjegens\", \"ermede\", \"ermee\", \"erna\", \"ernaar\", \"ernaartoe\", \"ernaast\", \"erom\", \"eromtrent\", \"eronder\", \"eronderdoor\", \"erop\", \"eropaf\", \"eropuit\", \"erover\", \"eroverheen\", \"errond\", \"ertegen\", \"ertegenaan\", \"ertoe\", \"ertussen\", \"ertussenuit\", \"eruit\", \"ervan\", \"ervandaan\", \"ervandoor\", \"ervoor\", \"hieraan\", \"hierachter\", \"hieraf\", \"hierbij\", \"hierbinnen\", \"hierboven\", \"hierbuiten\", \"hierdoor\", \"hierdoorheen\", \"hierheen\", \"hierin\", \"hierjegens\", \"hierlangs\", \"hiermede\", \"hiermee\", \"hierna\", \"hiernaar\", \"hiernaartoe\", \"hiernaast\", \"hieromheen\", \"hieromtrent\", \"hieronder\", \"hierop\", \"hierover\", \"hieroverheen\", \"hierrond\", \"hiertegen\", \"hiertoe\", \"hiertussen\", \"hiertussenuit\", \"hieruit\", \"hiervan\", \"hiervandaan\", \"hiervoor\", \"vandaan\", \"waaraan\", \"waarachter\", \"waaraf\", \"waarbij\", \"waarboven\", \"waarbuiten\", \"waardoorheen\", \"waarheen\", \"waarin\", \"waarjegens\", \"waarmede\", \"waarna\", \"waarnaar\", \"waarnaartoe\", \"waarnaast\", \"waarop\", \"waarover\", \"waaroverheen\", \"waarrond\", \"waartegen\", \"waartegenin\", \"waartoe\", \"waartussen\", \"waartussenuit\", \"waaruit\", \"waarvan\", \"waarvandaan\", \"waarvoor\"];\nvar locativeAdverbs = [\"daar\", \"hier\", \"ginder\", \"daarginds\", \"ginds\", \"ver\", \"veraf\", \"ergens\", \"nergens\", \"overal\", \"dichtbij\", \"kortbij\"];\nvar filteredPassiveAuxiliaries = [\"word\", \"wordt\", \"werd\", \"werden\", \"ben\", \"bent\", \"is\", \"was\", \"waren\"];\nvar passiveAuxiliariesInfinitive = [\"worden\", \"zijn\"];\nvar otherAuxiliaries = [\"heb\", \"hebt\", \"heeft\", \"hadden\", \"had\", \"kun\", \"kan\", \"kunt\", \"kon\", \"konden\", \"mag\", \"mocht\", \"mochten\", \"dien\", \"dient\", \"diende\", \"dienden\", \"moet\", \"moest\", \"moesten\", \"ga\", \"gaat\", \"ging\", \"gingen\"];\nvar otherAuxiliariesInfinitive = [\"hebben\", \"kunnen\", \"mogen\", \"dienen\", \"moeten\", \"gaan\"];\n// 'Vóórkomen' (appear) is not included, because we don't want to filter out 'voorkómen' (prevent).\nvar copula = [\"blijkt\", \"blijk\", \"bleek\", \"bleken\", \"gebleken\", \"dunkt\", \"dunk\", \"dunkte\", \"dunkten\", \"gedunkt\", \"heet\", \"heette\", \"heetten\", \"geheten\", \"lijkt\", \"lijk\", \"geleken\", \"leek\", \"leken\", \"schijn\", \"schijnt\", \"scheen\", \"schenen\", \"toescheen\", \"toeschijnt\", \"toeschijn\", \"toeschenen\"];\nvar copulaInfinitive = [\"blijken\", \"dunken\", \"heten\", \"lijken\", \"schijnen\", \"toeschijnen\"];\nvar prepositions = [\"à\", \"aan\", \"aangaande\", \"achter\", \"behalve\", \"behoudens\", \"beneden\", \"benevens\", \"benoorden\", \"benoordoosten\", \"benoordwesten\", \"beoosten\", \"betreffende\", \"bewesten\", \"bezijden\", \"bezuiden\", \"bezuidoosten\", \"bezuidwesten\", \"bij\", \"binnen\", \"blijkens\", \"boven\", \"bovenaan\", \"buiten\", \"circa\", \"conform\", \"contra\", \"cum\", \"dankzij\", \"door\", \"gedurende\", \"gezien\", \"in\", \"ingevolge\", \"inzake\", \"jegens\", \"krachtens\", \"langs\", \"luidens\", \"met\", \"middels\", \"na\", \"naar\", \"naast\", \"nabij\", \"namens\", \"nevens\", \"niettegenstaande\", \"nopens\", \"om\", \"omstreeks\", \"omtrent\", \"onder\", \"onderaan\", \"ongeacht\", \"onverminderd\", \"op\", \"over\", \"overeenkomstig\", \"per\", \"plus\", \"post\", \"richting\", \"rond\", \"rondom\", \"spijts\", \"staande\", \"te\", \"tegen\", \"tegenover\", \"ten\", \"ter\", \"tijdens\", \"tot\", \"tussen\", \"uit\", \"van\", \"vanaf\", \"vanuit\", \"versus\", \"via\", \"vis-à-vis\", \"volgens\", \"voor\", \"voorbij\", \"wegens\", \"zijdens\", \"zonder\"];\n// Many prepositional adverbs are already listed as preposition.\nvar prepositionalAdverbs = [\"af\", \"heen\", \"mee\", \"toe\", \"achterop\", \"onderin\", \"voorin\", \"bovenop\", \"buitenop\", \"achteraan\", \"onderop\", \"binnenin\", \"tevoren\"];\nvar coordinatingConjunctions = [\"en\", \"alsmede\", \"of\", \"ofwel\", \"en/of\"];\n/* 'Zowel' and 'als' are part of 'zowel...als', 'evenmin' is part of 'evenmin...als', 'zomin' is part of 'zomin...als',\n 'hetzij' is part of 'hetzij...hetzij'. */\nvar correlativeConjunctions = [\"zowel\", \"evenmin\", \"zomin\", \"hetzij\"];\nvar subordinatingConjunctions = [\"vermits\", \"dewijl\", \"dorodien\", \"naardien\", \"nademaal\", \"overmits\", \"wijl\", \"eer\", \"eerdat\", \"aleer\", \"vooraleer\", \"alvorens\", \"totdat\", \"zolang\", \"sinds\", \"sedert\", \"ingeval\", \"tenware\", \"alhoewel\", \"hoezeer\", \"uitgezonderd\", \"zoverre\", \"zover\", \"naargelang\", \"naarmate\", \"alsof\"];\n// These verbs are frequently used in interviews to indicate questions and answers.\nvar interviewVerbs = [\"zegt\", \"zei\", \"vraagt\", \"vroeg\", \"denkt\", \"dacht\", \"stelt\", \"pleit\", \"pleitte\"];\n// These transition words were not included in the list for the transition word assessment for various reasons.\nvar additionalTransitionWords = [\"absoluut\", \"zeker\", \"ongetwijfeld\", \"sowieso\", \"onmiddelijk\", \"meteen\", \"inclusief\", \"direct\", \"ogenblikkelijk\", \"terstond\", \"natuurlijk\", \"vanzelfsprekend\", \"gewoonlijk\", \"normaliter\", \"doorgaans\", \"werkelijk\", \"daadwerkelijk\", \"inderdaad\", \"waarachtig\", \"oprecht\", \"bijna\", \"meestal\", \"misschien\", \"waarschijnlijk\", \"wellicht\", \"mogelijk\", \"vermoedelijk\", \"allicht\", \"aannemelijk\", \"oorspronkelijk\", \"aanvankelijk\", \"initieel\", \"eigenlijk\", \"feitelijk\", \"wezenlijk\", \"juist\", \"reeds\", \"alvast\", \"bijv.\", \"vaak\", \"dikwijls\", \"veelal\", \"geregeld\", \"menigmaal\", \"regelmatig\", \"veelvuldig\", \"eenvoudigweg\", \"simpelweg\", \"louter\", \"kortweg\", \"stomweg\", \"domweg\", \"zomaar\", \"eventueel\", \"mogelijkerwijs\", \"eens\", \"weleens\", \"nooit\", \"ooit\", \"anders\", \"momenteel\", \"thans\", \"incidenteel\", \"trouwens\", \"elders\", \"volgend\", \"recent\", \"onlangs\", \"recentelijk\", \"laatst\", \"zojuist\", \"relatief\", \"duidelijk\", \"overduidelijk\", \"klaarblijkelijk\", \"nadrukkelijk\", \"ogenschijnlijk\", \"kennelijk\", \"schijnbaar\", \"alweer\", \"continu\", \"herhaaldelijk\", \"nog\", \"steeds\", \"nu\"];\n// 'vrij' is not included because it also means 'free'.\nvar intensifiers = [\"zeer\", \"erg\", \"redelijk\", \"flink\", \"tikkeltje\", \"bijzonder\", \"ernstig\", \"enigszins\", \"zo\", \"tamelijk\", \"nogal\", \"behoorlijk\", \"zwaar\", \"heel\", \"hele\", \"reuze\", \"buitengewoon\", \"ontzettend\", \"vreselijk\"];\n// These verbs convey little meaning.\nvar delexicalizedVerbs = [\"laat\", \"liet\", \"lieten\", \"kom\", \"komt\", \"kwam\", \"kwamen\", \"maakt\", \"maak\", \"maakte\", \"maakten\", \"doe\", \"doet\", \"deed\", \"deden\", \"vindt\", \"vind\", \"vond\", \"vonden\"];\nvar delexicalizedVerbsInfinitive = [\"laten\", \"komen\", \"maken\", \"doen\", \"vinden\"];\n/* These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.\nKeyword combinations containing these adjectives/adverbs are fine. */\nvar generalAdjectivesAdverbs = [\"nieuw\", \"nieuwe\", \"nieuwer\", \"nieuwere\", \"nieuwst\", \"nieuwste\", \"oud\", \"oude\", \"ouder\", \"oudere\", \"oudst\", \"oudste\", \"vorig\", \"vorige\", \"goed\", \"goede\", \"beter\", \"betere\", \"best\", \"beste\", \"groot\", \"grote\", \"groter\", \"grotere\", \"grootst\", \"grootste\", \"makkelijk\", \"makkelijke\", \"makkelijker\", \"makkelijkere\", \"makkelijkst\", \"makkelijste\", \"gemakkelijk\", \"gemakkelijke\", \"gemakkelijker\", \"gemakkelijkere\", \"gemakkelijkst\", \"gemakkelijste\", \"simpel\", \"simpele\", \"simpeler\", \"simpelere\", \"simpelst\", \"simpelste\", \"snel\", \"snelle\", \"sneller\", \"snellere\", \"snelst\", \"snelste\", \"verre\", \"verder\", \"verdere\", \"verst\", \"verste\", \"lang\", \"lange\", \"langer\", \"langere\", \"langst\", \"langste\", \"hard\", \"harde\", \"harder\", \"hardere\", \"hardst\", \"hardste\", \"minder\", \"mindere\", \"minst\", \"minste\", \"eigen\", \"laag\", \"lage\", \"lager\", \"lagere\", \"laagst\", \"laagste\", \"hoog\", \"hoge\", \"hoger\", \"hogere\", \"hoogst\", \"hoogste\", \"klein\", \"kleine\", \"kleiner\", \"kleinere\", \"kleinst\", \"kleinste\", \"kort\", \"korte\", \"korter\", \"kortere\", \"kortst\", \"kortste\", \"herhaaldelijke\", \"directe\", \"ongeveer\", \"slecht\", \"slechte\", \"slechter\", \"slechtere\", \"slechtst\", \"slechtste\", \"zulke\", \"zulk\", \"zo'n\", \"zulks\", \"er\", \"extreem\", \"extreme\", \"bijbehorende\", \"bijbehorend\", \"niet\"];\nvar interjections = [\"oh\", \"wauw\", \"hèhè\", \"hè\", \"hé\", \"au\", \"ai\", \"jaja\", \"welja\", \"jawel\", \"ssst\", \"heremijntijd\", \"hemeltjelief\", \"aha\", \"foei\", \"hmm\", \"nou\", \"nee\", \"tja\", \"nja\", \"okido\", \"ho\", \"halt\", \"komaan\", \"komop\", \"verrek\", \"nietwaar\", \"brr\", \"oef\", \"ach\", \"och\", \"bah\", \"enfin\", \"afijn\", \"haha\", \"hihi\", \"hatsjie\", \"hatsjoe\", \"hm\", \"tring\", \"vroem\", \"boem\", \"hopla\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"ml\", \"cl\", \"dl\", \"l\", \"tl\", \"el\", \"mg\", \"g\", \"gr\", \"kg\", \"ca\", \"theel\", \"min\", \"sec\", \"uur\"];\nvar timeWords = [\"seconde\", \"secondes\", \"seconden\", \"minuut\", \"minuten\", \"uur\", \"uren\", \"dag\", \"dagen\", \"week\", \"weken\", \"maand\", \"maanden\", \"jaar\", \"jaren\", \"vandaag\", \"morgen\", \"overmorgen\", \"gisteren\", \"eergisteren\", \"'s\", \"morgens\", \"avonds\", \"middags\", \"nachts\"];\nvar vagueNouns = [\"ding\", \"dingen\", \"manier\", \"manieren\", \"item\", \"items\", \"keer\", \"maal\", \"procent\", \"geval\", \"aspect\", \"persoon\", \"personen\", \"deel\"];\nvar miscellaneous = [\"wel\", \"ja\", \"neen\", \"oké\", \"oke\", \"okee\", \"ok\", \"zoiets\", \"€\", \"euro\"];\nvar titlesPreceding = [\"mevr\", \"dhr\", \"mr\", \"dr\", \"prof\"];\nvar titlesFollowing = [\"jr\", \"sr\"];\n/*\nExports all function words concatenated, and specific word categories and category combinations\nto be used as filters for the prominent words.\n */\nmodule.exports = function () {\n  return {\n    // These word categories are filtered at the ending of word combinations.\n    filteredAtBeginning: [].concat(passiveAuxiliariesInfinitive, otherAuxiliariesInfinitive, copulaInfinitive, delexicalizedVerbsInfinitive),\n    // These word categories are filtered at the ending of word combinations.\n    filteredAtEnding: [].concat(ordinalNumerals, generalAdjectivesAdverbs),\n    // These word categories are filtered at the beginning and ending of word combinations.\n    filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers),\n    // These word categories are filtered everywhere within word combinations.\n    filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, reflexivePronouns, interjections, cardinalNumerals, filteredPassiveAuxiliaries, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeProAdverbs, relativePronouns, locativeAdverbs, miscellaneous, prepositionalAdverbs, pronominalAdverbs, recipeWords, timeWords, vagueNouns, reciprocalPronouns, possessivePronouns),\n    cannotDirectlyPrecedePassiveParticiple: [].concat(articles, interrogativeProAdverbs, cardinalNumerals, possessivePronouns, reflexivePronouns, indefinitePronounsPossessive, copula, copulaInfinitive, prepositions),\n    // This export contains all of the above words.\n    all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, reciprocalPronouns, personalPronounsNominative, personalPronounsAccusative, quantifiers, indefinitePronouns, indefinitePronounsPossessive, relativePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, prepositionalAdverbs, filteredPassiveAuxiliaries, passiveAuxiliariesInfinitive, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, titlesPreceding, titlesFollowing)\n  };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/functionWords.js\n// module id = 1254\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/functionWords.js?");

/***/ }),
/* 1255 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayMap = __webpack_require__(327),\n    baseIntersection = __webpack_require__(1494),\n    baseRest = __webpack_require__(402),\n    castArrayLikeObject = __webpack_require__(1495);\n\n/**\n * Creates an array of unique values that are included in all given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * _.intersection([2, 1], [2, 3]);\n * // => [2]\n */\nvar intersection = baseRest(function(arrays) {\n  var mapped = arrayMap(arrays, castArrayLikeObject);\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped)\n    : [];\n});\n\nmodule.exports = intersection;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/intersection.js\n// module id = 1255\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/intersection.js?");

/***/ }),
/* 1256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getWords = __webpack_require__(229);\nvar regexFunction = __webpack_require__(1501)();\nvar verbsBeginningWithErVerEntBeZerHerUber = regexFunction.verbsBeginningWithErVerEntBeZerHerUber;\nvar verbsBeginningWithGe = regexFunction.verbsBeginningWithGe;\nvar verbsWithGeInMiddle = regexFunction.verbsWithGeInMiddle;\nvar verbsWithErVerEntBeZerHerUberInMiddle = regexFunction.verbsWithErVerEntBeZerHerUberInMiddle;\nvar verbsEndingWithIert = regexFunction.verbsEndingWithIert;\nvar irregularParticiples = __webpack_require__(1502)();\nvar GermanParticiple = __webpack_require__(1503);\nvar forEach = __webpack_require__(32);\nvar includes = __webpack_require__(147);\n/**\n * Creates GermanParticiple Objects for the participles found in a sentence.\n *\n * @param {string} sentencePartText The sentence to finds participles in.\n * @param {Array} auxiliaries The list of auxiliaries from the sentence part.\n * @param {string} language The language.\n *\n * @returns {Array} The array with GermanParticiple Objects.\n */\nmodule.exports = function (sentencePartText, auxiliaries, language) {\n    var words = getWords(sentencePartText);\n    var foundParticiples = [];\n    forEach(words, function (word) {\n        if (verbsBeginningWithGe(word).length !== 0) {\n            foundParticiples.push(new GermanParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: \"ge at beginning\", language: language }));\n            return;\n        }\n        if (verbsWithGeInMiddle(word).length !== 0) {\n            foundParticiples.push(new GermanParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: \"ge in the middle\", language: language }));\n            return;\n        }\n        if (verbsBeginningWithErVerEntBeZerHerUber(word).length !== 0) {\n            foundParticiples.push(new GermanParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: \"er/ver/ent/be/zer/her at beginning\", language: language }));\n            return;\n        }\n        if (verbsWithErVerEntBeZerHerUberInMiddle(word).length !== 0) {\n            foundParticiples.push(new GermanParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: \"er/ver/ent/be/zer/her in the middle\", language: language }));\n            return;\n        }\n        if (verbsEndingWithIert(word).length !== 0) {\n            foundParticiples.push(new GermanParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: \"iert at the end\", language: language }));\n        }\n        if (includes(irregularParticiples, word)) {\n            foundParticiples.push(new GermanParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: \"irregular\", language: language }));\n        }\n    });\n    return foundParticiples;\n};\n//# sourceMappingURL=getParticiples.js.map\n//# sourceMappingURL=getParticiples.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/getParticiples.js\n// module id = 1256\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/getParticiples.js?");

/***/ }),
/* 1257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with auxiliaries for the Dutch passive voice assessment.\n * @returns {Array} The list with auxiliaries.\n */\n\nmodule.exports = function () {\n  return [\"word\", \"wordt\", \"worden\", \"werd\", \"werden\", \"wordend\"];\n};\n//# sourceMappingURL=auxiliaries.js.map\n//# sourceMappingURL=auxiliaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/auxiliaries.js\n// module id = 1257\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/auxiliaries.js?");

/***/ }),
/* 1258 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseHas = __webpack_require__(1537),\n    hasPath = __webpack_require__(1200);\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/has.js\n// module id = 1258\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/has.js?");

/***/ }),
/* 1259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar getLanguageAvailability = __webpack_require__(695);\nvar availableLanguages = [\"en\"];\n/**\n * Calculate the score based on the amount of stop words in the keyword.\n *\n * @param {number} stopWordCount The amount of stop words to be checked against.\n * @param {Jed} i18n The locale object.\n *\n * @returns {Object} The resulting score object.\n */\nvar calculateStopWordsCountResult = function calculateStopWordsCountResult(stopWordCount, i18n) {\n    if (stopWordCount > 0) {\n        return {\n            score: 0,\n            text: i18n.dngettext(\"js-text-analysis\",\n            /* Translators: %1$s opens a link to a Yoast article about stop words, %2$s closes the link */\n            \"The focus keyword contains a stop word. This may or may not be wise depending on the circumstances. \" + \"%1$sLearn more about the stop words%2$s.\", \"The focus keyword contains %3$d stop words. This may or may not be wise depending on the circumstances. \" + \"%1$sLearn more about the stop words%2$s.\", stopWordCount)\n        };\n    }\n    return {};\n};\n/**\n * Execute the Assessment and return a result.\n *\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @param {Jed} i18n The locale object.\n *\n * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n */\nvar keywordHasStopWordsAssessment = function keywordHasStopWordsAssessment(paper, researcher, i18n) {\n    var stopWords = researcher.getResearch(\"stopWordsInKeyword\");\n    var stopWordsResult = calculateStopWordsCountResult(stopWords.length, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(stopWordsResult.score);\n    assessmentResult.setText(i18n.sprintf(stopWordsResult.text, \"<a href='https://yoa.st/stopwords/' target='_blank'>\", \"</a>\", stopWords.length));\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"keywordStopWords\",\n    getResult: keywordHasStopWordsAssessment,\n    isApplicable: function isApplicable(paper) {\n        var isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n        return paper.hasKeyword() && isLanguageAvailable;\n    }\n};\n//# sourceMappingURL=keywordStopWordsAssessment.js.map\n//# sourceMappingURL=keywordStopWordsAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/keywordStopWordsAssessment.js\n// module id = 1259\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/keywordStopWordsAssessment.js?");

/***/ }),
/* 1260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\nvar config_1 = __webpack_require__(1261);\nvar maximumMetaDescriptionLength = config_1.default.maxMeta;\n/**\n * Assessment for calculating the length of the meta description.\n */\n\nvar MetaDescriptionLengthAssessment = function (_Assessment) {\n    _inherits(MetaDescriptionLengthAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     *\n     * @returns {void}\n     */\n    function MetaDescriptionLengthAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, MetaDescriptionLengthAssessment);\n\n        var _this = _possibleConstructorReturn(this, (MetaDescriptionLengthAssessment.__proto__ || Object.getPrototypeOf(MetaDescriptionLengthAssessment)).call(this));\n\n        var defaultConfig = {\n            recommendedMaximumLength: 120,\n            maximumLength: maximumMetaDescriptionLength,\n            scores: {\n                noMetaDescription: 1,\n                tooLong: 6,\n                tooShort: 6,\n                correctLength: 9\n            }\n        };\n        _this.identifier = \"metaDescriptionLength\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Returns the maximum length.\n     *\n     * @returns {number} The maximum length.\n     */\n\n    _createClass(MetaDescriptionLengthAssessment, [{\n        key: \"getMaximumLength\",\n        value: function getMaximumLength() {\n            return this._config.maximumLength;\n        }\n        /**\n         * Runs the metaDescriptionLength module, based on this returns an assessment result with score.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         * @param {Researcher} researcher The researcher used for calling research.\n         * @param {Jed} i18n The object used for translations\n         *\n         * @returns {AssessmentResult} The assessment result.\n         */\n\n    }, {\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var descriptionLength = researcher.getResearch(\"metaDescriptionLength\");\n            var assessmentResult = new AssessmentResult();\n            assessmentResult.setScore(this.calculateScore(descriptionLength));\n            assessmentResult.setText(this.translateScore(descriptionLength, i18n));\n            // Max and actual are used in the snippet editor progress bar.\n            assessmentResult.max = this._config.maximumLength;\n            assessmentResult.actual = descriptionLength;\n            return assessmentResult;\n        }\n        /**\n         * Returns the score for the descriptionLength.\n         *\n         * @param {number} descriptionLength The length of the metadescription.\n         *\n         * @returns {number} The calculated score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(descriptionLength) {\n            if (descriptionLength === 0) {\n                return this._config.scores.noMetaDescription;\n            }\n            if (descriptionLength <= this._config.recommendedMaximumLength) {\n                return this._config.scores.tooShort;\n            }\n            if (descriptionLength > this._config.maximumLength) {\n                return this._config.scores.tooLong;\n            }\n            if (descriptionLength >= this._config.recommendedMaximumLength && descriptionLength <= this._config.maximumLength) {\n                return this._config.scores.correctLength;\n            }\n            return 0;\n        }\n        /**\n         * Translates the descriptionLength to a message the user can understand.\n         *\n         * @param {number} descriptionLength The length of the metadescription.\n         * @param {object} i18n The object used for translations.\n         *\n         * @returns {string} The translated string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(descriptionLength, i18n) {\n            var url = \"<a href='https://yoa.st/2pg' target='_blank'>\";\n            if (descriptionLength === 0) {\n                return i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"No %1$smeta description%2$s has been specified. \" + \"Search engines will display copy from the page instead.\"), url, \"</a>\");\n            }\n            if (descriptionLength <= this._config.recommendedMaximumLength) {\n                return i18n.sprintf(\n                /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag,\n                %3$d expands to the number of characters in the meta description, %4$d expands to\n                the total available number of characters in the meta description */\n                i18n.dgettext(\"js-text-analysis\", \"The %1$smeta description%2$s is under %3$d characters long. \" + \"However, up to %4$d characters are available.\"), url, \"</a>\", this._config.recommendedMaximumLength, this._config.maximumLength);\n            }\n            if (descriptionLength > this._config.maximumLength) {\n                return i18n.sprintf(\n                /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag,\n                %3$d expands to\tthe total available number of characters in the meta description */\n                i18n.dgettext(\"js-text-analysis\", \"The %1$smeta description%2$s is over %3$d characters. \" + \"Reducing the length will ensure the entire description will be visible.\"), url, \"</a>\", this._config.maximumLength);\n            }\n            if (descriptionLength >= this._config.recommendedMaximumLength && descriptionLength <= this._config.maximumLength) {\n                return i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"The %1$smeta description%2$s has a nice length.\"), url, \"</a>\");\n            }\n        }\n    }]);\n\n    return MetaDescriptionLengthAssessment;\n}(Assessment);\n\nmodule.exports = MetaDescriptionLengthAssessment;\n//# sourceMappingURL=metaDescriptionLengthAssessment.js.map\n//# sourceMappingURL=metaDescriptionLengthAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/metaDescriptionLengthAssessment.js\n// module id = 1260\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/metaDescriptionLengthAssessment.js?");

/***/ }),
/* 1261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar analyzerConfig = {\n    queue: [\"wordCount\", \"keywordDensity\", \"subHeadings\", \"stopwords\", \"fleschReading\", \"linkCount\", \"imageCount\", \"urlKeyword\", \"urlLength\", \"metaDescriptionLength\", \"metaDescriptionKeyword\", \"pageTitleKeyword\", \"pageTitleLength\", \"firstParagraph\", \"urlStopwords\", \"keywordDoubles\", \"keyphraseSizeCheck\"],\n    stopWords: [\"a\", \"about\", \"above\", \"after\", \"again\", \"against\", \"all\", \"am\", \"an\", \"and\", \"any\", \"are\", \"as\", \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"below\", \"between\", \"both\", \"but\", \"by\", \"could\", \"did\", \"do\", \"does\", \"doing\", \"down\", \"during\", \"each\", \"few\", \"for\", \"from\", \"further\", \"had\", \"has\", \"have\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"how's\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\", \"it\", \"it's\", \"its\", \"itself\", \"let's\", \"me\", \"more\", \"most\", \"my\", \"myself\", \"nor\", \"of\", \"on\", \"once\", \"only\", \"or\", \"other\", \"ought\", \"our\", \"ours\", \"ourselves\", \"out\", \"over\", \"own\", \"same\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\", \"so\", \"some\", \"such\", \"than\", \"that\", \"that's\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"there's\", \"these\", \"they\", \"they'd\", \"they'll\", \"they're\", \"they've\", \"this\", \"those\", \"through\", \"to\", \"too\", \"under\", \"until\", \"up\", \"very\", \"was\", \"we\", \"we'd\", \"we'll\", \"we're\", \"we've\", \"were\", \"what\", \"what's\", \"when\", \"when's\", \"where\", \"where's\", \"which\", \"while\", \"who\", \"who's\", \"whom\", \"why\", \"why's\", \"with\", \"would\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\"],\n    wordsToRemove: [\" a\", \" in\", \" an\", \" on\", \" for\", \" the\", \" and\"],\n    maxSlugLength: 20,\n    maxUrlLength: 40,\n    maxMeta: 156\n};\nexports.default = analyzerConfig;\n//# sourceMappingURL=config.js.map\n//# sourceMappingURL=config.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/config.js\n// module id = 1261\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/config.js?");

/***/ }),
/* 1262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar merge = __webpack_require__(98);\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\nvar inRange = __webpack_require__(395).inRangeEndInclusive;\nvar maximumLength = 600;\n/**\n * Represents the assessment that will calculate if the width of the page title is correct.\n */\n\nvar PageTitleWidthAssesment = function (_Assessment) {\n    _inherits(PageTitleWidthAssesment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     *\n     * @returns {void}\n     */\n    function PageTitleWidthAssesment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, PageTitleWidthAssesment);\n\n        var _this = _possibleConstructorReturn(this, (PageTitleWidthAssesment.__proto__ || Object.getPrototypeOf(PageTitleWidthAssesment)).call(this));\n\n        var defaultConfig = {\n            minLength: 400,\n            maxLength: maximumLength,\n            scores: {\n                noTitle: 1,\n                widthTooShort: 6,\n                widthTooLong: 3,\n                widthCorrect: 9\n            }\n        };\n        _this.identifier = \"titleWidth\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Returns the maximum length.\n     *\n     * @returns {number} The maximum length.\n     */\n\n    _createClass(PageTitleWidthAssesment, [{\n        key: \"getMaximumLength\",\n        value: function getMaximumLength() {\n            return maximumLength;\n        }\n        /**\n         * Runs the pageTitleWidth module, based on this returns an assessment result with score.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         * @param {Researcher} researcher The researcher used for calling research.\n         * @param {Jed} i18n The object used for translations\n         *\n         * @returns {AssessmentResult} The assessment result.\n         */\n\n    }, {\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var pageTitleWidth = researcher.getResearch(\"pageTitleWidth\");\n            var assessmentResult = new AssessmentResult();\n            assessmentResult.setScore(this.calculateScore(pageTitleWidth));\n            assessmentResult.setText(this.translateScore(pageTitleWidth, i18n));\n            // Max and actual are used in the snippet editor progress bar.\n            assessmentResult.max = this._config.maxLength;\n            assessmentResult.actual = pageTitleWidth;\n            return assessmentResult;\n        }\n        /**\n         * Returns the score for the pageTitleWidth\n         *\n         * @param {number} pageTitleWidth The width of the pageTitle.\n         *\n         * @returns {number} The calculated score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(pageTitleWidth) {\n            if (inRange(pageTitleWidth, 1, 400)) {\n                return this._config.scores.widthTooShort;\n            }\n            if (inRange(pageTitleWidth, this._config.minLength, this._config.maxLength)) {\n                return this._config.scores.widthCorrect;\n            }\n            if (pageTitleWidth > this._config.maxLength) {\n                return this._config.scores.widthTooLong;\n            }\n            return this._config.scores.noTitle;\n        }\n        /**\n         * Translates the pageTitleWidth score to a message the user can understand.\n         *\n         * @param {number} pageTitleWidth The width of the pageTitle.\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {string} The translated string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(pageTitleWidth, i18n) {\n            var url = \"<a href='https://yoa.st/2po' target='_blank'>\";\n            if (inRange(pageTitleWidth, 1, 400)) {\n                return i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"The %1$sSEO title%2$s is too short. Use the space to add keyword variations or create compelling call-to-action copy.\"), url, \"</a>\");\n            }\n            if (inRange(pageTitleWidth, this._config.minLength, this._config.maxLength)) {\n                return i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"The %1$sSEO title%2$s has a nice length.\"), url, \"</a>\");\n            }\n            if (pageTitleWidth > this._config.maxLength) {\n                return i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"The %1$sSEO title%2$s is wider than the viewable limit.\"), url, \"</a>\");\n            }\n            return i18n.sprintf(\n            /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n            i18n.dgettext(\"js-text-analysis\", \"Please create an %1$sSEO title%2$s.\"), url, \"</a>\");\n        }\n    }]);\n\n    return PageTitleWidthAssesment;\n}(Assessment);\n\nmodule.exports = PageTitleWidthAssesment;\n//# sourceMappingURL=pageTitleWidthAssessment.js.map\n//# sourceMappingURL=pageTitleWidthAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/pageTitleWidthAssessment.js\n// module id = 1262\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/pageTitleWidthAssessment.js?");

/***/ }),
/* 1263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar merge = __webpack_require__(98);\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\n/**\n * Assessment that checks if the url is long enough.\n */\n\nvar UrlLengthAssessment = function (_Assessment) {\n    _inherits(UrlLengthAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     *\n     * @returns {void}\n     */\n    function UrlLengthAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, UrlLengthAssessment);\n\n        var _this = _possibleConstructorReturn(this, (UrlLengthAssessment.__proto__ || Object.getPrototypeOf(UrlLengthAssessment)).call(this));\n\n        var defaultConfig = {\n            scores: {\n                tooLong: 6\n            }\n        };\n        _this.identifier = \"urlLength\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Checks the length of the url.\n     *\n     * @param {Paper} paper The paper to run this assessment on.\n     * @param {Researcher} researcher The researcher used for the assessment.\n     * @param {Jed} i18n The i18n-object used for parsing translations.\n     *\n     * @returns {AssessmentResult} an AssessmentResult with the score and the formatted text.\n     */\n\n    _createClass(UrlLengthAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var urlIsTooLong = researcher.getResearch(\"urlLength\");\n            var assessmentResult = new AssessmentResult();\n            assessmentResult.setScore(this.calculateScore(urlIsTooLong));\n            assessmentResult.setText(this.translateScore(urlIsTooLong, i18n));\n            return assessmentResult;\n        }\n        /**\n         * Checks whether the paper has a url.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is text.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasUrl();\n        }\n        /**\n         * Calculates the score based on the url length.\n         *\n         * @param {boolean} urlIsTooLong True when the URL is too long.\n         *\n         * @returns {number|null} The calculated score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(urlIsTooLong) {\n            if (urlIsTooLong) {\n                return this._config.scores.tooLong;\n            }\n            return null;\n        }\n        /**\n         * Translates the score to a message the user can understand.\n         *\n         * @param {boolean} urlIsTooLong True when the URL is too long.\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {string} The translated string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(urlIsTooLong, i18n) {\n            if (urlIsTooLong) {\n                return i18n.dgettext(\"js-text-analysis\", \"The slug for this page is a bit long, consider shortening it.\");\n            }\n            return \"\";\n        }\n    }]);\n\n    return UrlLengthAssessment;\n}(Assessment);\n\nmodule.exports = UrlLengthAssessment;\n//# sourceMappingURL=urlLengthAssessment.js.map\n//# sourceMappingURL=urlLengthAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/urlLengthAssessment.js\n// module id = 1263\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/urlLengthAssessment.js?");

/***/ }),
/* 1264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar getLanguageAvailability = __webpack_require__(695);\nvar availableLanguages = [\"en\"];\n/**\n * Calculate the score based on the amount of stop words in the url.\n *\n * @param {number} stopWordCount The amount of stop words to be checked against.\n * @param {Jed} i18n The locale object.\n *\n * @returns {Object} The resulting score object.\n */\nvar calculateUrlStopWordsCountResult = function calculateUrlStopWordsCountResult(stopWordCount, i18n) {\n    if (stopWordCount > 0) {\n        return {\n            score: 5,\n            text: i18n.dngettext(\"js-text-analysis\",\n            /* Translators: %1$s opens a link to a wikipedia article about stop words, %2$s closes the link */\n            \"The slug for this page contains a %1$sstop word%2$s, consider removing it.\", \"The slug for this page contains %1$sstop words%2$s, consider removing them.\", stopWordCount)\n        };\n    }\n    return {};\n};\n/**\n * Execute the Assessment and return a result.\n *\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @param {Jed} i18n The locale object.\n *\n * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n */\nvar urlHasStopWordsAssessment = function urlHasStopWordsAssessment(paper, researcher, i18n) {\n    var stopWords = researcher.getResearch(\"stopWordsInUrl\");\n    var stopWordsResult = calculateUrlStopWordsCountResult(stopWords.length, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(stopWordsResult.score);\n    assessmentResult.setText(i18n.sprintf(stopWordsResult.text,\n    /* Translators: this link is referred to in the content analysis when a slug contains one or more stop words */\n    \"<a href='\" + i18n.dgettext(\"js-text-analysis\", \"http://en.wikipedia.org/wiki/Stop_words\") + \"' target='_blank'>\", \"</a>\"));\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"urlStopWords\",\n    isApplicable: function isApplicable(paper) {\n        return getLanguageAvailability(paper.getLocale(), availableLanguages);\n    },\n    getResult: urlHasStopWordsAssessment\n};\n//# sourceMappingURL=urlStopWordsAssessment.js.map\n//# sourceMappingURL=urlStopWordsAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/urlStopWordsAssessment.js\n// module id = 1264\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/urlStopWordsAssessment.js?");

/***/ }),
/* 1265 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseInRange = __webpack_require__(1563),\n    toFinite = __webpack_require__(1236),\n    toNumber = __webpack_require__(1127);\n\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @static\n * @memberOf _\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see _.range, _.rangeRight\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n *\n * _.inRange(-3, -2, -6);\n * // => true\n */\nfunction inRange(number, start, end) {\n  start = toFinite(start);\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = toFinite(end);\n  }\n  number = toNumber(number);\n  return baseInRange(number, start, end);\n}\n\nmodule.exports = inRange;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/inRange.js\n// module id = 1265\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/inRange.js?");

/***/ }),
/* 1266 */,
/* 1267 */,
/* 1268 */,
/* 1269 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetAllKeys = __webpack_require__(1270),\n    getSymbols = __webpack_require__(1195),\n    keys = __webpack_require__(323);\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getAllKeys.js\n// module id = 1269\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getAllKeys.js?");

/***/ }),
/* 1270 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayPush = __webpack_require__(1121),\n    isArray = __webpack_require__(64);\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseGetAllKeys.js\n// module id = 1270\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseGetAllKeys.js?");

/***/ }),
/* 1271 */
/***/ (function(module, exports) {

eval("/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/stubArray.js\n// module id = 1271\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/stubArray.js?");

/***/ }),
/* 1272 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseProperty.js\n// module id = 1272\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseProperty.js?");

/***/ }),
/* 1273 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(121);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(30)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneBuffer.js\n// module id = 1273\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneBuffer.js?");

/***/ }),
/* 1274 */
/***/ (function(module, exports, __webpack_require__) {

eval("var cloneArrayBuffer = __webpack_require__(1208);\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneTypedArray.js\n// module id = 1274\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneTypedArray.js?");

/***/ }),
/* 1275 */
/***/ (function(module, exports) {

eval("/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copyArray.js\n// module id = 1275\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copyArray.js?");

/***/ }),
/* 1276 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseCreate = __webpack_require__(1363),\n    getPrototype = __webpack_require__(1123),\n    isPrototype = __webpack_require__(561);\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_initCloneObject.js\n// module id = 1276\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_initCloneObject.js?");

/***/ }),
/* 1277 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(174),\n    getPrototype = __webpack_require__(1123),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isPlainObject.js\n// module id = 1277\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isPlainObject.js?");

/***/ }),
/* 1278 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseRest = __webpack_require__(402),\n    isIterateeCall = __webpack_require__(1094);\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createAssigner.js\n// module id = 1278\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createAssigner.js?");

/***/ }),
/* 1279 */
/***/ (function(module, exports) {

eval("/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_apply.js\n// module id = 1279\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_apply.js?");

/***/ }),
/* 1280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Throws an invalid type error\n * @param {string} message The message to show when the error is thrown\n * @returns {void}\n */\n\nmodule.exports = function InvalidTypeError(message) {\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n};\n__webpack_require__(79).inherits(module.exports, Error);\n//# sourceMappingURL=invalidType.js.map\n//# sourceMappingURL=invalidType.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/errors/invalidType.js\n// module id = 1280\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/errors/invalidType.js?");

/***/ }),
/* 1281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar map = __webpack_require__(63);\n/**\n * Gets all subheadings from the text and returns these in an array.\n *\n * @param {string} text The text to return the headings from.\n * @returns {Array} Matches of subheadings in the text, first key is everything including tags, second is the heading\n *                  level, third is the content of the subheading.\n */\nfunction getSubheadings(text) {\n    var subheadings = [];\n    var regex = /<h([1-6])(?:[^>]+)?>(.*?)<\\/h\\1>/ig;\n    var match;\n    while ((match = regex.exec(text)) !== null) {\n        subheadings.push(match);\n    }\n    return subheadings;\n}\n/**\n * Gets the content of subheadings in the text\n *\n * @param {string} text The text to get the subheading contents from.\n * @returns {Array<string>} A list of all the subheadings with their content.\n */\nfunction getSubheadingContents(text) {\n    var subheadings = getSubheadings(text);\n    subheadings = map(subheadings, function (subheading) {\n        return subheading[0];\n    });\n    return subheadings;\n}\nmodule.exports = {\n    getSubheadings: getSubheadings,\n    getSubheadingContents: getSubheadingContents\n};\n//# sourceMappingURL=getSubheadings.js.map\n//# sourceMappingURL=getSubheadings.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getSubheadings.js\n// module id = 1281\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getSubheadings.js?");

/***/ }),
/* 1282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/stringToRegex */\n\nvar isUndefined = __webpack_require__(66);\nvar replaceDiacritics = __webpack_require__(1232);\nvar addWordBoundary = __webpack_require__(565);\nvar sanitizeString = __webpack_require__(1233);\nvar escapeRegExp = __webpack_require__(162);\nvar memoize = __webpack_require__(214);\n/**\n * Creates a regex from a string so it can be matched everywhere in the same way.\n *\n * @param {string} string The string to make a regex from.\n * @param {string} [extraBoundary=\"\"] A string that is used as extra boundary for the regex.\n * @param {boolean} [doReplaceDiacritics=true] If set to false, it doesn't replace diacritics. Defaults to true.\n * @returns {RegExp} regex The regex made from the keyword\n */\nmodule.exports = memoize(function (string, extraBoundary, doReplaceDiacritics) {\n    if (isUndefined(extraBoundary)) {\n        extraBoundary = \"\";\n    }\n    if (isUndefined(doReplaceDiacritics) || doReplaceDiacritics === true) {\n        string = replaceDiacritics(string);\n    }\n    string = sanitizeString(string);\n    string = escapeRegExp(string);\n    string = addWordBoundary(string, false, extraBoundary);\n    return new RegExp(string, \"ig\");\n});\n//# sourceMappingURL=createWordRegex.js.map\n//# sourceMappingURL=createWordRegex.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/createWordRegex.js\n// module id = 1282\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/createWordRegex.js?");

/***/ }),
/* 1283 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseSum = __webpack_require__(1441),\n    identity = __webpack_require__(325);\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/sum.js\n// module id = 1283\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/sum.js?");

/***/ }),
/* 1284 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFlatten = __webpack_require__(587),\n    baseOrderBy = __webpack_require__(1551),\n    baseRest = __webpack_require__(402),\n    isIterateeCall = __webpack_require__(1094);\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/sortBy.js\n// module id = 1284\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/sortBy.js?");

/***/ }),
/* 1285 */,
/* 1286 */,
/* 1287 */,
/* 1288 */,
/* 1289 */,
/* 1290 */,
/* 1291 */,
/* 1292 */,
/* 1293 */,
/* 1294 */,
/* 1295 */,
/* 1296 */,
/* 1297 */,
/* 1298 */,
/* 1299 */,
/* 1300 */,
/* 1301 */,
/* 1302 */,
/* 1303 */,
/* 1304 */,
/* 1305 */,
/* 1306 */,
/* 1307 */,
/* 1308 */,
/* 1309 */,
/* 1310 */,
/* 1311 */,
/* 1312 */,
/* 1313 */,
/* 1314 */,
/* 1315 */,
/* 1316 */,
/* 1317 */,
/* 1318 */,
/* 1319 */,
/* 1320 */,
/* 1321 */,
/* 1322 */,
/* 1323 */,
/* 1324 */,
/* 1325 */,
/* 1326 */,
/* 1327 */,
/* 1328 */,
/* 1329 */,
/* 1330 */,
/* 1331 */,
/* 1332 */,
/* 1333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar getSentences = __webpack_require__(215);\n/**\n * @param {Paper} paper The paper to analyze.\n */\nfunction default_1(paper) {\n  return getSentences(paper.getText());\n}\nexports.default = default_1;\n//# sourceMappingURL=sentences.js.map\n//# sourceMappingURL=sentences.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/sentences.js\n// module id = 1333\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/sentences.js?");

/***/ }),
/* 1334 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsMatch = __webpack_require__(1335),\n    getMatchData = __webpack_require__(1351),\n    matchesStrictComparable = __webpack_require__(1198);\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMatches.js\n// module id = 1334\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMatches.js?");

/***/ }),
/* 1335 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(707),\n    baseIsEqual = __webpack_require__(1192);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsMatch.js\n// module id = 1335\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsMatch.js?");

/***/ }),
/* 1336 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ListCache = __webpack_require__(562);\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackClear.js\n// module id = 1336\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackClear.js?");

/***/ }),
/* 1337 */
/***/ (function(module, exports) {

eval("/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackDelete.js\n// module id = 1337\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackDelete.js?");

/***/ }),
/* 1338 */
/***/ (function(module, exports) {

eval("/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackGet.js\n// module id = 1338\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackGet.js?");

/***/ }),
/* 1339 */
/***/ (function(module, exports) {

eval("/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackHas.js\n// module id = 1339\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackHas.js?");

/***/ }),
/* 1340 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ListCache = __webpack_require__(562),\n    Map = __webpack_require__(686),\n    MapCache = __webpack_require__(685);\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackSet.js\n// module id = 1340\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stackSet.js?");

/***/ }),
/* 1341 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(707),\n    equalArrays = __webpack_require__(1193),\n    equalByTag = __webpack_require__(1345),\n    equalObjects = __webpack_require__(1347),\n    getTag = __webpack_require__(711),\n    isArray = __webpack_require__(64),\n    isBuffer = __webpack_require__(400),\n    isTypedArray = __webpack_require__(560);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsEqualDeep.js\n// module id = 1341\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsEqualDeep.js?");

/***/ }),
/* 1342 */
/***/ (function(module, exports) {

eval("/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setCacheAdd.js\n// module id = 1342\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setCacheAdd.js?");

/***/ }),
/* 1343 */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setCacheHas.js\n// module id = 1343\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_setCacheHas.js?");

/***/ }),
/* 1344 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arraySome.js\n// module id = 1344\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arraySome.js?");

/***/ }),
/* 1345 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(324),\n    Uint8Array = __webpack_require__(1194),\n    eq = __webpack_require__(326),\n    equalArrays = __webpack_require__(1193),\n    mapToArray = __webpack_require__(1346),\n    setToArray = __webpack_require__(1087);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_equalByTag.js\n// module id = 1345\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_equalByTag.js?");

/***/ }),
/* 1346 */
/***/ (function(module, exports) {

eval("/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapToArray.js\n// module id = 1346\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_mapToArray.js?");

/***/ }),
/* 1347 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getAllKeys = __webpack_require__(1269);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_equalObjects.js\n// module id = 1347\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_equalObjects.js?");

/***/ }),
/* 1348 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(228),\n    root = __webpack_require__(121);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_DataView.js\n// module id = 1348\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_DataView.js?");

/***/ }),
/* 1349 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(228),\n    root = __webpack_require__(121);\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Promise.js\n// module id = 1349\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_Promise.js?");

/***/ }),
/* 1350 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(228),\n    root = __webpack_require__(121);\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_WeakMap.js\n// module id = 1350\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_WeakMap.js?");

/***/ }),
/* 1351 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isStrictComparable = __webpack_require__(1197),\n    keys = __webpack_require__(323);\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getMatchData.js\n// module id = 1351\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getMatchData.js?");

/***/ }),
/* 1352 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsEqual = __webpack_require__(1192),\n    get = __webpack_require__(1353),\n    hasIn = __webpack_require__(1199),\n    isKey = __webpack_require__(1089),\n    isStrictComparable = __webpack_require__(1197),\n    matchesStrictComparable = __webpack_require__(1198),\n    toKey = __webpack_require__(564);\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMatchesProperty.js\n// module id = 1352\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMatchesProperty.js?");

/***/ }),
/* 1353 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGet = __webpack_require__(1088);\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/get.js\n// module id = 1353\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/get.js?");

/***/ }),
/* 1354 */
/***/ (function(module, exports, __webpack_require__) {

eval("var memoizeCapped = __webpack_require__(1355);\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stringToPath.js\n// module id = 1354\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_stringToPath.js?");

/***/ }),
/* 1355 */
/***/ (function(module, exports, __webpack_require__) {

eval("var memoize = __webpack_require__(214);\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_memoizeCapped.js\n// module id = 1355\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_memoizeCapped.js?");

/***/ }),
/* 1356 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(324),\n    arrayMap = __webpack_require__(327),\n    isArray = __webpack_require__(64),\n    isSymbol = __webpack_require__(563);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseToString.js\n// module id = 1356\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseToString.js?");

/***/ }),
/* 1357 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseHasIn.js\n// module id = 1357\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseHasIn.js?");

/***/ }),
/* 1358 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseProperty = __webpack_require__(1272),\n    basePropertyDeep = __webpack_require__(1359),\n    isKey = __webpack_require__(1089),\n    toKey = __webpack_require__(564);\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/property.js\n// module id = 1358\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/property.js?");

/***/ }),
/* 1359 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGet = __webpack_require__(1088);\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePropertyDeep.js\n// module id = 1359\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePropertyDeep.js?");

/***/ }),
/* 1360 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isNumber = __webpack_require__(1122);\n\n/**\n * Checks if `value` is `NaN`.\n *\n * **Note:** This method is based on\n * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n * `undefined` and other non-number values.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n * @example\n *\n * _.isNaN(NaN);\n * // => true\n *\n * _.isNaN(new Number(NaN));\n * // => true\n *\n * isNaN(undefined);\n * // => true\n *\n * _.isNaN(undefined);\n * // => false\n */\nfunction isNaN(value) {\n  // An `NaN` primitive is the only value that is not equal to itself.\n  // Perform the `toStringTag` check first to avoid errors with some\n  // ActiveX objects in IE.\n  return isNumber(value) && value != +value;\n}\n\nmodule.exports = isNaN;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isNaN.js\n// module id = 1360\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isNaN.js?");

/***/ }),
/* 1361 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(324),\n    isArguments = __webpack_require__(388),\n    isArray = __webpack_require__(64);\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isFlattenable.js\n// module id = 1361\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_isFlattenable.js?");

/***/ }),
/* 1362 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assignMergeValue = __webpack_require__(1206),\n    cloneBuffer = __webpack_require__(1273),\n    cloneTypedArray = __webpack_require__(1274),\n    copyArray = __webpack_require__(1275),\n    initCloneObject = __webpack_require__(1276),\n    isArguments = __webpack_require__(388),\n    isArray = __webpack_require__(64),\n    isArrayLikeObject = __webpack_require__(1092),\n    isBuffer = __webpack_require__(400),\n    isFunction = __webpack_require__(389),\n    isObject = __webpack_require__(96),\n    isPlainObject = __webpack_require__(1277),\n    isTypedArray = __webpack_require__(560),\n    safeGet = __webpack_require__(1209),\n    toPlainObject = __webpack_require__(1364);\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMergeDeep.js\n// module id = 1362\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseMergeDeep.js?");

/***/ }),
/* 1363 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(96);\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseCreate.js\n// module id = 1363\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseCreate.js?");

/***/ }),
/* 1364 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(1093),\n    keysIn = __webpack_require__(688);\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toPlainObject.js\n// module id = 1364\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/toPlainObject.js?");

/***/ }),
/* 1365 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(96),\n    isPrototype = __webpack_require__(561),\n    nativeKeysIn = __webpack_require__(1366);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseKeysIn.js\n// module id = 1365\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseKeysIn.js?");

/***/ }),
/* 1366 */
/***/ (function(module, exports) {

eval("/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nativeKeysIn.js\n// module id = 1366\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_nativeKeysIn.js?");

/***/ }),
/* 1367 */
/***/ (function(module, exports, __webpack_require__) {

eval("var constant = __webpack_require__(1368),\n    defineProperty = __webpack_require__(1207),\n    identity = __webpack_require__(325);\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSetToString.js\n// module id = 1367\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSetToString.js?");

/***/ }),
/* 1368 */
/***/ (function(module, exports) {

eval("/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/constant.js\n// module id = 1368\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/constant.js?");

/***/ }),
/* 1369 */
/***/ (function(module, exports) {

eval("/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_shortOut.js\n// module id = 1369\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_shortOut.js?");

/***/ }),
/* 1370 */
/***/ (function(module, exports) {

eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util/support/isBufferBrowser.js\n// module id = 1370\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util/support/isBufferBrowser.js?");

/***/ }),
/* 1371 */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util/node_modules/inherits/inherits_browser.js\n// module id = 1371\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util/node_modules/inherits/inherits_browser.js?");

/***/ }),
/* 1372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/getLinkStatistics */\n\nvar getAnchors = __webpack_require__(1213);\nvar findKeywordInUrl = __webpack_require__(1373);\nvar getLinkType = __webpack_require__(1377);\nvar checkNofollow = __webpack_require__(1378);\nvar urlHelper = __webpack_require__(1096);\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Checks whether or not an anchor contains the passed keyword.\n * @param {string} keyword The keyword to look for.\n * @param {string} anchor The anchor to check against.\n * @param {string} locale The locale used for transliteration.\n * @returns {boolean} Whether or not the keyword was found.\n */\nvar keywordInAnchor = function keywordInAnchor(keyword, anchor, locale) {\n    if (keyword === \"\") {\n        return false;\n    }\n    return findKeywordInUrl(anchor, keyword, locale);\n};\n/**\n * Counts the links found in the text.\n *\n * @param {object} paper The paper object containing text, keyword and url.\n * @returns {object} The object containing all linktypes.\n * total: the total number of links found.\n * totalNaKeyword: the total number of links if keyword is not available.\n * keyword: Object containing all the keyword related counts and matches.\n * keyword.totalKeyword: the total number of links with the keyword.\n * keyword.matchedAnchors: Array with the anchors that contain the keyword.\n * internalTotal: the total number of links that are internal.\n * internalDofollow: the internal links without a nofollow attribute.\n * internalNofollow: the internal links with a nofollow attribute.\n * externalTotal: the total number of links that are external.\n * externalDofollow: the external links without a nofollow attribute.\n * externalNofollow: the internal links with a dofollow attribute.\n * otherTotal: all links that are not HTTP or HTTPS.\n * otherDofollow: other links without a nofollow attribute.\n * otherNofollow: other links with a nofollow attribute.\n */\nvar countLinkTypes = function countLinkTypes(paper) {\n    var keyword = escapeRegExp(paper.getKeyword());\n    var locale = paper.getLocale();\n    var anchors = getAnchors(paper.getText());\n    var permalink = paper.getPermalink();\n    var linkCount = {\n        total: anchors.length,\n        totalNaKeyword: 0,\n        keyword: {\n            totalKeyword: 0,\n            matchedAnchors: []\n        },\n        internalTotal: 0,\n        internalDofollow: 0,\n        internalNofollow: 0,\n        externalTotal: 0,\n        externalDofollow: 0,\n        externalNofollow: 0,\n        otherTotal: 0,\n        otherDofollow: 0,\n        otherNofollow: 0\n    };\n    for (var i = 0; i < anchors.length; i++) {\n        var currentAnchor = anchors[i];\n        var anchorLink = urlHelper.getFromAnchorTag(currentAnchor);\n        var linkToSelf = urlHelper.areEqual(anchorLink, permalink);\n        if (keywordInAnchor(keyword, currentAnchor, locale) && !linkToSelf) {\n            linkCount.keyword.totalKeyword++;\n            linkCount.keyword.matchedAnchors.push(currentAnchor);\n        }\n        var linkType = getLinkType(currentAnchor, permalink);\n        var linkFollow = checkNofollow(currentAnchor);\n        linkCount[linkType + \"Total\"]++;\n        linkCount[linkType + linkFollow]++;\n    }\n    return linkCount;\n};\n/**\n * Checks a text for anchors and returns an object with all linktypes found.\n *\n * @param {Paper} paper The paper object containing text, keyword and url.\n * @returns {Object} The object containing all linktypes.\n */\nmodule.exports = function (paper) {\n    return countLinkTypes(paper);\n};\n//# sourceMappingURL=getLinkStatistics.js.map\n//# sourceMappingURL=getLinkStatistics.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getLinkStatistics.js\n// module id = 1372\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getLinkStatistics.js?");

/***/ }),
/* 1373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/findKeywordInUrl */\n\nvar matchTextWithTransliteration = __webpack_require__(1214);\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Matches the keyword in the URL.\n *\n * @param {string} url The url to check for keyword\n * @param {string} keyword The keyword to check if it is in the URL\n * @param {string} locale The locale used for transliteration.\n * @returns {boolean} If a keyword is found, returns true\n */\nmodule.exports = function (url, keyword, locale) {\n    var formatUrl = url.match(/>(.*)/ig);\n    keyword = escapeRegExp(keyword);\n    if (formatUrl !== null) {\n        formatUrl = formatUrl[0].replace(/<.*?>\\s?/ig, \"\");\n        return matchTextWithTransliteration(formatUrl, keyword, locale).length > 0;\n    }\n    return false;\n};\n//# sourceMappingURL=findKeywordInUrl.js.map\n//# sourceMappingURL=findKeywordInUrl.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/findKeywordInUrl.js\n// module id = 1373\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/findKeywordInUrl.js?");

/***/ }),
/* 1374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getLanguage = __webpack_require__(186);\nvar isUndefined = __webpack_require__(66);\nvar transliterations = {\n    // Language: Spanish.\n    // Source: https://en.wikipedia.org/wiki/Spanish_orthography\n    es: [{ letter: /[\\u00F1]/g, alternative: \"n\" }, { letter: /[\\u00D1]/g, alternative: \"N\" }, { letter: /[\\u00E1]/g, alternative: \"a\" }, { letter: /[\\u00C1]/g, alternative: \"A\" }, { letter: /[\\u00E9]/g, alternative: \"e\" }, { letter: /[\\u00C9]/g, alternative: \"E\" }, { letter: /[\\u00ED]/g, alternative: \"i\" }, { letter: /[\\u00CD]/g, alternative: \"I\" }, { letter: /[\\u00F3]/g, alternative: \"o\" }, { letter: /[\\u00D3]/g, alternative: \"O\" }, { letter: /[\\u00FA\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00DA\\u00DC]/g, alternative: \"U\" }],\n    // Language: Polish.\n    // Source: https://en.wikipedia.org/wiki/Polish_orthography\n    pl: [{ letter: /[\\u0105]/g, alternative: \"a\" }, { letter: /[\\u0104]/g, alternative: \"A\" }, { letter: /[\\u0107]/g, alternative: \"c\" }, { letter: /[\\u0106]/g, alternative: \"C\" }, { letter: /[\\u0119]/g, alternative: \"e\" }, { letter: /[\\u0118]/g, alternative: \"E\" }, { letter: /[\\u0142]/g, alternative: \"l\" }, { letter: /[\\u0141]/g, alternative: \"L\" }, { letter: /[\\u0144]/g, alternative: \"n\" }, { letter: /[\\u0143]/g, alternative: \"N\" }, { letter: /[\\u00F3]/g, alternative: \"o\" }, { letter: /[\\u00D3]/g, alternative: \"O\" }, { letter: /[\\u015B]/g, alternative: \"s\" }, { letter: /[\\u015A]/g, alternative: \"S\" }, { letter: /[\\u017A\\u017C]/g, alternative: \"z\" }, { letter: /[\\u0179\\u017B]/g, alternative: \"Z\" }],\n    // Language: German.\n    // Source: https://en.wikipedia.org/wiki/German_orthography#Special_characters\n    de: [{ letter: /[\\u00E4]/g, alternative: \"ae\" }, { letter: /[\\u00C4]/g, alternative: \"Ae\" }, { letter: /[\\u00FC]/g, alternative: \"ue\" }, { letter: /[\\u00DC]/g, alternative: \"Ue\" }, { letter: /[\\u00F6]/g, alternative: \"oe\" }, { letter: /[\\u00D6]/g, alternative: \"Oe\" }, { letter: /[\\u00DF]/g, alternative: \"ss\" }, { letter: /[\\u1E9E]/g, alternative: \"SS\" }],\n    // Language Bokmål\n    // Source: http://www.dagbladet.no/2011/12/30/tema/reise/reiseeksperter/forbrukerrettigheter/19494227/\n    // Language Nynorks\n    // Source: http://www.dagbladet.no/2011/12/30/tema/reise/reiseeksperter/forbrukerrettigheter/19494227/\n    // Bokmål and Nynorks use the same transliterations\n    nbnn: [{ letter: /[\\u00E6\\u04D5]/g, alternative: \"ae\" }, { letter: /[\\u00C6\\u04D4]/g, alternative: \"Ae\" }, { letter: /[\\u00E5]/g, alternative: \"aa\" }, { letter: /[\\u00C5]/g, alternative: \"Aa\" }, { letter: /[\\u00F8]/g, alternative: \"oe\" }, { letter: /[\\u00D8]/g, alternative: \"Oe\" }, { letter: /[\\u00E9\\u00E8\\u00EA]/g, alternative: \"e\" }, { letter: /[\\u00C9\\u00C8\\u00CA]/g, alternative: \"E\" }, { letter: /[\\u00F3\\u00F2\\u00F4]/g, alternative: \"o\" }, { letter: /[\\u00D3\\u00D2\\u00D4]/g, alternative: \"O\" }],\n    // Language: Swedish.\n    // Sources: https://sv.wikipedia.org/wiki/%C3%85#Historia\n    // http://forum.wordreference.com/threads/swedish-%C3%A4-ae-%C3%B6-oe-acceptable.1451839/\n    sv: [{ letter: /[\\u00E5]/g, alternative: \"aa\" }, { letter: /[\\u00C5]/g, alternative: \"Aa\" }, { letter: /[\\u00E4]/g, alternative: \"ae\" }, { letter: /[\\u00C4]/g, alternative: \"Ae\" }, { letter: /[\\u00F6]/g, alternative: \"oe\" }, { letter: /[\\u00D6]/g, alternative: \"Oe\" }, { letter: /[\\u00E9]/g, alternative: \"e\" }, { letter: /[\\u00C9]/g, alternative: \"E\" }, { letter: /[\\u00E0]/g, alternative: \"a\" }, { letter: /[\\u00C0]/g, alternative: \"A\" }],\n    // Language: Finnish.\n    // Sources: https://www.cs.tut.fi/~jkorpela/lang/finnish-letters.html\n    // https://en.wikipedia.org/wiki/Finnish_orthography\n    fi: [{ letter: /[\\u00E5]/g, alternative: \"aa\" }, { letter: /[\\u00C5]/g, alternative: \"Aa\" }, { letter: /[\\u00E4]/g, alternative: \"a\" }, { letter: /[\\u00C4]/g, alternative: \"A\" }, { letter: /[\\u00F6]/g, alternative: \"o\" }, { letter: /[\\u00D6]/g, alternative: \"O\" }, { letter: /[\\u017E]/g, alternative: \"zh\" }, { letter: /[\\u017D]/g, alternative: \"Zh\" }, { letter: /[\\u0161]/g, alternative: \"sh\" }, { letter: /[\\u0160]/g, alternative: \"Sh\" }],\n    // Language: Danish.\n    // Sources: https://sv.wikipedia.org/wiki/%C3%85#Historia\n    // https://en.wikipedia.org/wiki/Danish_orthography\n    da: [{ letter: /[\\u00E5]/g, alternative: \"aa\" }, { letter: /[\\u00C5]/g, alternative: \"Aa\" }, { letter: /[\\u00E6\\u04D5]/g, alternative: \"ae\" }, { letter: /[\\u00C6\\u04D4]/g, alternative: \"Ae\" }, { letter: /[\\u00C4]/g, alternative: \"Ae\" }, { letter: /[\\u00F8]/g, alternative: \"oe\" }, { letter: /[\\u00D8]/g, alternative: \"Oe\" }, { letter: /[\\u00E9]/g, alternative: \"e\" }, { letter: /[\\u00C9]/g, alternative: \"E\" }],\n    // Language: Turkish.\n    // Source: https://en.wikipedia.org/wiki/Turkish_alphabet\n    // ‘İ’ is the capital dotted ‘i’. Its lowercase counterpart is the ‘regular’ ‘i’.\n    tr: [{ letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }, { letter: /[\\u011F]/g, alternative: \"g\" }, { letter: /[\\u011E]/g, alternative: \"G\" }, { letter: /[\\u00F6]/g, alternative: \"o\" }, { letter: /[\\u00D6]/g, alternative: \"O\" }, { letter: /[\\u015F]/g, alternative: \"s\" }, { letter: /[\\u015E]/g, alternative: \"S\" }, { letter: /[\\u00E2]/g, alternative: \"a\" }, { letter: /[\\u00C2]/g, alternative: \"A\" }, { letter: /[\\u0131\\u00EE]/g, alternative: \"i\" }, { letter: /[\\u0130\\u00CE]/g, alternative: \"I\" }, { letter: /[\\u00FC\\u00FB]/g, alternative: \"u\" }, { letter: /[\\u00DC\\u00DB]/g, alternative: \"U\" }],\n    // Language: Latvian.\n    // Source: https://en.wikipedia.org/wiki/Latvian_orthography\n    lv: [{ letter: /[\\u0101]/g, alternative: \"a\" }, { letter: /[\\u0100]/g, alternative: \"A\" }, { letter: /[\\u010D]/g, alternative: \"c\" }, { letter: /[\\u010C]/g, alternative: \"C\" }, { letter: /[\\u0113]/g, alternative: \"e\" }, { letter: /[\\u0112]/g, alternative: \"E\" }, { letter: /[\\u0123]/g, alternative: \"g\" }, { letter: /[\\u0122]/g, alternative: \"G\" }, { letter: /[\\u012B]/g, alternative: \"i\" }, { letter: /[\\u012A]/g, alternative: \"I\" }, { letter: /[\\u0137]/g, alternative: \"k\" }, { letter: /[\\u0136]/g, alternative: \"K\" }, { letter: /[\\u013C]/g, alternative: \"l\" }, { letter: /[\\u013B]/g, alternative: \"L\" }, { letter: /[\\u0146]/g, alternative: \"n\" }, { letter: /[\\u0145]/g, alternative: \"N\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }, { letter: /[\\u016B]/g, alternative: \"u\" }, { letter: /[\\u016A]/g, alternative: \"U\" }, { letter: /[\\u017E]/g, alternative: \"z\" }, { letter: /[\\u017D]/g, alternative: \"Z\" }],\n    // Language: Icelandic.\n    // Sources: https://en.wikipedia.org/wiki/Thorn_(letter),\n    // https://en.wikipedia.org/wiki/Eth,  https://en.wikipedia.org/wiki/Icelandic_orthography\n    is: [{ letter: /[\\u00E1]/g, alternative: \"a\" }, { letter: /[\\u00C1]/g, alternative: \"A\" }, { letter: /[\\u00F0]/g, alternative: \"d\" }, { letter: /[\\u00D0]/g, alternative: \"D\" }, { letter: /[\\u00E9]/g, alternative: \"e\" }, { letter: /[\\u00C9]/g, alternative: \"E\" }, { letter: /[\\u00ED]/g, alternative: \"i\" }, { letter: /[\\u00CD]/g, alternative: \"I\" }, { letter: /[\\u00F3\\u00F6]/g, alternative: \"o\" }, { letter: /[\\u00D3\\u00D6]/g, alternative: \"O\" }, { letter: /[\\u00FA]/g, alternative: \"u\" }, { letter: /[\\u00DA]/g, alternative: \"U\" }, { letter: /[\\u00FD]/g, alternative: \"y\" }, { letter: /[\\u00DD]/g, alternative: \"Y\" }, { letter: /[\\u00FE]/g, alternative: \"th\" }, { letter: /[\\u00DE]/g, alternative: \"Th\" }, { letter: /[\\u00E6\\u04D5]/g, alternative: \"ae\" }, { letter: /[\\u00C6\\u04D4]/g, alternative: \"Ae\" }],\n    // Language: Faroese.\n    // Source: https://www.facebook.com/groups/1557965757758234/permalink/1749847165236758/ (conversation in private Facebook Group ‘Faroese Language Learning Enthusiasts’)\n    // depending on the word, ð can be d, g, j, v, ng or nothing. However, ‘d’ is most frequent.\n    // when writing text messages or using a foreign keyboard, í is sometimes written as ij, ý as yj, ú as uv, ó as ov, ø as oe, and á as aa or oa.\n    // However, in website URLs the alternatives mentioned below are by far the most common.\n    fa: [{ letter: /[\\u00E1]/g, alternative: \"a\" }, { letter: /[\\u00C1]/g, alternative: \"A\" }, { letter: /[\\u00F0]/g, alternative: \"d\" }, { letter: /[\\u00D0]/g, alternative: \"D\" }, { letter: /[\\u00ED]/g, alternative: \"i\" }, { letter: /[\\u00CD]/g, alternative: \"I\" }, { letter: /[\\u00FD]/g, alternative: \"y\" }, { letter: /[\\u00DD]/g, alternative: \"Y\" }, { letter: /[\\u00FA]/g, alternative: \"u\" }, { letter: /[\\u00DA]/g, alternative: \"U\" }, { letter: /[\\u00F3\\u00F8]/g, alternative: \"o\" }, { letter: /[\\u00D3\\u00D8]/g, alternative: \"O\" }, { letter: /[\\u00E6\\u04D5]/g, alternative: \"ae\" }, { letter: /[\\u00C6\\u04D4]/g, alternative: \"Ae\" }],\n    // Language: Czech.\n    // Source: https://en.wikipedia.org/wiki/Czech_orthography\n    cs: [{ letter: /[\\u00E1]/g, alternative: \"a\" }, { letter: /[\\u00C1]/g, alternative: \"A\" }, { letter: /[\\u010D]/g, alternative: \"c\" }, { letter: /[\\u010C]/g, alternative: \"C\" }, { letter: /[\\u010F]/g, alternative: \"d\" }, { letter: /[\\u010E]/g, alternative: \"D\" }, { letter: /[\\u00ED]/g, alternative: \"i\" }, { letter: /[\\u00CD]/g, alternative: \"I\" }, { letter: /[\\u0148]/g, alternative: \"n\" }, { letter: /[\\u0147]/g, alternative: \"N\" }, { letter: /[\\u00F3]/g, alternative: \"o\" }, { letter: /[\\u00D3]/g, alternative: \"O\" }, { letter: /[\\u0159]/g, alternative: \"r\" }, { letter: /[\\u0158]/g, alternative: \"R\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }, { letter: /[\\u0165]/g, alternative: \"t\" }, { letter: /[\\u0164]/g, alternative: \"T\" }, { letter: /[\\u00FD]/g, alternative: \"y\" }, { letter: /[\\u00DD]/g, alternative: \"Y\" }, { letter: /[\\u017E]/g, alternative: \"z\" }, { letter: /[\\u017D]/g, alternative: \"Z\" }, { letter: /[\\u00E9\\u011B]/g, alternative: \"e\" }, { letter: /[\\u00C9\\u011A]/g, alternative: \"E\" }, { letter: /[\\u00FA\\u016F]/g, alternative: \"u\" }, { letter: /[\\u00DA\\u016E]/g, alternative: \"U\" }],\n    // Language: Russian.\n    // Source:  Machine Readable Travel Documents, Doc 9303, Part 1, Volume 1 (PDF) (Sixth ed.).\n    // ICAO. 2006. p. IV-50—IV-52. http://www.icao.int/publications/Documents/9303_p3_cons_en.pdf\n    // ‘ь’ is the so-called soft sign, indicating a sound change (palatalization) of the preceding consonant.\n    // In text it is transliterated to a character similar to an apostroph: ′.\n    // I recommend omittance in slugs. (https://en.wikipedia.org/wiki/Romanization_of_Russian)\n    ru: [{ letter: /[\\u0430]/g, alternative: \"a\" }, { letter: /[\\u0410]/g, alternative: \"A\" }, { letter: /[\\u0431]/g, alternative: \"b\" }, { letter: /[\\u0411]/g, alternative: \"B\" }, { letter: /[\\u0432]/g, alternative: \"v\" }, { letter: /[\\u0412]/g, alternative: \"V\" }, { letter: /[\\u0433]/g, alternative: \"g\" }, { letter: /[\\u0413]/g, alternative: \"G\" }, { letter: /[\\u0434]/g, alternative: \"d\" }, { letter: /[\\u0414]/g, alternative: \"D\" }, { letter: /[\\u0435]/g, alternative: \"e\" }, { letter: /[\\u0415]/g, alternative: \"E\" }, { letter: /[\\u0436]/g, alternative: \"zh\" }, { letter: /[\\u0416]/g, alternative: \"Zh\" }, { letter: /[\\u0437]/g, alternative: \"z\" }, { letter: /[\\u0417]/g, alternative: \"Z\" }, { letter: /[\\u0456\\u0438\\u0439]/g, alternative: \"i\" }, { letter: /[\\u0406\\u0418\\u0419]/g, alternative: \"I\" }, { letter: /[\\u043A]/g, alternative: \"k\" }, { letter: /[\\u041A]/g, alternative: \"K\" }, { letter: /[\\u043B]/g, alternative: \"l\" }, { letter: /[\\u041B]/g, alternative: \"L\" }, { letter: /[\\u043C]/g, alternative: \"m\" }, { letter: /[\\u041C]/g, alternative: \"M\" }, { letter: /[\\u043D]/g, alternative: \"n\" }, { letter: /[\\u041D]/g, alternative: \"N\" }, { letter: /[\\u0440]/g, alternative: \"r\" }, { letter: /[\\u0420]/g, alternative: \"R\" }, { letter: /[\\u043E]/g, alternative: \"o\" }, { letter: /[\\u041E]/g, alternative: \"O\" }, { letter: /[\\u043F]/g, alternative: \"p\" }, { letter: /[\\u041F]/g, alternative: \"P\" }, { letter: /[\\u0441]/g, alternative: \"s\" }, { letter: /[\\u0421]/g, alternative: \"S\" }, { letter: /[\\u0442]/g, alternative: \"t\" }, { letter: /[\\u0422]/g, alternative: \"T\" }, { letter: /[\\u0443]/g, alternative: \"u\" }, { letter: /[\\u0423]/g, alternative: \"U\" }, { letter: /[\\u0444]/g, alternative: \"f\" }, { letter: /[\\u0424]/g, alternative: \"F\" }, { letter: /[\\u0445]/g, alternative: \"kh\" }, { letter: /[\\u0425]/g, alternative: \"Kh\" }, { letter: /[\\u0446]/g, alternative: \"ts\" }, { letter: /[\\u0426]/g, alternative: \"Ts\" }, { letter: /[\\u0447]/g, alternative: \"ch\" }, { letter: /[\\u0427]/g, alternative: \"Ch\" }, { letter: /[\\u0448]/g, alternative: \"sh\" }, { letter: /[\\u0428]/g, alternative: \"Sh\" }, { letter: /[\\u0449]/g, alternative: \"shch\" }, { letter: /[\\u0429]/g, alternative: \"Shch\" }, { letter: /[\\u044A]/g, alternative: \"ie\" }, { letter: /[\\u042A]/g, alternative: \"Ie\" }, { letter: /[\\u044B]/g, alternative: \"y\" }, { letter: /[\\u042B]/g, alternative: \"Y\" }, { letter: /[\\u044C]/g, alternative: \"\" }, { letter: /[\\u042C]/g, alternative: \"\" }, { letter: /[\\u0451\\u044D]/g, alternative: \"e\" }, { letter: /[\\u0401\\u042D]/g, alternative: \"E\" }, { letter: /[\\u044E]/g, alternative: \"iu\" }, { letter: /[\\u042E]/g, alternative: \"Iu\" }, { letter: /[\\u044F]/g, alternative: \"ia\" }, { letter: /[\\u042F]/g, alternative: \"Ia\" }],\n    // Language: Esperanto.\n    // Source: https://en.wikipedia.org/wiki/Esperanto#Writing_diacritics\n    eo: [{ letter: /[\\u0109]/g, alternative: \"ch\" }, { letter: /[\\u0108]/g, alternative: \"Ch\" }, { letter: /[\\u011d]/g, alternative: \"gh\" }, { letter: /[\\u011c]/g, alternative: \"Gh\" }, { letter: /[\\u0125]/g, alternative: \"hx\" }, { letter: /[\\u0124]/g, alternative: \"Hx\" }, { letter: /[\\u0135]/g, alternative: \"jx\" }, { letter: /[\\u0134]/g, alternative: \"Jx\" }, { letter: /[\\u015d]/g, alternative: \"sx\" }, { letter: /[\\u015c]/g, alternative: \"Sx\" }, { letter: /[\\u016d]/g, alternative: \"ux\" }, { letter: /[\\u016c]/g, alternative: \"Ux\" }],\n    // Language: Afrikaans.\n    // Source: https://en.wikipedia.org/wiki/Afrikaans#Orthography\n    af: [{ letter: /[\\u00E8\\u00EA\\u00EB]/g, alternative: \"e\" }, { letter: /[\\u00CB\\u00C8\\u00CA]/g, alternative: \"E\" }, { letter: /[\\u00EE\\u00EF]/g, alternative: \"i\" }, { letter: /[\\u00CE\\u00CF]/g, alternative: \"I\" }, { letter: /[\\u00F4\\u00F6]/g, alternative: \"o\" }, { letter: /[\\u00D4\\u00D6]/g, alternative: \"O\" }, { letter: /[\\u00FB\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00DB\\u00DC]/g, alternative: \"U\" }],\n    // Language: Catalan.\n    // Source: https://en.wikipedia.org/wiki/Catalan_orthography\n    ca: [{ letter: /[\\u00E0]/g, alternative: \"a\" }, { letter: /[\\u00C0]/g, alternative: \"A\" }, { letter: /[\\u00E9|\\u00E8]/g, alternative: \"e\" }, { letter: /[\\u00C9|\\u00C8]/g, alternative: \"E\" }, { letter: /[\\u00ED|\\u00EF]/g, alternative: \"i\" }, { letter: /[\\u00CD|\\u00CF]/g, alternative: \"I\" }, { letter: /[\\u00F3|\\u00F2]/g, alternative: \"o\" }, { letter: /[\\u00D3|\\u00D2]/g, alternative: \"O\" }, { letter: /[\\u00FA|\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00DA|\\u00DC]/g, alternative: \"U\" }, { letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }],\n    // Language: Asturian.\n    // Source: http://www.orbilat.com/Languages/Asturian/Grammar/Asturian-Alphabet.html\n    ast: [{ letter: /[\\u00F1]/g, alternative: \"n\" }, { letter: /[\\u00D1]/g, alternative: \"N\" }],\n    // Language: Aragonese.\n    // Source: https://en.wikipedia.org/wiki/Aragonese_language#Orthography\n    an: [{ letter: /[\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00F1]/g, alternative: \"ny\" }, { letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00ED]/g, alternative: \"i\" }, { letter: /[\\u00F3]/g, alternative: \"o\" }, { letter: /[\\u00E1]/g, alternative: \"a\" }, { letter: /[\\u00DC]/g, alternative: \"U\" }, { letter: /[\\u00D1]/g, alternative: \"Ny\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }, { letter: /[\\u00CD]/g, alternative: \"I\" }, { letter: /[\\u00D3]/g, alternative: \"O\" }, { letter: /[\\u00C1]/g, alternative: \"A\" }],\n    // Language: Aymara.\n    // Source: http://www.omniglot.com/writing/aymara.htm\n    ay: [{ letter: /(([\\u00EF])|([\\u00ED]))/g, alternative: \"i\" }, { letter: /(([\\u00CF])|([\\u00CD]))/g, alternative: \"I\" }, { letter: /[\\u00E4]/g, alternative: \"a\" }, { letter: /[\\u00C4]/g, alternative: \"A\" }, { letter: /[\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00DC]/g, alternative: \"U\" }, { letter: /[\\u0027]/g, alternative: \"\" }, { letter: /[\\u00F1]/g, alternative: \"n\" }, { letter: /[\\u00D1]/g, alternative: \"N\" }],\n    // Language: English.\n    // Sources: https://en.wikipedia.org/wiki/English_terms_with_diacritical_marks https://en.wikipedia.org/wiki/English_orthography\n    en: [{ letter: /[\\u00E6\\u04D5]/g, alternative: \"ae\" }, { letter: /[\\u00C6\\u04D4]/g, alternative: \"Ae\" }, { letter: /[\\u0153]/g, alternative: \"oe\" }, { letter: /[\\u0152]/g, alternative: \"Oe\" }, { letter: /[\\u00EB\\u00E9]/g, alternative: \"e\" }, { letter: /[\\u00C9\\u00CB]/g, alternative: \"E\" }, { letter: /[\\u00F4\\u00F6]/g, alternative: \"o\" }, { letter: /[\\u00D4\\u00D6]/g, alternative: \"O\" }, { letter: /[\\u00EF]/g, alternative: \"i\" }, { letter: /[\\u00CF]/g, alternative: \"I\" }, { letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }, { letter: /[\\u00F1]/g, alternative: \"n\" }, { letter: /[\\u00D1]/g, alternative: \"N\" }, { letter: /[\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00DC]/g, alternative: \"U\" }, { letter: /[\\u00E4]/g, alternative: \"a\" }, { letter: /[\\u00C4]/g, alternative: \"A\" }],\n    // Language: French.\n    // Sources: https://en.wikipedia.org/wiki/French_orthography#Ligatures https://en.wikipedia.org/wiki/French_orthography#Diacritics\n    fr: [{ letter: /[\\u00E6\\u04D5]/g, alternative: \"ae\" }, { letter: /[\\u00C6\\u04D4]/g, alternative: \"Ae\" }, { letter: /[\\u0153]/g, alternative: \"oe\" }, { letter: /[\\u0152]/g, alternative: \"Oe\" }, { letter: /[\\u00E9\\u00E8\\u00EB\\u00EA]/g, alternative: \"e\" }, { letter: /[\\u00C9\\u00C8\\u00CB\\u00CA]/g, alternative: \"E\" }, { letter: /[\\u00E0\\u00E2]/g, alternative: \"a\" }, { letter: /[\\u00C0\\u00C2]/g, alternative: \"A\" }, { letter: /[\\u00EF\\u00EE]/g, alternative: \"i\" }, { letter: /[\\u00CF\\u00CE]/g, alternative: \"I\" }, { letter: /[\\u00F9\\u00FB\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00D9\\u00DB\\u00DC]/g, alternative: \"U\" }, { letter: /[\\u00F4]/g, alternative: \"o\" }, { letter: /[\\u00D4]/g, alternative: \"O\" }, { letter: /[\\u00FF]/g, alternative: \"y\" }, { letter: /[\\u0178]/g, alternative: \"Y\" }, { letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }, { letter: /[\\u00F1]/g, alternative: \"n\" }, { letter: /[\\u00D1]/g, alternative: \"N\" }],\n    // Language: Italian.\n    // Source: https://en.wikipedia.org/wiki/Italian_orthography\n    it: [{ letter: /[\\u00E0]/g, alternative: \"a\" }, { letter: /[\\u00C0]/g, alternative: \"A\" }, { letter: /[\\u00E9\\u00E8]/g, alternative: \"e\" }, { letter: /[\\u00C9\\u00C8]/g, alternative: \"E\" }, { letter: /[\\u00EC\\u00ED\\u00EE]/g, alternative: \"i\" }, { letter: /[\\u00CC\\u00CD\\u00CE]/g, alternative: \"I\" }, { letter: /[\\u00F3\\u00F2]/g, alternative: \"o\" }, { letter: /[\\u00D3\\u00D2]/g, alternative: \"O\" }, { letter: /[\\u00F9\\u00FA]/g, alternative: \"u\" }, { letter: /[\\u00D9\\u00DA]/g, alternative: \"U\" }],\n    // Language: Dutch.\n    // Sources: https://en.wikipedia.org/wiki/Dutch_orthography https://nl.wikipedia.org/wiki/Trema_in_de_Nederlandse_spelling\n    nl: [{ letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }, { letter: /[\\u00F1]/g, alternative: \"n\" }, { letter: /[\\u00D1]/g, alternative: \"N\" }, { letter: /[\\u00E9\\u00E8\\u00EA\\u00EB]/g, alternative: \"e\" }, { letter: /[\\u00C9\\u00C8\\u00CA\\u00CB]/g, alternative: \"E\" }, { letter: /[\\u00F4\\u00F6]/g, alternative: \"o\" }, { letter: /[\\u00D4\\u00D6]/g, alternative: \"O\" }, { letter: /[\\u00EF]/g, alternative: \"i\" }, { letter: /[\\u00CF]/g, alternative: \"I\" }, { letter: /[\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00DC]/g, alternative: \"U\" }, { letter: /[\\u00E4]/g, alternative: \"a\" }, { letter: /[\\u00C4]/g, alternative: \"A\" }],\n    // Language: Bambara.\n    // Sources: http://www.omniglot.com/writing/bambara.htm https://en.wikipedia.org/wiki/Bambara_language\n    bm: [{ letter: /[\\u025B]/g, alternative: \"e\" }, { letter: /[\\u0190]/g, alternative: \"E\" }, { letter: /[\\u0272]/g, alternative: \"ny\" }, { letter: /[\\u019D]/g, alternative: \"Ny\" }, { letter: /[\\u014B]/g, alternative: \"ng\" }, { letter: /[\\u014A]/g, alternative: \"Ng\" }, { letter: /[\\u0254]/g, alternative: \"o\" }, { letter: /[\\u0186]/g, alternative: \"O\" }],\n    // Language: Ukrainian.\n    // Source: Resolution no. 55 of the Cabinet of Ministers of Ukraine, January 27, 2010 http://zakon2.rada.gov.ua/laws/show/55-2010-%D0%BF\n    // ‘ь’ is the so-called soft sign, indicating a sound change (palatalization) of the preceding consonant. In text it is sometimes transliterated\n    // to a character similar to an apostroph: ′. Omittance is recommended in slugs (https://en.wikipedia.org/wiki/Romanization_of_Ukrainian).\n    uk: [{ letter: /[\\u0431]/g, alternative: \"b\" }, { letter: /[\\u0411]/g, alternative: \"B\" }, { letter: /[\\u0432]/g, alternative: \"v\" }, { letter: /[\\u0412]/g, alternative: \"V\" }, { letter: /[\\u0433]/g, alternative: \"h\" }, { letter: /[\\u0413]/g, alternative: \"H\" }, { letter: /[\\u0491]/g, alternative: \"g\" }, { letter: /[\\u0490]/g, alternative: \"G\" }, { letter: /[\\u0434]/g, alternative: \"d\" }, { letter: /[\\u0414]/g, alternative: \"D\" }, { letter: /[\\u043A]/g, alternative: \"k\" }, { letter: /[\\u041A]/g, alternative: \"K\" }, { letter: /[\\u043B]/g, alternative: \"l\" }, { letter: /[\\u041B]/g, alternative: \"L\" }, { letter: /[\\u043C]/g, alternative: \"m\" }, { letter: /[\\u041C]/g, alternative: \"M\" }, { letter: /[\\u0070]/g, alternative: \"r\" }, { letter: /[\\u0050]/g, alternative: \"R\" }, { letter: /[\\u043F]/g, alternative: \"p\" }, { letter: /[\\u041F]/g, alternative: \"P\" }, { letter: /[\\u0441]/g, alternative: \"s\" }, { letter: /[\\u0421]/g, alternative: \"S\" }, { letter: /[\\u0442]/g, alternative: \"t\" }, { letter: /[\\u0422]/g, alternative: \"T\" }, { letter: /[\\u0443]/g, alternative: \"u\" }, { letter: /[\\u0423]/g, alternative: \"U\" }, { letter: /[\\u0444]/g, alternative: \"f\" }, { letter: /[\\u0424]/g, alternative: \"F\" }, { letter: /[\\u0445]/g, alternative: \"kh\" }, { letter: /[\\u0425]/g, alternative: \"Kh\" }, { letter: /[\\u0446]/g, alternative: \"ts\" }, { letter: /[\\u0426]/g, alternative: \"Ts\" }, { letter: /[\\u0447]/g, alternative: \"ch\" }, { letter: /[\\u0427]/g, alternative: \"Ch\" }, { letter: /[\\u0448]/g, alternative: \"sh\" }, { letter: /[\\u0428]/g, alternative: \"Sh\" }, { letter: /[\\u0449]/g, alternative: \"shch\" }, { letter: /[\\u0429]/g, alternative: \"Shch\" }, { letter: /[\\u044C\\u042C]/g, alternative: \"\" }, { letter: /[\\u0436]/g, alternative: \"zh\" }, { letter: /[\\u0416]/g, alternative: \"Zh\" }, { letter: /[\\u0437]/g, alternative: \"z\" }, { letter: /[\\u0417]/g, alternative: \"Z\" }, { letter: /[\\u0438]/g, alternative: \"y\" }, { letter: /[\\u0418]/g, alternative: \"Y\" }, { letter: /^[\\u0454]/g, alternative: \"ye\" }, { letter: /[\\s][\\u0454]/g, alternative: \" ye\" }, { letter: /[\\u0454]/g, alternative: \"ie\" }, { letter: /^[\\u0404]/g, alternative: \"Ye\" }, { letter: /[\\s][\\u0404]/g, alternative: \" Ye\" }, { letter: /[\\u0404]/g, alternative: \"IE\" }, { letter: /^[\\u0457]/g, alternative: \"yi\" }, { letter: /[\\s][\\u0457]/g, alternative: \" yi\" }, { letter: /[\\u0457]/g, alternative: \"i\" }, { letter: /^[\\u0407]/g, alternative: \"Yi\" }, { letter: /[\\s][\\u0407]/g, alternative: \" Yi\" }, { letter: /[\\u0407]/g, alternative: \"I\" }, { letter: /^[\\u0439]/g, alternative: \"y\" }, { letter: /[\\s][\\u0439]/g, alternative: \" y\" }, { letter: /[\\u0439]/g, alternative: \"i\" }, { letter: /^[\\u0419]/g, alternative: \"Y\" }, { letter: /[\\s][\\u0419]/g, alternative: \" Y\" }, { letter: /[\\u0419]/g, alternative: \"I\" }, { letter: /^[\\u044E]/g, alternative: \"yu\" }, { letter: /[\\s][\\u044E]/g, alternative: \" yu\" }, { letter: /[\\u044E]/g, alternative: \"iu\" }, { letter: /^[\\u042E]/g, alternative: \"Yu\" }, { letter: /[\\s][\\u042E]/g, alternative: \" Yu\" }, { letter: /[\\u042E]/g, alternative: \"IU\" }, { letter: /^[\\u044F]/g, alternative: \"ya\" }, { letter: /[\\s][\\u044F]/g, alternative: \" ya\" }, { letter: /[\\u044F]/g, alternative: \"ia\" }, { letter: /^[\\u042F]/g, alternative: \"Ya\" }, { letter: /[\\s][\\u042F]/g, alternative: \" Ya\" }, { letter: /[\\u042F]/g, alternative: \"IA\" }],\n    // Language: Breton\n    // Source: http://www.omniglot.com/writing/breton.htm\n    br: [{ letter: /\\u0063\\u0027\\u0068/g, alternative: \"ch\" }, { letter: /\\u0043\\u0027\\u0048/g, alternative: \"CH\" }, { letter: /[\\u00e2]/g, alternative: \"a\" }, { letter: /[\\u00c2]/g, alternative: \"A\" }, { letter: /[\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00ee]/g, alternative: \"i\" }, { letter: /[\\u00ce]/g, alternative: \"I\" }, { letter: /[\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u00fb\\u00f9\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00db\\u00d9\\u00dc]/g, alternative: \"U\" }, { letter: /[\\u00f1]/g, alternative: \"n\" }, { letter: /[\\u00d1]/g, alternative: \"N\" }],\n    // Language: Chamorro\n    // Source: http://www.omniglot.com/writing/chamorro.htm\n    ch: [{ letter: /[\\u0027]/g, alternative: \"\" }, { letter: /[\\u00e5]/g, alternative: \"a\" }, { letter: /[\\u00c5]/g, alternative: \"A\" }, { letter: /[\\u00f1]/g, alternative: \"n\" }, { letter: /[\\u00d1]/g, alternative: \"N\" }],\n    // Language: Corsican\n    // Sources: http://www.omniglot.com/writing/corsican.htm https://en.wikipedia.org/wiki/Corsican_alphabet\n    co: [{ letter: /[\\u00e2\\u00e0]/g, alternative: \"a\" }, { letter: /[\\u00c2\\u00c0]/g, alternative: \"A\" }, { letter: /[\\u00e6\\u04d5]/g, alternative: \"ae\" }, { letter: /[\\u00c6\\u04d4]/g, alternative: \"Ae\" }, { letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00e9\\u00ea\\u00e8\\u00eb]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00ca\\u00c8\\u00cb]/g, alternative: \"E\" }, { letter: /[\\u00ec\\u00ee\\u00ef]/g, alternative: \"i\" }, { letter: /[\\u00cc\\u00ce\\u00cf]/g, alternative: \"I\" }, { letter: /[\\u00f1]/g, alternative: \"n\" }, { letter: /[\\u00d1]/g, alternative: \"N\" }, { letter: /[\\u00f4\\u00f2]/g, alternative: \"o\" }, { letter: /[\\u00d4\\u00d2]/g, alternative: \"O\" }, { letter: /[\\u0153]/g, alternative: \"oe\" }, { letter: /[\\u0152]]/g, alternative: \"Oe\" }, { letter: /[\\u00f9\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00d9\\u00dc]/g, alternative: \"U\" }, { letter: /[\\u00ff]/g, alternative: \"y\" }, { letter: /[\\u0178]/g, alternative: \"Y\" }],\n    // Language: Kashubian\n    // Sources: http://www.omniglot.com/writing/kashubian.htm https://en.wikipedia.org/wiki/Kashubian_language\n    csb: [{ letter: /[\\u0105\\u00e3]/g, alternative: \"a\" }, { letter: /[\\u0104\\u00c3]/g, alternative: \"A\" }, { letter: /[\\u00e9\\u00eb]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00cb]/g, alternative: \"E\" }, { letter: /[\\u0142]/g, alternative: \"l\" }, { letter: /[\\u0141]/g, alternative: \"L\" }, { letter: /[\\u0144]/g, alternative: \"n\" }, { letter: /[\\u0143]/g, alternative: \"N\" }, { letter: /[\\u00f2\\u00f3\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d2\\u00d3\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u00f9]/g, alternative: \"u\" }, { letter: /[\\u00d9]/g, alternative: \"U\" }, { letter: /[\\u017c]/g, alternative: \"z\" }, { letter: /[\\u017b]/g, alternative: \"Z\" }],\n    // Language: Welsh\n    // Sources: http://www.omniglot.com/writing/welsh.htm https://en.wikipedia.org/wiki/Welsh_orthography#Diacritics\n    cy: [{ letter: /[\\u00e2]/g, alternative: \"a\" }, { letter: /[\\u00c2]/g, alternative: \"A\" }, { letter: /[\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00ee]/g, alternative: \"i\" }, { letter: /[\\u00ce]/g, alternative: \"I\" }, { letter: /[\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u00fb]/g, alternative: \"u\" }, { letter: /[\\u00db]/g, alternative: \"U\" }, { letter: /[\\u0175]/g, alternative: \"w\" }, { letter: /[\\u0174]/g, alternative: \"W\" }, { letter: /[\\u0177]/g, alternative: \"y\" }, { letter: /[\\u0176]/g, alternative: \"Y\" }],\n    // Language: Ewe\n    // Sources: http://www.omniglot.com/writing/ewe.htm https://en.wikipedia.org/wiki/Ewe_language#Writing_system\n    ee: [{ letter: /[\\u0256]/g, alternative: \"d\" }, { letter: /[\\u0189]/g, alternative: \"D\" }, { letter: /[\\u025b]/g, alternative: \"e\" }, { letter: /[\\u0190]/g, alternative: \"E\" }, { letter: /[\\u0192]/g, alternative: \"f\" }, { letter: /[\\u0191]/g, alternative: \"F\" }, { letter: /[\\u0263]/g, alternative: \"g\" }, { letter: /[\\u0194]/g, alternative: \"G\" }, { letter: /[\\u014b]/g, alternative: \"ng\" }, { letter: /[\\u014a]/g, alternative: \"Ng\" }, { letter: /[\\u0254]/g, alternative: \"o\" }, { letter: /[\\u0186]/g, alternative: \"O\" }, { letter: /[\\u028b]/g, alternative: \"w\" }, { letter: /[\\u01b2]/g, alternative: \"W\" }, { letter: /\\u0061\\u0303/g, alternative: \"a\" }, { letter: /[\\u00e1\\u00e0\\u01ce\\u00e2\\u00e3]/g, alternative: \"a\" }, { letter: /\\u0041\\u0303/g, alternative: \"A\" }, { letter: /[\\u00c1\\u00c0\\u01cd\\u00c2\\u00c3]/g, alternative: \"A\" }, { letter: /[\\u00e9\\u00e8\\u011b\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00c8\\u011a\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00f3\\u00f2\\u01d2\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d3\\u00d2\\u01d1\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u00f9\\u01d4\\u00fb]/g, alternative: \"u\" }, { letter: /[\\u00da\\u00d9\\u01d3\\u00db]/g, alternative: \"U\" }, { letter: /[\\u00ed\\u00ec\\u01d0\\u00ee]/g, alternative: \"i\" }, { letter: /[\\u00cd\\u00cc\\u01cf\\u00ce]/g, alternative: \"I\" }],\n    // Language: Estonian\n    // Sources: http://www.omniglot.com/writing/estonian.htm https://en.wikipedia.org/wiki/Estonian_orthography https://en.wikipedia.org/wiki/%C5%BD https://en.wikipedia.org/wiki/%C5%A0\n    et: [{ letter: /[\\u0161]/g, alternative: \"sh\" }, { letter: /[\\u0160]/g, alternative: \"Sh\" }, { letter: /[\\u017e]/g, alternative: \"zh\" }, { letter: /[\\u017d]/g, alternative: \"Zh\" }, { letter: /[\\u00f5\\u00f6]/g, alternative: \"o\" }, { letter: /[\\u00d6\\u00d5]/g, alternative: \"O\" }, { letter: /[\\u00e4]/g, alternative: \"a\" }, { letter: /[\\u00c4]/g, alternative: \"A\" }, { letter: /[\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00dc]/g, alternative: \"U\" }],\n    // Language: Basque\n    // Sources: http://www.omniglot.com/writing/basque.htm https://en.wikipedia.org/wiki/Basque_language#Writing_system https://en\t.wikipedia.org/wiki/Basque_alphabet\n    eu: [{ letter: /[\\u00f1]/g, alternative: \"n\" }, { letter: /[\\u00d1]/g, alternative: \"N\" }, { letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00dc]/g, alternative: \"U\" }],\n    // Language: Fulah\n    // Sources: http://www.omniglot.com/writing/fula.htm https://en.wikipedia.org/wiki/Fula_language#Writing_systems\n    fuc: [{ letter: /[\\u0253]/g, alternative: \"b\" }, { letter: /[\\u0181]/g, alternative: \"B\" }, { letter: /[\\u0257]/g, alternative: \"d\" }, { letter: /[\\u018a]/g, alternative: \"D\" }, { letter: /[\\u014b]/g, alternative: \"ng\" }, { letter: /[\\u014a]/g, alternative: \"Ng\" }, { letter: /[\\u0272\\u00f1]/g, alternative: \"ny\" }, { letter: /[\\u019d\\u00d1]/g, alternative: \"Ny\" }, { letter: /[\\u01b4]/g, alternative: \"y\" }, { letter: /[\\u01b3]/g, alternative: \"Y\" }, { letter: /[\\u0260]/g, alternative: \"g\" }, { letter: /[\\u0193]/g, alternative: \"G\" }],\n    // Language: Fijian\n    // Source: http://www.omniglot.com/writing/fijian.htm\n    fj: [{ letter: /[\\u0101]/g, alternative: \"a\" }, { letter: /[\\u0100]/g, alternative: \"A\" }, { letter: /[\\u0113]/g, alternative: \"e\" }, { letter: /[\\u0112]/g, alternative: \"E\" }, { letter: /[\\u012b]/g, alternative: \"i\" }, { letter: /[\\u012a]/g, alternative: \"I\" }, { letter: /[\\u016b]/g, alternative: \"u\" }, { letter: /[\\u016a]/g, alternative: \"U\" }, { letter: /[\\u014d]/g, alternative: \"o\" }, { letter: /[\\u014c]/g, alternative: \"O\" }],\n    // Language: Arpitan (Franco-Provençal language)\n    // Source: http://www.omniglot.com/writing/francoprovencal.htm\n    frp: [{ letter: /[\\u00e2]/g, alternative: \"a\" }, { letter: /[\\u00c2]/g, alternative: \"A\" }, { letter: /[\\u00ea\\u00e8\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00ca\\u00c8\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u00ee]/g, alternative: \"i\" }, { letter: /[\\u00ce]/g, alternative: \"I\" }, { letter: /[\\u00fb\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00db\\u00dc]/g, alternative: \"U\" }, { letter: /[\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d4]/g, alternative: \"O\" }],\n    // Language: Friulian\n    // Sources: https://en.wikipedia.org/wiki/Friulian_language https://en.wikipedia.org/wiki/Faggin-Nazzi_alphabet\n    // http://www.omniglot.com/writing/friulian.htm\n    fur: [{ letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }, { letter: /[\\u00e0\\u00e2]/g, alternative: \"a\" }, { letter: /[\\u00c0\\u00c2]/g, alternative: \"A\" }, { letter: /[\\u00e8\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00c8\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00ec\\u00ee]/g, alternative: \"i\" }, { letter: /[\\u00cc\\u00ce]/g, alternative: \"I\" }, { letter: /[\\u00f2\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d2\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u00f9\\u00fb]/g, alternative: \"u\" }, { letter: /[\\u00d9\\u00db]/g, alternative: \"U\" }, { letter: /[\\u010d]/g, alternative: \"c\" }, { letter: /[\\u010c]/g, alternative: \"C\" }, { letter: /[\\u011f]/g, alternative: \"g\" }, { letter: /[\\u011e]/g, alternative: \"G\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }],\n    // Language: Frisian\n    // Sources: https://en.wikipedia.org/wiki/West_Frisian_alphabet http://www.omniglot.com/writing/frisian.htm\n    fy: [{ letter: /[\\u00e2\\u0101\\u00e4\\u00e5]/g, alternative: \"a\" }, { letter: /[\\u00c2\\u0100\\u00c4\\u00c5]/g, alternative: \"A\" }, { letter: /[\\u00ea\\u00e9\\u0113]/g, alternative: \"e\" }, { letter: /[\\u00ca\\u00c9\\u0112]/g, alternative: \"E\" }, { letter: /[\\u00f4\\u00f6]/g, alternative: \"o\" }, { letter: /[\\u00d4\\u00d6]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u00fb\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00da\\u00db\\u00dc]/g, alternative: \"U\" }, { letter: /[\\u00ed]/g, alternative: \"i\" }, { letter: /[\\u00cd]/g, alternative: \"I\" }, { letter: /[\\u0111\\u00f0]/g, alternative: \"d\" }, { letter: /[\\u0110\\u00d0]/g, alternative: \"D\" }],\n    // Language: Irish\n    // Source: https://en.wikipedia.org/wiki/Irish_orthography\n    ga: [{ letter: /[\\u00e1]/g, alternative: \"a\" }, { letter: /[\\u00c1]/g, alternative: \"A\" }, { letter: /[\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u00f3]/g, alternative: \"o\" }, { letter: /[\\u00d3]/g, alternative: \"O\" }, { letter: /[\\u00fa]/g, alternative: \"u\" }, { letter: /[\\u00da]/g, alternative: \"U\" }, { letter: /[\\u00ed]/g, alternative: \"i\" }, { letter: /[\\u00cd]/g, alternative: \"I\" }],\n    // Language: Scottish Gaelic\n    // Sources: https://en.wikipedia.org/wiki/Scottish_Gaelic_orthography http://www.omniglot.com/writing/gaelic.htm\n    gd: [{ letter: /[\\u00e0]/g, alternative: \"a\" }, { letter: /[\\u00c0]/g, alternative: \"A\" }, { letter: /[\\u00e8]/g, alternative: \"e\" }, { letter: /[\\u00c8]/g, alternative: \"E\" }, { letter: /[\\u00f2]/g, alternative: \"o\" }, { letter: /[\\u00d2]/g, alternative: \"O\" }, { letter: /[\\u00f9]/g, alternative: \"u\" }, { letter: /[\\u00d9]/g, alternative: \"U\" }, { letter: /[\\u00ec]/g, alternative: \"i\" }, { letter: /[\\u00cc]/g, alternative: \"I\" }],\n    // Language: Galician\n    // Sources: https://en.wikipedia.org/wiki/Diacritic https://en.wikipedia.org/wiki/Galician_Alphabet\n    gl: [{ letter: /[\\u00e1\\u00e0]/g, alternative: \"a\" }, { letter: /[\\u00c1\\u00c0]/g, alternative: \"A\" }, { letter: /[\\u00e9\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00ed\\u00ef]/g, alternative: \"i\" }, { letter: /[\\u00cd\\u00cf]/g, alternative: \"I\" }, { letter: /[\\u00f3]/g, alternative: \"o\" }, { letter: /[\\u00d3]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00da\\u00dc]/g, alternative: \"U\" }, { letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00f1]/g, alternative: \"n\" }, { letter: /[\\u00d1]/g, alternative: \"N\" }],\n    // Language: Guarani\n    // Sources: https://en.wikipedia.org/wiki/Guarani_alphabet http://www.omniglot.com/writing/guarani.htm\n    gn: [{ letter: /[\\u2019]/g, alternative: \"\" }, { letter: /\\u0067\\u0303/g, alternative: \"g\" }, { letter: /\\u0047\\u0303/g, alternative: \"G\" }, { letter: /[\\u00e3]/g, alternative: \"a\" }, { letter: /[\\u00c3]/g, alternative: \"A\" }, { letter: /[\\u1ebd]/g, alternative: \"e\" }, { letter: /[\\u1ebc]/g, alternative: \"E\" }, { letter: /[\\u0129]/g, alternative: \"i\" }, { letter: /[\\u0128]/g, alternative: \"I\" }, { letter: /[\\u00f5]/g, alternative: \"o\" }, { letter: /[\\u00d5]/g, alternative: \"O\" }, { letter: /[\\u00f1]/g, alternative: \"n\" }, { letter: /[\\u00d1]/g, alternative: \"N\" }, { letter: /[\\u0169]/g, alternative: \"u\" }, { letter: /[\\u0168]/g, alternative: \"U\" }, { letter: /[\\u1ef9]/g, alternative: \"y\" }, { letter: /[\\u1ef8]/g, alternative: \"Y\" }],\n    // Language: Swiss German\n    // Source: http://www.omniglot.com/writing/swissgerman.htm\n    gsw: [{ letter: /[\\u00e4]/g, alternative: \"a\" }, { letter: /[\\u00c4]/g, alternative: \"A\" }, { letter: /[\\u00f6]/g, alternative: \"o\" }, { letter: /[\\u00d6]/g, alternative: \"O\" }, { letter: /[\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00dc]/g, alternative: \"U\" }],\n    // Language: Haitian Creole\n    // Sources: https://en.wikipedia.org/wiki/Haitian_Creole http://www.omniglot.com/writing/haitiancreole.htm\n    hat: [{ letter: /[\\u00e8]/g, alternative: \"e\" }, { letter: /[\\u00c8]/g, alternative: \"E\" }, { letter: /[\\u00f2]/g, alternative: \"o\" }, { letter: /[\\u00d2]/g, alternative: \"O\" }],\n    // Language: Hawaiian\n    // Sources: https://en.wikipedia.org/wiki/Hawaiian_language#Macron http://www.omniglot.com/writing/hawaiian.htm\n    haw: [{ letter: /[\\u02bb\\u0027\\u2019]/g, alternative: \"\" }, { letter: /[\\u0101]/g, alternative: \"a\" }, { letter: /[\\u0113]/g, alternative: \"e\" }, { letter: /[\\u012b]/g, alternative: \"i\" }, { letter: /[\\u014d]/g, alternative: \"o\" }, { letter: /[\\u016b]/g, alternative: \"u\" }, { letter: /[\\u0100]/g, alternative: \"A\" }, { letter: /[\\u0112]/g, alternative: \"E\" }, { letter: /[\\u012a]/g, alternative: \"I\" }, { letter: /[\\u014c]/g, alternative: \"O\" }, { letter: /[\\u016a]/g, alternative: \"U\" }],\n    // Language: Croatian\n    // Sources: https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet https://en.wikipedia.org/wiki/D_with_stroke\n    // http://www.omniglot.com/writing/croatian.htm\n    hr: [{ letter: /[\\u010d\\u0107]/g, alternative: \"c\" }, { letter: /[\\u010c\\u0106]/g, alternative: \"C\" }, { letter: /[\\u0111]/g, alternative: \"dj\" }, { letter: /[\\u0110]/g, alternative: \"Dj\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }, { letter: /[\\u017e]/g, alternative: \"z\" }, { letter: /[\\u017d]/g, alternative: \"Z\" }, { letter: /[\\u01c4]/g, alternative: \"DZ\" }, { letter: /[\\u01c5]/g, alternative: \"Dz\" }, { letter: /[\\u01c6]/g, alternative: \"dz\" }],\n    // Language: Georgian\n    // The Georgian language does not use capital letters.\n    // Sources: https://en.wikipedia.org/wiki/Romanization_of_Georgian (national system)\n    ka: [{ letter: /[\\u10d0]/g, alternative: \"a\" }, { letter: /[\\u10d1]/g, alternative: \"b\" }, { letter: /[\\u10d2]/g, alternative: \"g\" }, { letter: /[\\u10d3]/g, alternative: \"d\" }, { letter: /[\\u10d4]/g, alternative: \"e\" }, { letter: /[\\u10d5]/g, alternative: \"v\" }, { letter: /[\\u10d6]/g, alternative: \"z\" }, { letter: /[\\u10d7]/g, alternative: \"t\" }, { letter: /[\\u10d8]/g, alternative: \"i\" }, { letter: /[\\u10d9]/g, alternative: \"k\" }, { letter: /[\\u10da]/g, alternative: \"l\" }, { letter: /[\\u10db]/g, alternative: \"m\" }, { letter: /[\\u10dc]/g, alternative: \"n\" }, { letter: /[\\u10dd]/g, alternative: \"o\" }, { letter: /[\\u10de]/g, alternative: \"p\" }, { letter: /[\\u10df]/g, alternative: \"zh\" }, { letter: /[\\u10e0]/g, alternative: \"r\" }, { letter: /[\\u10e1]/g, alternative: \"s\" }, { letter: /[\\u10e2]/g, alternative: \"t\" }, { letter: /[\\u10e3]/g, alternative: \"u\" }, { letter: /[\\u10e4]/g, alternative: \"p\" }, { letter: /[\\u10e5]/g, alternative: \"k\" }, { letter: /[\\u10e6]/g, alternative: \"gh\" }, { letter: /[\\u10e7]/g, alternative: \"q\" }, { letter: /[\\u10e8]/g, alternative: \"sh\" }, { letter: /[\\u10e9]/g, alternative: \"ch\" }, { letter: /[\\u10ea]/g, alternative: \"ts\" }, { letter: /[\\u10eb]/g, alternative: \"dz\" }, { letter: /[\\u10ec]/g, alternative: \"ts\" }, { letter: /[\\u10ed]/g, alternative: \"ch\" }, { letter: /[\\u10ee]/g, alternative: \"kh\" }, { letter: /[\\u10ef]/g, alternative: \"j\" }, { letter: /[\\u10f0]/g, alternative: \"h\" }],\n    // Language: Greenlandic.\n    // Source: https://en.wikipedia.org/wiki/Greenlandic_language#Orthography\n    kal: [{ letter: /[\\u00E5]/g, alternative: \"aa\" }, { letter: /[\\u00C5]/g, alternative: \"Aa\" }, { letter: /[\\u00E6\\u04D5]/g, alternative: \"ae\" }, { letter: /[\\u00C6\\u04D4]/g, alternative: \"Ae\" }, { letter: /[\\u00C4]/g, alternative: \"Ae\" }, { letter: /[\\u00F8]/g, alternative: \"oe\" }, { letter: /[\\u00D8]/g, alternative: \"Oe\" }],\n    // Language: Kinyarwanda.\n    // Source: https://en.wikipedia.org/wiki/Kinyarwanda\n    kin: [{ letter: /[\\u2019\\u0027]/g, alternative: \"\" }],\n    // Language: Luxembourgish.\n    // Source: http://www.omniglot.com/writing/luxembourgish.htm\n    lb: [{ letter: /[\\u00e4]/g, alternative: \"a\" }, { letter: /[\\u00c4]/g, alternative: \"A\" }, { letter: /[\\u00eb\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00cb\\u00c9]/g, alternative: \"E\" }],\n    // Language: Limburgish.\n    // Source: http://www.omniglot.com/writing/limburgish.htm\n    li: [{ letter: /[\\u00e1\\u00e2\\u00e0\\u00e4]/g, alternative: \"a\" }, { letter: /[\\u00c1\\u00c2\\u00c0\\u00c4]/g, alternative: \"A\" }, { letter: /[\\u00eb\\u00e8\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00cb\\u00c8\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00f6\\u00f3]/g, alternative: \"o\" }, { letter: /[\\u00d6\\u00d3]/g, alternative: \"O\" }],\n    // Language: Lingala.\n    // Sources: https://en.wikipedia.org/wiki/Lingala#Writing_system http://www.omniglot.com/writing/lingala.htm\n    lin: [{ letter: /[\\u00e1\\u00e2\\u01ce]/g, alternative: \"a\" }, { letter: /[\\u00c1\\u00c2\\u01cd]/g, alternative: \"A\" }, { letter: /\\u025b\\u0301/g, alternative: \"e\" }, { letter: /\\u025b\\u0302/g, alternative: \"e\" }, { letter: /\\u025b\\u030c/g, alternative: \"e\" }, { letter: /[\\u00e9\\u00ea\\u011b\\u025b]/g, alternative: \"e\" }, { letter: /\\u0190\\u0301/g, alternative: \"E\" }, { letter: /\\u0190\\u0302/g, alternative: \"E\" }, { letter: /\\u0190\\u030c/g, alternative: \"E\" }, { letter: /[\\u00c9\\u00ca\\u011a\\u0190]/g, alternative: \"E\" }, { letter: /[\\u00ed\\u00ee\\u01d0]/g, alternative: \"i\" }, { letter: /[\\u00cd\\u00ce\\u01cf]/g, alternative: \"I\" }, { letter: /\\u0254\\u0301/g, alternative: \"o\" }, { letter: /\\u0254\\u0302/g, alternative: \"o\" }, { letter: /\\u0254\\u030c/g, alternative: \"o\" }, { letter: /[\\u00f3\\u00f4\\u01d2\\u0254]/g, alternative: \"o\" }, { letter: /\\u0186\\u0301/g, alternative: \"O\" }, { letter: /\\u0186\\u0302/g, alternative: \"O\" }, { letter: /\\u0186\\u030c/g, alternative: \"O\" }, { letter: /[\\u00d3\\u00d4\\u01d1\\u0186]/g, alternative: \"O\" }, { letter: /[\\u00fa]/g, alternative: \"u\" }, { letter: /[\\u00da]/g, alternative: \"U\" }],\n    // Language: Lithuanian.\n    // Sources: https://en.wikipedia.org/wiki/Lithuanian_orthography http://www.omniglot.com/writing/lithuanian.htm\n    lt: [{ letter: /[\\u0105]/g, alternative: \"a\" }, { letter: /[\\u0104]/g, alternative: \"A\" }, { letter: /[\\u010d]/g, alternative: \"c\" }, { letter: /[\\u010c]/g, alternative: \"C\" }, { letter: /[\\u0119\\u0117]/g, alternative: \"e\" }, { letter: /[\\u0118\\u0116]/g, alternative: \"E\" }, { letter: /[\\u012f]/g, alternative: \"i\" }, { letter: /[\\u012e]/g, alternative: \"I\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }, { letter: /[\\u0173\\u016b]/g, alternative: \"u\" }, { letter: /[\\u0172\\u016a]/g, alternative: \"U\" }, { letter: /[\\u017e]/g, alternative: \"z\" }, { letter: /[\\u017d]/g, alternative: \"Z\" }],\n    // Language: Malagasy.\n    // Source: http://www.omniglot.com/writing/malagasy.htm\n    mg: [{ letter: /[\\u00f4]/g, alternative: \"ao\" }, { letter: /[\\u00d4]/g, alternative: \"Ao\" }],\n    // Language: Macedonian.\n    // Source: http://www.omniglot.com/writing/macedonian.htm\n    mk: [{ letter: /[\\u0430]/g, alternative: \"a\" }, { letter: /[\\u0410]/g, alternative: \"A\" }, { letter: /[\\u0431]/g, alternative: \"b\" }, { letter: /[\\u0411]/g, alternative: \"B\" }, { letter: /[\\u0432]/g, alternative: \"v\" }, { letter: /[\\u0412]/g, alternative: \"V\" }, { letter: /[\\u0433]/g, alternative: \"g\" }, { letter: /[\\u0413]/g, alternative: \"G\" }, { letter: /[\\u0434]/g, alternative: \"d\" }, { letter: /[\\u0414]/g, alternative: \"D\" }, { letter: /[\\u0453]/g, alternative: \"gj\" }, { letter: /[\\u0403]/g, alternative: \"Gj\" }, { letter: /[\\u0435]/g, alternative: \"e\" }, { letter: /[\\u0415]/g, alternative: \"E\" }, { letter: /[\\u0436]/g, alternative: \"zh\" }, { letter: /[\\u0416]/g, alternative: \"Zh\" }, { letter: /[\\u0437]/g, alternative: \"z\" }, { letter: /[\\u0417]/g, alternative: \"Z\" }, { letter: /[\\u0455]/g, alternative: \"dz\" }, { letter: /[\\u0405]/g, alternative: \"Dz\" }, { letter: /[\\u0438]/g, alternative: \"i\" }, { letter: /[\\u0418]/g, alternative: \"I\" }, { letter: /[\\u0458]/g, alternative: \"j\" }, { letter: /[\\u0408]/g, alternative: \"J\" }, { letter: /[\\u043A]/g, alternative: \"k\" }, { letter: /[\\u041A]/g, alternative: \"K\" }, { letter: /[\\u043B]/g, alternative: \"l\" }, { letter: /[\\u041B]/g, alternative: \"L\" }, { letter: /[\\u0459]/g, alternative: \"lj\" }, { letter: /[\\u0409]/g, alternative: \"Lj\" }, { letter: /[\\u043C]/g, alternative: \"m\" }, { letter: /[\\u041C]/g, alternative: \"M\" }, { letter: /[\\u043D]/g, alternative: \"n\" }, { letter: /[\\u041D]/g, alternative: \"N\" }, { letter: /[\\u045A]/g, alternative: \"nj\" }, { letter: /[\\u040A]/g, alternative: \"Nj\" }, { letter: /[\\u043E]/g, alternative: \"o\" }, { letter: /[\\u041E]/g, alternative: \"O\" }, { letter: /[\\u0440]/g, alternative: \"r\" }, { letter: /[\\u0420]/g, alternative: \"R\" }, { letter: /[\\u043F]/g, alternative: \"p\" }, { letter: /[\\u041F]/g, alternative: \"P\" }, { letter: /[\\u0441]/g, alternative: \"s\" }, { letter: /[\\u0421]/g, alternative: \"S\" }, { letter: /[\\u0442]/g, alternative: \"t\" }, { letter: /[\\u0422]/g, alternative: \"T\" }, { letter: /[\\u045C]/g, alternative: \"kj\" }, { letter: /[\\u040C]/g, alternative: \"Kj\" }, { letter: /[\\u0443]/g, alternative: \"u\" }, { letter: /[\\u0423]/g, alternative: \"U\" }, { letter: /[\\u0444]/g, alternative: \"f\" }, { letter: /[\\u0424]/g, alternative: \"F\" }, { letter: /[\\u0445]/g, alternative: \"h\" }, { letter: /[\\u0425]/g, alternative: \"H\" }, { letter: /[\\u0446]/g, alternative: \"c\" }, { letter: /[\\u0426]/g, alternative: \"C\" }, { letter: /[\\u0447]/g, alternative: \"ch\" }, { letter: /[\\u0427]/g, alternative: \"Ch\" }, { letter: /[\\u045F]/g, alternative: \"dj\" }, { letter: /[\\u040F]/g, alternative: \"Dj\" }, { letter: /[\\u0448]/g, alternative: \"sh\" }, { letter: /[\\u0428]/g, alternative: \"Sh\" }],\n    // Language: Maori.\n    // Source: http://www.omniglot.com/writing/maori.htm\n    mri: [{ letter: /[\\u0101]/g, alternative: \"aa\" }, { letter: /[\\u0100]/g, alternative: \"Aa\" }, { letter: /[\\u0113]/g, alternative: \"ee\" }, { letter: /[\\u0112]/g, alternative: \"Ee\" }, { letter: /[\\u012b]/g, alternative: \"ii\" }, { letter: /[\\u012a]/g, alternative: \"Ii\" }, { letter: /[\\u014d]/g, alternative: \"oo\" }, { letter: /[\\u014c]/g, alternative: \"Oo\" }, { letter: /[\\u016b]/g, alternative: \"uu\" }, { letter: /[\\u016a]/g, alternative: \"Uu\" }],\n    // Language: Mirandese.\n    // Source: http://www.omniglot.com/writing/mirandese.htm\n    mwl: [{ letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00e1]/g, alternative: \"a\" }, { letter: /[\\u00c1]/g, alternative: \"A\" }, { letter: /[\\u00e9\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00ed]/g, alternative: \"i\" }, { letter: /[\\u00cd]/g, alternative: \"I\" }, { letter: /[\\u00f3\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d3\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u0169]/g, alternative: \"u\" }, { letter: /[\\u00da\\u0168]/g, alternative: \"U\" }],\n    // Language: Occitan.\n    // Sources: http://www.omniglot.com/writing/oromo.htm https://en.wikipedia.org/wiki/Occitan_alphabet\n    oci: [{ letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00e0\\u00e1]/g, alternative: \"a\" }, { letter: /[\\u00c0\\u00c1]/g, alternative: \"A\" }, { letter: /[\\u00e8\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00c8\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u00ed\\u00ef]/g, alternative: \"i\" }, { letter: /[\\u00cd\\u00cf]/g, alternative: \"I\" }, { letter: /[\\u00f2\\u00f3]/g, alternative: \"o\" }, { letter: /[\\u00d2\\u00d3]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u00fc]/g, alternative: \"u\" }, { letter: /[\\u00da\\u00dc]/g, alternative: \"U\" }, { letter: /[\\u00b7]/g, alternative: \"\" }],\n    // Language: Oromo.\n    // Source: http://www.omniglot.com/writing/occitan.htm\n    orm: [{ letter: /[\\u0027]/g, alternative: \"\" }],\n    // Language: Portuguese.\n    // Source: https://en.wikipedia.org/wiki/Portuguese_orthography http://www.omniglot.com/writing/portuguese.htm\n    pt: [{ letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00e1\\u00e2\\u00e3\\u00e0]/g, alternative: \"a\" }, { letter: /[\\u00c1\\u00c2\\u00c3\\u00c0]/g, alternative: \"A\" }, { letter: /[\\u00e9\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00ed]/g, alternative: \"i\" }, { letter: /[\\u00cd]/g, alternative: \"I\" }, { letter: /[\\u00f3\\u00f4\\u00f5]/g, alternative: \"o\" }, { letter: /[\\u00d3\\u00d4\\u00d5]/g, alternative: \"O\" }, { letter: /[\\u00fa]/g, alternative: \"u\" }, { letter: /[\\u00da]/g, alternative: \"U\" }],\n    // Language: Romansh Vallader.\n    // Source: https://en.wikipedia.org/wiki/Romansh_language#Orthography http://www.omniglot.com/writing/romansh.htm\n    roh: [{ letter: /[\\u00e9\\u00e8\\u00ea]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00c8\\u00ca]/g, alternative: \"E\" }, { letter: /[\\u00ef]/g, alternative: \"i\" }, { letter: /[\\u00cf]/g, alternative: \"I\" }, { letter: /[\\u00f6]/g, alternative: \"oe\" }, { letter: /[\\u00d6]/g, alternative: \"Oe\" }, { letter: /[\\u00fc]/g, alternative: \"ue\" }, { letter: /[\\u00dc]/g, alternative: \"Ue\" }, { letter: /[\\u00e4]/g, alternative: \"ae\" }, { letter: /[\\u00c4]/g, alternative: \"Ae\" }],\n    // Language: Aromanian.\n    // Sources: https://en.wikipedia.org/wiki/Aromanian_alphabet http://www.omniglot.com/writing/aromanian.htm\n    rup: [{ letter: /[\\u00e3]/g, alternative: \"a\" }, { letter: /[\\u00c3]/g, alternative: \"A\" }],\n    // Language: Romanian.\n    // Sources: http://forum.wordreference.com/threads/romanian-transliteration.3193544/#post-16161251\n    // https://en.wikipedia.org/wiki/Romanian_alphabet http://www.omniglot.com/writing/romanian.htm\n    ro: [{ letter: /[\\u0103\\u00e2]/g, alternative: \"a\" }, { letter: /[\\u0102\\u00c2]/g, alternative: \"A\" }, { letter: /[\\u00ee]/g, alternative: \"i\" }, { letter: /[\\u00ce]/g, alternative: \"I\" }, { letter: /[\\u0219\\u015f]/g, alternative: \"s\" }, { letter: /[\\u0218\\u015e]/g, alternative: \"S\" }, { letter: /[\\u021b\\u0163]/g, alternative: \"t\" }, { letter: /[\\u021a\\u0162]/g, alternative: \"T\" }],\n    // Language: Klingon.\n    // Sources: http://www.omniglot.com/conscripts/klingon.htm https://en.wikipedia.org/wiki/Klingon_language#Writing_systems\n    // This translation module only works for Klingon written in Latin characters. KLI PlqaD script is not supported yet.\n    tlh: [{ letter: /[\\u2019\\u0027]/g, alternative: \"\" }],\n    // Language: Slovak.\n    // Sources: https://en.wikipedia.org/wiki/Dz_(digraph) https://en.wikipedia.org/wiki/Slovak_orthography\n    // http://www.omniglot.com/writing/slovak.htm\n    sk: [{ letter: /[\\u01c4]/g, alternative: \"DZ\" }, { letter: /[\\u01c5]/g, alternative: \"Dz\" }, { letter: /[\\u01c6]/g, alternative: \"dz\" }, { letter: /[\\u00e1\\u00e4]/g, alternative: \"a\" }, { letter: /[\\u00c1\\u00c4]/g, alternative: \"A\" }, { letter: /[\\u010d]/g, alternative: \"c\" }, { letter: /[\\u010c]/g, alternative: \"C\" }, { letter: /[\\u010f]/g, alternative: \"d\" }, { letter: /[\\u010e]/g, alternative: \"D\" }, { letter: /[\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u00ed]/g, alternative: \"i\" }, { letter: /[\\u00cd]/g, alternative: \"I\" }, { letter: /[\\u013e\\u013a]/g, alternative: \"l\" }, { letter: /[\\u013d\\u0139]/g, alternative: \"L\" }, { letter: /[\\u0148]/g, alternative: \"n\" }, { letter: /[\\u0147]/g, alternative: \"N\" }, { letter: /[\\u00f3\\u00f4]/g, alternative: \"o\" }, { letter: /[\\u00d3\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u0155]/g, alternative: \"r\" }, { letter: /[\\u0154]/g, alternative: \"R\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }, { letter: /[\\u0165]/g, alternative: \"t\" }, { letter: /[\\u0164]/g, alternative: \"T\" }, { letter: /[\\u00fa]/g, alternative: \"u\" }, { letter: /[\\u00da]/g, alternative: \"U\" }, { letter: /[\\u00fd]/g, alternative: \"y\" }, { letter: /[\\u00dd]/g, alternative: \"Y\" }, { letter: /[\\u017e]/g, alternative: \"z\" }, { letter: /[\\u017d]/g, alternative: \"Z\" }],\n    // Language: Slovenian.\n    // Sources: https://en.wikipedia.org/wiki/Slovene_alphabet http://www.omniglot.com/writing/slovene.htm\n    sl: [{ letter: /[\\u010d\\u0107]/g, alternative: \"c\" }, { letter: /[\\u010c\\u0106]/g, alternative: \"C\" }, { letter: /[\\u0111]/g, alternative: \"d\" }, { letter: /[\\u0110]/g, alternative: \"D\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }, { letter: /[\\u017e]/g, alternative: \"z\" }, { letter: /[\\u017d]/g, alternative: \"Z\" }, { letter: /[\\u00e0\\u00e1\\u0203\\u0201]/g, alternative: \"a\" }, { letter: /[\\u00c0\\u00c1\\u0202\\u0200]/g, alternative: \"A\" }, { letter: /[\\u00e8\\u00e9\\u0207\\u0205]/g, alternative: \"e\" }, { letter: /\\u01dd\\u0300/g, alternative: \"e\" }, { letter: /\\u01dd\\u030f/g, alternative: \"e\" }, { letter: /\\u1eb9\\u0301/g, alternative: \"e\" }, { letter: /\\u1eb9\\u0311/g, alternative: \"e\" }, { letter: /[\\u00c8\\u00c9\\u0206\\u0204]/g, alternative: \"E\" }, { letter: /\\u018e\\u030f/g, alternative: \"E\" }, { letter: /\\u018e\\u0300/g, alternative: \"E\" }, { letter: /\\u1eb8\\u0311/g, alternative: \"E\" }, { letter: /\\u1eb8\\u0301/g, alternative: \"E\" }, { letter: /[\\u00ec\\u00ed\\u020b\\u0209]/g, alternative: \"i\" }, { letter: /[\\u00cc\\u00cd\\u020a\\u0208]/g, alternative: \"I\" }, { letter: /[\\u00f2\\u00f3\\u020f\\u020d]/g, alternative: \"o\" }, { letter: /\\u1ecd\\u0311/g, alternative: \"o\" }, { letter: /\\u1ecd\\u0301/g, alternative: \"o\" }, { letter: /\\u1ecc\\u0311/g, alternative: \"O\" }, { letter: /\\u1ecc\\u0301/g, alternative: \"O\" }, { letter: /[\\u00d2\\u00d3\\u020e\\u020c]/g, alternative: \"O\" }, { letter: /[\\u00f9\\u00fa\\u0217\\u0215]/g, alternative: \"u\" }, { letter: /[\\u00d9\\u00da\\u0216\\u0214]/g, alternative: \"U\" }, { letter: /[\\u0155\\u0213]/g, alternative: \"r\" }, { letter: /[\\u0154\\u0212]/g, alternative: \"R\" }],\n    // Language: Albanian.\n    // Sources: https://en.wikipedia.org/wiki/Albanian_alphabet http://www.omniglot.com/writing/albanian.htm\n    sq: [{ letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00eb]/g, alternative: \"e\" }, { letter: /[\\u00cb]/g, alternative: \"E\" }],\n    // Language: Hungarian.\n    // Sources: http://forum.wordreference.com/threads/hungarian-transliteration.3193022/#post-16166901\n    // http://www.omniglot.com/writing/hungarian.htm\n    hu: [{ letter: /[\\u00e1]/g, alternative: \"a\" }, { letter: /[\\u00c1]/g, alternative: \"A\" }, { letter: /[\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u00ed]/g, alternative: \"i\" }, { letter: /[\\u00cd]/g, alternative: \"I\" }, { letter: /[\\u00f3\\u00f6\\u0151]/g, alternative: \"o\" }, { letter: /[\\u00d3\\u00d6\\u0150]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u00fc\\u0171]/g, alternative: \"u\" }, { letter: /[\\u00da\\u00dc\\u0170]/g, alternative: \"U\" }],\n    // Language: Sardinian.\n    // Sources: http://www.omniglot.com/writing/sardinian.htm https://en.wikipedia.org/wiki/Sardinian_language\n    srd: [{ letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00e0\\u00e1]/g, alternative: \"a\" }, { letter: /[\\u00c0\\u00c1]/g, alternative: \"A\" }, { letter: /[\\u00e8\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00c8\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u00ed\\u00ef]/g, alternative: \"i\" }, { letter: /[\\u00cd\\u00cf]/g, alternative: \"I\" }, { letter: /[\\u00f2\\u00f3]/g, alternative: \"o\" }, { letter: /[\\u00d2\\u00d3]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u00f9]/g, alternative: \"u\" }, { letter: /[\\u00da\\u00d9]/g, alternative: \"U\" }],\n    // Language: Silesian.\n    // Source: https://en.wikipedia.org/wiki/Silesian_language#Writing_system\n    szl: [{ letter: /[\\u0107]/g, alternative: \"c\" }, { letter: /[\\u0106]/g, alternative: \"C\" }, { letter: /[\\u00e3]/g, alternative: \"a\" }, { letter: /[\\u00c3]/g, alternative: \"A\" }, { letter: /[\\u0142]/g, alternative: \"u\" }, { letter: /[\\u0141]/g, alternative: \"U\" }, { letter: /[\\u006e]/g, alternative: \"n\" }, { letter: /[\\u004e]/g, alternative: \"N\" }, { letter: /[\\u014f\\u014d\\u00f4\\u00f5]/g, alternative: \"o\" }, { letter: /[\\u014e\\u014c\\u00d4\\u00d5]/g, alternative: \"O\" }, { letter: /[\\u015b]/g, alternative: \"s\" }, { letter: /[\\u015a]/g, alternative: \"S\" }, { letter: /[\\u017a\\u017c\\u017e]/g, alternative: \"z\" }, { letter: /[\\u0179\\u017b\\u017d]/g, alternative: \"Z\" }, { letter: /[\\u016f]/g, alternative: \"u\" }, { letter: /[\\u016e]/g, alternative: \"U\" }, { letter: /[\\u010d]/g, alternative: \"cz\" }, { letter: /[\\u010c]/g, alternative: \"Cz\" }, { letter: /[\\u0159]/g, alternative: \"rz\" }, { letter: /[\\u0158]/g, alternative: \"Rz\" }, { letter: /[\\u0161]/g, alternative: \"sz\" }, { letter: /[\\u0160]/g, alternative: \"Sz\" }],\n    // Language: Tahitian.\n    // Sources: https://en.wikipedia.org/wiki/Tahitian_language#Phonology http://www.omniglot.com/writing/tahitian.htm\n    tah: [{ letter: /[\\u0101\\u00e2\\u00e0]/g, alternative: \"a\" }, { letter: /[\\u0100\\u00c2\\u00c0]/g, alternative: \"A\" }, { letter: /[\\u00ef\\u00ee\\u00ec]/g, alternative: \"i\" }, { letter: /[\\u00cf\\u00ce\\u00cc]/g, alternative: \"I\" }, { letter: /[\\u0113\\u00ea\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u0112\\u00ca\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u016b\\u00fb\\u00fa]/g, alternative: \"u\" }, { letter: /[\\u016a\\u00db\\u00da]/g, alternative: \"U\" }, { letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /[\\u00f2\\u00f4\\u014d]/g, alternative: \"o\" }, { letter: /[\\u00d2\\u00d4\\u014c]/g, alternative: \"O\" }, { letter: /[\\u2019\\u0027\\u2018]/g, alternative: \"\" }],\n    // Language: Venetian.\n    // Sources: http://www.omniglot.com/writing/venetian.htm https://en.wikipedia.org/wiki/Venetian_language#Spelling_systems\n    // http://www.venipedia.org/wiki/index.php?title=Venetian_Language\n    vec: [{ letter: /\\u0073\\u002d\\u0063/g, alternative: \"sc\" }, { letter: /\\u0053\\u002d\\u0043/g, alternative: \"SC\" }, { letter: /\\u0073\\u0027\\u0063/g, alternative: \"sc\" }, { letter: /\\u0053\\u0027\\u0043/g, alternative: \"SC\" }, { letter: /\\u0073\\u2019\\u0063/g, alternative: \"sc\" }, { letter: /\\u0053\\u2019\\u0043/g, alternative: \"SC\" }, { letter: /\\u0073\\u2018\\u0063/g, alternative: \"sc\" }, { letter: /\\u0053\\u2018\\u0043/g, alternative: \"SC\" }, { letter: /\\u0053\\u002d\\u0063/g, alternative: \"Sc\" }, { letter: /\\u0053\\u0027\\u0063/g, alternative: \"Sc\" }, { letter: /\\u0053\\u2019\\u0063/g, alternative: \"Sc\" }, { letter: /\\u0053\\u2018\\u0063/g, alternative: \"Sc\" }, { letter: /\\u0063\\u2019/g, alternative: \"c\" }, { letter: /\\u0043\\u2019/g, alternative: \"C\" }, { letter: /\\u0063\\u2018/g, alternative: \"c\" }, { letter: /\\u0043\\u2018/g, alternative: \"C\" }, { letter: /\\u0063\\u0027/g, alternative: \"c\" }, { letter: /\\u0043\\u0027/g, alternative: \"C\" }, { letter: /[\\u00e0\\u00e1\\u00e2]/g, alternative: \"a\" }, { letter: /[\\u00c0\\u00c1\\u00c2]/g, alternative: \"A\" }, { letter: /[\\u00e8\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00c8\\u00c9]/g, alternative: \"E\" }, { letter: /[\\u00f2\\u00f3]/g, alternative: \"o\" }, { letter: /[\\u00d2\\u00d3]/g, alternative: \"O\" }, { letter: /[\\u00f9\\u00fa]/g, alternative: \"u\" }, { letter: /[\\u00d9\\u00da]/g, alternative: \"U\" }, { letter: /[\\u00e7\\u010d\\u010b]/g, alternative: \"c\" }, { letter: /[\\u00c7\\u010c\\u010a]/g, alternative: \"C\" }, { letter: /[\\u0142]/g, alternative: \"l\" }, { letter: /[\\u00a3\\u0141]/g, alternative: \"L\" }, { letter: /\\ud835\\udeff/g, alternative: \"dh\" }, { letter: /[\\u0111\\u03b4]/g, alternative: \"dh\" }, { letter: /[\\u0110\\u0394]/g, alternative: \"Dh\" }],\n    // Language: Walloon.\n    // Sources: http://www.omniglot.com/writing/walloon.htm https://en.wikipedia.org/wiki/Walloon_alphabet\n    wa: [{ letter: /[\\u00e2\\u00e5]/g, alternative: \"a\" }, { letter: /[\\u00c2\\u00c5]/g, alternative: \"A\" }, { letter: /[\\u00e7]/g, alternative: \"c\" }, { letter: /[\\u00c7]/g, alternative: \"C\" }, { letter: /\\u0065\\u030a/g, alternative: \"e\" }, { letter: /\\u0045\\u030a/g, alternative: \"E\" }, { letter: /[\\u00eb\\u00ea\\u00e8\\u00e9]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00c8\\u00ca\\u00cb]/g, alternative: \"E\" }, { letter: /[\\u00ee]/g, alternative: \"i\" }, { letter: /[\\u00ce]/g, alternative: \"I\" }, { letter: /[\\u00f4\\u00f6]/g, alternative: \"o\" }, { letter: /[\\u00d6\\u00d4]/g, alternative: \"O\" }, { letter: /[\\u00fb]/g, alternative: \"u\" }, { letter: /[\\u00db]/g, alternative: \"U\" }],\n    // Language: Yoruba.\n    // Sources: http://www.omniglot.com/writing/yoruba.htm https://en.wikipedia.org/wiki/Yoruba_language\n    yor: [{ letter: /[\\u00e1\\u00e0]/g, alternative: \"a\" }, { letter: /[\\u00c1\\u00c0]/g, alternative: \"A\" }, { letter: /[\\u00ec\\u00ed]/g, alternative: \"i\" }, { letter: /[\\u00cc\\u00cd]/g, alternative: \"I\" }, { letter: /\\u1ecd\\u0301/g, alternative: \"o\" }, { letter: /\\u1ecc\\u0301/g, alternative: \"O\" }, { letter: /\\u1ecd\\u0300/g, alternative: \"o\" }, { letter: /\\u1ecc\\u0300/g, alternative: \"O\" }, { letter: /[\\u00f3\\u00f2\\u1ecd]/g, alternative: \"o\" }, { letter: /[\\u00d3\\u00d2\\u1ecc]/g, alternative: \"O\" }, { letter: /[\\u00fa\\u00f9]/g, alternative: \"u\" }, { letter: /[\\u00da\\u00d9]/g, alternative: \"U\" }, { letter: /\\u1eb9\\u0301/g, alternative: \"e\" }, { letter: /\\u1eb8\\u0301/g, alternative: \"E\" }, { letter: /\\u1eb9\\u0300/g, alternative: \"e\" }, { letter: /\\u1eb8\\u0300/g, alternative: \"E\" }, { letter: /[\\u00e9\\u00e8\\u1eb9]/g, alternative: \"e\" }, { letter: /[\\u00c9\\u00c8\\u1eb8]/g, alternative: \"E\" }, { letter: /[\\u1e63]/g, alternative: \"s\" }, { letter: /[\\u1e62]/g, alternative: \"S\" }]\n};\n/**\n * The function returning an array containing transliteration objects, based on the given locale.\n *\n * @param {string} locale The locale.\n * @returns {Array} An array containing transliteration objects.\n */\nmodule.exports = function (locale) {\n    if (isUndefined(locale)) {\n        return [];\n    }\n    switch (getLanguage(locale)) {\n        case \"es\":\n            return transliterations.es;\n        case \"pl\":\n            return transliterations.pl;\n        case \"de\":\n            return transliterations.de;\n        case \"nb\":\n        case \"nn\":\n            return transliterations.nbnn;\n        case \"sv\":\n            return transliterations.sv;\n        case \"fi\":\n            return transliterations.fi;\n        case \"da\":\n            return transliterations.da;\n        case \"tr\":\n            return transliterations.tr;\n        case \"lv\":\n            return transliterations.lv;\n        case \"is\":\n            return transliterations.is;\n        case \"fa\":\n            return transliterations.fa;\n        case \"cs\":\n            return transliterations.cs;\n        case \"ru\":\n            return transliterations.ru;\n        case \"eo\":\n            return transliterations.eo;\n        case \"af\":\n            return transliterations.af;\n        case \"bal\":\n        case \"ca\":\n            return transliterations.ca;\n        case \"ast\":\n            return transliterations.ast;\n        case \"an\":\n            return transliterations.an;\n        case \"ay\":\n            return transliterations.ay;\n        case \"en\":\n            return transliterations.en;\n        case \"fr\":\n            return transliterations.fr;\n        case \"it\":\n            return transliterations.it;\n        case \"nl\":\n            return transliterations.nl;\n        case \"bm\":\n            return transliterations.bm;\n        case \"uk\":\n            return transliterations.uk;\n        case \"br\":\n            return transliterations.br;\n        case \"ch\":\n            return transliterations.ch;\n        case \"csb\":\n            return transliterations.csb;\n        case \"cy\":\n            return transliterations.cy;\n        case \"ee\":\n            return transliterations.ee;\n        case \"et\":\n            return transliterations.et;\n        case \"eu\":\n            return transliterations.eu;\n        case \"fuc\":\n            return transliterations.fuc;\n        case \"fj\":\n            return transliterations.fj;\n        case \"frp\":\n            return transliterations.frp;\n        case \"fur\":\n            return transliterations.fur;\n        case \"fy\":\n            return transliterations.fy;\n        case \"ga\":\n            return transliterations.ga;\n        case \"gd\":\n            return transliterations.gd;\n        case \"gl\":\n            return transliterations.gl;\n        case \"gn\":\n            return transliterations.gn;\n        case \"gsw\":\n            return transliterations.gsw;\n        case \"hat\":\n            return transliterations.hat;\n        case \"haw\":\n            return transliterations.haw;\n        case \"hr\":\n            return transliterations.hr;\n        case \"ka\":\n            return transliterations.ka;\n        case \"kal\":\n            return transliterations.kal;\n        case \"kin\":\n            return transliterations.kin;\n        case \"lb\":\n            return transliterations.lb;\n        case \"li\":\n            return transliterations.li;\n        case \"lin\":\n            return transliterations.lin;\n        case \"lt\":\n            return transliterations.lt;\n        case \"mg\":\n            return transliterations.mg;\n        case \"mk\":\n            return transliterations.mk;\n        case \"mri\":\n            return transliterations.mri;\n        case \"mwl\":\n            return transliterations.mwl;\n        case \"oci\":\n            return transliterations.oci;\n        case \"orm\":\n            return transliterations.orm;\n        case \"pt\":\n            return transliterations.pt;\n        case \"roh\":\n            return transliterations.roh;\n        case \"rup\":\n            return transliterations.rup;\n        case \"ro\":\n            return transliterations.ro;\n        case \"tlh\":\n            return transliterations.tlh;\n        case \"sk\":\n            return transliterations.sk;\n        case \"sl\":\n            return transliterations.sl;\n        case \"sq\":\n            return transliterations.sq;\n        case \"hu\":\n            return transliterations.hu;\n        case \"srd\":\n            return transliterations.srd;\n        case \"szl\":\n            return transliterations.szl;\n        case \"tah\":\n            return transliterations.tah;\n        case \"vec\":\n            return transliterations.vec;\n        case \"wa\":\n            return transliterations.wa;\n        case \"yor\":\n            return transliterations.yor;\n        default:\n            return [];\n    }\n};\n//# sourceMappingURL=transliterations.js.map\n//# sourceMappingURL=transliterations.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/transliterations.js\n// module id = 1374\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/transliterations.js?");

/***/ }),
/* 1375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transliterationsMap = __webpack_require__(1376);\n/**\n * Replaces all special characters from the text based on the transliterations map specific for WP\n * (and different from the one used by YoastSEO.js).\n *\n * @param {string} text The text to remove special characters from.\n * @param {string} locale The locale.\n *\n * @returns {string} The text with all special characters replaced.\n */\nmodule.exports = function (text, locale) {\n    var map = transliterationsMap(locale);\n    for (var i = map.length - 1; i >= 0; i--) {\n        text = text.replace(map[i].letter, map[i].alternative);\n    }\n    return text;\n};\n//# sourceMappingURL=transliterateWPstyle.js.map\n//# sourceMappingURL=transliterateWPstyle.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/transliterateWPstyle.js\n// module id = 1375\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/transliterateWPstyle.js?");

/***/ }),
/* 1376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * The list of accent characters and their ASCII alternatives is taken from wordpress-develop-mirror/blob/master/src/wp-includes/formatting.php.\n */\n\nvar getLanguage = __webpack_require__(186);\nvar isUndefined = __webpack_require__(66);\nvar transliterationsGeneral = [\n/*\n * These transliteration objects are not language-specific, and will be applied independently on the locale.\n *\n * Currency signs:\n *\n * |   Code   | Glyph | Replacement |     Description     |\n * | -------- | ----- | ----------- | ------------------- |\n * | U+00A3   | £     | (empty)     | British Pound sign  |\n * | U+20AC   | €     | E           | Euro sign           |\n *\n * Decompositions for Latin-1 Supplement:\n *\n * |  Code   | Glyph | Replacement |               Description              |\n * | ------- | ----- | ----------- | -------------------------------------- |\n * | U+00AA  | ª     | a           | Feminine ordinal indicator             |\n * | U+00BA  | º     | o           | Masculine ordinal indicator            |\n * | U+00C0  | À     | A           | Latin capital letter A with grave      |\n * | U+00C1  | Á     | A           | Latin capital letter A with acute      |\n * | U+00C2  | Â     | A           | Latin capital letter A with circumflex |\n * | U+00C3  | Ã     | A           | Latin capital letter A with tilde      |\n * | U+00C4  | Ä     | A           | Latin capital letter A with diaeresis  |\n * | U+00C5  | Å     | A           | Latin capital letter A with ring above |\n * | U+00C6  | Æ     | AE          | Latin capital letter AE                |\n * | U+00C7  | Ç     | C           | Latin capital letter C with cedilla    |\n * | U+00C8  | È     | E           | Latin capital letter E with grave      |\n * | U+00C9  | É     | E           | Latin capital letter E with acute      |\n * | U+00CA  | Ê     | E           | Latin capital letter E with circumflex |\n * | U+00CB  | Ë     | E           | Latin capital letter E with diaeresis  |\n * | U+00CC  | Ì     | I           | Latin capital letter I with grave      |\n * | U+00CD  | Í     | I           | Latin capital letter I with acute      |\n * | U+00CE  | Î     | I           | Latin capital letter I with circumflex |\n * | U+00CF  | Ï     | I           | Latin capital letter I with diaeresis  |\n * | U+00D0  | Ð     | D           | Latin capital letter Eth               |\n * | U+00D1  | Ñ     | N           | Latin capital letter N with tilde      |\n * | U+00D2  | Ò     | O           | Latin capital letter O with grave      |\n * | U+00D3  | Ó     | O           | Latin capital letter O with acute      |\n * | U+00D4  | Ô     | O           | Latin capital letter O with circumflex |\n * | U+00D5  | Õ     | O           | Latin capital letter O with tilde      |\n * | U+00D6  | Ö     | O           | Latin capital letter O with diaeresis  |\n * | U+00D8  | Ø     | O           | Latin capital letter O with stroke     |\n * | U+00D9  | Ù     | U           | Latin capital letter U with grave      |\n * | U+00DA  | Ú     | U           | Latin capital letter U with acute      |\n * | U+00DB  | Û     | U           | Latin capital letter U with circumflex |\n * | U+00DC  | Ü     | U           | Latin capital letter U with diaeresis  |\n * | U+00DD  | Ý     | Y           | Latin capital letter Y with acute      |\n * | U+00DE  | Þ     | TH          | Latin capital letter Thorn             |\n * | U+00DF  | ß     | s           | Latin small letter sharp s             |\n * | U+00E0  | à     | a           | Latin small letter a with grave        |\n * | U+00E1  | á     | a           | Latin small letter a with acute        |\n * | U+00E2  | â     | a           | Latin small letter a with circumflex   |\n * | U+00E3  | ã     | a           | Latin small letter a with tilde        |\n * | U+00E4  | ä     | a           | Latin small letter a with diaeresis    |\n * | U+00E5  | å     | a           | Latin small letter a with ring above   |\n * | U+00E6  | æ     | ae          | Latin small letter ae                  |\n * | U+00E7  | ç     | c           | Latin small letter c with cedilla      |\n * | U+00E8  | è     | e           | Latin small letter e with grave        |\n * | U+00E9  | é     | e           | Latin small letter e with acute        |\n * | U+00EA  | ê     | e           | Latin small letter e with circumflex   |\n * | U+00EB  | ë     | e           | Latin small letter e with diaeresis    |\n * | U+00EC  | ì     | i           | Latin small letter i with grave        |\n * | U+00ED  | í     | i           | Latin small letter i with acute        |\n * | U+00EE  | î     | i           | Latin small letter i with circumflex   |\n * | U+00EF  | ï     | i           | Latin small letter i with diaeresis    |\n * | U+00F0  | ð     | d           | Latin small letter Eth                 |\n * | U+00F1  | ñ     | n           | Latin small letter n with tilde        |\n * | U+00F2  | ò     | o           | Latin small letter o with grave        |\n * | U+00F3  | ó     | o           | Latin small letter o with acute        |\n * | U+00F4  | ô     | o           | Latin small letter o with circumflex   |\n * | U+00F5  | õ     | o           | Latin small letter o with tilde        |\n * | U+00F6  | ö     | o           | Latin small letter o with diaeresis    |\n * | U+00F8  | ø     | o           | Latin small letter o with stroke       |\n * | U+00F9  | ù     | u           | Latin small letter u with grave        |\n * | U+00FA  | ú     | u           | Latin small letter u with acute        |\n * | U+00FB  | û     | u           | Latin small letter u with circumflex   |\n * | U+00FC  | ü     | u           | Latin small letter u with diaeresis    |\n * | U+00FD  | ý     | y           | Latin small letter y with acute        |\n * | U+00FE  | þ     | th          | Latin small letter Thorn               |\n * | U+00FF  | ÿ     | y           | Latin small letter y with diaeresis    |\n *\n * Decompositions for Latin Extended-A:\n *\n * |  Code   | Glyph | Replacement |                    Description                    |\n * | ------- | ----- | ----------- | ------------------------------------------------- |\n * | U+0100  | Ā     | A           | Latin capital letter A with macron                |\n * | U+0101  | ā     | a           | Latin small letter a with macron                  |\n * | U+0102  | Ă     | A           | Latin capital letter A with breve                 |\n * | U+0103  | ă     | a           | Latin small letter a with breve                   |\n * | U+0104  | Ą     | A           | Latin capital letter A with ogonek                |\n * | U+0105  | ą     | a           | Latin small letter a with ogonek                  |\n * | U+0106  | Ć     | C           | Latin capital letter C with acute                 |\n * | U+0107  | ć     | c           | Latin small letter c with acute                   |\n * | U+0108  | Ĉ     | C           | Latin capital letter C with circumflex            |\n * | U+0109  | ĉ     | c           | Latin small letter c with circumflex              |\n * | U+010A  | Ċ     | C           | Latin capital letter C with dot above             |\n * | U+010B  | ċ     | c           | Latin small letter c with dot above               |\n * | U+010C  | Č     | C           | Latin capital letter C with caron                 |\n * | U+010D  | č     | c           | Latin small letter c with caron                   |\n * | U+010E  | Ď     | D           | Latin capital letter D with caron                 |\n * | U+010F  | ď     | d           | Latin small letter d with caron                   |\n * | U+0110  | Đ     | D           | Latin capital letter D with stroke                |\n * | U+0111  | đ     | d           | Latin small letter d with stroke                  |\n * | U+0112  | Ē     | E           | Latin capital letter E with macron                |\n * | U+0113  | ē     | e           | Latin small letter e with macron                  |\n * | U+0114  | Ĕ     | E           | Latin capital letter E with breve                 |\n * | U+0115  | ĕ     | e           | Latin small letter e with breve                   |\n * | U+0116  | Ė     | E           | Latin capital letter E with dot above             |\n * | U+0117  | ė     | e           | Latin small letter e with dot above               |\n * | U+0118  | Ę     | E           | Latin capital letter E with ogonek                |\n * | U+0119  | ę     | e           | Latin small letter e with ogonek                  |\n * | U+011A  | Ě     | E           | Latin capital letter E with caron                 |\n * | U+011B  | ě     | e           | Latin small letter e with caron                   |\n * | U+011C  | Ĝ     | G           | Latin capital letter G with circumflex            |\n * | U+011D  | ĝ     | g           | Latin small letter g with circumflex              |\n * | U+011E  | Ğ     | G           | Latin capital letter G with breve                 |\n * | U+011F  | ğ     | g           | Latin small letter g with breve                   |\n * | U+0120  | Ġ     | G           | Latin capital letter G with dot above             |\n * | U+0121  | ġ     | g           | Latin small letter g with dot above               |\n * | U+0122  | Ģ     | G           | Latin capital letter G with cedilla               |\n * | U+0123  | ģ     | g           | Latin small letter g with cedilla                 |\n * | U+0124  | Ĥ     | H           | Latin capital letter H with circumflex            |\n * | U+0125  | ĥ     | h           | Latin small letter h with circumflex              |\n * | U+0126  | Ħ     | H           | Latin capital letter H with stroke                |\n * | U+0127  | ħ     | h           | Latin small letter h with stroke                  |\n * | U+0128  | Ĩ     | I           | Latin capital letter I with tilde                 |\n * | U+0129  | ĩ     | i           | Latin small letter i with tilde                   |\n * | U+012A  | Ī     | I           | Latin capital letter I with macron                |\n * | U+012B  | ī     | i           | Latin small letter i with macron                  |\n * | U+012C  | Ĭ     | I           | Latin capital letter I with breve                 |\n * | U+012D  | ĭ     | i           | Latin small letter i with breve                   |\n * | U+012E  | Į     | I           | Latin capital letter I with ogonek                |\n * | U+012F  | į     | i           | Latin small letter i with ogonek                  |\n * | U+0130  | İ     | I           | Latin capital letter I with dot above             |\n * | U+0131  | ı     | i           | Latin small letter dotless i                      |\n * | U+0132  | Ĳ     | IJ          | Latin capital ligature IJ                         |\n * | U+0133  | ĳ     | ij          | Latin small ligature ij                           |\n * | U+0134  | Ĵ     | J           | Latin capital letter J with circumflex            |\n * | U+0135  | ĵ     | j           | Latin small letter j with circumflex              |\n * | U+0136  | Ķ     | K           | Latin capital letter K with cedilla               |\n * | U+0137  | ķ     | k           | Latin small letter k with cedilla                 |\n * | U+0138  | ĸ     | k           | Latin small letter Kra                            |\n * | U+0139  | Ĺ     | L           | Latin capital letter L with acute                 |\n * | U+013A  | ĺ     | l           | Latin small letter l with acute                   |\n * | U+013B  | Ļ     | L           | Latin capital letter L with cedilla               |\n * | U+013C  | ļ     | l           | Latin small letter l with cedilla                 |\n * | U+013D  | Ľ     | L           | Latin capital letter L with caron                 |\n * | U+013E  | ľ     | l           | Latin small letter l with caron                   |\n * | U+013F  | Ŀ     | L           | Latin capital letter L with middle dot            |\n * | U+0140  | ŀ     | l           | Latin small letter l with middle dot              |\n * | U+0141  | Ł     | L           | Latin capital letter L with stroke                |\n * | U+0142  | ł     | l           | Latin small letter l with stroke                  |\n * | U+0143  | Ń     | N           | Latin capital letter N with acute                 |\n * | U+0144  | ń     | n           | Latin small letter N with acute                   |\n * | U+0145  | Ņ     | N           | Latin capital letter N with cedilla               |\n * | U+0146  | ņ     | n           | Latin small letter n with cedilla                 |\n * | U+0147  | Ň     | N           | Latin capital letter N with caron                 |\n * | U+0148  | ň     | n           | Latin small letter n with caron                   |\n * | U+0149  | ŉ     | n           | Latin small letter n preceded by apostrophe       |\n * | U+014A  | Ŋ     | N           | Latin capital letter Eng                          |\n * | U+014B  | ŋ     | n           | Latin small letter Eng                            |\n * | U+014C  | Ō     | O           | Latin capital letter O with macron                |\n * | U+014D  | ō     | o           | Latin small letter o with macron                  |\n * | U+014E  | Ŏ     | O           | Latin capital letter O with breve                 |\n * | U+014F  | ŏ     | o           | Latin small letter o with breve                   |\n * | U+0150  | Ő     | O           | Latin capital letter O with double acute          |\n * | U+0151  | ő     | o           | Latin small letter o with double acute            |\n * | U+0152  | Œ     | OE          | Latin capital ligature OE                         |\n * | U+0153  | œ     | oe          | Latin small ligature oe                           |\n * | U+0154  | Ŕ     | R           | Latin capital letter R with acute                 |\n * | U+0155  | ŕ     | r           | Latin small letter r with acute                   |\n * | U+0156  | Ŗ     | R           | Latin capital letter R with cedilla               |\n * | U+0157  | ŗ     | r           | Latin small letter r with cedilla                 |\n * | U+0158  | Ř     | R           | Latin capital letter R with caron                 |\n * | U+0159  | ř     | r           | Latin small letter r with caron                   |\n * | U+015A  | Ś     | S           | Latin capital letter S with acute                 |\n * | U+015B  | ś     | s           | Latin small letter s with acute                   |\n * | U+015C  | Ŝ     | S           | Latin capital letter S with circumflex            |\n * | U+015D  | ŝ     | s           | Latin small letter s with circumflex              |\n * | U+015E  | Ş     | S           | Latin capital letter S with cedilla               |\n * | U+015F  | ş     | s           | Latin small letter s with cedilla                 |\n * | U+0160  | Š     | S           | Latin capital letter S with caron                 |\n * | U+0161  | š     | s           | Latin small letter s with caron                   |\n * | U+0162  | Ţ     | T           | Latin capital letter T with cedilla               |\n * | U+0163  | ţ     | t           | Latin small letter t with cedilla                 |\n * | U+0164  | Ť     | T           | Latin capital letter T with caron                 |\n * | U+0165  | ť     | t           | Latin small letter t with caron                   |\n * | U+0166  | Ŧ     | T           | Latin capital letter T with stroke                |\n * | U+0167  | ŧ     | t           | Latin small letter t with stroke                  |\n * | U+0168  | Ũ     | U           | Latin capital letter U with tilde                 |\n * | U+0169  | ũ     | u           | Latin small letter u with tilde                   |\n * | U+016A  | Ū     | U           | Latin capital letter U with macron                |\n * | U+016B  | ū     | u           | Latin small letter u with macron                  |\n * | U+016C  | Ŭ     | U           | Latin capital letter U with breve                 |\n * | U+016D  | ŭ     | u           | Latin small letter u with breve                   |\n * | U+016E  | Ů     | U           | Latin capital letter U with ring above            |\n * | U+016F  | ů     | u           | Latin small letter u with ring above              |\n * | U+0170  | Ű     | U           | Latin capital letter U with double acute          |\n * | U+0171  | ű     | u           | Latin small letter u with double acute            |\n * | U+0172  | Ų     | U           | Latin capital letter U with ogonek                |\n * | U+0173  | ų     | u           | Latin small letter u with ogonek                  |\n * | U+0174  | Ŵ     | W           | Latin capital letter W with circumflex            |\n * | U+0175  | ŵ     | w           | Latin small letter w with circumflex              |\n * | U+0176  | Ŷ     | Y           | Latin capital letter Y with circumflex            |\n * | U+0177  | ŷ     | y           | Latin small letter y with circumflex              |\n * | U+0178  | Ÿ     | Y           | Latin capital letter Y with diaeresis             |\n * | U+0179  | Ź     | Z           | Latin capital letter Z with acute                 |\n * | U+017A  | ź     | z           | Latin small letter z with acute                   |\n * | U+017B  | Ż     | Z           | Latin capital letter Z with dot above             |\n * | U+017C  | ż     | z           | Latin small letter z with dot above               |\n * | U+017D  | Ž     | Z           | Latin capital letter Z with caron                 |\n * | U+017E  | ž     | z           | Latin small letter z with caron                   |\n * | U+017F  | ſ     | s           | Latin small letter long s                         |\n * | U+01A0  | Ơ     | O           | Latin capital letter O with horn                  |\n * | U+01A1  | ơ     | o           | Latin small letter o with horn                    |\n * | U+01AF  | Ư     | U           | Latin capital letter U with horn                  |\n * | U+01B0  | ư     | u           | Latin small letter u with horn                    |\n * | U+01CD  | Ǎ     | A           | Latin capital letter A with caron                 |\n * | U+01CE  | ǎ     | a           | Latin small letter a with caron                   |\n * | U+01CF  | Ǐ     | I           | Latin capital letter I with caron                 |\n * | U+01D0  | ǐ     | i           | Latin small letter i with caron                   |\n * | U+01D1  | Ǒ     | O           | Latin capital letter O with caron                 |\n * | U+01D2  | ǒ     | o           | Latin small letter o with caron                   |\n * | U+01D3  | Ǔ     | U           | Latin capital letter U with caron                 |\n * | U+01D4  | ǔ     | u           | Latin small letter u with caron                   |\n * | U+01D5  | Ǖ     | U           | Latin capital letter U with diaeresis and macron  |\n * | U+01D6  | ǖ     | u           | Latin small letter u with diaeresis and macron    |\n * | U+01D7  | Ǘ     | U           | Latin capital letter U with diaeresis and acute   |\n * | U+01D8  | ǘ     | u           | Latin small letter u with diaeresis and acute     |\n * | U+01D9  | Ǚ     | U           | Latin capital letter U with diaeresis and caron   |\n * | U+01DA  | ǚ     | u           | Latin small letter u with diaeresis and caron     |\n * | U+01DB  | Ǜ     | U           | Latin capital letter U with diaeresis and grave   |\n * | U+01DC  | ǜ     | u           | Latin small letter u with diaeresis and grave     |\n *\n * Decompositions for Latin Extended-B:\n *\n * |   Code   | Glyph | Replacement |                Description                |\n * | -------- | ----- | ----------- | ----------------------------------------- |\n * | U+0218   | Ș     | S           | Latin capital letter S with comma below   |\n * | U+0219   | ș     | s           | Latin small letter s with comma below     |\n * | U+021A   | Ț     | T           | Latin capital letter T with comma below   |\n * | U+021B   | ț     | t           | Latin small letter t with comma below     |\n *\n * Vowels with diacritic (Chinese, Hanyu Pinyin):\n *\n * |   Code   | Glyph | Replacement |                      Description                      |\n * | -------- | ----- | ----------- | ----------------------------------------------------- |\n * | U+0251   | ɑ     | a           | Latin small letter alpha                              |\n * | U+1EA0   | Ạ     | A           | Latin capital letter A with dot below                 |\n * | U+1EA1   | ạ     | a           | Latin small letter a with dot below                   |\n * | U+1EA2   | Ả     | A           | Latin capital letter A with hook above                |\n * | U+1EA3   | ả     | a           | Latin small letter a with hook above                  |\n * | U+1EA4   | Ấ     | A           | Latin capital letter A with circumflex and acute      |\n * | U+1EA5   | ấ     | a           | Latin small letter a with circumflex and acute        |\n * | U+1EA6   | Ầ     | A           | Latin capital letter A with circumflex and grave      |\n * | U+1EA7   | ầ     | a           | Latin small letter a with circumflex and grave        |\n * | U+1EA8   | Ẩ     | A           | Latin capital letter A with circumflex and hook above |\n * | U+1EA9   | ẩ     | a           | Latin small letter a with circumflex and hook above   |\n * | U+1EAA   | Ẫ     | A           | Latin capital letter A with circumflex and tilde      |\n * | U+1EAB   | ẫ     | a           | Latin small letter a with circumflex and tilde        |\n * | U+1EA6   | Ậ     | A           | Latin capital letter A with circumflex and dot below  |\n * | U+1EAD   | ậ     | a           | Latin small letter a with circumflex and dot below    |\n * | U+1EAE   | Ắ     | A           | Latin capital letter A with breve and acute           |\n * | U+1EAF   | ắ     | a           | Latin small letter a with breve and acute             |\n * | U+1EB0   | Ằ     | A           | Latin capital letter A with breve and grave           |\n * | U+1EB1   | ằ     | a           | Latin small letter a with breve and grave             |\n * | U+1EB2   | Ẳ     | A           | Latin capital letter A with breve and hook above      |\n * | U+1EB3   | ẳ     | a           | Latin small letter a with breve and hook above        |\n * | U+1EB4   | Ẵ     | A           | Latin capital letter A with breve and tilde           |\n * | U+1EB5   | ẵ     | a           | Latin small letter a with breve and tilde             |\n * | U+1EB6   | Ặ     | A           | Latin capital letter A with breve and dot below       |\n * | U+1EB7   | ặ     | a           | Latin small letter a with breve and dot below         |\n * | U+1EB8   | Ẹ     | E           | Latin capital letter E with dot below                 |\n * | U+1EB9   | ẹ     | e           | Latin small letter e with dot below                   |\n * | U+1EBA   | Ẻ     | E           | Latin capital letter E with hook above                |\n * | U+1EBB   | ẻ     | e           | Latin small letter e with hook above                  |\n * | U+1EBC   | Ẽ     | E           | Latin capital letter E with tilde                     |\n * | U+1EBD   | ẽ     | e           | Latin small letter e with tilde                       |\n * | U+1EBE   | Ế     | E           | Latin capital letter E with circumflex and acute      |\n * | U+1EBF   | ế     | e           | Latin small letter e with circumflex and acute        |\n * | U+1EC0   | Ề     | E           | Latin capital letter E with circumflex and grave      |\n * | U+1EC1   | ề     | e           | Latin small letter e with circumflex and grave        |\n * | U+1EC2   | Ể     | E           | Latin capital letter E with circumflex and hook above |\n * | U+1EC3   | ể     | e           | Latin small letter e with circumflex and hook above   |\n * | U+1EC4   | Ễ     | E           | Latin capital letter E with circumflex and tilde      |\n * | U+1EC5   | ễ     | e           | Latin small letter e with circumflex and tilde        |\n * | U+1EC6   | Ệ     | E           | Latin capital letter E with circumflex and dot below  |\n * | U+1EC7   | ệ     | e           | Latin small letter e with circumflex and dot below    |\n * | U+1EC8   | Ỉ     | I           | Latin capital letter I with hook above                |\n * | U+1EC9   | ỉ     | i           | Latin small letter i with hook above                  |\n * | U+1ECA   | Ị     | I           | Latin capital letter I with dot below                 |\n * | U+1ECB   | ị     | i           | Latin small letter i with dot below                   |\n * | U+1ECC   | Ọ     | O           | Latin capital letter O with dot below                 |\n * | U+1ECD   | ọ     | o           | Latin small letter o with dot below                   |\n * | U+1ECE   | Ỏ     | O           | Latin capital letter O with hook above                |\n * | U+1ECF   | ỏ     | o           | Latin small letter o with hook above                  |\n * | U+1ED0   | Ố     | O           | Latin capital letter O with circumflex and acute      |\n * | U+1ED1   | ố     | o           | Latin small letter o with circumflex and acute        |\n * | U+1ED2   | Ồ     | O           | Latin capital letter O with circumflex and grave      |\n * | U+1ED3   | ồ     | o           | Latin small letter o with circumflex and grave        |\n * | U+1ED4   | Ổ     | O           | Latin capital letter O with circumflex and hook above |\n * | U+1ED5   | ổ     | o           | Latin small letter o with circumflex and hook above   |\n * | U+1ED6   | Ỗ     | O           | Latin capital letter O with circumflex and tilde      |\n * | U+1ED7   | ỗ     | o           | Latin small letter o with circumflex and tilde        |\n * | U+1ED8   | Ộ     | O           | Latin capital letter O with circumflex and dot below  |\n * | U+1ED9   | ộ     | o           | Latin small letter o with circumflex and dot below    |\n * | U+1EDA   | Ớ     | O           | Latin capital letter O with horn and acute            |\n * | U+1EDB   | ớ     | o           | Latin small letter o with horn and acute              |\n * | U+1EDC   | Ờ     | O           | Latin capital letter O with horn and grave            |\n * | U+1EDD   | ờ     | o           | Latin small letter o with horn and grave              |\n * | U+1EDE   | Ở     | O           | Latin capital letter O with horn and hook above       |\n * | U+1EDF   | ở     | o           | Latin small letter o with horn and hook above         |\n * | U+1EE0   | Ỡ     | O           | Latin capital letter O with horn and tilde            |\n * | U+1EE1   | ỡ     | o           | Latin small letter o with horn and tilde              |\n * | U+1EE2   | Ợ     | O           | Latin capital letter O with horn and dot below        |\n * | U+1EE3   | ợ     | o           | Latin small letter o with horn and dot below          |\n * | U+1EE4   | Ụ     | U           | Latin capital letter U with dot below                 |\n * | U+1EE5   | ụ     | u           | Latin small letter u with dot below                   |\n * | U+1EE6   | Ủ     | U           | Latin capital letter U with hook above                |\n * | U+1EE7   | ủ     | u           | Latin small letter u with hook above                  |\n * | U+1EE8   | Ứ     | U           | Latin capital letter U with horn and acute            |\n * | U+1EE9   | ứ     | u           | Latin small letter u with horn and acute              |\n * | U+1EEA   | Ừ     | U           | Latin capital letter U with horn and grave            |\n * | U+1EEB   | ừ     | u           | Latin small letter u with horn and grave              |\n * | U+1EEC   | Ử     | U           | Latin capital letter U with horn and hook above       |\n * | U+1EED   | ử     | u           | Latin small letter u with horn and hook above         |\n * | U+1EEE   | Ữ     | U           | Latin capital letter U with horn and tilde            |\n * | U+1EEF   | ữ     | u           | Latin small letter u with horn and tilde              |\n * | U+1EF0   | Ự     | U           | Latin capital letter U with horn and dot below        |\n * | U+1EF1   | ự     | u           | Latin small letter u with horn and dot below          |\n * | U+1EF2   | Ỳ     | Y           | Latin capital letter Y with grave                     |\n * | U+1EF3   | ỳ     | y           | Latin small letter y with grave                       |\n * | U+1EF4   | Ỵ     | Y           | Latin capital letter Y with dot below                 |\n * | U+1EF5   | ỵ     | y           | Latin small letter y with dot below                   |\n * | U+1EF6   | Ỷ     | Y           | Latin capital letter Y with hook above                |\n * | U+1EF7   | ỷ     | y           | Latin small letter y with hook above                  |\n * | U+1EF8   | Ỹ     | Y           | Latin capital letter Y with tilde                     |\n * | U+1EF9   | ỹ     | y           | Latin small letter y with tilde                       |\n */\n// Currency signs:\n{ letter: /[\\u00A3]/g, alternative: \"\" }, { letter: /[\\u20AC]/g, alternative: \"E\" },\n// Decompositions for Latin-1 Supplement:\n{ letter: /[\\u00AA]/g, alternative: \"a\" }, { letter: /[\\u00BA]/g, alternative: \"o\" }, { letter: /[\\u00C0]/g, alternative: \"A\" }, { letter: /[\\u00C1]/g, alternative: \"A\" }, { letter: /[\\u00C2]/g, alternative: \"A\" }, { letter: /[\\u00C3]/g, alternative: \"A\" }, { letter: /[\\u00C4]/g, alternative: \"A\" }, { letter: /[\\u00C5]/g, alternative: \"A\" }, { letter: /[\\u00C6]/g, alternative: \"AE\" }, { letter: /[\\u00C7]/g, alternative: \"C\" }, { letter: /[\\u00C8]/g, alternative: \"E\" }, { letter: /[\\u00C9]/g, alternative: \"E\" }, { letter: /[\\u00CA]/g, alternative: \"E\" }, { letter: /[\\u00CB]/g, alternative: \"E\" }, { letter: /[\\u00CC]/g, alternative: \"I\" }, { letter: /[\\u00CD]/g, alternative: \"I\" }, { letter: /[\\u00CE]/g, alternative: \"I\" }, { letter: /[\\u00CF]/g, alternative: \"I\" }, { letter: /[\\u00D0]/g, alternative: \"D\" }, { letter: /[\\u00D1]/g, alternative: \"N\" }, { letter: /[\\u00D2]/g, alternative: \"O\" }, { letter: /[\\u00D3]/g, alternative: \"O\" }, { letter: /[\\u00D4]/g, alternative: \"O\" }, { letter: /[\\u00D5]/g, alternative: \"O\" }, { letter: /[\\u00D6]/g, alternative: \"O\" }, { letter: /[\\u00D8]/g, alternative: \"O\" }, { letter: /[\\u00D9]/g, alternative: \"U\" }, { letter: /[\\u00DA]/g, alternative: \"U\" }, { letter: /[\\u00DB]/g, alternative: \"U\" }, { letter: /[\\u00DC]/g, alternative: \"U\" }, { letter: /[\\u00DD]/g, alternative: \"Y\" }, { letter: /[\\u00DE]/g, alternative: \"TH\" }, { letter: /[\\u00DF]/g, alternative: \"s\" }, { letter: /[\\u00E0]/g, alternative: \"a\" }, { letter: /[\\u00E1]/g, alternative: \"a\" }, { letter: /[\\u00E2]/g, alternative: \"a\" }, { letter: /[\\u00E3]/g, alternative: \"a\" }, { letter: /[\\u00E4]/g, alternative: \"a\" }, { letter: /[\\u00E5]/g, alternative: \"a\" }, { letter: /[\\u00E6]/g, alternative: \"ae\" }, { letter: /[\\u00E7]/g, alternative: \"c\" }, { letter: /[\\u00E8]/g, alternative: \"e\" }, { letter: /[\\u00E9]/g, alternative: \"e\" }, { letter: /[\\u00EA]/g, alternative: \"e\" }, { letter: /[\\u00EB]/g, alternative: \"e\" }, { letter: /[\\u00EC]/g, alternative: \"i\" }, { letter: /[\\u00ED]/g, alternative: \"i\" }, { letter: /[\\u00EE]/g, alternative: \"i\" }, { letter: /[\\u00EF]/g, alternative: \"i\" }, { letter: /[\\u00F0]/g, alternative: \"d\" }, { letter: /[\\u00F1]/g, alternative: \"n\" }, { letter: /[\\u00F2]/g, alternative: \"o\" }, { letter: /[\\u00F3]/g, alternative: \"o\" }, { letter: /[\\u00F4]/g, alternative: \"o\" }, { letter: /[\\u00F5]/g, alternative: \"o\" }, { letter: /[\\u00F6]/g, alternative: \"o\" }, { letter: /[\\u00F8]/g, alternative: \"o\" }, { letter: /[\\u00F9]/g, alternative: \"u\" }, { letter: /[\\u00FA]/g, alternative: \"u\" }, { letter: /[\\u00FB]/g, alternative: \"u\" }, { letter: /[\\u00FC]/g, alternative: \"u\" }, { letter: /[\\u00FD]/g, alternative: \"y\" }, { letter: /[\\u00FE]/g, alternative: \"th\" }, { letter: /[\\u00FF]/g, alternative: \"y\" },\n// Decompositions for Latin Extended-A:\n{ letter: /[\\u0100]/g, alternative: \"A\" }, { letter: /[\\u0101]/g, alternative: \"a\" }, { letter: /[\\u0102]/g, alternative: \"A\" }, { letter: /[\\u0103]/g, alternative: \"a\" }, { letter: /[\\u0104]/g, alternative: \"A\" }, { letter: /[\\u0105]/g, alternative: \"a\" }, { letter: /[\\u0106]/g, alternative: \"C\" }, { letter: /[\\u0107]/g, alternative: \"c\" }, { letter: /[\\u0108]/g, alternative: \"C\" }, { letter: /[\\u0109]/g, alternative: \"c\" }, { letter: /[\\u010A]/g, alternative: \"C\" }, { letter: /[\\u010B]/g, alternative: \"c\" }, { letter: /[\\u010C]/g, alternative: \"C\" }, { letter: /[\\u010D]/g, alternative: \"c\" }, { letter: /[\\u010E]/g, alternative: \"D\" }, { letter: /[\\u010F]/g, alternative: \"d\" }, { letter: /[\\u0110]/g, alternative: \"D\" }, { letter: /[\\u0111]/g, alternative: \"d\" }, { letter: /[\\u0112]/g, alternative: \"E\" }, { letter: /[\\u0113]/g, alternative: \"e\" }, { letter: /[\\u0114]/g, alternative: \"E\" }, { letter: /[\\u0115]/g, alternative: \"e\" }, { letter: /[\\u0116]/g, alternative: \"E\" }, { letter: /[\\u0117]/g, alternative: \"e\" }, { letter: /[\\u0118]/g, alternative: \"E\" }, { letter: /[\\u0119]/g, alternative: \"e\" }, { letter: /[\\u011A]/g, alternative: \"E\" }, { letter: /[\\u011B]/g, alternative: \"e\" }, { letter: /[\\u011C]/g, alternative: \"G\" }, { letter: /[\\u011D]/g, alternative: \"g\" }, { letter: /[\\u011E]/g, alternative: \"G\" }, { letter: /[\\u011F]/g, alternative: \"g\" }, { letter: /[\\u0120]/g, alternative: \"G\" }, { letter: /[\\u0121]/g, alternative: \"g\" }, { letter: /[\\u0122]/g, alternative: \"G\" }, { letter: /[\\u0123]/g, alternative: \"g\" }, { letter: /[\\u0124]/g, alternative: \"H\" }, { letter: /[\\u0125]/g, alternative: \"h\" }, { letter: /[\\u0126]/g, alternative: \"H\" }, { letter: /[\\u0127]/g, alternative: \"h\" }, { letter: /[\\u0128]/g, alternative: \"I\" }, { letter: /[\\u0129]/g, alternative: \"i\" }, { letter: /[\\u012A]/g, alternative: \"I\" }, { letter: /[\\u012B]/g, alternative: \"i\" }, { letter: /[\\u012C]/g, alternative: \"I\" }, { letter: /[\\u012D]/g, alternative: \"i\" }, { letter: /[\\u012E]/g, alternative: \"I\" }, { letter: /[\\u012F]/g, alternative: \"i\" }, { letter: /[\\u0130]/g, alternative: \"I\" }, { letter: /[\\u0131]/g, alternative: \"i\" }, { letter: /[\\u0132]/g, alternative: \"IJ\" }, { letter: /[\\u0133]/g, alternative: \"ij\" }, { letter: /[\\u0134]/g, alternative: \"J\" }, { letter: /[\\u0135]/g, alternative: \"j\" }, { letter: /[\\u0136]/g, alternative: \"K\" }, { letter: /[\\u0137]/g, alternative: \"k\" }, { letter: /[\\u0138]/g, alternative: \"k\" }, { letter: /[\\u0139]/g, alternative: \"L\" }, { letter: /[\\u013A]/g, alternative: \"l\" }, { letter: /[\\u013B]/g, alternative: \"L\" }, { letter: /[\\u013C]/g, alternative: \"l\" }, { letter: /[\\u013D]/g, alternative: \"L\" }, { letter: /[\\u013E]/g, alternative: \"l\" }, { letter: /[\\u013F]/g, alternative: \"L\" }, { letter: /[\\u0140]/g, alternative: \"l\" }, { letter: /[\\u0141]/g, alternative: \"L\" }, { letter: /[\\u0142]/g, alternative: \"l\" }, { letter: /[\\u0143]/g, alternative: \"N\" }, { letter: /[\\u0144]/g, alternative: \"n\" }, { letter: /[\\u0145]/g, alternative: \"N\" }, { letter: /[\\u0146]/g, alternative: \"n\" }, { letter: /[\\u0147]/g, alternative: \"N\" }, { letter: /[\\u0148]/g, alternative: \"n\" }, { letter: /[\\u0149]/g, alternative: \"n\" }, { letter: /[\\u014A]/g, alternative: \"N\" }, { letter: /[\\u014B]/g, alternative: \"n\" }, { letter: /[\\u014C]/g, alternative: \"O\" }, { letter: /[\\u014D]/g, alternative: \"o\" }, { letter: /[\\u014E]/g, alternative: \"O\" }, { letter: /[\\u014F]/g, alternative: \"o\" }, { letter: /[\\u0150]/g, alternative: \"O\" }, { letter: /[\\u0151]/g, alternative: \"o\" }, { letter: /[\\u0152]/g, alternative: \"OE\" }, { letter: /[\\u0153]/g, alternative: \"oe\" }, { letter: /[\\u0154]/g, alternative: \"R\" }, { letter: /[\\u0155]/g, alternative: \"r\" }, { letter: /[\\u0156]/g, alternative: \"R\" }, { letter: /[\\u0157]/g, alternative: \"r\" }, { letter: /[\\u0158]/g, alternative: \"R\" }, { letter: /[\\u0159]/g, alternative: \"r\" }, { letter: /[\\u015A]/g, alternative: \"S\" }, { letter: /[\\u015B]/g, alternative: \"s\" }, { letter: /[\\u015C]/g, alternative: \"S\" }, { letter: /[\\u015D]/g, alternative: \"s\" }, { letter: /[\\u015E]/g, alternative: \"S\" }, { letter: /[\\u015F]/g, alternative: \"s\" }, { letter: /[\\u0160]/g, alternative: \"S\" }, { letter: /[\\u0161]/g, alternative: \"s\" }, { letter: /[\\u0162]/g, alternative: \"T\" }, { letter: /[\\u0163]/g, alternative: \"t\" }, { letter: /[\\u0164]/g, alternative: \"T\" }, { letter: /[\\u0165]/g, alternative: \"t\" }, { letter: /[\\u0166]/g, alternative: \"T\" }, { letter: /[\\u0167]/g, alternative: \"t\" }, { letter: /[\\u0168]/g, alternative: \"U\" }, { letter: /[\\u0169]/g, alternative: \"u\" }, { letter: /[\\u016A]/g, alternative: \"U\" }, { letter: /[\\u016B]/g, alternative: \"u\" }, { letter: /[\\u016C]/g, alternative: \"U\" }, { letter: /[\\u016D]/g, alternative: \"u\" }, { letter: /[\\u016E]/g, alternative: \"U\" }, { letter: /[\\u016F]/g, alternative: \"u\" }, { letter: /[\\u0170]/g, alternative: \"U\" }, { letter: /[\\u0171]/g, alternative: \"u\" }, { letter: /[\\u0172]/g, alternative: \"U\" }, { letter: /[\\u0173]/g, alternative: \"u\" }, { letter: /[\\u0174]/g, alternative: \"W\" }, { letter: /[\\u0175]/g, alternative: \"w\" }, { letter: /[\\u0176]/g, alternative: \"Y\" }, { letter: /[\\u0177]/g, alternative: \"y\" }, { letter: /[\\u0178]/g, alternative: \"Y\" }, { letter: /[\\u0179]/g, alternative: \"Z\" }, { letter: /[\\u017A]/g, alternative: \"z\" }, { letter: /[\\u017B]/g, alternative: \"Z\" }, { letter: /[\\u017C]/g, alternative: \"z\" }, { letter: /[\\u017D]/g, alternative: \"Z\" }, { letter: /[\\u017E]/g, alternative: \"z\" }, { letter: /[\\u017F]/g, alternative: \"s\" }, { letter: /[\\u01A0]/g, alternative: \"O\" }, { letter: /[\\u01A1]/g, alternative: \"o\" }, { letter: /[\\u01AF]/g, alternative: \"U\" }, { letter: /[\\u01B0]/g, alternative: \"u\" }, { letter: /[\\u01CD]/g, alternative: \"A\" }, { letter: /[\\u01CE]/g, alternative: \"a\" }, { letter: /[\\u01CF]/g, alternative: \"I\" }, { letter: /[\\u01D0]/g, alternative: \"i\" }, { letter: /[\\u01D1]/g, alternative: \"O\" }, { letter: /[\\u01D2]/g, alternative: \"o\" }, { letter: /[\\u01D3]/g, alternative: \"U\" }, { letter: /[\\u01D4]/g, alternative: \"u\" }, { letter: /[\\u01D5]/g, alternative: \"U\" }, { letter: /[\\u01D6]/g, alternative: \"u\" }, { letter: /[\\u01D7]/g, alternative: \"U\" }, { letter: /[\\u01D8]/g, alternative: \"u\" }, { letter: /[\\u01D9]/g, alternative: \"U\" }, { letter: /[\\u01DA]/g, alternative: \"u\" }, { letter: /[\\u01DB]/g, alternative: \"U\" }, { letter: /[\\u01DC]/g, alternative: \"u\" },\n// Decompositions for Latin Extended-B:\n{ letter: /[\\u0218]/g, alternative: \"S\" }, { letter: /[\\u0219]/g, alternative: \"s\" }, { letter: /[\\u021A]/g, alternative: \"T\" }, { letter: /[\\u021B]/g, alternative: \"t\" },\n// Vowels with diacritic (Chinese, Hanyu Pinyin):\n{ letter: /[\\u0251]/g, alternative: \"a\" }, { letter: /[\\u1EA0]/g, alternative: \"A\" }, { letter: /[\\u1EA1]/g, alternative: \"a\" }, { letter: /[\\u1EA2]/g, alternative: \"A\" }, { letter: /[\\u1EA3]/g, alternative: \"a\" }, { letter: /[\\u1EA4]/g, alternative: \"A\" }, { letter: /[\\u1EA5]/g, alternative: \"a\" }, { letter: /[\\u1EA6]/g, alternative: \"A\" }, { letter: /[\\u1EA7]/g, alternative: \"a\" }, { letter: /[\\u1EA8]/g, alternative: \"A\" }, { letter: /[\\u1EA9]/g, alternative: \"a\" }, { letter: /[\\u1EAA]/g, alternative: \"A\" }, { letter: /[\\u1EAB]/g, alternative: \"a\" }, { letter: /[\\u1EA6]/g, alternative: \"A\" }, { letter: /[\\u1EAD]/g, alternative: \"a\" }, { letter: /[\\u1EAE]/g, alternative: \"A\" }, { letter: /[\\u1EAF]/g, alternative: \"a\" }, { letter: /[\\u1EB0]/g, alternative: \"A\" }, { letter: /[\\u1EB1]/g, alternative: \"a\" }, { letter: /[\\u1EB2]/g, alternative: \"A\" }, { letter: /[\\u1EB3]/g, alternative: \"a\" }, { letter: /[\\u1EB4]/g, alternative: \"A\" }, { letter: /[\\u1EB5]/g, alternative: \"a\" }, { letter: /[\\u1EB6]/g, alternative: \"A\" }, { letter: /[\\u1EB7]/g, alternative: \"a\" }, { letter: /[\\u1EB8]/g, alternative: \"E\" }, { letter: /[\\u1EB9]/g, alternative: \"e\" }, { letter: /[\\u1EBA]/g, alternative: \"E\" }, { letter: /[\\u1EBB]/g, alternative: \"e\" }, { letter: /[\\u1EBC]/g, alternative: \"E\" }, { letter: /[\\u1EBD]/g, alternative: \"e\" }, { letter: /[\\u1EBE]/g, alternative: \"E\" }, { letter: /[\\u1EBF]/g, alternative: \"e\" }, { letter: /[\\u1EC0]/g, alternative: \"E\" }, { letter: /[\\u1EC1]/g, alternative: \"e\" }, { letter: /[\\u1EC2]/g, alternative: \"E\" }, { letter: /[\\u1EC3]/g, alternative: \"e\" }, { letter: /[\\u1EC4]/g, alternative: \"E\" }, { letter: /[\\u1EC5]/g, alternative: \"e\" }, { letter: /[\\u1EC6]/g, alternative: \"E\" }, { letter: /[\\u1EC7]/g, alternative: \"e\" }, { letter: /[\\u1EC8]/g, alternative: \"I\" }, { letter: /[\\u1EC9]/g, alternative: \"i\" }, { letter: /[\\u1ECA]/g, alternative: \"I\" }, { letter: /[\\u1ECB]/g, alternative: \"i\" }, { letter: /[\\u1ECC]/g, alternative: \"O\" }, { letter: /[\\u1ECD]/g, alternative: \"o\" }, { letter: /[\\u1ECE]/g, alternative: \"O\" }, { letter: /[\\u1ECF]/g, alternative: \"o\" }, { letter: /[\\u1ED0]/g, alternative: \"O\" }, { letter: /[\\u1ED1]/g, alternative: \"o\" }, { letter: /[\\u1ED2]/g, alternative: \"O\" }, { letter: /[\\u1ED3]/g, alternative: \"o\" }, { letter: /[\\u1ED4]/g, alternative: \"O\" }, { letter: /[\\u1ED5]/g, alternative: \"o\" }, { letter: /[\\u1ED6]/g, alternative: \"O\" }, { letter: /[\\u1ED7]/g, alternative: \"o\" }, { letter: /[\\u1ED8]/g, alternative: \"O\" }, { letter: /[\\u1ED9]/g, alternative: \"o\" }, { letter: /[\\u1EDA]/g, alternative: \"O\" }, { letter: /[\\u1EDB]/g, alternative: \"o\" }, { letter: /[\\u1EDC]/g, alternative: \"O\" }, { letter: /[\\u1EDD]/g, alternative: \"o\" }, { letter: /[\\u1EDE]/g, alternative: \"O\" }, { letter: /[\\u1EDF]/g, alternative: \"o\" }, { letter: /[\\u1EE0]/g, alternative: \"O\" }, { letter: /[\\u1EE1]/g, alternative: \"o\" }, { letter: /[\\u1EE2]/g, alternative: \"O\" }, { letter: /[\\u1EE3]/g, alternative: \"o\" }, { letter: /[\\u1EE4]/g, alternative: \"U\" }, { letter: /[\\u1EE5]/g, alternative: \"u\" }, { letter: /[\\u1EE6]/g, alternative: \"U\" }, { letter: /[\\u1EE7]/g, alternative: \"u\" }, { letter: /[\\u1EE8]/g, alternative: \"U\" }, { letter: /[\\u1EE9]/g, alternative: \"u\" }, { letter: /[\\u1EEA]/g, alternative: \"U\" }, { letter: /[\\u1EEB]/g, alternative: \"u\" }, { letter: /[\\u1EEC]/g, alternative: \"U\" }, { letter: /[\\u1EED]/g, alternative: \"u\" }, { letter: /[\\u1EEE]/g, alternative: \"U\" }, { letter: /[\\u1EEF]/g, alternative: \"u\" }, { letter: /[\\u1EF0]/g, alternative: \"U\" }, { letter: /[\\u1EF1]/g, alternative: \"u\" }, { letter: /[\\u1EF2]/g, alternative: \"Y\" }, { letter: /[\\u1EF3]/g, alternative: \"y\" }, { letter: /[\\u1EF4]/g, alternative: \"Y\" }, { letter: /[\\u1EF5]/g, alternative: \"y\" }, { letter: /[\\u1EF6]/g, alternative: \"Y\" }, { letter: /[\\u1EF7]/g, alternative: \"y\" }, { letter: /[\\u1EF8]/g, alternative: \"Y\" }, { letter: /[\\u1EF9]/g, alternative: \"y\" }];\nvar transliterationsPerLanguage = {\n    /*\n     * Language: German.\n     * |   Code   | Glyph | Replacement |               Description               |\n     * | -------- | ----- | ----------- | --------------------------------------- |\n     * | U+00C4   | Ä     | Ae          | Latin capital letter A with diaeresis   |\n     * | U+00E4   | ä     | ae          | Latin small letter a with diaeresis     |\n     * | U+00D6   | Ö     | Oe          | Latin capital letter O with diaeresis   |\n     * | U+00F6   | ö     | oe          | Latin small letter o with diaeresis     |\n     * | U+00DC   | Ü     | Ue          | Latin capital letter U with diaeresis   |\n     * | U+00FC   | ü     | ue          | Latin small letter u with diaeresis     |\n     * | U+1E9E   | ẞ     | ss          | Latin big letter sharp s                | This letter is not in the original WP list, was added for consistency.\n     * | U+00DF   | ß     | ss          | Latin small letter sharp s              |\n     */\n    de: [{ letter: /[\\u00C4]/g, alternative: \"Ae\" }, { letter: /[\\u00E4]/g, alternative: \"ae\" }, { letter: /[\\u00D6]/g, alternative: \"Oe\" }, { letter: /[\\u00F6]/g, alternative: \"oe\" }, { letter: /[\\u00DC]/g, alternative: \"Ue\" }, { letter: /[\\u00FC]/g, alternative: \"ue\" }, { letter: /[\\u1E9E]/g, alternative: \"SS\" }, { letter: /[\\u00DF]/g, alternative: \"ss\" }],\n    /*\n     * Language: Danish.\n     * |   Code   | Glyph | Replacement |               Description               |\n     * | -------- | ----- | ----------- | --------------------------------------- |\n     * | U+00C6   | Æ     | Ae          | Latin capital letter AE                 |\n     * | U+00E6   | æ     | ae          | Latin small letter ae                   |\n     * | U+00D8   | Ø     | Oe          | Latin capital letter O with stroke      |\n     * | U+00F8   | ø     | oe          | Latin small letter o with stroke        |\n     * | U+00C5   | Å     | Aa          | Latin capital letter A with ring above  |\n     * | U+00E5   | å     | aa          | Latin small letter a with ring above    |\n     */\n    da: [{ letter: /[\\u00C6]/g, alternative: \"Ae\" }, { letter: /[\\u00E6]/g, alternative: \"ae\" }, { letter: /[\\u00D8]/g, alternative: \"Oe\" }, { letter: /[\\u00F8]/g, alternative: \"oe\" }, { letter: /[\\u00C5]/g, alternative: \"Aa\" }, { letter: /[\\u00E5]/g, alternative: \"aa\" }],\n    /*\n     * Language: Catalan.\n     * |   Code   | Glyph | Replacement |               Description               |\n     * | -------- | ----- | ----------- | --------------------------------------- |\n     * | U+00B7   | l·l   | ll          | Flown dot (between two Ls)              |\n     */\n    ca: [{ letter: /[\\u00B7]/g, alternative: \"ll\" }],\n    /*\n     * Language: Serbian and Bosnian.\n     * |   Code   | Glyph | Replacement |               Description               |\n     * | -------- | ----- | ----------- | --------------------------------------- |\n     * | U+0110   | Đ     | DJ          | Latin capital letter D with stroke      |\n     * | U+0111   | đ     | dj          | Latin small letter d with stroke        |\n     */\n    srAndBs: [{ letter: /[\\u0110]/g, alternative: \"DJ\" }, { letter: /[\\u0111]/g, alternative: \"dj\" }]\n};\n/**\n * The function returning an array containing transliteration objects if those were specified for a given language.\n *\n * @param {string} language The language to return transliterations for.\n *\n * @returns {Array} An array containing language-specific transliteration objects.\n */\nvar getLanguageSpecificTransliterations = function getLanguageSpecificTransliterations(language) {\n    switch (language) {\n        case \"de\":\n            return transliterationsPerLanguage.de;\n        case \"da\":\n            return transliterationsPerLanguage.da;\n        case \"ca\":\n            return transliterationsPerLanguage.ca;\n        case \"sr\":\n            return transliterationsPerLanguage.srAndBs;\n        case \"bs\":\n            return transliterationsPerLanguage.srAndBs;\n        default:\n            return [];\n    }\n};\n/**\n * The function returning an array containing transliteration objects, based on the given locale, both language-specific and general.\n *\n * @param {string} locale The locale.\n *\n * @returns {Array} An array containing transliteration objects.\n */\nmodule.exports = function (locale) {\n    if (isUndefined(locale)) {\n        return [];\n    }\n    var transliterationObjects = transliterationsGeneral;\n    transliterationObjects = transliterationObjects.concat(getLanguageSpecificTransliterations(getLanguage(locale)));\n    return transliterationObjects;\n};\n//# sourceMappingURL=transliterationsWPstyle.js.map\n//# sourceMappingURL=transliterationsWPstyle.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/transliterationsWPstyle.js\n// module id = 1376\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/transliterationsWPstyle.js?");

/***/ }),
/* 1377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcess/getLinkType */\n\nvar urlHelper = __webpack_require__(1096);\n/**\n * Determines the type of link.\n *\n * @param {string} text String with anchor tag.\n * @param {string} url URL to match against.\n * @returns {string} The link type (other, external or internal).\n */\nmodule.exports = function (text, url) {\n    var anchorUrl = urlHelper.getFromAnchorTag(text);\n    /**\n     * A link is \"Other\" if:\n     * - The protocol is neither null, nor http, nor https.\n     * - The link is a relative fragment URL (starts with #), because it won't navigate to another page.\n     */\n    var protocol = urlHelper.getProtocol(anchorUrl);\n    if (protocol && !urlHelper.protocolIsHttpScheme(protocol) || urlHelper.isRelativeFragmentURL(anchorUrl)) {\n        return \"other\";\n    }\n    if (urlHelper.isInternalLink(anchorUrl, urlHelper.getHostname(url))) {\n        return \"internal\";\n    }\n    return \"external\";\n};\n//# sourceMappingURL=getLinkType.js.map\n//# sourceMappingURL=getLinkType.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getLinkType.js\n// module id = 1377\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getLinkType.js?");

/***/ }),
/* 1378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/checkNofollow */\n// We use an external library, which can be found here: https://github.com/fb55/htmlparser2.\n\nvar htmlparser = __webpack_require__(403);\n/**\n * Checks if a link has a `rel` attribute with a `nofollow` value. If it has, returns Nofollow, otherwise Dofollow.\n *\n * @param {string} anchorHTML The anchor HTML to check against.\n * @returns {string} Returns Dofollow or Nofollow.\n */\nmodule.exports = function (anchorHTML) {\n    var linkFollow = \"Dofollow\";\n    var parser = new htmlparser.Parser({\n        /**\n         * Detects if there is a `nofollow` value in the `rel` attribute of a link.\n         *\n         * @param {string} tagName The tag name.\n         * @param {object} attributes The tag attributes with the names and values of each attribute found.\n         * @returns {void}\n         */\n        onopentag: function onopentag(tagName, attributes) {\n            if (tagName !== \"a\" || !attributes.rel) {\n                return;\n            }\n            if (attributes.rel.toLowerCase().split(/\\s/).includes(\"nofollow\")) {\n                linkFollow = \"Nofollow\";\n            }\n        }\n    });\n    parser.write(anchorHTML);\n    parser.end();\n    return linkFollow;\n};\n//# sourceMappingURL=checkNofollow.js.map\n//# sourceMappingURL=checkNofollow.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/checkNofollow.js\n// module id = 1378\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/checkNofollow.js?");

/***/ }),
/* 1379 */
/***/ (function(module, exports) {

eval("module.exports = {\"0\":65533,\"128\":8364,\"130\":8218,\"131\":402,\"132\":8222,\"133\":8230,\"134\":8224,\"135\":8225,\"136\":710,\"137\":8240,\"138\":352,\"139\":8249,\"140\":338,\"142\":381,\"145\":8216,\"146\":8217,\"147\":8220,\"148\":8221,\"149\":8226,\"150\":8211,\"151\":8212,\"152\":732,\"153\":8482,\"154\":353,\"155\":8250,\"156\":339,\"158\":382,\"159\":376}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/decode.json\n// module id = 1379\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/maps/decode.json?");

/***/ }),
/* 1380 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ElementType = __webpack_require__(566);\n\nvar re_whitespace = /\\s+/g;\nvar NodePrototype = __webpack_require__(1220);\nvar ElementPrototype = __webpack_require__(1381);\n\nfunction DomHandler(callback, options, elementCB){\n\tif(typeof callback === \"object\"){\n\t\telementCB = options;\n\t\toptions = callback;\n\t\tcallback = null;\n\t} else if(typeof options === \"function\"){\n\t\telementCB = options;\n\t\toptions = defaultOpts;\n\t}\n\tthis._callback = callback;\n\tthis._options = options || defaultOpts;\n\tthis._elementCB = elementCB;\n\tthis.dom = [];\n\tthis._done = false;\n\tthis._tagStack = [];\n\tthis._parser = this._parser || null;\n}\n\n//default options\nvar defaultOpts = {\n\tnormalizeWhitespace: false, //Replace all whitespace with single spaces\n\twithStartIndices: false, //Add startIndex properties to nodes\n\twithEndIndices: false, //Add endIndex properties to nodes\n};\n\nDomHandler.prototype.onparserinit = function(parser){\n\tthis._parser = parser;\n};\n\n//Resets the handler back to starting state\nDomHandler.prototype.onreset = function(){\n\tDomHandler.call(this, this._callback, this._options, this._elementCB);\n};\n\n//Signals the handler that parsing is done\nDomHandler.prototype.onend = function(){\n\tif(this._done) return;\n\tthis._done = true;\n\tthis._parser = null;\n\tthis._handleCallback(null);\n};\n\nDomHandler.prototype._handleCallback =\nDomHandler.prototype.onerror = function(error){\n\tif(typeof this._callback === \"function\"){\n\t\tthis._callback(error, this.dom);\n\t} else {\n\t\tif(error) throw error;\n\t}\n};\n\nDomHandler.prototype.onclosetag = function(){\n\t//if(this._tagStack.pop().name !== name) this._handleCallback(Error(\"Tagname didn't match!\"));\n\t\n\tvar elem = this._tagStack.pop();\n\n\tif(this._options.withEndIndices){\n\t\telem.endIndex = this._parser.endIndex;\n\t}\n\n\tif(this._elementCB) this._elementCB(elem);\n};\n\nDomHandler.prototype._createDomElement = function(properties){\n\tif (!this._options.withDomLvl1) return properties;\n\n\tvar element;\n\tif (properties.type === \"tag\") {\n\t\telement = Object.create(ElementPrototype);\n\t} else {\n\t\telement = Object.create(NodePrototype);\n\t}\n\n\tfor (var key in properties) {\n\t\tif (properties.hasOwnProperty(key)) {\n\t\t\telement[key] = properties[key];\n\t\t}\n\t}\n\n\treturn element;\n};\n\nDomHandler.prototype._addDomElement = function(element){\n\tvar parent = this._tagStack[this._tagStack.length - 1];\n\tvar siblings = parent ? parent.children : this.dom;\n\tvar previousSibling = siblings[siblings.length - 1];\n\n\telement.next = null;\n\n\tif(this._options.withStartIndices){\n\t\telement.startIndex = this._parser.startIndex;\n\t}\n\tif(this._options.withEndIndices){\n\t\telement.endIndex = this._parser.endIndex;\n\t}\n\n\tif(previousSibling){\n\t\telement.prev = previousSibling;\n\t\tpreviousSibling.next = element;\n\t} else {\n\t\telement.prev = null;\n\t}\n\n\tsiblings.push(element);\n\telement.parent = parent || null;\n};\n\nDomHandler.prototype.onopentag = function(name, attribs){\n\tvar properties = {\n\t\ttype: name === \"script\" ? ElementType.Script : name === \"style\" ? ElementType.Style : ElementType.Tag,\n\t\tname: name,\n\t\tattribs: attribs,\n\t\tchildren: []\n\t};\n\n\tvar element = this._createDomElement(properties);\n\n\tthis._addDomElement(element);\n\n\tthis._tagStack.push(element);\n};\n\nDomHandler.prototype.ontext = function(data){\n\t//the ignoreWhitespace is officially dropped, but for now,\n\t//it's an alias for normalizeWhitespace\n\tvar normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;\n\n\tvar lastTag;\n\n\tif(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){\n\t\tif(normalize){\n\t\t\tlastTag.data = (lastTag.data + data).replace(re_whitespace, \" \");\n\t\t} else {\n\t\t\tlastTag.data += data;\n\t\t}\n\t} else {\n\t\tif(\n\t\t\tthis._tagStack.length &&\n\t\t\t(lastTag = this._tagStack[this._tagStack.length - 1]) &&\n\t\t\t(lastTag = lastTag.children[lastTag.children.length - 1]) &&\n\t\t\tlastTag.type === ElementType.Text\n\t\t){\n\t\t\tif(normalize){\n\t\t\t\tlastTag.data = (lastTag.data + data).replace(re_whitespace, \" \");\n\t\t\t} else {\n\t\t\t\tlastTag.data += data;\n\t\t\t}\n\t\t} else {\n\t\t\tif(normalize){\n\t\t\t\tdata = data.replace(re_whitespace, \" \");\n\t\t\t}\n\n\t\t\tvar element = this._createDomElement({\n\t\t\t\tdata: data,\n\t\t\t\ttype: ElementType.Text\n\t\t\t});\n\n\t\t\tthis._addDomElement(element);\n\t\t}\n\t}\n};\n\nDomHandler.prototype.oncomment = function(data){\n\tvar lastTag = this._tagStack[this._tagStack.length - 1];\n\n\tif(lastTag && lastTag.type === ElementType.Comment){\n\t\tlastTag.data += data;\n\t\treturn;\n\t}\n\n\tvar properties = {\n\t\tdata: data,\n\t\ttype: ElementType.Comment\n\t};\n\n\tvar element = this._createDomElement(properties);\n\n\tthis._addDomElement(element);\n\tthis._tagStack.push(element);\n};\n\nDomHandler.prototype.oncdatastart = function(){\n\tvar properties = {\n\t\tchildren: [{\n\t\t\tdata: \"\",\n\t\t\ttype: ElementType.Text\n\t\t}],\n\t\ttype: ElementType.CDATA\n\t};\n\n\tvar element = this._createDomElement(properties);\n\n\tthis._addDomElement(element);\n\tthis._tagStack.push(element);\n};\n\nDomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){\n\tthis._tagStack.pop();\n};\n\nDomHandler.prototype.onprocessinginstruction = function(name, data){\n\tvar element = this._createDomElement({\n\t\tname: name,\n\t\tdata: data,\n\t\ttype: ElementType.Directive\n\t});\n\n\tthis._addDomElement(element);\n};\n\nmodule.exports = DomHandler;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domhandler/index.js\n// module id = 1380\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domhandler/index.js?");

/***/ }),
/* 1381 */
/***/ (function(module, exports, __webpack_require__) {

eval("// DOM-Level-1-compliant structure\nvar NodePrototype = __webpack_require__(1220);\nvar ElementPrototype = module.exports = Object.create(NodePrototype);\n\nvar domLvl1 = {\n\ttagName: \"name\"\n};\n\nObject.keys(domLvl1).forEach(function(key) {\n\tvar shorthand = domLvl1[key];\n\tObject.defineProperty(ElementPrototype, key, {\n\t\tget: function() {\n\t\t\treturn this[shorthand] || null;\n\t\t},\n\t\tset: function(val) {\n\t\t\tthis[shorthand] = val;\n\t\t\treturn val;\n\t\t}\n\t});\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domhandler/lib/element.js\n// module id = 1381\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domhandler/lib/element.js?");

/***/ }),
/* 1382 */
/***/ (function(module, exports, __webpack_require__) {

eval("var index = __webpack_require__(403),\n    DomHandler = index.DomHandler,\n    DomUtils = index.DomUtils;\n\n//TODO: make this a streamable handler\nfunction FeedHandler(callback, options){\n\tthis.init(callback, options);\n}\n\n__webpack_require__(44)(FeedHandler, DomHandler);\n\nFeedHandler.prototype.init = DomHandler;\n\nfunction getElements(what, where){\n\treturn DomUtils.getElementsByTagName(what, where, true);\n}\nfunction getOneElement(what, where){\n\treturn DomUtils.getElementsByTagName(what, where, true, 1)[0];\n}\nfunction fetch(what, where, recurse){\n\treturn DomUtils.getText(\n\t\tDomUtils.getElementsByTagName(what, where, recurse, 1)\n\t).trim();\n}\n\nfunction addConditionally(obj, prop, what, where, recurse){\n\tvar tmp = fetch(what, where, recurse);\n\tif(tmp) obj[prop] = tmp;\n}\n\nvar isValidFeed = function(value){\n\treturn value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n};\n\nFeedHandler.prototype.onend = function(){\n\tvar feed = {},\n\t    feedRoot = getOneElement(isValidFeed, this.dom),\n\t    tmp, childs;\n\n\tif(feedRoot){\n\t\tif(feedRoot.name === \"feed\"){\n\t\t\tchilds = feedRoot.children;\n\n\t\t\tfeed.type = \"atom\";\n\t\t\taddConditionally(feed, \"id\", \"id\", childs);\n\t\t\taddConditionally(feed, \"title\", \"title\", childs);\n\t\t\tif((tmp = getOneElement(\"link\", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;\n\t\t\taddConditionally(feed, \"description\", \"subtitle\", childs);\n\t\t\tif((tmp = fetch(\"updated\", childs))) feed.updated = new Date(tmp);\n\t\t\taddConditionally(feed, \"author\", \"email\", childs, true);\n\n\t\t\tfeed.items = getElements(\"entry\", childs).map(function(item){\n\t\t\t\tvar entry = {}, tmp;\n\n\t\t\t\titem = item.children;\n\n\t\t\t\taddConditionally(entry, \"id\", \"id\", item);\n\t\t\t\taddConditionally(entry, \"title\", \"title\", item);\n\t\t\t\tif((tmp = getOneElement(\"link\", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;\n\t\t\t\tif((tmp = fetch(\"summary\", item) || fetch(\"content\", item))) entry.description = tmp;\n\t\t\t\tif((tmp = fetch(\"updated\", item))) entry.pubDate = new Date(tmp);\n\t\t\t\treturn entry;\n\t\t\t});\n\t\t} else {\n\t\t\tchilds = getOneElement(\"channel\", feedRoot.children).children;\n\n\t\t\tfeed.type = feedRoot.name.substr(0, 3);\n\t\t\tfeed.id = \"\";\n\t\t\taddConditionally(feed, \"title\", \"title\", childs);\n\t\t\taddConditionally(feed, \"link\", \"link\", childs);\n\t\t\taddConditionally(feed, \"description\", \"description\", childs);\n\t\t\tif((tmp = fetch(\"lastBuildDate\", childs))) feed.updated = new Date(tmp);\n\t\t\taddConditionally(feed, \"author\", \"managingEditor\", childs, true);\n\n\t\t\tfeed.items = getElements(\"item\", feedRoot.children).map(function(item){\n\t\t\t\tvar entry = {}, tmp;\n\n\t\t\t\titem = item.children;\n\n\t\t\t\taddConditionally(entry, \"id\", \"guid\", item);\n\t\t\t\taddConditionally(entry, \"title\", \"title\", item);\n\t\t\t\taddConditionally(entry, \"link\", \"link\", item);\n\t\t\t\taddConditionally(entry, \"description\", \"description\", item);\n\t\t\t\tif((tmp = fetch(\"pubDate\", item))) entry.pubDate = new Date(tmp);\n\t\t\t\treturn entry;\n\t\t\t});\n\t\t}\n\t}\n\tthis.dom = feed;\n\tDomHandler.prototype._handleCallback.call(\n\t\tthis, feedRoot ? null : Error(\"couldn't find root of feed\")\n\t);\n};\n\nmodule.exports = FeedHandler;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/FeedHandler.js\n// module id = 1382\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/FeedHandler.js?");

/***/ }),
/* 1383 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = Stream;\n\nvar Parser = __webpack_require__(1221);\n\nfunction Stream(options){\n\tParser.call(this, new Cbs(this), options);\n}\n\n__webpack_require__(44)(Stream, Parser);\n\nStream.prototype.readable = true;\n\nfunction Cbs(scope){\n\tthis.scope = scope;\n}\n\nvar EVENTS = __webpack_require__(403).EVENTS;\n\nObject.keys(EVENTS).forEach(function(name){\n\tif(EVENTS[name] === 0){\n\t\tCbs.prototype[\"on\" + name] = function(){\n\t\t\tthis.scope.emit(name);\n\t\t};\n\t} else if(EVENTS[name] === 1){\n\t\tCbs.prototype[\"on\" + name] = function(a){\n\t\t\tthis.scope.emit(name, a);\n\t\t};\n\t} else if(EVENTS[name] === 2){\n\t\tCbs.prototype[\"on\" + name] = function(a, b){\n\t\t\tthis.scope.emit(name, a, b);\n\t\t};\n\t} else {\n\t\tthrow Error(\"wrong number of arguments!\");\n\t}\n});\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/Stream.js\n// module id = 1383\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/Stream.js?");

/***/ }),
/* 1384 */
/***/ (function(module, exports, __webpack_require__) {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = __webpack_require__(227).EventEmitter;\nvar inherits = __webpack_require__(44);\n\ninherits(Stream, EE);\nStream.Readable = __webpack_require__(1099);\nStream.Writable = __webpack_require__(1393);\nStream.Duplex = __webpack_require__(1394);\nStream.Transform = __webpack_require__(1395);\nStream.PassThrough = __webpack_require__(1396);\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/stream-browserify/index.js\n// module id = 1384\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/stream-browserify/index.js?");

/***/ }),
/* 1385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/base64-js/index.js\n// module id = 1385\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/base64-js/index.js?");

/***/ }),
/* 1386 */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/ieee754/index.js\n// module id = 1386\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/ieee754/index.js?");

/***/ }),
/* 1387 */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//////////////////\n// WEBPACK FOOTER\n// util (ignored)\n// module id = 1387\n// module chunks = 0 4\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ }),
/* 1388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = __webpack_require__(691).Buffer;\nvar util = __webpack_require__(1389);\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/internal/streams/BufferList.js\n// module id = 1388\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/internal/streams/BufferList.js?");

/***/ }),
/* 1389 */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//////////////////\n// WEBPACK FOOTER\n// util (ignored)\n// module id = 1389\n// module chunks = 0 4\n\n//# sourceURL=webpack:///util_(ignored)?");

/***/ }),
/* 1390 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(574);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/node-libs-browser/node_modules/timers-browserify/main.js\n// module id = 1390\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/node-libs-browser/node_modules/timers-browserify/main.js?");

/***/ }),
/* 1391 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util-deprecate/browser.js\n// module id = 1391\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/util-deprecate/browser.js?");

/***/ }),
/* 1392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(1226);\n\n/*<replacement>*/\nvar util = __webpack_require__(567);\nutil.inherits = __webpack_require__(44);\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_passthrough.js\n// module id = 1392\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/lib/_stream_passthrough.js?");

/***/ }),
/* 1393 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(1101);\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/writable-browser.js\n// module id = 1393\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/writable-browser.js?");

/***/ }),
/* 1394 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(329);\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/duplex-browser.js\n// module id = 1394\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/duplex-browser.js?");

/***/ }),
/* 1395 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(1099).Transform\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/transform.js\n// module id = 1395\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/transform.js?");

/***/ }),
/* 1396 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(1099).PassThrough\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/passthrough.js\n// module id = 1396\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/readable-stream/passthrough.js?");

/***/ }),
/* 1397 */
/***/ (function(module, exports) {

eval("/* (ignored) */\n\n//////////////////\n// WEBPACK FOOTER\n// readable-stream (ignored)\n// module id = 1397\n// module chunks = 0 4\n\n//# sourceURL=webpack:///readable-stream_(ignored)?");

/***/ }),
/* 1398 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = ProxyHandler;\n\nfunction ProxyHandler(cbs){\n\tthis._cbs = cbs || {};\n}\n\nvar EVENTS = __webpack_require__(403).EVENTS;\nObject.keys(EVENTS).forEach(function(name){\n\tif(EVENTS[name] === 0){\n\t\tname = \"on\" + name;\n\t\tProxyHandler.prototype[name] = function(){\n\t\t\tif(this._cbs[name]) this._cbs[name]();\n\t\t};\n\t} else if(EVENTS[name] === 1){\n\t\tname = \"on\" + name;\n\t\tProxyHandler.prototype[name] = function(a){\n\t\t\tif(this._cbs[name]) this._cbs[name](a);\n\t\t};\n\t} else if(EVENTS[name] === 2){\n\t\tname = \"on\" + name;\n\t\tProxyHandler.prototype[name] = function(a, b){\n\t\t\tif(this._cbs[name]) this._cbs[name](a, b);\n\t\t};\n\t} else {\n\t\tthrow Error(\"wrong number of arguments\");\n\t}\n});\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/ProxyHandler.js\n// module id = 1398\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/ProxyHandler.js?");

/***/ }),
/* 1399 */
/***/ (function(module, exports, __webpack_require__) {

eval("var DomUtils = module.exports;\n\n[\n\t__webpack_require__(1400),\n\t__webpack_require__(1406),\n\t__webpack_require__(1407),\n\t__webpack_require__(1408),\n\t__webpack_require__(1409),\n\t__webpack_require__(1410)\n].forEach(function(ext){\n\tObject.keys(ext).forEach(function(key){\n\t\tDomUtils[key] = ext[key].bind(DomUtils);\n\t});\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/index.js\n// module id = 1399\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/index.js?");

/***/ }),
/* 1400 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ElementType = __webpack_require__(566),\n    getOuterHTML = __webpack_require__(1401),\n    isTag = ElementType.isTag;\n\nmodule.exports = {\n\tgetInnerHTML: getInnerHTML,\n\tgetOuterHTML: getOuterHTML,\n\tgetText: getText\n};\n\nfunction getInnerHTML(elem, opts){\n\treturn elem.children ? elem.children.map(function(elem){\n\t\treturn getOuterHTML(elem, opts);\n\t}).join(\"\") : \"\";\n}\n\nfunction getText(elem){\n\tif(Array.isArray(elem)) return elem.map(getText).join(\"\");\n\tif(isTag(elem)) return elem.name === \"br\" ? \"\\n\" : getText(elem.children);\n\tif(elem.type === ElementType.CDATA) return getText(elem.children);\n\tif(elem.type === ElementType.Text) return elem.data;\n\treturn \"\";\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/stringify.js\n// module id = 1400\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/stringify.js?");

/***/ }),
/* 1401 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n  Module dependencies\n*/\nvar ElementType = __webpack_require__(1402);\nvar entities = __webpack_require__(1403);\n\n/*\n  Boolean Attributes\n*/\nvar booleanAttributes = {\n  __proto__: null,\n  allowfullscreen: true,\n  async: true,\n  autofocus: true,\n  autoplay: true,\n  checked: true,\n  controls: true,\n  default: true,\n  defer: true,\n  disabled: true,\n  hidden: true,\n  ismap: true,\n  loop: true,\n  multiple: true,\n  muted: true,\n  open: true,\n  readonly: true,\n  required: true,\n  reversed: true,\n  scoped: true,\n  seamless: true,\n  selected: true,\n  typemustmatch: true\n};\n\nvar unencodedElements = {\n  __proto__: null,\n  style: true,\n  script: true,\n  xmp: true,\n  iframe: true,\n  noembed: true,\n  noframes: true,\n  plaintext: true,\n  noscript: true\n};\n\n/*\n  Format attributes\n*/\nfunction formatAttrs(attributes, opts) {\n  if (!attributes) return;\n\n  var output = '',\n      value;\n\n  // Loop through the attributes\n  for (var key in attributes) {\n    value = attributes[key];\n    if (output) {\n      output += ' ';\n    }\n\n    if (!value && booleanAttributes[key]) {\n      output += key;\n    } else {\n      output += key + '=\"' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '\"';\n    }\n  }\n\n  return output;\n}\n\n/*\n  Self-enclosing tags (stolen from node-htmlparser)\n*/\nvar singleTag = {\n  __proto__: null,\n  area: true,\n  base: true,\n  basefont: true,\n  br: true,\n  col: true,\n  command: true,\n  embed: true,\n  frame: true,\n  hr: true,\n  img: true,\n  input: true,\n  isindex: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true,\n};\n\n\nvar render = module.exports = function(dom, opts) {\n  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];\n  opts = opts || {};\n\n  var output = '';\n\n  for(var i = 0; i < dom.length; i++){\n    var elem = dom[i];\n\n    if (elem.type === 'root')\n      output += render(elem.children, opts);\n    else if (ElementType.isTag(elem))\n      output += renderTag(elem, opts);\n    else if (elem.type === ElementType.Directive)\n      output += renderDirective(elem);\n    else if (elem.type === ElementType.Comment)\n      output += renderComment(elem);\n    else if (elem.type === ElementType.CDATA)\n      output += renderCdata(elem);\n    else\n      output += renderText(elem, opts);\n  }\n\n  return output;\n};\n\nfunction renderTag(elem, opts) {\n  // Handle SVG\n  if (elem.name === \"svg\") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};\n\n  var tag = '<' + elem.name,\n      attribs = formatAttrs(elem.attribs, opts);\n\n  if (attribs) {\n    tag += ' ' + attribs;\n  }\n\n  if (\n    opts.xmlMode\n    && (!elem.children || elem.children.length === 0)\n  ) {\n    tag += '/>';\n  } else {\n    tag += '>';\n    if (elem.children) {\n      tag += render(elem.children, opts);\n    }\n\n    if (!singleTag[elem.name] || opts.xmlMode) {\n      tag += '</' + elem.name + '>';\n    }\n  }\n\n  return tag;\n}\n\nfunction renderDirective(elem) {\n  return '<' + elem.data + '>';\n}\n\nfunction renderText(elem, opts) {\n  var data = elem.data || '';\n\n  // if entities weren't decoded, no need to encode them back\n  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {\n    data = entities.encodeXML(data);\n  }\n\n  return data;\n}\n\nfunction renderCdata(elem) {\n  return '<![CDATA[' + elem.children[0].data + ']]>';\n}\n\nfunction renderComment(elem) {\n  return '<!--' + elem.data + '-->';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/dom-serializer/index.js\n// module id = 1401\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/dom-serializer/index.js?");

/***/ }),
/* 1402 */
/***/ (function(module, exports) {

eval("//Types of elements found in the DOM\nmodule.exports = {\n\tText: \"text\", //Text\n\tDirective: \"directive\", //<? ... ?>\n\tComment: \"comment\", //<!-- ... -->\n\tScript: \"script\", //<script> tags\n\tStyle: \"style\", //<style> tags\n\tTag: \"tag\", //Any tag\n\tCDATA: \"cdata\", //<![CDATA[ ... ]]>\n\n\tisTag: function(elem){\n\t\treturn elem.type === \"tag\" || elem.type === \"script\" || elem.type === \"style\";\n\t}\n};\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/dom-serializer/node_modules/domelementtype/index.js\n// module id = 1402\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/dom-serializer/node_modules/domelementtype/index.js?");

/***/ }),
/* 1403 */
/***/ (function(module, exports, __webpack_require__) {

eval("var encode = __webpack_require__(1404),\n    decode = __webpack_require__(1405);\n\nexports.decode = function(data, level){\n\treturn (!level || level <= 0 ? decode.XML : decode.HTML)(data);\n};\n\nexports.decodeStrict = function(data, level){\n\treturn (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);\n};\n\nexports.encode = function(data, level){\n\treturn (!level || level <= 0 ? encode.XML : encode.HTML)(data);\n};\n\nexports.encodeXML = encode.XML;\n\nexports.encodeHTML4 =\nexports.encodeHTML5 =\nexports.encodeHTML  = encode.HTML;\n\nexports.decodeXML =\nexports.decodeXMLStrict = decode.XML;\n\nexports.decodeHTML4 =\nexports.decodeHTML5 =\nexports.decodeHTML = decode.HTML;\n\nexports.decodeHTML4Strict =\nexports.decodeHTML5Strict =\nexports.decodeHTMLStrict = decode.HTMLStrict;\n\nexports.escape = encode.escape;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/index.js\n// module id = 1403\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/index.js?");

/***/ }),
/* 1404 */
/***/ (function(module, exports, __webpack_require__) {

eval("var inverseXML = getInverseObj(__webpack_require__(1098)),\n    xmlReplacer = getInverseReplacer(inverseXML);\n\nexports.XML = getInverse(inverseXML, xmlReplacer);\n\nvar inverseHTML = getInverseObj(__webpack_require__(1097)),\n    htmlReplacer = getInverseReplacer(inverseHTML);\n\nexports.HTML = getInverse(inverseHTML, htmlReplacer);\n\nfunction getInverseObj(obj){\n\treturn Object.keys(obj).sort().reduce(function(inverse, name){\n\t\tinverse[obj[name]] = \"&\" + name + \";\";\n\t\treturn inverse;\n\t}, {});\n}\n\nfunction getInverseReplacer(inverse){\n\tvar single = [],\n\t    multiple = [];\n\n\tObject.keys(inverse).forEach(function(k){\n\t\tif(k.length === 1){\n\t\t\tsingle.push(\"\\\\\" + k);\n\t\t} else {\n\t\t\tmultiple.push(k);\n\t\t}\n\t});\n\n\t//TODO add ranges\n\tmultiple.unshift(\"[\" + single.join(\"\") + \"]\");\n\n\treturn new RegExp(multiple.join(\"|\"), \"g\");\n}\n\nvar re_nonASCII = /[^\\0-\\x7F]/g,\n    re_astralSymbols = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n\nfunction singleCharReplacer(c){\n\treturn \"&#x\" + c.charCodeAt(0).toString(16).toUpperCase() + \";\";\n}\n\nfunction astralReplacer(c){\n\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\tvar high = c.charCodeAt(0);\n\tvar low  = c.charCodeAt(1);\n\tvar codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;\n\treturn \"&#x\" + codePoint.toString(16).toUpperCase() + \";\";\n}\n\nfunction getInverse(inverse, re){\n\tfunction func(name){\n\t\treturn inverse[name];\n\t}\n\n\treturn function(data){\n\t\treturn data\n\t\t\t\t.replace(re, func)\n\t\t\t\t.replace(re_astralSymbols, astralReplacer)\n\t\t\t\t.replace(re_nonASCII, singleCharReplacer);\n\t};\n}\n\nvar re_xmlChars = getInverseReplacer(inverseXML);\n\nfunction escapeXML(data){\n\treturn data\n\t\t\t.replace(re_xmlChars, singleCharReplacer)\n\t\t\t.replace(re_astralSymbols, astralReplacer)\n\t\t\t.replace(re_nonASCII, singleCharReplacer);\n}\n\nexports.escape = escapeXML;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/lib/encode.js\n// module id = 1404\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/lib/encode.js?");

/***/ }),
/* 1405 */
/***/ (function(module, exports, __webpack_require__) {

eval("var entityMap = __webpack_require__(1097),\n    legacyMap = __webpack_require__(1219),\n    xmlMap    = __webpack_require__(1098),\n    decodeCodePoint = __webpack_require__(1218);\n\nvar decodeXMLStrict  = getStrictDecoder(xmlMap),\n    decodeHTMLStrict = getStrictDecoder(entityMap);\n\nfunction getStrictDecoder(map){\n\tvar keys = Object.keys(map).join(\"|\"),\n\t    replace = getReplacer(map);\n\n\tkeys += \"|#[xX][\\\\da-fA-F]+|#\\\\d+\";\n\n\tvar re = new RegExp(\"&(?:\" + keys + \");\", \"g\");\n\n\treturn function(str){\n\t\treturn String(str).replace(re, replace);\n\t};\n}\n\nvar decodeHTML = (function(){\n\tvar legacy = Object.keys(legacyMap)\n\t\t.sort(sorter);\n\n\tvar keys = Object.keys(entityMap)\n\t\t.sort(sorter);\n\n\tfor(var i = 0, j = 0; i < keys.length; i++){\n\t\tif(legacy[j] === keys[i]){\n\t\t\tkeys[i] += \";?\";\n\t\t\tj++;\n\t\t} else {\n\t\t\tkeys[i] += \";\";\n\t\t}\n\t}\n\n\tvar re = new RegExp(\"&(?:\" + keys.join(\"|\") + \"|#[xX][\\\\da-fA-F]+;?|#\\\\d+;?)\", \"g\"),\n\t    replace = getReplacer(entityMap);\n\n\tfunction replacer(str){\n\t\tif(str.substr(-1) !== \";\") str += \";\";\n\t\treturn replace(str);\n\t}\n\n\t//TODO consider creating a merged map\n\treturn function(str){\n\t\treturn String(str).replace(re, replacer);\n\t};\n}());\n\nfunction sorter(a, b){\n\treturn a < b ? 1 : -1;\n}\n\nfunction getReplacer(map){\n\treturn function replace(str){\n\t\tif(str.charAt(1) === \"#\"){\n\t\t\tif(str.charAt(2) === \"X\" || str.charAt(2) === \"x\"){\n\t\t\t\treturn decodeCodePoint(parseInt(str.substr(3), 16));\n\t\t\t}\n\t\t\treturn decodeCodePoint(parseInt(str.substr(2), 10));\n\t\t}\n\t\treturn map[str.slice(1, -1)];\n\t};\n}\n\nmodule.exports = {\n\tXML: decodeXMLStrict,\n\tHTML: decodeHTML,\n\tHTMLStrict: decodeHTMLStrict\n};\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/lib/decode.js\n// module id = 1405\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/entities/lib/decode.js?");

/***/ }),
/* 1406 */
/***/ (function(module, exports) {

eval("var getChildren = exports.getChildren = function(elem){\n\treturn elem.children;\n};\n\nvar getParent = exports.getParent = function(elem){\n\treturn elem.parent;\n};\n\nexports.getSiblings = function(elem){\n\tvar parent = getParent(elem);\n\treturn parent ? getChildren(parent) : [elem];\n};\n\nexports.getAttributeValue = function(elem, name){\n\treturn elem.attribs && elem.attribs[name];\n};\n\nexports.hasAttrib = function(elem, name){\n\treturn !!elem.attribs && hasOwnProperty.call(elem.attribs, name);\n};\n\nexports.getName = function(elem){\n\treturn elem.name;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/traversal.js\n// module id = 1406\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/traversal.js?");

/***/ }),
/* 1407 */
/***/ (function(module, exports) {

eval("exports.removeElement = function(elem){\n\tif(elem.prev) elem.prev.next = elem.next;\n\tif(elem.next) elem.next.prev = elem.prev;\n\n\tif(elem.parent){\n\t\tvar childs = elem.parent.children;\n\t\tchilds.splice(childs.lastIndexOf(elem), 1);\n\t}\n};\n\nexports.replaceElement = function(elem, replacement){\n\tvar prev = replacement.prev = elem.prev;\n\tif(prev){\n\t\tprev.next = replacement;\n\t}\n\n\tvar next = replacement.next = elem.next;\n\tif(next){\n\t\tnext.prev = replacement;\n\t}\n\n\tvar parent = replacement.parent = elem.parent;\n\tif(parent){\n\t\tvar childs = parent.children;\n\t\tchilds[childs.lastIndexOf(elem)] = replacement;\n\t}\n};\n\nexports.appendChild = function(elem, child){\n\tchild.parent = elem;\n\n\tif(elem.children.push(child) !== 1){\n\t\tvar sibling = elem.children[elem.children.length - 2];\n\t\tsibling.next = child;\n\t\tchild.prev = sibling;\n\t\tchild.next = null;\n\t}\n};\n\nexports.append = function(elem, next){\n\tvar parent = elem.parent,\n\t\tcurrNext = elem.next;\n\n\tnext.next = currNext;\n\tnext.prev = elem;\n\telem.next = next;\n\tnext.parent = parent;\n\n\tif(currNext){\n\t\tcurrNext.prev = next;\n\t\tif(parent){\n\t\t\tvar childs = parent.children;\n\t\t\tchilds.splice(childs.lastIndexOf(currNext), 0, next);\n\t\t}\n\t} else if(parent){\n\t\tparent.children.push(next);\n\t}\n};\n\nexports.prepend = function(elem, prev){\n\tvar parent = elem.parent;\n\tif(parent){\n\t\tvar childs = parent.children;\n\t\tchilds.splice(childs.lastIndexOf(elem), 0, prev);\n\t}\n\n\tif(elem.prev){\n\t\telem.prev.next = prev;\n\t}\n\t\n\tprev.parent = parent;\n\tprev.prev = elem.prev;\n\tprev.next = elem;\n\telem.prev = prev;\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/manipulation.js\n// module id = 1407\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/manipulation.js?");

/***/ }),
/* 1408 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isTag = __webpack_require__(566).isTag;\n\nmodule.exports = {\n\tfilter: filter,\n\tfind: find,\n\tfindOneChild: findOneChild,\n\tfindOne: findOne,\n\texistsOne: existsOne,\n\tfindAll: findAll\n};\n\nfunction filter(test, element, recurse, limit){\n\tif(!Array.isArray(element)) element = [element];\n\n\tif(typeof limit !== \"number\" || !isFinite(limit)){\n\t\tlimit = Infinity;\n\t}\n\treturn find(test, element, recurse !== false, limit);\n}\n\nfunction find(test, elems, recurse, limit){\n\tvar result = [], childs;\n\n\tfor(var i = 0, j = elems.length; i < j; i++){\n\t\tif(test(elems[i])){\n\t\t\tresult.push(elems[i]);\n\t\t\tif(--limit <= 0) break;\n\t\t}\n\n\t\tchilds = elems[i].children;\n\t\tif(recurse && childs && childs.length > 0){\n\t\t\tchilds = find(test, childs, recurse, limit);\n\t\t\tresult = result.concat(childs);\n\t\t\tlimit -= childs.length;\n\t\t\tif(limit <= 0) break;\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction findOneChild(test, elems){\n\tfor(var i = 0, l = elems.length; i < l; i++){\n\t\tif(test(elems[i])) return elems[i];\n\t}\n\n\treturn null;\n}\n\nfunction findOne(test, elems){\n\tvar elem = null;\n\n\tfor(var i = 0, l = elems.length; i < l && !elem; i++){\n\t\tif(!isTag(elems[i])){\n\t\t\tcontinue;\n\t\t} else if(test(elems[i])){\n\t\t\telem = elems[i];\n\t\t} else if(elems[i].children.length > 0){\n\t\t\telem = findOne(test, elems[i].children);\n\t\t}\n\t}\n\n\treturn elem;\n}\n\nfunction existsOne(test, elems){\n\tfor(var i = 0, l = elems.length; i < l; i++){\n\t\tif(\n\t\t\tisTag(elems[i]) && (\n\t\t\t\ttest(elems[i]) || (\n\t\t\t\t\telems[i].children.length > 0 &&\n\t\t\t\t\texistsOne(test, elems[i].children)\n\t\t\t\t)\n\t\t\t)\n\t\t){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction findAll(test, rootElems){\n\tvar result = [];\n\tvar stack = rootElems.slice();\n\twhile(stack.length){\n\t\tvar elem = stack.shift();\n\t\tif(!isTag(elem)) continue;\n\t\tif (elem.children && elem.children.length > 0) {\n\t\t\tstack.unshift.apply(stack, elem.children);\n\t\t}\n\t\tif(test(elem)) result.push(elem);\n\t}\n\treturn result;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/querying.js\n// module id = 1408\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/querying.js?");

/***/ }),
/* 1409 */
/***/ (function(module, exports, __webpack_require__) {

eval("var ElementType = __webpack_require__(566);\nvar isTag = exports.isTag = ElementType.isTag;\n\nexports.testElement = function(options, element){\n\tfor(var key in options){\n\t\tif(!options.hasOwnProperty(key));\n\t\telse if(key === \"tag_name\"){\n\t\t\tif(!isTag(element) || !options.tag_name(element.name)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(key === \"tag_type\"){\n\t\t\tif(!options.tag_type(element.type)) return false;\n\t\t} else if(key === \"tag_contains\"){\n\t\t\tif(isTag(element) || !options.tag_contains(element.data)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(!element.attribs || !options[key](element.attribs[key])){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\nvar Checks = {\n\ttag_name: function(name){\n\t\tif(typeof name === \"function\"){\n\t\t\treturn function(elem){ return isTag(elem) && name(elem.name); };\n\t\t} else if(name === \"*\"){\n\t\t\treturn isTag;\n\t\t} else {\n\t\t\treturn function(elem){ return isTag(elem) && elem.name === name; };\n\t\t}\n\t},\n\ttag_type: function(type){\n\t\tif(typeof type === \"function\"){\n\t\t\treturn function(elem){ return type(elem.type); };\n\t\t} else {\n\t\t\treturn function(elem){ return elem.type === type; };\n\t\t}\n\t},\n\ttag_contains: function(data){\n\t\tif(typeof data === \"function\"){\n\t\t\treturn function(elem){ return !isTag(elem) && data(elem.data); };\n\t\t} else {\n\t\t\treturn function(elem){ return !isTag(elem) && elem.data === data; };\n\t\t}\n\t}\n};\n\nfunction getAttribCheck(attrib, value){\n\tif(typeof value === \"function\"){\n\t\treturn function(elem){ return elem.attribs && value(elem.attribs[attrib]); };\n\t} else {\n\t\treturn function(elem){ return elem.attribs && elem.attribs[attrib] === value; };\n\t}\n}\n\nfunction combineFuncs(a, b){\n\treturn function(elem){\n\t\treturn a(elem) || b(elem);\n\t};\n}\n\nexports.getElements = function(options, element, recurse, limit){\n\tvar funcs = Object.keys(options).map(function(key){\n\t\tvar value = options[key];\n\t\treturn key in Checks ? Checks[key](value) : getAttribCheck(key, value);\n\t});\n\n\treturn funcs.length === 0 ? [] : this.filter(\n\t\tfuncs.reduce(combineFuncs),\n\t\telement, recurse, limit\n\t);\n};\n\nexports.getElementById = function(id, element, recurse){\n\tif(!Array.isArray(element)) element = [element];\n\treturn this.findOne(getAttribCheck(\"id\", id), element, recurse !== false);\n};\n\nexports.getElementsByTagName = function(name, element, recurse, limit){\n\treturn this.filter(Checks.tag_name(name), element, recurse, limit);\n};\n\nexports.getElementsByTagType = function(type, element, recurse, limit){\n\treturn this.filter(Checks.tag_type(type), element, recurse, limit);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/legacy.js\n// module id = 1409\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/legacy.js?");

/***/ }),
/* 1410 */
/***/ (function(module, exports) {

eval("// removeSubsets\n// Given an array of nodes, remove any member that is contained by another.\nexports.removeSubsets = function(nodes) {\n\tvar idx = nodes.length, node, ancestor, replace;\n\n\t// Check if each node (or one of its ancestors) is already contained in the\n\t// array.\n\twhile (--idx > -1) {\n\t\tnode = ancestor = nodes[idx];\n\n\t\t// Temporarily remove the node under consideration\n\t\tnodes[idx] = null;\n\t\treplace = true;\n\n\t\twhile (ancestor) {\n\t\t\tif (nodes.indexOf(ancestor) > -1) {\n\t\t\t\treplace = false;\n\t\t\t\tnodes.splice(idx, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tancestor = ancestor.parent;\n\t\t}\n\n\t\t// If the node has been found to be unique, re-insert it.\n\t\tif (replace) {\n\t\t\tnodes[idx] = node;\n\t\t}\n\t}\n\n\treturn nodes;\n};\n\n// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition\nvar POSITION = {\n\tDISCONNECTED: 1,\n\tPRECEDING: 2,\n\tFOLLOWING: 4,\n\tCONTAINS: 8,\n\tCONTAINED_BY: 16\n};\n\n// Compare the position of one node against another node in any other document.\n// The return value is a bitmask with the following values:\n//\n// document order:\n// > There is an ordering, document order, defined on all the nodes in the\n// > document corresponding to the order in which the first character of the\n// > XML representation of each node occurs in the XML representation of the\n// > document after expansion of general entities. Thus, the document element\n// > node will be the first node. Element nodes occur before their children.\n// > Thus, document order orders element nodes in order of the occurrence of\n// > their start-tag in the XML (after expansion of entities). The attribute\n// > nodes of an element occur after the element and before its children. The\n// > relative order of attribute nodes is implementation-dependent./\n// Source:\n// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n//\n// @argument {Node} nodaA The first node to use in the comparison\n// @argument {Node} nodeB The second node to use in the comparison\n//\n// @return {Number} A bitmask describing the input nodes' relative position.\n//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n//         a description of these values.\nvar comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {\n\tvar aParents = [];\n\tvar bParents = [];\n\tvar current, sharedParent, siblings, aSibling, bSibling, idx;\n\n\tif (nodeA === nodeB) {\n\t\treturn 0;\n\t}\n\n\tcurrent = nodeA;\n\twhile (current) {\n\t\taParents.unshift(current);\n\t\tcurrent = current.parent;\n\t}\n\tcurrent = nodeB;\n\twhile (current) {\n\t\tbParents.unshift(current);\n\t\tcurrent = current.parent;\n\t}\n\n\tidx = 0;\n\twhile (aParents[idx] === bParents[idx]) {\n\t\tidx++;\n\t}\n\n\tif (idx === 0) {\n\t\treturn POSITION.DISCONNECTED;\n\t}\n\n\tsharedParent = aParents[idx - 1];\n\tsiblings = sharedParent.children;\n\taSibling = aParents[idx];\n\tbSibling = bParents[idx];\n\n\tif (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n\t\tif (sharedParent === nodeB) {\n\t\t\treturn POSITION.FOLLOWING | POSITION.CONTAINED_BY;\n\t\t}\n\t\treturn POSITION.FOLLOWING;\n\t} else {\n\t\tif (sharedParent === nodeA) {\n\t\t\treturn POSITION.PRECEDING | POSITION.CONTAINS;\n\t\t}\n\t\treturn POSITION.PRECEDING;\n\t}\n};\n\n// Sort an array of nodes based on their relative position in the document and\n// remove any duplicate nodes. If the array contains nodes that do not belong\n// to the same document, sort order is unspecified.\n//\n// @argument {Array} nodes Array of DOM nodes\n//\n// @returns {Array} collection of unique nodes, sorted in document order\nexports.uniqueSort = function(nodes) {\n\tvar idx = nodes.length, node, position;\n\n\tnodes = nodes.slice();\n\n\twhile (--idx > -1) {\n\t\tnode = nodes[idx];\n\t\tposition = nodes.indexOf(node);\n\t\tif (position > -1 && position < idx) {\n\t\t\tnodes.splice(idx, 1);\n\t\t}\n\t}\n\tnodes.sort(function(a, b) {\n\t\tvar relative = comparePos(a, b);\n\t\tif (relative & POSITION.PRECEDING) {\n\t\t\treturn -1;\n\t\t} else if (relative & POSITION.FOLLOWING) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\treturn nodes;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/helpers.js\n// module id = 1410\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/domutils/lib/helpers.js?");

/***/ }),
/* 1411 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = CollectingHandler;\n\nfunction CollectingHandler(cbs){\n\tthis._cbs = cbs || {};\n\tthis.events = [];\n}\n\nvar EVENTS = __webpack_require__(403).EVENTS;\nObject.keys(EVENTS).forEach(function(name){\n\tif(EVENTS[name] === 0){\n\t\tname = \"on\" + name;\n\t\tCollectingHandler.prototype[name] = function(){\n\t\t\tthis.events.push([name]);\n\t\t\tif(this._cbs[name]) this._cbs[name]();\n\t\t};\n\t} else if(EVENTS[name] === 1){\n\t\tname = \"on\" + name;\n\t\tCollectingHandler.prototype[name] = function(a){\n\t\t\tthis.events.push([name, a]);\n\t\t\tif(this._cbs[name]) this._cbs[name](a);\n\t\t};\n\t} else if(EVENTS[name] === 2){\n\t\tname = \"on\" + name;\n\t\tCollectingHandler.prototype[name] = function(a, b){\n\t\t\tthis.events.push([name, a, b]);\n\t\t\tif(this._cbs[name]) this._cbs[name](a, b);\n\t\t};\n\t} else {\n\t\tthrow Error(\"wrong number of arguments\");\n\t}\n});\n\nCollectingHandler.prototype.onreset = function(){\n\tthis.events = [];\n\tif(this._cbs.onreset) this._cbs.onreset();\n};\n\nCollectingHandler.prototype.restart = function(){\n\tif(this._cbs.onreset) this._cbs.onreset();\n\n\tfor(var i = 0, len = this.events.length; i < len; i++){\n\t\tif(this._cbs[this.events[i][0]]){\n\n\t\t\tvar num = this.events[i].length;\n\n\t\t\tif(num === 1){\n\t\t\t\tthis._cbs[this.events[i][0]]();\n\t\t\t} else if(num === 2){\n\t\t\t\tthis._cbs[this.events[i][0]](this.events[i][1]);\n\t\t\t} else {\n\t\t\t\tthis._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/CollectingHandler.js\n// module id = 1411\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/htmlparser2/lib/CollectingHandler.js?");

/***/ }),
/* 1412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/getLinkStatistics */\n\nvar getLinks = __webpack_require__(1227);\n/**\n * Checks a text for anchors and returns the number found.\n *\n * @param {object} paper The paper object containing text, keyword and url.\n * @returns {number} The number of links found in the text.\n */\nmodule.exports = function (paper) {\n  var anchors = getLinks(paper);\n  return anchors.length;\n};\n//# sourceMappingURL=countLinks.js.map\n//# sourceMappingURL=countLinks.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/countLinks.js\n// module id = 1412\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/countLinks.js?");

/***/ }),
/* 1413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/isUrlTooLong */\n/**\n * Checks if an URL is too long, based on slug and relative to keyword length.\n *\n * @param {object} paper the paper to run this assessment on\n * @returns {boolean} true if the URL is too long, false if it isn't\n */\n\nmodule.exports = function (paper) {\n    var urlLength = paper.getUrl().length;\n    var keywordLength = paper.getKeyword().length;\n    var maxUrlLength = 40;\n    var maxSlugLength = 20;\n    if (urlLength > maxUrlLength && urlLength > keywordLength + maxSlugLength) {\n        return true;\n    }\n    return false;\n};\n//# sourceMappingURL=urlIsTooLong.js.map\n//# sourceMappingURL=urlIsTooLong.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/urlIsTooLong.js\n// module id = 1413\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/urlIsTooLong.js?");

/***/ }),
/* 1414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/findKeywordInPageTitle */\n\nvar wordMatch = __webpack_require__(268);\nvar normalizeQuotes = __webpack_require__(328).normalize;\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Counts the occurrences of the keyword in the pagetitle. Returns the number of matches\n * and the position of the keyword.\n *\n * @param {object} paper The paper containing title and keyword.\n * @returns {object} result with the matches and position.\n */\nmodule.exports = function (paper) {\n  /*\n   * NormalizeQuotes also is used in wordMatch, but in order to find the index of the keyword, it's\n   * necessary to repeat it here.\n   */\n  var title = normalizeQuotes(paper.getTitle());\n  var keyword = escapeRegExp(normalizeQuotes(paper.getKeyword()).toLocaleLowerCase());\n  var locale = paper.getLocale();\n  var result = { matches: 0, position: -1 };\n  result.matches = wordMatch(title, keyword, locale).count;\n  result.position = title.toLocaleLowerCase().indexOf(keyword);\n  return result;\n};\n//# sourceMappingURL=findKeywordInPageTitle.js.map\n//# sourceMappingURL=findKeywordInPageTitle.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/findKeywordInPageTitle.js\n// module id = 1414\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/findKeywordInPageTitle.js?");

/***/ }),
/* 1415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* @module analyses/matchKeywordInSubheadings */\n\nvar stripSomeTags = __webpack_require__(1228);\nvar subheadingMatch = __webpack_require__(1416);\nvar getSubheadingContents = __webpack_require__(1281).getSubheadingContents;\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Checks if there are any subheadings like h2 in the text\n * and if they have the keyword in them.\n *\n * @param {object} paper The paper object containing the text and keyword.\n * @returns {object} the result object.\n */\nmodule.exports = function (paper) {\n    var text = paper.getText();\n    var keyword = escapeRegExp(paper.getKeyword());\n    var locale = paper.getLocale();\n    var result = { count: 0 };\n    text = stripSomeTags(text);\n    var matches = getSubheadingContents(text);\n    if (0 !== matches.length) {\n        result.count = matches.length;\n        result.matches = subheadingMatch(matches, keyword, locale);\n    }\n    return result;\n};\n//# sourceMappingURL=matchKeywordInSubheadings.js.map\n//# sourceMappingURL=matchKeywordInSubheadings.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/matchKeywordInSubheadings.js\n// module id = 1415\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/matchKeywordInSubheadings.js?");

/***/ }),
/* 1416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar replaceString = __webpack_require__(1417);\nvar removalWords = __webpack_require__(1418)();\nvar matchTextWithWord = __webpack_require__(268);\n/**\n * Matches the keyword in an array of strings\n *\n * @param {Array} matches The array with the matched headings.\n * @param {String} keyword The keyword to match\n * @param {string} locale The locale used for transliteration.\n * @returns {number} The number of occurrences of the keyword in the headings.\n */\nmodule.exports = function (matches, keyword, locale) {\n    var foundInHeader = -1;\n    if (matches !== null) {\n        foundInHeader = 0;\n        for (var i = 0; i < matches.length; i++) {\n            // TODO: This replaceString call seemingly doesn't work, as no replacement value is being sent to the .replace method in replaceString\n            var formattedHeaders = replaceString(matches[i], removalWords);\n            if (matchTextWithWord(formattedHeaders, keyword, locale).count > 0 || matchTextWithWord(matches[i], keyword, locale).count > 0) {\n                foundInHeader++;\n            }\n        }\n    }\n    return foundInHeader;\n};\n//# sourceMappingURL=subheadingsMatch.js.map\n//# sourceMappingURL=subheadingsMatch.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/subheadingsMatch.js\n// module id = 1416\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/subheadingsMatch.js?");

/***/ }),
/* 1417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/replaceString */\n/**\n * Replaces string with a replacement in text\n *\n * @param {string} text The textstring to remove\n * @param {string} stringToReplace The string to replace\n * @param {string} replacement The replacement of the string\n * @returns {string} The text with the string replaced\n */\n\nmodule.exports = function (text, stringToReplace, replacement) {\n  text = text.replace(stringToReplace, replacement);\n  return text;\n};\n//# sourceMappingURL=replaceString.js.map\n//# sourceMappingURL=replaceString.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/replaceString.js\n// module id = 1417\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/replaceString.js?");

/***/ }),
/* 1418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/removalWords */\n/**\n * Returns an array with words that need to be removed\n *\n * @returns {array} removalWords Returns an array with words.\n */\n\nmodule.exports = function () {\n  return [\" a\", \" in\", \" an\", \" on\", \" for\", \" the\", \" and\"];\n};\n//# sourceMappingURL=removalWords.js.map\n//# sourceMappingURL=removalWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/removalWords.js\n// module id = 1418\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/removalWords.js?");

/***/ }),
/* 1419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/getKeywordDensity */\n\nvar countWords = __webpack_require__(185);\n/**\n * Calculates the keyword density .\n *\n * @param {object} paper The paper containing keyword and text.\n * @param {object} researcher The researcher.\n * @returns {number} The keyword density.\n */\nmodule.exports = function (paper, researcher) {\n    var wordCount = countWords(paper.getText());\n    if (wordCount === 0) {\n        return 0;\n    }\n    var keywordCount = researcher.getResearch(\"keywordCount\");\n    return keywordCount.count / wordCount * 100;\n};\n//# sourceMappingURL=getKeywordDensity.js.map\n//# sourceMappingURL=getKeywordDensity.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getKeywordDensity.js\n// module id = 1419\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getKeywordDensity.js?");

/***/ }),
/* 1420 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/getKeywordCount */\n\nvar matchWords = __webpack_require__(268);\nvar unique = __webpack_require__(1103);\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Calculates the keyword count.\n *\n * @param {object} paper The paper containing keyword and text.\n * @returns {number} The keyword count.\n */\nmodule.exports = function (paper) {\n    var keyword = escapeRegExp(paper.getKeyword());\n    var text = paper.getText();\n    var locale = paper.getLocale();\n    var keywordsFound = matchWords(text, keyword, locale);\n    return {\n        count: keywordsFound.count,\n        matches: unique(keywordsFound.matches).sort(function (a, b) {\n            return b.length - a.length;\n        })\n    };\n};\n//# sourceMappingURL=keywordCount.js.map\n//# sourceMappingURL=keywordCount.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/keywordCount.js\n// module id = 1420\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/keywordCount.js?");

/***/ }),
/* 1421 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsNaN.js\n// module id = 1421\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsNaN.js?");

/***/ }),
/* 1422 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_strictIndexOf.js\n// module id = 1422\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_strictIndexOf.js?");

/***/ }),
/* 1423 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Set = __webpack_require__(1196),\n    noop = __webpack_require__(1424),\n    setToArray = __webpack_require__(1087);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createSet.js\n// module id = 1423\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createSet.js?");

/***/ }),
/* 1424 */
/***/ (function(module, exports) {

eval("/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/noop.js\n// module id = 1424\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/noop.js?");

/***/ }),
/* 1425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module researches/stopWordsInKeyword */\n\nvar stopWordsInText = __webpack_require__(1231);\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Checks for the amount of stop words in the keyword.\n * @param {Paper} paper The Paper object to be checked against.\n * @returns {Array} All the stopwords that were found in the keyword.\n */\nmodule.exports = function (paper) {\n  var keyword = escapeRegExp(paper.getKeyword());\n  return stopWordsInText(keyword);\n};\n//# sourceMappingURL=stopWordsInKeyword.js.map\n//# sourceMappingURL=stopWordsInKeyword.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/stopWordsInKeyword.js\n// module id = 1425\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/stopWordsInKeyword.js?");

/***/ }),
/* 1426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/stopwords */\n/**\n * Returns an array with stopwords to be used by the analyzer.\n *\n * @returns {Array} stopwords The array filled with stopwords.\n */\n\nmodule.exports = function () {\n  return [\"a\", \"about\", \"above\", \"after\", \"again\", \"against\", \"all\", \"am\", \"an\", \"and\", \"any\", \"are\", \"as\", \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"below\", \"between\", \"both\", \"but\", \"by\", \"could\", \"did\", \"do\", \"does\", \"doing\", \"down\", \"during\", \"each\", \"few\", \"for\", \"from\", \"further\", \"had\", \"has\", \"have\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"how's\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\", \"it\", \"it's\", \"its\", \"itself\", \"let's\", \"me\", \"more\", \"most\", \"my\", \"myself\", \"nor\", \"of\", \"on\", \"once\", \"only\", \"or\", \"other\", \"ought\", \"our\", \"ours\", \"ourselves\", \"out\", \"over\", \"own\", \"same\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\", \"so\", \"some\", \"such\", \"than\", \"that\", \"that's\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"there's\", \"these\", \"they\", \"they'd\", \"they'll\", \"they're\", \"they've\", \"this\", \"those\", \"through\", \"to\", \"too\", \"under\", \"until\", \"up\", \"very\", \"was\", \"we\", \"we'd\", \"we'll\", \"we're\", \"we've\", \"were\", \"what\", \"what's\", \"when\", \"when's\", \"where\", \"where's\", \"which\", \"while\", \"who\", \"who's\", \"whom\", \"why\", \"why's\", \"with\", \"would\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\"];\n};\n//# sourceMappingURL=stopwords.js.map\n//# sourceMappingURL=stopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/stopwords.js\n// module id = 1426\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/stopwords.js?");

/***/ }),
/* 1427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/diacritics */\n/**\n * Returns the diacritics map\n *\n * @returns {array} diacritics map\n */\n\nmodule.exports = function () {\n    return [{\n        base: \"a\",\n        letters: /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g\n    }, { base: \"aa\", letters: /[\\uA733]/g }, { base: \"ae\", letters: /[\\u00E6\\u01FD\\u01E3]/g }, { base: \"ao\", letters: /[\\uA735]/g }, { base: \"au\", letters: /[\\uA737]/g }, { base: \"av\", letters: /[\\uA739\\uA73B]/g }, { base: \"ay\", letters: /[\\uA73D]/g }, { base: \"b\", letters: /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g }, {\n        base: \"c\",\n        letters: /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\n    }, {\n        base: \"d\",\n        letters: /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g\n    }, { base: \"dz\", letters: /[\\u01F3\\u01C6]/g }, {\n        base: \"e\",\n        letters: /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g\n    }, { base: \"f\", letters: /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g }, {\n        base: \"g\",\n        letters: /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g\n    }, {\n        base: \"h\",\n        letters: /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\n    }, { base: \"hv\", letters: /[\\u0195]/g }, {\n        base: \"i\",\n        letters: /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g\n    }, { base: \"j\", letters: /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g }, {\n        base: \"k\",\n        letters: /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g\n    }, {\n        base: \"l\",\n        letters: /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g\n    }, { base: \"lj\", letters: /[\\u01C9]/g }, { base: \"m\", letters: /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g }, {\n        base: \"n\",\n        letters: /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g\n    }, { base: \"nj\", letters: /[\\u01CC]/g }, {\n        base: \"o\",\n        letters: /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g\n    }, { base: \"oi\", letters: /[\\u01A3]/g }, { base: \"ou\", letters: /[\\u0223]/g }, { base: \"oo\", letters: /[\\uA74F]/g }, { base: \"p\", letters: /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g }, { base: \"q\", letters: /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g }, {\n        base: \"r\",\n        letters: /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g\n    }, {\n        base: \"s\",\n        letters: /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g\n    }, {\n        base: \"t\",\n        letters: /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g\n    }, { base: \"tz\", letters: /[\\uA729]/g }, {\n        base: \"u\",\n        letters: /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g\n    }, { base: \"v\", letters: /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g }, { base: \"vy\", letters: /[\\uA761]/g }, {\n        base: \"w\",\n        letters: /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\n    }, { base: \"x\", letters: /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g }, {\n        base: \"y\",\n        letters: /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g\n    }, {\n        base: \"z\",\n        letters: /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g\n    }];\n};\n//# sourceMappingURL=diacritics.js.map\n//# sourceMappingURL=diacritics.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/diacritics.js\n// module id = 1427\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/diacritics.js?");

/***/ }),
/* 1428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module researches/stopWordsInUrl */\n\nvar stopWordsInText = __webpack_require__(1231);\n/**\n * Matches stopwords in the URL. Replaces - and _ with whitespace.\n * @param {Paper} paper The Paper object to get the url from.\n * @returns {Array} stopwords found in URL\n */\nmodule.exports = function (paper) {\n  return stopWordsInText(paper.getUrl().replace(/[-_]/g, \" \"));\n};\n//# sourceMappingURL=stopWordsInUrl.js.map\n//# sourceMappingURL=stopWordsInUrl.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/stopWordsInUrl.js\n// module id = 1428\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/stopWordsInUrl.js?");

/***/ }),
/* 1429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/calculateFleschReading */\n\nvar stripNumbers = __webpack_require__(1430);\nvar countSentences = __webpack_require__(1431);\nvar countWords = __webpack_require__(185);\nvar countSyllables = __webpack_require__(1234);\nvar formatNumber = __webpack_require__(588);\nvar getLanguage = __webpack_require__(186);\n/**\n * Calculates an average from a total and an amount\n *\n * @param {number} total The total.\n * @param {number} amount The amount.\n * @returns {number} The average from the total and the amount.\n */\nvar getAverage = function getAverage(total, amount) {\n    return total / amount;\n};\n/**\n * This calculates the flesch reading score for a given text.\n *\n * @param {object} paper The paper containing the text\n * @returns {number} The score of the flesch reading test\n */\nmodule.exports = function (paper) {\n    var score = void 0;\n    var text = paper.getText();\n    var locale = paper.getLocale();\n    var language = getLanguage(locale);\n    if (text === \"\") {\n        return 0;\n    }\n    text = stripNumbers(text);\n    var numberOfSentences = countSentences(text);\n    var numberOfWords = countWords(text);\n    // Prevent division by zero errors.\n    if (numberOfSentences === 0 || numberOfWords === 0) {\n        return 0;\n    }\n    var numberOfSyllables = countSyllables(text, locale);\n    var averageWordsPerSentence = getAverage(numberOfWords, numberOfSentences);\n    var syllablesPer100Words = numberOfSyllables * (100 / numberOfWords);\n    switch (language) {\n        case \"nl\":\n            score = 206.84 - 0.77 * syllablesPer100Words - 0.93 * averageWordsPerSentence;\n            break;\n        case \"de\":\n            score = 180 - averageWordsPerSentence - 58.5 * numberOfSyllables / numberOfWords;\n            break;\n        case \"it\":\n            score = 217 - 1.3 * averageWordsPerSentence - 0.6 * syllablesPer100Words;\n            break;\n        case \"ru\":\n            score = 206.835 - 1.3 * numberOfWords / numberOfSentences - 60.1 * numberOfSyllables / numberOfWords;\n            break;\n        case \"es\":\n            score = 206.84 - 1.02 * numberOfWords / numberOfSentences - 0.6 * syllablesPer100Words;\n            break;\n        case \"fr\":\n            score = 207 - 1.015 * numberOfWords / numberOfSentences - 73.6 * numberOfSyllables / numberOfWords;\n            break;\n        case \"en\":\n        default:\n            score = 206.835 - 1.015 * averageWordsPerSentence - 84.6 * (numberOfSyllables / numberOfWords);\n            break;\n    }\n    return formatNumber(score);\n};\n//# sourceMappingURL=calculateFleschReading.js.map\n//# sourceMappingURL=calculateFleschReading.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/calculateFleschReading.js\n// module id = 1429\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/calculateFleschReading.js?");

/***/ }),
/* 1430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/stripNumbers */\n\nvar stripSpaces = __webpack_require__(84);\n/**\n * Removes all words comprised only of numbers.\n *\n * @param {string} text to remove words\n * @returns {string} The text with numberonly words removed.\n */\nmodule.exports = function (text) {\n    // Remove \"words\" comprised only of numbers\n    text = text.replace(/\\b[0-9]+\\b/g, \"\");\n    text = stripSpaces(text);\n    if (text === \".\") {\n        text = \"\";\n    }\n    return text;\n};\n//# sourceMappingURL=stripNumbers.js.map\n//# sourceMappingURL=stripNumbers.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripNumbers.js\n// module id = 1430\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripNumbers.js?");

/***/ }),
/* 1431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/countSentences */\n\nvar getSentences = __webpack_require__(215);\n/**\n * Counts the number of sentences in a given string.\n *\n * @param {string} text The text used to count sentences.\n * @returns {number} The number of sentences in the text.\n */\nmodule.exports = function (text) {\n    var sentences = getSentences(text);\n    var sentenceCount = 0;\n    for (var i = 0; i < sentences.length; i++) {\n        sentenceCount++;\n    }\n    return sentenceCount;\n};\n//# sourceMappingURL=countSentences.js.map\n//# sourceMappingURL=countSentences.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/countSentences.js\n// module id = 1431\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/countSentences.js?");

/***/ }),
/* 1432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/syllables */\n\nvar getLanguage = __webpack_require__(186);\nvar isUndefined = __webpack_require__(66);\nvar de = __webpack_require__(1433);\nvar en = __webpack_require__(1434);\nvar nl = __webpack_require__(1435);\nvar it = __webpack_require__(1436);\nvar ru = __webpack_require__(1437);\nvar fr = __webpack_require__(1438);\nvar es = __webpack_require__(1439);\nvar languages = { de: de, nl: nl, en: en, it: it, ru: ru, fr: fr, es: es };\nmodule.exports = function () {\n    var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"en_US\";\n\n    var language = getLanguage(locale);\n    if (languages.hasOwnProperty(language)) {\n        return languages[language];\n    }\n    // If an unknown locale is used, default to English.\n    return languages[\"en\"];\n};\n//# sourceMappingURL=syllables.js.map\n//# sourceMappingURL=syllables.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables.js\n// module id = 1432\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables.js?");

/***/ }),
/* 1433 */
/***/ (function(module, exports) {

eval("module.exports = {\"vowels\":\"aeiouyäöüáéâàèîêâûôœ\",\"deviations\":{\"vowels\":[{\"fragments\":[\"ouil\",\"deaux\",\"deau$\",\"oard\",\"äthiop\",\"euil\",\"veau\",\"eau$\",\"ueue\",\"lienisch\",\"ance$\",\"ence$\",\"time$\",\"once$\",\"ziat\",\"guette\",\"ête\",\"ôte$\",\"[hp]omme$\",\"[qdscn]ue$\",\"aire$\",\"ture$\",\"êpe$\",\"[^q]ui$\",\"tiche$\",\"vice$\",\"oile$\",\"zial\",\"cruis\",\"leas\",\"coa[ct]\",\"[^i]deal\",\"[fw]eat\",\"[lsx]ed$\"],\"countModifier\":-1},{\"fragments\":[\"aau\",\"a[äöüo]\",\"äue\",\"äeu\",\"aei\",\"aue\",\"aeu\",\"ael\",\"ai[aeo]\",\"saik\",\"aismus\",\"ä[aeoi]\",\"auä\",\"éa\",\"e[äaoö]\",\"ei[eo]\",\"ee[aeiou]\",\"eu[aäe]\",\"eum$\",\"eü\",\"o[aäöü]\",\"poet\",\"oo[eo]\",\"oie\",\"oei[^l]\",\"oeu[^f]\",\"öa\",\"[fgrz]ieu\",\"mieun\",\"tieur\",\"ieum\",\"i[aiuü]\",\"[^l]iä\",\"[^s]chien\",\"io[bcdfhjkmpqtuvwx]\",\"[bdhmprv]ion\",\"[lr]ior\",\"[^g]io[gs]\",\"[dr]ioz\",\"elioz\",\"zioni\",\"bio[lnorz]\",\"iö[^s]\",\"ie[ei]\",\"rier$\",\"öi[eg]\",\"[^r]öisch\",\"[^gqv]u[aeéioöuü]\",\"quie$\",\"quie[^s]\",\"uäu\",\"^us-\",\"^it-\",\"üe\",\"naiv\",\"aisch$\",\"aische$\",\"aische[nrs]$\",\"[lst]ien\",\"dien$\",\"gois\",\"[^g]rient\",\"[aeiou]y[aeiou]\",\"byi\",\"yä\",\"[a-z]y[ao]\",\"yau\",\"koor\",\"scient\",\"eriel\",\"[dg]oing\"],\"countModifier\":1},{\"fragments\":[\"eauü\",\"ioi\",\"ioo\",\"ioa\",\"iii\",\"oai\",\"eueu\"],\"countModifier\":1}],\"words\":{\"full\":[{\"word\":\"beach\",\"syllables\":1},{\"word\":\"beat\",\"syllables\":1},{\"word\":\"beau\",\"syllables\":1},{\"word\":\"beaune\",\"syllables\":1},{\"word\":\"belle\",\"syllables\":1},{\"word\":\"bouche\",\"syllables\":1},{\"word\":\"brake\",\"syllables\":1},{\"word\":\"cache\",\"syllables\":1},{\"word\":\"chaiselongue\",\"syllables\":2},{\"word\":\"choke\",\"syllables\":1},{\"word\":\"cordiale\",\"syllables\":3},{\"word\":\"core\",\"syllables\":1},{\"word\":\"dope\",\"syllables\":1},{\"word\":\"eat\",\"syllables\":1},{\"word\":\"eye\",\"syllables\":1},{\"word\":\"fake\",\"syllables\":1},{\"word\":\"fame\",\"syllables\":1},{\"word\":\"fatigue\",\"syllables\":2},{\"word\":\"femme\",\"syllables\":1},{\"word\":\"force\",\"syllables\":1},{\"word\":\"game\",\"syllables\":1},{\"word\":\"games\",\"syllables\":1},{\"word\":\"gate\",\"syllables\":1},{\"word\":\"grande\",\"syllables\":1},{\"word\":\"ice\",\"syllables\":1},{\"word\":\"ion\",\"syllables\":2},{\"word\":\"joke\",\"syllables\":1},{\"word\":\"jupe\",\"syllables\":1},{\"word\":\"maisch\",\"syllables\":1},{\"word\":\"maische\",\"syllables\":2},{\"word\":\"move\",\"syllables\":1},{\"word\":\"native\",\"syllables\":2},{\"word\":\"nice\",\"syllables\":1},{\"word\":\"one\",\"syllables\":1},{\"word\":\"pipe\",\"syllables\":1},{\"word\":\"prime\",\"syllables\":1},{\"word\":\"rate\",\"syllables\":1},{\"word\":\"rhythm\",\"syllables\":2},{\"word\":\"ride\",\"syllables\":1},{\"word\":\"rides\",\"syllables\":1},{\"word\":\"rien\",\"syllables\":2},{\"word\":\"save\",\"syllables\":1},{\"word\":\"science\",\"syllables\":2},{\"word\":\"siècle\",\"syllables\":1},{\"word\":\"site\",\"syllables\":1},{\"word\":\"suite\",\"syllables\":1},{\"word\":\"take\",\"syllables\":1},{\"word\":\"taupe\",\"syllables\":1},{\"word\":\"universe\",\"syllables\":3},{\"word\":\"vogue\",\"syllables\":1},{\"word\":\"wave\",\"syllables\":1},{\"word\":\"zion\",\"syllables\":2}],\"fragments\":{\"global\":[{\"word\":\"abreaktion\",\"syllables\":4},{\"word\":\"adware\",\"syllables\":2},{\"word\":\"affaire\",\"syllables\":3},{\"word\":\"aiguière\",\"syllables\":2},{\"word\":\"anisette\",\"syllables\":3},{\"word\":\"appeal\",\"syllables\":2},{\"word\":\"backstage\",\"syllables\":2},{\"word\":\"bankrate\",\"syllables\":2},{\"word\":\"baseball\",\"syllables\":2},{\"word\":\"basejump\",\"syllables\":2},{\"word\":\"beachcomber\",\"syllables\":3},{\"word\":\"beachvolleyball\",\"syllables\":4},{\"word\":\"beagle\",\"syllables\":2},{\"word\":\"beamer\",\"syllables\":2},{\"word\":\"beamer\",\"syllables\":2},{\"word\":\"béarnaise\",\"syllables\":3},{\"word\":\"beaufort\",\"syllables\":2},{\"word\":\"beaujolais\",\"syllables\":3},{\"word\":\"beauté\",\"syllables\":2},{\"word\":\"beauty\",\"syllables\":2},{\"word\":\"belgier\",\"syllables\":3},{\"word\":\"bestien\",\"syllables\":2},{\"word\":\"biskuit\",\"syllables\":2},{\"word\":\"bleach\",\"syllables\":1},{\"word\":\"blue\",\"syllables\":1},{\"word\":\"board\",\"syllables\":1},{\"word\":\"boat\",\"syllables\":1},{\"word\":\"bodysuit\",\"syllables\":3},{\"word\":\"bordelaise\",\"syllables\":3},{\"word\":\"break\",\"syllables\":1},{\"word\":\"build\",\"syllables\":1},{\"word\":\"bureau\",\"syllables\":2},{\"word\":\"business\",\"syllables\":2},{\"word\":\"cabrio\",\"syllables\":3},{\"word\":\"cabriolet\",\"syllables\":4},{\"word\":\"cachesexe\",\"syllables\":2},{\"word\":\"camaieu\",\"syllables\":3},{\"word\":\"canyon\",\"syllables\":2},{\"word\":\"case\",\"syllables\":1},{\"word\":\"catsuit\",\"syllables\":2},{\"word\":\"centime\",\"syllables\":3},{\"word\":\"chaise\",\"syllables\":2},{\"word\":\"champion\",\"syllables\":2},{\"word\":\"championat\",\"syllables\":3},{\"word\":\"chapiteau\",\"syllables\":3},{\"word\":\"chateau\",\"syllables\":2},{\"word\":\"château\",\"syllables\":2},{\"word\":\"cheat\",\"syllables\":1},{\"word\":\"cheese\",\"syllables\":1},{\"word\":\"chihuahua\",\"syllables\":3},{\"word\":\"choice\",\"syllables\":1},{\"word\":\"circonflexe\",\"syllables\":3},{\"word\":\"clean\",\"syllables\":1},{\"word\":\"cloche\",\"syllables\":1},{\"word\":\"close\",\"syllables\":1},{\"word\":\"clothes\",\"syllables\":1},{\"word\":\"commerce\",\"syllables\":2},{\"word\":\"crime\",\"syllables\":1},{\"word\":\"crossrate\",\"syllables\":2},{\"word\":\"cuisine\",\"syllables\":2},{\"word\":\"culotte\",\"syllables\":2},{\"word\":\"death\",\"syllables\":1},{\"word\":\"defense\",\"syllables\":2},{\"word\":\"détente\",\"syllables\":2},{\"word\":\"dread\",\"syllables\":1},{\"word\":\"dream\",\"syllables\":1},{\"word\":\"dresscode\",\"syllables\":2},{\"word\":\"dungeon\",\"syllables\":2},{\"word\":\"easy\",\"syllables\":2},{\"word\":\"engagement\",\"syllables\":3},{\"word\":\"entente\",\"syllables\":2},{\"word\":\"eye-catcher\",\"syllables\":3},{\"word\":\"eyecatcher\",\"syllables\":3},{\"word\":\"eyeliner\",\"syllables\":3},{\"word\":\"eyeword\",\"syllables\":2},{\"word\":\"fashion\",\"syllables\":2},{\"word\":\"feature\",\"syllables\":2},{\"word\":\"ferien\",\"syllables\":3},{\"word\":\"fineliner\",\"syllables\":3},{\"word\":\"fisheye\",\"syllables\":2},{\"word\":\"flake\",\"syllables\":1},{\"word\":\"flambeau\",\"syllables\":2},{\"word\":\"flatrate\",\"syllables\":2},{\"word\":\"fleece\",\"syllables\":1},{\"word\":\"fraîche\",\"syllables\":1},{\"word\":\"freak\",\"syllables\":1},{\"word\":\"frites\",\"syllables\":1},{\"word\":\"future\",\"syllables\":2},{\"word\":\"gaelic\",\"syllables\":2},{\"word\":\"game-show\",\"syllables\":2},{\"word\":\"gameboy\",\"syllables\":2},{\"word\":\"gamepad\",\"syllables\":2},{\"word\":\"gameplay\",\"syllables\":2},{\"word\":\"gameport\",\"syllables\":2},{\"word\":\"gameshow\",\"syllables\":2},{\"word\":\"garigue\",\"syllables\":2},{\"word\":\"garrigue\",\"syllables\":2},{\"word\":\"gatefold\",\"syllables\":2},{\"word\":\"gateway\",\"syllables\":2},{\"word\":\"geflashed\",\"syllables\":2},{\"word\":\"georgier\",\"syllables\":4},{\"word\":\"goal\",\"syllables\":1},{\"word\":\"grapefruit\",\"syllables\":2},{\"word\":\"great\",\"syllables\":1},{\"word\":\"groupware\",\"syllables\":2},{\"word\":\"gueule\",\"syllables\":1},{\"word\":\"guide\",\"syllables\":1},{\"word\":\"guilloche\",\"syllables\":2},{\"word\":\"gynäzeen\",\"syllables\":4},{\"word\":\"gynözeen\",\"syllables\":4},{\"word\":\"haircare\",\"syllables\":2},{\"word\":\"hardcore\",\"syllables\":2},{\"word\":\"hardware\",\"syllables\":2},{\"word\":\"head\",\"syllables\":1},{\"word\":\"hearing\",\"syllables\":2},{\"word\":\"heart\",\"syllables\":1},{\"word\":\"heavy\",\"syllables\":2},{\"word\":\"hedge\",\"syllables\":1},{\"word\":\"heroin\",\"syllables\":3},{\"word\":\"inclusive\",\"syllables\":3},{\"word\":\"initiative\",\"syllables\":4},{\"word\":\"inside\",\"syllables\":2},{\"word\":\"jaguar\",\"syllables\":3},{\"word\":\"jalousette\",\"syllables\":3},{\"word\":\"jeans\",\"syllables\":1},{\"word\":\"jeunesse\",\"syllables\":2},{\"word\":\"juice\",\"syllables\":1},{\"word\":\"jukebox\",\"syllables\":2},{\"word\":\"jumpsuit\",\"syllables\":2},{\"word\":\"kanarien\",\"syllables\":4},{\"word\":\"kapriole\",\"syllables\":4},{\"word\":\"karosserielinie\",\"syllables\":6},{\"word\":\"konopeen\",\"syllables\":4},{\"word\":\"lacrosse\",\"syllables\":2},{\"word\":\"laplace\",\"syllables\":2},{\"word\":\"late-\",\"syllables\":1},{\"word\":\"lead\",\"syllables\":1},{\"word\":\"league\",\"syllables\":1},{\"word\":\"learn\",\"syllables\":1},{\"word\":\"légière\",\"syllables\":2},{\"word\":\"lizenziat\",\"syllables\":4},{\"word\":\"load\",\"syllables\":1},{\"word\":\"lotterielos\",\"syllables\":4},{\"word\":\"lounge\",\"syllables\":1},{\"word\":\"lyzeen\",\"syllables\":3},{\"word\":\"madame\",\"syllables\":2},{\"word\":\"mademoiselle\",\"syllables\":3},{\"word\":\"magier\",\"syllables\":3},{\"word\":\"make-up\",\"syllables\":2},{\"word\":\"malware\",\"syllables\":2},{\"word\":\"management\",\"syllables\":3},{\"word\":\"manteau\",\"syllables\":2},{\"word\":\"mausoleen\",\"syllables\":4},{\"word\":\"mauve\",\"syllables\":1},{\"word\":\"medien\",\"syllables\":3},{\"word\":\"mesdames\",\"syllables\":2},{\"word\":\"mesopotamien\",\"syllables\":6},{\"word\":\"milliarde\",\"syllables\":3},{\"word\":\"missile\",\"syllables\":2},{\"word\":\"miszellaneen\",\"syllables\":5},{\"word\":\"mousse\",\"syllables\":1},{\"word\":\"mousseline\",\"syllables\":3},{\"word\":\"museen\",\"syllables\":3},{\"word\":\"musette\",\"syllables\":2},{\"word\":\"nahuatl\",\"syllables\":2},{\"word\":\"noisette\",\"syllables\":2},{\"word\":\"notebook\",\"syllables\":2},{\"word\":\"nuance\",\"syllables\":3},{\"word\":\"nuklease\",\"syllables\":4},{\"word\":\"odeen\",\"syllables\":3},{\"word\":\"offline\",\"syllables\":2},{\"word\":\"offside\",\"syllables\":2},{\"word\":\"oleaster\",\"syllables\":4},{\"word\":\"on-stage\",\"syllables\":2},{\"word\":\"online\",\"syllables\":2},{\"word\":\"orpheen\",\"syllables\":3},{\"word\":\"parforceritt\",\"syllables\":3},{\"word\":\"patiens\",\"syllables\":2},{\"word\":\"patient\",\"syllables\":2},{\"word\":\"peace\",\"syllables\":1},{\"word\":\"peace\",\"syllables\":1},{\"word\":\"peanuts\",\"syllables\":2},{\"word\":\"people\",\"syllables\":2},{\"word\":\"perineen\",\"syllables\":4},{\"word\":\"peritoneen\",\"syllables\":5},{\"word\":\"picture\",\"syllables\":2},{\"word\":\"piece\",\"syllables\":1},{\"word\":\"pipeline\",\"syllables\":2},{\"word\":\"plateau\",\"syllables\":2},{\"word\":\"poesie\",\"syllables\":3},{\"word\":\"poleposition\",\"syllables\":4},{\"word\":\"portemanteau\",\"syllables\":3},{\"word\":\"portemonnaie\",\"syllables\":3},{\"word\":\"primerate\",\"syllables\":2},{\"word\":\"primerate\",\"syllables\":2},{\"word\":\"primetime\",\"syllables\":2},{\"word\":\"protease\",\"syllables\":4},{\"word\":\"protein\",\"syllables\":3},{\"word\":\"prytaneen\",\"syllables\":4},{\"word\":\"quotient\",\"syllables\":2},{\"word\":\"radio\",\"syllables\":3},{\"word\":\"reader\",\"syllables\":2},{\"word\":\"ready\",\"syllables\":2},{\"word\":\"reallife\",\"syllables\":2},{\"word\":\"repeat\",\"syllables\":2},{\"word\":\"retake\",\"syllables\":2},{\"word\":\"rigole\",\"syllables\":2},{\"word\":\"risolle\",\"syllables\":2},{\"word\":\"road\",\"syllables\":1},{\"word\":\"roaming\",\"syllables\":2},{\"word\":\"roquefort\",\"syllables\":2},{\"word\":\"safe\",\"syllables\":1},{\"word\":\"savonette\",\"syllables\":3},{\"word\":\"sciencefiction\",\"syllables\":3},{\"word\":\"search\",\"syllables\":1},{\"word\":\"selfmade\",\"syllables\":2},{\"word\":\"septime\",\"syllables\":3},{\"word\":\"serapeen\",\"syllables\":4},{\"word\":\"service\",\"syllables\":2},{\"word\":\"serviette\",\"syllables\":2},{\"word\":\"share\",\"syllables\":1},{\"word\":\"shave\",\"syllables\":1},{\"word\":\"shore\",\"syllables\":1},{\"word\":\"sidebar\",\"syllables\":2},{\"word\":\"sideboard\",\"syllables\":2},{\"word\":\"sidekick\",\"syllables\":2},{\"word\":\"silhouette\",\"syllables\":3},{\"word\":\"sitemap\",\"syllables\":2},{\"word\":\"slide\",\"syllables\":1},{\"word\":\"sneak\",\"syllables\":1},{\"word\":\"soap\",\"syllables\":1},{\"word\":\"softcore\",\"syllables\":2},{\"word\":\"software\",\"syllables\":2},{\"word\":\"soutanelle\",\"syllables\":3},{\"word\":\"speak\",\"syllables\":1},{\"word\":\"special\",\"syllables\":2},{\"word\":\"spracheinstellung\",\"syllables\":5},{\"word\":\"spyware\",\"syllables\":2},{\"word\":\"square\",\"syllables\":1},{\"word\":\"stagediving\",\"syllables\":3},{\"word\":\"stakeholder\",\"syllables\":3},{\"word\":\"statement\",\"syllables\":2},{\"word\":\"steady\",\"syllables\":2},{\"word\":\"steak\",\"syllables\":1},{\"word\":\"stealth\",\"syllables\":1},{\"word\":\"steam\",\"syllables\":1},{\"word\":\"stoned\",\"syllables\":1},{\"word\":\"stracciatella\",\"syllables\":4},{\"word\":\"stream\",\"syllables\":1},{\"word\":\"stride\",\"syllables\":1},{\"word\":\"strike\",\"syllables\":1},{\"word\":\"suitcase\",\"syllables\":2},{\"word\":\"sweepstake\",\"syllables\":2},{\"word\":\"t-bone\",\"syllables\":2},{\"word\":\"t-shirt\",\"syllables\":1},{\"word\":\"tailgate\",\"syllables\":2},{\"word\":\"take-off\",\"syllables\":2},{\"word\":\"take-over\",\"syllables\":3},{\"word\":\"takeaway\",\"syllables\":3},{\"word\":\"takeoff\",\"syllables\":2},{\"word\":\"takeover\",\"syllables\":3},{\"word\":\"throat\",\"syllables\":1},{\"word\":\"time-out\",\"syllables\":2},{\"word\":\"timelag\",\"syllables\":2},{\"word\":\"timeline\",\"syllables\":2},{\"word\":\"timesharing\",\"syllables\":3},{\"word\":\"toast\",\"syllables\":1},{\"word\":\"traubenmaische\",\"syllables\":4},{\"word\":\"tristesse\",\"syllables\":2},{\"word\":\"usenet\",\"syllables\":2},{\"word\":\"varietät\",\"syllables\":4},{\"word\":\"varieté\",\"syllables\":4},{\"word\":\"vinaigrette\",\"syllables\":3},{\"word\":\"vintage\",\"syllables\":2},{\"word\":\"violett\",\"syllables\":3},{\"word\":\"voice\",\"syllables\":1},{\"word\":\"wakeboard\",\"syllables\":2},{\"word\":\"washed\",\"syllables\":1},{\"word\":\"waveboard\",\"syllables\":2},{\"word\":\"wear\",\"syllables\":1},{\"word\":\"wear\",\"syllables\":1},{\"word\":\"website\",\"syllables\":2},{\"word\":\"white\",\"syllables\":1},{\"word\":\"widescreen\",\"syllables\":2},{\"word\":\"wire\",\"syllables\":1},{\"word\":\"yacht\",\"syllables\":1},{\"word\":\"yorkshire\",\"syllables\":2},{\"word\":\"éprouvette\",\"syllables\":3,\"notFollowedBy\":[\"n\"]},{\"word\":\"galette\",\"syllables\":2,\"notFollowedBy\":[\"n\"]},{\"word\":\"gigue\",\"syllables\":1,\"notFollowedBy\":[\"n\"]},{\"word\":\"groove\",\"syllables\":1,\"notFollowedBy\":[\"n\"]},{\"word\":\"morgue\",\"syllables\":1,\"notFollowedBy\":[\"n\"]},{\"word\":\"paillette\",\"syllables\":2,\"notFollowedBy\":[\"n\"]},{\"word\":\"raclette\",\"syllables\":2,\"notFollowedBy\":[\"n\"]},{\"word\":\"roulette\",\"syllables\":2,\"notFollowedBy\":[\"n\"]},{\"word\":\"spike\",\"syllables\":1,\"notFollowedBy\":[\"n\"]},{\"word\":\"style\",\"syllables\":1,\"notFollowedBy\":[\"n\"]},{\"word\":\"tablette\",\"syllables\":2,\"notFollowedBy\":[\"n\"]},{\"word\":\"grunge\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"size\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"value\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"quiche\",\"syllables\":1,\"notFollowedBy\":[\"s\"]},{\"word\":\"house\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\"]},{\"word\":\"sauce\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\"]},{\"word\":\"space\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\"]},{\"word\":\"airline\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"autosave\",\"syllables\":3,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"bagpipe\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"bike\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"dance\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"deadline\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"halfpipe\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"headline\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"home\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"hornpipe\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"hotline\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"infoline\",\"syllables\":3,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"inline\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"kite\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"rollerblade\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"score\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"skyline\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"slackline\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"slice\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"snooze\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"storyline\",\"syllables\":3,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"office\",\"syllables\":2,\"notFollowedBy\":[\"s\",\"r\"]},{\"word\":\"space\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\",\"r\"]},{\"word\":\"tease\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\",\"r\"]},{\"word\":\"cache\",\"syllables\":1,\"notFollowedBy\":[\"t\"]}],\"atBeginningOrEnd\":[{\"word\":\"case\",\"syllables\":1},{\"word\":\"life\",\"syllables\":1},{\"word\":\"teak\",\"syllables\":1},{\"word\":\"team\",\"syllables\":1},{\"word\":\"creme\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"crème\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"drive\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"skate\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"update\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"upgrade\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]}],\"atBeginning\":[{\"word\":\"anion\",\"syllables\":3},{\"word\":\"facelift\",\"syllables\":2},{\"word\":\"jiu\",\"syllables\":1},{\"word\":\"pace\",\"syllables\":1},{\"word\":\"shake\",\"syllables\":1},{\"word\":\"tea\",\"syllables\":1},{\"word\":\"trade\",\"syllables\":1},{\"word\":\"deal\",\"syllables\":1}],\"atEnd\":[{\"word\":\"face\",\"syllables\":1},{\"word\":\"file\",\"syllables\":1},{\"word\":\"mousse\",\"syllables\":1},{\"word\":\"plate\",\"syllables\":1},{\"word\":\"tape\",\"syllables\":1},{\"word\":\"byte\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"cape\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"five\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"hype\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"leak\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"like\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"make\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"phone\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"rave\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"regime\",\"syllables\":2,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"statue\",\"syllables\":2,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"store\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"wave\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"date\",\"syllables\":1,\"notFollowedBy\":[\"n\"]},{\"word\":\"image\",\"syllables\":2,\"notFollowedBy\":[\"s\"]}]}}}}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/de.json\n// module id = 1433\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/de.json?");

/***/ }),
/* 1434 */
/***/ (function(module, exports) {

eval("module.exports = {\"vowels\":\"aeiouy\",\"deviations\":{\"vowels\":[{\"fragments\":[\"cial\",\"tia\",\"cius\",\"giu\",\"ion\",\"[^bdnprv]iou\",\"sia$\",\"[^aeiuot]{2,}ed$\",\"[aeiouy][^aeiuoyts]{1,}e$\",\"[a-z]ely$\",\"[cgy]ed$\",\"rved$\",\"[aeiouy][dt]es?$\",\"eau\",\"ieu\",\"oeu\",\"[aeiouy][^aeiouydt]e[sd]?$\",\"[aeouy]rse$\",\"^eye\"],\"countModifier\":-1},{\"fragments\":[\"ia\",\"iu\",\"ii\",\"io\",\"[aeio][aeiou]{2}\",\"[aeiou]ing\",\"[^aeiou]ying\",\"ui[aeou]\"],\"countModifier\":1},{\"fragments\":[\"^ree[jmnpqrsx]\",\"^reele\",\"^reeva\",\"riet\",\"dien\",\"[aeiouym][bdp]le$\",\"uei\",\"uou\",\"^mc\",\"ism$\",\"[^l]lien\",\"^coa[dglx].\",\"[^gqauieo]ua[^auieo]\",\"dn't$\",\"uity$\",\"ie(r|st)\",\"[aeiouw]y[aeiou]\",\"[^ao]ire[ds]\",\"[^ao]ire$\"],\"countModifier\":1},{\"fragments\":[\"eoa\",\"eoo\",\"ioa\",\"ioe\",\"ioo\"],\"countModifier\":1}],\"words\":{\"full\":[{\"word\":\"business\",\"syllables\":2},{\"word\":\"coheiress\",\"syllables\":3},{\"word\":\"colonel\",\"syllables\":2},{\"word\":\"heiress\",\"syllables\":2},{\"word\":\"i.e\",\"syllables\":2},{\"word\":\"shoreline\",\"syllables\":2},{\"word\":\"simile\",\"syllables\":3},{\"word\":\"unheired\",\"syllables\":2},{\"word\":\"wednesday\",\"syllables\":2}],\"fragments\":{\"global\":[{\"word\":\"coyote\",\"syllables\":3},{\"word\":\"graveyard\",\"syllables\":2},{\"word\":\"lawyer\",\"syllables\":2}]}}}}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/en.json\n// module id = 1434\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/en.json?");

/***/ }),
/* 1435 */
/***/ (function(module, exports) {

eval("module.exports = {\"vowels\":\"aáäâeéëêiíïîoóöôuúüûy\",\"deviations\":{\"vowels\":[{\"fragments\":[\"ue$\",\"dge$\",\"[tcp]iënt\",\"ace$\",\"[br]each\",\"[ainpr]tiaal\",\"[io]tiaan\",\"gua[yc]\",\"[^i]deal\",\"tive$\",\"load\",\"[^e]coke\",\"[^s]core$\"],\"countModifier\":-1},{\"fragments\":[\"aä\",\"aeu\",\"aie\",\"ao\",\"ë\",\"eo\",\"eú\",\"ieau\",\"ea$\",\"ea[^u]\",\"ei[ej]\",\"eu[iu]\",\"ï\",\"iei\",\"ienne\",\"[^l]ieu[^w]\",\"[^l]ieu$\",\"i[auiy]\",\"stion\",\"[^cstx]io\",\"^sion\",\"riè\",\"oö\",\"oa\",\"oeing\",\"oie\",\"[eu]ü\",\"[^q]u[aeèo]\",\"uie\",\"[bhnpr]ieel\",\"[bhnpr]iël\"],\"countModifier\":1},{\"fragments\":[\"[aeolu]y[aeéèoóu]\"],\"countModifier\":1}],\"words\":{\"full\":[{\"word\":\"bye\",\"syllables\":1},{\"word\":\"core\",\"syllables\":1},{\"word\":\"cure\",\"syllables\":1},{\"word\":\"dei\",\"syllables\":2},{\"word\":\"dope\",\"syllables\":1},{\"word\":\"dude\",\"syllables\":1},{\"word\":\"fake\",\"syllables\":1},{\"word\":\"fame\",\"syllables\":1},{\"word\":\"five\",\"syllables\":1},{\"word\":\"hole\",\"syllables\":1},{\"word\":\"least\",\"syllables\":1},{\"word\":\"lone\",\"syllables\":1},{\"word\":\"minute\",\"syllables\":2},{\"word\":\"move\",\"syllables\":1},{\"word\":\"nice\",\"syllables\":1},{\"word\":\"one\",\"syllables\":1},{\"word\":\"state\",\"syllables\":1},{\"word\":\"surplace\",\"syllables\":2},{\"word\":\"take\",\"syllables\":1},{\"word\":\"trade\",\"syllables\":1},{\"word\":\"wide\",\"syllables\":1}],\"fragments\":{\"global\":[{\"word\":\"adieu\",\"syllables\":2},{\"word\":\"airline\",\"syllables\":2},{\"word\":\"airmiles\",\"syllables\":2},{\"word\":\"alien\",\"syllables\":3},{\"word\":\"ambient\",\"syllables\":3},{\"word\":\"announcement\",\"syllables\":3},{\"word\":\"appearance\",\"syllables\":3},{\"word\":\"appeasement\",\"syllables\":3},{\"word\":\"atheneum\",\"syllables\":4},{\"word\":\"awesome\",\"syllables\":2},{\"word\":\"baccalaurei\",\"syllables\":5},{\"word\":\"baccalaureus\",\"syllables\":5},{\"word\":\"baseball\",\"syllables\":3},{\"word\":\"basejump\",\"syllables\":2},{\"word\":\"banlieue\",\"syllables\":3},{\"word\":\"bapao\",\"syllables\":2},{\"word\":\"barbecue\",\"syllables\":3},{\"word\":\"beamer\",\"syllables\":2},{\"word\":\"beanie\",\"syllables\":2},{\"word\":\"beat\",\"syllables\":1},{\"word\":\"belle\",\"syllables\":2},{\"word\":\"bête\",\"syllables\":1},{\"word\":\"bingewatch\",\"syllables\":2},{\"word\":\"blocnote\",\"syllables\":2},{\"word\":\"blue\",\"syllables\":1},{\"word\":\"board\",\"syllables\":1},{\"word\":\"break\",\"syllables\":1},{\"word\":\"broad\",\"syllables\":1},{\"word\":\"bulls-eye\",\"syllables\":2},{\"word\":\"business\",\"syllables\":2},{\"word\":\"byebye\",\"syllables\":2},{\"word\":\"cacao\",\"syllables\":2},{\"word\":\"caesar\",\"syllables\":2},{\"word\":\"camaieu\",\"syllables\":3},{\"word\":\"caoutchouc\",\"syllables\":2},{\"word\":\"carbolineum\",\"syllables\":5},{\"word\":\"catchphrase\",\"syllables\":1},{\"word\":\"carrier\",\"syllables\":3},{\"word\":\"cheat\",\"syllables\":1},{\"word\":\"cheese\",\"syllables\":1},{\"word\":\"circonflexe\",\"syllables\":3},{\"word\":\"clean\",\"syllables\":1},{\"word\":\"cloak\",\"syllables\":1},{\"word\":\"cobuying\",\"syllables\":3},{\"word\":\"comeback\",\"syllables\":2},{\"word\":\"comfortzone\",\"syllables\":3},{\"word\":\"communiqué\",\"syllables\":4},{\"word\":\"conopeum\",\"syllables\":4},{\"word\":\"console\",\"syllables\":2},{\"word\":\"corporate\",\"syllables\":3},{\"word\":\"coûte\",\"syllables\":1},{\"word\":\"creamer\",\"syllables\":2},{\"word\":\"crime\",\"syllables\":1},{\"word\":\"cruesli\",\"syllables\":2},{\"word\":\"deadline\",\"syllables\":2},{\"word\":\"deautoriseren\",\"syllables\":6},{\"word\":\"deuce\",\"syllables\":1},{\"word\":\"deum\",\"syllables\":2},{\"word\":\"dirndl\",\"syllables\":2},{\"word\":\"dread\",\"syllables\":2},{\"word\":\"dreamteam\",\"syllables\":2},{\"word\":\"drone\",\"syllables\":1},{\"word\":\"enquête\",\"syllables\":3},{\"word\":\"escape\",\"syllables\":2},{\"word\":\"exposure\",\"syllables\":3},{\"word\":\"extranei\",\"syllables\":4},{\"word\":\"extraneus\",\"syllables\":4},{\"word\":\"eyecatcher\",\"syllables\":3},{\"word\":\"eyeliner\",\"syllables\":3},{\"word\":\"eyeopener\",\"syllables\":4},{\"word\":\"eyetracker\",\"syllables\":3},{\"word\":\"eyetracking\",\"syllables\":3},{\"word\":\"fairtrade\",\"syllables\":2},{\"word\":\"fauteuil\",\"syllables\":2},{\"word\":\"feature\",\"syllables\":2},{\"word\":\"feuilletee\",\"syllables\":3},{\"word\":\"feuilleton\",\"syllables\":3},{\"word\":\"fisheye\",\"syllables\":2},{\"word\":\"fineliner\",\"syllables\":3},{\"word\":\"finetunen\",\"syllables\":3},{\"word\":\"forehand\",\"syllables\":2},{\"word\":\"freak\",\"syllables\":1},{\"word\":\"fusioneren\",\"syllables\":4},{\"word\":\"gayparade\",\"syllables\":3},{\"word\":\"gaypride\",\"syllables\":2},{\"word\":\"goal\",\"syllables\":1},{\"word\":\"grapefruit\",\"syllables\":2},{\"word\":\"gruyère\",\"syllables\":3},{\"word\":\"guele\",\"syllables\":1},{\"word\":\"guerrilla\",\"syllables\":3},{\"word\":\"guest\",\"syllables\":1},{\"word\":\"hardware\",\"syllables\":2},{\"word\":\"haute\",\"syllables\":1},{\"word\":\"healing\",\"syllables\":2},{\"word\":\"heater\",\"syllables\":2},{\"word\":\"heavy\",\"syllables\":2},{\"word\":\"hoax\",\"syllables\":1},{\"word\":\"hotline\",\"syllables\":2},{\"word\":\"idee-fixe\",\"syllables\":3},{\"word\":\"inclusive\",\"syllables\":3},{\"word\":\"inline\",\"syllables\":2},{\"word\":\"intake\",\"syllables\":2},{\"word\":\"intensive\",\"syllables\":3},{\"word\":\"jeans\",\"syllables\":1},{\"word\":\"Jones\",\"syllables\":1},{\"word\":\"jubileum\",\"syllables\":4},{\"word\":\"kalfsribeye\",\"syllables\":3},{\"word\":\"kraaiennest\",\"syllables\":3},{\"word\":\"lastminute\",\"syllables\":3},{\"word\":\"learning\",\"syllables\":2},{\"word\":\"league\",\"syllables\":1},{\"word\":\"line-up\",\"syllables\":2},{\"word\":\"linoleum\",\"syllables\":4},{\"word\":\"load\",\"syllables\":1},{\"word\":\"loafer\",\"syllables\":2},{\"word\":\"longread\",\"syllables\":2},{\"word\":\"lookalike\",\"syllables\":3},{\"word\":\"louis\",\"syllables\":3},{\"word\":\"lyceum\",\"syllables\":3},{\"word\":\"magazine\",\"syllables\":3},{\"word\":\"mainstream\",\"syllables\":2},{\"word\":\"make-over\",\"syllables\":3},{\"word\":\"make-up\",\"syllables\":2},{\"word\":\"malware\",\"syllables\":2},{\"word\":\"marmoleum\",\"syllables\":4},{\"word\":\"mausoleum\",\"syllables\":4},{\"word\":\"medeauteur\",\"syllables\":4},{\"word\":\"midlifecrisis\",\"syllables\":4},{\"word\":\"migraineaura\",\"syllables\":5},{\"word\":\"milkshake\",\"syllables\":2},{\"word\":\"millefeuille\",\"syllables\":4},{\"word\":\"mixed\",\"syllables\":1},{\"word\":\"muesli\",\"syllables\":2},{\"word\":\"museum\",\"syllables\":3},{\"word\":\"must-have\",\"syllables\":2},{\"word\":\"must-read\",\"syllables\":2},{\"word\":\"notebook\",\"syllables\":2},{\"word\":\"nonsense\",\"syllables\":2},{\"word\":\"nowhere\",\"syllables\":2},{\"word\":\"nurture\",\"syllables\":2},{\"word\":\"offline\",\"syllables\":2},{\"word\":\"oneliner\",\"syllables\":3},{\"word\":\"onesie\",\"syllables\":2},{\"word\":\"online\",\"syllables\":2},{\"word\":\"opinion\",\"syllables\":3},{\"word\":\"paella\",\"syllables\":3},{\"word\":\"pacemaker\",\"syllables\":3},{\"word\":\"panache\",\"syllables\":2},{\"word\":\"papegaaienneus\",\"syllables\":5},{\"word\":\"passe-partout\",\"syllables\":3},{\"word\":\"peanuts\",\"syllables\":2},{\"word\":\"perigeum\",\"syllables\":4},{\"word\":\"perineum\",\"syllables\":4},{\"word\":\"perpetuum\",\"syllables\":4},{\"word\":\"petroleum\",\"syllables\":4},{\"word\":\"phone\",\"syllables\":3},{\"word\":\"picture\",\"syllables\":2},{\"word\":\"placemat\",\"syllables\":2},{\"word\":\"porte-manteau\",\"syllables\":3},{\"word\":\"portefeuille\",\"syllables\":4},{\"word\":\"presse-papier\",\"syllables\":3},{\"word\":\"primetime\",\"syllables\":2},{\"word\":\"queen\",\"syllables\":1},{\"word\":\"questionnaire\",\"syllables\":3},{\"word\":\"queue\",\"syllables\":1},{\"word\":\"reader\",\"syllables\":2},{\"word\":\"reality\",\"syllables\":3},{\"word\":\"reallife\",\"syllables\":2},{\"word\":\"remake\",\"syllables\":2},{\"word\":\"repeat\",\"syllables\":2},{\"word\":\"repertoire\",\"syllables\":3},{\"word\":\"research\",\"syllables\":2},{\"word\":\"reverence\",\"syllables\":3},{\"word\":\"ribeye\",\"syllables\":2},{\"word\":\"ringtone\",\"syllables\":3},{\"word\":\"road\",\"syllables\":1},{\"word\":\"roaming\",\"syllables\":2},{\"word\":\"sciencefiction\",\"syllables\":4},{\"word\":\"selfmade\",\"syllables\":2},{\"word\":\"sidekick\",\"syllables\":2},{\"word\":\"sightseeing\",\"syllables\":3},{\"word\":\"skyline\",\"syllables\":2},{\"word\":\"smile\",\"syllables\":1},{\"word\":\"sneaky\",\"syllables\":2},{\"word\":\"software\",\"syllables\":2},{\"word\":\"sparerib\",\"syllables\":2},{\"word\":\"speaker\",\"syllables\":2},{\"word\":\"spread\",\"syllables\":1},{\"word\":\"statement\",\"syllables\":2},{\"word\":\"steak\",\"syllables\":1},{\"word\":\"steeplechase\",\"syllables\":3},{\"word\":\"stonewash\",\"syllables\":2},{\"word\":\"store\",\"syllables\":1},{\"word\":\"streaken\",\"syllables\":2},{\"word\":\"stream\",\"syllables\":1},{\"word\":\"streetware\",\"syllables\":1},{\"word\":\"supersoaker\",\"syllables\":4},{\"word\":\"surprise-party\",\"syllables\":4},{\"word\":\"sweater\",\"syllables\":2},{\"word\":\"teaser\",\"syllables\":2},{\"word\":\"tenue\",\"syllables\":2},{\"word\":\"template\",\"syllables\":2},{\"word\":\"timeline\",\"syllables\":2},{\"word\":\"tissue\",\"syllables\":2},{\"word\":\"toast\",\"syllables\":1},{\"word\":\"tête-à-tête\",\"syllables\":3},{\"word\":\"typecast\",\"syllables\":2},{\"word\":\"unique\",\"syllables\":2},{\"word\":\"ureum\",\"syllables\":3},{\"word\":\"vibe\",\"syllables\":1},{\"word\":\"vieux\",\"syllables\":1},{\"word\":\"ville\",\"syllables\":1},{\"word\":\"vintage\",\"syllables\":2},{\"word\":\"wandelyup\",\"syllables\":3},{\"word\":\"wiseguy\",\"syllables\":2},{\"word\":\"wake-up-call\",\"syllables\":3},{\"word\":\"webcare\",\"syllables\":2},{\"word\":\"winegum\",\"syllables\":2},{\"word\":\"base\",\"syllables\":1,\"notFollowedBy\":[\"e\",\"n\",\"r\"]},{\"word\":\"game\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"l\",\"r\"]},{\"word\":\"style\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\"]},{\"word\":\"douche\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\"]},{\"word\":\"space\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"s\"]},{\"word\":\"striptease\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"s\"]},{\"word\":\"jive\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"keynote\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"mountainbike\",\"syllables\":3,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"face\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"t\"]},{\"word\":\"challenge\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"cruise\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"house\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"dance\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"franchise\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"freelance\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"lease\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"linedance\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"lounge\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"merchandise\",\"syllables\":3,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"performance\",\"syllables\":3,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"release\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"resource\",\"syllables\":2,\"notFollowedBy\":[\"n\",\"r\",\"s\"]},{\"word\":\"cache\",\"syllables\":1,\"notFollowedBy\":[\"c\",\"l\",\"n\",\"t\",\"x\"]},{\"word\":\"office\",\"syllables\":2,\"notFollowedBy\":[\"r\",\"s\"]},{\"word\":\"close\",\"syllables\":1,\"notFollowedBy\":[\"r\",\"t\"]}],\"atBeginningOrEnd\":[{\"word\":\"byte\",\"syllables\":1},{\"word\":\"cake\",\"syllables\":1},{\"word\":\"care\",\"syllables\":1},{\"word\":\"coach\",\"syllables\":1},{\"word\":\"coat\",\"syllables\":1},{\"word\":\"earl\",\"syllables\":1},{\"word\":\"foam\",\"syllables\":1},{\"word\":\"gate\",\"syllables\":1},{\"word\":\"head\",\"syllables\":1},{\"word\":\"home\",\"syllables\":1},{\"word\":\"live\",\"syllables\":1},{\"word\":\"safe\",\"syllables\":1},{\"word\":\"site\",\"syllables\":1},{\"word\":\"soap\",\"syllables\":1},{\"word\":\"teak\",\"syllables\":1},{\"word\":\"team\",\"syllables\":1},{\"word\":\"wave\",\"syllables\":1},{\"word\":\"brace\",\"syllables\":1,\"notFollowedBy\":[\"s\"]},{\"word\":\"case\",\"syllables\":1,\"notFollowedBy\":[\"s\"]},{\"word\":\"fleece\",\"syllables\":1,\"notFollowedBy\":[\"s\"]},{\"word\":\"service\",\"syllables\":2,\"notFollowedBy\":[\"s\"]},{\"word\":\"voice\",\"syllables\":1,\"notFollowedBy\":[\"s\"]},{\"word\":\"kite\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"skate\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"race\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\",\"s\"]}],\"atBeginning\":[{\"word\":\"coke\",\"syllables\":1},{\"word\":\"deal\",\"syllables\":1},{\"word\":\"image\",\"syllables\":2,\"notFollowedBy\":[\"s\"]}],\"atEnd\":[{\"word\":\"force\",\"syllables\":1},{\"word\":\"tea\",\"syllables\":1},{\"word\":\"time\",\"syllables\":1},{\"word\":\"date\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"hype\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"quote\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"tape\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"upgrade\",\"syllables\":2,\"alsoFollowedBy\":[\"s\"]}]}}}}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/nl.json\n// module id = 1435\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/nl.json?");

/***/ }),
/* 1436 */
/***/ (function(module, exports) {

eval("module.exports = {\"vowels\":\"aeiouyàèéìîïòù\",\"deviations\":{\"vowels\":[{\"fragments\":[\"a[íúeo]\",\"e[íúao]\",\"o[íúaeè]\",\"í[aeo]\",\"ú[aeo]\",\"ai[aeou]\",\"àii\",\"aiì\",\"au[eé]\",\"ei[aàeèé]\",\"èia\",\"ia[èiì]\",\"iài\",\"oi[aàeèo]\",\"òia\",\"óio\",\"uí\",\"ui[aàó]\",\"ùio\",\"ouï\",\"coo[cmnpr]\",\"lcool\",\"coòf\",\"[aeuioìùèéàò]y[aeuioíìùèàó]\",\"ìa$\",\"èa$\"],\"countModifier\":1},{\"fragments\":[\"aoi\",\"aoì\",\"ioe\",\"riae\",\"ïa$\"],\"countModifier\":1}],\"words\":{\"full\":[{\"word\":\"via\",\"syllables\":2},{\"word\":\"guaime\",\"syllables\":3},{\"word\":\"guaina\",\"syllables\":3},{\"word\":\"coke\",\"syllables\":1},{\"word\":\"frame\",\"syllables\":1},{\"word\":\"goal\",\"syllables\":1},{\"word\":\"live\",\"syllables\":1},{\"word\":\"mouse\",\"syllables\":1},{\"word\":\"coon\",\"syllables\":1}],\"fragments\":{\"global\":[{\"word\":\"mayoyào\",\"syllables\":4},{\"word\":\"eye-liner\",\"syllables\":3},{\"word\":\"scooner\",\"syllables\":2},{\"word\":\"cocoon\",\"syllables\":2},{\"word\":\"silhouette\",\"syllables\":4},{\"word\":\"circuíto\",\"syllables\":4},{\"word\":\"cruento\",\"syllables\":3},{\"word\":\"cruènto\",\"syllables\":3},{\"word\":\"rituale\",\"syllables\":4},{\"word\":\"duello\",\"syllables\":3},{\"word\":\"fuorviante\",\"syllables\":4},{\"word\":\"league\",\"syllables\":1},{\"word\":\"leader\",\"syllables\":2},{\"word\":\"appeal\",\"syllables\":2},{\"word\":\"backstage\",\"syllables\":2},{\"word\":\"badge\",\"syllables\":1},{\"word\":\"baseball\",\"syllables\":2},{\"word\":\"beauty\",\"syllables\":2},{\"word\":\"bondage\",\"syllables\":2,\"notFollowedBy\":[\"s\"]},{\"word\":\"break\",\"syllables\":1},{\"word\":\"brokerage\",\"syllables\":3},{\"word\":\"business\",\"syllables\":2},{\"word\":\"cache\",\"syllables\":2,\"notFollowedBy\":[\"s\",\"r\"]},{\"word\":\"cashmere\",\"syllables\":2},{\"word\":\"challenge\",\"syllables\":2,\"notFollowedBy\":[\"s\",\"r\"]},{\"word\":\"charleston\",\"syllables\":2},{\"word\":\"cheap\",\"syllables\":1},{\"word\":\"cottage\",\"syllables\":2,\"notFollowedBy\":[\"s\"]},{\"word\":\"cruise\",\"syllables\":1,\"notFollowedBy\":[\"s\",\"r\"]},{\"word\":\"device\",\"syllables\":2,\"notFollowedBy\":[\"s\"]},{\"word\":\"downgrade\",\"syllables\":2,\"notFollowedBy\":[\"d\"]},{\"word\":\"download\",\"syllables\":2},{\"word\":\"drive\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"endorsement\",\"syllables\":3},{\"word\":\"drive\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"executive\",\"syllables\":4},{\"word\":\"firmware\",\"syllables\":2},{\"word\":\"fobia\",\"syllables\":3},{\"word\":\"float\",\"syllables\":1},{\"word\":\"freak\",\"syllables\":1},{\"word\":\"game\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"guideline\",\"syllables\":2},{\"word\":\"hardware\",\"syllables\":2},{\"word\":\"homeless\",\"syllables\":2},{\"word\":\"hardware\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"hardware\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"hardware\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"hospice\",\"syllables\":2,\"notFollowedBy\":[\"s\"]},{\"word\":\"impeachment\",\"syllables\":3},{\"word\":\"jeans\",\"syllables\":1},{\"word\":\"jukebox\",\"syllables\":2},{\"word\":\"leasing\",\"syllables\":2},{\"word\":\"lease\",\"syllables\":1,\"notFollowedBy\":[\"s\"]},{\"word\":\"lounge\",\"syllables\":1,\"notFollowedBy\":[\"r\",\"s\"]},{\"word\":\"magazine\",\"syllables\":3},{\"word\":\"notebook\",\"syllables\":2},{\"word\":\"office\",\"syllables\":2,\"notFollowedBy\":[\"r\",\"s\"]},{\"word\":\"online\",\"syllables\":2},{\"word\":\"offline\",\"syllables\":2},{\"word\":\"overcoat\",\"syllables\":3},{\"word\":\"offside\",\"syllables\":2,\"notFollowedBy\":[\"r\"]},{\"word\":\"overdrive\",\"syllables\":3},{\"word\":\"oversize\",\"syllables\":3},{\"word\":\"pacemaker\",\"syllables\":3},{\"word\":\"package\",\"syllables\":2,\"notFollowedBy\":[\"r\",\"s\"]},{\"word\":\"pancake\",\"syllables\":2},{\"word\":\"performance\",\"syllables\":3},{\"word\":\"premium\",\"syllables\":3},{\"word\":\"ragtime\",\"syllables\":2},{\"word\":\"reading\",\"syllables\":2},{\"word\":\"residence\",\"syllables\":3,\"notFollowedBy\":[\"s\"]},{\"word\":\"roaming\",\"syllables\":2},{\"word\":\"rollerblade\",\"syllables\":3,\"notFollowedBy\":[\"r\"]},{\"word\":\"royalty\",\"syllables\":3},{\"word\":\"shake\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"shale\",\"syllables\":1},{\"word\":\"shampooing\",\"syllables\":3},{\"word\":\"shareware\",\"syllables\":2},{\"word\":\"shearling\",\"syllables\":2},{\"word\":\"sidecar\",\"syllables\":2},{\"word\":\"hardware\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"skate\",\"syllables\":1,\"notFollowedBy\":[\"n\",\"r\"]},{\"word\":\"trial\",\"syllables\":2},{\"word\":\"toast\",\"syllables\":1},{\"word\":\"texture\",\"syllables\":2},{\"word\":\"testimonial\",\"syllables\":5},{\"word\":\"teaser\",\"syllables\":2},{\"word\":\"sweater\",\"syllables\":2},{\"word\":\"suspense\",\"syllables\":2,\"notFollowedBy\":[\"r\"]},{\"word\":\"subroutine\",\"syllables\":3},{\"word\":\"steadicam\",\"syllables\":3},{\"word\":\"spread\",\"syllables\":1},{\"word\":\"speaker\",\"syllables\":2},{\"word\":\"board\",\"syllables\":1},{\"word\":\"sneaker\",\"syllables\":2},{\"word\":\"smartphone\",\"syllables\":2},{\"word\":\"slide\",\"syllables\":1,\"notFollowedBy\":[\"r\"]},{\"word\":\"skyline\",\"syllables\":2},{\"word\":\"skinhead\",\"syllables\":2},{\"word\":\"update\",\"syllables\":2,\"notFollowedBy\":[\"r\"]},{\"word\":\"upgrade\",\"syllables\":2,\"notFollowedBy\":[\"r\"]},{\"word\":\"upload\",\"syllables\":2},{\"word\":\"vintage\",\"syllables\":2},{\"word\":\"wakeboard\",\"syllables\":2},{\"word\":\"website\",\"syllables\":2},{\"word\":\"welfare\",\"syllables\":2},{\"word\":\"yeah\",\"syllables\":1},{\"word\":\"yearling\",\"syllables\":2}],\"atEnd\":[{\"word\":\"byte\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"bite\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"beat\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]},{\"word\":\"coach\",\"syllables\":1},{\"word\":\"line\",\"syllables\":1,\"alsoFollowedBy\":[\"s\"]}],\"atBeginning\":[{\"word\":\"cheese\",\"syllables\":1},{\"word\":\"head\",\"syllables\":1},{\"word\":\"streak\",\"syllables\":1}],\"atBeginningOrEnd\":[{\"word\":\"team\",\"syllables\":1},{\"word\":\"stream\",\"syllables\":1}]}}}}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/it.json\n// module id = 1436\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/it.json?");

/***/ }),
/* 1437 */
/***/ (function(module, exports) {

eval("module.exports = {\"vowels\":\"аоиеёэыуюя\",\"deviations\":{\"vowels\":[{\"fragments\":[\"[аоиеёэыуюя][аоиеёэыуюя]\"],\"countModifier\":1},{\"fragments\":[\"[аоиеёэыуюя][аоиеёэыуюя][аоиеёэыуюя]\"],\"countModifier\":1}],\"words\":{\"full\":[],\"fragments\":[]}}}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/ru.json\n// module id = 1437\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/ru.json?");

/***/ }),
/* 1438 */
/***/ (function(module, exports) {

eval("module.exports = {\"vowels\":\"aeiouyàâéèêëîïûüùôæœ\",\"deviations\":{\"vowels\":[{\"fragments\":[\"[ptf]aon(ne)?[s]?$\"],\"countModifier\":-1},{\"fragments\":[\"aoul\",\"[^eéiïou]e(s|nt)?$\",\"[qg]ue(s|nt)?$\"],\"countModifier\":-1},{\"fragments\":[\"o[ëaéèï]\"],\"countModifier\":1},{\"fragments\":[\"a[eéèïüo]\",\"é[aâèéiîuo]\",\"ii[oe]\",\"[aeéuo]y[aâeéèoui]\",\"coe[^u]\",\"zoo\",\"coop\",\"coord\",\"poly[ae]\",\"[bcd]ry[oa]\",\"[bcdfgptv][rl](ou|u|i)[aéèouâ]\",\"ouez\",\"[blmnt]uio\",\"uoia\",\"ment$\",\"yua\",\"[bcdfgptv][rl](i|u|eu)e([ltz]|r[s]?$|n[^t])\",\"[^aeiuyàâéèêëîïûüùôæœqg]uie[rz]$\"],\"countModifier\":1}],\"words\":{\"full\":[{\"word\":\"ok\",\"syllables\":2},{\"word\":\"eyeliner\",\"syllables\":3},{\"word\":\"coati\",\"syllables\":3},{\"word\":\"que\",\"syllables\":1},{\"word\":\"flouer\",\"syllables\":2},{\"word\":\"relouer\",\"syllables\":3},{\"word\":\"évaluons\",\"syllables\":4},{\"word\":\"instituons\",\"syllables\":4},{\"word\":\"atténuons\",\"syllables\":4},{\"word\":\"remuons\",\"syllables\":3},{\"word\":\"redestribuons\",\"syllables\":5},{\"word\":\"suons\",\"syllables\":2},{\"word\":\"reconstituons\",\"syllables\":5},{\"word\":\"dent\",\"syllables\":1},{\"word\":\"fréquent\",\"syllables\":2},{\"word\":\"permanent\",\"syllables\":3},{\"word\":\"mécontent\",\"syllables\":3},{\"word\":\"grandiloquent\",\"syllables\":4},{\"word\":\"continent\",\"syllables\":3},{\"word\":\"occident\",\"syllables\":3},{\"word\":\"référent\",\"syllables\":3},{\"word\":\"indigent\",\"syllables\":3},{\"word\":\"concurrent\",\"syllables\":3},{\"word\":\"gent\",\"syllables\":1},{\"word\":\"différent\",\"syllables\":3},{\"word\":\"strident\",\"syllables\":2},{\"word\":\"équivalent\",\"syllables\":4},{\"word\":\"ardent\",\"syllables\":2},{\"word\":\"impotent\",\"syllables\":3},{\"word\":\"argent\",\"syllables\":2},{\"word\":\"immanent\",\"syllables\":3},{\"word\":\"indécent\",\"syllables\":3},{\"word\":\"effluent\",\"syllables\":3},{\"word\":\"agent\",\"syllables\":2},{\"word\":\"dolent\",\"syllables\":2},{\"word\":\"contingent\",\"syllables\":3},{\"word\":\"impénitent\",\"syllables\":4},{\"word\":\"adjacent\",\"syllables\":3},{\"word\":\"incident\",\"syllables\":3},{\"word\":\"content\",\"syllables\":2},{\"word\":\"incontinent\",\"syllables\":4},{\"word\":\"éloquent\",\"syllables\":3},{\"word\":\"convent\",\"syllables\":2},{\"word\":\"dissident\",\"syllables\":3},{\"word\":\"innocent\",\"syllables\":3},{\"word\":\"ventripotent\",\"syllables\":4},{\"word\":\"convalescent\",\"syllables\":4},{\"word\":\"accident\",\"syllables\":3},{\"word\":\"récent\",\"syllables\":2},{\"word\":\"absent\",\"syllables\":2},{\"word\":\"décadent\",\"syllables\":3},{\"word\":\"réticent\",\"syllables\":3},{\"word\":\"évent\",\"syllables\":2},{\"word\":\"souvent\",\"syllables\":2},{\"word\":\"intelligent\",\"syllables\":3},{\"word\":\"inhérent\",\"syllables\":3},{\"word\":\"adolescent\",\"syllables\":4},{\"word\":\"couvent\",\"syllables\":2},{\"word\":\"cent\",\"syllables\":1},{\"word\":\"urgent\",\"syllables\":2},{\"word\":\"précédent\",\"syllables\":3},{\"word\":\"imprudent\",\"syllables\":3},{\"word\":\"torrent\",\"syllables\":2},{\"word\":\"abstinent\",\"syllables\":3},{\"word\":\"indifférent\",\"syllables\":4},{\"word\":\"excédent\",\"syllables\":3},{\"word\":\"déférent\",\"syllables\":3},{\"word\":\"incandescent\",\"syllables\":4},{\"word\":\"intermittent\",\"syllables\":4},{\"word\":\"présent\",\"syllables\":3},{\"word\":\"astringent\",\"syllables\":3},{\"word\":\"trident\",\"syllables\":2},{\"word\":\"impertinent\",\"syllables\":4},{\"word\":\"détergent\",\"syllables\":3},{\"word\":\"évident\",\"syllables\":3},{\"word\":\"influent\",\"syllables\":3},{\"word\":\"pertinent\",\"syllables\":3},{\"word\":\"subséquent\",\"syllables\":3},{\"word\":\"féculent\",\"syllables\":3},{\"word\":\"déférent\",\"syllables\":3},{\"word\":\"ambivalent\",\"syllables\":4},{\"word\":\"omnipotent\",\"syllables\":4},{\"word\":\"décent\",\"syllables\":2},{\"word\":\"compétent\",\"syllables\":3},{\"word\":\"adhérent\",\"syllables\":3},{\"word\":\"afférent\",\"syllables\":3},{\"word\":\"luminescent\",\"syllables\":4},{\"word\":\"lent\",\"syllables\":1},{\"word\":\"apparent\",\"syllables\":3},{\"word\":\"effervescent\",\"syllables\":4},{\"word\":\"parent\",\"syllables\":2},{\"word\":\"pénitent\",\"syllables\":3},{\"word\":\"fluorescent\",\"syllables\":3},{\"word\":\"impudent\",\"syllables\":3},{\"word\":\"diligent\",\"syllables\":3},{\"word\":\"entregent\",\"syllables\":3},{\"word\":\"flatulent\",\"syllables\":3},{\"word\":\"serpent\",\"syllables\":2},{\"word\":\"violent\",\"syllables\":2},{\"word\":\"somnolent\",\"syllables\":3},{\"word\":\"déliquescent\",\"syllables\":4},{\"word\":\"proéminent\",\"syllables\":4},{\"word\":\"résident\",\"syllables\":3},{\"word\":\"putrescent\",\"syllables\":3},{\"word\":\"talent\",\"syllables\":2},{\"word\":\"spumescent\",\"syllables\":3},{\"word\":\"tangent\",\"syllables\":2},{\"word\":\"chiendent\",\"syllables\":2},{\"word\":\"négligent\",\"syllables\":3},{\"word\":\"antécédent\",\"syllables\":4},{\"word\":\"régent\",\"syllables\":2},{\"word\":\"polyvalent\",\"syllables\":4},{\"word\":\"latent\",\"syllables\":2},{\"word\":\"opulent\",\"syllables\":3},{\"word\":\"arpent\",\"syllables\":2},{\"word\":\"adent\",\"syllables\":2},{\"word\":\"concupiscent\",\"syllables\":4},{\"word\":\"sanguinolent\",\"syllables\":4},{\"word\":\"opalescent\",\"syllables\":4},{\"word\":\"prudent\",\"syllables\":2},{\"word\":\"conséquent\",\"syllables\":3},{\"word\":\"pourcent\",\"syllables\":2},{\"word\":\"transparent\",\"syllables\":3},{\"word\":\"sergent\",\"syllables\":2},{\"word\":\"diligent\",\"syllables\":3},{\"word\":\"inconséquent\",\"syllables\":4},{\"word\":\"turbulent\",\"syllables\":3},{\"word\":\"fervent\",\"syllables\":2},{\"word\":\"truculent\",\"syllables\":3},{\"word\":\"interférent\",\"syllables\":4},{\"word\":\"confluent\",\"syllables\":3},{\"word\":\"succulent\",\"syllables\":3},{\"word\":\"purulent\",\"syllables\":3},{\"word\":\"patent\",\"syllables\":2},{\"word\":\"indulgent\",\"syllables\":3},{\"word\":\"engoulevent\",\"syllables\":4},{\"word\":\"auvent\",\"syllables\":2},{\"word\":\"président\",\"syllables\":3},{\"word\":\"confident\",\"syllables\":3},{\"word\":\"incompétent\",\"syllables\":4},{\"word\":\"accent\",\"syllables\":2},{\"word\":\"arborescent\",\"syllables\":4},{\"word\":\"contrevent\",\"syllables\":3},{\"word\":\"cohérent\",\"syllables\":3},{\"word\":\"relent\",\"syllables\":2},{\"word\":\"insolent\",\"syllables\":3},{\"word\":\"virulent\",\"syllables\":3},{\"word\":\"rémanent\",\"syllables\":3},{\"word\":\"vent\",\"syllables\":1},{\"word\":\"turgescent\",\"syllables\":3},{\"word\":\"incohérent\",\"syllables\":4},{\"word\":\"malcontent\",\"syllables\":3},{\"word\":\"lactescent\",\"syllables\":3},{\"word\":\"inintelligent\",\"syllables\":5},{\"word\":\"omniprésent\",\"syllables\":4},{\"word\":\"récurrent\",\"syllables\":3},{\"word\":\"covalent\",\"syllables\":3},{\"word\":\"éminent\",\"syllables\":3},{\"word\":\"onguent\",\"syllables\":2},{\"word\":\"indolent\",\"syllables\":3},{\"word\":\"event\",\"syllables\":2},{\"word\":\"corpulent\",\"syllables\":3},{\"word\":\"divergent\",\"syllables\":3},{\"word\":\"excellent\",\"syllables\":3},{\"word\":\"phosphorescent\",\"syllables\":4},{\"word\":\"évanescent\",\"syllables\":4},{\"word\":\"paravent\",\"syllables\":3},{\"word\":\"avent\",\"syllables\":2},{\"word\":\"iridescent\",\"syllables\":4},{\"word\":\"prénomment\",\"syllables\":2},{\"word\":\"consument\",\"syllables\":2},{\"word\":\"dégomment\",\"syllables\":2},{\"word\":\"enveniment\",\"syllables\":3},{\"word\":\"proclament\",\"syllables\":2},{\"word\":\"chôment\",\"syllables\":1},{\"word\":\"infirment\",\"syllables\":2},{\"word\":\"briment\",\"syllables\":1},{\"word\":\"fument\",\"syllables\":1},{\"word\":\"acclament\",\"syllables\":2},{\"word\":\"referment\",\"syllables\":2},{\"word\":\"impriment\",\"syllables\":2},{\"word\":\"paument\",\"syllables\":1},{\"word\":\"déciment\",\"syllables\":2},{\"word\":\"accoutument\",\"syllables\":3},{\"word\":\"essaiment\",\"syllables\":2},{\"word\":\"ferment\",\"syllables\":1},{\"word\":\"dépriment\",\"syllables\":2},{\"word\":\"raniment\",\"syllables\":2},{\"word\":\"programment\",\"syllables\":2},{\"word\":\"fantasment\",\"syllables\":2},{\"word\":\"animent\",\"syllables\":2},{\"word\":\"affirment\",\"syllables\":2},{\"word\":\"filment\",\"syllables\":1},{\"word\":\"dament\",\"syllables\":1},{\"word\":\"parsèment\",\"syllables\":3},{\"word\":\"priment\",\"syllables\":1},{\"word\":\"assomment\",\"syllables\":2},{\"word\":\"rament\",\"syllables\":1},{\"word\":\"pâment\",\"syllables\":1},{\"word\":\"conforment\",\"syllables\":2},{\"word\":\"embaument\",\"syllables\":2},{\"word\":\"calment\",\"syllables\":1},{\"word\":\"blasphèment\",\"syllables\":2},{\"word\":\"désarment\",\"syllables\":2},{\"word\":\"consomment\",\"syllables\":2},{\"word\":\"griment\",\"syllables\":1},{\"word\":\"abîment\",\"syllables\":2},{\"word\":\"blâment\",\"syllables\":1},{\"word\":\"endorment\",\"syllables\":2},{\"word\":\"allument\",\"syllables\":2},{\"word\":\"blâment\",\"syllables\":1},{\"word\":\"confirment\",\"syllables\":2},{\"word\":\"escriment\",\"syllables\":2},{\"word\":\"trament\",\"syllables\":1},{\"word\":\"hument\",\"syllables\":1},{\"word\":\"surnomment\",\"syllables\":2},{\"word\":\"écument\",\"syllables\":2},{\"word\":\"triment\",\"syllables\":1},{\"word\":\"estiment\",\"syllables\":2},{\"word\":\"rallument\",\"syllables\":2},{\"word\":\"enflamment\",\"syllables\":2},{\"word\":\"riment\",\"syllables\":1},{\"word\":\"plument\",\"syllables\":1},{\"word\":\"suppriment\",\"syllables\":2},{\"word\":\"gomment\",\"syllables\":1},{\"word\":\"affament\",\"syllables\":2},{\"word\":\"friment\",\"syllables\":1},{\"word\":\"clament\",\"syllables\":1},{\"word\":\"dorment\",\"syllables\":1},{\"word\":\"dénomment\",\"syllables\":2},{\"word\":\"entament\",\"syllables\":2},{\"word\":\"arriment\",\"syllables\":2},{\"word\":\"résument\",\"syllables\":2},{\"word\":\"enrhument\",\"syllables\":2},{\"word\":\"rendorment\",\"syllables\":2},{\"word\":\"compriment\",\"syllables\":2},{\"word\":\"aiment\",\"syllables\":1},{\"word\":\"rythment\",\"syllables\":1},{\"word\":\"périment\",\"syllables\":2},{\"word\":\"réclament\",\"syllables\":2},{\"word\":\"subliment\",\"syllables\":2},{\"word\":\"brument\",\"syllables\":1},{\"word\":\"embrument\",\"syllables\":2},{\"word\":\"germent\",\"syllables\":1},{\"word\":\"renferment\",\"syllables\":2},{\"word\":\"sèment\",\"syllables\":1},{\"word\":\"reforment\",\"syllables\":2},{\"word\":\"liment\",\"syllables\":1},{\"word\":\"cament\",\"syllables\":1},{\"word\":\"parfument\",\"syllables\":2},{\"word\":\"arment\",\"syllables\":1},{\"word\":\"brament\",\"syllables\":1},{\"word\":\"déforment\",\"syllables\":2},{\"word\":\"assument\",\"syllables\":2},{\"word\":\"crament\",\"syllables\":1},{\"word\":\"exclament\",\"syllables\":2},{\"word\":\"forment\",\"syllables\":1},{\"word\":\"diffament\",\"syllables\":2},{\"word\":\"somment\",\"syllables\":1},{\"word\":\"oppriment\",\"syllables\":2},{\"word\":\"miment\",\"syllables\":1},{\"word\":\"enferment\",\"syllables\":2},{\"word\":\"nomment\",\"syllables\":1},{\"word\":\"reprogramment\",\"syllables\":3},{\"word\":\"transforment\",\"syllables\":2},{\"word\":\"expriment\",\"syllables\":2},{\"word\":\"informent\",\"syllables\":2},{\"word\":\"légitiment\",\"syllables\":3},{\"word\":\"de\",\"syllables\":1},{\"word\":\"le\",\"syllables\":1},{\"word\":\"je\",\"syllables\":1},{\"word\":\"te\",\"syllables\":1},{\"word\":\"ce\",\"syllables\":1},{\"word\":\"ne\",\"syllables\":1},{\"word\":\"re\",\"syllables\":1},{\"word\":\"me\",\"syllables\":1},{\"word\":\"se\",\"syllables\":1},{\"word\":\"ses\",\"syllables\":1},{\"word\":\"mes\",\"syllables\":1},{\"word\":\"mes\",\"syllables\":1},{\"word\":\"ces\",\"syllables\":1},{\"word\":\"des\",\"syllables\":1},{\"word\":\"tes\",\"syllables\":1},{\"word\":\"les\",\"syllables\":1},{\"word\":\"oye\",\"syllables\":1},{\"word\":\"es\",\"syllables\":1},{\"word\":\"remerciâmes\",\"syllables\":4},{\"word\":\"herniaires\",\"syllables\":3},{\"word\":\"autopsiais\",\"syllables\":4},{\"word\":\"août\",\"syllables\":1}],\"fragments\":{\"global\":[{\"word\":\"business\",\"syllables\":2},{\"word\":\"skate\",\"syllables\":1},{\"word\":\"board\",\"syllables\":1},{\"word\":\"coach\",\"syllables\":1},{\"word\":\"roadster\",\"syllables\":2},{\"word\":\"soap\",\"syllables\":1},{\"word\":\"goal\",\"syllables\":1},{\"word\":\"coaltar\",\"syllables\":2},{\"word\":\"loader\",\"syllables\":2},{\"word\":\"coat\",\"syllables\":1},{\"word\":\"baseball\",\"syllables\":2},{\"word\":\"foëne\",\"syllables\":1},{\"word\":\"cacaoyer\",\"syllables\":4},{\"word\":\"scoop\",\"syllables\":1},{\"word\":\"zoom\",\"syllables\":1},{\"word\":\"bazooka\",\"syllables\":3},{\"word\":\"tatoueu\",\"syllables\":3},{\"word\":\"cloueu\",\"syllables\":2},{\"word\":\"déchouer\",\"syllables\":2},{\"word\":\"écrouelles\",\"syllables\":3},{\"word\":\"maestria\",\"syllables\":3},{\"word\":\"maestro\",\"syllables\":3},{\"word\":\"vitae\",\"syllables\":3},{\"word\":\"paella\",\"syllables\":3},{\"word\":\"vae\",\"syllables\":2},{\"word\":\"thaï\",\"syllables\":1},{\"word\":\"skaï\",\"syllables\":1},{\"word\":\"masaï\",\"syllables\":2},{\"word\":\"samouraï\",\"syllables\":3},{\"word\":\"bonsaï\",\"syllables\":2},{\"word\":\"bonzaï\",\"syllables\":2},{\"word\":\"aïkido\",\"syllables\":3},{\"word\":\"daïquiri\",\"syllables\":3},{\"word\":\"pagaïe\",\"syllables\":2},{\"word\":\"chiite\",\"syllables\":2},{\"word\":\"pays\",\"syllables\":2},{\"word\":\"antiaérien\",\"syllables\":5},{\"word\":\"bleui\",\"syllables\":2},{\"word\":\"remerciai\",\"syllables\":4},{\"word\":\"monstrueu\",\"syllables\":3},{\"word\":\"niakoué\",\"syllables\":3},{\"word\":\"minoen\",\"syllables\":3},{\"word\":\"groenlandais\",\"syllables\":4},{\"word\":\"remerciant\",\"syllables\":4},{\"word\":\"skiant\",\"syllables\":2},{\"word\":\"ruade\",\"syllables\":2},{\"word\":\"weltanschauung\",\"syllables\":4}],\"atBeginning\":[{\"word\":\"roast\",\"syllables\":1},{\"word\":\"taï\",\"syllables\":1}],\"atEnd\":[{\"word\":\"écrouer\",\"syllables\":3},{\"word\":\"clouer\",\"syllables\":2}]}}}}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/fr.json\n// module id = 1438\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/fr.json?");

/***/ }),
/* 1439 */
/***/ (function(module, exports) {

eval("module.exports = {\"vowels\":\"aeiouáéíóúü\",\"deviations\":{\"vowels\":[{\"fragments\":[\"i[ií]\",\"[íú][aeo]\",\"o[aáeéíóú]\",\"uu\",\"flu[iea]\",\"ru[ie]\",\"eio\",\"eu[aá]\",\"oi[aó]\",\"[iu]ei\",\"ui[éu]\",\"^anti[aeoá]\",\"^zoo\",\"coo\",\"microo\"],\"countModifier\":1},{\"fragments\":[\"[eéó][aáeéíoóú]\"],\"countModifier\":1},{\"fragments\":[\"[aáü][aáeéiíoóú]\",\"eoi\",\"oeu\",\"[eu]au\"],\"countModifier\":1}],\"words\":{\"full\":[{\"word\":\"scooter\",\"syllables\":2},{\"word\":\"y\",\"syllables\":1},{\"word\":\"beat\",\"syllables\":1},{\"word\":\"via\",\"syllables\":2},{\"word\":\"ok\",\"syllables\":2}],\"fragments\":{\"global\":[{\"word\":\"business\",\"syllables\":2},{\"word\":\"coach\",\"syllables\":1},{\"word\":\"reggae\",\"syllables\":2},{\"word\":\"mail\",\"syllables\":1},{\"word\":\"airbag\",\"syllables\":2},{\"word\":\"affaire\",\"syllables\":2},{\"word\":\"training\",\"syllables\":2},{\"word\":\"hawaian\",\"syllables\":3},{\"word\":\"saharaui\",\"syllables\":3},{\"word\":\"nouveau\",\"syllables\":2},{\"word\":\"chapeau\",\"syllables\":2},{\"word\":\"free\",\"syllables\":1},{\"word\":\"green\",\"syllables\":1},{\"word\":\"jeep\",\"syllables\":1},{\"word\":\"toffee\",\"syllables\":2},{\"word\":\"tweet\",\"syllables\":1},{\"word\":\"tweed\",\"syllables\":1},{\"word\":\"semiautomátic\",\"syllables\":6},{\"word\":\"estadou\",\"syllables\":4},{\"word\":\"broadway\",\"syllables\":2},{\"word\":\"board\",\"syllables\":1},{\"word\":\"load\",\"syllables\":1},{\"word\":\"roaming\",\"syllables\":2},{\"word\":\"heavy\",\"syllables\":2},{\"word\":\"break\",\"syllables\":1}]}}}}\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/es.json\n// module id = 1439\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/syllables/es.json?");

/***/ }),
/* 1440 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIteratee = __webpack_require__(267),\n    isArrayLike = __webpack_require__(168),\n    keys = __webpack_require__(323);\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createFind.js\n// module id = 1440\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createFind.js?");

/***/ }),
/* 1441 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSum.js\n// module id = 1441\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSum.js?");

/***/ }),
/* 1442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar SyllableCountStep = __webpack_require__(1443);\nvar isUndefined = __webpack_require__(66);\nvar forEach = __webpack_require__(32);\n/**\n * Creates a syllable count iterator.\n *\n * @param {object} config The config object containing an array with syllable exclusions.\n * @constructor\n */\nvar SyllableCountIterator = function SyllableCountIterator(config) {\n    this.countSteps = [];\n    if (!isUndefined(config)) {\n        this.createSyllableCountSteps(config.deviations.vowels);\n    }\n};\n/**\n * Creates a syllable count step object for each exclusion.\n *\n * @param {object} syllableCounts The object containing all exclusion syllables including the multipliers.\n * @returns {void}\n */\nSyllableCountIterator.prototype.createSyllableCountSteps = function (syllableCounts) {\n    forEach(syllableCounts, function (syllableCountStep) {\n        this.countSteps.push(new SyllableCountStep(syllableCountStep));\n    }.bind(this));\n};\n/**\n * Returns all available count steps.\n *\n * @returns {Array} All available count steps.\n */\nSyllableCountIterator.prototype.getAvailableSyllableCountSteps = function () {\n    return this.countSteps;\n};\n/**\n * Counts the syllables for all the steps and returns the total syllable count.\n *\n * @param {String} word The word to count syllables in.\n * @returns {number} The number of syllables found based on exclusions.\n */\nSyllableCountIterator.prototype.countSyllables = function (word) {\n    var syllableCount = 0;\n    forEach(this.countSteps, function (step) {\n        syllableCount += step.countSyllables(word);\n    });\n    return syllableCount;\n};\nmodule.exports = SyllableCountIterator;\n//# sourceMappingURL=syllableCountIterator.js.map\n//# sourceMappingURL=syllableCountIterator.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/syllableCountIterator.js\n// module id = 1442\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/syllableCountIterator.js?");

/***/ }),
/* 1443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isUndefined = __webpack_require__(66);\nvar arrayToRegex = __webpack_require__(391);\n/**\n * Constructs a language syllable regex that contains a regex for matching syllable exclusion.\n *\n * @param {object} syllableRegex The object containing the syllable exclusions.\n * @constructor\n */\nvar SyllableCountStep = function SyllableCountStep(syllableRegex) {\n    this._hasRegex = false;\n    this._regex = \"\";\n    this._multiplier = \"\";\n    this.createRegex(syllableRegex);\n};\n/**\n * Returns if a valid regex has been set.\n *\n * @returns {boolean} True if a regex has been set, false if not.\n */\nSyllableCountStep.prototype.hasRegex = function () {\n    return this._hasRegex;\n};\n/**\n * Creates a regex based on the given syllable exclusions, and sets the multiplier to use.\n *\n * @param {object} syllableRegex The object containing the syllable exclusions and multiplier.\n * @returns {void}\n */\nSyllableCountStep.prototype.createRegex = function (syllableRegex) {\n    if (!isUndefined(syllableRegex) && !isUndefined(syllableRegex.fragments)) {\n        this._hasRegex = true;\n        this._regex = arrayToRegex(syllableRegex.fragments, true);\n        this._multiplier = syllableRegex.countModifier;\n    }\n};\n/**\n * Returns the stored regular expression.\n *\n * @returns {RegExp} The stored regular expression.\n */\nSyllableCountStep.prototype.getRegex = function () {\n    return this._regex;\n};\n/**\n * Matches syllable exclusions in a given word and the returns the number found multiplied with the\n * given multiplier.\n *\n * @param {String} word The word to match for syllable exclusions.\n * @returns {number} The amount of syllables found.\n */\nSyllableCountStep.prototype.countSyllables = function (word) {\n    if (this._hasRegex) {\n        var match = word.match(this._regex) || [];\n        return match.length * this._multiplier;\n    }\n    return 0;\n};\nmodule.exports = SyllableCountStep;\n//# sourceMappingURL=syllableCountStep.js.map\n//# sourceMappingURL=syllableCountStep.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/syllableCountStep.js\n// module id = 1443\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/syllableCountStep.js?");

/***/ }),
/* 1444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isUndefined = __webpack_require__(66);\nvar pick = __webpack_require__(1445);\n/**\n * Represents a partial deviation when counting syllables\n *\n * @param {Object} options Extra options about how to match this fragment.\n * @param {string} options.location The location in the word where this deviation can occur.\n * @param {string} options.word The actual string that should be counted differently.\n * @param {number} options.syllables The amount of syllables this fragment has.\n * @param {string[]} [options.notFollowedBy] A list of characters that this fragment shouldn't be followed with.\n * @param {string[]} [options.alsoFollowedBy] A list of characters that this fragment could be followed with.\n *\n * @constructor\n */\nfunction DeviationFragment(options) {\n    this._location = options.location;\n    this._fragment = options.word;\n    this._syllables = options.syllables;\n    this._regex = null;\n    this._options = pick(options, [\"notFollowedBy\", \"alsoFollowedBy\"]);\n}\n/**\n * Creates a regex that matches this fragment inside a word.\n *\n * @returns {void}\n */\nDeviationFragment.prototype.createRegex = function () {\n    var regexString = \"\";\n    var options = this._options;\n    var fragment = this._fragment;\n    if (!isUndefined(options.notFollowedBy)) {\n        fragment += \"(?![\" + options.notFollowedBy.join(\"\") + \"])\";\n    }\n    if (!isUndefined(options.alsoFollowedBy)) {\n        fragment += \"[\" + options.alsoFollowedBy.join(\"\") + \"]?\";\n    }\n    switch (this._location) {\n        case \"atBeginning\":\n            regexString = \"^\" + fragment;\n            break;\n        case \"atEnd\":\n            regexString = fragment + \"$\";\n            break;\n        case \"atBeginningOrEnd\":\n            regexString = \"(^\" + fragment + \")|(\" + fragment + \"$)\";\n            break;\n        default:\n            regexString = fragment;\n            break;\n    }\n    this._regex = new RegExp(regexString);\n};\n/**\n * Returns the regex that matches this fragment inside a word.\n *\n * @returns {RegExp} The regexp that matches this fragment.\n */\nDeviationFragment.prototype.getRegex = function () {\n    if (null === this._regex) {\n        this.createRegex();\n    }\n    return this._regex;\n};\n/**\n * Returns whether or not this fragment occurs in a word.\n *\n * @param {string} word The word to match the fragment in.\n * @returns {boolean} Whether or not this fragment occurs in a word.\n */\nDeviationFragment.prototype.occursIn = function (word) {\n    var regex = this.getRegex();\n    return regex.test(word);\n};\n/**\n * Removes this fragment from the given word.\n *\n * @param {string} word The word to remove this fragment from.\n * @returns {string} The modified word.\n */\nDeviationFragment.prototype.removeFrom = function (word) {\n    // Replace by a space to keep the remaining parts separated.\n    return word.replace(this._fragment, \" \");\n};\n/**\n * Returns the amount of syllables for this fragment.\n *\n * @returns {number} The amount of syllables for this fragment.\n */\nDeviationFragment.prototype.getSyllables = function () {\n    return this._syllables;\n};\nmodule.exports = DeviationFragment;\n//# sourceMappingURL=DeviationFragment.js.map\n//# sourceMappingURL=DeviationFragment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/syllables/DeviationFragment.js\n// module id = 1444\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/syllables/DeviationFragment.js?");

/***/ }),
/* 1445 */
/***/ (function(module, exports, __webpack_require__) {

eval("var basePick = __webpack_require__(1446),\n    flatRest = __webpack_require__(1449);\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/pick.js\n// module id = 1445\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/pick.js?");

/***/ }),
/* 1446 */
/***/ (function(module, exports, __webpack_require__) {

eval("var basePickBy = __webpack_require__(1447),\n    hasIn = __webpack_require__(1199);\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nmodule.exports = basePick;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePick.js\n// module id = 1446\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePick.js?");

/***/ }),
/* 1447 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGet = __webpack_require__(1088),\n    baseSet = __webpack_require__(1448),\n    castPath = __webpack_require__(687);\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePickBy.js\n// module id = 1447\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePickBy.js?");

/***/ }),
/* 1448 */
/***/ (function(module, exports, __webpack_require__) {

eval("var assignValue = __webpack_require__(1124),\n    castPath = __webpack_require__(687),\n    isIndex = __webpack_require__(559),\n    isObject = __webpack_require__(96),\n    toKey = __webpack_require__(564);\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSet.js\n// module id = 1448\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSet.js?");

/***/ }),
/* 1449 */
/***/ (function(module, exports, __webpack_require__) {

eval("var flatten = __webpack_require__(1237),\n    overRest = __webpack_require__(1210),\n    setToString = __webpack_require__(1211);\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nmodule.exports = flatRest;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_flatRest.js\n// module id = 1449\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_flatRest.js?");

/***/ }),
/* 1450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Check the length of the description.\n * @param {Paper} paper The paper object containing the description.\n * @returns {number} The length of the description.\n */\n\nmodule.exports = function (paper) {\n  return paper.getDescription().length;\n};\n//# sourceMappingURL=metaDescriptionLength.js.map\n//# sourceMappingURL=metaDescriptionLength.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/metaDescriptionLength.js\n// module id = 1450\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/metaDescriptionLength.js?");

/***/ }),
/* 1451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/matchStringWithRegex */\n/**\n * Checks a string with a regex, return all matches found with that regex.\n *\n * @param {String} text The text to match the\n * @param {String} regexString A string to use as regex.\n * @returns {Array} Array with matches, empty array if no matches found.\n */\n\nmodule.exports = function (text, regexString) {\n    var regex = new RegExp(regexString, \"ig\");\n    var matches = text.match(regex);\n    if (matches === null) {\n        matches = [];\n    }\n    return matches;\n};\n//# sourceMappingURL=matchStringWithRegex.js.map\n//# sourceMappingURL=matchStringWithRegex.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchStringWithRegex.js\n// module id = 1451\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchStringWithRegex.js?");

/***/ }),
/* 1452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module researches/imageAltTags */\n\nvar imageInText = __webpack_require__(1239);\nvar imageAlttag = __webpack_require__(1453);\nvar wordMatch = __webpack_require__(268);\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Matches the alt-tags in the images found in the text.\n * Returns an object with the totals and different alt-tags.\n *\n * @param {Array} imageMatches Array with all the matched images in the text\n * @param {string} keyword the keyword to check for.\n * @param {string} locale The locale used for transliteration.\n * @returns {object} altProperties Object with all alt-tags that were found.\n */\nvar matchAltProperties = function matchAltProperties(imageMatches, keyword, locale) {\n    var altProperties = {\n        noAlt: 0,\n        withAlt: 0,\n        withAltKeyword: 0,\n        withAltNonKeyword: 0\n    };\n    for (var i = 0; i < imageMatches.length; i++) {\n        var alttag = imageAlttag(imageMatches[i]);\n        // If no alt-tag is set\n        if (alttag === \"\") {\n            altProperties.noAlt++;\n            continue;\n        }\n        // If no keyword is set, but the alt-tag is\n        if (keyword === \"\" && alttag !== \"\") {\n            altProperties.withAlt++;\n            continue;\n        }\n        if (wordMatch(alttag, keyword, locale).count === 0 && alttag !== \"\") {\n            // Match for keywords?\n            altProperties.withAltNonKeyword++;\n            continue;\n        }\n        if (wordMatch(alttag, keyword, locale).count > 0) {\n            altProperties.withAltKeyword++;\n            continue;\n        }\n    }\n    return altProperties;\n};\n/**\n * Checks the text for images, checks the type of each image and alt attributes for containing keywords\n *\n * @param {Paper} paper The paper to check for images\n * @returns {object} Object containing all types of found images\n */\nmodule.exports = function (paper) {\n    var keyword = escapeRegExp(paper.getKeyword().toLocaleLowerCase());\n    return matchAltProperties(imageInText(paper.getText()), keyword, paper.getLocale());\n};\n//# sourceMappingURL=imageAltTags.js.map\n//# sourceMappingURL=imageAltTags.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/imageAltTags.js\n// module id = 1452\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/imageAltTags.js?");

/***/ }),
/* 1453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/getAlttagContent */\n\nvar stripSpaces = __webpack_require__(84);\nvar regexAltTag = /alt=(['\"])(.*?)\\1/i;\n/**\n * Checks for an alttag in the image and returns its content\n *\n * @param {String} text Textstring to match alt\n * @returns {String} the contents of the alttag, empty if none is set.\n */\nmodule.exports = function (text) {\n    var alt = \"\";\n    var matches = text.match(regexAltTag);\n    if (matches !== null) {\n        alt = stripSpaces(matches[2]);\n        alt = alt.replace(/&quot;/g, \"\\\"\");\n        alt = alt.replace(/&#039;/g, \"'\");\n    }\n    return alt;\n};\n//# sourceMappingURL=getAlttagContent.js.map\n//# sourceMappingURL=getAlttagContent.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getAlttagContent.js\n// module id = 1453\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getAlttagContent.js?");

/***/ }),
/* 1454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar countWords = __webpack_require__(185);\nvar sanitizeString = __webpack_require__(1233);\n/**\n * Determines the length in words of a the keyphrase, the keyword is a keyphrase if it is more than one word.\n *\n * @param {Paper} paper The paper to research\n * @returns {number} The length of the keyphrase\n */\nfunction keyphraseLengthResearch(paper) {\n  var keyphrase = sanitizeString(paper.getKeyword());\n  return countWords(keyphrase);\n}\nmodule.exports = keyphraseLengthResearch;\n//# sourceMappingURL=keyphraseLength.js.map\n//# sourceMappingURL=keyphraseLength.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/keyphraseLength.js\n// module id = 1454\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/keyphraseLength.js?");

/***/ }),
/* 1455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar matchTextWithWord = __webpack_require__(268);\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Matches the keyword in the description if a description and keyword are available.\n * default is -1 if no description and/or keyword is specified\n *\n * @param {Paper} paper The paper object containing the description.\n * @returns {number} The number of matches with the keyword\n */\nmodule.exports = function (paper) {\n    if (paper.getDescription() === \"\") {\n        return -1;\n    }\n    var keyword = escapeRegExp(paper.getKeyword());\n    return matchTextWithWord(paper.getDescription(), keyword, paper.getLocale()).count;\n};\n//# sourceMappingURL=metaDescriptionKeyword.js.map\n//# sourceMappingURL=metaDescriptionKeyword.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/metaDescriptionKeyword.js\n// module id = 1455\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/metaDescriptionKeyword.js?");

/***/ }),
/* 1456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module researches/countKeywordInUrl */\n\nvar wordMatch = __webpack_require__(268);\nvar escapeRegExp = __webpack_require__(162);\n/**\n * Matches the keyword in the URL. Replaces whitespaces with dashes and uses dash as wordboundary.\n *\n * @param {Paper} paper the Paper object to use in this count.\n * @returns {int} Number of times the keyword is found.\n */\nmodule.exports = function (paper) {\n  var keyword = paper.getKeyword().replace(\"'\", \"\").replace(/\\s/ig, \"-\");\n  keyword = escapeRegExp(keyword);\n  return wordMatch(paper.getUrl(), keyword, paper.getLocale()).count;\n};\n//# sourceMappingURL=keywordCountInUrl.js.map\n//# sourceMappingURL=keywordCountInUrl.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/keywordCountInUrl.js\n// module id = 1456\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/keywordCountInUrl.js?");

/***/ }),
/* 1457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/findKeywordInFirstParagraph */\n\nvar matchParagraphs = __webpack_require__(1240);\nvar wordMatch = __webpack_require__(268);\nvar escapeRegExp = __webpack_require__(162);\nvar reject = __webpack_require__(1458);\nvar isEmpty = __webpack_require__(97);\n/**\n * Counts the occurrences of the keyword in the first paragraph, returns 0 if it is not found,\n * if there is no paragraph tag or 0 hits, it checks for 2 newlines, otherwise returns the keyword\n * count of the complete text.\n *\n * @param {Paper} paper The text to check for paragraphs.\n * @returns {number} The number of occurrences of the keyword in the first paragraph.\n */\nmodule.exports = function (paper) {\n  var paragraphs = matchParagraphs(paper.getText());\n  var keyword = escapeRegExp(paper.getKeyword().toLocaleLowerCase());\n  var paragraph = reject(paragraphs, isEmpty)[0] || \"\";\n  return wordMatch(paragraph, keyword, paper.getLocale()).count;\n};\n//# sourceMappingURL=findKeywordInFirstParagraph.js.map\n//# sourceMappingURL=findKeywordInFirstParagraph.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/findKeywordInFirstParagraph.js\n// module id = 1457\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/findKeywordInFirstParagraph.js?");

/***/ }),
/* 1458 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayFilter = __webpack_require__(710),\n    baseFilter = __webpack_require__(1202),\n    baseIteratee = __webpack_require__(267),\n    isArray = __webpack_require__(64),\n    negate = __webpack_require__(1203);\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nmodule.exports = reject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/reject.js\n// module id = 1458\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/reject.js?");

/***/ }),
/* 1459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Check the width of the title in pixels\n * @param {Paper} paper The paper object containing the title width in pixels.\n * @returns {number} The width of the title in pixels\n */\n\nmodule.exports = function (paper) {\n    if (paper.hasTitle()) {\n        return paper.getTitleWidth();\n    }\n    return 0;\n};\n//# sourceMappingURL=pageTitleWidth.js.map\n//# sourceMappingURL=pageTitleWidth.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/pageTitleWidth.js\n// module id = 1459\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/pageTitleWidth.js?");

/***/ }),
/* 1460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getWords = __webpack_require__(229);\nvar countSyllables = __webpack_require__(1234);\nvar getSentences = __webpack_require__(215);\nvar map = __webpack_require__(63);\nvar forEach = __webpack_require__(32);\n/**\n * Gets the complexity per word, along with the index for the sentence.\n * @param {string} sentence The sentence to get wordComplexity from.\n * @returns {Array} A list with words, the index and the complexity per word.\n */\nvar getWordComplexityForSentence = function getWordComplexityForSentence(sentence) {\n    var words = getWords(sentence);\n    var results = [];\n    forEach(words, function (word, i) {\n        results.push({\n            word: word,\n            wordIndex: i,\n            complexity: countSyllables(word)\n        });\n    });\n    return results;\n};\n/**\n * Calculates the complexity of words in a text, returns each words with their complexity.\n * @param {Paper} paper The Paper object to get the text from.\n * @returns {Object} The words found in the text with the number of syllables.\n */\nmodule.exports = function (paper) {\n    var sentences = getSentences(paper.getText());\n    return map(sentences, function (sentence) {\n        return {\n            sentence: sentence,\n            words: getWordComplexityForSentence(sentence)\n        };\n    });\n};\n//# sourceMappingURL=getWordComplexity.js.map\n//# sourceMappingURL=getWordComplexity.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getWordComplexity.js\n// module id = 1460\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getWordComplexity.js?");

/***/ }),
/* 1461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar countWords = __webpack_require__(185);\nvar matchParagraphs = __webpack_require__(1240);\nvar filter = __webpack_require__(112);\n/**\n * Gets all paragraphs and their word counts from the text.\n *\n * @param {Paper} paper The paper object to get the text from.\n * @returns {Array} The array containing an object with the paragraph word count and paragraph text.\n */\nmodule.exports = function (paper) {\n    var text = paper.getText();\n    var paragraphs = matchParagraphs(text);\n    var paragraphsLength = [];\n    paragraphs.map(function (paragraph) {\n        paragraphsLength.push({\n            wordCount: countWords(paragraph),\n            text: paragraph\n        });\n    });\n    return filter(paragraphsLength, function (paragraphLength) {\n        return paragraphLength.wordCount > 0;\n    });\n};\n//# sourceMappingURL=getParagraphLength.js.map\n//# sourceMappingURL=getParagraphLength.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getParagraphLength.js\n// module id = 1461\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getParagraphLength.js?");

/***/ }),
/* 1462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getSentences = __webpack_require__(215);\nvar sentencesLength = __webpack_require__(1241);\n/**\n * Count sentences in the text.\n * @param {Paper} paper The Paper object to get text from.\n * @returns {Array} The sentences from the text.\n */\nmodule.exports = function (paper) {\n  var sentences = getSentences(paper.getText());\n  return sentencesLength(sentences);\n};\n//# sourceMappingURL=countSentencesFromText.js.map\n//# sourceMappingURL=countSentencesFromText.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/countSentencesFromText.js\n// module id = 1462\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/countSentencesFromText.js?");

/***/ }),
/* 1463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getSentences = __webpack_require__(215);\nvar sentencesLength = __webpack_require__(1241);\n/**\n * Counts sentences in the description..\n * @param {Paper} paper The Paper object to get description from.\n * @returns {Array} The sentences from the text.\n */\nmodule.exports = function (paper) {\n  var sentences = getSentences(paper.getDescription());\n  return sentencesLength(sentences);\n};\n//# sourceMappingURL=countSentencesFromDescription.js.map\n//# sourceMappingURL=countSentencesFromDescription.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/countSentencesFromDescription.js\n// module id = 1463\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/countSentencesFromDescription.js?");

/***/ }),
/* 1464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getSubheadingTexts = __webpack_require__(1465);\nvar countWords = __webpack_require__(185);\nvar forEach = __webpack_require__(32);\n/**\n * Gets the subheadings from the text and returns the length of these subheading in an array.\n * @param {Paper} paper The Paper object to get the text from.\n * @returns {Array} The array with the length of each subheading.\n */\nmodule.exports = function (paper) {\n    var text = paper.getText();\n    var matches = getSubheadingTexts(text);\n    var subHeadingTexts = [];\n    forEach(matches, function (subHeading) {\n        subHeadingTexts.push({\n            text: subHeading,\n            wordCount: countWords(subHeading)\n        });\n    });\n    return subHeadingTexts;\n};\n//# sourceMappingURL=getSubheadingTextLengths.js.map\n//# sourceMappingURL=getSubheadingTextLengths.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getSubheadingTextLengths.js\n// module id = 1464\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getSubheadingTextLengths.js?");

/***/ }),
/* 1465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isEmpty = __webpack_require__(97);\n/**\n * Returns all texts per subheading.\n * @param {string} text The text to analyze from.\n * @returns {Array} an array with text blocks per subheading.\n */\nmodule.exports = function (text) {\n  /*\n   Matching this in a regex is pretty hard, since we need to find a way for matching the text after a heading, and before the end of the text.\n   The hard thing capturing this is with a capture, it captures the next subheading as well, so it skips the next part of the text,\n   since the subheading is already matched.\n   For now we use this method to be sure we capture the right blocks of text. We remove all | 's from text,\n   then replace all headings with a | and split on a |.\n   */\n  text = text.replace(/\\|/ig, \"\");\n  text = text.replace(/<h([1-6])(?:[^>]+)?>(.*?)<\\/h\\1>/ig, \"|\");\n  var subheadingsTexts = text.split(\"|\");\n  if (isEmpty(subheadingsTexts[0])) {\n    subheadingsTexts.shift();\n  }\n  return subheadingsTexts;\n};\n//# sourceMappingURL=getSubheadingTexts.js.map\n//# sourceMappingURL=getSubheadingTexts.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getSubheadingTexts.js\n// module id = 1465\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/getSubheadingTexts.js?");

/***/ }),
/* 1466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar createRegexFromDoubleArray = __webpack_require__(1467);\nvar getSentences = __webpack_require__(215);\nvar normalizeSingleQuotes = __webpack_require__(328).normalizeSingle;\nvar getTransitionWords = __webpack_require__(1468);\nvar matchWordInSentence = __webpack_require__(1106).isWordInSentence;\nvar forEach = __webpack_require__(32);\nvar filter = __webpack_require__(112);\nvar memoize = __webpack_require__(214);\nvar createRegexFromDoubleArrayCached = memoize(createRegexFromDoubleArray);\n/**\n * Matches the sentence against two part transition words.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} twoPartTransitionWords The array containing two-part transition words.\n * @returns {Array} The found transitional words.\n */\nvar matchTwoPartTransitionWords = function matchTwoPartTransitionWords(sentence, twoPartTransitionWords) {\n    sentence = normalizeSingleQuotes(sentence);\n    var twoPartTransitionWordsRegex = createRegexFromDoubleArrayCached(twoPartTransitionWords);\n    return sentence.match(twoPartTransitionWordsRegex);\n};\n/**\n * Matches the sentence against transition words.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} transitionWords The array containing transition words.\n * @returns {Array} The found transitional words.\n */\nvar matchTransitionWords = function matchTransitionWords(sentence, transitionWords) {\n    sentence = normalizeSingleQuotes(sentence);\n    var matchedTransitionWords = filter(transitionWords, function (word) {\n        return matchWordInSentence(word, sentence);\n    });\n    return matchedTransitionWords;\n};\n/**\n * Checks the passed sentences to see if they contain transition words.\n *\n * @param {Array} sentences The sentences to match against.\n * @param {Object} transitionWords The object containing both transition words and two part transition words.\n * @returns {Array} Array of sentence objects containing the complete sentence and the transition words.\n */\nvar checkSentencesForTransitionWords = function checkSentencesForTransitionWords(sentences, transitionWords) {\n    var results = [];\n    forEach(sentences, function (sentence) {\n        var twoPartMatches = matchTwoPartTransitionWords(sentence, transitionWords.twoPartTransitionWords());\n        if (twoPartMatches !== null) {\n            results.push({\n                sentence: sentence,\n                transitionWords: twoPartMatches\n            });\n            return;\n        }\n        var transitionWordMatches = matchTransitionWords(sentence, transitionWords.transitionWords);\n        if (transitionWordMatches.length !== 0) {\n            results.push({\n                sentence: sentence,\n                transitionWords: transitionWordMatches\n            });\n            return;\n        }\n    });\n    return results;\n};\n/**\n * Checks how many sentences from a text contain at least one transition word or two-part transition word\n * that are defined in the transition words config and two part transition words config.\n *\n * @param {Paper} paper The Paper object to get text from.\n * @returns {object} An object with the total number of sentences in the text\n * and the total number of sentences containing one or more transition words.\n */\nmodule.exports = function (paper) {\n    var locale = paper.getLocale();\n    var transitionWords = getTransitionWords(locale);\n    var sentences = getSentences(paper.getText());\n    var sentenceResults = checkSentencesForTransitionWords(sentences, transitionWords);\n    return {\n        totalSentences: sentences.length,\n        sentenceResults: sentenceResults,\n        transitionWordSentences: sentenceResults.length\n    };\n};\n//# sourceMappingURL=findTransitionWords.js.map\n//# sourceMappingURL=findTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/findTransitionWords.js\n// module id = 1466\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/findTransitionWords.js?");

/***/ }),
/* 1467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/createRegexFromDoubleArray */\n\nvar addWordBoundary = __webpack_require__(565);\n/**\n * Creates a regex string of combined strings from the input array.\n * @param {array} array The array containing the various parts of a transition word combination.\n * @returns {array} The array with replaced entries.\n */\nvar wordCombinationToRegexString = function wordCombinationToRegexString(array) {\n    array = array.map(function (word) {\n        return addWordBoundary(word);\n    });\n    return array.join(\"(.*?)\");\n};\n/**\n * Creates a regex of combined strings from the input array, containing arrays with two entries.\n * @param {array} array The array containing arrays.\n * @returns {RegExp} The regex created from the array.\n */\nmodule.exports = function (array) {\n    array = array.map(function (wordCombination) {\n        return wordCombinationToRegexString(wordCombination);\n    });\n    var regexString = \"(\" + array.join(\")|(\") + \")\";\n    return new RegExp(regexString, \"ig\");\n};\n//# sourceMappingURL=createRegexFromDoubleArray.js.map\n//# sourceMappingURL=createRegexFromDoubleArray.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/createRegexFromDoubleArray.js\n// module id = 1467\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/createRegexFromDoubleArray.js?");

/***/ }),
/* 1468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transitionWordsEnglish = __webpack_require__(1242)().allWords;\nvar twoPartTransitionWordsEnglish = __webpack_require__(1469);\nvar transitionWordsGerman = __webpack_require__(1243)().allWords;\nvar twoPartTransitionWordsGerman = __webpack_require__(1470);\nvar transitionWordsFrench = __webpack_require__(1244)().allWords;\nvar twoPartTransitionWordsFrench = __webpack_require__(1471);\nvar transitionWordsSpanish = __webpack_require__(1245)().allWords;\nvar twoPartTransitionWordsSpanish = __webpack_require__(1472);\nvar transitionWordsDutch = __webpack_require__(1246)().allWords;\nvar twoPartTransitionWordsDutch = __webpack_require__(1473);\nvar transitionWordsItalian = __webpack_require__(1247)().allWords;\nvar twoPartTransitionWordsItalian = __webpack_require__(1474);\nvar transitionWordsPortuguese = __webpack_require__(1248)().allWords;\nvar twoPartTransitionWordsPortuguese = __webpack_require__(1475);\nvar transitionWordsRussian = __webpack_require__(1249)().allWords;\nvar twoPartTransitionWordsRussian = __webpack_require__(1476);\nvar transitionWordsCatalan = __webpack_require__(1477)().allWords;\nvar twoPartTransitionWordsCatalan = __webpack_require__(1478);\nvar getLanguage = __webpack_require__(186);\nmodule.exports = function (locale) {\n    switch (getLanguage(locale)) {\n        case \"de\":\n            return {\n                transitionWords: transitionWordsGerman,\n                twoPartTransitionWords: twoPartTransitionWordsGerman\n            };\n        case \"es\":\n            return {\n                transitionWords: transitionWordsSpanish,\n                twoPartTransitionWords: twoPartTransitionWordsSpanish\n            };\n        case \"fr\":\n            return {\n                transitionWords: transitionWordsFrench,\n                twoPartTransitionWords: twoPartTransitionWordsFrench\n            };\n        case \"nl\":\n            return {\n                transitionWords: transitionWordsDutch,\n                twoPartTransitionWords: twoPartTransitionWordsDutch\n            };\n        case \"it\":\n            return {\n                transitionWords: transitionWordsItalian,\n                twoPartTransitionWords: twoPartTransitionWordsItalian\n            };\n        case \"pt\":\n            return {\n                transitionWords: transitionWordsPortuguese,\n                twoPartTransitionWords: twoPartTransitionWordsPortuguese\n            };\n        case \"ru\":\n            return {\n                transitionWords: transitionWordsRussian,\n                twoPartTransitionWords: twoPartTransitionWordsRussian\n            };\n        case \"ca\":\n            return {\n                transitionWords: transitionWordsCatalan,\n                twoPartTransitionWords: twoPartTransitionWordsCatalan\n            };\n        default:\n        case \"en\":\n            return {\n                transitionWords: transitionWordsEnglish,\n                twoPartTransitionWords: twoPartTransitionWordsEnglish\n            };\n    }\n};\n//# sourceMappingURL=getTransitionWords.js.map\n//# sourceMappingURL=getTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getTransitionWords.js\n// module id = 1468\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getTransitionWords.js?");

/***/ }),
/* 1469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/twoPartTransitionWords */\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"both\", \"and\"], [\"if\", \"then\"], [\"not only\", \"but also\"], [\"neither\", \"nor\"], [\"either\", \"or\"], [\"not\", \"but\"], [\"whether\", \"or\"], [\"no sooner\", \"than\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/twoPartTransitionWords.js\n// module id = 1469\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/twoPartTransitionWords.js?");

/***/ }),
/* 1470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/twoPartTransitionWords */\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"anstatt\", \"dass\"], [\"bald\", \"bald\"], [\"dadurch\", \"dass\"], [\"dessen ungeachtet\", \"dass\"], [\"entweder\", \"oder\"], [\"einerseits\", \"andererseits\"], [\"erst\", \"wenn\"], [\"je\", \"desto\"], [\"je\", \"umsto\"], [\"nicht nur\", \"sondern auch\"], [\"ob\", \"oder\"], [\"ohne\", \"dass\"], [\"so\", \"dass\"], [\"sowohl\", \"als auch\"], [\"sowohl\", \"wie auch\"], [\"unbeschadet dessen\", \"dass\"], [\"weder\", \"noch\"], [\"wenn\", \"auch\"], [\"wenn\", \"schon\"], [\"nicht weil\", \"sondern\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/twoPartTransitionWords.js\n// module id = 1470\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/twoPartTransitionWords.js?");

/***/ }),
/* 1471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/twoPartTransitionWords */\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"à première vue\", \"mais à bien considérer les choses\"], [\"à première vue\", \"mais toute réflexion faite\"], [\"aussi\", \"que\"], [\"autant de\", \"que\"], [\"certes\", \"mais\"], [\"d'un côté\", \"de l'autre côté\"], [\"d'un côté\", \"de l'autre\"], [\"d'un côté\", \"d'un autre côté\"], [\"d'une part\", \"d'autre part\"], [\"d'une parte\", \"de l'autre parte\"], [\"moins de\", \"que\"], [\"non seulement\", \"mais aussi\"], [\"non seulement\", \"mais en outre\"], [\"non seulement\", \"mais encore\"], [\"plus de\", \"que\"], [\"quelque\", \"que\"], [\"si\", \"que\"], [\"soit\", \"soit\"], [\"tantôt\", \"tantôt\"], [\"tout d'abord\", \"ensuite\"], [\"tout\", \"que\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/twoPartTransitionWords.js\n// module id = 1471\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/twoPartTransitionWords.js?");

/***/ }),
/* 1472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/twoPartTransitionWords */\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"de un lado\", \"de otra parte\"], [\"de un lado\", \"de otro\"], [\"no\", \"sino que\"], [\"no\", \"sino\"], [\"por un lado\", \"por otro lado\"], [\"por una parte\", \"por otra parte\"], [\"por una parte\", \"por otra\"], [\"tanto\", \"como\"], [\"bien\", \"bien\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/twoPartTransitionWords.js\n// module id = 1472\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/twoPartTransitionWords.js?");

/***/ }),
/* 1473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"aan de ene kant\", \"aan de andere kant\"], [\"enerzijds\", \"anderzijds\"], [\"natuurlijk\", \"maar\"], [\"niet alleen\", \"maar ook\"], [\"noch\", \"noch\"], [\"zowel\", \"als\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/twoPartTransitionWords.js\n// module id = 1473\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/twoPartTransitionWords.js?");

/***/ }),
/* 1474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"né\", \"né\"], [\"non\", \"ma\"], [\"non prima\", \"che\"], [\"non prima\", \"di\"], [\"non solo\", \"ma anche\"], [\"o\", \"o\"], [\"se\", \"allora\"], [\"se\", \"o\"], [\"sia\", \"che\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/twoPartTransitionWords.js\n// module id = 1474\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/twoPartTransitionWords.js?");

/***/ }),
/* 1475 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"não apenas\", \"como também\"], [\"não só\", \"bem como\"], [\"não só\", \"como também\"], [\"não só\", \"mas também\"], [\"ora\", \"ora\"], [\"ou\", \"ou\"], [\"quer\", \"quer\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/portuguese/twoPartTransitionWords.js\n// module id = 1475\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/portuguese/twoPartTransitionWords.js?");

/***/ }),
/* 1476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/twoPartTransitionWords */\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"будь то\", \"или\"], [\"возможно\", \"а может быть\"], [\"возможно\", \"возможно\"], [\"достаточно\", \"чтобы\"], [\"едва\", \"как\"], [\"ежели\", \"то\"], [\"если говорить о\", \"то\"], [\"если и не\", \"то\"], [\"если не\", \"то\"], [\"если\", \"то\"], [\"мало того что\", \"еще и\"], [\"мало того, что\", \"еще и\"], [\"не сказать чтобы\", \"но\"], [\"не сказать, чтобы\", \"но\"], [\"не столько\", \"сколько\"], [\"не то чтобы\", \"но\"], [\"не только не\", \"но и\"], [\"стоило\", \"как\"], [\"так как\", \"то\"], [\"только\", \"как\"], [\"хоть бы\", \"а то\"], [\"хоть\", \"хоть\"], [\"хотя\", \"но\"], [\"чем\", \"лучше бы\"], [\"чем\", \"тем\"], [\"что касается\", \"то\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/twoPartTransitionWords.js\n// module id = 1476\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/twoPartTransitionWords.js?");

/***/ }),
/* 1477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/transitionWords */\n\nvar singleWords = [\"abans\", \"així\", \"altrament\", \"anteriorment\", \"breument\", \"contràriament\", \"després\", \"doncs\", \"efectivament\", \"endemés\", \"finalment\", \"generalment\", \"igualment\", \"malgrat\", \"mentre\", \"parallelament\", \"però\", \"perquè\", \"primerament\", \"resumidament\", \"resumint\", \"sinó\", \"sobretot\", \"també\", \"tanmateix\"];\nvar multipleWords = [\"a banda d'això\", \"a continuació\", \"a fi de\", \"a fi que\", \"a força de\", \"a manera de resum\", \"a més\", \"a tall d'exemple\", \"a tall de recapitulació\", \"a tall de resum\", \"al capdavall\", \"al contrari\", \"al mateix temps\", \"amb relació a\", \"amb tot plegat\", \"ara bé\", \"atès que\", \"com a conseqüència\", \"com a exemple\", \"com a resultat\", \"com a resum\", \"com que\", \"comptat i debatut\", \"considerant que\", \"convé destacar\", \"convé recalcar\", \"convé ressaltar que\", \"d'altra banda\", \"d’una banda\", \"d’una forma breu\", \"de la mateixa manera\", \"de manera parallela\", \"de manera que\", \"degut a\", \"deixant de banda\", \"dit d'una altra manera\", \"donat que\", \"en a resum\", \"en altres paraules\", \"en canvi\", \"en conclusió\", \"en conjunt\", \"en conseqüència\", \"encara que\", \"en darrer lloc\", \"en darrer terme\", \"en definitiva\", \"en efect\", \"en general\", \"en particular\", \"en pocs mots\", \"en poques paraules\", \"en primer lloc\", \"en relació amb\", \"en resum\", \"en segon lloc\", \"en síntesi\", \"en suma\", \"en tercer lloc\", \"en últim terme\", \"és a dir\", \"és més\", \"és per això que\", \"fins i tot\", \"gràcies a\", \"gràcies de\", \"igual com\", \"igual que\", \"ja que\", \"llevat que\", \"més aviat\", \"més tard\", \"no obstant\", \"o sia\", \"o sigui\", \"pel fet que\", \"pel general\", \"pel que\", \"per acabar\", \"per això\", \"per altra banda\", \"per aquest motiu\", \"per causa de\", \"per causa que\", \"per cert\", \"per començar\", \"per concloure\", \"per concretar\", \"per contra\", \"per exemple\", \"per illustrar\", \"per l'altra part\", \"per l'altre cantó\", \"per la qual cosa\", \"per posar un exemple\", \"per raó de\", \"per raó que\", \"per tal de\", \"per tal que\", \"per tant\", \"per últim\", \"per un cantó\", \"per un costat\", \"per una altra banda\", \"per una part\", \"quant a\", \"recapitulant\", \"respecte de\", \"s'ha de tenir en compte que\", \"sempre que\", \"tal com s’ha dit\", \"tan bon punt\", \"tenint en compte que\", \"tot i\", \"tot seguit\", \"val la pena dir que\", \"vist que\"];\n/**\n * Returns lists with transition words to be used by the assessments.\n * @returns {Object} The object with transition word lists.\n */\nmodule.exports = function () {\n    return {\n        singleWords: singleWords,\n        multipleWords: multipleWords,\n        allWords: singleWords.concat(multipleWords)\n    };\n};\n//# sourceMappingURL=transitionWords.js.map\n//# sourceMappingURL=transitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/catalan/transitionWords.js\n// module id = 1477\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/catalan/transitionWords.js?");

/***/ }),
/* 1478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module config/twoPartTransitionWords */\n/**\n * Returns an array with two-part transition words to be used by the assessments.\n * @returns {Array} The array filled with two-part transition words.\n */\n\nmodule.exports = function () {\n  return [[\"ara\", \"ara\"], [\"ni\", \"ni\"]];\n};\n//# sourceMappingURL=twoPartTransitionWords.js.map\n//# sourceMappingURL=twoPartTransitionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/catalan/twoPartTransitionWords.js\n// module id = 1478\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/catalan/twoPartTransitionWords.js?");

/***/ }),
/* 1479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function () {\n    return [\n    // Whitespace is always a word boundary.\n    \" \", \"\\\\n\", \"\\\\r\", \"\\\\t\",\n    // NO-BREAK SPACE.\n    \"\\xA0\", \" \", \".\", \",\", \"'\", \"(\", \")\", \"\\\"\", \"+\", \"-\", \";\", \"!\", \"?\", \":\", \"/\", \"»\", \"«\", \"‹\", \"›\", \"<\", \">\"];\n};\n//# sourceMappingURL=wordBoundaries.js.map\n//# sourceMappingURL=wordBoundaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/wordBoundaries.js\n// module id = 1479\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/wordBoundaries.js?");

/***/ }),
/* 1480 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayMap = __webpack_require__(327);\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseValues.js\n// module id = 1480\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseValues.js?");

/***/ }),
/* 1481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getSentences = __webpack_require__(215);\nvar stripHTMLTags = __webpack_require__(167).stripFullTags;\nvar getLanguage = __webpack_require__(186);\nvar Sentence = __webpack_require__(1482);\nvar forEach = __webpack_require__(32);\nvar isPassiveSentencePart = __webpack_require__(1483);\nvar isPassiveSentence = __webpack_require__(1505);\nvar getPeriphrasticSentencePartsDefault = __webpack_require__(1507);\nvar getPeriphrasticSentencePartsSplitOnStopwords = __webpack_require__(1520);\nvar morphologicalLanguages = [\"ru\", \"tr\"];\nvar periphrasticLanguages = [\"en\", \"de\", \"nl\", \"fr\", \"es\", \"it\", \"pt\", \"cn\"];\n/* Languages that employ both morphological and periphrastic passive voice marking have not been implemented yet.\n * const morphologicalAndPeriphrasticLanguages = [ \"sv\", \"da\", \"nb\" ];\n */\n/**\n * Looks for morphological passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nvar getMorphologicalPassives = function getMorphologicalPassives(sentences, language) {\n    var passiveSentences = [];\n    forEach(sentences, function (sentence) {\n        var strippedSentence = stripHTMLTags(sentence.getSentenceText()).toLocaleLowerCase();\n        sentence.setPassive(isPassiveSentence(strippedSentence, language));\n        if (sentence.isPassive() === true) {\n            passiveSentences.push(sentence.getSentenceText());\n        }\n    });\n    return {\n        passiveSentences: passiveSentences\n    };\n};\n/**\n * Looks for periphrastic passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nvar getPeriphrasticPassives = function getPeriphrasticPassives(sentences, language) {\n    var passiveSentences = [];\n    forEach(sentences, function (sentence) {\n        var strippedSentence = stripHTMLTags(sentence.getSentenceText()).toLocaleLowerCase();\n        // The functionality based on sentencePart objects should be rewritten using array indices of stopwords and auxiliaries.\n        var sentenceParts = [];\n        if (language === \"de\" || language === \"nl\") {\n            sentenceParts = getPeriphrasticSentencePartsSplitOnStopwords(strippedSentence, language);\n        } else {\n            sentenceParts = getPeriphrasticSentencePartsDefault(strippedSentence, language);\n        }\n        var passive = false;\n        forEach(sentenceParts, function (sentencePart) {\n            sentencePart.setPassive(isPassiveSentencePart(sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), language));\n            passive = passive || sentencePart.isPassive();\n        });\n        if (passive) {\n            passiveSentences.push(sentence.getSentenceText());\n        }\n    });\n    return {\n        passiveSentences: passiveSentences\n    };\n};\n/**\n * Determines the number of passive sentences in the text.\n *\n * @param {Paper} paper The paper object to get the text from.\n * @returns {Object} The total number of sentences in the text and the found passive sentences.\n */\nmodule.exports = function (paper) {\n    var text = paper.getText();\n    var locale = paper.getLocale();\n    var language = getLanguage(locale);\n    var sentences = getSentences(text).map(function (sentence) {\n        return new Sentence(sentence);\n    });\n    var totalNumberSentences = sentences.length;\n    if (morphologicalLanguages.includes(language)) {\n        return {\n            total: totalNumberSentences,\n            passives: getMorphologicalPassives(sentences, language).passiveSentences\n        };\n    }\n    if (periphrasticLanguages.includes(language)) {\n        return {\n            total: totalNumberSentences,\n            passives: getPeriphrasticPassives(sentences, language).passiveSentences\n        };\n    }\n};\n//# sourceMappingURL=getPassiveVoice.js.map\n//# sourceMappingURL=getPassiveVoice.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getPassiveVoice.js\n// module id = 1481\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getPassiveVoice.js?");

/***/ }),
/* 1482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Default attributes to be used by the Sentence if they are left undefined.\n * @type {{locale: string}}\n */\n\nvar defaultAttributes = {\n  locale: \"en_US\"\n};\n/**\n * Construct the Sentence object and set the sentence text and locale.\n *\n * @param {string} sentence The text of the sentence.\n * @param {string} locale The locale.\n * @constructor\n */\nvar Sentence = function Sentence(sentence, locale) {\n  this._sentenceText = sentence || \"\";\n  this._locale = locale || defaultAttributes.locale;\n  this._isPassive = false;\n};\n/**\n * Returns the sentence text.\n * @returns {String} The sentence.\n */\nSentence.prototype.getSentenceText = function () {\n  return this._sentenceText;\n};\n/**\n * Returns the locale.\n * @returns {String} The locale.\n */\nSentence.prototype.getLocale = function () {\n  return this._locale;\n};\n/**\n * Returns the passiveness of a sentence.\n *\n * @returns {boolean} True if passive, otherwise returns false.\n */\nSentence.prototype.isPassive = function () {\n  return this._isPassive;\n};\n/**\n * Sets the passiveness of the sentence.\n *\n * @param {boolean} passive Whether the sentence is passive or not.\n * @returns {void}\n */\nSentence.prototype.setPassive = function (passive) {\n  this._isPassive = passive;\n};\nmodule.exports = Sentence;\n//# sourceMappingURL=Sentence.js.map\n//# sourceMappingURL=Sentence.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Sentence.js\n// module id = 1482\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Sentence.js?");

/***/ }),
/* 1483 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar determineSentencePartIsPassive = __webpack_require__(1484);\nvar getParticiples = __webpack_require__(392);\n// Imports specific for German.\nvar auxiliariesGerman = __webpack_require__(570)().allAuxiliaries;\nvar getParticiplesGerman = __webpack_require__(1256);\n// Imports specific for Dutch.\nvar auxiliariesDutch = __webpack_require__(1257)();\n// The language-specific auxiliaries.\nvar languageVariables = {\n    de: {\n        auxiliaries: auxiliariesGerman\n    },\n    nl: {\n        auxiliaries: auxiliariesDutch\n    }\n};\n/**\n * Determines whether a sentence part is passive.\n *\n * @param {string}  sentencePartText        The sentence part to determine voice for.\n * @param {Array}   sentencePartAuxiliaries A list with auxiliaries in this sentence part.\n * @param {string}  language                The language of the sentence part.\n\n * @returns {boolean} Returns true if passive, otherwise returns false.\n */\nmodule.exports = function (sentencePartText, sentencePartAuxiliaries, language) {\n    var participles = [];\n    // For German and Dutch, this path is taken in order to ensure that sentence parts without auxiliaries are not set to passive.\n    if (language === \"de\" || language === \"nl\") {\n        // Return false if there are no auxiliaries in the sentence part.\n        if (!sentencePartAuxiliaries.some(function (auxiliary) {\n            return languageVariables[language].auxiliaries.includes(auxiliary);\n        })) {\n            return false;\n        }\n        // For German, we use a separate function to get participles.\n        if (language === \"de\") {\n            participles = getParticiplesGerman(sentencePartText, sentencePartAuxiliaries, language);\n        }\n        // For Dutch, we use the same function as for other languages.\n        if (language === \"nl\") {\n            participles = getParticiples(sentencePartText, sentencePartAuxiliaries, language);\n        }\n    } else {\n        participles = getParticiples(sentencePartText, sentencePartAuxiliaries, language);\n    }\n    return determineSentencePartIsPassive(participles);\n};\n//# sourceMappingURL=determinePassiveSentencePart.js.map\n//# sourceMappingURL=determinePassiveSentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/determinePassiveSentencePart.js\n// module id = 1483\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/determinePassiveSentencePart.js?");

/***/ }),
/* 1484 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar forEach = __webpack_require__(32);\n/**\n * Checks if the participles make the sentence part passive.\n *\n * @param {Array} participles A list of participles.\n * @returns {boolean} Returns true if the sentence part is passive.\n */\nmodule.exports = function (participles) {\n    var passive = false;\n    forEach(participles, function (participle) {\n        if (participle.determinesSentencePartIsPassive()) {\n            passive = true;\n            return;\n        }\n    });\n    return passive;\n};\n//# sourceMappingURL=determineSentencePartIsPassive.js.map\n//# sourceMappingURL=determineSentencePartIsPassive.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/determineSentencePartIsPassive.js\n// module id = 1484\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/determineSentencePartIsPassive.js?");

/***/ }),
/* 1485 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar find = __webpack_require__(1105);\nvar forEach = __webpack_require__(32);\nvar memoize = __webpack_require__(214);\nvar includes = __webpack_require__(147);\nvar flattenDeep = __webpack_require__(1486);\nvar irregularsEnglish = __webpack_require__(1487)();\nvar irregularsRegularFrench = __webpack_require__(1107)().irregularsRegular;\nvar irregularsIrregularFrench = __webpack_require__(1107)().irregularsIrregular;\nvar irregularsEndingInSFrench = __webpack_require__(1107)().irregularsEndingInS;\nvar spanishParticiples = __webpack_require__(1488)();\nvar italianParticiples = __webpack_require__(1489)();\nvar irregularsDutch = __webpack_require__(1490)();\nvar nlRegex1 = /^(ge|be|ont|ver|her|er)\\S+(d|t)$/ig;\nvar nlRegex2 = /^(aan|af|bij|binnen|los|mee|na|neer|om|onder|samen|terug|tegen|toe|uit|vast)(ge)\\S+(d|t|n)$/ig;\n// The language-specific participle regexes.\nvar languageVariables = {\n    en: {\n        regularParticiplesRegex: /\\w+ed($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig\n    },\n    fr: {\n        regularParticiplesRegex: /\\S+(é|ée|és|ées)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig\n    },\n    nl: {\n        regularParticipleRegexPattern1: nlRegex1,\n        regularParticipleRegexPattern2: nlRegex2\n    }\n};\n/**\n * Returns words that have been determined to be a regular participle.\n *\n * @param {string} word The word to check.\n * @param {string} language The language in which to match.\n *\n * @returns {Array} A list with the matches.\n */\nvar regularParticiples = function regularParticiples(word, language) {\n    // In Spanish and Italian we don't match participles with a regular regex pattern.\n    if (language === \"es\" || language === \"it\") {\n        return [];\n    }\n    // Matches word with language-specific participle regexes.\n    var matches = [];\n    Object.keys(languageVariables[language]).forEach(function (regex) {\n        var match = word.match(languageVariables[language][regex]);\n        if (match !== null) {\n            matches.push(match);\n        }\n    });\n    matches = flattenDeep(matches);\n    return matches;\n};\n/**\n * Returns an array of matches of irregular participles with suffixes.\n *\n * @param {string} word The word to match on.\n * @param {Array} irregulars The list of irregulars to match.\n * @param {string} suffixes The suffixes to match the word with.\n *\n * @returns {Array} A list with matched irregular participles.\n */\nvar matchFrenchParticipleWithSuffix = function matchFrenchParticipleWithSuffix(word, irregulars, suffixes) {\n    var matches = [];\n    forEach(irregulars, function (irregular) {\n        var irregularParticiplesRegex = new RegExp(\"^\" + irregular + suffixes + \"?$\", \"ig\");\n        var participleMatch = word.match(irregularParticiplesRegex);\n        if (participleMatch) {\n            matches.push(participleMatch[0]);\n        }\n    });\n    return matches;\n};\n/**\n * Returns the matches for a word in the list of irregulars.\n *\n * @param {string} word The word to match in the list.\n * @param {string} language The language for which to match.\n *\n * @returns {Array} A list with the matches.\n */\nvar irregularParticiples = function irregularParticiples(word, language) {\n    var matches = [];\n    switch (language) {\n        case \"fr\":\n            // Match different classes of participles with suffixes.\n            matches = matches.concat(matchFrenchParticipleWithSuffix(word, irregularsRegularFrench, \"(e|s|es)\"));\n            matches = matches.concat(matchFrenchParticipleWithSuffix(word, irregularsEndingInSFrench, \"(e|es)\"));\n            // Match irregular participles that don't require adding a suffix.\n            find(irregularsIrregularFrench, function (irregularParticiple) {\n                if (irregularParticiple === word) {\n                    matches.push(irregularParticiple);\n                }\n            });\n            break;\n        case \"es\":\n            // In Spanish, we only match passives from a word list.\n            if (includes(spanishParticiples, word)) {\n                matches.push(word);\n            }\n            break;\n        case \"it\":\n            // In Italian, we only match passives from a word list.\n            if (includes(italianParticiples, word)) {\n                matches.push(word);\n            }\n            break;\n        case \"nl\":\n            if (includes(irregularsDutch, word)) {\n                matches.push(word);\n            }\n            break;\n        case \"en\":\n        default:\n            find(irregularsEnglish, function (irregularParticiple) {\n                if (irregularParticiple === word) {\n                    matches.push(irregularParticiple);\n                }\n            });\n            break;\n    }\n    return matches;\n};\nmodule.exports = function () {\n    return {\n        regularParticiples: memoize(regularParticiples),\n        irregularParticiples: memoize(irregularParticiples)\n    };\n};\n//# sourceMappingURL=matchParticiples.js.map\n//# sourceMappingURL=matchParticiples.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/matchParticiples.js\n// module id = 1485\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/matchParticiples.js?");

/***/ }),
/* 1486 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseFlatten = __webpack_require__(587);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Recursively flattens `array`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flattenDeep([1, [2, [3, [4]], 5]]);\n * // => [1, 2, 3, 4, 5]\n */\nfunction flattenDeep(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, INFINITY) : [];\n}\n\nmodule.exports = flattenDeep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/flattenDeep.js\n// module id = 1486\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/flattenDeep.js?");

/***/ }),
/* 1487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function () {\n    return [\"arisen\", \"awoken\", \"reawoken\", \"babysat\", \"backslid\", \"backslidden\", \"beat\", \"beaten\", \"become\", \"begun\", \"bent\", \"unbent\", \"bet\", \"bid\", \"outbid\", \"rebid\", \"underbid\", \"overbid\", \"bidden\", \"bitten\", \"blown\", \"bought\", \"overbought\", \"bound\", \"unbound\", \"rebound\", \"broadcast\", \"rebroadcast\", \"broken\", \"brought\", \"browbeat\", \"browbeaten\", \"built\", \"prebuilt\", \"rebuilt\", \"overbuilt\", \"burnt\", \"burst\", \"bust\", \"cast\", \"miscast\", \"recast\", \"caught\", \"chosen\", \"clung\", \"come\", \"overcome\", \"cost\", \"crept\", \"cut\", \"undercut\", \"recut\", \"daydreamt\", \"dealt\", \"misdealt\", \"redealt\", \"disproven\", \"done\", \"predone\", \"outdone\", \"misdone\", \"redone\", \"overdone\", \"undone\", \"drawn\", \"outdrawn\", \"redrawn\", \"overdrawn\", \"dreamt\", \"driven\", \"outdriven\", \"drunk\", \"outdrunk\", \"overdrunk\", \"dug\", \"dwelt\", \"eaten\", \"overeaten\", \"fallen\", \"felt\", \"fit\", \"refit\", \"retrofit\", \"flown\", \"outflown\", \"flung\", \"forbidden\", \"forecast\", \"foregone\", \"foreseen\", \"foretold\", \"forgiven\", \"forgotten\", \"forsaken\", \"fought\", \"outfought\", \"found\", \"frostbitten\", \"frozen\", \"unfrozen\", \"given\", \"gone\", \"undergone\",\n    //\tIs also auxiliary: \"got\",\n    \"gotten\", \"ground\", \"reground\", \"grown\", \"outgrown\", \"regrown\", \"had\", \"handwritten\", \"heard\", \"reheard\", \"misheard\", \"overheard\", \"held\", \"hewn\", \"hidden\", \"unhidden\", \"hit\", \"hung\", \"rehung\", \"overhung\", \"unhung\", \"hurt\", \"inlaid\", \"input\", \"interwound\", \"interwoven\", \"jerry-built\", \"kept\", \"knelt\", \"knit\", \"reknit\", \"unknit\", \"known\", \"laid\", \"mislaid\", \"relaid\", \"overlaid\", \"lain\", \"underlain\", \"leant\", \"leapt\", \"outleapt\", \"learnt\", \"unlearnt\", \"relearnt\", \"mislearnt\", \"left\", \"lent\", \"let\", \"lip-read\", \"lit\", \"relit\", \"lost\", \"made\", \"premade\", \"remade\", \"meant\", \"met\", \"mown\", \"offset\", \"paid\", \"prepaid\", \"repaid\", \"overpaid\", \"partaken\", \"proofread\", \"proven\", \"put\", \"quick-frozen\", \"quit\", \"read\", \"misread\", \"reread\", \"retread\", \"rewaken\", \"rid\", \"ridden\", \"outridden\", \"overridden\", \"risen\", \"roughcast\", \"run\", \"outrun\", \"rerun\", \"overrun\", \"rung\", \"said\", \"sand-cast\", \"sat\", \"outsat\", \"sawn\", \"seen\", \"overseen\", \"sent\", \"resent\", \"set\", \"preset\", \"reset\", \"misset\", \"sewn\", \"resewn\", \"oversewn\", \"unsewn\", \"shaken\", \"shat\", \"shaven\", \"shit\", \"shone\", \"outshone\", \"shorn\", \"shot\", \"outshot\", \"overshot\", \"shown\", \"shrunk\", \"preshrunk\", \"shut\", \"sight-read\", \"slain\", \"slept\", \"outslept\", \"overslept\", \"slid\", \"slit\", \"slung\", \"unslung\", \"slunk\", \"smelt\", \"outsmelt\", \"snuck\", \"sold\", \"undersold\", \"presold\", \"outsold\", \"resold\", \"oversold\", \"sought\", \"sown\", \"spat\", \"spelt\", \"misspelt\", \"spent\", \"underspent\", \"outspent\", \"misspent\", \"overspent\", \"spilt\", \"overspilt\", \"spit\", \"split\", \"spoilt\", \"spoken\", \"outspoken\", \"misspoken\", \"overspoken\", \"spread\", \"sprung\", \"spun\", \"unspun\", \"stolen\", \"stood\", \"understood\", \"misunderstood\", \"strewn\", \"stricken\", \"stridden\", \"striven\", \"struck\", \"strung\", \"unstrung\", \"stuck\", \"unstuck\", \"stung\", \"stunk\", \"sublet\", \"sunburnt\", \"sung\", \"outsung\", \"sunk\", \"sweat\", \"swept\", \"swollen\", \"sworn\", \"outsworn\", \"swum\", \"outswum\", \"swung\", \"taken\", \"undertaken\", \"mistaken\", \"retaken\", \"overtaken\", \"taught\", \"mistaught\", \"retaught\", \"telecast\", \"test-driven\", \"test-flown\", \"thought\", \"outthought\", \"rethought\", \"overthought\", \"thrown\", \"outthrown\", \"overthrown\", \"thrust\", \"told\", \"retold\", \"torn\", \"retorn\", \"trod\", \"trodden\", \"typecast\", \"typeset\", \"upheld\", \"upset\", \"waylaid\", \"wept\", \"wet\", \"rewet\", \"withdrawn\", \"withheld\", \"withstood\", \"woken\", \"won\", \"rewon\", \"worn\", \"reworn\", \"wound\", \"rewound\", \"overwound\", \"unwound\", \"woven\", \"rewoven\", \"unwoven\", \"written\", \"typewritten\", \"underwritten\", \"outwritten\", \"miswritten\", \"rewritten\", \"overwritten\", \"wrung\"];\n};\n//# sourceMappingURL=irregulars.js.map\n//# sourceMappingURL=irregulars.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/irregulars.js\n// module id = 1487\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/irregulars.js?");

/***/ }),
/* 1488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list of all participles used for the Spanish passive voice assessment.\n * For each participle, versions for all four possible suffixes (-o, -a, -os, -as) are included.\n * @returns {Array} The list with participles.\n */\n\nmodule.exports = function () {\n  return [\"abajado\", \"abalanzado\", \"abaleado\", \"abandonado\", \"abaratado\", \"abarcado\", \"abarrotado\", \"abastecido\", \"abatido\", \"abdicado\", \"abierto\", \"abismado\", \"abjurado\", \"ablandado\", \"abocado\", \"abochornado\", \"abofeteado\", \"abolido\", \"abollado\", \"abombado\", \"abominado\", \"abonado\", \"abordado\", \"aborrecido\", \"aborregado\", \"abortado\", \"abotonado\", \"abrasado\", \"abrazado\", \"abrevado\", \"abreviado\", \"abrigado\", \"abrochado\", \"abrogado\", \"abroquelado\", \"abrumado\", \"absorbido\", \"abstenido\", \"abstraído\", \"absuelto\", \"abucheado\", \"abultado\", \"abundado\", \"aburguesado\", \"aburrido\", \"abusado\", \"acabado\", \"acallado\", \"acalorado\", \"acaparado\", \"acariciado\", \"acarreado\", \"acatado\", \"acaudillado\", \"accedido\", \"accionado\", \"acechado\", \"aceitado\", \"acelerado\", \"acentuado\", \"aceptado\", \"acerado\", \"acercado\", \"acertado\", \"achacado\", \"achantado\", \"achatado\", \"achicado\", \"acicalado\", \"acidificado\", \"aclarado\", \"aclimatado\", \"acobardado\", \"acodado\", \"acogido\", \"acojonado\", \"acometido\", \"acomodado\", \"acompañado\", \"acompasado\", \"acongojado\", \"aconsejado\", \"acontecido\", \"acopiado\", \"acoplado\", \"acordado\", \"acordonado\", \"acorralado\", \"acortado\", \"acosado\", \"acostado\", \"acostumbrado\", \"acotado\", \"acrecentado\", \"acreditado\", \"acrisolado\", \"activado\", \"actuado\", \"acuchillado\", \"acuciado\", \"acudido\", \"acuerpado\", \"acumulado\", \"acunado\", \"acuñado\", \"acurrucado\", \"acusado\", \"adaptado\", \"adecentado\", \"adelantado\", \"adelgazado\", \"adentrado\", \"adeudado\", \"adherido\", \"adicionado\", \"adiestrado\", \"adivinado\", \"adjetivado\", \"adjudicado\", \"adjuntado\", \"administrado\", \"admirado\", \"admitido\", \"adoctrinado\", \"adolecido\", \"adoptado\", \"adorado\", \"adormecido\", \"adornado\", \"adquirido\", \"aducido\", \"adueñado\", \"adulado\", \"adulterado\", \"advertido\", \"afanado\", \"afeado\", \"afectado\", \"afeitado\", \"aferrado\", \"afianzado\", \"afinado\", \"afirmado\", \"afligido\", \"aflorado\", \"afrentado\", \"afrontado\", \"agachado\", \"agarrado\", \"agarrotado\", \"agasajado\", \"agenciado\", \"agigantado\", \"agilizado\", \"agitado\", \"aglutinado\", \"agobiado\", \"agolpado\", \"agonizado\", \"agostado\", \"agotado\", \"agradado\", \"agradecido\", \"agrandado\", \"agravado\", \"agraviado\", \"agredido\", \"agregado\", \"agriado\", \"agrietado\", \"agrupado\", \"aguado\", \"aguantado\", \"aguardado\", \"agudizado\", \"aguijoneado\", \"agujereado\", \"aguzado\", \"ahogado\", \"ahondado\", \"ahorcado\", \"ahorrado\", \"ahuecado\", \"ahuyentado\", \"aireado\", \"aislado\", \"ajustado\", \"ajusticiado\", \"alabado\", \"alagado\", \"alambrado\", \"alardeado\", \"alargado\", \"alarmado\", \"albergado\", \"alborotado\", \"alcanzado\", \"aleccionado\", \"alegado\", \"alegrado\", \"alejado\", \"alentado\", \"alertado\", \"alfabetizado\", \"alfombrado\", \"aliado\", \"alienado\", \"aligerado\", \"alimentado\", \"aliñado\", \"alineado\", \"alisado\", \"alistado\", \"aliviado\", \"alivianado\", \"allanado\", \"almacenado\", \"almorzado\", \"alojado\", \"alquilado\", \"alterado\", \"alternado\", \"alucinado\", \"aludido\", \"alumbrado\", \"alzado\", \"amado\", \"amaestrado\", \"amagado\", \"amainado\", \"amalgamado\", \"amamantado\", \"amansado\", \"amargado\", \"amarrado\", \"amasado\", \"ambicionado\", \"amedrentado\", \"amenazado\", \"amenizado\", \"ameritado\", \"ametrallado\", \"amilanado\", \"aminorado\", \"amnistiado\", \"amoldado\", \"amonestado\", \"amontonado\", \"amordazado\", \"amortajado\", \"amortiguado\", \"amortizado\", \"amotinado\", \"amparado\", \"ampayado\", \"ampliado\", \"amplificado\", \"amputado\", \"amueblado\", \"añadido\", \"analizado\", \"anatematizado\", \"andado\", \"anegado\", \"anestesiado\", \"anexado\", \"anexionado\", \"anhelado\", \"anidado\", \"anillado\", \"animado\", \"aniquilado\", \"anisado\", \"añorado\", \"anotado\", \"anoticiado\", \"ansiado\", \"antecedido\", \"antepuesto\", \"anticipado\", \"antojado\", \"anudado\", \"anulado\", \"anunciado\", \"apabullado\", \"apachurrado\", \"apaciguado\", \"apadrinado\", \"apagado\", \"apalancado\", \"apaleado\", \"apañado\", \"apantallado\", \"aparcado\", \"apareado\", \"aparecido\", \"aparentado\", \"apartado\", \"apeado\", \"apedreado\", \"apelado\", \"apellidado\", \"apelmazado\", \"apercibido\", \"apersonado\", \"apestado\", \"apetecido\", \"apiadado\", \"apilado\", \"apiñado\", \"apisonado\", \"aplacado\", \"aplanado\", \"aplastado\", \"aplaudido\", \"aplazado\", \"aplicado\", \"apoderado\", \"apoltronado\", \"aporreado\", \"aportado\", \"aposentado\", \"apostado\", \"apostatado\", \"apostillado\", \"apoyado\", \"apreciado\", \"aprehendido\", \"apremiado\", \"aprendido\", \"apresado\", \"apresurado\", \"apretado\", \"apretujado\", \"aprisionado\", \"aprobado\", \"aprovechado\", \"aprovisionado\", \"aproximado\", \"apuñalado\", \"apuñaleado\", \"apuntado\", \"apuntalado\", \"apuntillado\", \"apurado\", \"aquejado\", \"aquietado\", \"aquilatado\", \"arañado\", \"arbitrado\", \"archivado\", \"arengado\", \"argüido\", \"argumentado\", \"armado\", \"armonizado\", \"aromatizado\", \"arqueado\", \"arrancado\", \"arrasado\", \"arrastrado\", \"arreado\", \"arrebatado\", \"arreciado\", \"arreglado\", \"arrellanado\", \"arremangado\", \"arremetido\", \"arrendado\", \"arrepentido\", \"arrestado\", \"arriado\", \"arribado\", \"arriesgado\", \"arrimado\", \"arrinconado\", \"arrodillado\", \"arrogado\", \"arrojado\", \"arrollado\", \"arropado\", \"arruinado\", \"arrullado\", \"articulado\", \"asado\", \"asaltado\", \"ascendido\", \"aseado\", \"asechado\", \"asediado\", \"asegurado\", \"asemejado\", \"asentado\", \"asentido\", \"aserrado\", \"asesinado\", \"asesorado\", \"asestado\", \"aseverado\", \"asfixiado\", \"asido\", \"asignado\", \"asilado\", \"asimilado\", \"asistido\", \"asolado\", \"asoleado\", \"asomado\", \"asombrado\", \"aspirado\", \"astillado\", \"asumido\", \"asustado\", \"atacado\", \"atado\", \"atajado\", \"atarantado\", \"atascado\", \"atemorizado\", \"atemperado\", \"atenazado\", \"atendido\", \"atenido\", \"atentado\", \"atenuado\", \"aterrado\", \"aterrorizado\", \"atesorado\", \"atestiguado\", \"atiborrado\", \"atisbado\", \"atizado\", \"atomizado\", \"atontado\", \"atorado\", \"atormentado\", \"atornillado\", \"atosigado\", \"atracado\", \"atragantado\", \"atraído\", \"atrancado\", \"atrapado\", \"atrasado\", \"atravesado\", \"atrevido\", \"atribuido\", \"atrincherado\", \"atrofiado\", \"atropellado\", \"aturdido\", \"auditado\", \"augurado\", \"aumentado\", \"aunado\", \"aupado\", \"auscultado\", \"ausentado\", \"autenticado\", \"autentificado\", \"autodefinido\", \"autoeditado\", \"automatizado\", \"autorizado\", \"autorregulado\", \"auxiliado\", \"avalado\", \"avanzado\", \"avasallado\", \"avenido\", \"aventado\", \"aventajado\", \"aventurado\", \"averiado\", \"averiguado\", \"avezado\", \"avisado\", \"avispado\", \"avistado\", \"avivado\", \"avizorado\", \"avocado\", \"ayudado\", \"azotado\", \"azuzado\", \"babeado\", \"bailado\", \"bajado\", \"balaceado\", \"balanceado\", \"bañado\", \"banalizado\", \"bancado\", \"bandeado\", \"barajado\", \"barrido\", \"basado\", \"bastardeado\", \"basureado\", \"batallado\", \"bateado\", \"batido\", \"bautizado\", \"beatificado\", \"bebido\", \"beneficiado\", \"besado\", \"bifurcado\", \"birlado\", \"blandido\", \"blanqueado\", \"blasfemado\", \"blindado\", \"bloqueado\", \"boicoteado\", \"bombardeado\", \"bombeado\", \"bonificado\", \"bordeado\", \"borrado\", \"borroneado\", \"bosquejado\", \"bostezado\", \"botado\", \"boxeado\", \"bregado\", \"brillado\", \"brincado\", \"brindado\", \"bromeado\", \"brotado\", \"bruñido\", \"buceado\", \"burlado\", \"buscado\", \"cabeceado\", \"cabido\", \"cabildeado\", \"cabreado\", \"cacareado\", \"cachado\", \"cacheado\", \"cacheteado\", \"caducado\", \"cagado\", \"calado\", \"calculado\", \"caldeado\", \"calefaccionado\", \"calendarizado\", \"calentado\", \"calibrado\", \"calificado\", \"caligrafiado\", \"callado\", \"calmado\", \"calumniado\", \"calzado\", \"cambiado\", \"caminado\", \"camuflado\", \"canalizado\", \"cancelado\", \"canjeado\", \"cansado\", \"cantado\", \"capado\", \"capeado\", \"capitalizado\", \"capitulado\", \"captado\", \"capturado\", \"caracterizado\", \"carburado\", \"carcomido\", \"cardado\", \"careado\", \"carecido\", \"cargado\", \"caricaturizado\", \"cartografiado\", \"cascado\", \"castigado\", \"castrado\", \"catado\", \"catalizado\", \"catalogado\", \"catapultado\", \"cateado\", \"categorizado\", \"causado\", \"cauterizado\", \"cautivado\", \"cavado\", \"cavilado\", \"cazado\", \"cebado\", \"cedido\", \"cegado\", \"cejado\", \"celebrado\", \"cenado\", \"ceñido\", \"censurado\", \"centrifugado\", \"centuplicado\", \"cepillado\", \"cercado\", \"cercenado\", \"cerciorado\", \"cernido\", \"cerrado\", \"cesado\", \"chafado\", \"chamuscado\", \"chantajeado\", \"chapado\", \"charlado\", \"chateado\", \"chequeado\", \"chiflado\", \"chillado\", \"chingado\", \"chirriado\", \"chivado\", \"chocado\", \"chorreado\", \"choteado\", \"chupado\", \"chutado\", \"cicatrizado\", \"cifrado\", \"cimentado\", \"cincelado\", \"circulado\", \"circuncidado\", \"circundado\", \"citado\", \"clamado\", \"clarificado\", \"clasificado\", \"claudicado\", \"clausurado\", \"clavado\", \"clicado\", \"clonado\", \"coaccionado\", \"coadyuvado\", \"coagulado\", \"coaligado\", \"coartado\", \"cobijado\", \"cobrado\", \"cocido\", \"cocinado\", \"codeado\", \"codiciado\", \"codificado\", \"codirigido\", \"coexistido\", \"cofinanciado\", \"cogido\", \"cohabitado\", \"cohibido\", \"coincidido\", \"colaborado\", \"colacionado\", \"colado\", \"colapsado\", \"coleccionado\", \"colectado\", \"colectivizado\", \"colgado\", \"colisionado\", \"colmado\", \"colocado\", \"colonizado\", \"coloreado\", \"columpiado\", \"combatido\", \"combinado\", \"comentado\", \"comenzado\", \"comerciado\", \"comercializado\", \"cometido\", \"comido\", \"comisionado\", \"compactado\", \"compadecido\", \"compaginado\", \"comparado\", \"comparecido\", \"compartido\", \"compatibilizado\", \"compelido\", \"compendiado\", \"compenetrado\", \"compensado\", \"compilado\", \"complacido\", \"complementado\", \"completado\", \"complotado\", \"comportado\", \"comprado\", \"comprendido\", \"comprimido\", \"comprobado\", \"comprometido\", \"compuesto\", \"compulsado\", \"computado\", \"comulgado\", \"comunicado\", \"concatenado\", \"concebido\", \"concedido\", \"concelebrado\", \"concentrado\", \"conceptuado\", \"conceptualizado\", \"concertado\", \"concienciado\", \"concientizado\", \"conciliado\", \"concitado\", \"concluido\", \"concordado\", \"concretado\", \"concretizado\", \"conculcado\", \"concursado\", \"condenado\", \"condensado\", \"condicionado\", \"condimentado\", \"condolido\", \"condonado\", \"conducido\", \"conectado\", \"conexionado\", \"confabulado\", \"confeccionado\", \"conferido\", \"confesado\", \"confiado\", \"configurado\", \"confirmado\", \"confiscado\", \"confluido\", \"conformado\", \"confortado\", \"confrontado\", \"confundido\", \"congeniado\", \"congestionado\", \"congratulado\", \"congregado\", \"conjeturado\", \"conjugado\", \"conjuntado\", \"conjurado\", \"conllevado\", \"conmemorado\", \"conminado\", \"conmocionado\", \"conmovido\", \"conmutado\", \"connotado\", \"conquistado\", \"consagrado\", \"conseguido\", \"consensuado\", \"consentido\", \"conservado\", \"considerado\", \"consignado\", \"consistido\", \"consolado\", \"consolidado\", \"conspirado\", \"constado\", \"constatado\", \"constelado\", \"constitucionalizado\", \"constituido\", \"constreñido\", \"construido\", \"consultado\", \"consumado\", \"consumido\", \"contabilizado\", \"contactado\", \"contado\", \"contagiado\", \"contemplado\", \"contendido\", \"contenido\", \"contentado\", \"contestado\", \"contextualizado\", \"continuado\", \"contorneado\", \"contraatacado\", \"contrabandeado\", \"contradicho\", \"contrahecho\", \"contraído\", \"contrapesado\", \"contrapuesto\", \"contrariado\", \"contrarrestado\", \"contrastado\", \"contratado\", \"contravenido\", \"contribuido\", \"contristado\", \"controlado\", \"convalidado\", \"convencido\", \"convenido\", \"convergido\", \"conversado\", \"convertido\", \"convidado\", \"convivido\", \"convocado\", \"convulsionado\", \"cooperado\", \"cooptado\", \"coordinado\", \"copado\", \"copiado\", \"coproducido\", \"copulado\", \"coqueteado\", \"corchado\", \"coreado\", \"coreografiado\", \"corneado\", \"coronado\", \"corporizado\", \"corregido\", \"correlacionado\", \"correspondido\", \"correteado\", \"corrido\", \"corroborado\", \"corroído\", \"corrompido\", \"cortado\", \"cortejado\", \"cosechado\", \"cosido\", \"cosificado\", \"costado\", \"costeado\", \"cotejado\", \"cotizado\", \"creado\", \"creído\", \"criado\", \"cribado\", \"criminalizado\", \"crispado\", \"cristalizado\", \"cristianizado\", \"criticado\", \"cronometrado\", \"crucificado\", \"crujido\", \"cruzado\", \"cuadriplicado\", \"cuadruplicado\", \"cuajado\", \"cuantificado\", \"cuarteado\", \"cubierto\", \"cuestionado\", \"cuidado\", \"culeado\", \"culminado\", \"culpabilizado\", \"culpado\", \"cultivado\", \"culturizado\", \"cumplido\", \"cumplimentado\", \"cundido\", \"curado\", \"curioseado\", \"currado\", \"cursado\", \"curvado\", \"custodiado\", \"dado\", \"dañado\", \"danzado\", \"datado\", \"dateado\", \"debatido\", \"debido\", \"debilitado\", \"debitado\", \"debutado\", \"decaído\", \"decantado\", \"decapitado\", \"decepcionado\", \"decidido\", \"declamado\", \"declarado\", \"declinado\", \"decodificado\", \"decolorado\", \"decomisado\", \"decrecido\", \"decretado\", \"dedicado\", \"deducido\", \"defecado\", \"defendido\", \"defenestrado\", \"deferido\", \"definido\", \"deformado\", \"defraudado\", \"degenerado\", \"deglutido\", \"degollado\", \"degradado\", \"degustado\", \"deificado\", \"dejado\", \"delatado\", \"delegado\", \"deleitado\", \"deletreado\", \"deliberado\", \"delimitado\", \"delineado\", \"delinquido\", \"demandado\", \"demarcado\", \"demediado\", \"demeritado\", \"democratizado\", \"demolido\", \"demonizado\", \"demorado\", \"demostrado\", \"demudado\", \"denegado\", \"denigrado\", \"denominado\", \"denostado\", \"denotado\", \"denunciado\", \"deparado\", \"departido\", \"dependido\", \"depilado\", \"deplorado\", \"deportado\", \"depositado\", \"depreciado\", \"depredado\", \"deprimido\", \"depuesto\", \"depurado\", \"derechizado\", \"derivado\", \"derogado\", \"derramado\", \"derretido\", \"derribado\", \"derrocado\", \"derrochado\", \"derrotado\", \"derruido\", \"derrumbado\", \"desabrochado\", \"desacatado\", \"desacelerado\", \"desacomodado\", \"desaconsejado\", \"desacoplado\", \"desacralizado\", \"desacreditado\", \"desactivado\", \"desafiado\", \"desafinado\", \"desaguado\", \"desahogado\", \"desairado\", \"desajustado\", \"desalentado\", \"desalineado\", \"desalojado\", \"desandado\", \"desangrado\", \"desanimado\", \"desaparecido\", \"desapegado\", \"desaprendido\", \"desaprobado\", \"desaprovechado\", \"desarmado\", \"desarraigado\", \"desarreglado\", \"desarrollado\", \"desarticulado\", \"desaseado\", \"desasido\", \"desasosegado\", \"desatado\", \"desatendido\", \"desautorizado\", \"desayunado\", \"desbancado\", \"desbandado\", \"desbaratado\", \"desbarrancado\", \"desbastado\", \"desbloqueado\", \"desbocado\", \"desbordado\", \"desbrozado\", \"descabalgado\", \"descabezado\", \"descaderado\", \"descalabrado\", \"descalificado\", \"descansado\", \"descargado\", \"descarriado\", \"descarrilado\", \"descartado\", \"descascarado\", \"descascarillado\", \"descendido\", \"descentrado\", \"descifrado\", \"descocido\", \"descodificado\", \"descojonado\", \"descolgado\", \"descolocado\", \"descolonizado\", \"descompensado\", \"descomprimido\", \"descompuesto\", \"desconectado\", \"desconfiado\", \"descongelado\", \"desconocido\", \"descontado\", \"descontaminado\", \"descontextualizado\", \"descontinuado\", \"desconvocado\", \"descorazonado\", \"descorchado\", \"descorrido\", \"descosido\", \"descoyuntado\", \"descreído\", \"descristianizado\", \"descuadrado\", \"descuartizado\", \"descubierto\", \"descuidado\", \"desdeñado\", \"desdibujado\", \"desdicho\", \"desdoblado\", \"deseado\", \"desecado\", \"desechado\", \"desembarazado\", \"desembarcado\", \"desembocado\", \"desembolsado\", \"desempacado\", \"desempañado\", \"desempaquetado\", \"desempeñado\", \"desempolvado\", \"desenamorado\", \"desencadenado\", \"desencajado\", \"desencarnado\", \"desenchufado\", \"desenfocado\", \"desenfundado\", \"desenganchado\", \"desengrasado\", \"desenmascarado\", \"desenredado\", \"desenrollado\", \"desentendido\", \"desenterrado\", \"desentonado\", \"desentrañado\", \"desenvainado\", \"desenvuelto\", \"desequilibrado\", \"desertado\", \"desestabilizado\", \"desestimado\", \"desfalcado\", \"desfallecido\", \"desfigurado\", \"desfondado\", \"desgajado\", \"desgañitado\", \"desgarrado\", \"desgastado\", \"desglosado\", \"desgobernado\", \"desgranado\", \"desguazado\", \"deshecho\", \"desheredado\", \"deshidratado\", \"deshilachado\", \"deshojado\", \"deshonrado\", \"deshuesado\", \"deshumanizado\", \"designado\", \"desilusionado\", \"desincentivado\", \"desinfectado\", \"desinflado\", \"desinflamado\", \"desinformado\", \"desinhibido\", \"desinstalado\", \"desintegrado\", \"desintoxicado\", \"desistido\", \"desjarretado\", \"deslegitimado\", \"desleído\", \"desligado\", \"deslindado\", \"deslizado\", \"deslucido\", \"deslumbrado\", \"desmadrado\", \"desmalezado\", \"desmantelado\", \"desmaquillado\", \"desmarcado\", \"desmayado\", \"desmejorado\", \"desmembrado\", \"desmentido\", \"desmenuzado\", \"desmerecido\", \"desmigado\", \"desmitificado\", \"desmoldado\", \"desmontado\", \"desmoralizado\", \"desmoronado\", \"desmotivado\", \"desmovilizado\", \"desnaturalizado\", \"desnivelado\", \"desnucado\", \"desnudado\", \"desobedecido\", \"desobligado\", \"desoído\", \"desollado\", \"desorganizado\", \"desorientado\", \"despachado\", \"desparasitado\", \"desparecido\", \"desparramado\", \"despedazado\", \"despedido\", \"despegado\", \"despeinado\", \"despejado\", \"despellejado\", \"despeñado\", \"despenalizado\", \"desperdiciado\", \"despersonalizado\", \"despertado\", \"despilfarrado\", \"despintado\", \"despiojado\", \"despistado\", \"desplazado\", \"desplegado\", \"desplomado\", \"desplumado\", \"despojado\", \"despolitizado\", \"desposado\", \"desposeído\", \"despotricado\", \"despreciado\", \"desprendido\", \"despreocupado\", \"desprestigiado\", \"desprogramado\", \"despulpado\", \"despuntado\", \"desquiciado\", \"desquitado\", \"destacado\", \"destapado\", \"desteñido\", \"desterrado\", \"destetado\", \"destilado\", \"destituido\", \"destrabado\", \"destripado\", \"destronado\", \"destrozado\", \"destruido\", \"desunido\", \"desvalijado\", \"desvalorizado\", \"desvanecido\", \"desvelado\", \"desvestido\", \"desviado\", \"desvinculado\", \"desvirtuado\", \"desvivido\", \"detectado\", \"detenido\", \"detentado\", \"deteriorado\", \"determinado\", \"detestado\", \"detonado\", \"devaluado\", \"devanado\", \"devastado\", \"develado\", \"devengado\", \"devenido\", \"devorado\", \"devuelto\", \"diagnosticado\", \"diagramado\", \"dializado\", \"dialogado\", \"dibujado\", \"dicho\", \"dictado\", \"dictaminado\", \"diezmado\", \"difamado\", \"diferenciado\", \"diferido\", \"dificultado\", \"difuminado\", \"difundido\", \"digerido\", \"digitado\", \"dignado\", \"dignificado\", \"dilapidado\", \"dilatado\", \"diligenciado\", \"dilucidado\", \"diluido\", \"dimensionado\", \"dimitido\", \"dinamitado\", \"dinamizado\", \"dirimido\", \"discernido\", \"disciplinado\", \"discontinuado\", \"discrepado\", \"discriminado\", \"disculpado\", \"discurrido\", \"discutido\", \"diseccionado\", \"diseminado\", \"diseñado\", \"disentido\", \"disertado\", \"disfrazado\", \"disfrutado\", \"disgregado\", \"disgustado\", \"disimulado\", \"disipado\", \"dislocado\", \"disminuido\", \"disociado\", \"dispensado\", \"dispersado\", \"dispuesto\", \"disputado\", \"distado\", \"distanciado\", \"distendido\", \"distinguido\", \"distorsionado\", \"distraído\", \"distribuido\", \"disuadido\", \"disuelto\", \"divagado\", \"diversificado\", \"divertido\", \"dividido\", \"divinizado\", \"divisado\", \"divorciado\", \"divulgado\", \"doblado\", \"doblegado\", \"doctorado\", \"documentado\", \"dogmatizado\", \"dolido\", \"domado\", \"domesticado\", \"dominado\", \"donado\", \"dopado\", \"dormido\", \"dosificado\", \"dotado\", \"dragado\", \"dramatizado\", \"drenado\", \"drogado\", \"duchado\", \"dudado\", \"dulcificado\", \"duplicado\", \"durado\", \"echado\", \"eclipsado\", \"eclosionado\", \"economizado\", \"ecualizado\", \"edificado\", \"editado\", \"educado\", \"efectuado\", \"ejecutado\", \"ejemplificado\", \"ejercido\", \"ejercitado\", \"elaborado\", \"electrizado\", \"electrocutado\", \"elevado\", \"elidido\", \"eliminado\", \"elogiado\", \"elucubrado\", \"eludido\", \"emanado\", \"emancipado\", \"embadurnado\", \"embalado\", \"embalsamado\", \"embanderado\", \"embarcado\", \"embargado\", \"embarrado\", \"embarrancado\", \"embaucado\", \"embebido\", \"embelesado\", \"embellecido\", \"embestido\", \"embolado\", \"embolsado\", \"emborrachado\", \"emborronado\", \"emboscado\", \"embotado\", \"embriagado\", \"embrollado\", \"embrutecido\", \"embuchado\", \"emergido\", \"emigrado\", \"emitido\", \"emocionado\", \"empacado\", \"empachado\", \"empadronado\", \"empalado\", \"empalmado\", \"empanado\", \"empañado\", \"empantanado\", \"empapelado\", \"empaquetado\", \"emparejado\", \"empastado\", \"empatado\", \"empecinado\", \"empeñado\", \"empeorado\", \"empequeñecido\", \"emperrado\", \"empezado\", \"empinado\", \"emplazado\", \"empleado\", \"empobrecido\", \"empoderado\", \"empollado\", \"empolvado\", \"emponzoñado\", \"emprendido\", \"empujado\", \"empuñado\", \"emputado\", \"emulado\", \"emulsionado\", \"enajenado\", \"enaltecido\", \"enamorado\", \"enarbolado\", \"enardecido\", \"encabezado\", \"encabritado\", \"encabronado\", \"encadenado\", \"encajado\", \"encajonado\", \"encallado\", \"encamado\", \"encaminado\", \"encandilado\", \"encanecido\", \"encañonado\", \"encantado\", \"encaprichado\", \"encapsulado\", \"encarado\", \"encaramado\", \"encarecido\", \"encargado\", \"encariñado\", \"encarnado\", \"encarrilado\", \"encartado\", \"encasillado\", \"encasquetado\", \"encasquillado\", \"encastrado\", \"encausado\", \"encauzado\", \"enceguecido\", \"encendido\", \"encerado\", \"encerrado\", \"encharcado\", \"enchufado\", \"encimado\", \"encogido\", \"encolado\", \"encolerizado\", \"encolumnado\", \"encomendado\", \"enconado\", \"encontrado\", \"encordado\", \"encrespado\", \"encuadrado\", \"encubierto\", \"encuerado\", \"encumbrado\", \"enderezado\", \"endeudado\", \"endilgado\", \"endiosado\", \"endosado\", \"endulzado\", \"endurecido\", \"enemistado\", \"energizado\", \"enervado\", \"enfadado\", \"enfangado\", \"enfatizado\", \"enfermado\", \"enfiestado\", \"enfilado\", \"enflaquecido\", \"enfocado\", \"enfrascado\", \"enfrentado\", \"enfriado\", \"enfurecido\", \"engalanado\", \"engañado\", \"enganchado\", \"engarzado\", \"engatusado\", \"engendrado\", \"englobado\", \"engolosinado\", \"engordado\", \"engranado\", \"engrandecido\", \"engrasado\", \"engreído\", \"engrosado\", \"engullido\", \"enharinado\", \"enhebrado\", \"enjuagado\", \"enjugado\", \"enjuiciado\", \"enlazado\", \"enlistado\", \"enlodado\", \"enloquecido\", \"enlozado\", \"enlutado\", \"enmarañado\", \"enmascarado\", \"enmendado\", \"enmohecido\", \"enmudecido\", \"ennegrecido\", \"ennoblecido\", \"enorgullecido\", \"enrarecido\", \"enredado\", \"enripiado\", \"enriquecido\", \"enrocado\", \"enrojecido\", \"enrolado\", \"enrollado\", \"enroscado\", \"enrumbado\", \"ensalzado\", \"ensamblado\", \"ensañado\", \"ensanchado\", \"ensartado\", \"ensayado\", \"ensebado\", \"enseñado\", \"enseñoreado\", \"ensillado\", \"ensoberbecido\", \"ensogado\", \"ensombrecido\", \"ensoñado\", \"ensordecido\", \"ensuciado\", \"entablado\", \"entallado\", \"entendido\", \"enterado\", \"enternecido\", \"enterrado\", \"entibiado\", \"entintado\", \"entonado\", \"entorpecido\", \"entrado\", \"entrampado\", \"entrañado\", \"entreabierto\", \"entrecomillado\", \"entrecruzado\", \"entregado\", \"entrelazado\", \"entremetido\", \"entremezclado\", \"entrenado\", \"entresacado\", \"entretejido\", \"entretenido\", \"entreverado\", \"entrevistado\", \"entristecido\", \"entrometido\", \"entronado\", \"entroncado\", \"entronizado\", \"entumecido\", \"enturbiado\", \"entusiasmado\", \"enumerado\", \"enunciado\", \"envainado\", \"envalentonado\", \"envanecido\", \"envasado\", \"envejecido\", \"envenenado\", \"envestido\", \"enviado\", \"enviciado\", \"envidiado\", \"envilecido\", \"enviudado\", \"envuelto\", \"enzarzado\", \"equilibrado\", \"equiparado\", \"equivocado\", \"erigido\", \"erizado\", \"erogado\", \"erosionado\", \"erotizado\", \"erradicado\", \"errado\", \"esbozado\", \"escabullido\", \"escalado\", \"escaldado\", \"escalfado\", \"escamado\", \"escamoteado\", \"escampado\", \"escandalizado\", \"escaneado\", \"escapado\", \"escaqueado\", \"escarbado\", \"escarchado\", \"escarmentado\", \"escarnecido\", \"escaseado\", \"escatimado\", \"escenificado\", \"escindido\", \"esclarecido\", \"esclavizado\", \"escocido\", \"escogido\", \"escolarizado\", \"escoltado\", \"escondido\", \"escorado\", \"escrachado\", \"escrito\", \"escrutado\", \"escuchado\", \"escudado\", \"escudriñado\", \"esculpido\", \"escupido\", \"escurrido\", \"esforzado\", \"esfumado\", \"esgrimido\", \"esmerado\", \"esmerilado\", \"espabilado\", \"espaciado\", \"españolizado\", \"espantado\", \"esparcido\", \"especificado\", \"especulado\", \"esperado\", \"espesado\", \"espetado\", \"espiado\", \"espigado\", \"espinado\", \"espirado\", \"espiritualizado\", \"espoleado\", \"espolvoreado\", \"esponjado\", \"esponsorizado\", \"esposado\", \"esquematizado\", \"esquiado\", \"esquilado\", \"esquilmado\", \"esquivado\", \"estabilizado\", \"establecido\", \"estacionado\", \"estafado\", \"estallado\", \"estampado\", \"estancado\", \"estaqueado\", \"estatizado\", \"estatuido\", \"esterificado\", \"esterilizado\", \"estigmatizado\", \"estilizado\", \"estimado\", \"estimulado\", \"estipulado\", \"estirado\", \"estorbado\", \"estornudado\", \"estragado\", \"estrangulado\", \"estrechado\", \"estrellado\", \"estremecido\", \"estrenado\", \"estresado\", \"estriado\", \"estropeado\", \"estructurado\", \"estrujado\", \"estudiado\", \"eternizado\", \"etiquetado\", \"evacuado\", \"evadido\", \"evaluado\", \"evangelizado\", \"evaporado\", \"evidenciado\", \"eviscerado\", \"evitado\", \"evocado\", \"evolucionado\", \"exacerbado\", \"exagerado\", \"exaltado\", \"examinado\", \"exasperado\", \"excarcelado\", \"excavado\", \"excedido\", \"exceptuado\", \"excitado\", \"exclamado\", \"excluido\", \"excretado\", \"exculpado\", \"excusado\", \"execrado\", \"exhalado\", \"exhibido\", \"exhortado\", \"exhumado\", \"exigido\", \"exilado\", \"eximido\", \"existido\", \"exonerado\", \"exorcizado\", \"expandido\", \"expedido\", \"expedientado\", \"expelido\", \"expendido\", \"experimentado\", \"expiado\", \"expirado\", \"explayado\", \"explicado\", \"explicitado\", \"explorado\", \"explosionado\", \"explotado\", \"expoliado\", \"exportado\", \"expresado\", \"exprimido\", \"expropiado\", \"expuesto\", \"expulsado\", \"expurgado\", \"extendido\", \"exteriorizado\", \"exterminado\", \"externado\", \"externalizado\", \"extinguido\", \"extirpado\", \"extorsionado\", \"extractado\", \"extraditado\", \"extraído\", \"extralimitado\", \"extrañado\", \"extrapolado\", \"extraviado\", \"extremado\", \"extruido\", \"exudado\", \"eyaculado\", \"eyectado\", \"fabricado\", \"fabulado\", \"facilitado\", \"facturado\", \"facultado\", \"fagocitado\", \"fajado\", \"fallado\", \"fallecido\", \"falsado\", \"falseado\", \"falsificado\", \"familiarizado\", \"fantaseado\", \"fascinado\", \"fastidiado\", \"fatigado\", \"favorecido\", \"fecundado\", \"felicitado\", \"feminizado\", \"fenecido\", \"fermentado\", \"fertilizado\", \"festejado\", \"fiado\", \"fichado\", \"fidelizado\", \"figurado\", \"fijado\", \"filmado\", \"filosofado\", \"filtrado\", \"finalizado\", \"financiado\", \"fincado\", \"fingido\", \"finiquitado\", \"firmado\", \"fiscalizado\", \"fisurado\", \"flagelado\", \"flameado\", \"flanqueado\", \"flaqueado\", \"fletado\", \"flexibilizado\", \"flexionado\", \"flipado\", \"floreado\", \"florecido\", \"flotado\", \"fluctuado\", \"focalizado\", \"fogueado\", \"foliado\", \"follado\", \"fomentado\", \"fondeado\", \"forcejeado\", \"forestado\", \"forjado\", \"formado\", \"formalizado\", \"formateado\", \"formulado\", \"fornicado\", \"forrado\", \"fortalecido\", \"forzado\", \"fotocopiado\", \"fotografiado\", \"fracasado\", \"fraccionado\", \"fracturado\", \"fragmentado\", \"fraguado\", \"franqueado\", \"frecuentado\", \"fregado\", \"frenado\", \"fresado\", \"friccionado\", \"frotado\", \"fructificado\", \"fruncido\", \"fugado\", \"fulminado\", \"fumado\", \"fumigado\", \"funcionado\", \"fundado\", \"fundamentado\", \"fundido\", \"fungido\", \"fusilado\", \"fusionado\", \"fustigado\", \"gafado\", \"ganado\", \"gangrenado\", \"garabateado\", \"garantido\", \"garantizado\", \"garrido\", \"gaseado\", \"gastado\", \"gemido\", \"generado\", \"generalizado\", \"gerenciado\", \"germinado\", \"gestado\", \"gestionado\", \"girado\", \"glorificado\", \"glosado\", \"gobernado\", \"goleado\", \"golpeado\", \"gozado\", \"grabado\", \"graduado\", \"graficado\", \"granjeado\", \"grapado\", \"gratificado\", \"gravado\", \"gravitado\", \"gritado\", \"gruñido\", \"guardado\", \"guarecido\", \"guarnecido\", \"guerreado\", \"guiado\", \"guillotinado\", \"guiñado\", \"guindado\", \"guisado\", \"gustado\", \"habilitado\", \"habitado\", \"habituado\", \"hablado\", \"halado\", \"halagado\", \"hallado\", \"hartado\", \"hechizado\", \"hecho\", \"helenizado\", \"henchido\", \"hendido\", \"heredado\", \"herido\", \"hermanado\", \"herrado\", \"hervido\", \"hibernado\", \"hibridado\", \"hidratado\", \"higienizado\", \"hilado\", \"hilvanado\", \"hincado\", \"hinchado\", \"hipnotizado\", \"hipotecado\", \"historiado\", \"hojeado\", \"holgado\", \"hollado\", \"homenajeado\", \"homogeneizado\", \"homologado\", \"honrado\", \"horadado\", \"horneado\", \"horrorizado\", \"hospedado\", \"hostigado\", \"hostilizado\", \"huido\", \"humanado\", \"humanizado\", \"humectado\", \"humedecido\", \"humillado\", \"hundido\", \"hurgado\", \"hurtado\", \"ideado\", \"idealizado\", \"identificado\", \"ideologizado\", \"idiotizado\", \"idolatrado\", \"ignorado\", \"igualado\", \"ilegalizado\", \"iluminado\", \"ilusionado\", \"ilustrado\", \"imaginado\", \"imbricado\", \"imitado\", \"impactado\", \"impartido\", \"impedido\", \"impelido\", \"imperado\", \"impermeabilizado\", \"implantado\", \"implementado\", \"implicado\", \"implorado\", \"importado\", \"importunado\", \"imposibilitado\", \"impresionado\", \"improvisado\", \"impuesto\", \"impugnado\", \"impulsado\", \"imputado\", \"inaugurado\", \"incautado\", \"incendiado\", \"incentivado\", \"incinerado\", \"incitado\", \"inclinado\", \"incluido\", \"incoado\", \"incomodado\", \"incorporado\", \"incrementado\", \"increpado\", \"incriminado\", \"incubado\", \"inculcado\", \"inculpado\", \"incumplido\", \"incurrido\", \"incursionado\", \"indagado\", \"indemnizado\", \"independizado\", \"indexado\", \"indicado\", \"indigestado\", \"indignado\", \"indispuesto\", \"individuado\", \"inducido\", \"indultado\", \"inervado\", \"infamado\", \"infartado\", \"infectado\", \"inferido\", \"inficionado\", \"infiltrado\", \"inflado\", \"inflamado\", \"infligido\", \"influenciado\", \"influido\", \"informado\", \"infravalorado\", \"infringido\", \"infundido\", \"ingeniado\", \"ingerido\", \"ingresado\", \"inhabilitado\", \"inhalado\", \"inhibido\", \"inhumado\", \"iniciado\", \"inicializado\", \"injertado\", \"injuriado\", \"inmigrado\", \"inmiscuido\", \"inmolado\", \"inmortalizado\", \"inmovilizado\", \"inmunizado\", \"innovado\", \"inoculado\", \"inquietado\", \"inquirido\", \"insensibilizado\", \"insertado\", \"insinuado\", \"insistido\", \"inspeccionado\", \"inspirado\", \"instado\", \"instalado\", \"instaurado\", \"instigado\", \"instituido\", \"instruido\", \"instrumentado\", \"instrumentalizado\", \"insuflado\", \"insultado\", \"insumido\", \"integrado\", \"intelectualizado\", \"intensificado\", \"intentado\", \"interactuado\", \"intercalado\", \"intercambiado\", \"intercedido\", \"interceptado\", \"interesado\", \"interferido\", \"interiorizado\", \"intermediado\", \"internacionalizado\", \"internalizado\", \"interpelado\", \"interpolado\", \"interpretado\", \"interpuesto\", \"interrogado\", \"interrumpido\", \"intervenido\", \"intimado\", \"intimidado\", \"intitulado\", \"intoxicado\", \"intrigado\", \"introducido\", \"intuido\", \"inundado\", \"inutilizado\", \"invadido\", \"invalidado\", \"inventado\", \"inventariado\", \"invertido\", \"investido\", \"investigado\", \"invitado\", \"invocado\", \"involucionado\", \"inyectado\", \"ionizado\", \"ironizado\", \"irradiado\", \"irrespetado\", \"irrigado\", \"irritado\", \"irrogado\", \"irrumpido\", \"jactado\", \"jalado\", \"jaleado\", \"jalonado\", \"jaqueado\", \"jerarquizado\", \"jodido\", \"jorobado\", \"jubilado\", \"jugado\", \"juntado\", \"jurado\", \"juramentado\", \"justificado\", \"juzgado\", \"laborado\", \"labrado\", \"laburado\", \"lacado\", \"lacerado\", \"lactado\", \"ladeado\", \"ladrado\", \"lamentado\", \"lamido\", \"laminado\", \"languidecido\", \"lanzado\", \"lapidado\", \"laqueado\", \"largado\", \"lastimado\", \"lastrado\", \"latido\", \"laudado\", \"lavado\", \"legalizado\", \"legislado\", \"legitimado\", \"leído\", \"lesionado\", \"leudado\", \"levantado\", \"liado\", \"liberado\", \"liberalizado\", \"libertado\", \"librado\", \"licitado\", \"licuado\", \"liderizado\", \"lidiado\", \"ligado\", \"lijado\", \"limado\", \"limitado\", \"limpiado\", \"linchado\", \"liquidado\", \"litigado\", \"llagado\", \"llamado\", \"llegado\", \"llenado\", \"llevado\", \"llorado\", \"localizado\", \"logrado\", \"lubricado\", \"luchado\", \"lucido\", \"lucrado\", \"lustrado\", \"macerado\", \"machacado\", \"macheteado\", \"machucado\", \"madreado\", \"madrugado\", \"madurado\", \"magnetizado\", \"magnificado\", \"malacostumbrado\", \"malbaratado\", \"malcriado\", \"maleado\", \"malentendido\", \"malgastado\", \"malinterpretado\", \"malogrado\", \"maltratado\", \"malversado\", \"mamado\", \"manchado\", \"mancillado\", \"mandado\", \"manejado\", \"mangado\", \"mangoneado\", \"manifestado\", \"maniobrado\", \"manipulado\", \"manoseado\", \"manteado\", \"mantenido\", \"manufacturado\", \"maquillado\", \"maquinado\", \"maravillado\", \"marcado\", \"marchitado\", \"mareado\", \"marginado\", \"maridado\", \"martillado\", \"martirizado\", \"masacrado\", \"masajeado\", \"mascado\", \"masificado\", \"masticado\", \"masturbado\", \"matado\", \"materializado\", \"matizado\", \"matriculado\", \"maximizado\", \"meado\", \"mecanografiado\", \"mechado\", \"mecido\", \"mediado\", \"mediatizado\", \"medicado\", \"medido\", \"meditado\", \"medrado\", \"mejorado\", \"mellado\", \"memorizado\", \"mencionado\", \"meneado\", \"menguado\", \"menoscabado\", \"menospreciado\", \"menstruado\", \"mensualizado\", \"mensurado\", \"mentado\", \"mentalizado\", \"mentido\", \"mercadeado\", \"mercantilizado\", \"merecido\", \"merendado\", \"mermado\", \"merodeado\", \"mesurado\", \"metamorfoseado\", \"metido\", \"mezclado\", \"migrado\", \"militado\", \"militarizado\", \"mimado\", \"mimetizado\", \"minado\", \"minimizado\", \"ministrado\", \"minusvalorado\", \"mirado\", \"mistificado\", \"mitificado\", \"mitigado\", \"modelado\", \"modernizado\", \"modificado\", \"modulado\", \"mofado\", \"mojado\", \"moldeado\", \"molestado\", \"molido\", \"monetizado\", \"monitorizado\", \"monopolizado\", \"montado\", \"morado\", \"moralizado\", \"mordido\", \"mordisqueado\", \"mortificado\", \"mosqueado\", \"mostrado\", \"motejado\", \"motivado\", \"movido\", \"movilizado\", \"mudado\", \"muestreado\", \"multado\", \"multiplicado\", \"munido\", \"murmurado\", \"mutado\", \"mutilado\", \"nacionalizado\", \"narcotizado\", \"narrado\", \"naufragado\", \"navegado\", \"necesitado\", \"negado\", \"negociado\", \"neutralizado\", \"ninguneado\", \"nivelado\", \"nombrado\", \"nominado\", \"noqueado\", \"normado\", \"normalizado\", \"notado\", \"notificado\", \"nutrido\", \"obcecado\", \"obedecido\", \"objetado\", \"objetivado\", \"obligado\", \"obliterado\", \"obnubilado\", \"obrado\", \"obsequiado\", \"observado\", \"obsesionado\", \"obstaculizado\", \"obstruido\", \"obtenido\", \"obturado\", \"obviado\", \"ocasionado\", \"ocluido\", \"ocultado\", \"ocupado\", \"odiado\", \"ofendido\", \"ofertado\", \"oficiado\", \"oficializado\", \"ofrecido\", \"ofrendado\", \"ofuscado\", \"oído\", \"ojeado\", \"olfateado\", \"olido\", \"olvidado\", \"omitido\", \"ondeado\", \"ondulado\", \"opacado\", \"operado\", \"opinado\", \"oprimido\", \"optado\", \"optimizado\", \"opuesto\", \"orado\", \"orbitado\", \"ordenado\", \"ordeñado\", \"organizado\", \"orientado\", \"originado\", \"orillado\", \"orinado\", \"ornado\", \"ornamentado\", \"orquestado\", \"osado\", \"oscilado\", \"oscurecido\", \"osificado\", \"ostentado\", \"otorgado\", \"ovacionado\", \"ovulado\", \"oxidado\", \"oxigenado\", \"pacificado\", \"pactado\", \"padecido\", \"paganizado\", \"paginado\", \"paladeado\", \"paliado\", \"palpado\", \"parado\", \"parafraseado\", \"paralizado\", \"parapetado\", \"parasitado\", \"parcelado\", \"parchado\", \"parcheado\", \"pareado\", \"parido\", \"parodiado\", \"parqueado\", \"participado\", \"particularizado\", \"partido\", \"pasado\", \"paseado\", \"pastoreado\", \"pataleado\", \"pateado\", \"patentado\", \"patentizado\", \"patinado\", \"patrullado\", \"pecado\", \"pedaleado\", \"pedido\", \"pegado\", \"peinado\", \"pellizcado\", \"penalizado\", \"penetrado\", \"pensado\", \"percatado\", \"percibido\", \"percutido\", \"perdido\", \"perdonado\", \"perdurado\", \"perecido\", \"peregrinado\", \"perfeccionado\", \"perfilado\", \"perforado\", \"perfumado\", \"pergeñado\", \"peritado\", \"perjudicado\", \"perjurado\", \"permeado\", \"permitido\", \"permutado\", \"pernoctado\", \"perpetrado\", \"perpetuado\", \"perseguido\", \"perseverado\", \"persistido\", \"personado\", \"personalizado\", \"personificado\", \"persuadido\", \"pertenecido\", \"pertrechado\", \"perturbado\", \"pervertido\", \"pervivido\", \"pescado\", \"petado\", \"peticionado\", \"picado\", \"picaneado\", \"picoteado\", \"pifiado\", \"pignorado\", \"pillado\", \"pilotado\", \"piloteado\", \"pincelado\", \"pinchado\", \"pintado\", \"pintarrajeado\", \"pinzado\", \"pirado\", \"pirateado\", \"pisado\", \"pisoteado\", \"pitado\", \"placido\", \"plagiado\", \"planchado\", \"planeado\", \"plantado\", \"planteado\", \"plasmado\", \"platicado\", \"plegado\", \"pluralizado\", \"podado\", \"poetizado\", \"polemizado\", \"politizado\", \"pololeado\", \"ponderado\", \"pontificado\", \"popularizado\", \"porfiado\", \"portado\", \"porteado\", \"posado\", \"posesionado\", \"posibilitado\", \"posicionado\", \"pospuesto\", \"posteado\", \"postergado\", \"postrado\", \"postulado\", \"potenciado\", \"practicado\", \"precarizado\", \"precedido\", \"preceptuado\", \"precintado\", \"precipitado\", \"precisado\", \"preconizado\", \"predicado\", \"predicho\", \"predispuesto\", \"predominado\", \"preferido\", \"prefigurado\", \"pregonado\", \"preguntado\", \"prejuzgado\", \"premiado\", \"prendado\", \"prendido\", \"preocupado\", \"preparado\", \"presagiado\", \"prescindido\", \"presenciado\", \"presentado\", \"presentido\", \"preservado\", \"presidido\", \"presionado\", \"prestado\", \"prestigiado\", \"presumido\", \"presurizado\", \"pretendido\", \"preterido\", \"prevalecido\", \"prevalido\", \"prevaricado\", \"prevenido\", \"previsto\", \"primado\", \"principiado\", \"pringado\", \"priorizado\", \"privatizado\", \"probado\", \"problematizado\", \"procedido\", \"procesado\", \"proclamado\", \"procreado\", \"procurado\", \"prodigado\", \"producido\", \"profanado\", \"proferido\", \"profesado\", \"profesionalizado\", \"profetizado\", \"profundizado\", \"programado\", \"progresado\", \"prohibido\", \"prohijado\", \"proletarizado\", \"proliferado\", \"prologado\", \"prolongado\", \"promediado\", \"prometido\", \"promocionado\", \"promovido\", \"promulgado\", \"pronosticado\", \"pronunciado\", \"propagado\", \"propalado\", \"propendido\", \"propiciado\", \"propinado\", \"proporcionado\", \"propuesto\", \"propugnado\", \"propulsado\", \"prorrateado\", \"prorrogado\", \"proseguido\", \"prosperado\", \"prostituido\", \"protegido\", \"protestado\", \"protocolizado\", \"provenido\", \"provocado\", \"proyectado\", \"psicoanalizado\", \"publicado\", \"publicitado\", \"puesto\", \"pugnado\", \"pujado\", \"pulido\", \"pulsado\", \"pululado\", \"pulverizado\", \"punado\", \"punteado\", \"puntuado\", \"puntualizado\", \"punzado\", \"purgado\", \"purificado\", \"puteado\", \"quebrado\", \"quebrantado\", \"quejado\", \"quemado\", \"querellado\", \"querido\", \"quintuplicado\", \"quitado\", \"racionado\", \"racionalizado\", \"radiado\", \"radicado\", \"radicalizado\", \"raído\", \"rajado\", \"ralentizado\", \"rapado\", \"rapeado\", \"raptado\", \"rascado\", \"rasgado\", \"rasguñado\", \"raspado\", \"rastreado\", \"rasurado\", \"ratificado\", \"rayado\", \"razonado\", \"reabierto\", \"reabsorbido\", \"reaccionado\", \"reactivado\", \"readaptado\", \"readmitido\", \"reafirmado\", \"reagrupado\", \"reajustado\", \"realimentado\", \"realizado\", \"realzado\", \"reanimado\", \"reanudado\", \"reaparecido\", \"rearmado\", \"reasumido\", \"reavivado\", \"rebajado\", \"rebalsado\", \"rebanado\", \"rebasado\", \"rebatido\", \"rebautizado\", \"rebelado\", \"reblandecido\", \"rebobinado\", \"rebosado\", \"rebotado\", \"rebozado\", \"rebuscado\", \"recabado\", \"recaído\", \"recalado\", \"recalcado\", \"recalentado\", \"recalificado\", \"recapacitado\", \"recapitulado\", \"recargado\", \"recatado\", \"recaudado\", \"receptado\", \"recetado\", \"rechazado\", \"recibido\", \"reciclado\", \"recitado\", \"reclamado\", \"reclinado\", \"reclutado\", \"recobrado\", \"recocido\", \"recogido\", \"recolectado\", \"recomendado\", \"recomenzado\", \"recompensado\", \"recompuesto\", \"reconcentrado\", \"reconciliado\", \"reconducido\", \"reconfortado\", \"reconocido\", \"reconquistado\", \"reconsiderado\", \"reconstituido\", \"reconstruido\", \"reconvenido\", \"reconvertido\", \"recopilado\", \"recordado\", \"recorrido\", \"recortado\", \"recreado\", \"recriminado\", \"recrudecido\", \"rectificado\", \"recubierto\", \"reculado\", \"recuperado\", \"recurrido\", \"recusado\", \"redactado\", \"redefinido\", \"redescubierto\", \"redimensionado\", \"redimido\", \"rediseñado\", \"redistribuido\", \"redituado\", \"redoblado\", \"redondeado\", \"reducido\", \"redundado\", \"reedificado\", \"reeditado\", \"reeducado\", \"reelaborado\", \"reembolsado\", \"reemplazado\", \"reencarnado\", \"reencauchado\", \"reencontrado\", \"reenganchado\", \"reenviado\", \"reescrito\", \"reestructurado\", \"reexaminado\", \"refaccionado\", \"referido\", \"refinado\", \"refinanciado\", \"reflejado\", \"reflexionado\", \"reflotado\", \"reforestado\", \"reformado\", \"reforzado\", \"refractado\", \"refrenado\", \"refrendado\", \"refrescado\", \"refrigerado\", \"refundido\", \"refutado\", \"regado\", \"regalado\", \"regañado\", \"regateado\", \"regenerado\", \"regentado\", \"regenteado\", \"regido\", \"regionalizado\", \"registrado\", \"reglado\", \"reglamentado\", \"regocijado\", \"regodeado\", \"regresado\", \"regulado\", \"regularizado\", \"regurgitado\", \"rehabilitado\", \"rehecho\", \"rehogado\", \"rehuido\", \"rehusado\", \"reído\", \"reinado\", \"reincidido\", \"reincorporado\", \"reingresado\", \"reiniciado\", \"reinsertado\", \"reinstalado\", \"reinstaurado\", \"reintegrado\", \"reinventado\", \"reinvertido\", \"reiterado\", \"reivindicado\", \"rejuvenecido\", \"relajado\", \"relamido\", \"relanzado\", \"relatado\", \"relativizado\", \"relegado\", \"releído\", \"relevado\", \"religado\", \"rellenado\", \"remachado\", \"remado\", \"remangado\", \"remarcado\", \"rematado\", \"remecido\", \"remediado\", \"rememorado\", \"remendado\", \"remitido\", \"remodelado\", \"remojado\", \"remolcado\", \"remontado\", \"removido\", \"remplazado\", \"renacido\", \"rendido\", \"renegado\", \"renegociado\", \"reñido\", \"renombrado\", \"renovado\", \"rentabilizado\", \"rentado\", \"renunciado\", \"reordenado\", \"reorganizado\", \"reorientado\", \"reparado\", \"repartido\", \"repasado\", \"repatriado\", \"repelido\", \"repensado\", \"repercutido\", \"repescado\", \"repetido\", \"repicado\", \"repintado\", \"replanteado\", \"replegado\", \"replicado\", \"repoblado\", \"reportado\", \"reporteado\", \"reposado\", \"repreguntado\", \"reprendido\", \"represado\", \"representado\", \"reprimido\", \"reprobado\", \"reprochado\", \"reproducido\", \"repudiado\", \"repuesto\", \"repugnado\", \"repuntado\", \"reputado\", \"requerido\", \"requisado\", \"resaltado\", \"resarcido\", \"resbalado\", \"rescatado\", \"rescindido\", \"resecado\", \"reseñado\", \"reservado\", \"reseteado\", \"resguardado\", \"residido\", \"resignado\", \"resistido\", \"resonado\", \"respaldado\", \"respetado\", \"respirado\", \"resplandecido\", \"respondido\", \"responsabilizado\", \"resquebrajado\", \"restablecido\", \"restado\", \"restaurado\", \"restituido\", \"restregado\", \"resucitado\", \"resuelto\", \"resumido\", \"resurgido\", \"retado\", \"retardado\", \"retenido\", \"retirado\", \"retocado\", \"retomado\", \"retorcido\", \"retornado\", \"retractado\", \"retraído\", \"retransmitido\", \"retrasado\", \"retratado\", \"retribuido\", \"retrotraído\", \"retumbado\", \"reunido\", \"reunificado\", \"reutilizado\", \"revalidado\", \"revalorizado\", \"revaluado\", \"revelado\", \"revendido\", \"reventado\", \"reverdecido\", \"reverenciado\", \"revertido\", \"revestido\", \"revirado\", \"revisado\", \"revitalizado\", \"revivido\", \"revocado\", \"revolcado\", \"revoloteado\", \"revolucionado\", \"revuelto\", \"ridiculizado\", \"rifado\", \"rimado\", \"rivalizado\", \"rizado\", \"robado\", \"robustecido\", \"rociado\", \"rodado\", \"rodeado\", \"rogado\", \"roído\", \"rondado\", \"rotado\", \"roto\", \"rotulado\", \"roturado\", \"rozado\", \"ruborizado\", \"rubricado\", \"rugido\", \"rumiado\", \"rumorado\", \"sabido\", \"saboreado\", \"saboteado\", \"sacado\", \"saciado\", \"sacralizado\", \"sacrificado\", \"sacudido\", \"saldado\", \"salpimentado\", \"salpullido\", \"saltado\", \"salteado\", \"saludado\", \"salvado\", \"salvaguardado\", \"sanado\", \"saneado\", \"sangrado\", \"santificado\", \"saqueado\", \"satanizado\", \"satirizado\", \"satisfecho\", \"sazonado\", \"secado\", \"seccionado\", \"secretado\", \"secuenciado\", \"secuestrado\", \"secundado\", \"sedimentado\", \"seducido\", \"segado\", \"segmentado\", \"segregado\", \"seguido\", \"seleccionado\", \"sembrado\", \"señalado\", \"sensibilizado\", \"sentado\", \"sentenciado\", \"sentido\", \"separado\", \"serenado\", \"serrado\", \"servido\", \"significado\", \"silenciado\", \"simbolizado\", \"simpatizado\", \"simplificado\", \"simulado\", \"sincerado\", \"sincronizado\", \"sindicado\", \"sindicalizado\", \"singularizado\", \"sintetizado\", \"sintonizado\", \"sistematizado\", \"situado\", \"sobado\", \"sobornado\", \"sobrado\", \"sobrecargado\", \"sobrecogido\", \"sobreentendido\", \"sobreestimado\", \"sobrellevado\", \"sobrentendido\", \"sobrepasado\", \"sobrepuesto\", \"sobresalido\", \"sobresaltado\", \"sobrestimado\", \"sobrevenido\", \"sobrevivido\", \"sobrevolado\", \"socavado\", \"socializado\", \"socorrido\", \"sodomizado\", \"sofocado\", \"sojuzgado\", \"solapado\", \"solicitado\", \"solidarizado\", \"solidificado\", \"soliviantado\", \"soltado\", \"solucionado\", \"solventado\", \"sombreado\", \"sometido\", \"sonado\", \"soñado\", \"sondeado\", \"sonreído\", \"sonrojado\", \"sopesado\", \"soplado\", \"soportado\", \"sorbido\", \"sorprendido\", \"sorteado\", \"sosegado\", \"soslayado\", \"sospechado\", \"sostenido\", \"suavizado\", \"subastado\", \"subcontratado\", \"subdividido\", \"subestimado\", \"subido\", \"sublevado\", \"sublimado\", \"subrayado\", \"subrogado\", \"subsanado\", \"subsidiado\", \"subsistido\", \"substraído\", \"subsumido\", \"subvertido\", \"subyugado\", \"succionado\", \"sucedido\", \"sucumbido\", \"sudado\", \"sufragado\", \"sufrido\", \"sugerido\", \"sugestionado\", \"suicidado\", \"sujetado\", \"sumado\", \"sumergido\", \"suministrado\", \"supeditado\", \"superado\", \"superpuesto\", \"supervisado\", \"suplantado\", \"suplicado\", \"suplido\", \"suprimido\", \"supuesto\", \"surcado\", \"surtido\", \"suscitado\", \"suspendido\", \"suspirado\", \"sustanciado\", \"sustantivado\", \"sustentado\", \"sustituido\", \"sustraído\", \"susurrado\", \"suturado\", \"tabulado\", \"tachado\", \"talado\", \"taladrado\", \"tallado\", \"tambaleado\", \"tamizado\", \"tañido\", \"tanteado\", \"tapado\", \"tapizado\", \"taponado\", \"tarareado\", \"tardado\", \"tasado\", \"tatuado\", \"tecleado\", \"tejido\", \"telefoneado\", \"televisado\", \"temido\", \"templado\", \"tendido\", \"tenido\", \"tensado\", \"tentado\", \"teorizado\", \"terciado\", \"tergiversado\", \"terminado\", \"territorializado\", \"testado\", \"testeado\", \"testificado\", \"testimoniado\", \"tildado\", \"timado\", \"timbrado\", \"tinturado\", \"tipeado\", \"tipificado\", \"tirado\", \"tiranizado\", \"tironeado\", \"tiroteado\", \"titubeado\", \"tiznado\", \"tocado\", \"tolerado\", \"tomado\", \"tonificado\", \"topado\", \"toqueteado\", \"torcido\", \"toreado\", \"tornado\", \"tornasolado\", \"torneado\", \"torpedeado\", \"torturado\", \"tosido\", \"tostado\", \"totalizado\", \"trabado\", \"trabajado\", \"traducido\", \"traficado\", \"tragado\", \"traicionado\", \"traído\", \"trajinado\", \"tramado\", \"tramitado\", \"trancado\", \"tranquilizado\", \"transcendido\", \"transcurrido\", \"transferido\", \"transfigurado\", \"transformado\", \"transfundido\", \"transgredido\", \"transigido\", \"transitado\", \"transliterado\", \"translucido\", \"transmitido\", \"transmutado\", \"transparentado\", \"transpirado\", \"transportado\", \"transpuesto\", \"trasegado\", \"trasgredido\", \"trasladado\", \"traslapado\", \"traslucido\", \"trasnochado\", \"traspapelado\", \"traspasado\", \"trasplantado\", \"traspuesto\", \"trasquilado\", \"trasteado\", \"trastocado\", \"trastornado\", \"trasvasado\", \"tratado\", \"trazado\", \"trenzado\", \"trepado\", \"tributado\", \"trincado\", \"triplicado\", \"triturado\", \"triunfado\", \"trivializado\", \"trocado\", \"troceado\", \"tronado\", \"tronchado\", \"truncado\", \"tumbado\", \"tuneado\", \"turbado\", \"turnado\", \"tutelado\", \"ufanado\", \"ultimado\", \"uncido\", \"ungido\", \"unido\", \"universalizado\", \"untado\", \"urbanizado\", \"urdido\", \"usado\", \"usufructuado\", \"usurpado\", \"utilizado\", \"vacado\", \"vaciado\", \"vacilado\", \"vacunado\", \"vagado\", \"validado\", \"valido\", \"valorado\", \"valorizado\", \"valuado\", \"vanagloriado\", \"vandalizado\", \"vaporizado\", \"variado\", \"vaticinado\", \"vedado\", \"vehiculado\", \"vejado\", \"velado\", \"vencido\", \"vendado\", \"vendido\", \"venerado\", \"vengado\", \"ventilado\", \"veraneado\", \"verbalizado\", \"verificado\", \"versado\", \"versionado\", \"vertebrado\", \"vertido\", \"vestido\", \"vetado\", \"viabilizado\", \"viajado\", \"vibrado\", \"victimado\", \"victimizado\", \"vigilado\", \"vigorizado\", \"vilipendiado\", \"vindicado\", \"violado\", \"violentado\", \"virado\", \"visado\", \"visibilizado\", \"visitado\", \"vislumbrado\", \"visto\", \"visualizado\", \"vitoreado\", \"vitrificado\", \"vituperado\", \"vivido\", \"vivificado\", \"vocalizado\", \"voceado\", \"vociferado\", \"volado\", \"volatilizado\", \"volcado\", \"volteado\", \"vomitado\", \"votado\", \"vuelto\", \"vulcanizado\", \"vulgarizado\", \"vulnerado\", \"yuxtapuesto\", \"zafado\", \"zambullido\", \"zampado\", \"zanjado\", \"zarandeado\", \"zarpado\", \"zozobrado\", \"zumbado\", \"zurcido\", \"zurrado\", \"abajada\", \"abalanzada\", \"abaleada\", \"abandonada\", \"abaratada\", \"abarcada\", \"abarrotada\", \"abastecida\", \"abatida\", \"abdicada\", \"abierta\", \"abismada\", \"abjurada\", \"ablandada\", \"abocada\", \"abochornada\", \"abofeteada\", \"abolida\", \"abollada\", \"abombada\", \"abominada\", \"abonada\", \"abordada\", \"aborrecida\", \"aborregada\", \"abortada\", \"abotonada\", \"abrasada\", \"abrazada\", \"abrevada\", \"abreviada\", \"abrigada\", \"abrochada\", \"abrogada\", \"abroquelada\", \"abrumada\", \"absorbida\", \"abstenida\", \"abstraída\", \"absuelta\", \"abucheada\", \"abultada\", \"abundada\", \"aburguesada\", \"aburrida\", \"abusada\", \"acabada\", \"acallada\", \"acalorada\", \"acaparada\", \"acariciada\", \"acarreada\", \"acatada\", \"acaudillada\", \"accedida\", \"accionada\", \"acechada\", \"aceitada\", \"acelerada\", \"acentuada\", \"aceptada\", \"acerada\", \"acercada\", \"acertada\", \"achacada\", \"achantada\", \"achatada\", \"achicada\", \"acicalada\", \"acidificada\", \"aclarada\", \"aclimatada\", \"acobardada\", \"acodada\", \"acogida\", \"acojonada\", \"acometida\", \"acomodada\", \"acompañada\", \"acompasada\", \"acongojada\", \"aconsejada\", \"acontecida\", \"acopiada\", \"acoplada\", \"acordada\", \"acordonada\", \"acorralada\", \"acortada\", \"acosada\", \"acostada\", \"acostumbrada\", \"acotada\", \"acrecentada\", \"acreditada\", \"acrisolada\", \"activada\", \"actuada\", \"acuchillada\", \"acuciada\", \"acudida\", \"acuerpada\", \"acumulada\", \"acunada\", \"acuñada\", \"acurrucada\", \"acusada\", \"adaptada\", \"adecentada\", \"adelantada\", \"adelgazada\", \"adentrada\", \"adeudada\", \"adherida\", \"adicionada\", \"adiestrada\", \"adivinada\", \"adjetivada\", \"adjudicada\", \"adjuntada\", \"administrada\", \"admirada\", \"admitida\", \"adoctrinada\", \"adolecida\", \"adoptada\", \"adorada\", \"adormecida\", \"adornada\", \"adquirida\", \"aducida\", \"adueñada\", \"adulada\", \"adulterada\", \"advertida\", \"afanada\", \"afeada\", \"afectada\", \"afeitada\", \"aferrada\", \"afianzada\", \"afinada\", \"afirmada\", \"afligida\", \"aflorada\", \"afrentada\", \"afrontada\", \"agachada\", \"agarrada\", \"agarrotada\", \"agasajada\", \"agenciada\", \"agigantada\", \"agilizada\", \"agitada\", \"aglutinada\", \"agobiada\", \"agolpada\", \"agonizada\", \"agostada\", \"agotada\", \"agradada\", \"agradecida\", \"agrandada\", \"agravada\", \"agraviada\", \"agredida\", \"agregada\", \"agriada\", \"agrietada\", \"agrupada\", \"aguada\", \"aguantada\", \"aguardada\", \"agudizada\", \"aguijoneada\", \"agujereada\", \"aguzada\", \"ahogada\", \"ahondada\", \"ahorcada\", \"ahorrada\", \"ahuecada\", \"ahuyentada\", \"aireada\", \"aislada\", \"ajustada\", \"ajusticiada\", \"alabada\", \"alagada\", \"alambrada\", \"alardeada\", \"alargada\", \"alarmada\", \"albergada\", \"alborotada\", \"alcanzada\", \"aleccionada\", \"alegada\", \"alegrada\", \"alejada\", \"alentada\", \"alertada\", \"alfabetizada\", \"alfombrada\", \"aliada\", \"alienada\", \"aligerada\", \"alimentada\", \"aliñada\", \"alineada\", \"alisada\", \"alistada\", \"aliviada\", \"alivianada\", \"allanada\", \"almacenada\", \"almorzada\", \"alojada\", \"alquilada\", \"alterada\", \"alternada\", \"alucinada\", \"aludida\", \"alumbrada\", \"alzada\", \"amada\", \"amaestrada\", \"amagada\", \"amainada\", \"amalgamada\", \"amamantada\", \"amansada\", \"amargada\", \"amarrada\", \"amasada\", \"ambicionada\", \"amedrentada\", \"amenazada\", \"amenizada\", \"ameritada\", \"ametrallada\", \"amilanada\", \"aminorada\", \"amnistiada\", \"amoldada\", \"amonestada\", \"amontonada\", \"amordazada\", \"amortajada\", \"amortiguada\", \"amortizada\", \"amotinada\", \"amparada\", \"ampayada\", \"ampliada\", \"amplificada\", \"amputada\", \"amueblada\", \"añadida\", \"analizada\", \"anatematizada\", \"andada\", \"anegada\", \"anestesiada\", \"anexada\", \"anexionada\", \"anhelada\", \"anidada\", \"anillada\", \"animada\", \"aniquilada\", \"anisada\", \"añorada\", \"anotada\", \"anoticiada\", \"ansiada\", \"antecedida\", \"antepuesta\", \"anticipada\", \"antojada\", \"anudada\", \"anulada\", \"anunciada\", \"apabullada\", \"apachurrada\", \"apaciguada\", \"apadrinada\", \"apagada\", \"apalancada\", \"apaleada\", \"apañada\", \"apantallada\", \"aparcada\", \"apareada\", \"aparecida\", \"aparentada\", \"apartada\", \"apeada\", \"apedreada\", \"apelada\", \"apellidada\", \"apelmazada\", \"apercibida\", \"apersonada\", \"apestada\", \"apetecida\", \"apiadada\", \"apilada\", \"apiñada\", \"apisonada\", \"aplacada\", \"aplanada\", \"aplastada\", \"aplaudida\", \"aplazada\", \"aplicada\", \"apoderada\", \"apoltronada\", \"aporreada\", \"aportada\", \"aposentada\", \"apostada\", \"apostatada\", \"apostillada\", \"apoyada\", \"apreciada\", \"aprehendida\", \"apremiada\", \"aprendida\", \"apresada\", \"apresurada\", \"apretada\", \"apretujada\", \"aprisionada\", \"aprobada\", \"aprovechada\", \"aprovisionada\", \"aproximada\", \"apuñalada\", \"apuñaleada\", \"apuntada\", \"apuntalada\", \"apuntillada\", \"apurada\", \"aquejada\", \"aquietada\", \"aquilatada\", \"arañada\", \"arbitrada\", \"archivada\", \"arengada\", \"argüida\", \"argumentada\", \"armada\", \"armonizada\", \"aromatizada\", \"arqueada\", \"arrancada\", \"arrasada\", \"arrastrada\", \"arreada\", \"arrebatada\", \"arreciada\", \"arreglada\", \"arrellanada\", \"arremangada\", \"arremetida\", \"arrendada\", \"arrepentida\", \"arrestada\", \"arriada\", \"arribada\", \"arriesgada\", \"arrimada\", \"arrinconada\", \"arrodillada\", \"arrogada\", \"arrojada\", \"arrollada\", \"arropada\", \"arruinada\", \"arrullada\", \"articulada\", \"asada\", \"asaltada\", \"ascendida\", \"aseada\", \"asechada\", \"asediada\", \"asegurada\", \"asemejada\", \"asentada\", \"asentida\", \"aserrada\", \"asesinada\", \"asesorada\", \"asestada\", \"aseverada\", \"asfixiada\", \"asida\", \"asignada\", \"asilada\", \"asimilada\", \"asistida\", \"asolada\", \"asoleada\", \"asomada\", \"asombrada\", \"aspirada\", \"astillada\", \"asumida\", \"asustada\", \"atacada\", \"atada\", \"atajada\", \"atarantada\", \"atascada\", \"atemorizada\", \"atemperada\", \"atenazada\", \"atendida\", \"atenida\", \"atentada\", \"atenuada\", \"aterrada\", \"aterrorizada\", \"atesorada\", \"atestiguada\", \"atiborrada\", \"atisbada\", \"atizada\", \"atomizada\", \"atontada\", \"atorada\", \"atormentada\", \"atornillada\", \"atosigada\", \"atracada\", \"atragantada\", \"atraída\", \"atrancada\", \"atrapada\", \"atrasada\", \"atravesada\", \"atrevida\", \"atribuida\", \"atrincherada\", \"atrofiada\", \"atropellada\", \"aturdida\", \"auditada\", \"augurada\", \"aumentada\", \"aunada\", \"aupada\", \"auscultada\", \"ausentada\", \"autenticada\", \"autentificada\", \"autodefinida\", \"autoeditada\", \"automatizada\", \"autorizada\", \"autorregulada\", \"auxiliada\", \"avalada\", \"avanzada\", \"avasallada\", \"avenida\", \"aventada\", \"aventajada\", \"aventurada\", \"averiada\", \"averiguada\", \"avezada\", \"avisada\", \"avispada\", \"avistada\", \"avivada\", \"avizorada\", \"avocada\", \"ayudada\", \"azotada\", \"azuzada\", \"babeada\", \"bailada\", \"bajada\", \"balaceada\", \"balanceada\", \"bañada\", \"banalizada\", \"bancada\", \"bandeada\", \"barajada\", \"barrida\", \"basada\", \"bastardeada\", \"basureada\", \"batallada\", \"bateada\", \"batida\", \"bautizada\", \"beatificada\", \"bebida\", \"beneficiada\", \"besada\", \"bifurcada\", \"birlada\", \"blandida\", \"blanqueada\", \"blasfemada\", \"blindada\", \"bloqueada\", \"boicoteada\", \"bombardeada\", \"bombeada\", \"bonificada\", \"bordeada\", \"borrada\", \"borroneada\", \"bosquejada\", \"bostezada\", \"botada\", \"boxeada\", \"bregada\", \"brillada\", \"brincada\", \"brindada\", \"bromeada\", \"brotada\", \"bruñida\", \"buceada\", \"burlada\", \"buscada\", \"cabeceada\", \"cabida\", \"cabildeada\", \"cabreada\", \"cacareada\", \"cachada\", \"cacheada\", \"cacheteada\", \"caducada\", \"cagada\", \"calada\", \"calculada\", \"caldeada\", \"calefaccionada\", \"calendarizada\", \"calentada\", \"calibrada\", \"calificada\", \"caligrafiada\", \"callada\", \"calmada\", \"calumniada\", \"calzada\", \"cambiada\", \"caminada\", \"camuflada\", \"canalizada\", \"cancelada\", \"canjeada\", \"cansada\", \"cantada\", \"capada\", \"capeada\", \"capitalizada\", \"capitulada\", \"captada\", \"capturada\", \"caracterizada\", \"carburada\", \"carcomida\", \"cardada\", \"careada\", \"carecida\", \"cargada\", \"caricaturizada\", \"cartografiada\", \"cascada\", \"castigada\", \"castrada\", \"catada\", \"catalizada\", \"catalogada\", \"catapultada\", \"cateada\", \"categorizada\", \"causada\", \"cauterizada\", \"cautivada\", \"cavada\", \"cavilada\", \"cazada\", \"cebada\", \"cedida\", \"cegada\", \"cejada\", \"celebrada\", \"cenada\", \"ceñida\", \"censurada\", \"centrifugada\", \"centuplicada\", \"cepillada\", \"cercada\", \"cercenada\", \"cerciorada\", \"cernida\", \"cerrada\", \"cesada\", \"chafada\", \"chamuscada\", \"chantajeada\", \"chapada\", \"charlada\", \"chateada\", \"chequeada\", \"chiflada\", \"chillada\", \"chingada\", \"chirriada\", \"chivada\", \"chocada\", \"chorreada\", \"choteada\", \"chupada\", \"chutada\", \"cicatrizada\", \"cifrada\", \"cimentada\", \"cincelada\", \"circulada\", \"circuncidada\", \"circundada\", \"citada\", \"clamada\", \"clarificada\", \"clasificada\", \"claudicada\", \"clausurada\", \"clavada\", \"clicada\", \"clonada\", \"coaccionada\", \"coadyuvada\", \"coagulada\", \"coaligada\", \"coartada\", \"cobijada\", \"cobrada\", \"cocida\", \"cocinada\", \"codeada\", \"codiciada\", \"codificada\", \"codirigida\", \"coexistida\", \"cofinanciada\", \"cogida\", \"cohabitada\", \"cohibida\", \"coincidida\", \"colaborada\", \"colacionada\", \"colada\", \"colapsada\", \"coleccionada\", \"colectada\", \"colectivizada\", \"colgada\", \"colisionada\", \"colmada\", \"colocada\", \"colonizada\", \"coloreada\", \"columpiada\", \"combatida\", \"combinada\", \"comentada\", \"comenzada\", \"comerciada\", \"comercializada\", \"cometida\", \"comida\", \"comisionada\", \"compactada\", \"compadecida\", \"compaginada\", \"comparada\", \"comparecida\", \"compartida\", \"compatibilizada\", \"compelida\", \"compendiada\", \"compenetrada\", \"compensada\", \"compilada\", \"complacida\", \"complementada\", \"completada\", \"complotada\", \"comportada\", \"comprada\", \"comprendida\", \"comprimida\", \"comprobada\", \"comprometida\", \"compuesta\", \"compulsada\", \"computada\", \"comulgada\", \"comunicada\", \"concatenada\", \"concebida\", \"concedida\", \"concelebrada\", \"concentrada\", \"conceptuada\", \"conceptualizada\", \"concertada\", \"concienciada\", \"concientizada\", \"conciliada\", \"concitada\", \"concluida\", \"concordada\", \"concretada\", \"concretizada\", \"conculcada\", \"concursada\", \"condenada\", \"condensada\", \"condicionada\", \"condimentada\", \"condolida\", \"condonada\", \"conducida\", \"conectada\", \"conexionada\", \"confabulada\", \"confeccionada\", \"conferida\", \"confesada\", \"confiada\", \"configurada\", \"confirmada\", \"confiscada\", \"confluida\", \"conformada\", \"confortada\", \"confrontada\", \"confundida\", \"congeniada\", \"congestionada\", \"congratulada\", \"congregada\", \"conjeturada\", \"conjugada\", \"conjuntada\", \"conjurada\", \"conllevada\", \"conmemorada\", \"conminada\", \"conmocionada\", \"conmovida\", \"conmutada\", \"connotada\", \"conquistada\", \"consagrada\", \"conseguida\", \"consensuada\", \"consentida\", \"conservada\", \"considerada\", \"consignada\", \"consistida\", \"consolada\", \"consolidada\", \"conspirada\", \"constada\", \"constatada\", \"constelada\", \"constitucionalizada\", \"constituida\", \"constreñida\", \"construida\", \"consultada\", \"consumada\", \"consumida\", \"contabilizada\", \"contactada\", \"contada\", \"contagiada\", \"contemplada\", \"contendida\", \"contenida\", \"contentada\", \"contestada\", \"contextualizada\", \"continuada\", \"contorneada\", \"contraatacada\", \"contrabandeada\", \"contradicha\", \"contrahecha\", \"contraída\", \"contrapesada\", \"contrapuesta\", \"contrariada\", \"contrarrestada\", \"contrastada\", \"contratada\", \"contravenida\", \"contribuida\", \"contristada\", \"controlada\", \"convalidada\", \"convencida\", \"convenida\", \"convergida\", \"conversada\", \"convertida\", \"convidada\", \"convivida\", \"convocada\", \"convulsionada\", \"cooperada\", \"cooptada\", \"coordinada\", \"copada\", \"copiada\", \"coproducida\", \"copulada\", \"coqueteada\", \"corchada\", \"coreada\", \"coreografiada\", \"corneada\", \"coronada\", \"corporizada\", \"corregida\", \"correlacionada\", \"correspondida\", \"correteada\", \"corrida\", \"corroborada\", \"corroída\", \"corrompida\", \"cortada\", \"cortejada\", \"cosechada\", \"cosida\", \"cosificada\", \"costada\", \"costeada\", \"cotejada\", \"cotizada\", \"creada\", \"creída\", \"criada\", \"cribada\", \"criminalizada\", \"crispada\", \"cristalizada\", \"cristianizada\", \"criticada\", \"cronometrada\", \"crucificada\", \"crujida\", \"cruzada\", \"cuadriplicada\", \"cuadruplicada\", \"cuajada\", \"cuantificada\", \"cuarteada\", \"cubierta\", \"cuestionada\", \"cuidada\", \"culeada\", \"culminada\", \"culpabilizada\", \"culpada\", \"cultivada\", \"culturizada\", \"cumplida\", \"cumplimentada\", \"cundida\", \"curada\", \"curioseada\", \"currada\", \"cursada\", \"curvada\", \"custodiada\", \"dada\", \"dañada\", \"danzada\", \"datada\", \"dateada\", \"debatida\", \"debida\", \"debilitada\", \"debitada\", \"debutada\", \"decaída\", \"decantada\", \"decapitada\", \"decepcionada\", \"decidida\", \"declamada\", \"declarada\", \"declinada\", \"decodificada\", \"decolorada\", \"decomisada\", \"decrecida\", \"decretada\", \"dedicada\", \"deducida\", \"defecada\", \"defendida\", \"defenestrada\", \"deferida\", \"definida\", \"deformada\", \"defraudada\", \"degenerada\", \"deglutida\", \"degollada\", \"degradada\", \"degustada\", \"deificada\", \"dejada\", \"delatada\", \"delegada\", \"deleitada\", \"deletreada\", \"deliberada\", \"delimitada\", \"delineada\", \"delinquida\", \"demandada\", \"demarcada\", \"demediada\", \"demeritada\", \"democratizada\", \"demolida\", \"demonizada\", \"demorada\", \"demostrada\", \"demudada\", \"denegada\", \"denigrada\", \"denominada\", \"denostada\", \"denotada\", \"denunciada\", \"deparada\", \"departida\", \"dependida\", \"depilada\", \"deplorada\", \"deportada\", \"depositada\", \"depreciada\", \"depredada\", \"deprimida\", \"depuesta\", \"depurada\", \"derechizada\", \"derivada\", \"derogada\", \"derramada\", \"derretida\", \"derribada\", \"derrocada\", \"derrochada\", \"derrotada\", \"derruida\", \"derrumbada\", \"desabrochada\", \"desacatada\", \"desacelerada\", \"desacomodada\", \"desaconsejada\", \"desacoplada\", \"desacralizada\", \"desacreditada\", \"desactivada\", \"desafiada\", \"desafinada\", \"desaguada\", \"desahogada\", \"desairada\", \"desajustada\", \"desalentada\", \"desalineada\", \"desalojada\", \"desandada\", \"desangrada\", \"desanimada\", \"desaparecida\", \"desapegada\", \"desaprendida\", \"desaprobada\", \"desaprovechada\", \"desarmada\", \"desarraigada\", \"desarreglada\", \"desarrollada\", \"desarticulada\", \"desaseada\", \"desasida\", \"desasosegada\", \"desatada\", \"desatendida\", \"desautorizada\", \"desayunada\", \"desbancada\", \"desbandada\", \"desbaratada\", \"desbarrancada\", \"desbastada\", \"desbloqueada\", \"desbocada\", \"desbordada\", \"desbrozada\", \"descabalgada\", \"descabezada\", \"descaderada\", \"descalabrada\", \"descalificada\", \"descansada\", \"descargada\", \"descarriada\", \"descarrilada\", \"descartada\", \"descascarada\", \"descascarillada\", \"descendida\", \"descentrada\", \"descifrada\", \"descocida\", \"descodificada\", \"descojonada\", \"descolgada\", \"descolocada\", \"descolonizada\", \"descompensada\", \"descomprimida\", \"descompuesta\", \"desconectada\", \"desconfiada\", \"descongelada\", \"desconocida\", \"descontada\", \"descontaminada\", \"descontextualizada\", \"descontinuada\", \"desconvocada\", \"descorazonada\", \"descorchada\", \"descorrida\", \"descosida\", \"descoyuntada\", \"descreída\", \"descristianizada\", \"descuadrada\", \"descuartizada\", \"descubierta\", \"descuidada\", \"desdeñada\", \"desdibujada\", \"desdicha\", \"desdoblada\", \"deseada\", \"desecada\", \"desechada\", \"desembarazada\", \"desembarcada\", \"desembocada\", \"desembolsada\", \"desempacada\", \"desempañada\", \"desempaquetada\", \"desempeñada\", \"desempolvada\", \"desenamorada\", \"desencadenada\", \"desencajada\", \"desencarnada\", \"desenchufada\", \"desenfocada\", \"desenfundada\", \"desenganchada\", \"desengrasada\", \"desenmascarada\", \"desenredada\", \"desenrollada\", \"desentendida\", \"desenterrada\", \"desentonada\", \"desentrañada\", \"desenvainada\", \"desenvuelta\", \"desequilibrada\", \"desertada\", \"desestabilizada\", \"desestimada\", \"desfalcada\", \"desfallecida\", \"desfigurada\", \"desfondada\", \"desgajada\", \"desgañitada\", \"desgarrada\", \"desgastada\", \"desglosada\", \"desgobernada\", \"desgranada\", \"desguazada\", \"deshecha\", \"desheredada\", \"deshidratada\", \"deshilachada\", \"deshojada\", \"deshonrada\", \"deshuesada\", \"deshumanizada\", \"designada\", \"desilusionada\", \"desincentivada\", \"desinfectada\", \"desinflada\", \"desinflamada\", \"desinformada\", \"desinhibida\", \"desinstalada\", \"desintegrada\", \"desintoxicada\", \"desistida\", \"desjarretada\", \"deslegitimada\", \"desleída\", \"desligada\", \"deslindada\", \"deslizada\", \"deslucida\", \"deslumbrada\", \"desmadrada\", \"desmalezada\", \"desmantelada\", \"desmaquillada\", \"desmarcada\", \"desmayada\", \"desmejorada\", \"desmembrada\", \"desmentida\", \"desmenuzada\", \"desmerecida\", \"desmigada\", \"desmitificada\", \"desmoldada\", \"desmontada\", \"desmoralizada\", \"desmoronada\", \"desmotivada\", \"desmovilizada\", \"desnaturalizada\", \"desnivelada\", \"desnucada\", \"desnudada\", \"desobedecida\", \"desobligada\", \"desoída\", \"desollada\", \"desorganizada\", \"desorientada\", \"despachada\", \"desparasitada\", \"desparecida\", \"desparramada\", \"despedazada\", \"despedida\", \"despegada\", \"despeinada\", \"despejada\", \"despellejada\", \"despeñada\", \"despenalizada\", \"desperdiciada\", \"despersonalizada\", \"despertada\", \"despilfarrada\", \"despintada\", \"despiojada\", \"despistada\", \"desplazada\", \"desplegada\", \"desplomada\", \"desplumada\", \"despojada\", \"despolitizada\", \"desposada\", \"desposeída\", \"despotricada\", \"despreciada\", \"desprendida\", \"despreocupada\", \"desprestigiada\", \"desprogramada\", \"despulpada\", \"despuntada\", \"desquiciada\", \"desquitada\", \"destacada\", \"destapada\", \"desteñida\", \"desterrada\", \"destetada\", \"destilada\", \"destituida\", \"destrabada\", \"destripada\", \"destronada\", \"destrozada\", \"destruida\", \"desunida\", \"desvalijada\", \"desvalorizada\", \"desvanecida\", \"desvelada\", \"desvestida\", \"desviada\", \"desvinculada\", \"desvirtuada\", \"desvivida\", \"detectada\", \"detenida\", \"detentada\", \"deteriorada\", \"determinada\", \"detestada\", \"detonada\", \"devaluada\", \"devanada\", \"devastada\", \"develada\", \"devengada\", \"devenida\", \"devorada\", \"devuelta\", \"diagnosticada\", \"diagramada\", \"dializada\", \"dialogada\", \"dibujada\", \"dicha\", \"dictada\", \"dictaminada\", \"diezmada\", \"difamada\", \"diferenciada\", \"diferida\", \"dificultada\", \"difuminada\", \"difundida\", \"digerida\", \"digitada\", \"dignada\", \"dignificada\", \"dilapidada\", \"dilatada\", \"diligenciada\", \"dilucidada\", \"diluida\", \"dimensionada\", \"dimitida\", \"dinamitada\", \"dinamizada\", \"dirimida\", \"discernida\", \"disciplinada\", \"discontinuada\", \"discrepada\", \"discriminada\", \"disculpada\", \"discurrida\", \"discutida\", \"diseccionada\", \"diseminada\", \"diseñada\", \"disentida\", \"disertada\", \"disfrazada\", \"disfrutada\", \"disgregada\", \"disgustada\", \"disimulada\", \"disipada\", \"dislocada\", \"disminuida\", \"disociada\", \"dispensada\", \"dispersada\", \"dispuesta\", \"disputada\", \"distada\", \"distanciada\", \"distendida\", \"distinguida\", \"distorsionada\", \"distraída\", \"distribuida\", \"disuadida\", \"disuelta\", \"divagada\", \"diversificada\", \"divertida\", \"dividida\", \"divinizada\", \"divisada\", \"divorciada\", \"divulgada\", \"doblada\", \"doblegada\", \"doctorada\", \"documentada\", \"dogmatizada\", \"dolida\", \"domada\", \"domesticada\", \"dominada\", \"donada\", \"dopada\", \"dormida\", \"dosificada\", \"dotada\", \"dragada\", \"dramatizada\", \"drenada\", \"drogada\", \"duchada\", \"dudada\", \"dulcificada\", \"duplicada\", \"durada\", \"echada\", \"eclipsada\", \"eclosionada\", \"economizada\", \"ecualizada\", \"edificada\", \"editada\", \"educada\", \"efectuada\", \"ejecutada\", \"ejemplificada\", \"ejercida\", \"ejercitada\", \"elaborada\", \"electrizada\", \"electrocutada\", \"elevada\", \"elidida\", \"eliminada\", \"elogiada\", \"elucubrada\", \"eludida\", \"emanada\", \"emancipada\", \"embadurnada\", \"embalada\", \"embalsamada\", \"embanderada\", \"embarcada\", \"embargada\", \"embarrada\", \"embarrancada\", \"embaucada\", \"embebida\", \"embelesada\", \"embellecida\", \"embestida\", \"embolada\", \"embolsada\", \"emborrachada\", \"emborronada\", \"emboscada\", \"embotada\", \"embriagada\", \"embrollada\", \"embrutecida\", \"embuchada\", \"emergida\", \"emigrada\", \"emitida\", \"emocionada\", \"empacada\", \"empachada\", \"empadronada\", \"empalada\", \"empalmada\", \"empanada\", \"empañada\", \"empantanada\", \"empapelada\", \"empaquetada\", \"emparejada\", \"empastada\", \"empatada\", \"empecinada\", \"empeñada\", \"empeorada\", \"empequeñecida\", \"emperrada\", \"empezada\", \"empinada\", \"emplazada\", \"empleada\", \"empobrecida\", \"empoderada\", \"empollada\", \"empolvada\", \"emponzoñada\", \"emprendida\", \"empujada\", \"empuñada\", \"emputada\", \"emulada\", \"emulsionada\", \"enajenada\", \"enaltecida\", \"enamorada\", \"enarbolada\", \"enardecida\", \"encabezada\", \"encabritada\", \"encabronada\", \"encadenada\", \"encajada\", \"encajonada\", \"encallada\", \"encamada\", \"encaminada\", \"encandilada\", \"encanecida\", \"encañonada\", \"encantada\", \"encaprichada\", \"encapsulada\", \"encarada\", \"encaramada\", \"encarecida\", \"encargada\", \"encariñada\", \"encarnada\", \"encarrilada\", \"encartada\", \"encasillada\", \"encasquetada\", \"encasquillada\", \"encastrada\", \"encausada\", \"encauzada\", \"enceguecida\", \"encendida\", \"encerada\", \"encerrada\", \"encharcada\", \"enchufada\", \"encimada\", \"encogida\", \"encolada\", \"encolerizada\", \"encolumnada\", \"encomendada\", \"enconada\", \"encontrada\", \"encordada\", \"encrespada\", \"encuadrada\", \"encubierta\", \"encuerada\", \"encumbrada\", \"enderezada\", \"endeudada\", \"endilgada\", \"endiosada\", \"endosada\", \"endulzada\", \"endurecida\", \"enemistada\", \"energizada\", \"enervada\", \"enfadada\", \"enfangada\", \"enfatizada\", \"enfermada\", \"enfiestada\", \"enfilada\", \"enflaquecida\", \"enfocada\", \"enfrascada\", \"enfrentada\", \"enfriada\", \"enfurecida\", \"engalanada\", \"engañada\", \"enganchada\", \"engarzada\", \"engatusada\", \"engendrada\", \"englobada\", \"engolosinada\", \"engordada\", \"engranada\", \"engrandecida\", \"engrasada\", \"engreída\", \"engrosada\", \"engullida\", \"enharinada\", \"enhebrada\", \"enjuagada\", \"enjugada\", \"enjuiciada\", \"enlazada\", \"enlistada\", \"enlodada\", \"enloquecida\", \"enlozada\", \"enlutada\", \"enmarañada\", \"enmascarada\", \"enmendada\", \"enmohecida\", \"enmudecida\", \"ennegrecida\", \"ennoblecida\", \"enorgullecida\", \"enrarecida\", \"enredada\", \"enripiada\", \"enriquecida\", \"enrocada\", \"enrojecida\", \"enrolada\", \"enrollada\", \"enroscada\", \"enrumbada\", \"ensalzada\", \"ensamblada\", \"ensañada\", \"ensanchada\", \"ensartada\", \"ensayada\", \"ensebada\", \"enseñada\", \"enseñoreada\", \"ensillada\", \"ensoberbecida\", \"ensogada\", \"ensombrecida\", \"ensoñada\", \"ensordecida\", \"ensuciada\", \"entablada\", \"entallada\", \"entendida\", \"enterada\", \"enternecida\", \"enterrada\", \"entibiada\", \"entintada\", \"entonada\", \"entorpecida\", \"entrada\", \"entrampada\", \"entrañada\", \"entreabierta\", \"entrecomillada\", \"entrecruzada\", \"entregada\", \"entrelazada\", \"entremetida\", \"entremezclada\", \"entrenada\", \"entresacada\", \"entretejida\", \"entretenida\", \"entreverada\", \"entrevistada\", \"entristecida\", \"entrometida\", \"entronada\", \"entroncada\", \"entronizada\", \"entumecida\", \"enturbiada\", \"entusiasmada\", \"enumerada\", \"enunciada\", \"envainada\", \"envalentonada\", \"envanecida\", \"envasada\", \"envejecida\", \"envenenada\", \"envestida\", \"enviada\", \"enviciada\", \"envidiada\", \"envilecida\", \"enviudada\", \"envuelta\", \"enzarzada\", \"equilibrada\", \"equiparada\", \"equivocada\", \"erigida\", \"erizada\", \"erogada\", \"erosionada\", \"erotizada\", \"erradicada\", \"errada\", \"esbozada\", \"escabullida\", \"escalada\", \"escaldada\", \"escalfada\", \"escamada\", \"escamoteada\", \"escampada\", \"escandalizada\", \"escaneada\", \"escapada\", \"escaqueada\", \"escarbada\", \"escarchada\", \"escarmentada\", \"escarnecida\", \"escaseada\", \"escatimada\", \"escenificada\", \"escindida\", \"esclarecida\", \"esclavizada\", \"escocida\", \"escogida\", \"escolarizada\", \"escoltada\", \"escondida\", \"escorada\", \"escrachada\", \"escrita\", \"escrutada\", \"escuchada\", \"escudada\", \"escudriñada\", \"esculpida\", \"escupida\", \"escurrida\", \"esforzada\", \"esfumada\", \"esgrimida\", \"esmerada\", \"esmerilada\", \"espabilada\", \"espaciada\", \"españolizada\", \"espantada\", \"esparcida\", \"especificada\", \"especulada\", \"esperada\", \"espesada\", \"espetada\", \"espiada\", \"espigada\", \"espinada\", \"espirada\", \"espiritualizada\", \"espoleada\", \"espolvoreada\", \"esponjada\", \"esponsorizada\", \"esposada\", \"esquematizada\", \"esquiada\", \"esquilada\", \"esquilmada\", \"esquivada\", \"estabilizada\", \"establecida\", \"estacionada\", \"estafada\", \"estallada\", \"estampada\", \"estancada\", \"estaqueada\", \"estatizada\", \"estatuida\", \"esterificada\", \"esterilizada\", \"estigmatizada\", \"estilizada\", \"estimada\", \"estimulada\", \"estipulada\", \"estirada\", \"estorbada\", \"estornudada\", \"estragada\", \"estrangulada\", \"estrechada\", \"estrellada\", \"estremecida\", \"estrenada\", \"estresada\", \"estriada\", \"estropeada\", \"estructurada\", \"estrujada\", \"estudiada\", \"eternizada\", \"etiquetada\", \"evacuada\", \"evadida\", \"evaluada\", \"evangelizada\", \"evaporada\", \"evidenciada\", \"eviscerada\", \"evitada\", \"evocada\", \"evolucionada\", \"exacerbada\", \"exagerada\", \"exaltada\", \"examinada\", \"exasperada\", \"excarcelada\", \"excavada\", \"excedida\", \"exceptuada\", \"excitada\", \"exclamada\", \"excluida\", \"excretada\", \"exculpada\", \"excusada\", \"execrada\", \"exhalada\", \"exhibida\", \"exhortada\", \"exhumada\", \"exigida\", \"exilada\", \"eximida\", \"existida\", \"exonerada\", \"exorcizada\", \"expandida\", \"expedida\", \"expedientada\", \"expelida\", \"expendida\", \"experimentada\", \"expiada\", \"expirada\", \"explayada\", \"explicada\", \"explicitada\", \"explorada\", \"explosionada\", \"explotada\", \"expoliada\", \"exportada\", \"expresada\", \"exprimida\", \"expropiada\", \"expuesta\", \"expulsada\", \"expurgada\", \"extendida\", \"exteriorizada\", \"exterminada\", \"externada\", \"externalizada\", \"extinguida\", \"extirpada\", \"extorsionada\", \"extractada\", \"extraditada\", \"extraída\", \"extralimitada\", \"extrañada\", \"extrapolada\", \"extraviada\", \"extremada\", \"extruida\", \"exudada\", \"eyaculada\", \"eyectada\", \"fabricada\", \"fabulada\", \"facilitada\", \"facturada\", \"facultada\", \"fagocitada\", \"fajada\", \"fallada\", \"fallecida\", \"falsada\", \"falseada\", \"falsificada\", \"familiarizada\", \"fantaseada\", \"fascinada\", \"fastidiada\", \"fatigada\", \"favorecida\", \"fecundada\", \"felicitada\", \"feminizada\", \"fenecida\", \"fermentada\", \"fertilizada\", \"festejada\", \"fiada\", \"fichada\", \"fidelizada\", \"figurada\", \"fijada\", \"filmada\", \"filosofada\", \"filtrada\", \"finalizada\", \"financiada\", \"fincada\", \"fingida\", \"finiquitada\", \"firmada\", \"fiscalizada\", \"fisurada\", \"flagelada\", \"flameada\", \"flanqueada\", \"flaqueada\", \"fletada\", \"flexibilizada\", \"flexionada\", \"flipada\", \"floreada\", \"florecida\", \"flotada\", \"fluctuada\", \"focalizada\", \"fogueada\", \"foliada\", \"follada\", \"fomentada\", \"fondeada\", \"forcejeada\", \"forestada\", \"forjada\", \"formada\", \"formalizada\", \"formateada\", \"formulada\", \"fornicada\", \"forrada\", \"fortalecida\", \"forzada\", \"fotocopiada\", \"fotografiada\", \"fracasada\", \"fraccionada\", \"fracturada\", \"fragmentada\", \"fraguada\", \"franqueada\", \"frecuentada\", \"fregada\", \"frenada\", \"fresada\", \"friccionada\", \"frotada\", \"fructificada\", \"fruncida\", \"fugada\", \"fulminada\", \"fumada\", \"fumigada\", \"funcionada\", \"fundada\", \"fundamentada\", \"fundida\", \"fungida\", \"fusilada\", \"fusionada\", \"fustigada\", \"gafada\", \"ganada\", \"gangrenada\", \"garabateada\", \"garantida\", \"garantizada\", \"garrida\", \"gaseada\", \"gastada\", \"gemida\", \"generada\", \"generalizada\", \"gerenciada\", \"germinada\", \"gestada\", \"gestionada\", \"girada\", \"glorificada\", \"glosada\", \"gobernada\", \"goleada\", \"golpeada\", \"gozada\", \"grabada\", \"graduada\", \"graficada\", \"granjeada\", \"grapada\", \"gratificada\", \"gravada\", \"gravitada\", \"gritada\", \"gruñida\", \"guardada\", \"guarecida\", \"guarnecida\", \"guerreada\", \"guiada\", \"guillotinada\", \"guiñada\", \"guindada\", \"guisada\", \"gustada\", \"habilitada\", \"habitada\", \"habituada\", \"hablada\", \"halada\", \"halagada\", \"hallada\", \"hartada\", \"hechizada\", \"hecha\", \"helenizada\", \"henchida\", \"hendida\", \"heredada\", \"herida\", \"hermanada\", \"herrada\", \"hervida\", \"hibernada\", \"hibridada\", \"hidratada\", \"higienizada\", \"hilada\", \"hilvanada\", \"hincada\", \"hinchada\", \"hipnotizada\", \"hipotecada\", \"historiada\", \"hojeada\", \"holgada\", \"hollada\", \"homenajeada\", \"homogeneizada\", \"homologada\", \"honrada\", \"horadada\", \"horneada\", \"horrorizada\", \"hospedada\", \"hostigada\", \"hostilizada\", \"huida\", \"humanada\", \"humanizada\", \"humectada\", \"humedecida\", \"humillada\", \"hundida\", \"hurgada\", \"hurtada\", \"ideada\", \"idealizada\", \"identificada\", \"ideologizada\", \"idiotizada\", \"idolatrada\", \"ignorada\", \"igualada\", \"ilegalizada\", \"iluminada\", \"ilusionada\", \"ilustrada\", \"imaginada\", \"imbricada\", \"imitada\", \"impactada\", \"impartida\", \"impedida\", \"impelida\", \"imperada\", \"impermeabilizada\", \"implantada\", \"implementada\", \"implicada\", \"implorada\", \"importada\", \"importunada\", \"imposibilitada\", \"impresionada\", \"improvisada\", \"impuesta\", \"impugnada\", \"impulsada\", \"imputada\", \"inaugurada\", \"incautada\", \"incendiada\", \"incentivada\", \"incinerada\", \"incitada\", \"inclinada\", \"incluida\", \"incoada\", \"incomodada\", \"incorporada\", \"incrementada\", \"increpada\", \"incriminada\", \"incubada\", \"inculcada\", \"inculpada\", \"incumplida\", \"incurrida\", \"incursionada\", \"indagada\", \"indemnizada\", \"independizada\", \"indexada\", \"indicada\", \"indigestada\", \"indignada\", \"indispuesta\", \"individuada\", \"inducida\", \"indultada\", \"inervada\", \"infamada\", \"infartada\", \"infectada\", \"inferida\", \"inficionada\", \"infiltrada\", \"inflada\", \"inflamada\", \"infligida\", \"influenciada\", \"influida\", \"informada\", \"infravalorada\", \"infringida\", \"infundida\", \"ingeniada\", \"ingerida\", \"ingresada\", \"inhabilitada\", \"inhalada\", \"inhibida\", \"inhumada\", \"iniciada\", \"inicializada\", \"injertada\", \"injuriada\", \"inmigrada\", \"inmiscuida\", \"inmolada\", \"inmortalizada\", \"inmovilizada\", \"inmunizada\", \"innovada\", \"inoculada\", \"inquietada\", \"inquirida\", \"insensibilizada\", \"insertada\", \"insinuada\", \"insistida\", \"inspeccionada\", \"inspirada\", \"instada\", \"instalada\", \"instaurada\", \"instigada\", \"instituida\", \"instruida\", \"instrumentada\", \"instrumentalizada\", \"insuflada\", \"insultada\", \"insumida\", \"integrada\", \"intelectualizada\", \"intensificada\", \"intentada\", \"interactuada\", \"intercalada\", \"intercambiada\", \"intercedida\", \"interceptada\", \"interesada\", \"interferida\", \"interiorizada\", \"intermediada\", \"internacionalizada\", \"internalizada\", \"interpelada\", \"interpolada\", \"interpretada\", \"interpuesta\", \"interrogada\", \"interrumpida\", \"intervenida\", \"intimada\", \"intimidada\", \"intitulada\", \"intoxicada\", \"intrigada\", \"introducida\", \"intuida\", \"inundada\", \"inutilizada\", \"invadida\", \"invalidada\", \"inventada\", \"inventariada\", \"invertida\", \"investida\", \"investigada\", \"invitada\", \"invocada\", \"involucionada\", \"inyectada\", \"ionizada\", \"ironizada\", \"irradiada\", \"irrespetada\", \"irrigada\", \"irritada\", \"irrogada\", \"irrumpida\", \"jactada\", \"jalada\", \"jaleada\", \"jalonada\", \"jaqueada\", \"jerarquizada\", \"jodida\", \"jorobada\", \"jubilada\", \"jugada\", \"juntada\", \"jurada\", \"juramentada\", \"justificada\", \"juzgada\", \"laborada\", \"labrada\", \"laburada\", \"lacada\", \"lacerada\", \"lactada\", \"ladeada\", \"ladrada\", \"lamentada\", \"lamida\", \"laminada\", \"languidecida\", \"lanzada\", \"lapidada\", \"laqueada\", \"largada\", \"lastimada\", \"lastrada\", \"latida\", \"laudada\", \"lavada\", \"legalizada\", \"legislada\", \"legitimada\", \"leída\", \"lesionada\", \"leudada\", \"levantada\", \"liada\", \"liberada\", \"liberalizada\", \"libertada\", \"librada\", \"licitada\", \"licuada\", \"liderizada\", \"lidiada\", \"ligada\", \"lijada\", \"limada\", \"limitada\", \"limpiada\", \"linchada\", \"liquidada\", \"litigada\", \"llagada\", \"llamada\", \"llegada\", \"llenada\", \"llevada\", \"llorada\", \"localizada\", \"lograda\", \"lubricada\", \"luchada\", \"lucida\", \"lucrada\", \"lustrada\", \"macerada\", \"machacada\", \"macheteada\", \"machucada\", \"madreada\", \"madrugada\", \"madurada\", \"magnetizada\", \"magnificada\", \"malacostumbrada\", \"malbaratada\", \"malcriada\", \"maleada\", \"malentendida\", \"malgastada\", \"malinterpretada\", \"malograda\", \"maltratada\", \"malversada\", \"mamada\", \"manchada\", \"mancillada\", \"mandada\", \"manejada\", \"mangada\", \"mangoneada\", \"manifestada\", \"maniobrada\", \"manipulada\", \"manoseada\", \"manteada\", \"mantenida\", \"manufacturada\", \"maquillada\", \"maquinada\", \"maravillada\", \"marcada\", \"marchitada\", \"mareada\", \"marginada\", \"maridada\", \"martillada\", \"martirizada\", \"masacrada\", \"masajeada\", \"mascada\", \"masificada\", \"masticada\", \"masturbada\", \"matada\", \"materializada\", \"matizada\", \"matriculada\", \"maximizada\", \"meada\", \"mecanografiada\", \"mechada\", \"mecida\", \"mediada\", \"mediatizada\", \"medicada\", \"medida\", \"meditada\", \"medrada\", \"mejorada\", \"mellada\", \"memorizada\", \"mencionada\", \"meneada\", \"menguada\", \"menoscabada\", \"menospreciada\", \"menstruada\", \"mensualizada\", \"mensurada\", \"mentada\", \"mentalizada\", \"mentida\", \"mercadeada\", \"mercantilizada\", \"merecida\", \"merendada\", \"mermada\", \"merodeada\", \"mesurada\", \"metamorfoseada\", \"metida\", \"mezclada\", \"migrada\", \"militada\", \"militarizada\", \"mimada\", \"mimetizada\", \"minada\", \"minimizada\", \"ministrada\", \"minusvalorada\", \"mirada\", \"mistificada\", \"mitificada\", \"mitigada\", \"modelada\", \"modernizada\", \"modificada\", \"modulada\", \"mofada\", \"mojada\", \"moldeada\", \"molestada\", \"molida\", \"monetizada\", \"monitorizada\", \"monopolizada\", \"montada\", \"morada\", \"moralizada\", \"mordida\", \"mordisqueada\", \"mortificada\", \"mosqueada\", \"mostrada\", \"motejada\", \"motivada\", \"movida\", \"movilizada\", \"mudada\", \"muestreada\", \"multada\", \"multiplicada\", \"munida\", \"murmurada\", \"mutada\", \"mutilada\", \"nacionalizada\", \"narcotizada\", \"narrada\", \"naufragada\", \"navegada\", \"necesitada\", \"negada\", \"negociada\", \"neutralizada\", \"ninguneada\", \"nivelada\", \"nombrada\", \"nominada\", \"noqueada\", \"normada\", \"normalizada\", \"notada\", \"notificada\", \"nutrida\", \"obcecada\", \"obedecida\", \"objetada\", \"objetivada\", \"obligada\", \"obliterada\", \"obnubilada\", \"obrada\", \"obsequiada\", \"observada\", \"obsesionada\", \"obstaculizada\", \"obstruida\", \"obtenida\", \"obturada\", \"obviada\", \"ocasionada\", \"ocluida\", \"ocultada\", \"ocupada\", \"odiada\", \"ofendida\", \"ofertada\", \"oficiada\", \"oficializada\", \"ofrecida\", \"ofrendada\", \"ofuscada\", \"oída\", \"ojeada\", \"olfateada\", \"olida\", \"olvidada\", \"omitida\", \"ondeada\", \"ondulada\", \"opacada\", \"operada\", \"opinada\", \"oprimida\", \"optada\", \"optimizada\", \"opuesta\", \"orada\", \"orbitada\", \"ordenada\", \"ordeñada\", \"organizada\", \"orientada\", \"originada\", \"orillada\", \"orinada\", \"ornada\", \"ornamentada\", \"orquestada\", \"osada\", \"oscilada\", \"oscurecida\", \"osificada\", \"ostentada\", \"otorgada\", \"ovacionada\", \"ovulada\", \"oxidada\", \"oxigenada\", \"pacificada\", \"pactada\", \"padecida\", \"paganizada\", \"paginada\", \"paladeada\", \"paliada\", \"palpada\", \"parada\", \"parafraseada\", \"paralizada\", \"parapetada\", \"parasitada\", \"parcelada\", \"parchada\", \"parcheada\", \"pareada\", \"parida\", \"parodiada\", \"parqueada\", \"participada\", \"particularizada\", \"partida\", \"pasada\", \"paseada\", \"pastoreada\", \"pataleada\", \"pateada\", \"patentada\", \"patentizada\", \"patinada\", \"patrullada\", \"pecada\", \"pedaleada\", \"pedida\", \"pegada\", \"peinada\", \"pellizcada\", \"penalizada\", \"penetrada\", \"pensada\", \"percatada\", \"percibida\", \"percutida\", \"perdida\", \"perdonada\", \"perdurada\", \"perecida\", \"peregrinada\", \"perfeccionada\", \"perfilada\", \"perforada\", \"perfumada\", \"pergeñada\", \"peritada\", \"perjudicada\", \"perjurada\", \"permeada\", \"permitida\", \"permutada\", \"pernoctada\", \"perpetrada\", \"perpetuada\", \"perseguida\", \"perseverada\", \"persistida\", \"personada\", \"personalizada\", \"personificada\", \"persuadida\", \"pertenecida\", \"pertrechada\", \"perturbada\", \"pervertida\", \"pervivida\", \"pescada\", \"petada\", \"peticionada\", \"picada\", \"picaneada\", \"picoteada\", \"pifiada\", \"pignorada\", \"pillada\", \"pilotada\", \"piloteada\", \"pincelada\", \"pinchada\", \"pintada\", \"pintarrajeada\", \"pinzada\", \"pirada\", \"pirateada\", \"pisada\", \"pisoteada\", \"pitada\", \"placida\", \"plagiada\", \"planchada\", \"planeada\", \"plantada\", \"planteada\", \"plasmada\", \"platicada\", \"plegada\", \"pluralizada\", \"podada\", \"poetizada\", \"polemizada\", \"politizada\", \"pololeada\", \"ponderada\", \"pontificada\", \"popularizada\", \"porfiada\", \"portada\", \"porteada\", \"posada\", \"posesionada\", \"posibilitada\", \"posicionada\", \"pospuesta\", \"posteada\", \"postergada\", \"postrada\", \"postulada\", \"potenciada\", \"practicada\", \"precarizada\", \"precedida\", \"preceptuada\", \"precintada\", \"precipitada\", \"precisada\", \"preconizada\", \"predicada\", \"predicha\", \"predispuesta\", \"predominada\", \"preferida\", \"prefigurada\", \"pregonada\", \"preguntada\", \"prejuzgada\", \"premiada\", \"prendada\", \"prendida\", \"preocupada\", \"preparada\", \"presagiada\", \"prescindida\", \"presenciada\", \"presentada\", \"presentida\", \"preservada\", \"presidida\", \"presionada\", \"prestada\", \"prestigiada\", \"presumida\", \"presurizada\", \"pretendida\", \"preterida\", \"prevalecida\", \"prevalida\", \"prevaricada\", \"prevenida\", \"prevista\", \"primada\", \"principiada\", \"pringada\", \"priorizada\", \"privatizada\", \"probada\", \"problematizada\", \"procedida\", \"procesada\", \"proclamada\", \"procreada\", \"procurada\", \"prodigada\", \"producida\", \"profanada\", \"proferida\", \"profesada\", \"profesionalizada\", \"profetizada\", \"profundizada\", \"programada\", \"progresada\", \"prohibida\", \"prohijada\", \"proletarizada\", \"proliferada\", \"prologada\", \"prolongada\", \"promediada\", \"prometida\", \"promocionada\", \"promovida\", \"promulgada\", \"pronosticada\", \"pronunciada\", \"propagada\", \"propalada\", \"propendida\", \"propiciada\", \"propinada\", \"proporcionada\", \"propuesta\", \"propugnada\", \"propulsada\", \"prorrateada\", \"prorrogada\", \"proseguida\", \"prosperada\", \"prostituida\", \"protegida\", \"protestada\", \"protocolizada\", \"provenida\", \"provocada\", \"proyectada\", \"psicoanalizada\", \"publicada\", \"publicitada\", \"puesta\", \"pugnada\", \"pujada\", \"pulida\", \"pulsada\", \"pululada\", \"pulverizada\", \"punada\", \"punteada\", \"puntuada\", \"puntualizada\", \"punzada\", \"purgada\", \"purificada\", \"puteada\", \"quebrada\", \"quebrantada\", \"quejada\", \"quemada\", \"querellada\", \"querida\", \"quintuplicada\", \"quitada\", \"racionada\", \"racionalizada\", \"radiada\", \"radicada\", \"radicalizada\", \"raída\", \"rajada\", \"ralentizada\", \"rapada\", \"rapeada\", \"raptada\", \"rascada\", \"rasgada\", \"rasguñada\", \"raspada\", \"rastreada\", \"rasurada\", \"ratificada\", \"rayada\", \"razonada\", \"reabierta\", \"reabsorbida\", \"reaccionada\", \"reactivada\", \"readaptada\", \"readmitida\", \"reafirmada\", \"reagrupada\", \"reajustada\", \"realimentada\", \"realizada\", \"realzada\", \"reanimada\", \"reanudada\", \"reaparecida\", \"rearmada\", \"reasumida\", \"reavivada\", \"rebajada\", \"rebalsada\", \"rebanada\", \"rebasada\", \"rebatida\", \"rebautizada\", \"rebelada\", \"reblandecida\", \"rebobinada\", \"rebosada\", \"rebotada\", \"rebozada\", \"rebuscada\", \"recabada\", \"recaída\", \"recalada\", \"recalcada\", \"recalentada\", \"recalificada\", \"recapacitada\", \"recapitulada\", \"recargada\", \"recatada\", \"recaudada\", \"receptada\", \"recetada\", \"rechazada\", \"recibida\", \"reciclada\", \"recitada\", \"reclamada\", \"reclinada\", \"reclutada\", \"recobrada\", \"recocida\", \"recogida\", \"recolectada\", \"recomendada\", \"recomenzada\", \"recompensada\", \"recompuesta\", \"reconcentrada\", \"reconciliada\", \"reconducida\", \"reconfortada\", \"reconocida\", \"reconquistada\", \"reconsiderada\", \"reconstituida\", \"reconstruida\", \"reconvenida\", \"reconvertida\", \"recopilada\", \"recordada\", \"recorrida\", \"recortada\", \"recreada\", \"recriminada\", \"recrudecida\", \"rectificada\", \"recubierta\", \"reculada\", \"recuperada\", \"recurrida\", \"recusada\", \"redactada\", \"redefinida\", \"redescubierta\", \"redimensionada\", \"redimida\", \"rediseñada\", \"redistribuida\", \"redituada\", \"redoblada\", \"redondeada\", \"reducida\", \"redundada\", \"reedificada\", \"reeditada\", \"reeducada\", \"reelaborada\", \"reembolsada\", \"reemplazada\", \"reencarnada\", \"reencauchada\", \"reencontrada\", \"reenganchada\", \"reenviada\", \"reescrita\", \"reestructurada\", \"reexaminada\", \"refaccionada\", \"referida\", \"refinada\", \"refinanciada\", \"reflejada\", \"reflexionada\", \"reflotada\", \"reforestada\", \"reformada\", \"reforzada\", \"refractada\", \"refrenada\", \"refrendada\", \"refrescada\", \"refrigerada\", \"refundida\", \"refutada\", \"regada\", \"regalada\", \"regañada\", \"regateada\", \"regenerada\", \"regentada\", \"regenteada\", \"regida\", \"regionalizada\", \"registrada\", \"reglada\", \"reglamentada\", \"regocijada\", \"regodeada\", \"regresada\", \"regulada\", \"regularizada\", \"regurgitada\", \"rehabilitada\", \"rehecha\", \"rehogada\", \"rehuida\", \"rehusada\", \"reída\", \"reinada\", \"reincidida\", \"reincorporada\", \"reingresada\", \"reiniciada\", \"reinsertada\", \"reinstalada\", \"reinstaurada\", \"reintegrada\", \"reinventada\", \"reinvertida\", \"reiterada\", \"reivindicada\", \"rejuvenecida\", \"relajada\", \"relamida\", \"relanzada\", \"relatada\", \"relativizada\", \"relegada\", \"releída\", \"relevada\", \"religada\", \"rellenada\", \"remachada\", \"remada\", \"remangada\", \"remarcada\", \"rematada\", \"remecida\", \"remediada\", \"rememorada\", \"remendada\", \"remitida\", \"remodelada\", \"remojada\", \"remolcada\", \"remontada\", \"removida\", \"remplazada\", \"renacida\", \"rendida\", \"renegada\", \"renegociada\", \"reñida\", \"renombrada\", \"renovada\", \"rentabilizada\", \"rentada\", \"renunciada\", \"reordenada\", \"reorganizada\", \"reorientada\", \"reparada\", \"repartida\", \"repasada\", \"repatriada\", \"repelida\", \"repensada\", \"repercutida\", \"repescada\", \"repetida\", \"repicada\", \"repintada\", \"replanteada\", \"replegada\", \"replicada\", \"repoblada\", \"reportada\", \"reporteada\", \"reposada\", \"repreguntada\", \"reprendida\", \"represada\", \"representada\", \"reprimida\", \"reprobada\", \"reprochada\", \"reproducida\", \"repudiada\", \"repuesta\", \"repugnada\", \"repuntada\", \"reputada\", \"requerida\", \"requisada\", \"resaltada\", \"resarcida\", \"resbalada\", \"rescatada\", \"rescindida\", \"resecada\", \"reseñada\", \"reservada\", \"reseteada\", \"resguardada\", \"residida\", \"resignada\", \"resistida\", \"resonada\", \"respaldada\", \"respetada\", \"respirada\", \"resplandecida\", \"respondida\", \"responsabilizada\", \"resquebrajada\", \"restablecida\", \"restada\", \"restaurada\", \"restituida\", \"restregada\", \"resucitada\", \"resuelta\", \"resumida\", \"resurgida\", \"retada\", \"retardada\", \"retenida\", \"retirada\", \"retocada\", \"retomada\", \"retorcida\", \"retornada\", \"retractada\", \"retraída\", \"retransmitida\", \"retrasada\", \"retratada\", \"retribuida\", \"retrotraída\", \"retumbada\", \"reunida\", \"reunificada\", \"reutilizada\", \"revalidada\", \"revalorizada\", \"revaluada\", \"revelada\", \"revendida\", \"reventada\", \"reverdecida\", \"reverenciada\", \"revertida\", \"revestida\", \"revirada\", \"revisada\", \"revitalizada\", \"revivida\", \"revocada\", \"revolcada\", \"revoloteada\", \"revolucionada\", \"revuelta\", \"ridiculizada\", \"rifada\", \"rimada\", \"rivalizada\", \"rizada\", \"robada\", \"robustecida\", \"rociada\", \"rodada\", \"rodeada\", \"rogada\", \"roída\", \"rondada\", \"rotada\", \"rota\", \"rotulada\", \"roturada\", \"rozada\", \"ruborizada\", \"rubricada\", \"rugida\", \"rumiada\", \"rumorada\", \"sabida\", \"saboreada\", \"saboteada\", \"sacada\", \"saciada\", \"sacralizada\", \"sacrificada\", \"sacudida\", \"saldada\", \"salpimentada\", \"salpullida\", \"saltada\", \"salteada\", \"saludada\", \"salvada\", \"salvaguardada\", \"sanada\", \"saneada\", \"sangrada\", \"santificada\", \"saqueada\", \"satanizada\", \"satirizada\", \"satisfecha\", \"sazonada\", \"secada\", \"seccionada\", \"secretada\", \"secuenciada\", \"secuestrada\", \"secundada\", \"sedimentada\", \"seducida\", \"segada\", \"segmentada\", \"segregada\", \"seguida\", \"seleccionada\", \"sembrada\", \"señalada\", \"sensibilizada\", \"sentada\", \"sentenciada\", \"sentida\", \"separada\", \"serenada\", \"serrada\", \"servida\", \"significada\", \"silenciada\", \"simbolizada\", \"simpatizada\", \"simplificada\", \"simulada\", \"sincerada\", \"sincronizada\", \"sindicada\", \"sindicalizada\", \"singularizada\", \"sintetizada\", \"sintonizada\", \"sistematizada\", \"situada\", \"sobada\", \"sobornada\", \"sobrada\", \"sobrecargada\", \"sobrecogida\", \"sobreentendida\", \"sobreestimada\", \"sobrellevada\", \"sobrentendida\", \"sobrepasada\", \"sobrepuesta\", \"sobresalida\", \"sobresaltada\", \"sobrestimada\", \"sobrevenida\", \"sobrevivida\", \"sobrevolada\", \"socavada\", \"socializada\", \"socorrida\", \"sodomizada\", \"sofocada\", \"sojuzgada\", \"solapada\", \"solicitada\", \"solidarizada\", \"solidificada\", \"soliviantada\", \"soltada\", \"solucionada\", \"solventada\", \"sombreada\", \"sometida\", \"sonada\", \"soñada\", \"sondeada\", \"sonreída\", \"sonrojada\", \"sopesada\", \"soplada\", \"soportada\", \"sorbida\", \"sorprendida\", \"sorteada\", \"sosegada\", \"soslayada\", \"sospechada\", \"sostenida\", \"suavizada\", \"subastada\", \"subcontratada\", \"subdividida\", \"subestimada\", \"subida\", \"sublevada\", \"sublimada\", \"subrayada\", \"subrogada\", \"subsanada\", \"subsidiada\", \"subsistida\", \"substraída\", \"subsumida\", \"subvertida\", \"subyugada\", \"succionada\", \"sucedida\", \"sucumbida\", \"sudada\", \"sufragada\", \"sufrida\", \"sugerida\", \"sugestionada\", \"suicidada\", \"sujetada\", \"sumada\", \"sumergida\", \"suministrada\", \"supeditada\", \"superada\", \"superpuesta\", \"supervisada\", \"suplantada\", \"suplicada\", \"suplida\", \"suprimida\", \"supuesta\", \"surcada\", \"surtida\", \"suscitada\", \"suspendida\", \"suspirada\", \"sustanciada\", \"sustantivada\", \"sustentada\", \"sustituida\", \"sustraída\", \"susurrada\", \"suturada\", \"tabulada\", \"tachada\", \"talada\", \"taladrada\", \"tallada\", \"tambaleada\", \"tamizada\", \"tañida\", \"tanteada\", \"tapada\", \"tapizada\", \"taponada\", \"tarareada\", \"tardada\", \"tasada\", \"tatuada\", \"tecleada\", \"tejida\", \"telefoneada\", \"televisada\", \"temida\", \"templada\", \"tendida\", \"tenida\", \"tensada\", \"tentada\", \"teorizada\", \"terciada\", \"tergiversada\", \"terminada\", \"territorializada\", \"testada\", \"testeada\", \"testificada\", \"testimoniada\", \"tildada\", \"timada\", \"timbrada\", \"tinturada\", \"tipeada\", \"tipificada\", \"tirada\", \"tiranizada\", \"tironeada\", \"tiroteada\", \"titubeada\", \"tiznada\", \"tocada\", \"tolerada\", \"tomada\", \"tonificada\", \"topada\", \"toqueteada\", \"torcida\", \"toreada\", \"tornada\", \"tornasolada\", \"torneada\", \"torpedeada\", \"torturada\", \"tosida\", \"tostada\", \"totalizada\", \"trabada\", \"trabajada\", \"traducida\", \"traficada\", \"tragada\", \"traicionada\", \"traída\", \"trajinada\", \"tramada\", \"tramitada\", \"trancada\", \"tranquilizada\", \"transcendida\", \"transcurrida\", \"transferida\", \"transfigurada\", \"transformada\", \"transfundida\", \"transgredida\", \"transigida\", \"transitada\", \"transliterada\", \"translucida\", \"transmitida\", \"transmutada\", \"transparentada\", \"transpirada\", \"transportada\", \"transpuesta\", \"trasegada\", \"trasgredida\", \"trasladada\", \"traslapada\", \"traslucida\", \"trasnochada\", \"traspapelada\", \"traspasada\", \"trasplantada\", \"traspuesta\", \"trasquilada\", \"trasteada\", \"trastocada\", \"trastornada\", \"trasvasada\", \"tratada\", \"trazada\", \"trenzada\", \"trepada\", \"tributada\", \"trincada\", \"triplicada\", \"triturada\", \"triunfada\", \"trivializada\", \"trocada\", \"troceada\", \"tronada\", \"tronchada\", \"truncada\", \"tumbada\", \"tuneada\", \"turbada\", \"turnada\", \"tutelada\", \"ufanada\", \"ultimada\", \"uncida\", \"ungida\", \"unida\", \"universalizada\", \"untada\", \"urbanizada\", \"urdida\", \"usada\", \"usufructuada\", \"usurpada\", \"utilizada\", \"vacada\", \"vaciada\", \"vacilada\", \"vacunada\", \"vagada\", \"validada\", \"valida\", \"valorada\", \"valorizada\", \"valuada\", \"vanagloriada\", \"vandalizada\", \"vaporizada\", \"variada\", \"vaticinada\", \"vedada\", \"vehiculada\", \"vejada\", \"velada\", \"vencida\", \"vendada\", \"vendida\", \"venerada\", \"vengada\", \"ventilada\", \"veraneada\", \"verbalizada\", \"verificada\", \"versada\", \"versionada\", \"vertebrada\", \"vertida\", \"vestida\", \"vetada\", \"viabilizada\", \"viajada\", \"vibrada\", \"victimada\", \"victimizada\", \"vigilada\", \"vigorizada\", \"vilipendiada\", \"vindicada\", \"violada\", \"violentada\", \"virada\", \"visada\", \"visibilizada\", \"visitada\", \"vislumbrada\", \"vista\", \"visualizada\", \"vitoreada\", \"vitrificada\", \"vituperada\", \"vivida\", \"vivificada\", \"vocalizada\", \"voceada\", \"vociferada\", \"volada\", \"volatilizada\", \"volcada\", \"volteada\", \"vomitada\", \"votada\", \"vuelta\", \"vulcanizada\", \"vulgarizada\", \"vulnerada\", \"yuxtapuesta\", \"zafada\", \"zambullida\", \"zampada\", \"zanjada\", \"zarandeada\", \"zarpada\", \"zozobrada\", \"zumbada\", \"zurcida\", \"zurrada\", \"abajados\", \"abalanzados\", \"abaleados\", \"abandonados\", \"abaratados\", \"abarcados\", \"abarrotados\", \"abastecidos\", \"abatidos\", \"abdicados\", \"abiertos\", \"abismados\", \"abjurados\", \"ablandados\", \"abocados\", \"abochornados\", \"abofeteados\", \"abolidos\", \"abollados\", \"abombados\", \"abominados\", \"abonados\", \"abordados\", \"aborrecidos\", \"aborregados\", \"abortados\", \"abotonados\", \"abrasados\", \"abrazados\", \"abrevados\", \"abreviados\", \"abrigados\", \"abrochados\", \"abrogados\", \"abroquelados\", \"abrumados\", \"absorbidos\", \"abstenidos\", \"abstraídos\", \"absueltos\", \"abucheados\", \"abultados\", \"abundados\", \"aburguesados\", \"aburridos\", \"abusados\", \"acabados\", \"acallados\", \"acalorados\", \"acaparados\", \"acariciados\", \"acarreados\", \"acatados\", \"acaudillados\", \"accedidos\", \"accionados\", \"acechados\", \"aceitados\", \"acelerados\", \"acentuados\", \"aceptados\", \"acerados\", \"acercados\", \"acertados\", \"achacados\", \"achantados\", \"achatados\", \"achicados\", \"acicalados\", \"acidificados\", \"aclarados\", \"aclimatados\", \"acobardados\", \"acodados\", \"acogidos\", \"acojonados\", \"acometidos\", \"acomodados\", \"acompañados\", \"acompasados\", \"acongojados\", \"aconsejados\", \"acontecidos\", \"acopiados\", \"acoplados\", \"acordados\", \"acordonados\", \"acorralados\", \"acortados\", \"acosados\", \"acostados\", \"acostumbrados\", \"acotados\", \"acrecentados\", \"acreditados\", \"acrisolados\", \"activados\", \"actuados\", \"acuchillados\", \"acuciados\", \"acudidos\", \"acuerpados\", \"acumulados\", \"acunados\", \"acuñados\", \"acurrucados\", \"acusados\", \"adaptados\", \"adecentados\", \"adelantados\", \"adelgazados\", \"adentrados\", \"adeudados\", \"adheridos\", \"adicionados\", \"adiestrados\", \"adivinados\", \"adjetivados\", \"adjudicados\", \"adjuntados\", \"administrados\", \"admirados\", \"admitidos\", \"adoctrinados\", \"adolecidos\", \"adoptados\", \"adorados\", \"adormecidos\", \"adornados\", \"adquiridos\", \"aducidos\", \"adueñados\", \"adulados\", \"adulterados\", \"advertidos\", \"afanados\", \"afeados\", \"afectados\", \"afeitados\", \"aferrados\", \"afianzados\", \"afinados\", \"afirmados\", \"afligidos\", \"aflorados\", \"afrentados\", \"afrontados\", \"agachados\", \"agarrados\", \"agarrotados\", \"agasajados\", \"agenciados\", \"agigantados\", \"agilizados\", \"agitados\", \"aglutinados\", \"agobiados\", \"agolpados\", \"agonizados\", \"agostados\", \"agotados\", \"agradados\", \"agradecidos\", \"agrandados\", \"agravados\", \"agraviados\", \"agredidos\", \"agregados\", \"agriados\", \"agrietados\", \"agrupados\", \"aguados\", \"aguantados\", \"aguardados\", \"agudizados\", \"aguijoneados\", \"agujereados\", \"aguzados\", \"ahogados\", \"ahondados\", \"ahorcados\", \"ahorrados\", \"ahuecados\", \"ahuyentados\", \"aireados\", \"aislados\", \"ajustados\", \"ajusticiados\", \"alabados\", \"alagados\", \"alambrados\", \"alardeados\", \"alargados\", \"alarmados\", \"albergados\", \"alborotados\", \"alcanzados\", \"aleccionados\", \"alegados\", \"alegrados\", \"alejados\", \"alentados\", \"alertados\", \"alfabetizados\", \"alfombrados\", \"aliados\", \"alienados\", \"aligerados\", \"alimentados\", \"aliñados\", \"alineados\", \"alisados\", \"alistados\", \"aliviados\", \"alivianados\", \"allanados\", \"almacenados\", \"almorzados\", \"alojados\", \"alquilados\", \"alterados\", \"alternados\", \"alucinados\", \"aludidos\", \"alumbrados\", \"alzados\", \"amados\", \"amaestrados\", \"amagados\", \"amainados\", \"amalgamados\", \"amamantados\", \"amansados\", \"amargados\", \"amarrados\", \"amasados\", \"ambicionados\", \"amedrentados\", \"amenazados\", \"amenizados\", \"ameritados\", \"ametrallados\", \"amilanados\", \"aminorados\", \"amnistiados\", \"amoldados\", \"amonestados\", \"amontonados\", \"amordazados\", \"amortajados\", \"amortiguados\", \"amortizados\", \"amotinados\", \"amparados\", \"ampayados\", \"ampliados\", \"amplificados\", \"amputados\", \"amueblados\", \"añadidos\", \"analizados\", \"anatematizados\", \"andados\", \"anegados\", \"anestesiados\", \"anexados\", \"anexionados\", \"anhelados\", \"anidados\", \"anillados\", \"animados\", \"aniquilados\", \"anisados\", \"añorados\", \"anotados\", \"anoticiados\", \"ansiados\", \"antecedidos\", \"antepuestos\", \"anticipados\", \"antojados\", \"anudados\", \"anulados\", \"anunciados\", \"apabullados\", \"apachurrados\", \"apaciguados\", \"apadrinados\", \"apagados\", \"apalancados\", \"apaleados\", \"apañados\", \"apantallados\", \"aparcados\", \"apareados\", \"aparecidos\", \"aparentados\", \"apartados\", \"apeados\", \"apedreados\", \"apelados\", \"apellidados\", \"apelmazados\", \"apercibidos\", \"apersonados\", \"apestados\", \"apetecidos\", \"apiadados\", \"apilados\", \"apiñados\", \"apisonados\", \"aplacados\", \"aplanados\", \"aplastados\", \"aplaudidos\", \"aplazados\", \"aplicados\", \"apoderados\", \"apoltronados\", \"aporreados\", \"aportados\", \"aposentados\", \"apostados\", \"apostatados\", \"apostillados\", \"apoyados\", \"apreciados\", \"aprehendidos\", \"apremiados\", \"aprendidos\", \"apresados\", \"apresurados\", \"apretados\", \"apretujados\", \"aprisionados\", \"aprobados\", \"aprovechados\", \"aprovisionados\", \"aproximados\", \"apuñalados\", \"apuñaleados\", \"apuntados\", \"apuntalados\", \"apuntillados\", \"apurados\", \"aquejados\", \"aquietados\", \"aquilatados\", \"arañados\", \"arbitrados\", \"archivados\", \"arengados\", \"argüidos\", \"argumentados\", \"armados\", \"armonizados\", \"aromatizados\", \"arqueados\", \"arrancados\", \"arrasados\", \"arrastrados\", \"arreados\", \"arrebatados\", \"arreciados\", \"arreglados\", \"arrellanados\", \"arremangados\", \"arremetidos\", \"arrendados\", \"arrepentidos\", \"arrestados\", \"arriados\", \"arribados\", \"arriesgados\", \"arrimados\", \"arrinconados\", \"arrodillados\", \"arrogados\", \"arrojados\", \"arrollados\", \"arropados\", \"arruinados\", \"arrullados\", \"articulados\", \"asados\", \"asaltados\", \"ascendidos\", \"aseados\", \"asechados\", \"asediados\", \"asegurados\", \"asemejados\", \"asentados\", \"asentidos\", \"aserrados\", \"asesinados\", \"asesorados\", \"asestados\", \"aseverados\", \"asfixiados\", \"asidos\", \"asignados\", \"asilados\", \"asimilados\", \"asistidos\", \"asolados\", \"asoleados\", \"asomados\", \"asombrados\", \"aspirados\", \"astillados\", \"asumidos\", \"asustados\", \"atacados\", \"atados\", \"atajados\", \"atarantados\", \"atascados\", \"atemorizados\", \"atemperados\", \"atenazados\", \"atendidos\", \"atenidos\", \"atentados\", \"atenuados\", \"aterrados\", \"aterrorizados\", \"atesorados\", \"atestiguados\", \"atiborrados\", \"atisbados\", \"atizados\", \"atomizados\", \"atontados\", \"atorados\", \"atormentados\", \"atornillados\", \"atosigados\", \"atracados\", \"atragantados\", \"atraídos\", \"atrancados\", \"atrapados\", \"atrasados\", \"atravesados\", \"atrevidos\", \"atribuidos\", \"atrincherados\", \"atrofiados\", \"atropellados\", \"aturdidos\", \"auditados\", \"augurados\", \"aumentados\", \"aunados\", \"aupados\", \"auscultados\", \"ausentados\", \"autenticados\", \"autentificados\", \"autodefinidos\", \"autoeditados\", \"automatizados\", \"autorizados\", \"autorregulados\", \"auxiliados\", \"avalados\", \"avanzados\", \"avasallados\", \"avenidos\", \"aventados\", \"aventajados\", \"aventurados\", \"averiados\", \"averiguados\", \"avezados\", \"avisados\", \"avispados\", \"avistados\", \"avivados\", \"avizorados\", \"avocados\", \"ayudados\", \"azotados\", \"azuzados\", \"babeados\", \"bailados\", \"bajados\", \"balaceados\", \"balanceados\", \"bañados\", \"banalizados\", \"bancados\", \"bandeados\", \"barajados\", \"barridos\", \"basados\", \"bastardeados\", \"basureados\", \"batallados\", \"bateados\", \"batidos\", \"bautizados\", \"beatificados\", \"bebidos\", \"beneficiados\", \"besados\", \"bifurcados\", \"birlados\", \"blandidos\", \"blanqueados\", \"blasfemados\", \"blindados\", \"bloqueados\", \"boicoteados\", \"bombardeados\", \"bombeados\", \"bonificados\", \"bordeados\", \"borrados\", \"borroneados\", \"bosquejados\", \"bostezados\", \"botados\", \"boxeados\", \"bregados\", \"brillados\", \"brincados\", \"brindados\", \"bromeados\", \"brotados\", \"bruñidos\", \"buceados\", \"burlados\", \"buscados\", \"cabeceados\", \"cabidos\", \"cabildeados\", \"cabreados\", \"cacareados\", \"cachados\", \"cacheados\", \"cacheteados\", \"caducados\", \"cagados\", \"calados\", \"calculados\", \"caldeados\", \"calefaccionados\", \"calendarizados\", \"calentados\", \"calibrados\", \"calificados\", \"caligrafiados\", \"callados\", \"calmados\", \"calumniados\", \"calzados\", \"cambiados\", \"caminados\", \"camuflados\", \"canalizados\", \"cancelados\", \"canjeados\", \"cansados\", \"cantados\", \"capados\", \"capeados\", \"capitalizados\", \"capitulados\", \"captados\", \"capturados\", \"caracterizados\", \"carburados\", \"carcomidos\", \"cardados\", \"careados\", \"carecidos\", \"cargados\", \"caricaturizados\", \"cartografiados\", \"cascados\", \"castigados\", \"castrados\", \"catados\", \"catalizados\", \"catalogados\", \"catapultados\", \"cateados\", \"categorizados\", \"causados\", \"cauterizados\", \"cautivados\", \"cavados\", \"cavilados\", \"cazados\", \"cebados\", \"cedidos\", \"cegados\", \"cejados\", \"celebrados\", \"cenados\", \"ceñidos\", \"censurados\", \"centrifugados\", \"centuplicados\", \"cepillados\", \"cercados\", \"cercenados\", \"cerciorados\", \"cernidos\", \"cerrados\", \"cesados\", \"chafados\", \"chamuscados\", \"chantajeados\", \"chapados\", \"charlados\", \"chateados\", \"chequeados\", \"chiflados\", \"chillados\", \"chingados\", \"chirriados\", \"chivados\", \"chocados\", \"chorreados\", \"choteados\", \"chupados\", \"chutados\", \"cicatrizados\", \"cifrados\", \"cimentados\", \"cincelados\", \"circulados\", \"circuncidados\", \"circundados\", \"citados\", \"clamados\", \"clarificados\", \"clasificados\", \"claudicados\", \"clausurados\", \"clavados\", \"clicados\", \"clonados\", \"coaccionados\", \"coadyuvados\", \"coagulados\", \"coaligados\", \"coartados\", \"cobijados\", \"cobrados\", \"cocidos\", \"cocinados\", \"codeados\", \"codiciados\", \"codificados\", \"codirigidos\", \"coexistidos\", \"cofinanciados\", \"cogidos\", \"cohabitados\", \"cohibidos\", \"coincididos\", \"colaborados\", \"colacionados\", \"colados\", \"colapsados\", \"coleccionados\", \"colectados\", \"colectivizados\", \"colgados\", \"colisionados\", \"colmados\", \"colocados\", \"colonizados\", \"coloreados\", \"columpiados\", \"combatidos\", \"combinados\", \"comentados\", \"comenzados\", \"comerciados\", \"comercializados\", \"cometidos\", \"comidos\", \"comisionados\", \"compactados\", \"compadecidos\", \"compaginados\", \"comparados\", \"comparecidos\", \"compartidos\", \"compatibilizados\", \"compelidos\", \"compendiados\", \"compenetrados\", \"compensados\", \"compilados\", \"complacidos\", \"complementados\", \"completados\", \"complotados\", \"comportados\", \"comprados\", \"comprendidos\", \"comprimidos\", \"comprobados\", \"comprometidos\", \"compuestos\", \"compulsados\", \"computados\", \"comulgados\", \"comunicados\", \"concatenados\", \"concebidos\", \"concedidos\", \"concelebrados\", \"concentrados\", \"conceptuados\", \"conceptualizados\", \"concertados\", \"concienciados\", \"concientizados\", \"conciliados\", \"concitados\", \"concluidos\", \"concordados\", \"concretados\", \"concretizados\", \"conculcados\", \"concursados\", \"condenados\", \"condensados\", \"condicionados\", \"condimentados\", \"condolidos\", \"condonados\", \"conducidos\", \"conectados\", \"conexionados\", \"confabulados\", \"confeccionados\", \"conferidos\", \"confesados\", \"confiados\", \"configurados\", \"confirmados\", \"confiscados\", \"confluidos\", \"conformados\", \"confortados\", \"confrontados\", \"confundidos\", \"congeniados\", \"congestionados\", \"congratulados\", \"congregados\", \"conjeturados\", \"conjugados\", \"conjuntados\", \"conjurados\", \"conllevados\", \"conmemorados\", \"conminados\", \"conmocionados\", \"conmovidos\", \"conmutados\", \"connotados\", \"conquistados\", \"consagrados\", \"conseguidos\", \"consensuados\", \"consentidos\", \"conservados\", \"considerados\", \"consignados\", \"consistidos\", \"consolados\", \"consolidados\", \"conspirados\", \"constados\", \"constatados\", \"constelados\", \"constitucionalizados\", \"constituidos\", \"constreñidos\", \"construidos\", \"consultados\", \"consumados\", \"consumidos\", \"contabilizados\", \"contactados\", \"contados\", \"contagiados\", \"contemplados\", \"contendidos\", \"contenidos\", \"contentados\", \"contestados\", \"contextualizados\", \"continuados\", \"contorneados\", \"contraatacados\", \"contrabandeados\", \"contradichos\", \"contrahechos\", \"contraídos\", \"contrapesados\", \"contrapuestos\", \"contrariados\", \"contrarrestados\", \"contrastados\", \"contratados\", \"contravenidos\", \"contribuidos\", \"contristados\", \"controlados\", \"convalidados\", \"convencidos\", \"convenidos\", \"convergidos\", \"conversados\", \"convertidos\", \"convidados\", \"convividos\", \"convocados\", \"convulsionados\", \"cooperados\", \"cooptados\", \"coordinados\", \"copados\", \"copiados\", \"coproducidos\", \"copulados\", \"coqueteados\", \"corchados\", \"coreados\", \"coreografiados\", \"corneados\", \"coronados\", \"corporizados\", \"corregidos\", \"correlacionados\", \"correspondidos\", \"correteados\", \"corridos\", \"corroborados\", \"corroídos\", \"corrompidos\", \"cortados\", \"cortejados\", \"cosechados\", \"cosidos\", \"cosificados\", \"costados\", \"costeados\", \"cotejados\", \"cotizados\", \"creados\", \"creídos\", \"criados\", \"cribados\", \"criminalizados\", \"crispados\", \"cristalizados\", \"cristianizados\", \"criticados\", \"cronometrados\", \"crucificados\", \"crujidos\", \"cruzados\", \"cuadriplicados\", \"cuadruplicados\", \"cuajados\", \"cuantificados\", \"cuarteados\", \"cubiertos\", \"cuestionados\", \"cuidados\", \"culeados\", \"culminados\", \"culpabilizados\", \"culpados\", \"cultivados\", \"culturizados\", \"cumplidos\", \"cumplimentados\", \"cundidos\", \"curados\", \"curioseados\", \"currados\", \"cursados\", \"curvados\", \"custodiados\", \"dados\", \"dañados\", \"danzados\", \"datados\", \"dateados\", \"debatidos\", \"debidos\", \"debilitados\", \"debitados\", \"debutados\", \"decaídos\", \"decantados\", \"decapitados\", \"decepcionados\", \"decididos\", \"declamados\", \"declarados\", \"declinados\", \"decodificados\", \"decolorados\", \"decomisados\", \"decrecidos\", \"decretados\", \"dedicados\", \"deducidos\", \"defecados\", \"defendidos\", \"defenestrados\", \"deferidos\", \"definidos\", \"deformados\", \"defraudados\", \"degenerados\", \"deglutidos\", \"degollados\", \"degradados\", \"degustados\", \"deificados\", \"dejados\", \"delatados\", \"delegados\", \"deleitados\", \"deletreados\", \"deliberados\", \"delimitados\", \"delineados\", \"delinquidos\", \"demandados\", \"demarcados\", \"demediados\", \"demeritados\", \"democratizados\", \"demolidos\", \"demonizados\", \"demorados\", \"demostrados\", \"demudados\", \"denegados\", \"denigrados\", \"denominados\", \"denostados\", \"denotados\", \"denunciados\", \"deparados\", \"departidos\", \"dependidos\", \"depilados\", \"deplorados\", \"deportados\", \"depositados\", \"depreciados\", \"depredados\", \"deprimidos\", \"depuestos\", \"depurados\", \"derechizados\", \"derivados\", \"derogados\", \"derramados\", \"derretidos\", \"derribados\", \"derrocados\", \"derrochados\", \"derrotados\", \"derruidos\", \"derrumbados\", \"desabrochados\", \"desacatados\", \"desacelerados\", \"desacomodados\", \"desaconsejados\", \"desacoplados\", \"desacralizados\", \"desacreditados\", \"desactivados\", \"desafiados\", \"desafinados\", \"desaguados\", \"desahogados\", \"desairados\", \"desajustados\", \"desalentados\", \"desalineados\", \"desalojados\", \"desandados\", \"desangrados\", \"desanimados\", \"desaparecidos\", \"desapegados\", \"desaprendidos\", \"desaprobados\", \"desaprovechados\", \"desarmados\", \"desarraigados\", \"desarreglados\", \"desarrollados\", \"desarticulados\", \"desaseados\", \"desasidos\", \"desasosegados\", \"desatados\", \"desatendidos\", \"desautorizados\", \"desayunados\", \"desbancados\", \"desbandados\", \"desbaratados\", \"desbarrancados\", \"desbastados\", \"desbloqueados\", \"desbocados\", \"desbordados\", \"desbrozados\", \"descabalgados\", \"descabezados\", \"descaderados\", \"descalabrados\", \"descalificados\", \"descansados\", \"descargados\", \"descarriados\", \"descarrilados\", \"descartados\", \"descascarados\", \"descascarillados\", \"descendidos\", \"descentrados\", \"descifrados\", \"descocidos\", \"descodificados\", \"descojonados\", \"descolgados\", \"descolocados\", \"descolonizados\", \"descompensados\", \"descomprimidos\", \"descompuestos\", \"desconectados\", \"desconfiados\", \"descongelados\", \"desconocidos\", \"descontados\", \"descontaminados\", \"descontextualizados\", \"descontinuados\", \"desconvocados\", \"descorazonados\", \"descorchados\", \"descorridos\", \"descosidos\", \"descoyuntados\", \"descreídos\", \"descristianizados\", \"descuadrados\", \"descuartizados\", \"descubiertos\", \"descuidados\", \"desdeñados\", \"desdibujados\", \"desdichos\", \"desdoblados\", \"deseados\", \"desecados\", \"desechados\", \"desembarazados\", \"desembarcados\", \"desembocados\", \"desembolsados\", \"desempacados\", \"desempañados\", \"desempaquetados\", \"desempeñados\", \"desempolvados\", \"desenamorados\", \"desencadenados\", \"desencajados\", \"desencarnados\", \"desenchufados\", \"desenfocados\", \"desenfundados\", \"desenganchados\", \"desengrasados\", \"desenmascarados\", \"desenredados\", \"desenrollados\", \"desentendidos\", \"desenterrados\", \"desentonados\", \"desentrañados\", \"desenvainados\", \"desenvueltos\", \"desequilibrados\", \"desertados\", \"desestabilizados\", \"desestimados\", \"desfalcados\", \"desfallecidos\", \"desfigurados\", \"desfondados\", \"desgajados\", \"desgañitados\", \"desgarrados\", \"desgastados\", \"desglosados\", \"desgobernados\", \"desgranados\", \"desguazados\", \"deshechos\", \"desheredados\", \"deshidratados\", \"deshilachados\", \"deshojados\", \"deshonrados\", \"deshuesados\", \"deshumanizados\", \"designados\", \"desilusionados\", \"desincentivados\", \"desinfectados\", \"desinflados\", \"desinflamados\", \"desinformados\", \"desinhibidos\", \"desinstalados\", \"desintegrados\", \"desintoxicados\", \"desistidos\", \"desjarretados\", \"deslegitimados\", \"desleídos\", \"desligados\", \"deslindados\", \"deslizados\", \"deslucidos\", \"deslumbrados\", \"desmadrados\", \"desmalezados\", \"desmantelados\", \"desmaquillados\", \"desmarcados\", \"desmayados\", \"desmejorados\", \"desmembrados\", \"desmentidos\", \"desmenuzados\", \"desmerecidos\", \"desmigados\", \"desmitificados\", \"desmoldados\", \"desmontados\", \"desmoralizados\", \"desmoronados\", \"desmotivados\", \"desmovilizados\", \"desnaturalizados\", \"desnivelados\", \"desnucados\", \"desnudados\", \"desobedecidos\", \"desobligados\", \"desoídos\", \"desollados\", \"desorganizados\", \"desorientados\", \"despachados\", \"desparasitados\", \"desparecidos\", \"desparramados\", \"despedazados\", \"despedidos\", \"despegados\", \"despeinados\", \"despejados\", \"despellejados\", \"despeñados\", \"despenalizados\", \"desperdiciados\", \"despersonalizados\", \"despertados\", \"despilfarrados\", \"despintados\", \"despiojados\", \"despistados\", \"desplazados\", \"desplegados\", \"desplomados\", \"desplumados\", \"despojados\", \"despolitizados\", \"desposados\", \"desposeídos\", \"despotricados\", \"despreciados\", \"desprendidos\", \"despreocupados\", \"desprestigiados\", \"desprogramados\", \"despulpados\", \"despuntados\", \"desquiciados\", \"desquitados\", \"destacados\", \"destapados\", \"desteñidos\", \"desterrados\", \"destetados\", \"destilados\", \"destituidos\", \"destrabados\", \"destripados\", \"destronados\", \"destrozados\", \"destruidos\", \"desunidos\", \"desvalijados\", \"desvalorizados\", \"desvanecidos\", \"desvelados\", \"desvestidos\", \"desviados\", \"desvinculados\", \"desvirtuados\", \"desvividos\", \"detectados\", \"detenidos\", \"detentados\", \"deteriorados\", \"determinados\", \"detestados\", \"detonados\", \"devaluados\", \"devanados\", \"devastados\", \"develados\", \"devengados\", \"devenidos\", \"devorados\", \"devueltos\", \"diagnosticados\", \"diagramados\", \"dializados\", \"dialogados\", \"dibujados\", \"dichos\", \"dictados\", \"dictaminados\", \"diezmados\", \"difamados\", \"diferenciados\", \"diferidos\", \"dificultados\", \"difuminados\", \"difundidos\", \"digeridos\", \"digitados\", \"dignados\", \"dignificados\", \"dilapidados\", \"dilatados\", \"diligenciados\", \"dilucidados\", \"diluidos\", \"dimensionados\", \"dimitidos\", \"dinamitados\", \"dinamizados\", \"dirimidos\", \"discernidos\", \"disciplinados\", \"discontinuados\", \"discrepados\", \"discriminados\", \"disculpados\", \"discurridos\", \"discutidos\", \"diseccionados\", \"diseminados\", \"diseñados\", \"disentidos\", \"disertados\", \"disfrazados\", \"disfrutados\", \"disgregados\", \"disgustados\", \"disimulados\", \"disipados\", \"dislocados\", \"disminuidos\", \"disociados\", \"dispensados\", \"dispersados\", \"dispuestos\", \"disputados\", \"distados\", \"distanciados\", \"distendidos\", \"distinguidos\", \"distorsionados\", \"distraídos\", \"distribuidos\", \"disuadidos\", \"disueltos\", \"divagados\", \"diversificados\", \"divertidos\", \"divididos\", \"divinizados\", \"divisados\", \"divorciados\", \"divulgados\", \"doblados\", \"doblegados\", \"doctorados\", \"documentados\", \"dogmatizados\", \"dolidos\", \"domados\", \"domesticados\", \"dominados\", \"donados\", \"dopados\", \"dormidos\", \"dosificados\", \"dotados\", \"dragados\", \"dramatizados\", \"drenados\", \"drogados\", \"duchados\", \"dudados\", \"dulcificados\", \"duplicados\", \"durados\", \"echados\", \"eclipsados\", \"eclosionados\", \"economizados\", \"ecualizados\", \"edificados\", \"editados\", \"educados\", \"efectuados\", \"ejecutados\", \"ejemplificados\", \"ejercidos\", \"ejercitados\", \"elaborados\", \"electrizados\", \"electrocutados\", \"elevados\", \"elididos\", \"eliminados\", \"elogiados\", \"elucubrados\", \"eludidos\", \"emanados\", \"emancipados\", \"embadurnados\", \"embalados\", \"embalsamados\", \"embanderados\", \"embarcados\", \"embargados\", \"embarrados\", \"embarrancados\", \"embaucados\", \"embebidos\", \"embelesados\", \"embellecidos\", \"embestidos\", \"embolados\", \"embolsados\", \"emborrachados\", \"emborronados\", \"emboscados\", \"embotados\", \"embriagados\", \"embrollados\", \"embrutecidos\", \"embuchados\", \"emergidos\", \"emigrados\", \"emitidos\", \"emocionados\", \"empacados\", \"empachados\", \"empadronados\", \"empalados\", \"empalmados\", \"empanados\", \"empañados\", \"empantanados\", \"empapelados\", \"empaquetados\", \"emparejados\", \"empastados\", \"empatados\", \"empecinados\", \"empeñados\", \"empeorados\", \"empequeñecidos\", \"emperrados\", \"empezados\", \"empinados\", \"emplazados\", \"empleados\", \"empobrecidos\", \"empoderados\", \"empollados\", \"empolvados\", \"emponzoñados\", \"emprendidos\", \"empujados\", \"empuñados\", \"emputados\", \"emulados\", \"emulsionados\", \"enajenados\", \"enaltecidos\", \"enamorados\", \"enarbolados\", \"enardecidos\", \"encabezados\", \"encabritados\", \"encabronados\", \"encadenados\", \"encajados\", \"encajonados\", \"encallados\", \"encamados\", \"encaminados\", \"encandilados\", \"encanecidos\", \"encañonados\", \"encantados\", \"encaprichados\", \"encapsulados\", \"encarados\", \"encaramados\", \"encarecidos\", \"encargados\", \"encariñados\", \"encarnados\", \"encarrilados\", \"encartados\", \"encasillados\", \"encasquetados\", \"encasquillados\", \"encastrados\", \"encausados\", \"encauzados\", \"enceguecidos\", \"encendidos\", \"encerados\", \"encerrados\", \"encharcados\", \"enchufados\", \"encimados\", \"encogidos\", \"encolados\", \"encolerizados\", \"encolumnados\", \"encomendados\", \"enconados\", \"encontrados\", \"encordados\", \"encrespados\", \"encuadrados\", \"encubiertos\", \"encuerados\", \"encumbrados\", \"enderezados\", \"endeudados\", \"endilgados\", \"endiosados\", \"endosados\", \"endulzados\", \"endurecidos\", \"enemistados\", \"energizados\", \"enervados\", \"enfadados\", \"enfangados\", \"enfatizados\", \"enfermados\", \"enfiestados\", \"enfilados\", \"enflaquecidos\", \"enfocados\", \"enfrascados\", \"enfrentados\", \"enfriados\", \"enfurecidos\", \"engalanados\", \"engañados\", \"enganchados\", \"engarzados\", \"engatusados\", \"engendrados\", \"englobados\", \"engolosinados\", \"engordados\", \"engranados\", \"engrandecidos\", \"engrasados\", \"engreídos\", \"engrosados\", \"engullidos\", \"enharinados\", \"enhebrados\", \"enjuagados\", \"enjugados\", \"enjuiciados\", \"enlazados\", \"enlistados\", \"enlodados\", \"enloquecidos\", \"enlozados\", \"enlutados\", \"enmarañados\", \"enmascarados\", \"enmendados\", \"enmohecidos\", \"enmudecidos\", \"ennegrecidos\", \"ennoblecidos\", \"enorgullecidos\", \"enrarecidos\", \"enredados\", \"enripiados\", \"enriquecidos\", \"enrocados\", \"enrojecidos\", \"enrolados\", \"enrollados\", \"enroscados\", \"enrumbados\", \"ensalzados\", \"ensamblados\", \"ensañados\", \"ensanchados\", \"ensartados\", \"ensayados\", \"ensebados\", \"enseñados\", \"enseñoreados\", \"ensillados\", \"ensoberbecidos\", \"ensogados\", \"ensombrecidos\", \"ensoñados\", \"ensordecidos\", \"ensuciados\", \"entablados\", \"entallados\", \"entendidos\", \"enterados\", \"enternecidos\", \"enterrados\", \"entibiados\", \"entintados\", \"entonados\", \"entorpecidos\", \"entrados\", \"entrampados\", \"entrañados\", \"entreabiertos\", \"entrecomillados\", \"entrecruzados\", \"entregados\", \"entrelazados\", \"entremetidos\", \"entremezclados\", \"entrenados\", \"entresacados\", \"entretejidos\", \"entretenidos\", \"entreverados\", \"entrevistados\", \"entristecidos\", \"entrometidos\", \"entronados\", \"entroncados\", \"entronizados\", \"entumecidos\", \"enturbiados\", \"entusiasmados\", \"enumerados\", \"enunciados\", \"envainados\", \"envalentonados\", \"envanecidos\", \"envasados\", \"envejecidos\", \"envenenados\", \"envestidos\", \"enviados\", \"enviciados\", \"envidiados\", \"envilecidos\", \"enviudados\", \"envueltos\", \"enzarzados\", \"equilibrados\", \"equiparados\", \"equivocados\", \"erigidos\", \"erizados\", \"erogados\", \"erosionados\", \"erotizados\", \"erradicados\", \"errados\", \"esbozados\", \"escabullidos\", \"escalados\", \"escaldados\", \"escalfados\", \"escamados\", \"escamoteados\", \"escampados\", \"escandalizados\", \"escaneados\", \"escapados\", \"escaqueados\", \"escarbados\", \"escarchados\", \"escarmentados\", \"escarnecidos\", \"escaseados\", \"escatimados\", \"escenificados\", \"escindidos\", \"esclarecidos\", \"esclavizados\", \"escocidos\", \"escogidos\", \"escolarizados\", \"escoltados\", \"escondidos\", \"escorados\", \"escrachados\", \"escritos\", \"escrutados\", \"escuchados\", \"escudados\", \"escudriñados\", \"esculpidos\", \"escupidos\", \"escurridos\", \"esforzados\", \"esfumados\", \"esgrimidos\", \"esmerados\", \"esmerilados\", \"espabilados\", \"espaciados\", \"españolizados\", \"espantados\", \"esparcidos\", \"especificados\", \"especulados\", \"esperados\", \"espesados\", \"espetados\", \"espiados\", \"espigados\", \"espinados\", \"espirados\", \"espiritualizados\", \"espoleados\", \"espolvoreados\", \"esponjados\", \"esponsorizados\", \"esposados\", \"esquematizados\", \"esquiados\", \"esquilados\", \"esquilmados\", \"esquivados\", \"estabilizados\", \"establecidos\", \"estacionados\", \"estafados\", \"estallados\", \"estampados\", \"estancados\", \"estaqueados\", \"estatizados\", \"estatuidos\", \"esterificados\", \"esterilizados\", \"estigmatizados\", \"estilizados\", \"estimados\", \"estimulados\", \"estipulados\", \"estirados\", \"estorbados\", \"estornudados\", \"estragados\", \"estrangulados\", \"estrechados\", \"estrellados\", \"estremecidos\", \"estrenados\", \"estresados\", \"estriados\", \"estropeados\", \"estructurados\", \"estrujados\", \"estudiados\", \"eternizados\", \"etiquetados\", \"evacuados\", \"evadidos\", \"evaluados\", \"evangelizados\", \"evaporados\", \"evidenciados\", \"eviscerados\", \"evitados\", \"evocados\", \"evolucionados\", \"exacerbados\", \"exagerados\", \"exaltados\", \"examinados\", \"exasperados\", \"excarcelados\", \"excavados\", \"excedidos\", \"exceptuados\", \"excitados\", \"exclamados\", \"excluidos\", \"excretados\", \"exculpados\", \"excusados\", \"execrados\", \"exhalados\", \"exhibidos\", \"exhortados\", \"exhumados\", \"exigidos\", \"exilados\", \"eximidos\", \"existidos\", \"exonerados\", \"exorcizados\", \"expandidos\", \"expedidos\", \"expedientados\", \"expelidos\", \"expendidos\", \"experimentados\", \"expiados\", \"expirados\", \"explayados\", \"explicados\", \"explicitados\", \"explorados\", \"explosionados\", \"explotados\", \"expoliados\", \"exportados\", \"expresados\", \"exprimidos\", \"expropiados\", \"expuestos\", \"expulsados\", \"expurgados\", \"extendidos\", \"exteriorizados\", \"exterminados\", \"externados\", \"externalizados\", \"extinguidos\", \"extirpados\", \"extorsionados\", \"extractados\", \"extraditados\", \"extraídos\", \"extralimitados\", \"extrañados\", \"extrapolados\", \"extraviados\", \"extremados\", \"extruidos\", \"exudados\", \"eyaculados\", \"eyectados\", \"fabricados\", \"fabulados\", \"facilitados\", \"facturados\", \"facultados\", \"fagocitados\", \"fajados\", \"fallados\", \"fallecidos\", \"falsados\", \"falseados\", \"falsificados\", \"familiarizados\", \"fantaseados\", \"fascinados\", \"fastidiados\", \"fatigados\", \"favorecidos\", \"fecundados\", \"felicitados\", \"feminizados\", \"fenecidos\", \"fermentados\", \"fertilizados\", \"festejados\", \"fiados\", \"fichados\", \"fidelizados\", \"figurados\", \"fijados\", \"filmados\", \"filosofados\", \"filtrados\", \"finalizados\", \"financiados\", \"fincados\", \"fingidos\", \"finiquitados\", \"firmados\", \"fiscalizados\", \"fisurados\", \"flagelados\", \"flameados\", \"flanqueados\", \"flaqueados\", \"fletados\", \"flexibilizados\", \"flexionados\", \"flipados\", \"floreados\", \"florecidos\", \"flotados\", \"fluctuados\", \"focalizados\", \"fogueados\", \"foliados\", \"follados\", \"fomentados\", \"fondeados\", \"forcejeados\", \"forestados\", \"forjados\", \"formados\", \"formalizados\", \"formateados\", \"formulados\", \"fornicados\", \"forrados\", \"fortalecidos\", \"forzados\", \"fotocopiados\", \"fotografiados\", \"fracasados\", \"fraccionados\", \"fracturados\", \"fragmentados\", \"fraguados\", \"franqueados\", \"frecuentados\", \"fregados\", \"frenados\", \"fresados\", \"friccionados\", \"frotados\", \"fructificados\", \"fruncidos\", \"fugados\", \"fulminados\", \"fumados\", \"fumigados\", \"funcionados\", \"fundados\", \"fundamentados\", \"fundidos\", \"fungidos\", \"fusilados\", \"fusionados\", \"fustigados\", \"gafados\", \"ganados\", \"gangrenados\", \"garabateados\", \"garantidos\", \"garantizados\", \"garridos\", \"gaseados\", \"gastados\", \"gemidos\", \"generados\", \"generalizados\", \"gerenciados\", \"germinados\", \"gestados\", \"gestionados\", \"girados\", \"glorificados\", \"glosados\", \"gobernados\", \"goleados\", \"golpeados\", \"gozados\", \"grabados\", \"graduados\", \"graficados\", \"granjeados\", \"grapados\", \"gratificados\", \"gravados\", \"gravitados\", \"gritados\", \"gruñidos\", \"guardados\", \"guarecidos\", \"guarnecidos\", \"guerreados\", \"guiados\", \"guillotinados\", \"guiñados\", \"guindados\", \"guisados\", \"gustados\", \"habilitados\", \"habitados\", \"habituados\", \"hablados\", \"halados\", \"halagados\", \"hallados\", \"hartados\", \"hechizados\", \"hechos\", \"helenizados\", \"henchidos\", \"hendidos\", \"heredados\", \"heridos\", \"hermanados\", \"herrados\", \"hervidos\", \"hibernados\", \"hibridados\", \"hidratados\", \"higienizados\", \"hilados\", \"hilvanados\", \"hincados\", \"hinchados\", \"hipnotizados\", \"hipotecados\", \"historiados\", \"hojeados\", \"holgados\", \"hollados\", \"homenajeados\", \"homogeneizados\", \"homologados\", \"honrados\", \"horadados\", \"horneados\", \"horrorizados\", \"hospedados\", \"hostigados\", \"hostilizados\", \"huidos\", \"humanados\", \"humanizados\", \"humectados\", \"humedecidos\", \"humillados\", \"hundidos\", \"hurgados\", \"hurtados\", \"ideados\", \"idealizados\", \"identificados\", \"ideologizados\", \"idiotizados\", \"idolatrados\", \"ignorados\", \"igualados\", \"ilegalizados\", \"iluminados\", \"ilusionados\", \"ilustrados\", \"imaginados\", \"imbricados\", \"imitados\", \"impactados\", \"impartidos\", \"impedidos\", \"impelidos\", \"imperados\", \"impermeabilizados\", \"implantados\", \"implementados\", \"implicados\", \"implorados\", \"importados\", \"importunados\", \"imposibilitados\", \"impresionados\", \"improvisados\", \"impuestos\", \"impugnados\", \"impulsados\", \"imputados\", \"inaugurados\", \"incautados\", \"incendiados\", \"incentivados\", \"incinerados\", \"incitados\", \"inclinados\", \"incluidos\", \"incoados\", \"incomodados\", \"incorporados\", \"incrementados\", \"increpados\", \"incriminados\", \"incubados\", \"inculcados\", \"inculpados\", \"incumplidos\", \"incurridos\", \"incursionados\", \"indagados\", \"indemnizados\", \"independizados\", \"indexados\", \"indicados\", \"indigestados\", \"indignados\", \"indispuestos\", \"individuados\", \"inducidos\", \"indultados\", \"inervados\", \"infamados\", \"infartados\", \"infectados\", \"inferidos\", \"inficionados\", \"infiltrados\", \"inflados\", \"inflamados\", \"infligidos\", \"influenciados\", \"influidos\", \"informados\", \"infravalorados\", \"infringidos\", \"infundidos\", \"ingeniados\", \"ingeridos\", \"ingresados\", \"inhabilitados\", \"inhalados\", \"inhibidos\", \"inhumados\", \"iniciados\", \"inicializados\", \"injertados\", \"injuriados\", \"inmigrados\", \"inmiscuidos\", \"inmolados\", \"inmortalizados\", \"inmovilizados\", \"inmunizados\", \"innovados\", \"inoculados\", \"inquietados\", \"inquiridos\", \"insensibilizados\", \"insertados\", \"insinuados\", \"insistidos\", \"inspeccionados\", \"inspirados\", \"instados\", \"instalados\", \"instaurados\", \"instigados\", \"instituidos\", \"instruidos\", \"instrumentados\", \"instrumentalizados\", \"insuflados\", \"insultados\", \"insumidos\", \"integrados\", \"intelectualizados\", \"intensificados\", \"intentados\", \"interactuados\", \"intercalados\", \"intercambiados\", \"intercedidos\", \"interceptados\", \"interesados\", \"interferidos\", \"interiorizados\", \"intermediados\", \"internacionalizados\", \"internalizados\", \"interpelados\", \"interpolados\", \"interpretados\", \"interpuestos\", \"interrogados\", \"interrumpidos\", \"intervenidos\", \"intimados\", \"intimidados\", \"intitulados\", \"intoxicados\", \"intrigados\", \"introducidos\", \"intuidos\", \"inundados\", \"inutilizados\", \"invadidos\", \"invalidados\", \"inventados\", \"inventariados\", \"invertidos\", \"investidos\", \"investigados\", \"invitados\", \"invocados\", \"involucionados\", \"inyectados\", \"ionizados\", \"ironizados\", \"irradiados\", \"irrespetados\", \"irrigados\", \"irritados\", \"irrogados\", \"irrumpidos\", \"jactados\", \"jalados\", \"jaleados\", \"jalonados\", \"jaqueados\", \"jerarquizados\", \"jodidos\", \"jorobados\", \"jubilados\", \"jugados\", \"juntados\", \"jurados\", \"juramentados\", \"justificados\", \"juzgados\", \"laborados\", \"labrados\", \"laburados\", \"lacados\", \"lacerados\", \"lactados\", \"ladeados\", \"ladrados\", \"lamentados\", \"lamidos\", \"laminados\", \"languidecidos\", \"lanzados\", \"lapidados\", \"laqueados\", \"largados\", \"lastimados\", \"lastrados\", \"latidos\", \"laudados\", \"lavados\", \"legalizados\", \"legislados\", \"legitimados\", \"leídos\", \"lesionados\", \"leudados\", \"levantados\", \"liados\", \"liberados\", \"liberalizados\", \"libertados\", \"librados\", \"licitados\", \"licuados\", \"liderizados\", \"lidiados\", \"ligados\", \"lijados\", \"limados\", \"limitados\", \"limpiados\", \"linchados\", \"liquidados\", \"litigados\", \"llagados\", \"llamados\", \"llegados\", \"llenados\", \"llevados\", \"llorados\", \"localizados\", \"logrados\", \"lubricados\", \"luchados\", \"lucidos\", \"lucrados\", \"lustrados\", \"macerados\", \"machacados\", \"macheteados\", \"machucados\", \"madreados\", \"madrugados\", \"madurados\", \"magnetizados\", \"magnificados\", \"malacostumbrados\", \"malbaratados\", \"malcriados\", \"maleados\", \"malentendidos\", \"malgastados\", \"malinterpretados\", \"malogrados\", \"maltratados\", \"malversados\", \"mamados\", \"manchados\", \"mancillados\", \"mandados\", \"manejados\", \"mangados\", \"mangoneados\", \"manifestados\", \"maniobrados\", \"manipulados\", \"manoseados\", \"manteados\", \"mantenidos\", \"manufacturados\", \"maquillados\", \"maquinados\", \"maravillados\", \"marcados\", \"marchitados\", \"mareados\", \"marginados\", \"maridados\", \"martillados\", \"martirizados\", \"masacrados\", \"masajeados\", \"mascados\", \"masificados\", \"masticados\", \"masturbados\", \"matados\", \"materializados\", \"matizados\", \"matriculados\", \"maximizados\", \"meados\", \"mecanografiados\", \"mechados\", \"mecidos\", \"mediados\", \"mediatizados\", \"medicados\", \"medidos\", \"meditados\", \"medrados\", \"mejorados\", \"mellados\", \"memorizados\", \"mencionados\", \"meneados\", \"menguados\", \"menoscabados\", \"menospreciados\", \"menstruados\", \"mensualizados\", \"mensurados\", \"mentados\", \"mentalizados\", \"mentidos\", \"mercadeados\", \"mercantilizados\", \"merecidos\", \"merendados\", \"mermados\", \"merodeados\", \"mesurados\", \"metamorfoseados\", \"metidos\", \"mezclados\", \"migrados\", \"militados\", \"militarizados\", \"mimados\", \"mimetizados\", \"minados\", \"minimizados\", \"ministrados\", \"minusvalorados\", \"mirados\", \"mistificados\", \"mitificados\", \"mitigados\", \"modelados\", \"modernizados\", \"modificados\", \"modulados\", \"mofados\", \"mojados\", \"moldeados\", \"molestados\", \"molidos\", \"monetizados\", \"monitorizados\", \"monopolizados\", \"montados\", \"morados\", \"moralizados\", \"mordidos\", \"mordisqueados\", \"mortificados\", \"mosqueados\", \"mostrados\", \"motejados\", \"motivados\", \"movidos\", \"movilizados\", \"mudados\", \"muestreados\", \"multados\", \"multiplicados\", \"munidos\", \"murmurados\", \"mutados\", \"mutilados\", \"nacionalizados\", \"narcotizados\", \"narrados\", \"naufragados\", \"navegados\", \"necesitados\", \"negados\", \"negociados\", \"neutralizados\", \"ninguneados\", \"nivelados\", \"nombrados\", \"nominados\", \"noqueados\", \"normados\", \"normalizados\", \"notados\", \"notificados\", \"nutridos\", \"obcecados\", \"obedecidos\", \"objetados\", \"objetivados\", \"obligados\", \"obliterados\", \"obnubilados\", \"obrados\", \"obsequiados\", \"observados\", \"obsesionados\", \"obstaculizados\", \"obstruidos\", \"obtenidos\", \"obturados\", \"obviados\", \"ocasionados\", \"ocluidos\", \"ocultados\", \"ocupados\", \"odiados\", \"ofendidos\", \"ofertados\", \"oficiados\", \"oficializados\", \"ofrecidos\", \"ofrendados\", \"ofuscados\", \"oídos\", \"ojeados\", \"olfateados\", \"olidos\", \"olvidados\", \"omitidos\", \"ondeados\", \"ondulados\", \"opacados\", \"operados\", \"opinados\", \"oprimidos\", \"optados\", \"optimizados\", \"opuestos\", \"orados\", \"orbitados\", \"ordenados\", \"ordeñados\", \"organizados\", \"orientados\", \"originados\", \"orillados\", \"orinados\", \"ornados\", \"ornamentados\", \"orquestados\", \"osados\", \"oscilados\", \"oscurecidos\", \"osificados\", \"ostentados\", \"otorgados\", \"ovacionados\", \"ovulados\", \"oxidados\", \"oxigenados\", \"pacificados\", \"pactados\", \"padecidos\", \"paganizados\", \"paginados\", \"paladeados\", \"paliados\", \"palpados\", \"parados\", \"parafraseados\", \"paralizados\", \"parapetados\", \"parasitados\", \"parcelados\", \"parchados\", \"parcheados\", \"pareados\", \"paridos\", \"parodiados\", \"parqueados\", \"participados\", \"particularizados\", \"partidos\", \"pasados\", \"paseados\", \"pastoreados\", \"pataleados\", \"pateados\", \"patentados\", \"patentizados\", \"patinados\", \"patrullados\", \"pecados\", \"pedaleados\", \"pedidos\", \"pegados\", \"peinados\", \"pellizcados\", \"penalizados\", \"penetrados\", \"pensados\", \"percatados\", \"percibidos\", \"percutidos\", \"perdidos\", \"perdonados\", \"perdurados\", \"perecidos\", \"peregrinados\", \"perfeccionados\", \"perfilados\", \"perforados\", \"perfumados\", \"pergeñados\", \"peritados\", \"perjudicados\", \"perjurados\", \"permeados\", \"permitidos\", \"permutados\", \"pernoctados\", \"perpetrados\", \"perpetuados\", \"perseguidos\", \"perseverados\", \"persistidos\", \"personados\", \"personalizados\", \"personificados\", \"persuadidos\", \"pertenecidos\", \"pertrechados\", \"perturbados\", \"pervertidos\", \"pervividos\", \"pescados\", \"petados\", \"peticionados\", \"picados\", \"picaneados\", \"picoteados\", \"pifiados\", \"pignorados\", \"pillados\", \"pilotados\", \"piloteados\", \"pincelados\", \"pinchados\", \"pintados\", \"pintarrajeados\", \"pinzados\", \"pirados\", \"pirateados\", \"pisados\", \"pisoteados\", \"pitados\", \"placidos\", \"plagiados\", \"planchados\", \"planeados\", \"plantados\", \"planteados\", \"plasmados\", \"platicados\", \"plegados\", \"pluralizados\", \"podados\", \"poetizados\", \"polemizados\", \"politizados\", \"pololeados\", \"ponderados\", \"pontificados\", \"popularizados\", \"porfiados\", \"portados\", \"porteados\", \"posados\", \"posesionados\", \"posibilitados\", \"posicionados\", \"pospuestos\", \"posteados\", \"postergados\", \"postrados\", \"postulados\", \"potenciados\", \"practicados\", \"precarizados\", \"precedidos\", \"preceptuados\", \"precintados\", \"precipitados\", \"precisados\", \"preconizados\", \"predicados\", \"predichos\", \"predispuestos\", \"predominados\", \"preferidos\", \"prefigurados\", \"pregonados\", \"preguntados\", \"prejuzgados\", \"premiados\", \"prendados\", \"prendidos\", \"preocupados\", \"preparados\", \"presagiados\", \"prescindidos\", \"presenciados\", \"presentados\", \"presentidos\", \"preservados\", \"presididos\", \"presionados\", \"prestados\", \"prestigiados\", \"presumidos\", \"presurizados\", \"pretendidos\", \"preteridos\", \"prevalecidos\", \"prevalidos\", \"prevaricados\", \"prevenidos\", \"previstos\", \"primados\", \"principiados\", \"pringados\", \"priorizados\", \"privatizados\", \"probados\", \"problematizados\", \"procedidos\", \"procesados\", \"proclamados\", \"procreados\", \"procurados\", \"prodigados\", \"producidos\", \"profanados\", \"proferidos\", \"profesados\", \"profesionalizados\", \"profetizados\", \"profundizados\", \"programados\", \"progresados\", \"prohibidos\", \"prohijados\", \"proletarizados\", \"proliferados\", \"prologados\", \"prolongados\", \"promediados\", \"prometidos\", \"promocionados\", \"promovidos\", \"promulgados\", \"pronosticados\", \"pronunciados\", \"propagados\", \"propalados\", \"propendidos\", \"propiciados\", \"propinados\", \"proporcionados\", \"propuestos\", \"propugnados\", \"propulsados\", \"prorrateados\", \"prorrogados\", \"proseguidos\", \"prosperados\", \"prostituidos\", \"protegidos\", \"protestados\", \"protocolizados\", \"provenidos\", \"provocados\", \"proyectados\", \"psicoanalizados\", \"publicados\", \"publicitados\", \"puestos\", \"pugnados\", \"pujados\", \"pulidos\", \"pulsados\", \"pululados\", \"pulverizados\", \"punados\", \"punteados\", \"puntuados\", \"puntualizados\", \"punzados\", \"purgados\", \"purificados\", \"puteados\", \"quebrados\", \"quebrantados\", \"quejados\", \"quemados\", \"querellados\", \"queridos\", \"quintuplicados\", \"quitados\", \"racionados\", \"racionalizados\", \"radiados\", \"radicados\", \"radicalizados\", \"raídos\", \"rajados\", \"ralentizados\", \"rapados\", \"rapeados\", \"raptados\", \"rascados\", \"rasgados\", \"rasguñados\", \"raspados\", \"rastreados\", \"rasurados\", \"ratificados\", \"rayados\", \"razonados\", \"reabiertos\", \"reabsorbidos\", \"reaccionados\", \"reactivados\", \"readaptados\", \"readmitidos\", \"reafirmados\", \"reagrupados\", \"reajustados\", \"realimentados\", \"realizados\", \"realzados\", \"reanimados\", \"reanudados\", \"reaparecidos\", \"rearmados\", \"reasumidos\", \"reavivados\", \"rebajados\", \"rebalsados\", \"rebanados\", \"rebasados\", \"rebatidos\", \"rebautizados\", \"rebelados\", \"reblandecidos\", \"rebobinados\", \"rebosados\", \"rebotados\", \"rebozados\", \"rebuscados\", \"recabados\", \"recaídos\", \"recalados\", \"recalcados\", \"recalentados\", \"recalificados\", \"recapacitados\", \"recapitulados\", \"recargados\", \"recatados\", \"recaudados\", \"receptados\", \"recetados\", \"rechazados\", \"recibidos\", \"reciclados\", \"recitados\", \"reclamados\", \"reclinados\", \"reclutados\", \"recobrados\", \"recocidos\", \"recogidos\", \"recolectados\", \"recomendados\", \"recomenzados\", \"recompensados\", \"recompuestos\", \"reconcentrados\", \"reconciliados\", \"reconducidos\", \"reconfortados\", \"reconocidos\", \"reconquistados\", \"reconsiderados\", \"reconstituidos\", \"reconstruidos\", \"reconvenidos\", \"reconvertidos\", \"recopilados\", \"recordados\", \"recorridos\", \"recortados\", \"recreados\", \"recriminados\", \"recrudecidos\", \"rectificados\", \"recubiertos\", \"reculados\", \"recuperados\", \"recurridos\", \"recusados\", \"redactados\", \"redefinidos\", \"redescubiertos\", \"redimensionados\", \"redimidos\", \"rediseñados\", \"redistribuidos\", \"redituados\", \"redoblados\", \"redondeados\", \"reducidos\", \"redundados\", \"reedificados\", \"reeditados\", \"reeducados\", \"reelaborados\", \"reembolsados\", \"reemplazados\", \"reencarnados\", \"reencauchados\", \"reencontrados\", \"reenganchados\", \"reenviados\", \"reescritos\", \"reestructurados\", \"reexaminados\", \"refaccionados\", \"referidos\", \"refinados\", \"refinanciados\", \"reflejados\", \"reflexionados\", \"reflotados\", \"reforestados\", \"reformados\", \"reforzados\", \"refractados\", \"refrenados\", \"refrendados\", \"refrescados\", \"refrigerados\", \"refundidos\", \"refutados\", \"regados\", \"regalados\", \"regañados\", \"regateados\", \"regenerados\", \"regentados\", \"regenteados\", \"regidos\", \"regionalizados\", \"registrados\", \"reglados\", \"reglamentados\", \"regocijados\", \"regodeados\", \"regresados\", \"regulados\", \"regularizados\", \"regurgitados\", \"rehabilitados\", \"rehechos\", \"rehogados\", \"rehuidos\", \"rehusados\", \"reídos\", \"reinados\", \"reincididos\", \"reincorporados\", \"reingresados\", \"reiniciados\", \"reinsertados\", \"reinstalados\", \"reinstaurados\", \"reintegrados\", \"reinventados\", \"reinvertidos\", \"reiterados\", \"reivindicados\", \"rejuvenecidos\", \"relajados\", \"relamidos\", \"relanzados\", \"relatados\", \"relativizados\", \"relegados\", \"releídos\", \"relevados\", \"religados\", \"rellenados\", \"remachados\", \"remados\", \"remangados\", \"remarcados\", \"rematados\", \"remecidos\", \"remediados\", \"rememorados\", \"remendados\", \"remitidos\", \"remodelados\", \"remojados\", \"remolcados\", \"remontados\", \"removidos\", \"remplazados\", \"renacidos\", \"rendidos\", \"renegados\", \"renegociados\", \"reñidos\", \"renombrados\", \"renovados\", \"rentabilizados\", \"rentados\", \"renunciados\", \"reordenados\", \"reorganizados\", \"reorientados\", \"reparados\", \"repartidos\", \"repasados\", \"repatriados\", \"repelidos\", \"repensados\", \"repercutidos\", \"repescados\", \"repetidos\", \"repicados\", \"repintados\", \"replanteados\", \"replegados\", \"replicados\", \"repoblados\", \"reportados\", \"reporteados\", \"reposados\", \"repreguntados\", \"reprendidos\", \"represados\", \"representados\", \"reprimidos\", \"reprobados\", \"reprochados\", \"reproducidos\", \"repudiados\", \"repuestos\", \"repugnados\", \"repuntados\", \"reputados\", \"requeridos\", \"requisados\", \"resaltados\", \"resarcidos\", \"resbalados\", \"rescatados\", \"rescindidos\", \"resecados\", \"reseñados\", \"reservados\", \"reseteados\", \"resguardados\", \"resididos\", \"resignados\", \"resistidos\", \"resonados\", \"respaldados\", \"respetados\", \"respirados\", \"resplandecidos\", \"respondidos\", \"responsabilizados\", \"resquebrajados\", \"restablecidos\", \"restados\", \"restaurados\", \"restituidos\", \"restregados\", \"resucitados\", \"resueltos\", \"resumidos\", \"resurgidos\", \"retados\", \"retardados\", \"retenidos\", \"retirados\", \"retocados\", \"retomados\", \"retorcidos\", \"retornados\", \"retractados\", \"retraídos\", \"retransmitidos\", \"retrasados\", \"retratados\", \"retribuidos\", \"retrotraídos\", \"retumbados\", \"reunidos\", \"reunificados\", \"reutilizados\", \"revalidados\", \"revalorizados\", \"revaluados\", \"revelados\", \"revendidos\", \"reventados\", \"reverdecidos\", \"reverenciados\", \"revertidos\", \"revestidos\", \"revirados\", \"revisados\", \"revitalizados\", \"revividos\", \"revocados\", \"revolcados\", \"revoloteados\", \"revolucionados\", \"revueltos\", \"ridiculizados\", \"rifados\", \"rimados\", \"rivalizados\", \"rizados\", \"robados\", \"robustecidos\", \"rociados\", \"rodados\", \"rodeados\", \"rogados\", \"roídos\", \"rondados\", \"rotados\", \"rotos\", \"rotulados\", \"roturados\", \"rozados\", \"ruborizados\", \"rubricados\", \"rugidos\", \"rumiados\", \"rumorados\", \"sabidos\", \"saboreados\", \"saboteados\", \"sacados\", \"saciados\", \"sacralizados\", \"sacrificados\", \"sacudidos\", \"saldados\", \"salpimentados\", \"salpullidos\", \"saltados\", \"salteados\", \"saludados\", \"salvados\", \"salvaguardados\", \"sanados\", \"saneados\", \"sangrados\", \"santificados\", \"saqueados\", \"satanizados\", \"satirizados\", \"satisfechos\", \"sazonados\", \"secados\", \"seccionados\", \"secretados\", \"secuenciados\", \"secuestrados\", \"secundados\", \"sedimentados\", \"seducidos\", \"segados\", \"segmentados\", \"segregados\", \"seguidos\", \"seleccionados\", \"sembrados\", \"señalados\", \"sensibilizados\", \"sentados\", \"sentenciados\", \"sentidos\", \"separados\", \"serenados\", \"serrados\", \"servidos\", \"significados\", \"silenciados\", \"simbolizados\", \"simpatizados\", \"simplificados\", \"simulados\", \"sincerados\", \"sincronizados\", \"sindicados\", \"sindicalizados\", \"singularizados\", \"sintetizados\", \"sintonizados\", \"sistematizados\", \"situados\", \"sobados\", \"sobornados\", \"sobrados\", \"sobrecargados\", \"sobrecogidos\", \"sobreentendidos\", \"sobreestimados\", \"sobrellevados\", \"sobrentendidos\", \"sobrepasados\", \"sobrepuestos\", \"sobresalidos\", \"sobresaltados\", \"sobrestimados\", \"sobrevenidos\", \"sobrevividos\", \"sobrevolados\", \"socavados\", \"socializados\", \"socorridos\", \"sodomizados\", \"sofocados\", \"sojuzgados\", \"solapados\", \"solicitados\", \"solidarizados\", \"solidificados\", \"soliviantados\", \"soltados\", \"solucionados\", \"solventados\", \"sombreados\", \"sometidos\", \"sonados\", \"soñados\", \"sondeados\", \"sonreídos\", \"sonrojados\", \"sopesados\", \"soplados\", \"soportados\", \"sorbidos\", \"sorprendidos\", \"sorteados\", \"sosegados\", \"soslayados\", \"sospechados\", \"sostenidos\", \"suavizados\", \"subastados\", \"subcontratados\", \"subdivididos\", \"subestimados\", \"subidos\", \"sublevados\", \"sublimados\", \"subrayados\", \"subrogados\", \"subsanados\", \"subsidiados\", \"subsistidos\", \"substraídos\", \"subsumidos\", \"subvertidos\", \"subyugados\", \"succionados\", \"sucedidos\", \"sucumbidos\", \"sudados\", \"sufragados\", \"sufridos\", \"sugeridos\", \"sugestionados\", \"suicidados\", \"sujetados\", \"sumados\", \"sumergidos\", \"suministrados\", \"supeditados\", \"superados\", \"superpuestos\", \"supervisados\", \"suplantados\", \"suplicados\", \"suplidos\", \"suprimidos\", \"supuestos\", \"surcados\", \"surtidos\", \"suscitados\", \"suspendidos\", \"suspirados\", \"sustanciados\", \"sustantivados\", \"sustentados\", \"sustituidos\", \"sustraídos\", \"susurrados\", \"suturados\", \"tabulados\", \"tachados\", \"talados\", \"taladrados\", \"tallados\", \"tambaleados\", \"tamizados\", \"tañidos\", \"tanteados\", \"tapados\", \"tapizados\", \"taponados\", \"tarareados\", \"tardados\", \"tasados\", \"tatuados\", \"tecleados\", \"tejidos\", \"telefoneados\", \"televisados\", \"temidos\", \"templados\", \"tendidos\", \"tenidos\", \"tensados\", \"tentados\", \"teorizados\", \"terciados\", \"tergiversados\", \"terminados\", \"territorializados\", \"testados\", \"testeados\", \"testificados\", \"testimoniados\", \"tildados\", \"timados\", \"timbrados\", \"tinturados\", \"tipeados\", \"tipificados\", \"tirados\", \"tiranizados\", \"tironeados\", \"tiroteados\", \"titubeados\", \"tiznados\", \"tocados\", \"tolerados\", \"tomados\", \"tonificados\", \"topados\", \"toqueteados\", \"torcidos\", \"toreados\", \"tornados\", \"tornasolados\", \"torneados\", \"torpedeados\", \"torturados\", \"tosidos\", \"tostados\", \"totalizados\", \"trabados\", \"trabajados\", \"traducidos\", \"traficados\", \"tragados\", \"traicionados\", \"traídos\", \"trajinados\", \"tramados\", \"tramitados\", \"trancados\", \"tranquilizados\", \"transcendidos\", \"transcurridos\", \"transferidos\", \"transfigurados\", \"transformados\", \"transfundidos\", \"transgredidos\", \"transigidos\", \"transitados\", \"transliterados\", \"translucidos\", \"transmitidos\", \"transmutados\", \"transparentados\", \"transpirados\", \"transportados\", \"transpuestos\", \"trasegados\", \"trasgredidos\", \"trasladados\", \"traslapados\", \"traslucidos\", \"trasnochados\", \"traspapelados\", \"traspasados\", \"trasplantados\", \"traspuestos\", \"trasquilados\", \"trasteados\", \"trastocados\", \"trastornados\", \"trasvasados\", \"tratados\", \"trazados\", \"trenzados\", \"trepados\", \"tributados\", \"trincados\", \"triplicados\", \"triturados\", \"triunfados\", \"trivializados\", \"trocados\", \"troceados\", \"tronados\", \"tronchados\", \"truncados\", \"tumbados\", \"tuneados\", \"turbados\", \"turnados\", \"tutelados\", \"ufanados\", \"ultimados\", \"uncidos\", \"ungidos\", \"unidos\", \"universalizados\", \"untados\", \"urbanizados\", \"urdidos\", \"usados\", \"usufructuados\", \"usurpados\", \"utilizados\", \"vacados\", \"vaciados\", \"vacilados\", \"vacunados\", \"vagados\", \"validados\", \"validos\", \"valorados\", \"valorizados\", \"valuados\", \"vanagloriados\", \"vandalizados\", \"vaporizados\", \"variados\", \"vaticinados\", \"vedados\", \"vehiculados\", \"vejados\", \"velados\", \"vencidos\", \"vendados\", \"vendidos\", \"venerados\", \"vengados\", \"ventilados\", \"veraneados\", \"verbalizados\", \"verificados\", \"versados\", \"versionados\", \"vertebrados\", \"vertidos\", \"vestidos\", \"vetados\", \"viabilizados\", \"viajados\", \"vibrados\", \"victimados\", \"victimizados\", \"vigilados\", \"vigorizados\", \"vilipendiados\", \"vindicados\", \"violados\", \"violentados\", \"virados\", \"visados\", \"visibilizados\", \"visitados\", \"vislumbrados\", \"vistos\", \"visualizados\", \"vitoreados\", \"vitrificados\", \"vituperados\", \"vividos\", \"vivificados\", \"vocalizados\", \"voceados\", \"vociferados\", \"volados\", \"volatilizados\", \"volcados\", \"volteados\", \"vomitados\", \"votados\", \"vueltos\", \"vulcanizados\", \"vulgarizados\", \"vulnerados\", \"yuxtapuestos\", \"zafados\", \"zambullidos\", \"zampados\", \"zanjados\", \"zarandeados\", \"zarpados\", \"zozobrados\", \"zumbados\", \"zurcidos\", \"zurrados\", \"abajadas\", \"abalanzadas\", \"abaleadas\", \"abandonadas\", \"abaratadas\", \"abarcadas\", \"abarrotadas\", \"abastecidas\", \"abatidas\", \"abdicadas\", \"abiertas\", \"abismadas\", \"abjuradas\", \"ablandadas\", \"abocadas\", \"abochornadas\", \"abofeteadas\", \"abolidas\", \"abolladas\", \"abombadas\", \"abominadas\", \"abonadas\", \"abordadas\", \"aborrecidas\", \"aborregadas\", \"abortadas\", \"abotonadas\", \"abrasadas\", \"abrazadas\", \"abrevadas\", \"abreviadas\", \"abrigadas\", \"abrochadas\", \"abrogadas\", \"abroqueladas\", \"abrumadas\", \"absorbidas\", \"abstenidas\", \"abstraídas\", \"absueltas\", \"abucheadas\", \"abultadas\", \"abundadas\", \"aburguesadas\", \"aburridas\", \"abusadas\", \"acabadas\", \"acalladas\", \"acaloradas\", \"acaparadas\", \"acariciadas\", \"acarreadas\", \"acatadas\", \"acaudilladas\", \"accedidas\", \"accionadas\", \"acechadas\", \"aceitadas\", \"aceleradas\", \"acentuadas\", \"aceptadas\", \"aceradas\", \"acercadas\", \"acertadas\", \"achacadas\", \"achantadas\", \"achatadas\", \"achicadas\", \"acicaladas\", \"acidificadas\", \"aclaradas\", \"aclimatadas\", \"acobardadas\", \"acodadas\", \"acogidas\", \"acojonadas\", \"acometidas\", \"acomodadas\", \"acompañadas\", \"acompasadas\", \"acongojadas\", \"aconsejadas\", \"acontecidas\", \"acopiadas\", \"acopladas\", \"acordadas\", \"acordonadas\", \"acorraladas\", \"acortadas\", \"acosadas\", \"acostadas\", \"acostumbradas\", \"acotadas\", \"acrecentadas\", \"acreditadas\", \"acrisoladas\", \"activadas\", \"actuadas\", \"acuchilladas\", \"acuciadas\", \"acudidas\", \"acuerpadas\", \"acumuladas\", \"acunadas\", \"acuñadas\", \"acurrucadas\", \"acusadas\", \"adaptadas\", \"adecentadas\", \"adelantadas\", \"adelgazadas\", \"adentradas\", \"adeudadas\", \"adheridas\", \"adicionadas\", \"adiestradas\", \"adivinadas\", \"adjetivadas\", \"adjudicadas\", \"adjuntadas\", \"administradas\", \"admiradas\", \"admitidas\", \"adoctrinadas\", \"adolecidas\", \"adoptadas\", \"adoradas\", \"adormecidas\", \"adornadas\", \"adquiridas\", \"aducidas\", \"adueñadas\", \"aduladas\", \"adulteradas\", \"advertidas\", \"afanadas\", \"afeadas\", \"afectadas\", \"afeitadas\", \"aferradas\", \"afianzadas\", \"afinadas\", \"afirmadas\", \"afligidas\", \"afloradas\", \"afrentadas\", \"afrontadas\", \"agachadas\", \"agarradas\", \"agarrotadas\", \"agasajadas\", \"agenciadas\", \"agigantadas\", \"agilizadas\", \"agitadas\", \"aglutinadas\", \"agobiadas\", \"agolpadas\", \"agonizadas\", \"agostadas\", \"agotadas\", \"agradadas\", \"agradecidas\", \"agrandadas\", \"agravadas\", \"agraviadas\", \"agredidas\", \"agregadas\", \"agriadas\", \"agrietadas\", \"agrupadas\", \"aguadas\", \"aguantadas\", \"aguardadas\", \"agudizadas\", \"aguijoneadas\", \"agujereadas\", \"aguzadas\", \"ahogadas\", \"ahondadas\", \"ahorcadas\", \"ahorradas\", \"ahuecadas\", \"ahuyentadas\", \"aireadas\", \"aisladas\", \"ajustadas\", \"ajusticiadas\", \"alabadas\", \"alagadas\", \"alambradas\", \"alardeadas\", \"alargadas\", \"alarmadas\", \"albergadas\", \"alborotadas\", \"alcanzadas\", \"aleccionadas\", \"alegadas\", \"alegradas\", \"alejadas\", \"alentadas\", \"alertadas\", \"alfabetizadas\", \"alfombradas\", \"aliadas\", \"alienadas\", \"aligeradas\", \"alimentadas\", \"aliñadas\", \"alineadas\", \"alisadas\", \"alistadas\", \"aliviadas\", \"alivianadas\", \"allanadas\", \"almacenadas\", \"almorzadas\", \"alojadas\", \"alquiladas\", \"alteradas\", \"alternadas\", \"alucinadas\", \"aludidas\", \"alumbradas\", \"alzadas\", \"amadas\", \"amaestradas\", \"amagadas\", \"amainadas\", \"amalgamadas\", \"amamantadas\", \"amansadas\", \"amargadas\", \"amarradas\", \"amasadas\", \"ambicionadas\", \"amedrentadas\", \"amenazadas\", \"amenizadas\", \"ameritadas\", \"ametralladas\", \"amilanadas\", \"aminoradas\", \"amnistiadas\", \"amoldadas\", \"amonestadas\", \"amontonadas\", \"amordazadas\", \"amortajadas\", \"amortiguadas\", \"amortizadas\", \"amotinadas\", \"amparadas\", \"ampayadas\", \"ampliadas\", \"amplificadas\", \"amputadas\", \"amuebladas\", \"añadidas\", \"analizadas\", \"anatematizadas\", \"andadas\", \"anegadas\", \"anestesiadas\", \"anexadas\", \"anexionadas\", \"anheladas\", \"anidadas\", \"anilladas\", \"animadas\", \"aniquiladas\", \"anisadas\", \"añoradas\", \"anotadas\", \"anoticiadas\", \"ansiadas\", \"antecedidas\", \"antepuestas\", \"anticipadas\", \"antojadas\", \"anudadas\", \"anuladas\", \"anunciadas\", \"apabulladas\", \"apachurradas\", \"apaciguadas\", \"apadrinadas\", \"apagadas\", \"apalancadas\", \"apaleadas\", \"apañadas\", \"apantalladas\", \"aparcadas\", \"apareadas\", \"aparecidas\", \"aparentadas\", \"apartadas\", \"apeadas\", \"apedreadas\", \"apeladas\", \"apellidadas\", \"apelmazadas\", \"apercibidas\", \"apersonadas\", \"apestadas\", \"apetecidas\", \"apiadadas\", \"apiladas\", \"apiñadas\", \"apisonadas\", \"aplacadas\", \"aplanadas\", \"aplastadas\", \"aplaudidas\", \"aplazadas\", \"aplicadas\", \"apoderadas\", \"apoltronadas\", \"aporreadas\", \"aportadas\", \"aposentadas\", \"apostadas\", \"apostatadas\", \"apostilladas\", \"apoyadas\", \"apreciadas\", \"aprehendidas\", \"apremiadas\", \"aprendidas\", \"apresadas\", \"apresuradas\", \"apretadas\", \"apretujadas\", \"aprisionadas\", \"aprobadas\", \"aprovechadas\", \"aprovisionadas\", \"aproximadas\", \"apuñaladas\", \"apuñaleadas\", \"apuntadas\", \"apuntaladas\", \"apuntilladas\", \"apuradas\", \"aquejadas\", \"aquietadas\", \"aquilatadas\", \"arañadas\", \"arbitradas\", \"archivadas\", \"arengadas\", \"argüidas\", \"argumentadas\", \"armadas\", \"armonizadas\", \"aromatizadas\", \"arqueadas\", \"arrancadas\", \"arrasadas\", \"arrastradas\", \"arreadas\", \"arrebatadas\", \"arreciadas\", \"arregladas\", \"arrellanadas\", \"arremangadas\", \"arremetidas\", \"arrendadas\", \"arrepentidas\", \"arrestadas\", \"arriadas\", \"arribadas\", \"arriesgadas\", \"arrimadas\", \"arrinconadas\", \"arrodilladas\", \"arrogadas\", \"arrojadas\", \"arrolladas\", \"arropadas\", \"arruinadas\", \"arrulladas\", \"articuladas\", \"asadas\", \"asaltadas\", \"ascendidas\", \"aseadas\", \"asechadas\", \"asediadas\", \"aseguradas\", \"asemejadas\", \"asentadas\", \"asentidas\", \"aserradas\", \"asesinadas\", \"asesoradas\", \"asestadas\", \"aseveradas\", \"asfixiadas\", \"asidas\", \"asignadas\", \"asiladas\", \"asimiladas\", \"asistidas\", \"asoladas\", \"asoleadas\", \"asomadas\", \"asombradas\", \"aspiradas\", \"astilladas\", \"asumidas\", \"asustadas\", \"atacadas\", \"atadas\", \"atajadas\", \"atarantadas\", \"atascadas\", \"atemorizadas\", \"atemperadas\", \"atenazadas\", \"atendidas\", \"atenidas\", \"atentadas\", \"atenuadas\", \"aterradas\", \"aterrorizadas\", \"atesoradas\", \"atestiguadas\", \"atiborradas\", \"atisbadas\", \"atizadas\", \"atomizadas\", \"atontadas\", \"atoradas\", \"atormentadas\", \"atornilladas\", \"atosigadas\", \"atracadas\", \"atragantadas\", \"atraídas\", \"atrancadas\", \"atrapadas\", \"atrasadas\", \"atravesadas\", \"atrevidas\", \"atribuidas\", \"atrincheradas\", \"atrofiadas\", \"atropelladas\", \"aturdidas\", \"auditadas\", \"auguradas\", \"aumentadas\", \"aunadas\", \"aupadas\", \"auscultadas\", \"ausentadas\", \"autenticadas\", \"autentificadas\", \"autodefinidas\", \"autoeditadas\", \"automatizadas\", \"autorizadas\", \"autorreguladas\", \"auxiliadas\", \"avaladas\", \"avanzadas\", \"avasalladas\", \"avenidas\", \"aventadas\", \"aventajadas\", \"aventuradas\", \"averiadas\", \"averiguadas\", \"avezadas\", \"avisadas\", \"avispadas\", \"avistadas\", \"avivadas\", \"avizoradas\", \"avocadas\", \"ayudadas\", \"azotadas\", \"azuzadas\", \"babeadas\", \"bailadas\", \"bajadas\", \"balaceadas\", \"balanceadas\", \"bañadas\", \"banalizadas\", \"bancadas\", \"bandeadas\", \"barajadas\", \"barridas\", \"basadas\", \"bastardeadas\", \"basureadas\", \"batalladas\", \"bateadas\", \"batidas\", \"bautizadas\", \"beatificadas\", \"bebidas\", \"beneficiadas\", \"besadas\", \"bifurcadas\", \"birladas\", \"blandidas\", \"blanqueadas\", \"blasfemadas\", \"blindadas\", \"bloqueadas\", \"boicoteadas\", \"bombardeadas\", \"bombeadas\", \"bonificadas\", \"bordeadas\", \"borradas\", \"borroneadas\", \"bosquejadas\", \"bostezadas\", \"botadas\", \"boxeadas\", \"bregadas\", \"brilladas\", \"brincadas\", \"brindadas\", \"bromeadas\", \"brotadas\", \"bruñidas\", \"buceadas\", \"burladas\", \"buscadas\", \"cabeceadas\", \"cabidas\", \"cabildeadas\", \"cabreadas\", \"cacareadas\", \"cachadas\", \"cacheadas\", \"cacheteadas\", \"caducadas\", \"cagadas\", \"caladas\", \"calculadas\", \"caldeadas\", \"calefaccionadas\", \"calendarizadas\", \"calentadas\", \"calibradas\", \"calificadas\", \"caligrafiadas\", \"calladas\", \"calmadas\", \"calumniadas\", \"calzadas\", \"cambiadas\", \"caminadas\", \"camufladas\", \"canalizadas\", \"canceladas\", \"canjeadas\", \"cansadas\", \"cantadas\", \"capadas\", \"capeadas\", \"capitalizadas\", \"capituladas\", \"captadas\", \"capturadas\", \"caracterizadas\", \"carburadas\", \"carcomidas\", \"cardadas\", \"careadas\", \"carecidas\", \"cargadas\", \"caricaturizadas\", \"cartografiadas\", \"cascadas\", \"castigadas\", \"castradas\", \"catadas\", \"catalizadas\", \"catalogadas\", \"catapultadas\", \"cateadas\", \"categorizadas\", \"causadas\", \"cauterizadas\", \"cautivadas\", \"cavadas\", \"caviladas\", \"cazadas\", \"cebadas\", \"cedidas\", \"cegadas\", \"cejadas\", \"celebradas\", \"cenadas\", \"ceñidas\", \"censuradas\", \"centrifugadas\", \"centuplicadas\", \"cepilladas\", \"cercadas\", \"cercenadas\", \"cercioradas\", \"cernidas\", \"cerradas\", \"cesadas\", \"chafadas\", \"chamuscadas\", \"chantajeadas\", \"chapadas\", \"charladas\", \"chateadas\", \"chequeadas\", \"chifladas\", \"chilladas\", \"chingadas\", \"chirriadas\", \"chivadas\", \"chocadas\", \"chorreadas\", \"choteadas\", \"chupadas\", \"chutadas\", \"cicatrizadas\", \"cifradas\", \"cimentadas\", \"cinceladas\", \"circuladas\", \"circuncidadas\", \"circundadas\", \"citadas\", \"clamadas\", \"clarificadas\", \"clasificadas\", \"claudicadas\", \"clausuradas\", \"clavadas\", \"clicadas\", \"clonadas\", \"coaccionadas\", \"coadyuvadas\", \"coaguladas\", \"coaligadas\", \"coartadas\", \"cobijadas\", \"cobradas\", \"cocidas\", \"cocinadas\", \"codeadas\", \"codiciadas\", \"codificadas\", \"codirigidas\", \"coexistidas\", \"cofinanciadas\", \"cogidas\", \"cohabitadas\", \"cohibidas\", \"coincididas\", \"colaboradas\", \"colacionadas\", \"coladas\", \"colapsadas\", \"coleccionadas\", \"colectadas\", \"colectivizadas\", \"colgadas\", \"colisionadas\", \"colmadas\", \"colocadas\", \"colonizadas\", \"coloreadas\", \"columpiadas\", \"combatidas\", \"combinadas\", \"comentadas\", \"comenzadas\", \"comerciadas\", \"comercializadas\", \"cometidas\", \"comidas\", \"comisionadas\", \"compactadas\", \"compadecidas\", \"compaginadas\", \"comparadas\", \"comparecidas\", \"compartidas\", \"compatibilizadas\", \"compelidas\", \"compendiadas\", \"compenetradas\", \"compensadas\", \"compiladas\", \"complacidas\", \"complementadas\", \"completadas\", \"complotadas\", \"comportadas\", \"compradas\", \"comprendidas\", \"comprimidas\", \"comprobadas\", \"comprometidas\", \"compuestas\", \"compulsadas\", \"computadas\", \"comulgadas\", \"comunicadas\", \"concatenadas\", \"concebidas\", \"concedidas\", \"concelebradas\", \"concentradas\", \"conceptuadas\", \"conceptualizadas\", \"concertadas\", \"concienciadas\", \"concientizadas\", \"conciliadas\", \"concitadas\", \"concluidas\", \"concordadas\", \"concretadas\", \"concretizadas\", \"conculcadas\", \"concursadas\", \"condenadas\", \"condensadas\", \"condicionadas\", \"condimentadas\", \"condolidas\", \"condonadas\", \"conducidas\", \"conectadas\", \"conexionadas\", \"confabuladas\", \"confeccionadas\", \"conferidas\", \"confesadas\", \"confiadas\", \"configuradas\", \"confirmadas\", \"confiscadas\", \"confluidas\", \"conformadas\", \"confortadas\", \"confrontadas\", \"confundidas\", \"congeniadas\", \"congestionadas\", \"congratuladas\", \"congregadas\", \"conjeturadas\", \"conjugadas\", \"conjuntadas\", \"conjuradas\", \"conllevadas\", \"conmemoradas\", \"conminadas\", \"conmocionadas\", \"conmovidas\", \"conmutadas\", \"connotadas\", \"conquistadas\", \"consagradas\", \"conseguidas\", \"consensuadas\", \"consentidas\", \"conservadas\", \"consideradas\", \"consignadas\", \"consistidas\", \"consoladas\", \"consolidadas\", \"conspiradas\", \"constadas\", \"constatadas\", \"consteladas\", \"constitucionalizadas\", \"constituidas\", \"constreñidas\", \"construidas\", \"consultadas\", \"consumadas\", \"consumidas\", \"contabilizadas\", \"contactadas\", \"contadas\", \"contagiadas\", \"contempladas\", \"contendidas\", \"contenidas\", \"contentadas\", \"contestadas\", \"contextualizadas\", \"continuadas\", \"contorneadas\", \"contraatacadas\", \"contrabandeadas\", \"contradichas\", \"contrahechas\", \"contraídas\", \"contrapesadas\", \"contrapuestas\", \"contrariadas\", \"contrarrestadas\", \"contrastadas\", \"contratadas\", \"contravenidas\", \"contribuidas\", \"contristadas\", \"controladas\", \"convalidadas\", \"convencidas\", \"convenidas\", \"convergidas\", \"conversadas\", \"convertidas\", \"convidadas\", \"convividas\", \"convocadas\", \"convulsionadas\", \"cooperadas\", \"cooptadas\", \"coordinadas\", \"copadas\", \"copiadas\", \"coproducidas\", \"copuladas\", \"coqueteadas\", \"corchadas\", \"coreadas\", \"coreografiadas\", \"corneadas\", \"coronadas\", \"corporizadas\", \"corregidas\", \"correlacionadas\", \"correspondidas\", \"correteadas\", \"corridas\", \"corroboradas\", \"corroídas\", \"corrompidas\", \"cortadas\", \"cortejadas\", \"cosechadas\", \"cosidas\", \"cosificadas\", \"costadas\", \"costeadas\", \"cotejadas\", \"cotizadas\", \"creadas\", \"creídas\", \"criadas\", \"cribadas\", \"criminalizadas\", \"crispadas\", \"cristalizadas\", \"cristianizadas\", \"criticadas\", \"cronometradas\", \"crucificadas\", \"crujidas\", \"cruzadas\", \"cuadriplicadas\", \"cuadruplicadas\", \"cuajadas\", \"cuantificadas\", \"cuarteadas\", \"cubiertas\", \"cuestionadas\", \"cuidadas\", \"culeadas\", \"culminadas\", \"culpabilizadas\", \"culpadas\", \"cultivadas\", \"culturizadas\", \"cumplidas\", \"cumplimentadas\", \"cundidas\", \"curadas\", \"curioseadas\", \"curradas\", \"cursadas\", \"curvadas\", \"custodiadas\", \"dadas\", \"dañadas\", \"danzadas\", \"datadas\", \"dateadas\", \"debatidas\", \"debidas\", \"debilitadas\", \"debitadas\", \"debutadas\", \"decaídas\", \"decantadas\", \"decapitadas\", \"decepcionadas\", \"decididas\", \"declamadas\", \"declaradas\", \"declinadas\", \"decodificadas\", \"decoloradas\", \"decomisadas\", \"decrecidas\", \"decretadas\", \"dedicadas\", \"deducidas\", \"defecadas\", \"defendidas\", \"defenestradas\", \"deferidas\", \"definidas\", \"deformadas\", \"defraudadas\", \"degeneradas\", \"deglutidas\", \"degolladas\", \"degradadas\", \"degustadas\", \"deificadas\", \"dejadas\", \"delatadas\", \"delegadas\", \"deleitadas\", \"deletreadas\", \"deliberadas\", \"delimitadas\", \"delineadas\", \"delinquidas\", \"demandadas\", \"demarcadas\", \"demediadas\", \"demeritadas\", \"democratizadas\", \"demolidas\", \"demonizadas\", \"demoradas\", \"demostradas\", \"demudadas\", \"denegadas\", \"denigradas\", \"denominadas\", \"denostadas\", \"denotadas\", \"denunciadas\", \"deparadas\", \"departidas\", \"dependidas\", \"depiladas\", \"deploradas\", \"deportadas\", \"depositadas\", \"depreciadas\", \"depredadas\", \"deprimidas\", \"depuestas\", \"depuradas\", \"derechizadas\", \"derivadas\", \"derogadas\", \"derramadas\", \"derretidas\", \"derribadas\", \"derrocadas\", \"derrochadas\", \"derrotadas\", \"derruidas\", \"derrumbadas\", \"desabrochadas\", \"desacatadas\", \"desaceleradas\", \"desacomodadas\", \"desaconsejadas\", \"desacopladas\", \"desacralizadas\", \"desacreditadas\", \"desactivadas\", \"desafiadas\", \"desafinadas\", \"desaguadas\", \"desahogadas\", \"desairadas\", \"desajustadas\", \"desalentadas\", \"desalineadas\", \"desalojadas\", \"desandadas\", \"desangradas\", \"desanimadas\", \"desaparecidas\", \"desapegadas\", \"desaprendidas\", \"desaprobadas\", \"desaprovechadas\", \"desarmadas\", \"desarraigadas\", \"desarregladas\", \"desarrolladas\", \"desarticuladas\", \"desaseadas\", \"desasidas\", \"desasosegadas\", \"desatadas\", \"desatendidas\", \"desautorizadas\", \"desayunadas\", \"desbancadas\", \"desbandadas\", \"desbaratadas\", \"desbarrancadas\", \"desbastadas\", \"desbloqueadas\", \"desbocadas\", \"desbordadas\", \"desbrozadas\", \"descabalgadas\", \"descabezadas\", \"descaderadas\", \"descalabradas\", \"descalificadas\", \"descansadas\", \"descargadas\", \"descarriadas\", \"descarriladas\", \"descartadas\", \"descascaradas\", \"descascarilladas\", \"descendidas\", \"descentradas\", \"descifradas\", \"descocidas\", \"descodificadas\", \"descojonadas\", \"descolgadas\", \"descolocadas\", \"descolonizadas\", \"descompensadas\", \"descomprimidas\", \"descompuestas\", \"desconectadas\", \"desconfiadas\", \"descongeladas\", \"desconocidas\", \"descontadas\", \"descontaminadas\", \"descontextualizadas\", \"descontinuadas\", \"desconvocadas\", \"descorazonadas\", \"descorchadas\", \"descorridas\", \"descosidas\", \"descoyuntadas\", \"descreídas\", \"descristianizadas\", \"descuadradas\", \"descuartizadas\", \"descubiertas\", \"descuidadas\", \"desdeñadas\", \"desdibujadas\", \"desdichas\", \"desdobladas\", \"deseadas\", \"desecadas\", \"desechadas\", \"desembarazadas\", \"desembarcadas\", \"desembocadas\", \"desembolsadas\", \"desempacadas\", \"desempañadas\", \"desempaquetadas\", \"desempeñadas\", \"desempolvadas\", \"desenamoradas\", \"desencadenadas\", \"desencajadas\", \"desencarnadas\", \"desenchufadas\", \"desenfocadas\", \"desenfundadas\", \"desenganchadas\", \"desengrasadas\", \"desenmascaradas\", \"desenredadas\", \"desenrolladas\", \"desentendidas\", \"desenterradas\", \"desentonadas\", \"desentrañadas\", \"desenvainadas\", \"desenvueltas\", \"desequilibradas\", \"desertadas\", \"desestabilizadas\", \"desestimadas\", \"desfalcadas\", \"desfallecidas\", \"desfiguradas\", \"desfondadas\", \"desgajadas\", \"desgañitadas\", \"desgarradas\", \"desgastadas\", \"desglosadas\", \"desgobernadas\", \"desgranadas\", \"desguazadas\", \"deshechas\", \"desheredadas\", \"deshidratadas\", \"deshilachadas\", \"deshojadas\", \"deshonradas\", \"deshuesadas\", \"deshumanizadas\", \"designadas\", \"desilusionadas\", \"desincentivadas\", \"desinfectadas\", \"desinfladas\", \"desinflamadas\", \"desinformadas\", \"desinhibidas\", \"desinstaladas\", \"desintegradas\", \"desintoxicadas\", \"desistidas\", \"desjarretadas\", \"deslegitimadas\", \"desleídas\", \"desligadas\", \"deslindadas\", \"deslizadas\", \"deslucidas\", \"deslumbradas\", \"desmadradas\", \"desmalezadas\", \"desmanteladas\", \"desmaquilladas\", \"desmarcadas\", \"desmayadas\", \"desmejoradas\", \"desmembradas\", \"desmentidas\", \"desmenuzadas\", \"desmerecidas\", \"desmigadas\", \"desmitificadas\", \"desmoldadas\", \"desmontadas\", \"desmoralizadas\", \"desmoronadas\", \"desmotivadas\", \"desmovilizadas\", \"desnaturalizadas\", \"desniveladas\", \"desnucadas\", \"desnudadas\", \"desobedecidas\", \"desobligadas\", \"desoídas\", \"desolladas\", \"desorganizadas\", \"desorientadas\", \"despachadas\", \"desparasitadas\", \"desparecidas\", \"desparramadas\", \"despedazadas\", \"despedidas\", \"despegadas\", \"despeinadas\", \"despejadas\", \"despellejadas\", \"despeñadas\", \"despenalizadas\", \"desperdiciadas\", \"despersonalizadas\", \"despertadas\", \"despilfarradas\", \"despintadas\", \"despiojadas\", \"despistadas\", \"desplazadas\", \"desplegadas\", \"desplomadas\", \"desplumadas\", \"despojadas\", \"despolitizadas\", \"desposadas\", \"desposeídas\", \"despotricadas\", \"despreciadas\", \"desprendidas\", \"despreocupadas\", \"desprestigiadas\", \"desprogramadas\", \"despulpadas\", \"despuntadas\", \"desquiciadas\", \"desquitadas\", \"destacadas\", \"destapadas\", \"desteñidas\", \"desterradas\", \"destetadas\", \"destiladas\", \"destituidas\", \"destrabadas\", \"destripadas\", \"destronadas\", \"destrozadas\", \"destruidas\", \"desunidas\", \"desvalijadas\", \"desvalorizadas\", \"desvanecidas\", \"desveladas\", \"desvestidas\", \"desviadas\", \"desvinculadas\", \"desvirtuadas\", \"desvividas\", \"detectadas\", \"detenidas\", \"detentadas\", \"deterioradas\", \"determinadas\", \"detestadas\", \"detonadas\", \"devaluadas\", \"devanadas\", \"devastadas\", \"develadas\", \"devengadas\", \"devenidas\", \"devoradas\", \"devueltas\", \"diagnosticadas\", \"diagramadas\", \"dializadas\", \"dialogadas\", \"dibujadas\", \"dichas\", \"dictadas\", \"dictaminadas\", \"diezmadas\", \"difamadas\", \"diferenciadas\", \"diferidas\", \"dificultadas\", \"difuminadas\", \"difundidas\", \"digeridas\", \"digitadas\", \"dignadas\", \"dignificadas\", \"dilapidadas\", \"dilatadas\", \"diligenciadas\", \"dilucidadas\", \"diluidas\", \"dimensionadas\", \"dimitidas\", \"dinamitadas\", \"dinamizadas\", \"dirimidas\", \"discernidas\", \"disciplinadas\", \"discontinuadas\", \"discrepadas\", \"discriminadas\", \"disculpadas\", \"discurridas\", \"discutidas\", \"diseccionadas\", \"diseminadas\", \"diseñadas\", \"disentidas\", \"disertadas\", \"disfrazadas\", \"disfrutadas\", \"disgregadas\", \"disgustadas\", \"disimuladas\", \"disipadas\", \"dislocadas\", \"disminuidas\", \"disociadas\", \"dispensadas\", \"dispersadas\", \"dispuestas\", \"disputadas\", \"distadas\", \"distanciadas\", \"distendidas\", \"distinguidas\", \"distorsionadas\", \"distraídas\", \"distribuidas\", \"disuadidas\", \"disueltas\", \"divagadas\", \"diversificadas\", \"divertidas\", \"divididas\", \"divinizadas\", \"divisadas\", \"divorciadas\", \"divulgadas\", \"dobladas\", \"doblegadas\", \"doctoradas\", \"documentadas\", \"dogmatizadas\", \"dolidas\", \"domadas\", \"domesticadas\", \"dominadas\", \"donadas\", \"dopadas\", \"dormidas\", \"dosificadas\", \"dotadas\", \"dragadas\", \"dramatizadas\", \"drenadas\", \"drogadas\", \"duchadas\", \"dudadas\", \"dulcificadas\", \"duplicadas\", \"duradas\", \"echadas\", \"eclipsadas\", \"eclosionadas\", \"economizadas\", \"ecualizadas\", \"edificadas\", \"editadas\", \"educadas\", \"efectuadas\", \"ejecutadas\", \"ejemplificadas\", \"ejercidas\", \"ejercitadas\", \"elaboradas\", \"electrizadas\", \"electrocutadas\", \"elevadas\", \"elididas\", \"eliminadas\", \"elogiadas\", \"elucubradas\", \"eludidas\", \"emanadas\", \"emancipadas\", \"embadurnadas\", \"embaladas\", \"embalsamadas\", \"embanderadas\", \"embarcadas\", \"embargadas\", \"embarradas\", \"embarrancadas\", \"embaucadas\", \"embebidas\", \"embelesadas\", \"embellecidas\", \"embestidas\", \"emboladas\", \"embolsadas\", \"emborrachadas\", \"emborronadas\", \"emboscadas\", \"embotadas\", \"embriagadas\", \"embrolladas\", \"embrutecidas\", \"embuchadas\", \"emergidas\", \"emigradas\", \"emitidas\", \"emocionadas\", \"empacadas\", \"empachadas\", \"empadronadas\", \"empaladas\", \"empalmadas\", \"empanadas\", \"empañadas\", \"empantanadas\", \"empapeladas\", \"empaquetadas\", \"emparejadas\", \"empastadas\", \"empatadas\", \"empecinadas\", \"empeñadas\", \"empeoradas\", \"empequeñecidas\", \"emperradas\", \"empezadas\", \"empinadas\", \"emplazadas\", \"empleadas\", \"empobrecidas\", \"empoderadas\", \"empolladas\", \"empolvadas\", \"emponzoñadas\", \"emprendidas\", \"empujadas\", \"empuñadas\", \"emputadas\", \"emuladas\", \"emulsionadas\", \"enajenadas\", \"enaltecidas\", \"enamoradas\", \"enarboladas\", \"enardecidas\", \"encabezadas\", \"encabritadas\", \"encabronadas\", \"encadenadas\", \"encajadas\", \"encajonadas\", \"encalladas\", \"encamadas\", \"encaminadas\", \"encandiladas\", \"encanecidas\", \"encañonadas\", \"encantadas\", \"encaprichadas\", \"encapsuladas\", \"encaradas\", \"encaramadas\", \"encarecidas\", \"encargadas\", \"encariñadas\", \"encarnadas\", \"encarriladas\", \"encartadas\", \"encasilladas\", \"encasquetadas\", \"encasquilladas\", \"encastradas\", \"encausadas\", \"encauzadas\", \"enceguecidas\", \"encendidas\", \"enceradas\", \"encerradas\", \"encharcadas\", \"enchufadas\", \"encimadas\", \"encogidas\", \"encoladas\", \"encolerizadas\", \"encolumnadas\", \"encomendadas\", \"enconadas\", \"encontradas\", \"encordadas\", \"encrespadas\", \"encuadradas\", \"encubiertas\", \"encueradas\", \"encumbradas\", \"enderezadas\", \"endeudadas\", \"endilgadas\", \"endiosadas\", \"endosadas\", \"endulzadas\", \"endurecidas\", \"enemistadas\", \"energizadas\", \"enervadas\", \"enfadadas\", \"enfangadas\", \"enfatizadas\", \"enfermadas\", \"enfiestadas\", \"enfiladas\", \"enflaquecidas\", \"enfocadas\", \"enfrascadas\", \"enfrentadas\", \"enfriadas\", \"enfurecidas\", \"engalanadas\", \"engañadas\", \"enganchadas\", \"engarzadas\", \"engatusadas\", \"engendradas\", \"englobadas\", \"engolosinadas\", \"engordadas\", \"engranadas\", \"engrandecidas\", \"engrasadas\", \"engreídas\", \"engrosadas\", \"engullidas\", \"enharinadas\", \"enhebradas\", \"enjuagadas\", \"enjugadas\", \"enjuiciadas\", \"enlazadas\", \"enlistadas\", \"enlodadas\", \"enloquecidas\", \"enlozadas\", \"enlutadas\", \"enmarañadas\", \"enmascaradas\", \"enmendadas\", \"enmohecidas\", \"enmudecidas\", \"ennegrecidas\", \"ennoblecidas\", \"enorgullecidas\", \"enrarecidas\", \"enredadas\", \"enripiadas\", \"enriquecidas\", \"enrocadas\", \"enrojecidas\", \"enroladas\", \"enrolladas\", \"enroscadas\", \"enrumbadas\", \"ensalzadas\", \"ensambladas\", \"ensañadas\", \"ensanchadas\", \"ensartadas\", \"ensayadas\", \"ensebadas\", \"enseñadas\", \"enseñoreadas\", \"ensilladas\", \"ensoberbecidas\", \"ensogadas\", \"ensombrecidas\", \"ensoñadas\", \"ensordecidas\", \"ensuciadas\", \"entabladas\", \"entalladas\", \"entendidas\", \"enteradas\", \"enternecidas\", \"enterradas\", \"entibiadas\", \"entintadas\", \"entonadas\", \"entorpecidas\", \"entradas\", \"entrampadas\", \"entrañadas\", \"entreabiertas\", \"entrecomilladas\", \"entrecruzadas\", \"entregadas\", \"entrelazadas\", \"entremetidas\", \"entremezcladas\", \"entrenadas\", \"entresacadas\", \"entretejidas\", \"entretenidas\", \"entreveradas\", \"entrevistadas\", \"entristecidas\", \"entrometidas\", \"entronadas\", \"entroncadas\", \"entronizadas\", \"entumecidas\", \"enturbiadas\", \"entusiasmadas\", \"enumeradas\", \"enunciadas\", \"envainadas\", \"envalentonadas\", \"envanecidas\", \"envasadas\", \"envejecidas\", \"envenenadas\", \"envestidas\", \"enviadas\", \"enviciadas\", \"envidiadas\", \"envilecidas\", \"enviudadas\", \"envueltas\", \"enzarzadas\", \"equilibradas\", \"equiparadas\", \"equivocadas\", \"erigidas\", \"erizadas\", \"erogadas\", \"erosionadas\", \"erotizadas\", \"erradicadas\", \"erradas\", \"esbozadas\", \"escabullidas\", \"escaladas\", \"escaldadas\", \"escalfadas\", \"escamadas\", \"escamoteadas\", \"escampadas\", \"escandalizadas\", \"escaneadas\", \"escapadas\", \"escaqueadas\", \"escarbadas\", \"escarchadas\", \"escarmentadas\", \"escarnecidas\", \"escaseadas\", \"escatimadas\", \"escenificadas\", \"escindidas\", \"esclarecidas\", \"esclavizadas\", \"escocidas\", \"escogidas\", \"escolarizadas\", \"escoltadas\", \"escondidas\", \"escoradas\", \"escrachadas\", \"escritas\", \"escrutadas\", \"escuchadas\", \"escudadas\", \"escudriñadas\", \"esculpidas\", \"escupidas\", \"escurridas\", \"esforzadas\", \"esfumadas\", \"esgrimidas\", \"esmeradas\", \"esmeriladas\", \"espabiladas\", \"espaciadas\", \"españolizadas\", \"espantadas\", \"esparcidas\", \"especificadas\", \"especuladas\", \"esperadas\", \"espesadas\", \"espetadas\", \"espiadas\", \"espigadas\", \"espinadas\", \"espiradas\", \"espiritualizadas\", \"espoleadas\", \"espolvoreadas\", \"esponjadas\", \"esponsorizadas\", \"esposadas\", \"esquematizadas\", \"esquiadas\", \"esquiladas\", \"esquilmadas\", \"esquivadas\", \"estabilizadas\", \"establecidas\", \"estacionadas\", \"estafadas\", \"estalladas\", \"estampadas\", \"estancadas\", \"estaqueadas\", \"estatizadas\", \"estatuidas\", \"esterificadas\", \"esterilizadas\", \"estigmatizadas\", \"estilizadas\", \"estimadas\", \"estimuladas\", \"estipuladas\", \"estiradas\", \"estorbadas\", \"estornudadas\", \"estragadas\", \"estranguladas\", \"estrechadas\", \"estrelladas\", \"estremecidas\", \"estrenadas\", \"estresadas\", \"estriadas\", \"estropeadas\", \"estructuradas\", \"estrujadas\", \"estudiadas\", \"eternizadas\", \"etiquetadas\", \"evacuadas\", \"evadidas\", \"evaluadas\", \"evangelizadas\", \"evaporadas\", \"evidenciadas\", \"evisceradas\", \"evitadas\", \"evocadas\", \"evolucionadas\", \"exacerbadas\", \"exageradas\", \"exaltadas\", \"examinadas\", \"exasperadas\", \"excarceladas\", \"excavadas\", \"excedidas\", \"exceptuadas\", \"excitadas\", \"exclamadas\", \"excluidas\", \"excretadas\", \"exculpadas\", \"excusadas\", \"execradas\", \"exhaladas\", \"exhibidas\", \"exhortadas\", \"exhumadas\", \"exigidas\", \"exiladas\", \"eximidas\", \"existidas\", \"exoneradas\", \"exorcizadas\", \"expandidas\", \"expedidas\", \"expedientadas\", \"expelidas\", \"expendidas\", \"experimentadas\", \"expiadas\", \"expiradas\", \"explayadas\", \"explicadas\", \"explicitadas\", \"exploradas\", \"explosionadas\", \"explotadas\", \"expoliadas\", \"exportadas\", \"expresadas\", \"exprimidas\", \"expropiadas\", \"expuestas\", \"expulsadas\", \"expurgadas\", \"extendidas\", \"exteriorizadas\", \"exterminadas\", \"externadas\", \"externalizadas\", \"extinguidas\", \"extirpadas\", \"extorsionadas\", \"extractadas\", \"extraditadas\", \"extraídas\", \"extralimitadas\", \"extrañadas\", \"extrapoladas\", \"extraviadas\", \"extremadas\", \"extruidas\", \"exudadas\", \"eyaculadas\", \"eyectadas\", \"fabricadas\", \"fabuladas\", \"facilitadas\", \"facturadas\", \"facultadas\", \"fagocitadas\", \"fajadas\", \"falladas\", \"fallecidas\", \"falsadas\", \"falseadas\", \"falsificadas\", \"familiarizadas\", \"fantaseadas\", \"fascinadas\", \"fastidiadas\", \"fatigadas\", \"favorecidas\", \"fecundadas\", \"felicitadas\", \"feminizadas\", \"fenecidas\", \"fermentadas\", \"fertilizadas\", \"festejadas\", \"fiadas\", \"fichadas\", \"fidelizadas\", \"figuradas\", \"fijadas\", \"filmadas\", \"filosofadas\", \"filtradas\", \"finalizadas\", \"financiadas\", \"fincadas\", \"fingidas\", \"finiquitadas\", \"firmadas\", \"fiscalizadas\", \"fisuradas\", \"flageladas\", \"flameadas\", \"flanqueadas\", \"flaqueadas\", \"fletadas\", \"flexibilizadas\", \"flexionadas\", \"flipadas\", \"floreadas\", \"florecidas\", \"flotadas\", \"fluctuadas\", \"focalizadas\", \"fogueadas\", \"foliadas\", \"folladas\", \"fomentadas\", \"fondeadas\", \"forcejeadas\", \"forestadas\", \"forjadas\", \"formadas\", \"formalizadas\", \"formateadas\", \"formuladas\", \"fornicadas\", \"forradas\", \"fortalecidas\", \"forzadas\", \"fotocopiadas\", \"fotografiadas\", \"fracasadas\", \"fraccionadas\", \"fracturadas\", \"fragmentadas\", \"fraguadas\", \"franqueadas\", \"frecuentadas\", \"fregadas\", \"frenadas\", \"fresadas\", \"friccionadas\", \"frotadas\", \"fructificadas\", \"fruncidas\", \"fugadas\", \"fulminadas\", \"fumadas\", \"fumigadas\", \"funcionadas\", \"fundadas\", \"fundamentadas\", \"fundidas\", \"fungidas\", \"fusiladas\", \"fusionadas\", \"fustigadas\", \"gafadas\", \"ganadas\", \"gangrenadas\", \"garabateadas\", \"garantidas\", \"garantizadas\", \"garridas\", \"gaseadas\", \"gastadas\", \"gemidas\", \"generadas\", \"generalizadas\", \"gerenciadas\", \"germinadas\", \"gestadas\", \"gestionadas\", \"giradas\", \"glorificadas\", \"glosadas\", \"gobernadas\", \"goleadas\", \"golpeadas\", \"gozadas\", \"grabadas\", \"graduadas\", \"graficadas\", \"granjeadas\", \"grapadas\", \"gratificadas\", \"gravadas\", \"gravitadas\", \"gritadas\", \"gruñidas\", \"guardadas\", \"guarecidas\", \"guarnecidas\", \"guerreadas\", \"guiadas\", \"guillotinadas\", \"guiñadas\", \"guindadas\", \"guisadas\", \"gustadas\", \"habilitadas\", \"habitadas\", \"habituadas\", \"habladas\", \"haladas\", \"halagadas\", \"halladas\", \"hartadas\", \"hechizadas\", \"hechas\", \"helenizadas\", \"henchidas\", \"hendidas\", \"heredadas\", \"heridas\", \"hermanadas\", \"herradas\", \"hervidas\", \"hibernadas\", \"hibridadas\", \"hidratadas\", \"higienizadas\", \"hiladas\", \"hilvanadas\", \"hincadas\", \"hinchadas\", \"hipnotizadas\", \"hipotecadas\", \"historiadas\", \"hojeadas\", \"holgadas\", \"holladas\", \"homenajeadas\", \"homogeneizadas\", \"homologadas\", \"honradas\", \"horadadas\", \"horneadas\", \"horrorizadas\", \"hospedadas\", \"hostigadas\", \"hostilizadas\", \"huidas\", \"humanadas\", \"humanizadas\", \"humectadas\", \"humedecidas\", \"humilladas\", \"hundidas\", \"hurgadas\", \"hurtadas\", \"ideadas\", \"idealizadas\", \"identificadas\", \"ideologizadas\", \"idiotizadas\", \"idolatradas\", \"ignoradas\", \"igualadas\", \"ilegalizadas\", \"iluminadas\", \"ilusionadas\", \"ilustradas\", \"imaginadas\", \"imbricadas\", \"imitadas\", \"impactadas\", \"impartidas\", \"impedidas\", \"impelidas\", \"imperadas\", \"impermeabilizadas\", \"implantadas\", \"implementadas\", \"implicadas\", \"imploradas\", \"importadas\", \"importunadas\", \"imposibilitadas\", \"impresionadas\", \"improvisadas\", \"impuestas\", \"impugnadas\", \"impulsadas\", \"imputadas\", \"inauguradas\", \"incautadas\", \"incendiadas\", \"incentivadas\", \"incineradas\", \"incitadas\", \"inclinadas\", \"incluidas\", \"incoadas\", \"incomodadas\", \"incorporadas\", \"incrementadas\", \"increpadas\", \"incriminadas\", \"incubadas\", \"inculcadas\", \"inculpadas\", \"incumplidas\", \"incurridas\", \"incursionadas\", \"indagadas\", \"indemnizadas\", \"independizadas\", \"indexadas\", \"indicadas\", \"indigestadas\", \"indignadas\", \"indispuestas\", \"individuadas\", \"inducidas\", \"indultadas\", \"inervadas\", \"infamadas\", \"infartadas\", \"infectadas\", \"inferidas\", \"inficionadas\", \"infiltradas\", \"infladas\", \"inflamadas\", \"infligidas\", \"influenciadas\", \"influidas\", \"informadas\", \"infravaloradas\", \"infringidas\", \"infundidas\", \"ingeniadas\", \"ingeridas\", \"ingresadas\", \"inhabilitadas\", \"inhaladas\", \"inhibidas\", \"inhumadas\", \"iniciadas\", \"inicializadas\", \"injertadas\", \"injuriadas\", \"inmigradas\", \"inmiscuidas\", \"inmoladas\", \"inmortalizadas\", \"inmovilizadas\", \"inmunizadas\", \"innovadas\", \"inoculadas\", \"inquietadas\", \"inquiridas\", \"insensibilizadas\", \"insertadas\", \"insinuadas\", \"insistidas\", \"inspeccionadas\", \"inspiradas\", \"instadas\", \"instaladas\", \"instauradas\", \"instigadas\", \"instituidas\", \"instruidas\", \"instrumentadas\", \"instrumentalizadas\", \"insufladas\", \"insultadas\", \"insumidas\", \"integradas\", \"intelectualizadas\", \"intensificadas\", \"intentadas\", \"interactuadas\", \"intercaladas\", \"intercambiadas\", \"intercedidas\", \"interceptadas\", \"interesadas\", \"interferidas\", \"interiorizadas\", \"intermediadas\", \"internacionalizadas\", \"internalizadas\", \"interpeladas\", \"interpoladas\", \"interpretadas\", \"interpuestas\", \"interrogadas\", \"interrumpidas\", \"intervenidas\", \"intimadas\", \"intimidadas\", \"intituladas\", \"intoxicadas\", \"intrigadas\", \"introducidas\", \"intuidas\", \"inundadas\", \"inutilizadas\", \"invadidas\", \"invalidadas\", \"inventadas\", \"inventariadas\", \"invertidas\", \"investidas\", \"investigadas\", \"invitadas\", \"invocadas\", \"involucionadas\", \"inyectadas\", \"ionizadas\", \"ironizadas\", \"irradiadas\", \"irrespetadas\", \"irrigadas\", \"irritadas\", \"irrogadas\", \"irrumpidas\", \"jactadas\", \"jaladas\", \"jaleadas\", \"jalonadas\", \"jaqueadas\", \"jerarquizadas\", \"jodidas\", \"jorobadas\", \"jubiladas\", \"jugadas\", \"juntadas\", \"juradas\", \"juramentadas\", \"justificadas\", \"juzgadas\", \"laboradas\", \"labradas\", \"laburadas\", \"lacadas\", \"laceradas\", \"lactadas\", \"ladeadas\", \"ladradas\", \"lamentadas\", \"lamidas\", \"laminadas\", \"languidecidas\", \"lanzadas\", \"lapidadas\", \"laqueadas\", \"largadas\", \"lastimadas\", \"lastradas\", \"latidas\", \"laudadas\", \"lavadas\", \"legalizadas\", \"legisladas\", \"legitimadas\", \"leídas\", \"lesionadas\", \"leudadas\", \"levantadas\", \"liadas\", \"liberadas\", \"liberalizadas\", \"libertadas\", \"libradas\", \"licitadas\", \"licuadas\", \"liderizadas\", \"lidiadas\", \"ligadas\", \"lijadas\", \"limadas\", \"limitadas\", \"limpiadas\", \"linchadas\", \"liquidadas\", \"litigadas\", \"llagadas\", \"llamadas\", \"llegadas\", \"llenadas\", \"llevadas\", \"lloradas\", \"localizadas\", \"logradas\", \"lubricadas\", \"luchadas\", \"lucidas\", \"lucradas\", \"lustradas\", \"maceradas\", \"machacadas\", \"macheteadas\", \"machucadas\", \"madreadas\", \"madrugadas\", \"maduradas\", \"magnetizadas\", \"magnificadas\", \"malacostumbradas\", \"malbaratadas\", \"malcriadas\", \"maleadas\", \"malentendidas\", \"malgastadas\", \"malinterpretadas\", \"malogradas\", \"maltratadas\", \"malversadas\", \"mamadas\", \"manchadas\", \"mancilladas\", \"mandadas\", \"manejadas\", \"mangadas\", \"mangoneadas\", \"manifestadas\", \"maniobradas\", \"manipuladas\", \"manoseadas\", \"manteadas\", \"mantenidas\", \"manufacturadas\", \"maquilladas\", \"maquinadas\", \"maravilladas\", \"marcadas\", \"marchitadas\", \"mareadas\", \"marginadas\", \"maridadas\", \"martilladas\", \"martirizadas\", \"masacradas\", \"masajeadas\", \"mascadas\", \"masificadas\", \"masticadas\", \"masturbadas\", \"matadas\", \"materializadas\", \"matizadas\", \"matriculadas\", \"maximizadas\", \"meadas\", \"mecanografiadas\", \"mechadas\", \"mecidas\", \"mediadas\", \"mediatizadas\", \"medicadas\", \"medidas\", \"meditadas\", \"medradas\", \"mejoradas\", \"melladas\", \"memorizadas\", \"mencionadas\", \"meneadas\", \"menguadas\", \"menoscabadas\", \"menospreciadas\", \"menstruadas\", \"mensualizadas\", \"mensuradas\", \"mentadas\", \"mentalizadas\", \"mentidas\", \"mercadeadas\", \"mercantilizadas\", \"merecidas\", \"merendadas\", \"mermadas\", \"merodeadas\", \"mesuradas\", \"metamorfoseadas\", \"metidas\", \"mezcladas\", \"migradas\", \"militadas\", \"militarizadas\", \"mimadas\", \"mimetizadas\", \"minadas\", \"minimizadas\", \"ministradas\", \"minusvaloradas\", \"miradas\", \"mistificadas\", \"mitificadas\", \"mitigadas\", \"modeladas\", \"modernizadas\", \"modificadas\", \"moduladas\", \"mofadas\", \"mojadas\", \"moldeadas\", \"molestadas\", \"molidas\", \"monetizadas\", \"monitorizadas\", \"monopolizadas\", \"montadas\", \"moradas\", \"moralizadas\", \"mordidas\", \"mordisqueadas\", \"mortificadas\", \"mosqueadas\", \"mostradas\", \"motejadas\", \"motivadas\", \"movidas\", \"movilizadas\", \"mudadas\", \"muestreadas\", \"multadas\", \"multiplicadas\", \"munidas\", \"murmuradas\", \"mutadas\", \"mutiladas\", \"nacionalizadas\", \"narcotizadas\", \"narradas\", \"naufragadas\", \"navegadas\", \"necesitadas\", \"negadas\", \"negociadas\", \"neutralizadas\", \"ninguneadas\", \"niveladas\", \"nombradas\", \"nominadas\", \"noqueadas\", \"normadas\", \"normalizadas\", \"notadas\", \"notificadas\", \"nutridas\", \"obcecadas\", \"obedecidas\", \"objetadas\", \"objetivadas\", \"obligadas\", \"obliteradas\", \"obnubiladas\", \"obradas\", \"obsequiadas\", \"observadas\", \"obsesionadas\", \"obstaculizadas\", \"obstruidas\", \"obtenidas\", \"obturadas\", \"obviadas\", \"ocasionadas\", \"ocluidas\", \"ocultadas\", \"ocupadas\", \"odiadas\", \"ofendidas\", \"ofertadas\", \"oficiadas\", \"oficializadas\", \"ofrecidas\", \"ofrendadas\", \"ofuscadas\", \"oídas\", \"ojeadas\", \"olfateadas\", \"olidas\", \"olvidadas\", \"omitidas\", \"ondeadas\", \"onduladas\", \"opacadas\", \"operadas\", \"opinadas\", \"oprimidas\", \"optadas\", \"optimizadas\", \"opuestas\", \"oradas\", \"orbitadas\", \"ordenadas\", \"ordeñadas\", \"organizadas\", \"orientadas\", \"originadas\", \"orilladas\", \"orinadas\", \"ornadas\", \"ornamentadas\", \"orquestadas\", \"osadas\", \"osciladas\", \"oscurecidas\", \"osificadas\", \"ostentadas\", \"otorgadas\", \"ovacionadas\", \"ovuladas\", \"oxidadas\", \"oxigenadas\", \"pacificadas\", \"pactadas\", \"padecidas\", \"paganizadas\", \"paginadas\", \"paladeadas\", \"paliadas\", \"palpadas\", \"paradas\", \"parafraseadas\", \"paralizadas\", \"parapetadas\", \"parasitadas\", \"parceladas\", \"parchadas\", \"parcheadas\", \"pareadas\", \"paridas\", \"parodiadas\", \"parqueadas\", \"participadas\", \"particularizadas\", \"partidas\", \"pasadas\", \"paseadas\", \"pastoreadas\", \"pataleadas\", \"pateadas\", \"patentadas\", \"patentizadas\", \"patinadas\", \"patrulladas\", \"pecadas\", \"pedaleadas\", \"pedidas\", \"pegadas\", \"peinadas\", \"pellizcadas\", \"penalizadas\", \"penetradas\", \"pensadas\", \"percatadas\", \"percibidas\", \"percutidas\", \"perdidas\", \"perdonadas\", \"perduradas\", \"perecidas\", \"peregrinadas\", \"perfeccionadas\", \"perfiladas\", \"perforadas\", \"perfumadas\", \"pergeñadas\", \"peritadas\", \"perjudicadas\", \"perjuradas\", \"permeadas\", \"permitidas\", \"permutadas\", \"pernoctadas\", \"perpetradas\", \"perpetuadas\", \"perseguidas\", \"perseveradas\", \"persistidas\", \"personadas\", \"personalizadas\", \"personificadas\", \"persuadidas\", \"pertenecidas\", \"pertrechadas\", \"perturbadas\", \"pervertidas\", \"pervividas\", \"pescadas\", \"petadas\", \"peticionadas\", \"picadas\", \"picaneadas\", \"picoteadas\", \"pifiadas\", \"pignoradas\", \"pilladas\", \"pilotadas\", \"piloteadas\", \"pinceladas\", \"pinchadas\", \"pintadas\", \"pintarrajeadas\", \"pinzadas\", \"piradas\", \"pirateadas\", \"pisadas\", \"pisoteadas\", \"pitadas\", \"placidas\", \"plagiadas\", \"planchadas\", \"planeadas\", \"plantadas\", \"planteadas\", \"plasmadas\", \"platicadas\", \"plegadas\", \"pluralizadas\", \"podadas\", \"poetizadas\", \"polemizadas\", \"politizadas\", \"pololeadas\", \"ponderadas\", \"pontificadas\", \"popularizadas\", \"porfiadas\", \"portadas\", \"porteadas\", \"posadas\", \"posesionadas\", \"posibilitadas\", \"posicionadas\", \"pospuestas\", \"posteadas\", \"postergadas\", \"postradas\", \"postuladas\", \"potenciadas\", \"practicadas\", \"precarizadas\", \"precedidas\", \"preceptuadas\", \"precintadas\", \"precipitadas\", \"precisadas\", \"preconizadas\", \"predicadas\", \"predichas\", \"predispuestas\", \"predominadas\", \"preferidas\", \"prefiguradas\", \"pregonadas\", \"preguntadas\", \"prejuzgadas\", \"premiadas\", \"prendadas\", \"prendidas\", \"preocupadas\", \"preparadas\", \"presagiadas\", \"prescindidas\", \"presenciadas\", \"presentadas\", \"presentidas\", \"preservadas\", \"presididas\", \"presionadas\", \"prestadas\", \"prestigiadas\", \"presumidas\", \"presurizadas\", \"pretendidas\", \"preteridas\", \"prevalecidas\", \"prevalidas\", \"prevaricadas\", \"prevenidas\", \"previstas\", \"primadas\", \"principiadas\", \"pringadas\", \"priorizadas\", \"privatizadas\", \"probadas\", \"problematizadas\", \"procedidas\", \"procesadas\", \"proclamadas\", \"procreadas\", \"procuradas\", \"prodigadas\", \"producidas\", \"profanadas\", \"proferidas\", \"profesadas\", \"profesionalizadas\", \"profetizadas\", \"profundizadas\", \"programadas\", \"progresadas\", \"prohibidas\", \"prohijadas\", \"proletarizadas\", \"proliferadas\", \"prologadas\", \"prolongadas\", \"promediadas\", \"prometidas\", \"promocionadas\", \"promovidas\", \"promulgadas\", \"pronosticadas\", \"pronunciadas\", \"propagadas\", \"propaladas\", \"propendidas\", \"propiciadas\", \"propinadas\", \"proporcionadas\", \"propuestas\", \"propugnadas\", \"propulsadas\", \"prorrateadas\", \"prorrogadas\", \"proseguidas\", \"prosperadas\", \"prostituidas\", \"protegidas\", \"protestadas\", \"protocolizadas\", \"provenidas\", \"provocadas\", \"proyectadas\", \"psicoanalizadas\", \"publicadas\", \"publicitadas\", \"puestas\", \"pugnadas\", \"pujadas\", \"pulidas\", \"pulsadas\", \"pululadas\", \"pulverizadas\", \"punadas\", \"punteadas\", \"puntuadas\", \"puntualizadas\", \"punzadas\", \"purgadas\", \"purificadas\", \"puteadas\", \"quebradas\", \"quebrantadas\", \"quejadas\", \"quemadas\", \"querelladas\", \"queridas\", \"quintuplicadas\", \"quitadas\", \"racionadas\", \"racionalizadas\", \"radiadas\", \"radicadas\", \"radicalizadas\", \"raídas\", \"rajadas\", \"ralentizadas\", \"rapadas\", \"rapeadas\", \"raptadas\", \"rascadas\", \"rasgadas\", \"rasguñadas\", \"raspadas\", \"rastreadas\", \"rasuradas\", \"ratificadas\", \"rayadas\", \"razonadas\", \"reabiertas\", \"reabsorbidas\", \"reaccionadas\", \"reactivadas\", \"readaptadas\", \"readmitidas\", \"reafirmadas\", \"reagrupadas\", \"reajustadas\", \"realimentadas\", \"realizadas\", \"realzadas\", \"reanimadas\", \"reanudadas\", \"reaparecidas\", \"rearmadas\", \"reasumidas\", \"reavivadas\", \"rebajadas\", \"rebalsadas\", \"rebanadas\", \"rebasadas\", \"rebatidas\", \"rebautizadas\", \"rebeladas\", \"reblandecidas\", \"rebobinadas\", \"rebosadas\", \"rebotadas\", \"rebozadas\", \"rebuscadas\", \"recabadas\", \"recaídas\", \"recaladas\", \"recalcadas\", \"recalentadas\", \"recalificadas\", \"recapacitadas\", \"recapituladas\", \"recargadas\", \"recatadas\", \"recaudadas\", \"receptadas\", \"recetadas\", \"rechazadas\", \"recibidas\", \"recicladas\", \"recitadas\", \"reclamadas\", \"reclinadas\", \"reclutadas\", \"recobradas\", \"recocidas\", \"recogidas\", \"recolectadas\", \"recomendadas\", \"recomenzadas\", \"recompensadas\", \"recompuestas\", \"reconcentradas\", \"reconciliadas\", \"reconducidas\", \"reconfortadas\", \"reconocidas\", \"reconquistadas\", \"reconsideradas\", \"reconstituidas\", \"reconstruidas\", \"reconvenidas\", \"reconvertidas\", \"recopiladas\", \"recordadas\", \"recorridas\", \"recortadas\", \"recreadas\", \"recriminadas\", \"recrudecidas\", \"rectificadas\", \"recubiertas\", \"reculadas\", \"recuperadas\", \"recurridas\", \"recusadas\", \"redactadas\", \"redefinidas\", \"redescubiertas\", \"redimensionadas\", \"redimidas\", \"rediseñadas\", \"redistribuidas\", \"redituadas\", \"redobladas\", \"redondeadas\", \"reducidas\", \"redundadas\", \"reedificadas\", \"reeditadas\", \"reeducadas\", \"reelaboradas\", \"reembolsadas\", \"reemplazadas\", \"reencarnadas\", \"reencauchadas\", \"reencontradas\", \"reenganchadas\", \"reenviadas\", \"reescritas\", \"reestructuradas\", \"reexaminadas\", \"refaccionadas\", \"referidas\", \"refinadas\", \"refinanciadas\", \"reflejadas\", \"reflexionadas\", \"reflotadas\", \"reforestadas\", \"reformadas\", \"reforzadas\", \"refractadas\", \"refrenadas\", \"refrendadas\", \"refrescadas\", \"refrigeradas\", \"refundidas\", \"refutadas\", \"regadas\", \"regaladas\", \"regañadas\", \"regateadas\", \"regeneradas\", \"regentadas\", \"regenteadas\", \"regidas\", \"regionalizadas\", \"registradas\", \"regladas\", \"reglamentadas\", \"regocijadas\", \"regodeadas\", \"regresadas\", \"reguladas\", \"regularizadas\", \"regurgitadas\", \"rehabilitadas\", \"rehechas\", \"rehogadas\", \"rehuidas\", \"rehusadas\", \"reídas\", \"reinadas\", \"reincididas\", \"reincorporadas\", \"reingresadas\", \"reiniciadas\", \"reinsertadas\", \"reinstaladas\", \"reinstauradas\", \"reintegradas\", \"reinventadas\", \"reinvertidas\", \"reiteradas\", \"reivindicadas\", \"rejuvenecidas\", \"relajadas\", \"relamidas\", \"relanzadas\", \"relatadas\", \"relativizadas\", \"relegadas\", \"releídas\", \"relevadas\", \"religadas\", \"rellenadas\", \"remachadas\", \"remadas\", \"remangadas\", \"remarcadas\", \"rematadas\", \"remecidas\", \"remediadas\", \"rememoradas\", \"remendadas\", \"remitidas\", \"remodeladas\", \"remojadas\", \"remolcadas\", \"remontadas\", \"removidas\", \"remplazadas\", \"renacidas\", \"rendidas\", \"renegadas\", \"renegociadas\", \"reñidas\", \"renombradas\", \"renovadas\", \"rentabilizadas\", \"rentadas\", \"renunciadas\", \"reordenadas\", \"reorganizadas\", \"reorientadas\", \"reparadas\", \"repartidas\", \"repasadas\", \"repatriadas\", \"repelidas\", \"repensadas\", \"repercutidas\", \"repescadas\", \"repetidas\", \"repicadas\", \"repintadas\", \"replanteadas\", \"replegadas\", \"replicadas\", \"repobladas\", \"reportadas\", \"reporteadas\", \"reposadas\", \"repreguntadas\", \"reprendidas\", \"represadas\", \"representadas\", \"reprimidas\", \"reprobadas\", \"reprochadas\", \"reproducidas\", \"repudiadas\", \"repuestas\", \"repugnadas\", \"repuntadas\", \"reputadas\", \"requeridas\", \"requisadas\", \"resaltadas\", \"resarcidas\", \"resbaladas\", \"rescatadas\", \"rescindidas\", \"resecadas\", \"reseñadas\", \"reservadas\", \"reseteadas\", \"resguardadas\", \"resididas\", \"resignadas\", \"resistidas\", \"resonadas\", \"respaldadas\", \"respetadas\", \"respiradas\", \"resplandecidas\", \"respondidas\", \"responsabilizadas\", \"resquebrajadas\", \"restablecidas\", \"restadas\", \"restauradas\", \"restituidas\", \"restregadas\", \"resucitadas\", \"resueltas\", \"resumidas\", \"resurgidas\", \"retadas\", \"retardadas\", \"retenidas\", \"retiradas\", \"retocadas\", \"retomadas\", \"retorcidas\", \"retornadas\", \"retractadas\", \"retraídas\", \"retransmitidas\", \"retrasadas\", \"retratadas\", \"retribuidas\", \"retrotraídas\", \"retumbadas\", \"reunidas\", \"reunificadas\", \"reutilizadas\", \"revalidadas\", \"revalorizadas\", \"revaluadas\", \"reveladas\", \"revendidas\", \"reventadas\", \"reverdecidas\", \"reverenciadas\", \"revertidas\", \"revestidas\", \"reviradas\", \"revisadas\", \"revitalizadas\", \"revividas\", \"revocadas\", \"revolcadas\", \"revoloteadas\", \"revolucionadas\", \"revueltas\", \"ridiculizadas\", \"rifadas\", \"rimadas\", \"rivalizadas\", \"rizadas\", \"robadas\", \"robustecidas\", \"rociadas\", \"rodadas\", \"rodeadas\", \"rogadas\", \"roídas\", \"rondadas\", \"rotadas\", \"rotas\", \"rotuladas\", \"roturadas\", \"rozadas\", \"ruborizadas\", \"rubricadas\", \"rugidas\", \"rumiadas\", \"rumoradas\", \"sabidas\", \"saboreadas\", \"saboteadas\", \"sacadas\", \"saciadas\", \"sacralizadas\", \"sacrificadas\", \"sacudidas\", \"saldadas\", \"salpimentadas\", \"salpullidas\", \"saltadas\", \"salteadas\", \"saludadas\", \"salvadas\", \"salvaguardadas\", \"sanadas\", \"saneadas\", \"sangradas\", \"santificadas\", \"saqueadas\", \"satanizadas\", \"satirizadas\", \"satisfechas\", \"sazonadas\", \"secadas\", \"seccionadas\", \"secretadas\", \"secuenciadas\", \"secuestradas\", \"secundadas\", \"sedimentadas\", \"seducidas\", \"segadas\", \"segmentadas\", \"segregadas\", \"seguidas\", \"seleccionadas\", \"sembradas\", \"señaladas\", \"sensibilizadas\", \"sentadas\", \"sentenciadas\", \"sentidas\", \"separadas\", \"serenadas\", \"serradas\", \"servidas\", \"significadas\", \"silenciadas\", \"simbolizadas\", \"simpatizadas\", \"simplificadas\", \"simuladas\", \"sinceradas\", \"sincronizadas\", \"sindicadas\", \"sindicalizadas\", \"singularizadas\", \"sintetizadas\", \"sintonizadas\", \"sistematizadas\", \"situadas\", \"sobadas\", \"sobornadas\", \"sobradas\", \"sobrecargadas\", \"sobrecogidas\", \"sobreentendidas\", \"sobreestimadas\", \"sobrellevadas\", \"sobrentendidas\", \"sobrepasadas\", \"sobrepuestas\", \"sobresalidas\", \"sobresaltadas\", \"sobrestimadas\", \"sobrevenidas\", \"sobrevividas\", \"sobrevoladas\", \"socavadas\", \"socializadas\", \"socorridas\", \"sodomizadas\", \"sofocadas\", \"sojuzgadas\", \"solapadas\", \"solicitadas\", \"solidarizadas\", \"solidificadas\", \"soliviantadas\", \"soltadas\", \"solucionadas\", \"solventadas\", \"sombreadas\", \"sometidas\", \"sonadas\", \"soñadas\", \"sondeadas\", \"sonreídas\", \"sonrojadas\", \"sopesadas\", \"sopladas\", \"soportadas\", \"sorbidas\", \"sorprendidas\", \"sorteadas\", \"sosegadas\", \"soslayadas\", \"sospechadas\", \"sostenidas\", \"suavizadas\", \"subastadas\", \"subcontratadas\", \"subdivididas\", \"subestimadas\", \"subidas\", \"sublevadas\", \"sublimadas\", \"subrayadas\", \"subrogadas\", \"subsanadas\", \"subsidiadas\", \"subsistidas\", \"substraídas\", \"subsumidas\", \"subvertidas\", \"subyugadas\", \"succionadas\", \"sucedidas\", \"sucumbidas\", \"sudadas\", \"sufragadas\", \"sufridas\", \"sugeridas\", \"sugestionadas\", \"suicidadas\", \"sujetadas\", \"sumadas\", \"sumergidas\", \"suministradas\", \"supeditadas\", \"superadas\", \"superpuestas\", \"supervisadas\", \"suplantadas\", \"suplicadas\", \"suplidas\", \"suprimidas\", \"supuestas\", \"surcadas\", \"surtidas\", \"suscitadas\", \"suspendidas\", \"suspiradas\", \"sustanciadas\", \"sustantivadas\", \"sustentadas\", \"sustituidas\", \"sustraídas\", \"susurradas\", \"suturadas\", \"tabuladas\", \"tachadas\", \"taladas\", \"taladradas\", \"talladas\", \"tambaleadas\", \"tamizadas\", \"tañidas\", \"tanteadas\", \"tapadas\", \"tapizadas\", \"taponadas\", \"tarareadas\", \"tardadas\", \"tasadas\", \"tatuadas\", \"tecleadas\", \"tejidas\", \"telefoneadas\", \"televisadas\", \"temidas\", \"templadas\", \"tendidas\", \"tenidas\", \"tensadas\", \"tentadas\", \"teorizadas\", \"terciadas\", \"tergiversadas\", \"terminadas\", \"territorializadas\", \"testadas\", \"testeadas\", \"testificadas\", \"testimoniadas\", \"tildadas\", \"timadas\", \"timbradas\", \"tinturadas\", \"tipeadas\", \"tipificadas\", \"tiradas\", \"tiranizadas\", \"tironeadas\", \"tiroteadas\", \"titubeadas\", \"tiznadas\", \"tocadas\", \"toleradas\", \"tomadas\", \"tonificadas\", \"topadas\", \"toqueteadas\", \"torcidas\", \"toreadas\", \"tornadas\", \"tornasoladas\", \"torneadas\", \"torpedeadas\", \"torturadas\", \"tosidas\", \"tostadas\", \"totalizadas\", \"trabadas\", \"trabajadas\", \"traducidas\", \"traficadas\", \"tragadas\", \"traicionadas\", \"traídas\", \"trajinadas\", \"tramadas\", \"tramitadas\", \"trancadas\", \"tranquilizadas\", \"transcendidas\", \"transcurridas\", \"transferidas\", \"transfiguradas\", \"transformadas\", \"transfundidas\", \"transgredidas\", \"transigidas\", \"transitadas\", \"transliteradas\", \"translucidas\", \"transmitidas\", \"transmutadas\", \"transparentadas\", \"transpiradas\", \"transportadas\", \"transpuestas\", \"trasegadas\", \"trasgredidas\", \"trasladadas\", \"traslapadas\", \"traslucidas\", \"trasnochadas\", \"traspapeladas\", \"traspasadas\", \"trasplantadas\", \"traspuestas\", \"trasquiladas\", \"trasteadas\", \"trastocadas\", \"trastornadas\", \"trasvasadas\", \"tratadas\", \"trazadas\", \"trenzadas\", \"trepadas\", \"tributadas\", \"trincadas\", \"triplicadas\", \"trituradas\", \"triunfadas\", \"trivializadas\", \"trocadas\", \"troceadas\", \"tronadas\", \"tronchadas\", \"truncadas\", \"tumbadas\", \"tuneadas\", \"turbadas\", \"turnadas\", \"tuteladas\", \"ufanadas\", \"ultimadas\", \"uncidas\", \"ungidas\", \"unidas\", \"universalizadas\", \"untadas\", \"urbanizadas\", \"urdidas\", \"usadas\", \"usufructuadas\", \"usurpadas\", \"utilizadas\", \"vacadas\", \"vaciadas\", \"vaciladas\", \"vacunadas\", \"vagadas\", \"validadas\", \"validas\", \"valoradas\", \"valorizadas\", \"valuadas\", \"vanagloriadas\", \"vandalizadas\", \"vaporizadas\", \"variadas\", \"vaticinadas\", \"vedadas\", \"vehiculadas\", \"vejadas\", \"veladas\", \"vencidas\", \"vendadas\", \"vendidas\", \"veneradas\", \"vengadas\", \"ventiladas\", \"veraneadas\", \"verbalizadas\", \"verificadas\", \"versadas\", \"versionadas\", \"vertebradas\", \"vertidas\", \"vestidas\", \"vetadas\", \"viabilizadas\", \"viajadas\", \"vibradas\", \"victimadas\", \"victimizadas\", \"vigiladas\", \"vigorizadas\", \"vilipendiadas\", \"vindicadas\", \"violadas\", \"violentadas\", \"viradas\", \"visadas\", \"visibilizadas\", \"visitadas\", \"vislumbradas\", \"vistas\", \"visualizadas\", \"vitoreadas\", \"vitrificadas\", \"vituperadas\", \"vividas\", \"vivificadas\", \"vocalizadas\", \"voceadas\", \"vociferadas\", \"voladas\", \"volatilizadas\", \"volcadas\", \"volteadas\", \"vomitadas\", \"votadas\", \"vueltas\", \"vulcanizadas\", \"vulgarizadas\", \"vulneradas\", \"yuxtapuestas\", \"zafadas\", \"zambullidas\", \"zampadas\", \"zanjadas\", \"zarandeadas\", \"zarpadas\", \"zozobradas\", \"zumbadas\", \"zurcidas\", \"zurradas\"];\n};\n//# sourceMappingURL=participles.js.map\n//# sourceMappingURL=participles.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/participles.js\n// module id = 1488\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/participles.js?");

/***/ }),
/* 1489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /**\n              * Returns a list of all participles used for the Italian passive voice assessment.\n              * For each participle, versions for all four possible suffixes (-o, -a, -e, -i) are included.\n              * @returns {Array} The list with participles.\n              */\nmodule.exports = function () {\n  return [\"abalienato\", \"abbacchiato\", \"abbacinato\", \"abbadato\", \"abbagliato\", \"abbaiato\", \"abballato\", \"abbambinato\", \"abbancato\", \"abbandonato\", \"abbarbagliato\", \"abbarbato\", \"abbarcato\", \"abbaruffato\", \"abbassato\", \"abbatacchiato\", \"abbattuto\", \"abbatuffolato\", \"abbelito\", \"abbellato\", \"abbellito\", \"abbendato\", \"abbeverato\", \"abbiadato\", \"abbicato\", \"abbigliato\", \"abbinato\", \"abbindolato\", \"abbioccato\", \"abbiosciato\", \"abbisciato\", \"abbittato\", \"abboccato\", \"abboffato\", \"abbominato\", \"abbonacciato\", \"abbonato\", \"abbonito\", \"abbordato\", \"abborracciato\", \"abborrato\", \"abborrito\", \"abbottinato\", \"abbottonato\", \"abbozzacchiato\", \"abbozzato\", \"abbozzolato\", \"abbracciato\", \"abbraciato\", \"abbrancato\", \"abbreviato\", \"abbriccato\", \"abbrigliato\", \"abbrivato\", \"abbriviato\", \"abbrividito\", \"abbronzato\", \"abbrostolato\", \"abbrostolito\", \"abbruciacchiato\", \"abbruciato\", \"abbrunato\", \"abbrunito\", \"abbruscato\", \"abbrusciato\", \"abbrustiato\", \"abbrustolato\", \"abbrustolito\", \"abbrutito\", \"abbruttito\", \"abbuffato\", \"abbuiato\", \"abbuonato\", \"abburattato\", \"abbuzzito\", \"abdicato\", \"abdotto\", \"abiettato\", \"abilitato\", \"abissato\", \"abitato\", \"abituato\", \"abiurato\", \"abolito\", \"abominato\", \"abondato\", \"aborrito\", \"abraso\", \"abrogato\", \"abusato\", \"accaffato\", \"accagionato\", \"accagliato\", \"accalappiato\", \"accalcato\", \"accaldato\", \"accallato\", \"accalorato\", \"accalorito\", \"accambiato\", \"accampato\", \"accampionato\", \"accanalato\", \"accanato\", \"accaneggiato\", \"accanito\", \"accantonato\", \"accaparrato\", \"accapezzato\", \"accapigliato\", \"accapottato\", \"accappiato\", \"accappiettato\", \"accapponato\", \"accappucciato\", \"accaprettato\", \"accareggiato\", \"accarezzato\", \"accarnato\", \"accarpionato\", \"accartocciato\", \"accasato\", \"accasciato\", \"accasellato\", \"accasermato\", \"accastellato\", \"accastellinato\", \"accatarrato\", \"accatastato\", \"accattato\", \"accattivato\", \"accavalcato\", \"accavalciato\", \"accavallato\", \"accavezzato\", \"accecato\", \"acceffato\", \"accelerato\", \"accellerato\", \"accennato\", \"accensato\", \"accentato\", \"accentrato\", \"accentuato\", \"acceppato\", \"accerchiato\", \"accercinato\", \"accertato\", \"acceso\", \"accessoriato\", \"accettato\", \"acchetato\", \"acchiappato\", \"acchiocciolato\", \"acchitato\", \"acchiuduto\", \"acciabattato\", \"acciaiato\", \"acciambellato\", \"acciarpato\", \"acciecato\", \"accigliato\", \"acciglionato\", \"accignuto\", \"accincignato\", \"accinto\", \"acciocchito\", \"acciottolato\", \"accipigliato\", \"accismato\", \"acciso\", \"acciucchito\", \"acciuffato\", \"accivettato\", \"acclamato\", \"acclarato\", \"acclimatato\", \"accluso\", \"accoccato\", \"accoccolato\", \"accoccovato\", \"accodato\", \"accollato\", \"accoltellato\", \"accolto\", \"accomandato\", \"accomiatato\", \"accommiatato\", \"accomodato\", \"accompagnato\", \"accomunato\", \"acconciato\", \"acconigliato\", \"accontato\", \"accontentato\", \"accoppato\", \"accoppiato\", \"accorato\", \"accorciato\", \"accorcito\", \"accordato\", \"accordellato\", \"accorpato\", \"accorto\", \"accosciato\", \"accostato\", \"accostumato\", \"accotonato\", \"accottimato\", \"accovacciato\", \"accovato\", \"accovonato\", \"accozzato\", \"accreditato\", \"accresciuto\", \"accrespato\", \"accucciato\", \"accucciolato\", \"accudito\", \"acculato\", \"acculturato\", \"accumulato\", \"accumunato\", \"accusato\", \"acetificato\", \"acetilato\", \"acetito\", \"acidato\", \"acidificato\", \"acidulato\", \"acquadernato\", \"acquarellato\", \"acquartierato\", \"acquato\", \"acquattato\", \"acquerellato\", \"acquetato\", \"acquietato\", \"acquisito\", \"acquistato\", \"acromatizzato\", \"acuito\", \"acuminato\", \"acutizzato\", \"adacquato\", \"adagiato\", \"adattato\", \"addaziato\", \"addebbiato\", \"addebitato\", \"addecimato\", \"addensato\", \"addentato\", \"addentellato\", \"addentrato\", \"addestrato\", \"addetto\", \"addiacciato\", \"addimandato\", \"addimesticato\", \"addimorato\", \"addimostrato\", \"addipanato\", \"addirizzato\", \"additato\", \"additivato\", \"addizionato\", \"addobbato\", \"addocilito\", \"addogliato\", \"addolcato\", \"addolciato\", \"addolcito\", \"addolorato\", \"addomandato\", \"addomesticato\", \"addoppiato\", \"addormentato\", \"addossato\", \"addotto\", \"addottorato\", \"addottrinato\", \"addrizzato\", \"adduato\", \"addugliato\", \"adeguato\", \"adempito\", \"adempiuto\", \"adequato\", \"aderizzato\", \"adescato\", \"adibito\", \"adirato\", \"adito\", \"adiuvato\", \"adizzato\", \"adocchiato\", \"adombrato\", \"adonato\", \"adonestato\", \"adontato\", \"adoperato\", \"adoprato\", \"adorato\", \"adornato\", \"adottato\", \"adsorbito\", \"aduggiato\", \"adugnato\", \"adulato\", \"adulterato\", \"adunato\", \"adunghiato\", \"adusato\", \"aerato\", \"aereato\", \"aerotrainato\", \"aerotrasportato\", \"affabulato\", \"affaccendato\", \"affacchinato\", \"affacciato\", \"affagottato\", \"affaldato\", \"affamato\", \"affamigliato\", \"affannato\", \"affardellato\", \"affascinato\", \"affastellato\", \"affaticato\", \"affattucchiato\", \"affatturato\", \"affermato\", \"afferrato\", \"affettato\", \"affezionato\", \"affiancato\", \"affiatato\", \"affibbiato\", \"affidato\", \"affienato\", \"affievolito\", \"affigliato\", \"affigurato\", \"affilato\", \"affilettato\", \"affiliato\", \"affinato\", \"affiochito\", \"affiorato\", \"affisato\", \"affissato\", \"affisso\", \"affittato\", \"affittito\", \"afflitto\", \"afflosciato\", \"affocato\", \"affogato\", \"affogliato\", \"affollato\", \"affoltato\", \"affondato\", \"afforcato\", \"afforestato\", \"afforzato\", \"affossato\", \"affralito\", \"affrancato\", \"affranto\", \"affratellato\", \"affrenato\", \"affrenellato\", \"affrescato\", \"affrettato\", \"affrittellato\", \"affrontato\", \"affumato\", \"affumicato\", \"affumigato\", \"affuocato\", \"affusolato\", \"africanizzato\", \"ageminato\", \"agevolato\", \"aggallato\", \"agganciato\", \"aggangherato\", \"aggarbato\", \"aggattonato\", \"aggavignato\", \"aggelato\", \"aggettivato\", \"agghiacciato\", \"agghiadato\", \"agghiaiato\", \"agghindato\", \"aggiaccato\", \"aggiogato\", \"aggiornato\", \"aggirato\", \"aggiucchito\", \"aggiudicato\", \"aggiuntato\", \"aggiunto\", \"aggiustato\", \"agglomerato\", \"agglutinato\", \"aggomitolato\", \"aggottato\", \"aggradito\", \"aggraffato\", \"aggranchiato\", \"aggranchito\", \"aggrandito\", \"aggrappato\", \"aggraticciato\", \"aggravato\", \"aggredito\", \"aggregato\", \"aggrevato\", \"aggricciato\", \"aggrinzato\", \"aggrinzito\", \"aggrommato\", \"aggrondato\", \"aggroppato\", \"aggrottato\", \"aggrovigliato\", \"aggrumato\", \"aggruppato\", \"aggruzzolato\", \"agguagliato\", \"agguantato\", \"agguardato\", \"agguatato\", \"aggueffato\", \"agitato\", \"agognato\", \"agrarizzato\", \"aguatato\", \"agucchiato\", \"agunato\", \"agurato\", \"aguzzato\", \"aitato\", \"aiutato\", \"aizzato\", \"alato\", \"alberato\", \"albergato\", \"alcalinizzato\", \"alchilato\", \"alchimiato\", \"alchimizzato\", \"alcolizzato\", \"alcoolizzato\", \"alenato\", \"alesato\", \"alettato\", \"alfabetato\", \"alfabetizzato\", \"alidito\", \"alienato\", \"alimentato\", \"allacciato\", \"allagato\", \"allappato\", \"allargato\", \"allascato\", \"allattato\", \"alleato\", \"allegato\", \"alleggerito\", \"alleggiato\", \"allegorizzato\", \"alleluiato\", \"allenato\", \"allenito\", \"allentato\", \"allertato\", \"allessato\", \"allestito\", \"allettato\", \"allevato\", \"alleviato\", \"allibato\", \"allibito\", \"allibrato\", \"allicciato\", \"allietato\", \"allindato\", \"allineato\", \"alliso\", \"allocato\", \"allogato\", \"alloggiato\", \"allontanato\", \"allottato\", \"allucchettato\", \"allucciolato\", \"allucinato\", \"allumato\", \"alluminato\", \"alluminiato\", \"allungato\", \"allupato\", \"alluso\", \"alluzzato\", \"alogenato\", \"alonato\", \"alpeggiato\", \"alterato\", \"alternato\", \"alzato\", \"amalgamato\", \"amareggiato\", \"amaricato\", \"amato\", \"ambientato\", \"ambiguato\", \"ambito\", \"americanizzato\", \"amicato\", \"ammaccato\", \"ammaestrato\", \"ammainato\", \"ammalato\", \"ammaliato\", \"ammalinconito\", \"ammaltato\", \"ammanettato\", \"ammanicato\", \"ammanierato\", \"ammanigliato\", \"ammannato\", \"ammannellato\", \"ammannito\", \"ammansato\", \"ammansito\", \"ammantato\", \"ammantellato\", \"ammarato\", \"ammarezzato\", \"ammassato\", \"ammassellato\", \"ammassicciato\", \"ammatassato\", \"ammattonato\", \"ammazzato\", \"ammelmato\", \"ammencito\", \"ammendato\", \"ammennicolato\", \"ammesso\", \"ammetato\", \"ammezzito\", \"amministrato\", \"amminutato\", \"ammirato\", \"ammiserito\", \"ammobiliato\", \"ammodernato\", \"ammodernizzato\", \"ammogliato\", \"ammoinato\", \"ammollato\", \"ammollito\", \"ammonito\", \"ammonticchiato\", \"ammonticellato\", \"ammorbato\", \"ammorbidato\", \"ammorbidito\", \"ammorsato\", \"ammortato\", \"ammortito\", \"ammortizzato\", \"ammorzato\", \"ammosciato\", \"ammoscito\", \"ammostato\", \"ammotinato\", \"ammucchiato\", \"ammulinato\", \"ammusato\", \"ammutato\", \"ammutinato\", \"amnistiato\", \"amoracciato\", \"ampiato\", \"ampliato\", \"amplificato\", \"amputato\", \"anagrammato\", \"analizzato\", \"anamorfizzato\", \"anastomizzato\", \"anatematizzato\", \"anatomizzato\", \"anchilosato\", \"anciso\", \"ancorato\", \"andatoseno\", \"andicappato\", \"anellato\", \"anemizzato\", \"anestetizzato\", \"angariato\", \"anglicizzato\", \"angolato\", \"angosciato\", \"angustiato\", \"animato\", \"annacquato\", \"annaffiato\", \"annasato\", \"annaspato\", \"annaspicato\", \"annebbiato\", \"annegato\", \"annerato\", \"annerito\", \"annesso\", \"annestato\", \"annichilato\", \"annichilito\", \"annidato\", \"annientato\", \"annitrito\", \"annobilito\", \"annodato\", \"annodicchiato\", \"annoiato\", \"annotato\", \"annottato\", \"annottolato\", \"annoverato\", \"annullato\", \"annunciato\", \"annunziato\", \"annusato\", \"annuvolato\", \"anodizzato\", \"anonimizzato\", \"anteceduto\", \"anteposto\", \"antergato\", \"anticheggiato\", \"antichizzato\", \"anticipato\", \"anticonosciuto\", \"antidatato\", \"antiveduto\", \"antivisto\", \"antologizzato\", \"antropizzato\", \"antropomorfizzato\", \"aocchiato\", \"aombrato\", \"aonestato\", \"aontato\", \"aperto\", \"apocopato\", \"apologizzato\", \"apostrofato\", \"appaciato\", \"appacificato\", \"appagato\", \"appaiato\", \"appalesato\", \"appallottolato\", \"appaltato\", \"appanettato\", \"appannato\", \"apparato\", \"apparecchiato\", \"apparentato\", \"apparigliato\", \"apparito\", \"appartato\", \"appassionato\", \"appastato\", \"appastellato\", \"appellato\", \"appennellato\", \"appercepito\", \"appertizzato\", \"appesantito\", \"appesito\", \"appeso\", \"appestato\", \"appetito\", \"appezzato\", \"appiacevolito\", \"appianato\", \"appiastrato\", \"appiatato\", \"appiattato\", \"appiattito\", \"appiccato\", \"appiccicato\", \"appiccolito\", \"appiedato\", \"appigionato\", \"appigliato\", \"appinzato\", \"appiombato\", \"appioppato\", \"appisolato\", \"applaudito\", \"applicato\", \"appoderato\", \"appoggiato\", \"appollaiato\", \"appoppato\", \"apportato\", \"appostato\", \"apposto\", \"appratito\", \"appresentato\", \"appreso\", \"appressato\", \"apprestato\", \"apprettato\", \"apprezzato\", \"approcciato\", \"approfittato\", \"approfondato\", \"approfondito\", \"approntato\", \"appropinquato\", \"appropriato\", \"approssimato\", \"approvato\", \"approvisionato\", \"approvvigionato\", \"appruato\", \"appulcrato\", \"appuntato\", \"appuntellato\", \"appuntito\", \"appurato\", \"appuzzato\", \"arabescato\", \"arabizzato\", \"arato\", \"arbitrato\", \"arborato\", \"arcaizzato\", \"arcato\", \"architettato\", \"archiviato\", \"arcuato\", \"ardito\", \"areato\", \"argentato\", \"arginato\", \"argomentato\", \"arguito\", \"arianizzato\", \"arieggiato\", \"armato\", \"armonizzato\", \"aromatizzato\", \"arpeggiato\", \"arpionato\", \"arponato\", \"arrabattato\", \"arraffato\", \"arraffiato\", \"arrandellato\", \"arrangiato\", \"arrapato\", \"arrapinato\", \"arrappato\", \"arrazzato\", \"arrecato\", \"arredato\", \"arreggimentato\", \"arrembato\", \"arrenato\", \"arresiso\", \"arreso\", \"arrestato\", \"arretrato\", \"arricchito\", \"arricciato\", \"arricciolato\", \"arriffato\", \"arringato\", \"arrischiato\", \"arrisicato\", \"arriso\", \"arrocato\", \"arroccato\", \"arrochito\", \"arrogato\", \"arrolato\", \"arroncato\", \"arronzato\", \"arrosato\", \"arrossato\", \"arrostato\", \"arrostito\", \"arrotato\", \"arrotolato\", \"arrotondato\", \"arrovellato\", \"arroventato\", \"arroventito\", \"arrovesciato\", \"arrubinato\", \"arruffato\", \"arruffianato\", \"arrugginito\", \"arruncigliato\", \"arruolato\", \"arruvidito\", \"arsicciato\", \"arso\", \"artefatto\", \"articolato\", \"artigliato\", \"asceso\", \"asciato\", \"asciolvuto\", \"asciugato\", \"ascoltato\", \"ascoso\", \"ascosto\", \"ascritto\", \"asfaltato\", \"asfissiato\", \"asperso\", \"aspettato\", \"aspirato\", \"asportato\", \"aspreggiato\", \"assaettato\", \"assaggiato\", \"assalito\", \"assaltato\", \"assaporato\", \"assaporito\", \"assassinato\", \"assecondato\", \"assecurato\", \"assediato\", \"asseggiato\", \"assegnato\", \"assembiato\", \"assemblato\", \"assembrato\", \"assemprato\", \"assentato\", \"asserito\", \"asserragliato\", \"asservito\", \"assestato\", \"assetato\", \"assettato\", \"asseverato\", \"assibilato\", \"assicurato\", \"assiderato\", \"assiemato\", \"assiepato\", \"assillato\", \"assimigliato\", \"assimilato\", \"assiomatizzato\", \"assiso\", \"assistito\", \"associato\", \"assodato\", \"assoggettato\", \"assolcato\", \"assoldato\", \"assolto\", \"assolutizzato\", \"assomato\", \"assommato\", \"assonato\", \"assonnato\", \"assopito\", \"assorbito\", \"assordato\", \"assordito\", \"assortito\", \"assottigliato\", \"assuefatto\", \"assunto\", \"asteggiato\", \"astenuto\", \"asterso\", \"astratto\", \"astretto\", \"atomizzato\", \"atrofizzato\", \"atrovato\", \"attaccato\", \"attagliato\", \"attanagliato\", \"attardato\", \"attediato\", \"atteggiato\", \"attempato\", \"attendato\", \"attentato\", \"attenuato\", \"attenuto\", \"attergato\", \"atterrato\", \"atterrito\", \"atterzato\", \"atteso\", \"attestato\", \"atticizzato\", \"attillato\", \"attinto\", \"attirato\", \"attivato\", \"attivizzato\", \"attizzato\", \"attorcigliato\", \"attorniato\", \"attorto\", \"attoscato\", \"attossicato\", \"attraccato\", \"attrappito\", \"attratto\", \"attraversato\", \"attrezzato\", \"attribuito\", \"attristato\", \"attristito\", \"attruppato\", \"attualizzato\", \"attuato\", \"attuffato\", \"attutato\", \"attutito\", \"auggiato\", \"augumentato\", \"augurato\", \"aulito\", \"aumentato\", \"aunghiato\", \"ausato\", \"auscultato\", \"auspicato\", \"autenticato\", \"autentificato\", \"autoaccusato\", \"autoaffondato\", \"autoalimentato\", \"autoassolto\", \"autocandidato\", \"autocensurato\", \"autocitato\", \"autocommiserato\", \"autoconsumato\", \"autoconvinto\", \"autodefinito\", \"autodenunciato\", \"autodistrutto\", \"autofinanziato\", \"autogestito\", \"autogovernato\", \"autografato\", \"autoincensato\", \"autointersecato\", \"autoinvitato\", \"autolesionato\", \"autolimitato\", \"automaticizzato\", \"automatizzato\", \"automotivato\", \"autonominato\", \"autoproclamato\", \"autoprodotto\", \"autoprotetto\", \"autopubblicato\", \"autopubblicizzato\", \"autoregolamentato\", \"autoregolato\", \"autoridotto\", \"autoriparato\", \"autorizzato\", \"autosomministrato\", \"autosostenuto\", \"autosuggestionato\", \"autotassato\", \"autotrapiantato\", \"autotrasportato\", \"autovalutato\", \"avallato\", \"avampato\", \"avanzato\", \"avariato\", \"avinto\", \"aviolanciato\", \"aviotrasportato\", \"avocato\", \"avolterato\", \"avulso\", \"avutacelo\", \"avuto\", \"avvalorato\", \"avvalso\", \"avvantaggiato\", \"avvelato\", \"avvelenato\", \"avventato\", \"avventurato\", \"avverato\", \"avversato\", \"avvertito\", \"avvezzato\", \"avviato\", \"avvicendato\", \"avvicinato\", \"avvignato\", \"avvilito\", \"avviluppato\", \"avvinato\", \"avvinchiato\", \"avvinghiato\", \"avvinto\", \"avvisato\", \"avvistato\", \"avvitato\", \"avviticchiato\", \"avvitito\", \"avvivato\", \"avvolto\", \"avvoltolato\", \"aziendalizzato\", \"azionato\", \"azotato\", \"azzannato\", \"azzardato\", \"azzeccato\", \"azzerato\", \"azzimato\", \"azzittato\", \"azzittito\", \"azzoppato\", \"azzoppito\", \"azzuffato\", \"azzurrato\", \"bacato\", \"baccagliato\", \"bacchettato\", \"bacchiato\", \"baciato\", \"badato\", \"bagnato\", \"baipassato\", \"balbettato\", \"balcanizzato\", \"ballato\", \"baloccato\", \"balzato\", \"banalizzato\", \"bancato\", \"bandito\", \"bannato\", \"baraccato\", \"barattato\", \"barbarizzato\", \"barcamenato\", \"bardato\", \"barellato\", \"barrato\", \"barricato\", \"basato\", \"basciato\", \"basculato\", \"bassato\", \"bastato\", \"bastionato\", \"bastito\", \"bastonato\", \"battezzato\", \"battuto\", \"bazzicato\", \"beatificato\", \"beato\", \"beccato\", \"beccheggiato\", \"becchettato\", \"beffato\", \"beffeggiato\", \"bendato\", \"benedetto\", \"beneficato\", \"benvoluto\", \"berlusconizzato\", \"bersagliato\", \"bestemmiato\", \"bevuto\", \"biadato\", \"bianchettato\", \"bianchito\", \"biascicato\", \"biasimato\", \"biasmato\", \"bidonato\", \"biennalizzato\", \"biforcato\", \"bigiato\", \"bilanciato\", \"binato\", \"bindolato\", \"biodegradato\", \"biografato\", \"bipartito\", \"bisbigliato\", \"biscottato\", \"bisecato\", \"bisellato\", \"bisognato\", \"bissato\", \"bistrato\", \"bistrattato\", \"bitumato\", \"bituminato\", \"blandito\", \"bleffato\", \"blindato\", \"bloccato\", \"bobinato\", \"boccheggiato\", \"bocciato\", \"boicottato\", \"bollato\", \"bollito\", \"bombardato\", \"bombato\", \"bonderizzato\", \"bonificato\", \"bootato\", \"borbottato\", \"bordato\", \"boriato\", \"borrato\", \"borseggiato\", \"braccato\", \"bracciato\", \"bramato\", \"bramito\", \"brancicato\", \"brandeggiato\", \"brandito\", \"brasato\", \"bravato\", \"brevettato\", \"breviato\", \"brillantato\", \"brillato\", \"brinato\", \"broccato\", \"brocciato\", \"broccolato\", \"brontolato\", \"bronzato\", \"brucato\", \"bruciacchiato\", \"bruciato\", \"brunito\", \"bruscato\", \"bruschinato\", \"brutalizzato\", \"bruttato\", \"bucato\", \"bucherellato\", \"bufato\", \"buffato\", \"bufferizzato\", \"buggerato\", \"bugnato\", \"bulicato\", \"bulinato\", \"bullettato\", \"bullonato\", \"burattato\", \"burlato\", \"burocratizzato\", \"burrificato\", \"buscato\", \"buttato\", \"butterato\", \"bypassato\", \"cablato\", \"cabrato\", \"cacato\", \"cacciato\", \"cadenzato\", \"cadmiato\", \"caducato\", \"cagato\", \"caggiato\", \"cagionato\", \"cagliato\", \"calafatato\", \"calamitato\", \"calandrato\", \"calato\", \"calcato\", \"calciato\", \"calcificato\", \"calcolato\", \"caldeggiato\", \"calettato\", \"calibrato\", \"calmato\", \"calmierato\", \"calpestato\", \"calumato\", \"calunniato\", \"calzato\", \"cambiato\", \"camerato\", \"campionato\", \"campito\", \"camuffato\", \"canalizzato\", \"cancellato\", \"cancerizzato\", \"candeggiato\", \"candidato\", \"candito\", \"canforato\", \"cangiato\", \"cannato\", \"canneggiato\", \"cannibalizzato\", \"cannoneggiato\", \"canonizzato\", \"cantato\", \"canterellato\", \"canticchiato\", \"cantilenato\", \"canzonato\", \"caolinizzato\", \"capacitato\", \"capeggiato\", \"capillarizzato\", \"capitalizzato\", \"capitanato\", \"capitaneggiato\", \"capito\", \"capitozzato\", \"capivolto\", \"caponato\", \"capotato\", \"capottato\", \"capovolto\", \"capponato\", \"captato\", \"caramellato\", \"caramellizzato\", \"caratato\", \"caratterizzato\", \"carbonizzato\", \"carbossilato\", \"carburato\", \"carcato\", \"carcerato\", \"cardato\", \"carenato\", \"carezzato\", \"cariato\", \"caricato\", \"caricaturato\", \"caricaturizzato\", \"carotato\", \"carpionato\", \"carpito\", \"carreggiato\", \"carrozzato\", \"cartavetrato\", \"carteggiato\", \"cartellinato\", \"cartografato\", \"cartolarizzato\", \"cartonato\", \"cascolato\", \"cassato\", \"casso\", \"castigato\", \"castrato\", \"casualizzato\", \"catabolizzato\", \"catalizzato\", \"catalogato\", \"catapultato\", \"catechizzato\", \"categorizzato\", \"cateterizzato\", \"catramato\", \"cattolicizzato\", \"catturato\", \"causato\", \"cautelato\", \"cauterizzato\", \"cauzionato\", \"cavalcato\", \"cavataselo\", \"cavato\", \"cazzato\", \"cazziato\", \"cazzottato\", \"cedrato\", \"ceduto\", \"celato\", \"celebrato\", \"cellofanato\", \"cementato\", \"cementificato\", \"cennato\", \"censito\", \"censurato\", \"centellato\", \"centellinato\", \"centimetrato\", \"centinato\", \"centralizzato\", \"centrato\", \"centrifugato\", \"centuplicato\", \"cerato\", \"cercato\", \"cerchiato\", \"cernuto\", \"certificato\", \"cesellato\", \"cessato\", \"cestinato\", \"cheratinizzato\", \"chetato\", \"chiamato\", \"chiappato\", \"chiarificato\", \"chiarito\", \"chiaroscurato\", \"chiavato\", \"chiazzato\", \"chiesto\", \"chilificato\", \"chilometrato\", \"chimificato\", \"chinato\", \"chinizzato\", \"chiodato\", \"chiosato\", \"chiuso\", \"choccato\", \"ciancicato\", \"cianfrinato\", \"cianfrugliato\", \"ciangottato\", \"ciattato\", \"cibato\", \"cicatrizzato\", \"ciccato\", \"cicchettato\", \"ciclizzato\", \"ciclostilato\", \"cifrato\", \"cilindrato\", \"cimato\", \"cimentato\", \"cincischiato\", \"cinematografato\", \"cintato\", \"cinto\", \"cioncato\", \"ciondolato\", \"circolato\", \"circoncinto\", \"circonciso\", \"circondato\", \"circondotto\", \"circonflesso\", \"circonfluito\", \"circonfuso\", \"circonscritto\", \"circonvenuto\", \"circoscritto\", \"circostanziato\", \"circuito\", \"circumcinto\", \"circumnavigato\", \"citato\", \"ciucciato\", \"ciurmato\", \"civettato\", \"civilizzato\", \"clamato\", \"classato\", \"classicizzato\", \"classificato\", \"cliccato\", \"climatizzato\", \"clivato\", \"clonato\", \"cloroformizzato\", \"clorurato\", \"clusterizzato\", \"co-diretto\", \"coacervato\", \"coadiuvato\", \"coagulato\", \"coalizzato\", \"coartato\", \"coccolato\", \"codificato\", \"coeditato\", \"coesistito\", \"cofinanziato\", \"cofirmato\", \"cofondato\", \"cogestito\", \"cogitato\", \"coglionato\", \"cognosciuto\", \"coibentato\", \"coinciso\", \"cointeressato\", \"cointestato\", \"coinvolto\", \"cokificato\", \"colato\", \"colettato\", \"collassato\", \"collaudato\", \"collazionato\", \"collegato\", \"collettivizzato\", \"collezionato\", \"collimato\", \"colliquato\", \"colliso\", \"collocato\", \"colluttato\", \"colmato\", \"colonizzato\", \"colorato\", \"colorito\", \"colorizzato\", \"colpevolizzato\", \"colpito\", \"coltellato\", \"coltivato\", \"colto\", \"coltrato\", \"comandato\", \"combattuto\", \"combinato\", \"comburuto\", \"comicizzato\", \"cominciato\", \"commemorato\", \"commendato\", \"commensurato\", \"commentato\", \"commercializzato\", \"commesso\", \"comminato\", \"commiserato\", \"commissariato\", \"commissionato\", \"commisurato\", \"commosso\", \"commutato\", \"comodato\", \"compaginato\", \"comparito\", \"compartimentalizzato\", \"compartito\", \"compassionato\", \"compatibilizzato\", \"compatito\", \"compattato\", \"compendiato\", \"compenetrato\", \"compensato\", \"comperato\", \"compiaciuto\", \"compianto\", \"compilato\", \"compitato\", \"compiuto\", \"complessato\", \"complessificato\", \"complesso\", \"completato\", \"complicato\", \"complimentato\", \"comportato\", \"compostato\", \"composto\", \"comprato\", \"compravenduto\", \"compreso\", \"compresso\", \"compromesso\", \"comprovato\", \"compulsato\", \"compunto\", \"computato\", \"computerizzato\", \"comunicato\", \"comunistizzato\", \"concatenato\", \"conceduto\", \"concelebrato\", \"concentrato\", \"concepito\", \"concertato\", \"concesso\", \"concettato\", \"concettualizzato\", \"conchiuso\", \"conciato\", \"conciliato\", \"concimato\", \"concitato\", \"conclamato\", \"concluso\", \"concordato\", \"concotto\", \"concretato\", \"concretizzato\", \"conculcato\", \"concupito\", \"condannato\", \"condensato\", \"condito\", \"condiviso\", \"condizionato\", \"condoluto\", \"condonato\", \"condotto\", \"confatto\", \"confederato\", \"conferito\", \"confermato\", \"confessato\", \"confettato\", \"confezionato\", \"conficcato\", \"confidato\", \"configurato\", \"confinato\", \"confinto\", \"confiscato\", \"confitto\", \"conformato\", \"confortato\", \"confricato\", \"confrontato\", \"confuso\", \"confutato\", \"congedato\", \"congegnato\", \"congelato\", \"congestionato\", \"congetturato\", \"congiunto\", \"conglobato\", \"conglomerato\", \"conglutinato\", \"congratulato\", \"congregato\", \"conguagliato\", \"coniato\", \"coniugato\", \"connaturato\", \"connesso\", \"connotato\", \"connumerato\", \"conosciuto\", \"conquistato\", \"consacrato\", \"consapevolizzato\", \"consegnato\", \"conseguito\", \"consentito\", \"conservato\", \"considerato\", \"consigliato\", \"consistito\", \"consociato\", \"consolato\", \"consolidato\", \"consorziato\", \"consparso\", \"consperso\", \"constatato\", \"constretto\", \"construito\", \"consultato\", \"consumato\", \"consunto\", \"contabilizzato\", \"contagiato\", \"containerizzato\", \"contaminato\", \"contato\", \"contattato\", \"conteggiato\", \"contemperato\", \"contemplato\", \"contentato\", \"contenuto\", \"conteso\", \"contestato\", \"contestualizzato\", \"contingentato\", \"continuato\", \"contornato\", \"contorto\", \"contrabbandato\", \"contraccambiato\", \"contraddetto\", \"contraddistinto\", \"contradetto\", \"contraffatto\", \"contrappesato\", \"contrapposto\", \"contrappuntato\", \"contrariato\", \"contrassegnato\", \"contrastato\", \"contrato\", \"contrattaccato\", \"contrattato\", \"contratto\", \"contravvalso\", \"contristato\", \"controbattuto\", \"controbilanciato\", \"controdatato\", \"controfirmato\", \"controindicato\", \"controllato\", \"controminato\", \"contronotato\", \"controproposto\", \"controprovato\", \"controquerelato\", \"controsoffittato\", \"controstampato\", \"controventato\", \"conturbato\", \"contuso\", \"convalidato\", \"convenuto\", \"convenzionato\", \"convertito\", \"convinto\", \"convitato\", \"convocato\", \"convogliato\", \"convolto\", \"coobato\", \"cooptato\", \"coordinato\", \"coperchiato\", \"coperto\", \"copiaincollato\", \"copiato\", \"copolimerizzato\", \"coppellato\", \"coprodotto\", \"corazzato\", \"corbellato\", \"corcato\", \"cordonato\", \"coreografato\", \"coricato\", \"cornificato\", \"coronato\", \"corredato\", \"correlato\", \"corresponsabilizzato\", \"corretto\", \"corricchiato\", \"corrisposto\", \"corroborato\", \"corroso\", \"corrotto\", \"corrucciato\", \"corrugato\", \"corso\", \"corteato\", \"corteggiato\", \"cortocircuitato\", \"coruscato\", \"cosato\", \"coscritto\", \"cosparso\", \"cosperso\", \"costatato\", \"costeggiato\", \"costellato\", \"costernato\", \"costicchiato\", \"costipato\", \"costituito\", \"costituzionalizzato\", \"costretto\", \"costruito\", \"costudito\", \"cotonato\", \"cotto\", \"covato\", \"coventrizzato\", \"coverchiato\", \"craccato\", \"creato\", \"creduto\", \"cremato\", \"crepato\", \"cresciuto\", \"cresimato\", \"crespato\", \"criminalizzato\", \"crioconcentrato\", \"criptato\", \"cristallizzato\", \"cristianizzato\", \"criticato\", \"crittato\", \"crittografato\", \"crivellato\", \"crocchiato\", \"crocefisso\", \"crocefitto\", \"crocifisso\", \"crocifitto\", \"crogiolato\", \"cromato\", \"cronicizzato\", \"cronometrato\", \"crostato\", \"crucciato\", \"crucifisso\", \"crucifitto\", \"cuccato\", \"cucinato\", \"cucito\", \"cullato\", \"cumulato\", \"cuntato\", \"curato\", \"curvato\", \"curvato\", \"custodito\", \"customizzato\", \"damascato\", \"damaschinato\", \"damato\", \"dannato\", \"danneggiato\", \"danzato\", \"dardeggiato\", \"datato\", \"dato\", \"dattilografato\", \"dattiloscritto\", \"daziato\", \"deacidificato\", \"deattivato\", \"debbiato\", \"debellato\", \"debilitato\", \"decaffeinato\", \"decaffeinizzato\", \"decalcato\", \"decalcificato\", \"decantato\", \"decapato\", \"decapitato\", \"decappottato\", \"decarbossilato\", \"decarburato\", \"decatizzato\", \"decelerato\", \"decentralizzato\", \"decentrato\", \"decerebrato\", \"decernuto\", \"decespugliato\", \"deciferato\", \"decifrato\", \"decimalizzato\", \"decimato\", \"deciso\", \"declamato\", \"declassato\", \"declassificato\", \"declinato\", \"declorato\", \"decodificato\", \"decolonizzato\", \"decolorato\", \"decompartimentato\", \"decompilato\", \"decomposto\", \"decompresso\", \"deconcentrato\", \"decondizionato\", \"decongelato\", \"decongestionato\", \"decontaminato\", \"decontestualizzato\", \"decontratto\", \"decorato\", \"decorticato\", \"decostruito\", \"decrementato\", \"decretato\", \"decriminalizzato\", \"decriptato\", \"decrittato\", \"decuplicato\", \"decurtato\", \"dedicato\", \"dedotto\", \"defacciato\", \"defalcato\", \"defascistizzato\", \"defecato\", \"defenestrato\", \"deferito\", \"defilato\", \"definito\", \"defiscalizzato\", \"defitto\", \"deflazionato\", \"deflemmato\", \"deflorato\", \"defogliato\", \"defoliato\", \"deforestato\", \"deformato\", \"defosforato\", \"defosforilato\", \"deframmentato\", \"defraudato\", \"degassato\", \"degassificato\", \"deglutito\", \"degnato\", \"degradato\", \"degustato\", \"deidratato\", \"deidrogenato\", \"deificato\", \"deindicizzato\", \"deindustrializzato\", \"deionizzato\", \"delegato\", \"delegificato\", \"delegittimato\", \"delibato\", \"deliberato\", \"delimitato\", \"delineato\", \"delirato\", \"deliziato\", \"delocalizzato\", \"delucidato\", \"deluso\", \"demagnetizzato\", \"demandato\", \"demanializzato\", \"demarcato\", \"demeritato\", \"demerso\", \"demetallizzato\", \"demilitarizzato\", \"demineralizzato\", \"demistificato\", \"demitizzato\", \"democratizzato\", \"demodulato\", \"demolito\", \"demoltiplicato\", \"demonetato\", \"demonetizzato\", \"demonizzato\", \"demoralizzato\", \"demorso\", \"demotivato\", \"denaturalizzato\", \"denaturato\", \"denazificato\", \"denazionalizzato\", \"denicotinizzato\", \"denigrato\", \"denitrificato\", \"denocciolato\", \"denominato\", \"denotato\", \"dentellato\", \"denuclearizzato\", \"denudato\", \"denunciato\", \"denunziato\", \"deodorato\", \"deossidato\", \"deossigenato\", \"deostruito\", \"depauperato\", \"depenalizzato\", \"depennato\", \"depilato\", \"depinto\", \"depistato\", \"deplorato\", \"depolarizzato\", \"depolimerizzato\", \"depoliticizzato\", \"depolverizzato\", \"deportato\", \"depositato\", \"deposto\", \"depotenziato\", \"depravato\", \"deprecato\", \"depredato\", \"depresso\", \"depressurizzato\", \"deprezzato\", \"deprivato\", \"deprotonato\", \"depulso\", \"depurato\", \"dequalificato\", \"deratizzato\", \"derattizzato\", \"dereferenziato\", \"deregolamentato\", \"deregolato\", \"derequisito\", \"deresponsabilizzato\", \"deriso\", \"derubato\", \"derubricato\", \"desacralizzato\", \"desalato\", \"desalinizzato\", \"descolarizzato\", \"descritto\", \"desecretato\", \"desegretato\", \"deselezionato\", \"desensibilizzato\", \"desessualizzato\", \"desiato\", \"desiderato\", \"designato\", \"desinato\", \"desirato\", \"desolato\", \"desolforato\", \"desonorizzato\", \"desorbito\", \"desossidato\", \"desquamato\", \"destabilizzato\", \"destagionalizzato\", \"destalinizzato\", \"destatalizzato\", \"destatizzato\", \"destato\", \"destinato\", \"destituito\", \"destoricizzato\", \"destreggiato\", \"destrutto\", \"destrutturato\", \"desunto\", \"detassato\", \"detenuto\", \"deteriorato\", \"determinato\", \"deterso\", \"detestato\", \"detonato\", \"detorto\", \"detossificato\", \"detratto\", \"detronizzato\", \"dettagliato\", \"dettato\", \"detto\", \"deturpato\", \"deumidificato\", \"devastato\", \"deventato\", \"deviato\", \"deviscerato\", \"devitalizzato\", \"devitaminizzato\", \"devoluto\", \"dezippato\", \"diaframmato\", \"diagnosticato\", \"diagonalizzato\", \"diagrammato\", \"dializzato\", \"dialogato\", \"dialogizzato\", \"diazotato\", \"dibattuto\", \"diboscato\", \"dichiarato\", \"diesato\", \"diesizzato\", \"difeso\", \"diffamato\", \"differito\", \"diffidato\", \"diffranto\", \"diffratto\", \"diffuso\", \"digerito\", \"digitalizzato\", \"digitato\", \"digiunto\", \"digrassato\", \"digrignato\", \"digrossato\", \"dilacerato\", \"dilaniato\", \"dilapidato\", \"dilatato\", \"dilavato\", \"dilazionato\", \"dileggiato\", \"dileguato\", \"dilettato\", \"diletto\", \"diliscato\", \"dilucidato\", \"diluito\", \"dilungato\", \"dimagrato\", \"dimandato\", \"dimenato\", \"dimensionato\", \"dimenticato\", \"dimerizzato\", \"dimesso\", \"dimezzato\", \"diminuito\", \"dimissionato\", \"dimostrato\", \"dimunto\", \"dinamizzato\", \"dinoccato\", \"dipanato\", \"dipelato\", \"dipinto\", \"diplomato\", \"diposto\", \"diradato\", \"diramato\", \"diretto\", \"direzionato\", \"dirimuto\", \"diroccato\", \"dirottato\", \"dirotto\", \"dirozzato\", \"disabilitato\", \"disabituato\", \"disaccentato\", \"disaccoppiato\", \"disaccordato\", \"disacerbato\", \"disacidato\", \"disacidificato\", \"disacidito\", \"disaerato\", \"disaffezionato\", \"disaggregato\", \"disalberato\", \"disallineato\", \"disamato\", \"disambiguato\", \"disaminato\", \"disamorato\", \"disancorato\", \"disanimato\", \"disappannato\", \"disapplicato\", \"disappreso\", \"disapprovato\", \"disarcionato\", \"disarmato\", \"disarticolato\", \"disascosto\", \"disassemblato\", \"disassuefatto\", \"disatomizzato\", \"disatteso\", \"disattivato\", \"disattrezzato\", \"disavvezzato\", \"disboscato\", \"disbrigato\", \"discacciato\", \"discalzato\", \"discantato\", \"discaricato\", \"discernuto\", \"disceso\", \"disceverato\", \"dischiesto\", \"dischiuso\", \"discinto\", \"disciolto\", \"disciplinato\", \"discolorato\", \"discolpato\", \"discommesso\", \"discompagnato\", \"discomposto\", \"disconcluso\", \"disconfitto\", \"discongiunto\", \"disconnesso\", \"disconosciuto\", \"discoperto\", \"discordato\", \"discosceso\", \"discostato\", \"discreditato\", \"discresciuto\", \"discriminato\", \"discritto\", \"discucito\", \"discuoiato\", \"discusso\", \"disdegnato\", \"disdettato\", \"disdetto\", \"diseccato\", \"diseccitato\", \"diseducato\", \"disegnato\", \"diserbato\", \"diseredato\", \"disertato\", \"diserto\", \"disfatto\", \"disgelato\", \"disgiunto\", \"disgraziato\", \"disgregato\", \"disgustato\", \"disidentificato\", \"disiderato\", \"disidratato\", \"disilluso\", \"disimballato\", \"disimparato\", \"disimpegnato\", \"disimpresso\", \"disincagliato\", \"disincantato\", \"disincentivato\", \"disincrostato\", \"disindustrializzato\", \"disinfestato\", \"disinfettato\", \"disinflazionato\", \"disinformato\", \"disingannato\", \"disingranato\", \"disinibito\", \"disinnamorato\", \"disinnescato\", \"disinnestato\", \"disinquinato\", \"disinserito\", \"disinstallato\", \"disintasato\", \"disintegrato\", \"disinteressato\", \"disinteso\", \"disintossicato\", \"disinvestito\", \"disinvolto\", \"disistimato\", \"dislocato\", \"dismesso\", \"disobbedito\", \"disobbligato\", \"disonorato\", \"disordinato\", \"disorganizzato\", \"disorientato\", \"disormeggiato\", \"disossato\", \"disossidato\", \"disostruito\", \"disotterrato\", \"disparito\", \"dispensato\", \"dispento\", \"disperduto\", \"disperso\", \"dispeso\", \"dispiegato\", \"dispinto\", \"dispogliato\", \"disposto\", \"dispregiato\", \"disprezzato\", \"dispromesso\", \"disproporzionato\", \"disputato\", \"disqualificato\", \"disrotto\", \"dissacrato\", \"dissalato\", \"dissaldato\", \"dissanguato\", \"dissecato\", \"disseccato\", \"disselciato\", \"dissellato\", \"disseminato\", \"dissepolto\", \"disseppellito\", \"dissequestrato\", \"disserrato\", \"dissestato\", \"dissetato\", \"dissezionato\", \"dissigillato\", \"dissimulato\", \"dissipato\", \"dissociato\", \"dissodato\", \"dissolto\", \"dissomigliato\", \"dissotterrato\", \"dissuaso\", \"dissuggellato\", \"distaccato\", \"distanziato\", \"disteso\", \"distillato\", \"distinto\", \"distolto\", \"distorto\", \"distratto\", \"distretto\", \"distribuito\", \"districato\", \"distrigato\", \"distrutto\", \"disturbato\", \"disubbidito\", \"disumanato\", \"disumanizzato\", \"disunito\", \"disusato\", \"disveduto\", \"disvelato\", \"disvestito\", \"disviato\", \"disvisto\", \"disvolto\", \"disvoluto\", \"dittongato\", \"divallato\", \"divaricato\", \"divelto\", \"diversificato\", \"divertito\", \"divezzato\", \"divinato\", \"divincolato\", \"divinizzato\", \"diviso\", \"divolto\", \"divorato\", \"divorziato\", \"divulgato\", \"documentato\", \"dogato\", \"dogmatizzato\", \"dolcificato\", \"dollarizzato\", \"dolorato\", \"doluto\", \"domandato\", \"domato\", \"domesticato\", \"domiciliato\", \"dominato\", \"donato\", \"dondolato\", \"dopato\", \"doppiato\", \"dorato\", \"dormitoco\", \"dosato\", \"dotato\", \"dovuto\", \"dragato\", \"drammatizzato\", \"drappeggiato\", \"drenato\", \"dribblato\", \"drizzato\", \"drogato\", \"dugliato\", \"duplicato\", \"duramificato\", \"ebraizzato\", \"ecceduto\", \"eccepito\", \"eccettuato\", \"eccitato\", \"echeggiato\", \"eclissato\", \"economizzato\", \"edificato\", \"editato\", \"edotto\", \"educato\", \"edulcorato\", \"effettuato\", \"efficientato\", \"effigiato\", \"effinto\", \"effluito\", \"effuso\", \"egemonizzato\", \"eguagliato\", \"eiettato\", \"elaborato\", \"elargito\", \"elasticizzato\", \"elementarizzato\", \"elemosinato\", \"elencato\", \"eletto\", \"elettrificato\", \"elettrizzato\", \"elettrocoagulato\", \"elettrolizzato\", \"elevato\", \"eliminato\", \"eliso\", \"elitrasportato\", \"ellenizzato\", \"elogiato\", \"elucidato\", \"elucubrato\", \"eluito\", \"eluso\", \"emanato\", \"emancipato\", \"emarginato\", \"embricato\", \"emendato\", \"emesso\", \"emozionato\", \"empito\", \"empiuto\", \"emulato\", \"emulsionato\", \"emunto\", \"encomiato\", \"endocitato\", \"energizzato\", \"enfatizzato\", \"enfiato\", \"entusiasmato\", \"enucleato\", \"enumerato\", \"enunciato\", \"epicureggiato\", \"epurato\", \"equalizzato\", \"equilibrato\", \"equipaggiato\", \"equiparato\", \"eradicato\", \"eraso\", \"ereditato\", \"eretto\", \"erogato\", \"eroicizzato\", \"eroso\", \"erotizzato\", \"erpicato\", \"erso\", \"erudito\", \"eruttato\", \"esacerbato\", \"esagerato\", \"esagitato\", \"esalato\", \"esaltato\", \"esaminato\", \"esasperato\", \"esaudito\", \"esaurito\", \"esautorato\", \"esborsato\", \"escluso\", \"escogitato\", \"escomiato\", \"escoriato\", \"escosso\", \"escusso\", \"esecrato\", \"esecutato\", \"eseguito\", \"esemplificato\", \"esentato\", \"esercitato\", \"esfoliato\", \"esibito\", \"esilarato\", \"esiliato\", \"esimuto\", \"esitato\", \"esonerato\", \"esorbitato\", \"esorcizzato\", \"esortato\", \"espanso\", \"esparso\", \"esperimentato\", \"esperito\", \"espettorato\", \"espiantato\", \"espiato\", \"espirato\", \"espletato\", \"esplicato\", \"esplicitato\", \"esplorato\", \"esploso\", \"esportato\", \"esposto\", \"espresso\", \"espropriato\", \"espugnato\", \"espulso\", \"espunto\", \"espurgato\", \"essiccato\", \"essuto\", \"estasiato\", \"estenuato\", \"esterificato\", \"esteriorizzato\", \"esterminato\", \"esternalizzato\", \"esternato\", \"esteso\", \"estimato\", \"estinto\", \"estirpato\", \"estivato\", \"estorto\", \"estradato\", \"estraniato\", \"estrapolato\", \"estratto\", \"estremizzato\", \"estrinsecato\", \"estromesso\", \"estruso\", \"estubato\", \"esulcerato\", \"esultato\", \"esumato\", \"eterificato\", \"eterizzato\", \"eternato\", \"eternizzato\", \"etichettato\", \"etossilato\", \"euforizzato\", \"europeizzato\", \"evacuato\", \"evangelizzato\", \"evaso\", \"eveto\", \"evidenziato\", \"evinto\", \"evirato\", \"eviscerato\", \"evitato\", \"evocato\", \"evolto\", \"evoluto\", \"evulso\", \"fabbricato\", \"faccettato\", \"facilitato\", \"fagocitato\", \"falciato\", \"falcidiato\", \"fallito\", \"falsato\", \"falsificato\", \"familiarizzato\", \"fanatizzato\", \"fantasticato\", \"farcito\", \"farfugliato\", \"fasciato\", \"fascicolato\", \"fascistizzato\", \"fattacelo\", \"fatto\", \"fattorizzato\", \"fatturato\", \"favellato\", \"favoreggiato\", \"favorito\", \"faxato\", \"fecondato\", \"fedecommesso\", \"federalizzato\", \"federato\", \"felicitato\", \"felpato\", \"feltrato\", \"femminilizzato\", \"fenduto\", \"ferito\", \"fermato\", \"fermentato\", \"ferrato\", \"fertilizzato\", \"fesso\", \"fessurato\", \"festeggiato\", \"festonato\", \"feudalizzato\", \"fiaccato\", \"fiammeggiato\", \"fiancheggiato\", \"ficcato\", \"fidanzato\", \"fidato\", \"fidecommesso\", \"fidelizzato\", \"figliato\", \"figurato\", \"filato\", \"filettato\", \"filmato\", \"filosofato\", \"filtrato\", \"finalizzato\", \"finanziato\", \"finitalo\", \"finito\", \"finlandizzato\", \"fintato\", \"finto\", \"fiocinato\", \"fiondato\", \"fiorettato\", \"firmato\", \"fiscalizzato\", \"fischiato\", \"fischiettato\", \"fissato\", \"fissionato\", \"fitto\", \"fiutato\", \"flagellato\", \"flaggato\", \"flambato\", \"flangiato\", \"flemmatizzato\", \"flesso\", \"flippato\", \"flottato\", \"fluidificato\", \"fluidizzato\", \"fluorizzato\", \"fluorurato\", \"focalizzato\", \"focheggiato\", \"foderato\", \"foggiato\", \"fognato\", \"folgorato\", \"follato\", \"fomentato\", \"fonato\", \"fondato\", \"foracchiato\", \"foraggiato\", \"forato\", \"forestato\", \"forfettizzato\", \"forgiato\", \"formalizzato\", \"formato\", \"formattato\", \"formilato\", \"formulato\", \"fornito\", \"fortificato\", \"forviato\", \"forwardato\", \"forzato\", \"fosfatato\", \"fosforato\", \"fosforilato\", \"fossilizzato\", \"fotocomposto\", \"fotocopiato\", \"fotografato\", \"fottuto\", \"fracassato\", \"frainteso\", \"framesso\", \"frammentato\", \"frammesso\", \"frammezzato\", \"frammischiato\", \"franceseggiato\", \"francesizzato\", \"frangiato\", \"franto\", \"frantumato\", \"frappato\", \"frapposto\", \"fraseggiato\", \"frastagliato\", \"frastornato\", \"fratturato\", \"frazionato\", \"freddato\", \"fregato\", \"fregiato\", \"frenato\", \"frequentato\", \"fresato\", \"frettato\", \"friendzonato\", \"fritto\", \"frizionato\", \"frodato\", \"frollato\", \"fronteggiato\", \"frugato\", \"fruito\", \"frullato\", \"frusciato\", \"frustato\", \"frustrato\", \"fruttato\", \"fucilato\", \"fucinato\", \"fugato\", \"fuggito\", \"fulminato\", \"fumato\", \"fumigato\", \"funestato\", \"funto\", \"funzionato\", \"fuoriuscito\", \"fuorviato\", \"fuso\", \"fustellato\", \"fustigato\", \"gabbato\", \"gabellato\", \"gallato\", \"gallicizzato\", \"gallonato\", \"galvanizzato\", \"gambizzato\", \"garantito\", \"garnettato\", \"garrotato\", \"garzato\", \"gasato\", \"gassato\", \"gassificato\", \"gazato\", \"gelatinizzato\", \"gelato\", \"gelificato\", \"gemellato\", \"gemicato\", \"geminato\", \"generalizzato\", \"generato\", \"gentrificato\", \"genuflesso\", \"geometrizzato\", \"georeferenziato\", \"gerarchizzato\", \"germanizzato\", \"gestito\", \"gettato\", \"gettonato\", \"ghermito\", \"ghettizzato\", \"ghigliottinato\", \"ghindato\", \"gibollato\", \"gingillato\", \"ginnato\", \"giocato\", \"gioito\", \"gionglato\", \"giovaneggiato\", \"girandolato\", \"girato\", \"giudicato\", \"giulebbato\", \"giuntato\", \"giunto\", \"giuracchiato\", \"giurato\", \"giustapposto\", \"giustificato\", \"giustiziato\", \"glamourizzato\", \"glassato\", \"glissato\", \"globalizzato\", \"gloriato\", \"glorificato\", \"glossato\", \"godronato\", \"goduto\", \"goffrato\", \"gommato\", \"gonfiato\", \"googlato\", \"gottato\", \"governato\", \"gradinato\", \"gradito\", \"gradualizzato\", \"graduato\", \"graffato\", \"graffiato\", \"graffito\", \"graficato\", \"grafitato\", \"gramolato\", \"granagliato\", \"grandinato\", \"granellato\", \"granito\", \"granulato\", \"graticciato\", \"graticolato\", \"gratificato\", \"gratinato\", \"grattato\", \"grattugiato\", \"gravato\", \"graziato\", \"grecheggiato\", \"grecizzato\", \"gremito\", \"gridato\", \"griffato\", \"grigliato\", \"grippato\", \"groccato\", \"grondato\", \"grugato\", \"grugnito\", \"guadagnato\", \"gualcito\", \"guardato\", \"guarito\", \"guarnito\", \"guastato\", \"guatato\", \"guerreggiato\", \"gufato\", \"guidato\", \"gustato\", \"hackerato\", \"handicappato\", \"ibridato\", \"idealizzato\", \"ideato\", \"identificato\", \"ideologizzato\", \"idolatrato\", \"idoleggiato\", \"idratato\", \"idrogenato\", \"idrolizzato\", \"iettato\", \"igienizzato\", \"ignifugato\", \"ignorato\", \"illanguidito\", \"illeggiadrito\", \"illividito\", \"illuminato\", \"illuso\", \"illustrato\", \"imbacuccato\", \"imbaldanzito\", \"imballato\", \"imbalsamato\", \"imbambolato\", \"imbandierato\", \"imbandito\", \"imbarbarito\", \"imbarcato\", \"imbarilato\", \"imbastardito\", \"imbastito\", \"imbattuto\", \"imbavagliato\", \"imbeccato\", \"imbellettato\", \"imbellito\", \"imbestialito\", \"imbestiato\", \"imbevuto\", \"imbiaccato\", \"imbiancato\", \"imbianchito\", \"imbibito\", \"imbiettato\", \"imbiondito\", \"imbizzarrito\", \"imboccato\", \"imbonito\", \"imborghesito\", \"imboscato\", \"imboschito\", \"imbottato\", \"imbottigliato\", \"imbottito\", \"imbozzimato\", \"imbracato\", \"imbracciato\", \"imbragato\", \"imbrancato\", \"imbrattato\", \"imbrecciato\", \"imbrigliato\", \"imbrillantinato\", \"imbroccato\", \"imbrodato\", \"imbrogliato\", \"imbronciato\", \"imbruttito\", \"imbucato\", \"imbudellato\", \"imbullettato\", \"imbullonato\", \"imburrato\", \"imbussolato\", \"imbustato\", \"imbutito\", \"imitato\", \"immagazzinato\", \"immaginato\", \"immalinconito\", \"immatricolato\", \"immedesimato\", \"immerso\", \"immesso\", \"immischiato\", \"immiserito\", \"immobilizzato\", \"immolato\", \"immortalato\", \"immunizzato\", \"immusonito\", \"impaccato\", \"impacchettato\", \"impacciato\", \"impadronito\", \"impaginato\", \"impagliato\", \"impalato\", \"impalcato\", \"impallato\", \"impallinato\", \"impalmato\", \"impaludato\", \"impanato\", \"impaniato\", \"impannato\", \"impantanato\", \"impaperato\", \"impapocchiato\", \"impappinato\", \"imparentato\", \"imparruccato\", \"impartito\", \"impastato\", \"impasticcato\", \"impasticciato\", \"impastocchiato\", \"impastoiato\", \"impataccato\", \"impattato\", \"impaurito\", \"impavesato\", \"impeciato\", \"impedicato\", \"impedito\", \"impegnato\", \"impegolato\", \"impelagato\", \"impellicciato\", \"impennacchiato\", \"impennato\", \"impensierito\", \"impepato\", \"imperlato\", \"impermalito\", \"impermeabilizzato\", \"imperniato\", \"impersonato\", \"impersonificato\", \"impestato\", \"impetrato\", \"impiallacciato\", \"impiantato\", \"impiastrato\", \"impiastricciato\", \"impiccato\", \"impicciato\", \"impicciolito\", \"impiccolito\", \"impidocchiato\", \"impiegato\", \"impietosito\", \"impietrito\", \"impigliato\", \"impigrito\", \"impilato\", \"impillaccherato\", \"impinguato\", \"impinto\", \"impinzato\", \"impiombato\", \"impipato\", \"impiumato\", \"implementato\", \"implicato\", \"implorato\", \"impollinato\", \"impolpato\", \"impoltronito\", \"impolverato\", \"impomatato\", \"imporcato\", \"imporporato\", \"importato\", \"importunato\", \"impossessato\", \"impossibilitato\", \"impostato\", \"imposto\", \"impratichito\", \"impregnato\", \"impreso\", \"impressionato\", \"impresso\", \"imprestato\", \"impreziosito\", \"imprigionato\", \"impromesso\", \"improntato\", \"improsciuttito\", \"impugnato\", \"impuntito\", \"impunturato\", \"impupato\", \"imputato\", \"impuzzolentito\", \"inabilitato\", \"inabissato\", \"inacerbito\", \"inacetito\", \"inacidito\", \"inacutito\", \"inaffiato\", \"inalato\", \"inalberato\", \"inalveato\", \"inalzato\", \"inamidato\", \"inanellato\", \"inarcato\", \"inargentato\", \"inaridito\", \"inasprito\", \"inastato\", \"inattivato\", \"inaugurato\", \"incacchiato\", \"incalcinato\", \"incalorito\", \"incalzato\", \"incamerato\", \"incamiciato\", \"incamminato\", \"incanaglito\", \"incanalato\", \"incannato\", \"incannucciato\", \"incaponito\", \"incappottato\", \"incappucciato\", \"incaprettato\", \"incapricciato\", \"incapsulato\", \"incarcerato\", \"incardinato\", \"incaricato\", \"incarnato\", \"incarrozzato\", \"incartato\", \"incartocciato\", \"incartonato\", \"incasellato\", \"incasinato\", \"incassato\", \"incastellato\", \"incastonato\", \"incastrato\", \"incatenato\", \"incatramato\", \"incattivito\", \"incavato\", \"incavigliato\", \"incavolato\", \"incazzato\", \"incellofanato\", \"incendiato\", \"incenerito\", \"incensato\", \"incentivato\", \"incentrato\", \"inceppato\", \"incerato\", \"incernierato\", \"incerottato\", \"inceso\", \"incettato\", \"inchiappettato\", \"inchiavardato\", \"inchiesto\", \"inchinato\", \"inchiodato\", \"inchiostrato\", \"incipriato\", \"inciso\", \"incistato\", \"incitato\", \"inciuccato\", \"incivilito\", \"inclinato\", \"incluso\", \"incoccato\", \"incocciato\", \"incoiato\", \"incollato\", \"incolonnato\", \"incolpato\", \"incominciato\", \"incomodato\", \"incontrato\", \"incoraggiato\", \"incordato\", \"incornato\", \"incorniciato\", \"incoronato\", \"incorporato\", \"incotto\", \"incravattato\", \"incrementato\", \"increspato\", \"incretinito\", \"incriminato\", \"incrinato\", \"incrociato\", \"incrostato\", \"incrudelito\", \"incrudito\", \"incruscato\", \"incubato\", \"inculato\", \"inculcato\", \"incuneato\", \"incuoiato\", \"incuorato\", \"incupito\", \"incuriosito\", \"incurvato\", \"incusso\", \"indagato\", \"indebitato\", \"indebolito\", \"indemaniato\", \"indennizzato\", \"indetto\", \"indicato\", \"indicizzato\", \"indignato\", \"indiretto\", \"indirizzato\", \"indispettito\", \"indisposto\", \"individualizzato\", \"individuato\", \"indolenzito\", \"indorato\", \"indossato\", \"indotto\", \"indottomo\", \"indottrinato\", \"indovinato\", \"indugiato\", \"indulto\", \"indurato\", \"indurito\", \"industrializzato\", \"industriato\", \"inebetito\", \"inebriato\", \"inerito\", \"inerpicato\", \"infagottato\", \"infamato\", \"infangato\", \"infarcito\", \"infarinato\", \"infastidito\", \"infatuato\", \"infeltrito\", \"inferito\", \"inferocito\", \"inferto\", \"infervorato\", \"infestato\", \"infettato\", \"infeudato\", \"infiacchito\", \"infialato\", \"infialettato\", \"infiammato\", \"infiascato\", \"infibulato\", \"inficiato\", \"infilato\", \"infiltrato\", \"infilzato\", \"infingardito\", \"infinocchiato\", \"infinto\", \"infioccato\", \"infiocchettato\", \"infiochito\", \"infiorato\", \"infirmato\", \"infischiato\", \"infisso\", \"infittito\", \"inflazionato\", \"inflesso\", \"inflitto\", \"influenzato\", \"infocato\", \"infoderato\", \"infognato\", \"infoibato\", \"infoltito\", \"inforcato\", \"informatizzato\", \"informato\", \"informicolato\", \"informicolito\", \"infornaciato\", \"infornato\", \"infortunato\", \"infoscato\", \"infossato\", \"infradiciato\", \"inframesso\", \"inframezzato\", \"inframmesso\", \"inframmezzato\", \"infrancesato\", \"infrapposto\", \"infrascato\", \"infrattato\", \"infreddato\", \"infronzolato\", \"infuocato\", \"infurbito\", \"infuriato\", \"ingabbiato\", \"ingaggiato\", \"ingagliardito\", \"ingannato\", \"ingarbugliato\", \"ingavonato\", \"ingegnato\", \"ingegnerizzato\", \"ingelosito\", \"ingemmato\", \"ingenerato\", \"ingentilito\", \"ingerito\", \"ingessato\", \"inghiaiato\", \"inghiottito\", \"inghirlandato\", \"ingiallito\", \"ingigantito\", \"inginocchiato\", \"ingioiellato\", \"ingiunto\", \"ingiuriato\", \"inglesizzato\", \"inglobato\", \"ingoffito\", \"ingoiato\", \"ingolfato\", \"ingollato\", \"ingolosito\", \"ingombrato\", \"ingommato\", \"ingorgato\", \"ingozzato\", \"ingranato\", \"ingrandito\", \"ingrassato\", \"ingraticciato\", \"ingraticolato\", \"ingravidato\", \"ingraziato\", \"ingraziosito\", \"ingrigito\", \"ingrommato\", \"ingrossato\", \"ingrullito\", \"inguaiato\", \"inguainato\", \"ingualdrappato\", \"inguantato\", \"ingurgitato\", \"inibito\", \"iniettato\", \"inimicato\", \"inizializzato\", \"iniziato\", \"inmillato\", \"innacquato\", \"innaffiato\", \"innalzato\", \"innamorato\", \"innastato\", \"innervato\", \"innervosito\", \"innescato\", \"innestato\", \"innevato\", \"innocentato\", \"innocuizzato\", \"innovato\", \"inoculato\", \"inoltrato\", \"inondato\", \"inorgoglito\", \"inorpellato\", \"inorridito\", \"inquadrato\", \"inquietato\", \"inquisito\", \"insabbiato\", \"insacchettato\", \"insalato\", \"insaldato\", \"insalivato\", \"insanguinato\", \"insaponato\", \"insaporito\", \"inscatolato\", \"inscenato\", \"inscritto\", \"insecchito\", \"insediato\", \"insegnato\", \"inseguito\", \"insellato\", \"inselvatichito\", \"inserito\", \"insidiato\", \"insignito\", \"insilato\", \"insinuato\", \"insolentito\", \"insonnolito\", \"insonorizzato\", \"insordito\", \"insospettito\", \"insozzato\", \"inspessito\", \"inspirato\", \"installato\", \"instaurato\", \"insterilito\", \"instillato\", \"instituito\", \"instradato\", \"insudiciato\", \"insufflato\", \"insultato\", \"insuperbito\", \"intabaccato\", \"intabarrato\", \"intaccato\", \"intagliato\", \"intarsiato\", \"intasato\", \"intascato\", \"intavolato\", \"integrato\", \"intelaiato\", \"intelato\", \"intellettualizzato\", \"intenebrato\", \"intenerito\", \"intensificato\", \"intentato\", \"intepidito\", \"intercalato\", \"intercambiato\", \"intercettato\", \"interciso\", \"intercluso\", \"intercollegato\", \"interconnesso\", \"interconvertito\", \"interdetto\", \"interessato\", \"interfacciato\", \"interfogliato\", \"interfoliato\", \"interiorizzato\", \"interlacciato\", \"interlineato\", \"intermesso\", \"intermezzato\", \"internalizzato\", \"internato\", \"internazionalizzato\", \"interpellato\", \"interpenetrato\", \"interpolato\", \"interposto\", \"interpretato\", \"interpunto\", \"interrato\", \"interrogato\", \"interrotto\", \"intersecato\", \"intervallato\", \"intervistato\", \"inteso\", \"intessuto\", \"intestardito\", \"intestato\", \"intiepidito\", \"intimato\", \"intimidito\", \"intimorito\", \"intinto\", \"intirizzito\", \"intitolato\", \"intonacato\", \"intonato\", \"intontito\", \"intorbidato\", \"intorbidito\", \"intorpidito\", \"intortato\", \"intossicato\", \"intralciato\", \"intramesso\", \"intramezzato\", \"intrappolato\", \"intrapreso\", \"intrattenuto\", \"intraveduto\", \"intravisto\", \"intravveduto\", \"intravvisto\", \"intrecciato\", \"intricato\", \"intrigato\", \"intrinsecato\", \"intrippato\", \"intriso\", \"introdotto\", \"introflesso\", \"introiettato\", \"introitato\", \"intromesso\", \"intronato\", \"intronizzato\", \"intruduto\", \"intrufolato\", \"intrugliato\", \"intruppato\", \"intruso\", \"intubato\", \"intubettato\", \"intuito\", \"inumato\", \"inumidito\", \"inurbato\", \"inutilizzato\", \"invaghito\", \"invaginato\", \"invalidato\", \"invasato\", \"invaso\", \"invelenito\", \"inventariato\", \"inventato\", \"invenuto\", \"inverdito\", \"invergato\", \"inverniciato\", \"investigato\", \"investito\", \"invetriato\", \"inviato\", \"invidiato\", \"invigorito\", \"inviluppato\", \"invischiato\", \"invitato\", \"invocato\", \"invogliato\", \"involato\", \"involgarito\", \"involtato\", \"involto\", \"inzaccherato\", \"inzeppato\", \"inzigato\", \"inzolfato\", \"inzuccato\", \"inzuccherato\", \"inzuppato\", \"iodurato\", \"ionizzato\", \"ipertrofizzato\", \"ipnotizzato\", \"ipostatizzato\", \"ipotecato\", \"ipotizzato\", \"iridato\", \"irradiato\", \"irraggiato\", \"irreggimentato\", \"irretito\", \"irrigato\", \"irrigidito\", \"irriso\", \"irritato\", \"irrobustito\", \"irrogato\", \"irrorato\", \"irrugginito\", \"irruvidito\", \"ischeletrito\", \"iscritto\", \"islamizzato\", \"isolato\", \"isomerizzato\", \"ispanizzato\", \"ispessito\", \"ispezionato\", \"ispirato\", \"issato\", \"istallato\", \"istanziato\", \"istaurato\", \"isterilito\", \"istigato\", \"istillato\", \"istituito\", \"istituzionalizzato\", \"istoriato\", \"istradato\", \"istruito\", \"istupidito\", \"italianeggiato\", \"italianizzato\", \"iterato\", \"iudicato\", \"killerato\", \"labbreggiato\", \"labializzato\", \"laccato\", \"lacerato\", \"laconizzato\", \"lacrimato\", \"ladroneggiato\", \"lagnato\", \"lagrimato\", \"laicizzato\", \"lambiccato\", \"lambito\", \"lamentato\", \"laminato\", \"lanciato\", \"lapidato\", \"lappato\", \"lardato\", \"lardellato\", \"largito\", \"larvato\", \"lascato\", \"lasciato\", \"lastricato\", \"latinizzato\", \"laudato\", \"laureato\", \"lavato\", \"lavorato\", \"leccato\", \"legalizzato\", \"legato\", \"leggicchiato\", \"leggiucchiato\", \"legittimato\", \"legittimizzato\", \"legnato\", \"lemmatizzato\", \"lenito\", \"lesinato\", \"lesionato\", \"leso\", \"lessato\", \"letto\", \"levato\", \"levigato\", \"liberalizzato\", \"liberato\", \"licenziato\", \"lievitato\", \"liftato\", \"lignificato\", \"limato\", \"limitato\", \"linciato\", \"linearizzato\", \"lineato\", \"linkato\", \"liofilizzato\", \"liquefatto\", \"liquidato\", \"lisato\", \"lisciato\", \"lisciviato\", \"listato\", \"litografato\", \"livellato\", \"lizzato\", \"lobotomizzato\", \"localizzato\", \"locato\", \"lodato\", \"logorato\", \"lordato\", \"lottato\", \"lottizzato\", \"lubrificato\", \"lucchettato\", \"lucidato\", \"lucrato\", \"lumeggiato\", \"luppolizzato\", \"lusingato\", \"lussato\", \"lustrato\", \"macadamizzato\", \"macchiato\", \"macchinato\", \"macellato\", \"macerato\", \"maciullato\", \"maggesato\", \"maggiorato\", \"magnato\", \"magnetizzato\", \"magnificato\", \"maiolicato\", \"maledetto\", \"malfatto\", \"malignato\", \"malmenato\", \"malmesso\", \"maltato\", \"maltrattato\", \"malveduto\", \"malversato\", \"malvisto\", \"malvoluto\", \"mandato\", \"mandrinato\", \"manducato\", \"maneggiato\", \"manganato\", \"manganellato\", \"mangiato\", \"mangiucchiato\", \"manifatturato\", \"manifestato\", \"manimesso\", \"manipolato\", \"manlevato\", \"manomesso\", \"manoscritto\", \"manovrato\", \"mansuefatto\", \"mantecato\", \"mantenutaso\", \"mantenuto\", \"manualizzato\", \"manutenuto\", \"mappato\", \"marcato\", \"marchiato\", \"marcito\", \"marezzato\", \"marginalizzato\", \"marginato\", \"margottato\", \"marimesso\", \"marinato\", \"maritato\", \"marmorizzato\", \"marnato\", \"marocchinato\", \"martellato\", \"martellinato\", \"martirizzato\", \"martoriato\", \"mascherato\", \"maschiato\", \"maschiettato\", \"mascolinizzato\", \"massacrato\", \"massaggiato\", \"massellato\", \"massicciato\", \"massificato\", \"massimato\", \"massimizzato\", \"mastectomizzato\", \"masterizzato\", \"masticato\", \"masturbato\", \"matematizzato\", \"materializzato\", \"matricolato\", \"mattonato\", \"maturato\", \"mazziato\", \"mazzolato\", \"meccanizzato\", \"medagliato\", \"mediato\", \"medicalizzato\", \"medicato\", \"meditato\", \"membrato\", \"memorizzato\", \"menato\", \"mendicato\", \"menomato\", \"mentovato\", \"menzionato\", \"meravigliato\", \"mercanteggiato\", \"mercerizzato\", \"mercificato\", \"meriato\", \"meridionalizzato\", \"meritato\", \"merlato\", \"merlettato\", \"merso\", \"mesciato\", \"mesciuto\", \"mescolato\", \"mescuto\", \"mesmerizzato\", \"messaggiato\", \"messo\", \"messoco\", \"mestato\", \"mesticato\", \"mestruato\", \"metabolizzato\", \"metaforeggiato\", \"metaforizzato\", \"metallizzato\", \"metamorfizzato\", \"metamorfosato\", \"metanizzato\", \"metilato\", \"metodizzato\", \"microfilmato\", \"microfonato\", \"microminiaturizzato\", \"micronizzato\", \"mietuto\", \"migliorato\", \"militarizzato\", \"millantato\", \"millimetrato\", \"mimato\", \"mimeografato\", \"mimetizzato\", \"minacciato\", \"minato\", \"minchionato\", \"mineralizzato\", \"miniato\", \"miniaturizzato\", \"minimizzato\", \"minuito\", \"minuzzato\", \"miracolato\", \"miscelato\", \"mischiato\", \"misconosciuto\", \"missato\", \"mistificato\", \"misturato\", \"misurato\", \"miticizzato\", \"mitigato\", \"mitizzato\", \"mitragliato\", \"mitrato\", \"mixato\", \"mobiliato\", \"mobilitato\", \"mobilizzato\", \"modanato\", \"modellato\", \"modellizzato\", \"moderato\", \"modernizzato\", \"modificato\", \"modulato\", \"molato\", \"molestato\", \"mollato\", \"molleggiato\", \"moltiplicato\", \"monacato\", \"mondato\", \"mondializzato\", \"monetarizzato\", \"monetato\", \"monetizzato\", \"monitorato\", \"monitorizzato\", \"monocromatizzato\", \"monopolizzato\", \"monottongato\", \"montato\", \"monumentalizzato\", \"mordenzato\", \"mordicchiato\", \"mormorato\", \"morphato\", \"morsicato\", \"morsicchiato\", \"morso\", \"mortasato\", \"mortificato\", \"mosso\", \"mostrato\", \"motivato\", \"motorizzato\", \"motteggiato\", \"movimentato\", \"mozzato\", \"mugolato\", \"mulcito\", \"multato\", \"multiplexato\", \"mummificato\", \"municipalizzato\", \"munito\", \"munto\", \"murato\", \"musato\", \"musicato\", \"mussato\", \"mutato\", \"mutilato\", \"mutizzato\", \"mutuato\", \"nappato\", \"narcotizzato\", \"narrativizzato\", \"narrato\", \"nasalizzato\", \"nascoso\", \"nascosto\", \"nastrato\", \"naturaleggiato\", \"naturalizzato\", \"nauseato\", \"naverato\", \"navicato\", \"navigato\", \"nazificato\", \"nazionalizzato\", \"nebulizzato\", \"necessitato\", \"necrosato\", \"necrotizzato\", \"negativizzato\", \"negato\", \"negletto\", \"negoziato\", \"negreggiato\", \"neologizzato\", \"nerbato\", \"nericato\", \"nettato\", \"neutralizzato\", \"nevato\", \"nevicato\", \"nevischiato\", \"nevrotizzato\", \"nichelato\", \"niellato\", \"ninfeggiato\", \"ninnato\", \"ninnolato\", \"nitratato\", \"nitrificato\", \"nobilitato\", \"noiato\", \"noleggiato\", \"nomato\", \"nominalizzato\", \"nominato\", \"normalizzato\", \"normato\", \"notato\", \"notificato\", \"notiziato\", \"notricato\", \"noverato\", \"nuclearizzato\", \"nudricato\", \"nullificato\", \"numerato\", \"numerizzato\", \"nuotato\", \"nutrito\", \"obbiettato\", \"obbliato\", \"obbligato\", \"oberato\", \"obiettato\", \"obiettivato\", \"obiettivizzato\", \"obiurgato\", \"obliato\", \"obliterato\", \"obnubilato\", \"occasionato\", \"occhieggiato\", \"occidentalizzato\", \"occiso\", \"occluso\", \"occultato\", \"occupato\", \"ocheggiato\", \"odiato\", \"odorato\", \"odorizzato\", \"offerito\", \"offerto\", \"offeso\", \"officiato\", \"offiziato\", \"offuscato\", \"ofiziato\", \"oggettivato\", \"oggettivizzato\", \"oggettualizzato\", \"oliato\", \"olito\", \"olografato\", \"oltraggiato\", \"oltrapassato\", \"oltrepassato\", \"omaggiato\", \"ombrato\", \"ombreggiato\", \"omesso\", \"omogeneizzato\", \"omogenizzato\", \"omologato\", \"ondato\", \"ondulato\", \"onestato\", \"onnubilato\", \"onorato\", \"opacato\", \"opacizzato\", \"operato\", \"opinato\", \"oppiato\", \"oppignorato\", \"oppilato\", \"opposto\", \"oppresso\", \"oppugnato\", \"oprato\", \"opsonizzato\", \"optato\", \"opzionato\", \"orbitato\", \"orchestrato\", \"ordinato\", \"ordito\", \"orecchiato\", \"organato\", \"organicato\", \"organizzato\", \"orgasmato\", \"orientalizzato\", \"orientato\", \"originato\", \"origliato\", \"orizzontato\", \"orlato\", \"orlettato\", \"ormato\", \"ormeggiato\", \"ornato\", \"orpellato\", \"orrato\", \"orripilato\", \"ortogonalizzato\", \"osannato\", \"osato\", \"osculato\", \"oscurato\", \"ospedalizzato\", \"ospitato\", \"osseduto\", \"ossequiato\", \"osservato\", \"ossessionato\", \"ossidato\", \"ossificato\", \"ossitonizzato\", \"ostacolato\", \"osteggiato\", \"ostentato\", \"ostinato\", \"ostracizzato\", \"ostruito\", \"ottemperato\", \"ottenebrato\", \"ottenuto\", \"ottimalizzato\", \"ottimato\", \"ottimizzato\", \"ottonato\", \"ottriato\", \"ottuplicato\", \"otturato\", \"ottuso\", \"ottusso\", \"ovalizzato\", \"ovariectomizzato\", \"ovattato\", \"overcloccato\", \"ovrato\", \"ovviato\", \"ozieggiato\", \"ozonizzato\", \"pacato\", \"pacciamato\", \"pacificato\", \"padroneggiato\", \"paganizzato\", \"pagato\", \"paginato\", \"palafittato\", \"palatalizzato\", \"palato\", \"palesato\", \"palettato\", \"palettizzato\", \"palificato\", \"palleggiato\", \"pallettizzato\", \"palpato\", \"palpeggiato\", \"panato\", \"panneggiato\", \"panoramicato\", \"pappato\", \"paracadutato\", \"parafato\", \"paraffinato\", \"parafrasato\", \"paragonato\", \"paragrafato\", \"paralizzato\", \"parallelizzato\", \"parametrato\", \"parametrizzato\", \"parassitato\", \"parato\", \"parcato\", \"parcellizzato\", \"parcheggiato\", \"pareggiato\", \"parificato\", \"parkerizzato\", \"parlato\", \"parlucchiato\", \"parodiato\", \"partecipato\", \"particolareggiato\", \"particolarizzato\", \"partizionato\", \"partorito\", \"parzializzato\", \"pasciuto\", \"pascolato\", \"passato\", \"passeggiato\", \"passionato\", \"passivato\", \"pasticciato\", \"pastorizzato\", \"pasturato\", \"patinato\", \"patito\", \"patrocinato\", \"patteggiato\", \"pattugliato\", \"pattuito\", \"paventato\", \"pavesato\", \"pavimentato\", \"pavoneggiato\", \"pazziato\", \"pedinato\", \"pedonalizzato\", \"peggiorato\", \"pelato\", \"pellettizzato\", \"penalizzato\", \"penetrato\", \"pennellato\", \"pensato\", \"pensionato\", \"pentito\", \"pepato\", \"peptonizzato\", \"peragrato\", \"percentualizzato\", \"percepito\", \"percolato\", \"percorso\", \"percosso\", \"perdonato\", \"perdotto\", \"perduto\", \"perequato\", \"perfatto\", \"perfezionato\", \"perforato\", \"performato\", \"perito\", \"periziato\", \"perlustrato\", \"permeato\", \"permesso\", \"perorato\", \"perpetrato\", \"perpetuato\", \"perplimuto\", \"perquisito\", \"perscrutato\", \"perseguitato\", \"perseguito\", \"perso\", \"personalizzato\", \"personificato\", \"persuaso\", \"perturbato\", \"pervaso\", \"pervertito\", \"pesato\", \"pescato\", \"pestato\", \"petrarcheggiato\", \"pettegolato\", \"pettinato\", \"piagato\", \"piaggiato\", \"piallato\", \"pianeggiato\", \"pianificato\", \"piantato\", \"piantatalo\", \"piantato\", \"pianto\", \"piantonato\", \"piantumato\", \"piastrellato\", \"piatito\", \"piazzato\", \"picchettato\", \"picchiato\", \"picchierellato\", \"picchiettato\", \"picconato\", \"piegato\", \"pieghettato\", \"pietrificato\", \"pigiato\", \"pigliato\", \"pigmentato\", \"pignorato\", \"pigolato\", \"pilotato\", \"pimentato\", \"pinto\", \"pinzato\", \"piombato\", \"piovigginato\", \"piovuto\", \"pipato\", \"pippato\", \"piratato\", \"pirogenato\", \"pisciato\", \"pitoccato\", \"pittato\", \"pitturato\", \"pizzicato\", \"pizzicottato\", \"placato\", \"placcato\", \"plagiato\", \"plasmato\", \"plasticato\", \"plastificato\", \"platinato\", \"plissettato\", \"pluralizzato\", \"poetato\", \"poeticizzato\", \"poggiato\", \"polarizzato\", \"poligrafato\", \"polimerizzato\", \"politicizzato\", \"polverizzato\", \"pomiciato\", \"pompato\", \"ponderato\", \"ponzato\", \"popolarizzato\", \"popolato\", \"poppato\", \"porcellanato\", \"porfirizzato\", \"portato\", \"porteso\", \"porto\", \"porzionato\", \"posato\", \"posdatato\", \"positivizzato\", \"posizionato\", \"posposto\", \"posseduto\", \"postato\", \"postdatato\", \"posteggiato\", \"posticipato\", \"postillato\", \"posto\", \"postsincronizzato\", \"postulato\", \"potabilizzato\", \"potato\", \"potenziato\", \"potuto\", \"pralinato\", \"praticato\", \"preaccennato\", \"preannunciato\", \"preannunziato\", \"preavvertito\", \"preavvisato\", \"precaricato\", \"preceduto\", \"precettato\", \"precinto\", \"precisato\", \"precluso\", \"precompilato\", \"precompresso\", \"preconfezionato\", \"preconizzato\", \"preconosciuto\", \"precorso\", \"precostituito\", \"predato\", \"predefinito\", \"predestinato\", \"predeterminato\", \"predetto\", \"predicato\", \"predigerito\", \"prediletto\", \"predisposto\", \"preeletto\", \"preesistuto\", \"prefabbricato\", \"prefato\", \"prefatto\", \"prefazionato\", \"preferito\", \"prefigurato\", \"prefinanziato\", \"prefissato\", \"prefisso\", \"preformato\", \"pregato\", \"pregiato\", \"pregiudicato\", \"pregustato\", \"preimpregnato\", \"prelevato\", \"premeditato\", \"premescolato\", \"premesso\", \"premiato\", \"premonito\", \"premunito\", \"premurato\", \"premuto\", \"prenotato\", \"preoccupato\", \"preordinato\", \"preparato\", \"prepensionato\", \"prepigmentato\", \"preposto\", \"preprogrammato\", \"preraffreddato\", \"prerefrigerato\", \"preregistrato\", \"preregolato\", \"preriscaldato\", \"preso\", \"presagito\", \"presaputo\", \"presaselo\", \"prescelto\", \"prescritto\", \"preseduto\", \"presegnalato\", \"preselezionato\", \"presentato\", \"presentito\", \"preservato\", \"presidiato\", \"presieduto\", \"preso\", \"pressato\", \"presso\", \"pressurizzato\", \"prestabilito\", \"prestampato\", \"prestato\", \"prestigiato\", \"presunto\", \"presupposto\", \"pretermesso\", \"preteso\", \"pretrattato\", \"prevaricato\", \"preveduto\", \"prevenduto\", \"preventivato\", \"prevenuto\", \"previsto\", \"prezzato\", \"prezzolato\", \"principiato\", \"privatizzato\", \"privato\", \"privilegiato\", \"problematizzato\", \"procacciato\", \"processato\", \"proclamato\", \"procrastinato\", \"procreato\", \"procurato\", \"prodigato\", \"prodotto\", \"profanato\", \"proferito\", \"professato\", \"professionalizzato\", \"profetato\", \"profetizzato\", \"profferito\", \"profilato\", \"profondato\", \"profumato\", \"profuso\", \"progettato\", \"prognosticato\", \"programmato\", \"proibito\", \"proiettato\", \"proletarizzato\", \"prolungato\", \"promanato\", \"promesso\", \"promosso\", \"promozionato\", \"promulgato\", \"pronosticato\", \"pronunciato\", \"pronunziato\", \"propagandato\", \"propagato\", \"propagginato\", \"propalato\", \"propinato\", \"propiziato\", \"proporzionato\", \"proposto\", \"propugnato\", \"propulso\", \"prorogato\", \"prosciolto\", \"prosciugato\", \"proscritto\", \"proseguito\", \"prospettato\", \"prosternato\", \"prosteso\", \"prostituito\", \"prostrato\", \"prosunto\", \"proteso\", \"protestato\", \"protetto\", \"protocollato\", \"protonato\", \"protratto\", \"protruso\", \"provato\", \"proveduto\", \"provincializzato\", \"provisto\", \"provocato\", \"provveduto\", \"provvisto\", \"psicanalizzato\", \"psichiatrizzato\", \"psicoanalizzato\", \"psicologizzato\", \"pubblicato\", \"pubblicizzato\", \"puddellato\", \"pugnalato\", \"pulito\", \"pungolato\", \"punito\", \"puntato\", \"punteggiato\", \"puntellato\", \"punto\", \"puntualizzato\", \"punzecchiato\", \"punzonato\", \"purgato\", \"purificato\", \"putito\", \"putrefatto\", \"putrito\", \"quadrato\", \"quadrettato\", \"quadriennalizzato\", \"quadruplicato\", \"qualificato\", \"quantificato\", \"quantizzato\", \"querelato\", \"questuato\", \"quetato\", \"quietanzato\", \"quietato\", \"quintessenziato\", \"quintuplicato\", \"quotato\", \"quotizzato\", \"rabberciato\", \"rabboccato\", \"rabbonito\", \"rabbuffato\", \"rabuffato\", \"raccapezzato\", \"raccapricciato\", \"raccattato\", \"raccerchiato\", \"racceso\", \"racchetato\", \"racchiuso\", \"raccolto\", \"raccolto\", \"raccomandato\", \"raccomodato\", \"raccontato\", \"raccorciato\", \"raccorcito\", \"raccordato\", \"raccostato\", \"raccozzato\", \"racemizzato\", \"racimolato\", \"radazzato\", \"raddensato\", \"raddobbato\", \"raddolcito\", \"raddoppiato\", \"raddotto\", \"raddrizzato\", \"radiato\", \"radicalizzato\", \"radioassistito\", \"radioattivato\", \"radiocomandato\", \"radiodiffuso\", \"radiografato\", \"radioguidato\", \"radiolocalizzato\", \"radiomarcato\", \"radiotelegrafato\", \"radiotrasmesso\", \"radunato\", \"raffazzonato\", \"raffermato\", \"raffigurato\", \"raffilato\", \"raffinato\", \"rafforzato\", \"raffreddato\", \"raffrenato\", \"raffrescato\", \"raffrontato\", \"raggelato\", \"raggentilito\", \"ragghiato\", \"raggirato\", \"raggiunto\", \"raggiustato\", \"raggomitolato\", \"raggranchiato\", \"raggranchito\", \"raggranellato\", \"raggrinzato\", \"raggrinzito\", \"raggrumato\", \"raggruppato\", \"raggruzzolato\", \"ragguagliato\", \"ralingato\", \"rallegrato\", \"rallentato\", \"ramato\", \"ramazzato\", \"rammagliato\", \"rammaricato\", \"rammemorato\", \"rammendato\", \"rammentato\", \"rammodernato\", \"rammollito\", \"rammorbidito\", \"rampognato\", \"randellato\", \"randomizzato\", \"rannicchiato\", \"rannuvolato\", \"ranzato\", \"rapato\", \"rapinato\", \"rapito\", \"rappacificato\", \"rappato\", \"rappattumato\", \"rappezzato\", \"rapportato\", \"rappresantato\", \"rappresentato\", \"rappreso\", \"rarefatto\", \"rasato\", \"raschiato\", \"raschiettato\", \"rasentato\", \"raso\", \"raspato\", \"rassegnato\", \"rasserenato\", \"rassettato\", \"rassicurato\", \"rassodato\", \"rassomigliato\", \"rassottigliato\", \"rassunto\", \"rastrellato\", \"rastremato\", \"rateato\", \"rateizzato\", \"ratificato\", \"ratinato\", \"rattizzato\", \"rattoppato\", \"rattorto\", \"rattrappito\", \"rattristato\", \"rattristito\", \"raunato\", \"ravvalorato\", \"ravveduto\", \"ravviato\", \"ravvicinato\", \"ravviluppato\", \"ravvisato\", \"ravvisto\", \"ravvivato\", \"ravvolto\", \"ravvoltolato\", \"razionalizzato\", \"razionato\", \"razziato\", \"razzolato\", \"realizzato\", \"reassunto\", \"recapitato\", \"recato\", \"receduto\", \"recensito\", \"recepito\", \"recidivato\", \"recintato\", \"recinto\", \"reciprocato\", \"reciso\", \"recitato\", \"reclamato\", \"reclamizzato\", \"reclinato\", \"recluso\", \"reclutato\", \"recuperato\", \"redarguito\", \"redatto\", \"redazzato\", \"redduto\", \"redento\", \"redistribuito\", \"redotto\", \"referenziato\", \"refertato\", \"refilato\", \"reflesso\", \"reflettuto\", \"refranto\", \"refrigerato\", \"regalato\", \"regimato\", \"regimentato\", \"regionalizzato\", \"registrato\", \"regolamentato\", \"regolarizzato\", \"regolato\", \"reidratato\", \"reificato\", \"reimbarcato\", \"reimmerso\", \"reimmesso\", \"reimparato\", \"reimpastato\", \"reimpiantato\", \"reimpiegato\", \"reimportato\", \"reimpostato\", \"reincarcerato\", \"reincaricato\", \"reincarnato\", \"reinciso\", \"reincontrato\", \"reindirizzato\", \"reindustrializzato\", \"reinfettato\", \"reingaggiato\", \"reinizializzato\", \"reinnestato\", \"reinoltrato\", \"reinscritto\", \"reinsediato\", \"reinserito\", \"reinstallato\", \"reinstaurato\", \"reintegrato\", \"reinterpretato\", \"reintitolato\", \"reintrodotto\", \"reinventato\", \"reinvestito\", \"reiterato\", \"relativizzato\", \"relazionato\", \"relegato\", \"remixato\", \"remunerato\", \"renderizzato\", \"reperito\", \"repertato\", \"replicato\", \"represso\", \"repulso\", \"reputato\", \"requisito\", \"rescisso\", \"resecato\", \"resettato\", \"residuato\", \"resinificato\", \"reso\", \"resolato\", \"resolto\", \"respinto\", \"respirato\", \"responsabilizzato\", \"resposto\", \"restaurato\", \"restituito\", \"resunto\", \"resuscitato\", \"reticolato\", \"retinato\", \"retribuito\", \"retroceduto\", \"retrocesso\", \"retrodatato\", \"rettificato\", \"retto\", \"reumatizzato\", \"revisionato\", \"revocato\", \"riabbassato\", \"riabbellito\", \"riabbonato\", \"riabbottonato\", \"riabbracciato\", \"riabilitato\", \"riabitato\", \"riabituato\", \"riaccaduto\", \"riaccasato\", \"riacceso\", \"riaccettato\", \"riacchiappato\", \"riacciuffato\", \"riaccolto\", \"riaccomodato\", \"riaccompagnato\", \"riaccordato\", \"riaccostato\", \"riaccreditato\", \"riacquisito\", \"riacquistato\", \"riacutizzato\", \"riadattato\", \"riaddestrato\", \"riaddormentato\", \"riadoperato\", \"riaffacciato\", \"riaffermato\", \"riafferrato\", \"riaffiorato\", \"riaffittato\", \"riaffrontato\", \"riagganciato\", \"riaggiornato\", \"riaggiustato\", \"riaggravato\", \"riaggregato\", \"riagguantato\", \"rialimentato\", \"riallacciato\", \"riallargato\", \"riallineato\", \"riallocato\", \"riallungato\", \"rialzato\", \"riamato\", \"riambientato\", \"riammalato\", \"riammesso\", \"riammodernato\", \"riammogliato\", \"rianimato\", \"riannesso\", \"riannodato\", \"riannunciato\", \"riaperto\", \"riappacificato\", \"riappaltato\", \"riapparecchiato\", \"riapparito\", \"riappeso\", \"riappiccicato\", \"riapplicato\", \"riappreso\", \"riapprodato\", \"riappropriato\", \"riapprovato\", \"riarmato\", \"riarrangiato\", \"riarredato\", \"riascoltato\", \"riasfaltato\", \"riassalito\", \"riassaporato\", \"riassegnato\", \"riassemblato\", \"riassestato\", \"riassettato\", \"riassicurato\", \"riassociato\", \"riassopito\", \"riassorbito\", \"riassunto\", \"riattaccato\", \"riattato\", \"riatteso\", \"riattinto\", \"riattivato\", \"riattizzato\", \"riattraversato\", \"riaumentato\", \"riavuto\", \"riavventato\", \"riavvertito\", \"riavviato\", \"riavvicinato\", \"riavvinto\", \"riavvisato\", \"riavvistato\", \"riavvolto\", \"riazzuffato\", \"ribaciato\", \"ribadito\", \"ribaltato\", \"ribassato\", \"ribattezzato\", \"ribattuto\", \"ribellato\", \"ribenedetto\", \"ribevuto\", \"ributtato\", \"ricacciato\", \"ricalato\", \"ricalcato\", \"ricalcificato\", \"ricalcitrato\", \"ricalcolato\", \"ricalibrato\", \"ricamato\", \"ricambiato\", \"ricanalizzato\", \"ricandidato\", \"ricantato\", \"ricapitalizzato\", \"ricapitolato\", \"ricaricato\", \"ricategorizzato\", \"ricattato\", \"ricavato\", \"ricelebrato\", \"ricercato\", \"ricetrasmesso\", \"ricettato\", \"ricevuto\", \"richiamato\", \"richiesto\", \"richiuso\", \"riciclato\", \"ricinto\", \"ricircolato\", \"riclassificato\", \"ricodificato\", \"ricollegato\", \"ricollocato\", \"ricolmato\", \"ricolonizzato\", \"ricolorato\", \"ricolorito\", \"ricoltivato\", \"ricombinato\", \"ricominciato\", \"ricommesso\", \"ricomparito\", \"ricompattato\", \"ricompensato\", \"ricomperato\", \"ricompilato\", \"ricompiuto\", \"ricomposto\", \"ricomprato\", \"ricompresso\", \"ricomunicato\", \"riconceduto\", \"riconcesso\", \"riconciliato\", \"ricondizionato\", \"ricondotto\", \"riconfermato\", \"riconfezionato\", \"riconfigurato\", \"riconfortato\", \"riconfuso\", \"ricongelato\", \"ricongiunto\", \"riconnesso\", \"riconosciuto\", \"riconquistato\", \"riconsacrato\", \"riconsegnato\", \"riconsiderato\", \"riconsigliato\", \"riconsolato\", \"ricontato\", \"ricontattato\", \"ricontrattato\", \"ricontratto\", \"ricontrollato\", \"riconvalidato\", \"riconvenuto\", \"riconvertito\", \"riconvinto\", \"riconvocato\", \"riconvogliato\", \"ricoperto\", \"ricopiato\", \"ricordato\", \"ricoricato\", \"ricorretto\", \"ricosparso\", \"ricostituito\", \"ricostretto\", \"ricostruito\", \"ricotto\", \"ricoverato\", \"ricreato\", \"ricristallizzato\", \"ricrocifisso\", \"ricucito\", \"ricuperato\", \"ricusato\", \"ridato\", \"ridecorato\", \"ridefinito\", \"ridenominato\", \"ridestato\", \"rideterminato\", \"ridetto\", \"ridicolizzato\", \"ridigitato\", \"ridimensionato\", \"ridipinto\", \"ridisceso\", \"ridisciolto\", \"ridisciplinato\", \"ridiscusso\", \"ridisegnato\", \"ridisfatto\", \"ridisposto\", \"ridisteso\", \"ridistinto\", \"ridistribuito\", \"ridiviso\", \"ridomandato\", \"ridonato\", \"ridondato\", \"ridorato\", \"ridotato\", \"ridotto\", \"ridovuto\", \"riecheggiato\", \"riedificato\", \"rieducato\", \"rielaborato\", \"rieletto\", \"riemesso\", \"riempito\", \"riempiuto\", \"rientrato\", \"riepilogato\", \"riequilibrato\", \"riequipaggiato\", \"riesaminato\", \"rieseguito\", \"riesercitato\", \"riesploso\", \"riesportato\", \"riesposto\", \"riespresso\", \"riespulso\", \"riesteso\", \"riesumato\", \"rietichettato\", \"rievaporato\", \"rievocato\", \"rifabbricato\", \"rifasciato\", \"rifatto\", \"rifenduto\", \"riferito\", \"rifermato\", \"rifermentato\", \"rifesso\", \"rificcato\", \"rifilato\", \"rifiltrato\", \"rifinanziato\", \"rifinito\", \"rifirmato\", \"rifischiato\", \"rifisso\", \"rifiutato\", \"riflesso\", \"riflettuto\", \"rifocillato\", \"rifoderato\", \"rifondato\", \"riforestato\", \"riforgiato\", \"riformato\", \"riformattato\", \"riformulato\", \"rifornito\", \"rifranto\", \"rifritto\", \"rifrugato\", \"rifuggito\", \"rifugiato\", \"rifuso\", \"rigassificato\", \"rigato\", \"rigelato\", \"rigenerato\", \"rigettato\", \"righettato\", \"rigiocato\", \"rigirato\", \"rigiudicato\", \"rigiunto\", \"rigoduto\", \"rigonfiato\", \"rigovernato\", \"riguadagnato\", \"riguardato\", \"rigurgitato\", \"rilanciato\", \"rilasciato\", \"rilassato\", \"rilavato\", \"rilavorato\", \"rilegato\", \"riletto\", \"rilevato\", \"rilocalizzato\", \"rimagliato\", \"rimandato\", \"rimaneggiato\", \"rimangiato\", \"rimappato\", \"rimarcato\", \"rimarchiato\", \"rimarginato\", \"rimaritato\", \"rimasticato\", \"rimato\", \"rimbacuccato\", \"rimbaldanzito\", \"rimbarcato\", \"rimbeccato\", \"rimbecillito\", \"rimbellito\", \"rimbiancato\", \"rimbiondito\", \"rimboccato\", \"rimbombato\", \"rimborsato\", \"rimboscato\", \"rimboschito\", \"rimbrottato\", \"rimediato\", \"rimembrato\", \"rimemorato\", \"rimenato\", \"rimeritato\", \"rimescolato\", \"rimesso\", \"rimestato\", \"rimilitarizzato\", \"rimirato\", \"rimischiato\", \"rimisurato\", \"rimodellato\", \"rimodernato\", \"rimodulato\", \"rimondato\", \"rimontato\", \"rimorchiato\", \"rimorso\", \"rimosso\", \"rimostrato\", \"rimotivato\", \"rimpacchettato\", \"rimpadronito\", \"rimpaginato\", \"rimpagliato\", \"rimpannucciato\", \"rimpastato\", \"rimpatriato\", \"rimpiallacciato\", \"rimpianto\", \"rimpiattato\", \"rimpiazzato\", \"rimpicciolito\", \"rimpiccolito\", \"rimpiegato\", \"rimpinguato\", \"rimpinzato\", \"rimpolpato\", \"rimpossessato\", \"rimpresso\", \"rimproverato\", \"rimuginato\", \"rimunerato\", \"rimunto\", \"rimusicato\", \"rimutato\", \"rinarrato\", \"rinascosto\", \"rincalcato\", \"rincalzato\", \"rincamminato\", \"rincantucciato\", \"rincarato\", \"rincarcerato\", \"rincarnato\", \"rincentrato\", \"rinchiesto\", \"rinchiodato\", \"rinchiuso\", \"rincitrullito\", \"rincivilito\", \"rincoglionito\", \"rincollato\", \"rincominciato\", \"rincontrato\", \"rincoraggiato\", \"rincorato\", \"rincorporato\", \"rincorso\", \"rincretinito\", \"rincrudito\", \"rinculcato\", \"rincuorato\", \"rindossato\", \"rindurito\", \"rinegoziato\", \"rinfacciato\", \"rinfagottato\", \"rinfiammato\", \"rinfiancato\", \"rinfilato\", \"rinfittito\", \"rinfocolato\", \"rinfoderato\", \"rinforzato\", \"rinfrancato\", \"rinfranto\", \"rinfrescato\", \"rinfuso\", \"ringagliardito\", \"ringalluzzito\", \"ringiovanito\", \"ringiovenito\", \"ringoiato\", \"ringorgato\", \"ringraziato\", \"ringuainato\", \"rinnamorato\", \"rinnegato\", \"rinnestato\", \"rinnovato\", \"rinnovellato\", \"rinociuto\", \"rinomato\", \"rinominato\", \"rinormalizzato\", \"rinquadrato\", \"rinsaccato\", \"rinsaldato\", \"rinsanguato\", \"rinselvatichito\", \"rinselvato\", \"rinserrato\", \"rintanato\", \"rintasato\", \"rintascato\", \"rintavolato\", \"rintenerito\", \"rinterrato\", \"rinterrogato\", \"rinteso\", \"rintiepidito\", \"rintoccato\", \"rintonacato\", \"rintontito\", \"rintorpidito\", \"rintracciato\", \"rintrodotto\", \"rintronato\", \"rintuzzato\", \"rinunciato\", \"rinunziato\", \"rinutrito\", \"rinvangato\", \"rinvasato\", \"rinvenuto\", \"rinverdito\", \"rinvestito\", \"rinviato\", \"rinvigorito\", \"rinvilito\", \"rinvitato\", \"rinvoltato\", \"rinvolto\", \"rinvoltolato\", \"rinzaffato\", \"rinzeppato\", \"riobbligato\", \"rioccupato\", \"riofferto\", \"rioffeso\", \"rioperato\", \"riordinato\", \"riorganizzato\", \"riorientato\", \"riosservato\", \"riottenuto\", \"riottimizzato\", \"riotturato\", \"ripagato\", \"riparametrizzato\", \"riparato\", \"ripartito\", \"ripassato\", \"ripercorso\", \"ripercosso\", \"riperduto\", \"riperso\", \"ripesato\", \"ripescato\", \"ripestato\", \"ripetuto\", \"ripianato\", \"ripianificato\", \"ripiantato\", \"ripianto\", \"ripicchiato\", \"ripiegato\", \"ripigliato\", \"ripinto\", \"ripiovuto\", \"ripitturato\", \"riplasmato\", \"ripolarizzato\", \"ripopolato\", \"riportato\", \"riporto\", \"riposato\", \"riposizionato\", \"riposseduto\", \"riposto\", \"ripotuto\", \"ripresentato\", \"ripreso\", \"riprestato\", \"ripreteso\", \"riprincipiato\", \"ripristinato\", \"riprivatizzato\", \"riprodotto\", \"riprogettato\", \"riprogrammato\", \"ripromesso\", \"riproposto\", \"riprotetto\", \"riprovato\", \"riprovveduto\", \"riprovvisto\", \"ripubblicato\", \"ripudiato\", \"ripugnato\", \"ripulito\", \"ripuntato\", \"ripunto\", \"ripurgato\", \"riputato\", \"riquadrato\", \"riqualificato\", \"rireso\", \"rirotto\", \"risaldato\", \"risalito\", \"risaltato\", \"risalutato\", \"risanato\", \"risaputo\", \"risarcito\", \"riscalato\", \"riscaldato\", \"riscattato\", \"riscelto\", \"risceso\", \"rischiarato\", \"rischiato\", \"risciacquato\", \"risciolto\", \"riscommesso\", \"riscontato\", \"riscontrato\", \"risconvolto\", \"riscoperto\", \"riscoppiato\", \"riscorso\", \"riscosso\", \"riscritto\", \"risecato\", \"riseduto\", \"risegato\", \"risegnato\", \"riselciato\", \"riselezionato\", \"riseminato\", \"risentito\", \"riseppellito\", \"riserbato\", \"riservato\", \"risicato\", \"risigillato\", \"risistemato\", \"riso\", \"risoffiato\", \"risoggiunto\", \"risolato\", \"risolidificato\", \"risollevato\", \"risolto\", \"risommato\", \"risommerso\", \"risonato\", \"risorpassato\", \"risospeso\", \"risospinto\", \"risottomesso\", \"risparmiato\", \"risparso\", \"rispecchiato\", \"rispedito\", \"rispento\", \"risperso\", \"rispettato\", \"rispiegato\", \"rispinto\", \"rispolverato\", \"risposato\", \"risposto\", \"rissato\", \"ristabilito\", \"ristagnato\", \"ristampato\", \"ristaurato\", \"risteso\", \"ristilizzato\", \"ristorato\", \"ristretto\", \"ristrutto\", \"ristrutturato\", \"ristuccato\", \"ristudiato\", \"risucchiato\", \"risultato\", \"risuolato\", \"risuonato\", \"risuscitato\", \"risvegliato\", \"risvolto\", \"ritagliato\", \"ritarato\", \"ritardato\", \"ritemprato\", \"ritentato\", \"ritenuto\", \"riterso\", \"riteso\", \"ritinto\", \"ritirato\", \"ritoccato\", \"ritolto\", \"ritorto\", \"ritracciato\", \"ritradotto\", \"ritrascorso\", \"ritrascritto\", \"ritrasferito\", \"ritrasformato\", \"ritrasmesso\", \"ritrasposto\", \"ritrattato\", \"ritratto\", \"ritrovato\", \"ritualizzato\", \"rituffato\", \"riudito\", \"riunificato\", \"riunito\", \"riusato\", \"riutilizzato\", \"rivaccinato\", \"rivaleggiato\", \"rivalorizzato\", \"rivalso\", \"rivalutato\", \"rivangato\", \"riveduto\", \"rivelato\", \"rivendicato\", \"rivenduto\", \"riverberato\", \"riverito\", \"riverniciato\", \"riversato\", \"rivestito\", \"rivettato\", \"rivinto\", \"rivisitato\", \"rivissuto\", \"rivisto\", \"rivitalizzato\", \"rivivificato\", \"rivoltato\", \"rivolto\", \"rivoltolato\", \"rivoluto\", \"rivoluzionato\", \"rizappato\", \"rizzato\", \"robotizzato\", \"rodato\", \"rogato\", \"rollato\", \"romanizzato\", \"romanticizzato\", \"romanzato\", \"roncolato\", \"rosicato\", \"rosicchiato\", \"roso\", \"rosolato\", \"rotacizzato\", \"rotato\", \"roteato\", \"rotolato\", \"rottamato\", \"rotto\", \"rovesciato\", \"rovinato\", \"rovistato\", \"rubacchiato\", \"rubato\", \"rullato\", \"ruminato\", \"ruotato\", \"russificato\", \"ruzzolato\", \"sabbiato\", \"sabotato\", \"saccarificato\", \"saccheggiato\", \"sacralizzato\", \"sacramentato\", \"sacrificato\", \"saettato\", \"saggiato\", \"sagginato\", \"sagomato\", \"salamoiato\", \"salariato\", \"salassato\", \"salato\", \"saldato\", \"salificato\", \"salinizzato\", \"salito\", \"salmeggiato\", \"salmistrato\", \"salpato\", \"saltato\", \"salutato\", \"salvaguardato\", \"salvato\", \"sanato\", \"sancito\", \"sanforizzato\", \"sanificato\", \"sanitizzato\", \"santificato\", \"sanzionato\", \"saponificato\", \"saputo\", \"sarchiato\", \"sarchiellato\", \"sartiato\", \"satellizzato\", \"satinato\", \"satireggiato\", \"satisfatto\", \"satollato\", \"saturato\", \"saziato\", \"sbaccellato\", \"sbaciucchiato\", \"sbafato\", \"sbaffato\", \"sbalestrato\", \"sballato\", \"sballottato\", \"sballottolato\", \"sbalordito\", \"sbalzato\", \"sbancato\", \"sbandato\", \"sbandierato\", \"sbandito\", \"sbaraccato\", \"sbaragliato\", \"sbarazzato\", \"sbarbato\", \"sbarcato\", \"sbardato\", \"sbarrato\", \"sbassato\", \"sbastito\", \"sbatacchiato\", \"sbattezzato\", \"sbattuto\", \"sbeccato\", \"sbeffeggiato\", \"sbellicato\", \"sbendato\", \"sbertucciato\", \"sbiadito\", \"sbiancato\", \"sbianchito\", \"sbiellato\", \"sbiettato\", \"sbigottito\", \"sbilanciato\", \"sbirbato\", \"sbirciato\", \"sbizzarrito\", \"sbloccato\", \"sbobinato\", \"sboccato\", \"sbocconcellato\", \"sbollentato\", \"sbolognato\", \"sborniato\", \"sborsato\", \"sboscato\", \"sbottonato\", \"sbozzato\", \"sbozzimato\", \"sbozzolato\", \"sbracato\", \"sbracciato\", \"sbraciato\", \"sbraitato\", \"sbranato\", \"sbrancato\", \"sbrattato\", \"sbreccato\", \"sbriciolato\", \"sbrigato\", \"sbrigliato\", \"sbrinato\", \"sbrindellato\", \"sbrodolato\", \"sbrogliato\", \"sbronzato\", \"sbruffato\", \"sbucciato\", \"sbudellato\", \"sbuffato\", \"sbugiardato\", \"sbullettato\", \"sbullonato\", \"sburrato\", \"scacazzato\", \"scacchiato\", \"scacciato\", \"scaccolato\", \"scadenzato\", \"scafato\", \"scaffalato\", \"scagionato\", \"scagliato\", \"scaglionato\", \"scalato\", \"scalcato\", \"scalcinato\", \"scaldato\", \"scalettato\", \"scalfato\", \"scalfito\", \"scalmanato\", \"scaloppato\", \"scalpato\", \"scalpellato\", \"scalpellinato\", \"scaltrito\", \"scalzato\", \"scambiato\", \"scamiciato\", \"scamosciato\", \"scamozzato\", \"scampato\", \"scampatalo\", \"scampato\", \"scamuffato\", \"scanalato\", \"scancellato\", \"scandagliato\", \"scandalizzato\", \"scandito\", \"scannato\", \"scannellato\", \"scannerato\", \"scannerizato\", \"scannerizzato\", \"scansato\", \"scansionato\", \"scapecchiato\", \"scapezzato\", \"scapicollato\", \"scapigliato\", \"scapitozzato\", \"scapocchiato\", \"scappato\", \"scappellato\", \"scappottato\", \"scapricciato\", \"scapsulato\", \"scarabocchiato\", \"scaracchiato\", \"scaraventato\", \"scarcerato\", \"scardassato\", \"scardato\", \"scardinato\", \"scaricato\", \"scarificato\", \"scarmigliato\", \"scarnato\", \"scarnificato\", \"scarnito\", \"scarrellato\", \"scarrocciato\", \"scarrozzato\", \"scarruffato\", \"scartabellato\", \"scartato\", \"scartavetrato\", \"scartinato\", \"scartocciato\", \"scassato\", \"scassinato\", \"scatenato\", \"scattato\", \"scavalcato\", \"scavallato\", \"scavato\", \"scavezzato\", \"scazzottato\", \"scekerato\", \"scelto\", \"scempiato\", \"sceneggiato\", \"scernuto\", \"scervellato\", \"sceso\", \"sceverato\", \"schedato\", \"schedulato\", \"scheggiato\", \"scheletrito\", \"schematizzato\", \"schermato\", \"schermito\", \"schermografato\", \"schernito\", \"schiacciato\", \"schiaffato\", \"schiaffeggiato\", \"schiantato\", \"schiarito\", \"schiavardato\", \"schiavizzato\", \"schiccherato\", \"schierato\", \"schifato\", \"schinciato\", \"schioccato\", \"schiodato\", \"schiumato\", \"schiuso\", \"schivato\", \"schizzato\", \"schizzettato\", \"sciabolato\", \"sciabordato\", \"sciacquato\", \"scialacquato\", \"sciamanizzato\", \"sciamannato\", \"sciancato\", \"sciancrato\", \"scimmieggiato\", \"scimmiottato\", \"scinto\", \"scioccato\", \"sciolinato\", \"sciolto\", \"sciorinato\", \"scippato\", \"sciroppato\", \"scisso\", \"sciupacchiato\", \"sciupato\", \"sclamato\", \"sclerosato\", \"sclerotizzato\", \"scoccato\", \"scocciato\", \"scodato\", \"scodellato\", \"scoiato\", \"scolarizzato\", \"scolato\", \"scollacciato\", \"scollato\", \"scollegato\", \"scolorato\", \"scolorito\", \"scolpato\", \"scolpito\", \"scombaciato\", \"scombinato\", \"scombussolato\", \"scommesso\", \"scomodato\", \"scompaginato\", \"scompagnato\", \"scompartito\", \"scompattato\", \"scompensato\", \"scompiacuto\", \"scompigliato\", \"scomposto\", \"scomputato\", \"scomunicato\", \"sconcertato\", \"sconciato\", \"sconcluso\", \"sconfessato\", \"sconficcato\", \"sconﬁtto\", \"sconfortato\", \"sconfuso\", \"scongelato\", \"scongiurato\", \"sconnesso\", \"sconosciuto\", \"sconquassato\", \"sconsacrato\", \"sconsigliato\", \"sconsolato\", \"scontato\", \"scontentato\", \"scontornato\", \"scontorto\", \"scontrato\", \"sconvolto\", \"scopato\", \"scoperchiato\", \"scoperto\", \"scopiazzato\", \"scoraggiato\", \"scoraggito\", \"scorato\", \"scorazzato\", \"scorciato\", \"scorcito\", \"scordato\", \"scoreggiato\", \"scorificato\", \"scornato\", \"scorniciato\", \"scoronato\", \"scorporato\", \"scorrazzato\", \"scorreggiato\", \"scorretto\", \"scorso\", \"scortato\", \"scortecciato\", \"scorticato\", \"scorto\", \"scorzato\", \"scosceso\", \"scosciato\", \"scosso\", \"scostato\", \"scostolato\", \"scotennato\", \"scoticato\", \"scotolato\", \"scotomizzato\", \"scottato\", \"scotto\", \"scovato\", \"scoverto\", \"scozzato\", \"scozzonato\", \"screditato\", \"scremato\", \"screpolato\", \"screziato\", \"scribacchiato\", \"scriminato\", \"scristianizzato\", \"scritto\", \"scritturato\", \"scroccato\", \"scrocchiato\", \"scrollato\", \"scrostato\", \"scrutato\", \"scrutinato\", \"scucito\", \"scudisciato\", \"scuffiato\", \"sculacciato\", \"sculettato\", \"scuoiato\", \"scuriosato\", \"scurito\", \"scusato\", \"sdaziato\", \"sdebitato\", \"sdegnato\", \"sdemanializzato\", \"sdentato\", \"sdilinquito\", \"sdoganato\", \"sdoluto\", \"sdoppiato\", \"sdraiato\", \"sdrammatizzato\", \"sdrucito\", \"secato\", \"seccato\", \"secernuto\", \"secolarizzato\", \"secondato\", \"secretato\", \"secreto\", \"sedato\", \"sedentarizzato\", \"sedotto\", \"segato\", \"seghettato\", \"segmentato\", \"segnalato\", \"segnato\", \"segnoreggiato\", \"segregato\", \"segretato\", \"seguitato\", \"seguito\", \"selciato\", \"selezionato\", \"sellato\", \"sembrato\", \"sementato\", \"semicinto\", \"seminato\", \"semplificato\", \"senilizzato\", \"sensibilizzato\", \"sensorizzato\", \"sentenziato\", \"sentito\", \"sentitaselo\", \"sentito\", \"sentito\", \"separato\", \"sepolto\", \"seppellito\", \"sequenziato\", \"sequestrato\", \"serbato\", \"serrato\", \"servito\", \"servoassistito\", \"sessualizzato\", \"sestuplicato\", \"setacciato\", \"setificato\", \"settato\", \"settorializzato\", \"settuplicato\", \"seviziato\", \"sezionato\", \"sfaccettato\", \"sfagliato\", \"sfaldato\", \"sfalsato\", \"sfamato\", \"sfanalato\", \"sfangato\", \"sfarinato\", \"sfasato\", \"sfasciato\", \"sfatato\", \"sfatto\", \"sfavillato\", \"sfavorito\", \"sfegatato\", \"sfeltrato\", \"sfenduto\", \"sferragliato\", \"sferrato\", \"sferzato\", \"sfesso\", \"sfiancato\", \"sfiatato\", \"sfiato\", \"sfibbiato\", \"sfibrato\", \"sfidato\", \"sfiduciato\", \"sfigurato\", \"sfilato\", \"sfilettato\", \"sfinito\", \"sfioccato\", \"sfiorato\", \"sfittato\", \"sfocato\", \"sfociato\", \"sfoderato\", \"sfogato\", \"sfoggiato\", \"sfogliato\", \"sfollato\", \"sfoltito\", \"sfondato\", \"sforacchiato\", \"sforato\", \"sforbiciato\", \"sformato\", \"sfornaciato\", \"sfornato\", \"sfornito\", \"sforzato\", \"sfottuto\", \"sfracellato\", \"sfrangiato\", \"sfrascato\", \"sfratato\", \"sfrattato\", \"sfrecciato\", \"sfregato\", \"sfregiato\", \"sfrenato\", \"sfrisato\", \"sfrondato\", \"sfrucugliato\", \"sfruculiato\", \"sfruttato\", \"sfumato\", \"sfuocato\", \"sgamato\", \"sganasciato\", \"sganciato\", \"sgarbugliato\", \"sgattaiolato\", \"sgelato\", \"sghiacciato\", \"sgocciolato\", \"sgolato\", \"sgomberato\", \"sgombrato\", \"sgomentato\", \"sgominato\", \"sgomitato\", \"sgomitolato\", \"sgonfiato\", \"sgorbiato\", \"sgottato\", \"sgovernato\", \"sgozzato\", \"sgraffiato\", \"sgraffignato\", \"sgranato\", \"sgranchito\", \"sgranellato\", \"sgrassato\", \"sgravato\", \"sgretolato\", \"sgridato\", \"sgrommato\", \"sgrondato\", \"sgroppato\", \"sgrossato\", \"sgrovigliato\", \"sgrugnato\", \"sguainato\", \"sgualcito\", \"sguanciato\", \"sguarnito\", \"sguinzagliato\", \"sgusciato\", \"shakerato\", \"shoccato\", \"shuntato\", \"sigillato\", \"siglato\", \"significato\", \"signoreggiato\", \"silenziato\", \"silicizzato\", \"sillabato\", \"sillogizzato\", \"silurato\", \"simboleggiato\", \"simbolizzato\", \"simmetrizzato\", \"simpatizzato\", \"simulato\", \"sincerato\", \"sincopato\", \"sincretizzato\", \"sincronizzato\", \"sindacalizzato\", \"sindacato\", \"singolarizzato\", \"sinistrato\", \"sinizzato\", \"sinterizzato\", \"sintetizzato\", \"sintonizzato\", \"siringato\", \"sistematizzato\", \"sistemato\", \"situato\", \"slabbrato\", \"slacciato\", \"slamato\", \"slanciato\", \"slappolato\", \"slargato\", \"slavizzato\", \"slegato\", \"slentato\", \"slinguato\", \"slogato\", \"sloggato\", \"sloggiato\", \"slombato\", \"slungato\", \"smaccato\", \"smacchiato\", \"smagliato\", \"smagnetizzato\", \"smagrito\", \"smaliziato\", \"smallato\", \"smaltato\", \"smaltito\", \"smammato\", \"smanacciato\", \"smangiato\", \"smantellato\", \"smarcato\", \"smarginato\", \"smarrito\", \"smascellato\", \"smascherato\", \"smaterializzato\", \"smattonato\", \"smembrato\", \"smentito\", \"smerciato\", \"smerdato\", \"smerigliato\", \"smerlato\", \"smerlettato\", \"smessalo\", \"smesso\", \"smezzato\", \"smidollato\", \"smielato\", \"smilitarizzato\", \"sminato\", \"sminuito\", \"sminuzzato\", \"smistato\", \"smitizzato\", \"smobiliato\", \"smobilitato\", \"smobilizzato\", \"smoccolato\", \"smollicato\", \"smonacato\", \"smontato\", \"smorbato\", \"smorzato\", \"smosso\", \"smozzicato\", \"smunto\", \"smurato\", \"smussato\", \"smutandato\", \"snaturato\", \"snazionalizzato\", \"snebbiato\", \"snellito\", \"snervato\", \"snidato\", \"sniffato\", \"snobbato\", \"snocciolato\", \"snodato\", \"snudato\", \"sobbarcato\", \"sobbollito\", \"sobillato\", \"socchiuso\", \"soccorso\", \"soddisfatto\", \"sodisfatto\", \"sodomizzato\", \"sofferito\", \"soffermato\", \"sofferto\", \"soffiato\", \"soffocato\", \"soffregato\", \"soffritto\", \"soffuso\", \"sofisticato\", \"soggettivato\", \"soggettivizzato\", \"sogghignato\", \"soggiogato\", \"soggiunto\", \"sogguardato\", \"sognato\", \"solarizzato\", \"solcato\", \"soleggiato\", \"solennizzato\", \"solfeggiato\", \"solfitato\", \"solfonato\", \"solforato\", \"solidificato\", \"solito\", \"sollazzato\", \"sollecitato\", \"solleticato\", \"sollevato\", \"solto\", \"solubilizzato\", \"soluto\", \"soluzionato\", \"solvatato\", \"somatizzato\", \"someggiato\", \"somigliato\", \"sommato\", \"sommerso\", \"sommesso\", \"somministrato\", \"sommosso\", \"sonato\", \"sondato\", \"sonorizzato\", \"sopito\", \"soppalcato\", \"soppesato\", \"soppiantato\", \"sopportato\", \"sopposto\", \"soppresso\", \"sopraddotato\", \"sopraeccitato\", \"sopraedificato\", \"sopraelevato\", \"sopraffato\", \"sopraffatto\", \"sopraggiunto\", \"soprainteso\", \"soprammesso\", \"soprannominato\", \"sopraposto\", \"soprappreso\", \"soprascritto\", \"sopraspeso\", \"soprassaturato\", \"soprasseduto\", \"sopravanzato\", \"sopravvalutato\", \"sopravveduto\", \"sopravvinto\", \"sopravvisto\", \"sopreccitato\", \"sopredificato\", \"soprelevato\", \"soprinteso\", \"sorbettato\", \"sorbito\", \"sorgiunto\", \"sormontato\", \"sorpassato\", \"sorpreso\", \"sorraso\", \"sorretto\", \"sorseggiato\", \"sorteggiato\", \"sortito\", \"sorvegliato\", \"sorvolato\", \"soscritto\", \"sospeso\", \"sospettato\", \"sospinto\", \"sospirato\", \"sostantivato\", \"sostanziato\", \"sostentato\", \"sostenuto\", \"sostituito\", \"sottaciuto\", \"sotterrato\", \"sotteso\", \"sottinteso\", \"sottoalimentato\", \"sottocapitalizzato\", \"sottodiviso\", \"sottoesposto\", \"sottofirmato\", \"sottolineato\", \"sottomesso\", \"sottomurato\", \"sottopagato\", \"sottopassato\", \"sottoposto\", \"sottorappresentato\", \"sottoriso\", \"sottoscritto\", \"sottostimato\", \"sottosviluppato\", \"sottotitolato\", \"sottovalutato\", \"sottratto\", \"soverchiato\", \"sovesciato\", \"sovietizzato\", \"sovracapitalizzato\", \"sovraccaricato\", \"sovradimensionato\", \"sovraeccitato\", \"sovraesposto\", \"sovraffaticato\", \"sovraffollato\", \"sovraggiunto\", \"sovraimposto\", \"sovrainteso\", \"sovralimentato\", \"sovramodulato\", \"sovrappopolato\", \"sovrapposto\", \"sovrariscaldato\", \"sovrasaturato\", \"sovrascritto\", \"sovrastampato\", \"sovrastato\", \"sovrastimato\", \"sovrautilizzato\", \"sovreccitato\", \"sovresposto\", \"sovrimposto\", \"sovrinteso\", \"sovvenuto\", \"sovvenzionato\", \"sovvertito\", \"spaccato\", \"spacchettato\", \"spacciato\", \"spaginato\", \"spaiato\", \"spalancato\", \"spalato\", \"spalcato\", \"spalleggiato\", \"spalmato\", \"spammato\", \"spampanato\", \"spampinato\", \"spanato\", \"spanciato\", \"spanduto\", \"spannato\", \"spannocchiato\", \"spanso\", \"spantanato\", \"spanto\", \"spaparacchiato\", \"spaparanzato\", \"spappolato\", \"sparato\", \"sparecchiato\", \"sparigliato\", \"sparito\", \"sparlato\", \"sparpagliato\", \"spartito\", \"spassato\", \"spassatoselo\", \"spastoiato\", \"spaurato\", \"spaurito\", \"spaventato\", \"spazializzato\", \"spaziato\", \"spazieggiato\", \"spazientito\", \"spazzato\", \"spazzolato\", \"specchiato\", \"specializzato\", \"specificato\", \"specillato\", \"specolato\", \"spedito\", \"spegnato\", \"spelacchiato\", \"spelato\", \"spellato\", \"spennacchiato\", \"spennato\", \"spennellato\", \"spento\", \"spenzolato\", \"sperato\", \"sperimentato\", \"spernacchiato\", \"speronato\", \"sperperato\", \"spersonalizzato\", \"sperticato\", \"spesato\", \"speso\", \"spessito\", \"spettacolarizzato\", \"spettinato\", \"spezzato\", \"spezzettato\", \"spezziato\", \"spezzonato\", \"spiaccicato\", \"spianato\", \"spiantato\", \"spiato\", \"spiattellato\", \"spiazzato\", \"spiccato\", \"spicciato\", \"spiccicato\", \"spicciolato\", \"spicconato\", \"spidocchiato\", \"spiegato\", \"spiegazzato\", \"spietrato\", \"spifferato\", \"spigionato\", \"spignorato\", \"spigolato\", \"spigrito\", \"spillato\", \"spilluzzicato\", \"spiluccato\", \"spinto\", \"spintonato\", \"spiombato\", \"spiralizzato\", \"spirantizzato\", \"spirato\", \"spiritualizzato\", \"spiumato\", \"spizzicato\", \"spodestato\", \"spoetizzato\", \"spogliato\", \"spolettato\", \"spoliato\", \"spoliticizzato\", \"spollonato\", \"spolmonato\", \"spolpato\", \"spoltronito\", \"spolverato\", \"spolverizzato\", \"spompato\", \"spompinato\", \"sponsorizzato\", \"spopolato\", \"spoppato\", \"sporcato\", \"sportato\", \"sporto\", \"sposato\", \"sposseduto\", \"spossessato\", \"spostato\", \"sposto\", \"sprangato\", \"sprecato\", \"spregiato\", \"spremuto\", \"spretato\", \"sprezzato\", \"sprigionato\", \"sprimacciato\", \"spromesso\", \"spronato\", \"sprotetto\", \"sprovincializzato\", \"sprovveduto\", \"sprovvisto\", \"spruzzato\", \"spugnato\", \"spulato\", \"spulciato\", \"spuntato\", \"spuntellato\", \"spupazzato\", \"spurgato\", \"sputacchiato\", \"sputato\", \"sputtanato\", \"squadernato\", \"squadrato\", \"squagliato\", \"squagliataselo\", \"squagliato\", \"squalificato\", \"squamato\", \"squarciato\", \"squartato\", \"squassato\", \"squattrinato\", \"squilibrato\", \"squinternato\", \"sradicato\", \"srotolato\", \"srugginito\", \"stabbiato\", \"stabilito\", \"stabilizzato\", \"stabulato\", \"staccato\", \"stacciato\", \"staffato\", \"staffilato\", \"staggiato\", \"staggito\", \"stagionato\", \"stagliato\", \"stagnato\", \"stamburato\", \"stampato\", \"stampigliato\", \"stanato\", \"stancato\", \"standardizzato\", \"stangato\", \"stanziato\", \"stappato\", \"starato\", \"starnazzato\", \"stasato\", \"statalizzato\", \"statizzato\", \"statoco\", \"statoseno\", \"statuito\", \"stazzato\", \"stazzonato\", \"steccacciato\", \"steccato\", \"stecchito\", \"stecconato\", \"stemperato\", \"stempiato\", \"stenografato\", \"stereotipato\", \"sterilito\", \"sterilizzato\", \"sterpato\", \"sterrato\", \"sterzato\", \"steso\", \"stigliato\", \"stigmatizzato\", \"stilato\", \"stilettato\", \"stilizzato\", \"stillato\", \"stimato\", \"stimolato\", \"stinto\", \"stipato\", \"stipendiato\", \"stipulato\", \"stiracchiato\", \"stirato\", \"stivato\", \"stizzito\", \"stoccato\", \"stolto\", \"stomacato\", \"stonato\", \"stondato\", \"stoppato\", \"stordito\", \"storicizzato\", \"stornato\", \"storpiato\", \"stortato\", \"storto\", \"stozzato\", \"strabenedetto\", \"strabuzzato\", \"stracannato\", \"straccato\", \"stracciato\", \"stracotto\", \"strafogato\", \"stragoduto\", \"stralciato\", \"stralodato\", \"stralunato\", \"stramaledetto\", \"stramortito\", \"strangolato\", \"straniato\", \"stranito\", \"straorzato\", \"strapagato\", \"strapazzato\", \"straperduto\", \"straperso\", \"strappato\", \"strasaputo\", \"strascicato\", \"strascinato\", \"strasformato\", \"stratificato\", \"strattonato\", \"stravaccato\", \"stravinto\", \"stravolto\", \"stravoluto\", \"straziato\", \"stregato\", \"stremato\", \"stressato\", \"striato\", \"stridulato\", \"strigato\", \"strigliato\", \"strillato\", \"striminzito\", \"strimpellato\", \"strinato\", \"stringato\", \"strisciato\", \"stritolato\", \"strizzato\", \"strofinato\", \"strombato\", \"strombazzato\", \"stroncato\", \"stronzato\", \"stropicciato\", \"stroppato\", \"stroppiato\", \"strozzato\", \"struccato\", \"strumentalizzato\", \"strumentato\", \"strusciato\", \"strutto\", \"strutturalizzato\", \"strutturato\", \"stuccato\", \"studiacchiato\", \"studiato\", \"stuellato\", \"stufato\", \"stupefatto\", \"stupito\", \"stuprato\", \"sturato\", \"stutato\", \"stuzzicato\", \"suaso\", \"subaffittato\", \"subappaltato\", \"subbiato\", \"subdelegato\", \"subissato\", \"subito\", \"sublicenziato\", \"sublimato\", \"sublocato\", \"subodorato\", \"subordinato\", \"subornato\", \"suburbanizzato\", \"sucato\", \"succhiato\", \"succhiellato\", \"succiato\", \"succinto\", \"succiso\", \"suddistinto\", \"suddiviso\", \"suffissato\", \"suffisso\", \"suffragato\", \"suffumicato\", \"suffuso\", \"suggellato\", \"suggerito\", \"suggestionato\", \"suicidato\", \"sunteggiato\", \"sunto\", \"suolato\", \"suonato\", \"superato\", \"superpagato\", \"superraffreddato\", \"supervalutato\", \"supervisionato\", \"supplicato\", \"supplito\", \"supportato\", \"supposto\", \"suppurato\", \"surclassato\", \"surfato\", \"surgelato\", \"surraffreddato\", \"surriscaldato\", \"surrogato\", \"survoltato\", \"suscitato\", \"susseguito\", \"sussidiato\", \"sussunto\", \"sussurrato\", \"suturato\", \"svaccato\", \"svagato\", \"svaligiato\", \"svalutato\", \"svapato\", \"svariato\", \"svasato\", \"svecchiato\", \"svegliato\", \"svelato\", \"svelenito\", \"sveltito\", \"svelto\", \"svenato\", \"svenduto\", \"sventagliato\", \"sventato\", \"sventolato\", \"sventrato\", \"sverginato\", \"svergognato\", \"svergolato\", \"sverminato\", \"sverniciato\", \"svestito\", \"svettato\", \"svezzato\", \"sviato\", \"svignatoselo\", \"svigorito\", \"svilito\", \"svillaneggiato\", \"sviluppato\", \"svinato\", \"svincolato\", \"sviolinato\", \"svirgolato\", \"svirilizzato\", \"svisato\", \"sviscerato\", \"svitato\", \"sviticchiato\", \"svolato\", \"svolazzato\", \"svolto\", \"svoluto\", \"svuotato\", \"tabuizzato\", \"tabulato\", \"taccato\", \"taccheggiato\", \"tacciato\", \"tacitato\", \"taciuto\", \"tagliato\", \"taglieggiato\", \"tagliuzzato\", \"talebanizzato\", \"tallonato\", \"tampinato\", \"tamponato\", \"tanguto\", \"tannato\", \"tappato\", \"tappezzato\", \"tarato\", \"tardato\", \"targato\", \"tariffato\", \"tarlato\", \"tarmato\", \"taroccato\", \"tarpato\", \"tartagliato\", \"tartassato\", \"tartufato\", \"tassato\", \"tassellato\", \"tastato\", \"tasteggiato\", \"tatuato\", \"tecnicizzato\", \"tecnologizzato\", \"tedeschizzato\", \"tediato\", \"teflonato\", \"telecomandato\", \"telecontrollato\", \"telediffuso\", \"telefonato\", \"telegrafato\", \"teleguidato\", \"telematizzato\", \"telemetrato\", \"teleradiotrasmesso\", \"teletrasmesso\", \"teletrasportato\", \"tematizzato\", \"temperato\", \"tempestato\", \"tempificato\", \"templatizzato\", \"temporizzato\", \"temprato\", \"temuto\", \"tentato\", \"tenuto\", \"teologizzato\", \"teorizzato\", \"tepefatto\", \"terebrato\", \"terminato\", \"termostatato\", \"terrazzato\", \"terrificato\", \"terrorizzato\", \"terso\", \"terzarolato\", \"terziarizzato\", \"terziato\", \"tesato\", \"tesaurizzato\", \"teso\", \"tesserato\", \"testato\", \"testificato\", \"testimoniato\", \"timbrato\", \"tindalizzato\", \"tinteggiato\", \"tinto\", \"tipicizzato\", \"tipizzato\", \"tippato\", \"tiranneggiato\", \"tirato\", \"titillato\", \"titolato\", \"toccato\", \"toelettato\", \"tollerato\", \"tolto\", \"tonalizzato\", \"tonificato\", \"tonneggiato\", \"tonsurato\", \"torchiato\", \"tormentato\", \"tornatoseno\", \"tornito\", \"torrefatto\", \"torto\", \"tortoreggiato\", \"torturato\", \"tosato\", \"toscaneggiato\", \"toscanizzato\", \"tostato\", \"totalizzato\", \"traboccato\", \"trabuccato\", \"tracannato\", \"tracciato\", \"tradito\", \"tradotto\", \"trafficato\", \"trafilato\", \"trafitto\", \"traforato\", \"trafugato\", \"traghettato\", \"traguardato\", \"trainato\", \"tralasciato\", \"tralignato\", \"tramandato\", \"tramato\", \"trambasciato\", \"tramesso\", \"tramestato\", \"tramezzato\", \"tramortito\", \"tramutato\", \"tranciato\", \"trangugiato\", \"tranquillato\", \"tranquillizzato\", \"transatto\", \"transceso\", \"transcodificato\", \"transcorso\", \"transcritto\", \"transennato\", \"transfluito\", \"transfuso\", \"transistorizzato\", \"translitterato\", \"transposto\", \"transricevuto\", \"transustanziato\", \"transveduto\", \"transvisto\", \"trapanato\", \"trapassato\", \"trapiantato\", \"traportato\", \"traposto\", \"trapposto\", \"trapuntato\", \"trapunto\", \"trarotto\", \"trasandato\", \"trasbordato\", \"trascelto\", \"trasceso\", \"trascinato\", \"trascorso\", \"trascritto\", \"trascurato\", \"trasdotto\", \"trasferito\", \"trasfigurato\", \"trasformato\", \"trasfuso\", \"trasgredito\", \"traslato\", \"traslitterato\", \"traslocato\", \"trasmesso\", \"trasmutato\", \"trasparito\", \"traspirato\", \"trasportato\", \"trasposto\", \"trastullato\", \"trasudato\", \"trasvolato\", \"trasvolto\", \"trattato\", \"tratteggiato\", \"trattenuto\", \"tratto\", \"traumatizzato\", \"travagliato\", \"travalicato\", \"travasato\", \"traveduto\", \"traversato\", \"travestito\", \"traviato\", \"travisato\", \"travisto\", \"travolto\", \"trebbiato\", \"triangolato\", \"tribbiato\", \"tribolato\", \"tributato\", \"triennalizzato\", \"trimestralizzato\", \"trincato\", \"trincerato\", \"trinciato\", \"tripartito\", \"triplicato\", \"trisecato\", \"trisezionato\", \"tritato\", \"triturato\", \"trivellato\", \"trollato\", \"trombato\", \"troncato\", \"tropicalizzato\", \"trovato\", \"truccato\", \"trucidato\", \"truffato\", \"tuffato\", \"tumefatto\", \"tumulato\", \"turato\", \"turbato\", \"turlupinato\", \"tutelato\", \"ubbligato\", \"ubicato\", \"ubidito\", \"ubiquitinato\", \"ubriacato\", \"uccellato\", \"uccellinato\", \"ucciso\", \"udito\", \"ufficializzato\", \"uggito\", \"ugnato\", \"uguagliato\", \"ulcerato\", \"ulito\", \"ulolato\", \"ultimato\", \"ultracentrifugato\", \"ululato\", \"umanato\", \"umanizzato\", \"umettato\", \"umidificato\", \"umidito\", \"umiliato\", \"uncinato\", \"unguentato\", \"unificato\", \"uniformato\", \"unito\", \"univerbato\", \"universaleggiato\", \"universalizzato\", \"untato\", \"unto\", \"uperizzato\", \"urbanizzato\", \"urgenzato\", \"urlato\", \"urtacchiato\", \"urtato\", \"urticchiato\", \"usato\", \"usciolato\", \"usolato\", \"ustionato\", \"usucapito\", \"usurato\", \"usurpato\", \"utilitato\", \"utilizzato\", \"vaccinato\", \"vagabondeggiato\", \"vagellato\", \"vagheggiato\", \"vagillato\", \"vagliato\", \"valcato\", \"valicato\", \"validato\", \"valorizzato\", \"valso\", \"valutato\", \"vanagloriato\", \"vanato\", \"vandalizzato\", \"vangato\", \"vangelizzato\", \"vanificato\", \"vanito\", \"vantaggiato\", \"vantato\", \"vaporato\", \"vaporizzato\", \"varato\", \"varcato\", \"variato\", \"vasectomizzato\", \"vaticinato\", \"vedovato\", \"veduto\", \"vegetato\", \"veggiato\", \"vegliato\", \"veicolato\", \"velarizzato\", \"velato\", \"velettato\", \"velinato\", \"vellicato\", \"vellutato\", \"velocizzato\", \"vendemmiato\", \"vendicato\", \"vendicchiato\", \"venducchiato\", \"venduto\", \"venerato\", \"vengiato\", \"ventagliato\", \"ventilato\", \"ventolato\", \"verbalizzato\", \"vergato\", \"vergheggiato\", \"vergognato\", \"vergolato\", \"verificato\", \"verminato\", \"vernalizzato\", \"verniciato\", \"verrinato\", \"versato\", \"verseggiato\", \"versificato\", \"verticalizzato\", \"vessato\", \"vestito\", \"vestito\", \"vetrificato\", \"vetrinato\", \"vetrioleggiato\", \"vettovagliato\", \"vezzeggiato\", \"viaggiato\", \"vicinato\", \"vicitato\", \"videochattato\", \"videochiamato\", \"videocomunicato\", \"videoregistrato\", \"videotrasmesso\", \"vidimato\", \"vigilato\", \"vigliato\", \"vigoreggiato\", \"vigorito\", \"vilificato\", \"vilipeso\", \"villaneggiato\", \"vincolato\", \"vinto\", \"violato\", \"violentato\", \"violinato\", \"virgolato\", \"virgoleggiato\", \"virgolettato\", \"virilizzato\", \"virtualizzato\", \"visionato\", \"visitato\", \"vissuto\", \"vistato\", \"visto\", \"visualizzato\", \"vitaliziato\", \"vitalizzato\", \"vitaminizzato\", \"vittimizzato\", \"vituperato\", \"vivacizzato\", \"vivandato\", \"vivificato\", \"vivisezionato\", \"viziato\", \"vocabolarizzato\", \"vocalizzato\", \"vocato\", \"vociferato\", \"volantinato\", \"volatilizzato\", \"volgarizzato\", \"volicchiato\", \"volpeggiato\", \"voltato\", \"volto\", \"voltolato\", \"volturato\", \"voluminizzato\", \"voluto\", \"volutoco\", \"vomitato\", \"vorato\", \"votato\", \"vulcanizzato\", \"vuotato\", \"wappato\", \"wikificato\", \"xerocopiato\", \"zaffato\", \"zampato\", \"zampettato\", \"zampillato\", \"zannato\", \"zappato\", \"zappettato\", \"zapponato\", \"zavorrato\", \"zeppato\", \"zigrinato\", \"zigzagato\", \"zimbellato\", \"zincato\", \"zinnato\", \"zipolato\", \"zippato\", \"zirlato\", \"zittito\", \"zizzagato\", \"zoccolato\", \"zollato\", \"zombato\", \"zonato\", \"zonizzato\", \"zoppato\", \"zoppeggiato\", \"zoppicato\", \"zucconato\", \"zufolato\", \"zumato\", \"zuppato\", \"abalienata\", \"abbacchiata\", \"abbacinata\", \"abbadata\", \"abbagliata\", \"abbaiata\", \"abballata\", \"abbambinata\", \"abbancata\", \"abbandonata\", \"abbarbagliata\", \"abbarbata\", \"abbarcata\", \"abbaruffata\", \"abbassata\", \"abbatacchiata\", \"abbattuta\", \"abbatuffolata\", \"abbelita\", \"abbellata\", \"abbellita\", \"abbendata\", \"abbeverata\", \"abbiadata\", \"abbicata\", \"abbigliata\", \"abbinata\", \"abbindolata\", \"abbioccata\", \"abbiosciata\", \"abbisciata\", \"abbittata\", \"abboccata\", \"abboffata\", \"abbominata\", \"abbonacciata\", \"abbonata\", \"abbonita\", \"abbordata\", \"abborracciata\", \"abborrata\", \"abborrita\", \"abbottinata\", \"abbottonata\", \"abbozzacchiata\", \"abbozzata\", \"abbozzolata\", \"abbracciata\", \"abbraciata\", \"abbrancata\", \"abbreviata\", \"abbriccata\", \"abbrigliata\", \"abbrivata\", \"abbriviata\", \"abbrividita\", \"abbronzata\", \"abbrostolata\", \"abbrostolita\", \"abbruciacchiata\", \"abbruciata\", \"abbrunata\", \"abbrunita\", \"abbruscata\", \"abbrusciata\", \"abbrustiata\", \"abbrustolata\", \"abbrustolita\", \"abbrutita\", \"abbruttita\", \"abbuffata\", \"abbuiata\", \"abbuonata\", \"abburattata\", \"abbuzzita\", \"abdicata\", \"abdotta\", \"abiettata\", \"abilitata\", \"abissata\", \"abitata\", \"abituata\", \"abiurata\", \"abolita\", \"abominata\", \"abondata\", \"aborrita\", \"abrasa\", \"abrogata\", \"abusata\", \"accaffata\", \"accagionata\", \"accagliata\", \"accalappiata\", \"accalcata\", \"accaldata\", \"accallata\", \"accalorata\", \"accalorita\", \"accambiata\", \"accampata\", \"accampionata\", \"accanalata\", \"accanata\", \"accaneggiata\", \"accanita\", \"accantonata\", \"accaparrata\", \"accapezzata\", \"accapigliata\", \"accapottata\", \"accappiata\", \"accappiettata\", \"accapponata\", \"accappucciata\", \"accaprettata\", \"accareggiata\", \"accarezzata\", \"accarnata\", \"accarpionata\", \"accartocciata\", \"accasata\", \"accasciata\", \"accasellata\", \"accasermata\", \"accastellata\", \"accastellinata\", \"accatarrata\", \"accatastata\", \"accattata\", \"accattivata\", \"accavalcata\", \"accavalciata\", \"accavallata\", \"accavezzata\", \"accecata\", \"acceffata\", \"accelerata\", \"accellerata\", \"accennata\", \"accensata\", \"accentata\", \"accentrata\", \"accentuata\", \"acceppata\", \"accerchiata\", \"accercinata\", \"accertata\", \"accesa\", \"accessoriata\", \"accettata\", \"acchetata\", \"acchiappata\", \"acchiocciolata\", \"acchitata\", \"acchiuduta\", \"acciabattata\", \"acciaiata\", \"acciambellata\", \"acciarpata\", \"acciecata\", \"accigliata\", \"acciglionata\", \"accignuta\", \"accincignata\", \"accinta\", \"acciocchita\", \"acciottolata\", \"accipigliata\", \"accismata\", \"accisa\", \"acciucchita\", \"acciuffata\", \"accivettata\", \"acclamata\", \"acclarata\", \"acclimatata\", \"acclusa\", \"accoccata\", \"accoccolata\", \"accoccovata\", \"accodata\", \"accollata\", \"accoltellata\", \"accolta\", \"accomandata\", \"accomiatata\", \"accommiatata\", \"accomodata\", \"accompagnata\", \"accomunata\", \"acconciata\", \"acconigliata\", \"accontata\", \"accontentata\", \"accoppata\", \"accoppiata\", \"accorata\", \"accorciata\", \"accorcita\", \"accordata\", \"accordellata\", \"accorpata\", \"accorta\", \"accosciata\", \"accostata\", \"accostumata\", \"accotonata\", \"accottimata\", \"accovacciata\", \"accovata\", \"accovonata\", \"accozzata\", \"accreditata\", \"accresciuta\", \"accrespata\", \"accucciata\", \"accucciolata\", \"accudita\", \"acculata\", \"acculturata\", \"accumulata\", \"accumunata\", \"accusata\", \"acetificata\", \"acetilata\", \"acetita\", \"acidata\", \"acidificata\", \"acidulata\", \"acquadernata\", \"acquarellata\", \"acquartierata\", \"acquata\", \"acquattata\", \"acquerellata\", \"acquetata\", \"acquietata\", \"acquisita\", \"acquistata\", \"acromatizzata\", \"acuita\", \"acuminata\", \"acutizzata\", \"adacquata\", \"adagiata\", \"adattata\", \"addaziata\", \"addebbiata\", \"addebitata\", \"addecimata\", \"addensata\", \"addentata\", \"addentellata\", \"addentrata\", \"addestrata\", \"addetta\", \"addiacciata\", \"addimandata\", \"addimesticata\", \"addimorata\", \"addimostrata\", \"addipanata\", \"addirizzata\", \"additata\", \"additivata\", \"addizionata\", \"addobbata\", \"addocilita\", \"addogliata\", \"addolcata\", \"addolciata\", \"addolcita\", \"addolorata\", \"addomandata\", \"addomesticata\", \"addoppiata\", \"addormentata\", \"addossata\", \"addotta\", \"addottorata\", \"addottrinata\", \"addrizzata\", \"adduata\", \"addugliata\", \"adeguata\", \"adempita\", \"adempiuta\", \"adequata\", \"aderizzata\", \"adescata\", \"adibita\", \"adirata\", \"adita\", \"adiuvata\", \"adizzata\", \"adocchiata\", \"adombrata\", \"adonata\", \"adonestata\", \"adontata\", \"adoperata\", \"adoprata\", \"adorata\", \"adornata\", \"adottata\", \"adsorbita\", \"aduggiata\", \"adugnata\", \"adulata\", \"adulterata\", \"adunata\", \"adunghiata\", \"adusata\", \"aerata\", \"aereata\", \"aerotrainata\", \"aerotrasportata\", \"affabulata\", \"affaccendata\", \"affacchinata\", \"affacciata\", \"affagottata\", \"affaldata\", \"affamata\", \"affamigliata\", \"affannata\", \"affardellata\", \"affascinata\", \"affastellata\", \"affaticata\", \"affattucchiata\", \"affatturata\", \"affermata\", \"afferrata\", \"affettata\", \"affezionata\", \"affiancata\", \"affiatata\", \"affibbiata\", \"affidata\", \"affienata\", \"affievolita\", \"affigliata\", \"affigurata\", \"affilata\", \"affilettata\", \"affiliata\", \"affinata\", \"affiochita\", \"affiorata\", \"affisata\", \"affissata\", \"affissa\", \"affittata\", \"affittita\", \"afflitta\", \"afflosciata\", \"affocata\", \"affogata\", \"affogliata\", \"affollata\", \"affoltata\", \"affondata\", \"afforcata\", \"afforestata\", \"afforzata\", \"affossata\", \"affralita\", \"affrancata\", \"affranta\", \"affratellata\", \"affrenata\", \"affrenellata\", \"affrescata\", \"affrettata\", \"affrittellata\", \"affrontata\", \"affumata\", \"affumicata\", \"affumigata\", \"affuocata\", \"affusolata\", \"africanizzata\", \"ageminata\", \"agevolata\", \"aggallata\", \"agganciata\", \"aggangherata\", \"aggarbata\", \"aggattonata\", \"aggavignata\", \"aggelata\", \"aggettivata\", \"agghiacciata\", \"agghiadata\", \"agghiaiata\", \"agghindata\", \"aggiaccata\", \"aggiogata\", \"aggiornata\", \"aggirata\", \"aggiucchita\", \"aggiudicata\", \"aggiuntata\", \"aggiunta\", \"aggiustata\", \"agglomerata\", \"agglutinata\", \"aggomitolata\", \"aggottata\", \"aggradita\", \"aggraffata\", \"aggranchiata\", \"aggranchita\", \"aggrandita\", \"aggrappata\", \"aggraticciata\", \"aggravata\", \"aggredita\", \"aggregata\", \"aggrevata\", \"aggricciata\", \"aggrinzata\", \"aggrinzita\", \"aggrommata\", \"aggrondata\", \"aggroppata\", \"aggrottata\", \"aggrovigliata\", \"aggrumata\", \"aggruppata\", \"aggruzzolata\", \"agguagliata\", \"agguantata\", \"agguardata\", \"agguatata\", \"aggueffata\", \"agitata\", \"agognata\", \"agrarizzata\", \"aguatata\", \"agucchiata\", \"agunata\", \"agurata\", \"aguzzata\", \"aitata\", \"aiutata\", \"aizzata\", \"alata\", \"alberata\", \"albergata\", \"alcalinizzata\", \"alchilata\", \"alchimiata\", \"alchimizzata\", \"alcolizzata\", \"alcoolizzata\", \"alenata\", \"alesata\", \"alettata\", \"alfabetata\", \"alfabetizzata\", \"alidita\", \"alienata\", \"alimentata\", \"allacciata\", \"allagata\", \"allappata\", \"allargata\", \"allascata\", \"allattata\", \"alleata\", \"allegata\", \"alleggerita\", \"alleggiata\", \"allegorizzata\", \"alleluiata\", \"allenata\", \"allenita\", \"allentata\", \"allertata\", \"allessata\", \"allestita\", \"allettata\", \"allevata\", \"alleviata\", \"allibata\", \"allibita\", \"allibrata\", \"allicciata\", \"allietata\", \"allindata\", \"allineata\", \"allisa\", \"allocata\", \"allogata\", \"alloggiata\", \"allontanata\", \"allottata\", \"allucchettata\", \"allucciolata\", \"allucinata\", \"allumata\", \"alluminata\", \"alluminiata\", \"allungata\", \"allupata\", \"allusa\", \"alluzzata\", \"alogenata\", \"alonata\", \"alpeggiata\", \"alterata\", \"alternata\", \"alzata\", \"amalgamata\", \"amareggiata\", \"amaricata\", \"amata\", \"ambientata\", \"ambiguata\", \"ambita\", \"americanizzata\", \"amicata\", \"ammaccata\", \"ammaestrata\", \"ammainata\", \"ammalata\", \"ammaliata\", \"ammalinconita\", \"ammaltata\", \"ammanettata\", \"ammanicata\", \"ammanierata\", \"ammanigliata\", \"ammannata\", \"ammannellata\", \"ammannita\", \"ammansata\", \"ammansita\", \"ammantata\", \"ammantellata\", \"ammarata\", \"ammarezzata\", \"ammassata\", \"ammassellata\", \"ammassicciata\", \"ammatassata\", \"ammattonata\", \"ammazzata\", \"ammelmata\", \"ammencita\", \"ammendata\", \"ammennicolata\", \"ammessa\", \"ammetata\", \"ammezzita\", \"amministrata\", \"amminutata\", \"ammirata\", \"ammiserita\", \"ammobiliata\", \"ammodernata\", \"ammodernizzata\", \"ammogliata\", \"ammoinata\", \"ammollata\", \"ammollita\", \"ammonita\", \"ammonticchiata\", \"ammonticellata\", \"ammorbata\", \"ammorbidata\", \"ammorbidita\", \"ammorsata\", \"ammortata\", \"ammortita\", \"ammortizzata\", \"ammorzata\", \"ammosciata\", \"ammoscita\", \"ammostata\", \"ammotinata\", \"ammucchiata\", \"ammulinata\", \"ammusata\", \"ammutata\", \"ammutinata\", \"amnistiata\", \"amoracciata\", \"ampiata\", \"ampliata\", \"amplificata\", \"amputata\", \"anagrammata\", \"analizzata\", \"anamorfizzata\", \"anastomizzata\", \"anatematizzata\", \"anatomizzata\", \"anchilosata\", \"ancisa\", \"ancorata\", \"andatosena\", \"andicappata\", \"anellata\", \"anemizzata\", \"anestetizzata\", \"angariata\", \"anglicizzata\", \"angolata\", \"angosciata\", \"angustiata\", \"animata\", \"annacquata\", \"annaffiata\", \"annasata\", \"annaspata\", \"annaspicata\", \"annebbiata\", \"annegata\", \"annerata\", \"annerita\", \"annessa\", \"annestata\", \"annichilata\", \"annichilita\", \"annidata\", \"annientata\", \"annitrita\", \"annobilita\", \"annodata\", \"annodicchiata\", \"annoiata\", \"annotata\", \"annottata\", \"annottolata\", \"annoverata\", \"annullata\", \"annunciata\", \"annunziata\", \"annusata\", \"annuvolata\", \"anodizzata\", \"anonimizzata\", \"anteceduta\", \"anteposta\", \"antergata\", \"anticheggiata\", \"antichizzata\", \"anticipata\", \"anticonosciuta\", \"antidatata\", \"antiveduta\", \"antivista\", \"antologizzata\", \"antropizzata\", \"antropomorfizzata\", \"aocchiata\", \"aombrata\", \"aonestata\", \"aontata\", \"aperta\", \"apocopata\", \"apologizzata\", \"apostrofata\", \"appaciata\", \"appacificata\", \"appagata\", \"appaiata\", \"appalesata\", \"appallottolata\", \"appaltata\", \"appanettata\", \"appannata\", \"apparata\", \"apparecchiata\", \"apparentata\", \"apparigliata\", \"apparita\", \"appartata\", \"appassionata\", \"appastata\", \"appastellata\", \"appellata\", \"appennellata\", \"appercepita\", \"appertizzata\", \"appesantita\", \"appesita\", \"appesa\", \"appestata\", \"appetita\", \"appezzata\", \"appiacevolita\", \"appianata\", \"appiastrata\", \"appiatata\", \"appiattata\", \"appiattita\", \"appiccata\", \"appiccicata\", \"appiccolita\", \"appiedata\", \"appigionata\", \"appigliata\", \"appinzata\", \"appiombata\", \"appioppata\", \"appisolata\", \"applaudita\", \"applicata\", \"appoderata\", \"appoggiata\", \"appollaiata\", \"appoppata\", \"apportata\", \"appostata\", \"apposta\", \"appratita\", \"appresentata\", \"appresa\", \"appressata\", \"apprestata\", \"apprettata\", \"apprezzata\", \"approcciata\", \"approfittata\", \"approfondata\", \"approfondita\", \"approntata\", \"appropinquata\", \"appropriata\", \"approssimata\", \"approvata\", \"approvisionata\", \"approvvigionata\", \"appruata\", \"appulcrata\", \"appuntata\", \"appuntellata\", \"appuntita\", \"appurata\", \"appuzzata\", \"arabescata\", \"arabizzata\", \"arata\", \"arbitrata\", \"arborata\", \"arcaizzata\", \"arcata\", \"architettata\", \"archiviata\", \"arcuata\", \"ardita\", \"areata\", \"argentata\", \"arginata\", \"argomentata\", \"arguita\", \"arianizzata\", \"arieggiata\", \"armata\", \"armonizzata\", \"aromatizzata\", \"arpeggiata\", \"arpionata\", \"arponata\", \"arrabattata\", \"arraffata\", \"arraffiata\", \"arrandellata\", \"arrangiata\", \"arrapata\", \"arrapinata\", \"arrappata\", \"arrazzata\", \"arrecata\", \"arredata\", \"arreggimentata\", \"arrembata\", \"arrenata\", \"arresisa\", \"arresa\", \"arrestata\", \"arretrata\", \"arricchita\", \"arricciata\", \"arricciolata\", \"arriffata\", \"arringata\", \"arrischiata\", \"arrisicata\", \"arrisa\", \"arrocata\", \"arroccata\", \"arrochita\", \"arrogata\", \"arrolata\", \"arroncata\", \"arronzata\", \"arrosata\", \"arrossata\", \"arrostata\", \"arrostita\", \"arrotata\", \"arrotolata\", \"arrotondata\", \"arrovellata\", \"arroventata\", \"arroventita\", \"arrovesciata\", \"arrubinata\", \"arruffata\", \"arruffianata\", \"arrugginita\", \"arruncigliata\", \"arruolata\", \"arruvidita\", \"arsicciata\", \"arsa\", \"artefatta\", \"articolata\", \"artigliata\", \"ascesa\", \"asciata\", \"asciolvuta\", \"asciugata\", \"ascoltata\", \"ascosa\", \"ascosta\", \"ascritta\", \"asfaltata\", \"asfissiata\", \"aspersa\", \"aspettata\", \"aspirata\", \"asportata\", \"aspreggiata\", \"assaettata\", \"assaggiata\", \"assalita\", \"assaltata\", \"assaporata\", \"assaporita\", \"assassinata\", \"assecondata\", \"assecurata\", \"assediata\", \"asseggiata\", \"assegnata\", \"assembiata\", \"assemblata\", \"assembrata\", \"assemprata\", \"assentata\", \"asserita\", \"asserragliata\", \"asservita\", \"assestata\", \"assetata\", \"assettata\", \"asseverata\", \"assibilata\", \"assicurata\", \"assiderata\", \"assiemata\", \"assiepata\", \"assillata\", \"assimigliata\", \"assimilata\", \"assiomatizzata\", \"assisa\", \"assistita\", \"associata\", \"assodata\", \"assoggettata\", \"assolcata\", \"assoldata\", \"assolta\", \"assolutizzata\", \"assomata\", \"assommata\", \"assonata\", \"assonnata\", \"assopita\", \"assorbita\", \"assordata\", \"assordita\", \"assortita\", \"assottigliata\", \"assuefatta\", \"assunta\", \"asteggiata\", \"astenuta\", \"astersa\", \"astratta\", \"astretta\", \"atomizzata\", \"atrofizzata\", \"atrovata\", \"attaccata\", \"attagliata\", \"attanagliata\", \"attardata\", \"attediata\", \"atteggiata\", \"attempata\", \"attendata\", \"attentata\", \"attenuata\", \"attenuta\", \"attergata\", \"atterrata\", \"atterrita\", \"atterzata\", \"attesa\", \"attestata\", \"atticizzata\", \"attillata\", \"attinta\", \"attirata\", \"attivata\", \"attivizzata\", \"attizzata\", \"attorcigliata\", \"attorniata\", \"attorta\", \"attoscata\", \"attossicata\", \"attraccata\", \"attrappita\", \"attratta\", \"attraversata\", \"attrezzata\", \"attribuita\", \"attristata\", \"attristita\", \"attruppata\", \"attualizzata\", \"attuata\", \"attuffata\", \"attutata\", \"attutita\", \"auggiata\", \"augumentata\", \"augurata\", \"aulita\", \"aumentata\", \"aunghiata\", \"ausata\", \"auscultata\", \"auspicata\", \"autenticata\", \"autentificata\", \"autoaccusata\", \"autoaffondata\", \"autoalimentata\", \"autoassolta\", \"autocandidata\", \"autocensurata\", \"autocitata\", \"autocommiserata\", \"autoconsumata\", \"autoconvinta\", \"autodefinita\", \"autodenunciata\", \"autodistrutta\", \"autofinanziata\", \"autogestita\", \"autogovernata\", \"autografata\", \"autoincensata\", \"autointersecata\", \"autoinvitata\", \"autolesionata\", \"autolimitata\", \"automaticizzata\", \"automatizzata\", \"automotivata\", \"autonominata\", \"autoproclamata\", \"autoprodotta\", \"autoprotetta\", \"autopubblicata\", \"autopubblicizzata\", \"autoregolamentata\", \"autoregolata\", \"autoridotta\", \"autoriparata\", \"autorizzata\", \"autosomministrata\", \"autosostenuta\", \"autosuggestionata\", \"autotassata\", \"autotrapiantata\", \"autotrasportata\", \"autovalutata\", \"avallata\", \"avampata\", \"avanzata\", \"avariata\", \"avinta\", \"aviolanciata\", \"aviotrasportata\", \"avocata\", \"avolterata\", \"avulsa\", \"avutacela\", \"avuta\", \"avvalorata\", \"avvalsa\", \"avvantaggiata\", \"avvelata\", \"avvelenata\", \"avventata\", \"avventurata\", \"avverata\", \"avversata\", \"avvertita\", \"avvezzata\", \"avviata\", \"avvicendata\", \"avvicinata\", \"avvignata\", \"avvilita\", \"avviluppata\", \"avvinata\", \"avvinchiata\", \"avvinghiata\", \"avvinta\", \"avvisata\", \"avvistata\", \"avvitata\", \"avviticchiata\", \"avvitita\", \"avvivata\", \"avvolta\", \"avvoltolata\", \"aziendalizzata\", \"azionata\", \"azotata\", \"azzannata\", \"azzardata\", \"azzeccata\", \"azzerata\", \"azzimata\", \"azzittata\", \"azzittita\", \"azzoppata\", \"azzoppita\", \"azzuffata\", \"azzurrata\", \"bacata\", \"baccagliata\", \"bacchettata\", \"bacchiata\", \"baciata\", \"badata\", \"bagnata\", \"baipassata\", \"balbettata\", \"balcanizzata\", \"ballata\", \"baloccata\", \"balzata\", \"banalizzata\", \"bancata\", \"bandita\", \"bannata\", \"baraccata\", \"barattata\", \"barbarizzata\", \"barcamenata\", \"bardata\", \"barellata\", \"barrata\", \"barricata\", \"basata\", \"basciata\", \"basculata\", \"bassata\", \"bastata\", \"bastionata\", \"bastita\", \"bastonata\", \"battezzata\", \"battuta\", \"bazzicata\", \"beatificata\", \"beata\", \"beccata\", \"beccheggiata\", \"becchettata\", \"beffata\", \"beffeggiata\", \"bendata\", \"benedetta\", \"beneficata\", \"benvoluta\", \"berlusconizzata\", \"bersagliata\", \"bestemmiata\", \"bevuta\", \"biadata\", \"bianchettata\", \"bianchita\", \"biascicata\", \"biasimata\", \"biasmata\", \"bidonata\", \"biennalizzata\", \"biforcata\", \"bigiata\", \"bilanciata\", \"binata\", \"bindolata\", \"biodegradata\", \"biografata\", \"bipartita\", \"bisbigliata\", \"biscottata\", \"bisecata\", \"bisellata\", \"bisognata\", \"bissata\", \"bistrata\", \"bistrattata\", \"bitumata\", \"bituminata\", \"blandita\", \"bleffata\", \"blindata\", \"bloccata\", \"bobinata\", \"boccheggiata\", \"bocciata\", \"boicottata\", \"bollata\", \"bollita\", \"bombardata\", \"bombata\", \"bonderizzata\", \"bonificata\", \"bootata\", \"borbottata\", \"bordata\", \"boriata\", \"borrata\", \"borseggiata\", \"braccata\", \"bracciata\", \"bramata\", \"bramita\", \"brancicata\", \"brandeggiata\", \"brandita\", \"brasata\", \"bravata\", \"brevettata\", \"breviata\", \"brillantata\", \"brillata\", \"brinata\", \"broccata\", \"brocciata\", \"broccolata\", \"brontolata\", \"bronzata\", \"brucata\", \"bruciacchiata\", \"bruciata\", \"brunita\", \"bruscata\", \"bruschinata\", \"brutalizzata\", \"bruttata\", \"bucata\", \"bucherellata\", \"bufata\", \"buffata\", \"bufferizzata\", \"buggerata\", \"bugnata\", \"bulicata\", \"bulinata\", \"bullettata\", \"bullonata\", \"burattata\", \"burlata\", \"burocratizzata\", \"burrificata\", \"buscata\", \"buttata\", \"butterata\", \"bypassata\", \"cablata\", \"cabrata\", \"cacata\", \"cacciata\", \"cadenzata\", \"cadmiata\", \"caducata\", \"cagata\", \"caggiata\", \"cagionata\", \"cagliata\", \"calafatata\", \"calamitata\", \"calandrata\", \"calata\", \"calcata\", \"calciata\", \"calcificata\", \"calcolata\", \"caldeggiata\", \"calettata\", \"calibrata\", \"calmata\", \"calmierata\", \"calpestata\", \"calumata\", \"calunniata\", \"calzata\", \"cambiata\", \"camerata\", \"campionata\", \"campita\", \"camuffata\", \"canalizzata\", \"cancellata\", \"cancerizzata\", \"candeggiata\", \"candidata\", \"candita\", \"canforata\", \"cangiata\", \"cannata\", \"canneggiata\", \"cannibalizzata\", \"cannoneggiata\", \"canonizzata\", \"cantata\", \"canterellata\", \"canticchiata\", \"cantilenata\", \"canzonata\", \"caolinizzata\", \"capacitata\", \"capeggiata\", \"capillarizzata\", \"capitalizzata\", \"capitanata\", \"capitaneggiata\", \"capita\", \"capitozzata\", \"capivolta\", \"caponata\", \"capotata\", \"capottata\", \"capovolta\", \"capponata\", \"captata\", \"caramellata\", \"caramellizzata\", \"caratata\", \"caratterizzata\", \"carbonizzata\", \"carbossilata\", \"carburata\", \"carcata\", \"carcerata\", \"cardata\", \"carenata\", \"carezzata\", \"cariata\", \"caricata\", \"caricaturata\", \"caricaturizzata\", \"carotata\", \"carpionata\", \"carpita\", \"carreggiata\", \"carrozzata\", \"cartavetrata\", \"carteggiata\", \"cartellinata\", \"cartografata\", \"cartolarizzata\", \"cartonata\", \"cascolata\", \"cassata\", \"cassa\", \"castigata\", \"castrata\", \"casualizzata\", \"catabolizzata\", \"catalizzata\", \"catalogata\", \"catapultata\", \"catechizzata\", \"categorizzata\", \"cateterizzata\", \"catramata\", \"cattolicizzata\", \"catturata\", \"causata\", \"cautelata\", \"cauterizzata\", \"cauzionata\", \"cavalcata\", \"cavatasela\", \"cavata\", \"cazzata\", \"cazziata\", \"cazzottata\", \"cedrata\", \"ceduta\", \"celata\", \"celebrata\", \"cellofanata\", \"cementata\", \"cementificata\", \"cennata\", \"censita\", \"censurata\", \"centellata\", \"centellinata\", \"centimetrata\", \"centinata\", \"centralizzata\", \"centrata\", \"centrifugata\", \"centuplicata\", \"cerata\", \"cercata\", \"cerchiata\", \"cernuta\", \"certificata\", \"cesellata\", \"cessata\", \"cestinata\", \"cheratinizzata\", \"chetata\", \"chiamata\", \"chiappata\", \"chiarificata\", \"chiarita\", \"chiaroscurata\", \"chiavata\", \"chiazzata\", \"chiesta\", \"chilificata\", \"chilometrata\", \"chimificata\", \"chinata\", \"chinizzata\", \"chiodata\", \"chiosata\", \"chiusa\", \"choccata\", \"ciancicata\", \"cianfrinata\", \"cianfrugliata\", \"ciangottata\", \"ciattata\", \"cibata\", \"cicatrizzata\", \"ciccata\", \"cicchettata\", \"ciclizzata\", \"ciclostilata\", \"cifrata\", \"cilindrata\", \"cimata\", \"cimentata\", \"cincischiata\", \"cinematografata\", \"cintata\", \"cinta\", \"cioncata\", \"ciondolata\", \"circolata\", \"circoncinta\", \"circoncisa\", \"circondata\", \"circondotta\", \"circonflessa\", \"circonfluita\", \"circonfusa\", \"circonscritta\", \"circonvenuta\", \"circoscritta\", \"circostanziata\", \"circuita\", \"circumcinta\", \"circumnavigata\", \"citata\", \"ciucciata\", \"ciurmata\", \"civettata\", \"civilizzata\", \"clamata\", \"classata\", \"classicizzata\", \"classificata\", \"cliccata\", \"climatizzata\", \"clivata\", \"clonata\", \"cloroformizzata\", \"clorurata\", \"clusterizzata\", \"co-diretta\", \"coacervata\", \"coadiuvata\", \"coagulata\", \"coalizzata\", \"coartata\", \"coccolata\", \"codificata\", \"coeditata\", \"coesistita\", \"cofinanziata\", \"cofirmata\", \"cofondata\", \"cogestita\", \"cogitata\", \"coglionata\", \"cognosciuta\", \"coibentata\", \"coincisa\", \"cointeressata\", \"cointestata\", \"coinvolta\", \"cokificata\", \"colata\", \"colettata\", \"collassata\", \"collaudata\", \"collazionata\", \"collegata\", \"collettivizzata\", \"collezionata\", \"collimata\", \"colliquata\", \"collisa\", \"collocata\", \"colluttata\", \"colmata\", \"colonizzata\", \"colorata\", \"colorita\", \"colorizzata\", \"colpevolizzata\", \"colpita\", \"coltellata\", \"coltivata\", \"colta\", \"coltrata\", \"comandata\", \"combattuta\", \"combinata\", \"comburuta\", \"comicizzata\", \"cominciata\", \"commemorata\", \"commendata\", \"commensurata\", \"commentata\", \"commercializzata\", \"commessa\", \"comminata\", \"commiserata\", \"commissariata\", \"commissionata\", \"commisurata\", \"commossa\", \"commutata\", \"comodata\", \"compaginata\", \"comparita\", \"compartimentalizzata\", \"compartita\", \"compassionata\", \"compatibilizzata\", \"compatita\", \"compattata\", \"compendiata\", \"compenetrata\", \"compensata\", \"comperata\", \"compiaciuta\", \"compianta\", \"compilata\", \"compitata\", \"compiuta\", \"complessata\", \"complessificata\", \"complessa\", \"completata\", \"complicata\", \"complimentata\", \"comportata\", \"compostata\", \"composta\", \"comprata\", \"compravenduta\", \"compresa\", \"compressa\", \"compromessa\", \"comprovata\", \"compulsata\", \"compunta\", \"computata\", \"computerizzata\", \"comunicata\", \"comunistizzata\", \"concatenata\", \"conceduta\", \"concelebrata\", \"concentrata\", \"concepita\", \"concertata\", \"concessa\", \"concettata\", \"concettualizzata\", \"conchiusa\", \"conciata\", \"conciliata\", \"concimata\", \"concitata\", \"conclamata\", \"conclusa\", \"concordata\", \"concotta\", \"concretata\", \"concretizzata\", \"conculcata\", \"concupita\", \"condannata\", \"condensata\", \"condita\", \"condivisa\", \"condizionata\", \"condoluta\", \"condonata\", \"condotta\", \"confatta\", \"confederata\", \"conferita\", \"confermata\", \"confessata\", \"confettata\", \"confezionata\", \"conficcata\", \"confidata\", \"configurata\", \"confinata\", \"confinta\", \"confiscata\", \"confitta\", \"conformata\", \"confortata\", \"confricata\", \"confrontata\", \"confusa\", \"confutata\", \"congedata\", \"congegnata\", \"congelata\", \"congestionata\", \"congetturata\", \"congiunta\", \"conglobata\", \"conglomerata\", \"conglutinata\", \"congratulata\", \"congregata\", \"conguagliata\", \"coniata\", \"coniugata\", \"connaturata\", \"connessa\", \"connotata\", \"connumerata\", \"conosciuta\", \"conquistata\", \"consacrata\", \"consapevolizzata\", \"consegnata\", \"conseguita\", \"consentita\", \"conservata\", \"considerata\", \"consigliata\", \"consistita\", \"consociata\", \"consolata\", \"consolidata\", \"consorziata\", \"consparsa\", \"conspersa\", \"constatata\", \"constretta\", \"construita\", \"consultata\", \"consumata\", \"consunta\", \"contabilizzata\", \"contagiata\", \"containerizzata\", \"contaminata\", \"contata\", \"contattata\", \"conteggiata\", \"contemperata\", \"contemplata\", \"contentata\", \"contenuta\", \"contesa\", \"contestata\", \"contestualizzata\", \"contingentata\", \"continuata\", \"contornata\", \"contorta\", \"contrabbandata\", \"contraccambiata\", \"contraddetta\", \"contraddistinta\", \"contradetta\", \"contraffatta\", \"contrappesata\", \"contrapposta\", \"contrappuntata\", \"contrariata\", \"contrassegnata\", \"contrastata\", \"contrata\", \"contrattaccata\", \"contrattata\", \"contratta\", \"contravvalsa\", \"contristata\", \"controbattuta\", \"controbilanciata\", \"controdatata\", \"controfirmata\", \"controindicata\", \"controllata\", \"controminata\", \"contronotata\", \"controproposta\", \"controprovata\", \"controquerelata\", \"controsoffittata\", \"controstampata\", \"controventata\", \"conturbata\", \"contusa\", \"convalidata\", \"convenuta\", \"convenzionata\", \"convertita\", \"convinta\", \"convitata\", \"convocata\", \"convogliata\", \"convolta\", \"coobata\", \"cooptata\", \"coordinata\", \"coperchiata\", \"coperta\", \"copiaincollata\", \"copiata\", \"copolimerizzata\", \"coppellata\", \"coprodotta\", \"corazzata\", \"corbellata\", \"corcata\", \"cordonata\", \"coreografata\", \"coricata\", \"cornificata\", \"coronata\", \"corredata\", \"correlata\", \"corresponsabilizzata\", \"corretta\", \"corricchiata\", \"corrisposta\", \"corroborata\", \"corrosa\", \"corrotta\", \"corrucciata\", \"corrugata\", \"corsa\", \"corteata\", \"corteggiata\", \"cortocircuitata\", \"coruscata\", \"cosata\", \"coscritta\", \"cosparsa\", \"cospersa\", \"costatata\", \"costeggiata\", \"costellata\", \"costernata\", \"costicchiata\", \"costipata\", \"costituita\", \"costituzionalizzata\", \"costretta\", \"costruita\", \"costudita\", \"cotonata\", \"cotta\", \"covata\", \"coventrizzata\", \"coverchiata\", \"craccata\", \"creata\", \"creduta\", \"cremata\", \"crepata\", \"cresciuta\", \"cresimata\", \"crespata\", \"criminalizzata\", \"crioconcentrata\", \"criptata\", \"cristallizzata\", \"cristianizzata\", \"criticata\", \"crittata\", \"crittografata\", \"crivellata\", \"crocchiata\", \"crocefissa\", \"crocefitta\", \"crocifissa\", \"crocifitta\", \"crogiolata\", \"cromata\", \"cronicizzata\", \"cronometrata\", \"crostata\", \"crucciata\", \"crucifissa\", \"crucifitta\", \"cuccata\", \"cucinata\", \"cucita\", \"cullata\", \"cumulata\", \"cuntata\", \"curata\", \"curvata\", \"curvata\", \"custodita\", \"customizzata\", \"damascata\", \"damaschinata\", \"damata\", \"dannata\", \"danneggiata\", \"danzata\", \"dardeggiata\", \"datata\", \"data\", \"dattilografata\", \"dattiloscritta\", \"daziata\", \"deacidificata\", \"deattivata\", \"debbiata\", \"debellata\", \"debilitata\", \"decaffeinata\", \"decaffeinizzata\", \"decalcata\", \"decalcificata\", \"decantata\", \"decapata\", \"decapitata\", \"decappottata\", \"decarbossilata\", \"decarburata\", \"decatizzata\", \"decelerata\", \"decentralizzata\", \"decentrata\", \"decerebrata\", \"decernuta\", \"decespugliata\", \"deciferata\", \"decifrata\", \"decimalizzata\", \"decimata\", \"decisa\", \"declamata\", \"declassata\", \"declassificata\", \"declinata\", \"declorata\", \"decodificata\", \"decolonizzata\", \"decolorata\", \"decompartimentata\", \"decompilata\", \"decomposta\", \"decompressa\", \"deconcentrata\", \"decondizionata\", \"decongelata\", \"decongestionata\", \"decontaminata\", \"decontestualizzata\", \"decontratta\", \"decorata\", \"decorticata\", \"decostruita\", \"decrementata\", \"decretata\", \"decriminalizzata\", \"decriptata\", \"decrittata\", \"decuplicata\", \"decurtata\", \"dedicata\", \"dedotta\", \"defacciata\", \"defalcata\", \"defascistizzata\", \"defecata\", \"defenestrata\", \"deferita\", \"defilata\", \"definita\", \"defiscalizzata\", \"defitta\", \"deflazionata\", \"deflemmata\", \"deflorata\", \"defogliata\", \"defoliata\", \"deforestata\", \"deformata\", \"defosforata\", \"defosforilata\", \"deframmentata\", \"defraudata\", \"degassata\", \"degassificata\", \"deglutita\", \"degnata\", \"degradata\", \"degustata\", \"deidratata\", \"deidrogenata\", \"deificata\", \"deindicizzata\", \"deindustrializzata\", \"deionizzata\", \"delegata\", \"delegificata\", \"delegittimata\", \"delibata\", \"deliberata\", \"delimitata\", \"delineata\", \"delirata\", \"deliziata\", \"delocalizzata\", \"delucidata\", \"delusa\", \"demagnetizzata\", \"demandata\", \"demanializzata\", \"demarcata\", \"demeritata\", \"demersa\", \"demetallizzata\", \"demilitarizzata\", \"demineralizzata\", \"demistificata\", \"demitizzata\", \"democratizzata\", \"demodulata\", \"demolita\", \"demoltiplicata\", \"demonetata\", \"demonetizzata\", \"demonizzata\", \"demoralizzata\", \"demorsa\", \"demotivata\", \"denaturalizzata\", \"denaturata\", \"denazificata\", \"denazionalizzata\", \"denicotinizzata\", \"denigrata\", \"denitrificata\", \"denocciolata\", \"denominata\", \"denotata\", \"dentellata\", \"denuclearizzata\", \"denudata\", \"denunciata\", \"denunziata\", \"deodorata\", \"deossidata\", \"deossigenata\", \"deostruita\", \"depauperata\", \"depenalizzata\", \"depennata\", \"depilata\", \"depinta\", \"depistata\", \"deplorata\", \"depolarizzata\", \"depolimerizzata\", \"depoliticizzata\", \"depolverizzata\", \"deportata\", \"depositata\", \"deposta\", \"depotenziata\", \"depravata\", \"deprecata\", \"depredata\", \"depressa\", \"depressurizzata\", \"deprezzata\", \"deprivata\", \"deprotonata\", \"depulsa\", \"depurata\", \"dequalificata\", \"deratizzata\", \"derattizzata\", \"dereferenziata\", \"deregolamentata\", \"deregolata\", \"derequisita\", \"deresponsabilizzata\", \"derisa\", \"derubata\", \"derubricata\", \"desacralizzata\", \"desalata\", \"desalinizzata\", \"descolarizzata\", \"descritta\", \"desecretata\", \"desegretata\", \"deselezionata\", \"desensibilizzata\", \"desessualizzata\", \"desiata\", \"desiderata\", \"designata\", \"desinata\", \"desirata\", \"desolata\", \"desolforata\", \"desonorizzata\", \"desorbita\", \"desossidata\", \"desquamata\", \"destabilizzata\", \"destagionalizzata\", \"destalinizzata\", \"destatalizzata\", \"destatizzata\", \"destata\", \"destinata\", \"destituita\", \"destoricizzata\", \"destreggiata\", \"destrutta\", \"destrutturata\", \"desunta\", \"detassata\", \"detenuta\", \"deteriorata\", \"determinata\", \"detersa\", \"detestata\", \"detonata\", \"detorta\", \"detossificata\", \"detratta\", \"detronizzata\", \"dettagliata\", \"dettata\", \"detta\", \"deturpata\", \"deumidificata\", \"devastata\", \"deventata\", \"deviata\", \"deviscerata\", \"devitalizzata\", \"devitaminizzata\", \"devoluta\", \"dezippata\", \"diaframmata\", \"diagnosticata\", \"diagonalizzata\", \"diagrammata\", \"dializzata\", \"dialogata\", \"dialogizzata\", \"diazotata\", \"dibattuta\", \"diboscata\", \"dichiarata\", \"diesata\", \"diesizzata\", \"difesa\", \"diffamata\", \"differita\", \"diffidata\", \"diffranta\", \"diffratta\", \"diffusa\", \"digerita\", \"digitalizzata\", \"digitata\", \"digiunta\", \"digrassata\", \"digrignata\", \"digrossata\", \"dilacerata\", \"dilaniata\", \"dilapidata\", \"dilatata\", \"dilavata\", \"dilazionata\", \"dileggiata\", \"dileguata\", \"dilettata\", \"diletta\", \"diliscata\", \"dilucidata\", \"diluita\", \"dilungata\", \"dimagrata\", \"dimandata\", \"dimenata\", \"dimensionata\", \"dimenticata\", \"dimerizzata\", \"dimessa\", \"dimezzata\", \"diminuita\", \"dimissionata\", \"dimostrata\", \"dimunta\", \"dinamizzata\", \"dinoccata\", \"dipanata\", \"dipelata\", \"dipinta\", \"diplomata\", \"diposta\", \"diradata\", \"diramata\", \"diretta\", \"direzionata\", \"dirimuta\", \"diroccata\", \"dirottata\", \"dirotta\", \"dirozzata\", \"disabilitata\", \"disabituata\", \"disaccentata\", \"disaccoppiata\", \"disaccordata\", \"disacerbata\", \"disacidata\", \"disacidificata\", \"disacidita\", \"disaerata\", \"disaffezionata\", \"disaggregata\", \"disalberata\", \"disallineata\", \"disamata\", \"disambiguata\", \"disaminata\", \"disamorata\", \"disancorata\", \"disanimata\", \"disappannata\", \"disapplicata\", \"disappresa\", \"disapprovata\", \"disarcionata\", \"disarmata\", \"disarticolata\", \"disascosta\", \"disassemblata\", \"disassuefatta\", \"disatomizzata\", \"disattesa\", \"disattivata\", \"disattrezzata\", \"disavvezzata\", \"disboscata\", \"disbrigata\", \"discacciata\", \"discalzata\", \"discantata\", \"discaricata\", \"discernuta\", \"discesa\", \"disceverata\", \"dischiesta\", \"dischiusa\", \"discinta\", \"disciolta\", \"disciplinata\", \"discolorata\", \"discolpata\", \"discommessa\", \"discompagnata\", \"discomposta\", \"disconclusa\", \"disconfitta\", \"discongiunta\", \"disconnessa\", \"disconosciuta\", \"discoperta\", \"discordata\", \"discoscesa\", \"discostata\", \"discreditata\", \"discresciuta\", \"discriminata\", \"discritta\", \"discucita\", \"discuoiata\", \"discussa\", \"disdegnata\", \"disdettata\", \"disdetta\", \"diseccata\", \"diseccitata\", \"diseducata\", \"disegnata\", \"diserbata\", \"diseredata\", \"disertata\", \"diserta\", \"disfatta\", \"disgelata\", \"disgiunta\", \"disgraziata\", \"disgregata\", \"disgustata\", \"disidentificata\", \"disiderata\", \"disidratata\", \"disillusa\", \"disimballata\", \"disimparata\", \"disimpegnata\", \"disimpressa\", \"disincagliata\", \"disincantata\", \"disincentivata\", \"disincrostata\", \"disindustrializzata\", \"disinfestata\", \"disinfettata\", \"disinflazionata\", \"disinformata\", \"disingannata\", \"disingranata\", \"disinibita\", \"disinnamorata\", \"disinnescata\", \"disinnestata\", \"disinquinata\", \"disinserita\", \"disinstallata\", \"disintasata\", \"disintegrata\", \"disinteressata\", \"disintesa\", \"disintossicata\", \"disinvestita\", \"disinvolta\", \"disistimata\", \"dislocata\", \"dismessa\", \"disobbedita\", \"disobbligata\", \"disonorata\", \"disordinata\", \"disorganizzata\", \"disorientata\", \"disormeggiata\", \"disossata\", \"disossidata\", \"disostruita\", \"disotterrata\", \"disparita\", \"dispensata\", \"dispenta\", \"disperduta\", \"dispersa\", \"dispesa\", \"dispiegata\", \"dispinta\", \"dispogliata\", \"disposta\", \"dispregiata\", \"disprezzata\", \"dispromessa\", \"disproporzionata\", \"disputata\", \"disqualificata\", \"disrotta\", \"dissacrata\", \"dissalata\", \"dissaldata\", \"dissanguata\", \"dissecata\", \"disseccata\", \"disselciata\", \"dissellata\", \"disseminata\", \"dissepolta\", \"disseppellita\", \"dissequestrata\", \"disserrata\", \"dissestata\", \"dissetata\", \"dissezionata\", \"dissigillata\", \"dissimulata\", \"dissipata\", \"dissociata\", \"dissodata\", \"dissolta\", \"dissomigliata\", \"dissotterrata\", \"dissuasa\", \"dissuggellata\", \"distaccata\", \"distanziata\", \"distesa\", \"distillata\", \"distinta\", \"distolta\", \"distorta\", \"distratta\", \"distretta\", \"distribuita\", \"districata\", \"distrigata\", \"distrutta\", \"disturbata\", \"disubbidita\", \"disumanata\", \"disumanizzata\", \"disunita\", \"disusata\", \"disveduta\", \"disvelata\", \"disvestita\", \"disviata\", \"disvista\", \"disvolta\", \"disvoluta\", \"dittongata\", \"divallata\", \"divaricata\", \"divelta\", \"diversificata\", \"divertita\", \"divezzata\", \"divinata\", \"divincolata\", \"divinizzata\", \"divisa\", \"divolta\", \"divorata\", \"divorziata\", \"divulgata\", \"documentata\", \"dogata\", \"dogmatizzata\", \"dolcificata\", \"dollarizzata\", \"dolorata\", \"doluta\", \"domandata\", \"domata\", \"domesticata\", \"domiciliata\", \"dominata\", \"donata\", \"dondolata\", \"dopata\", \"doppiata\", \"dorata\", \"dormitoca\", \"dosata\", \"dotata\", \"dovuta\", \"dragata\", \"drammatizzata\", \"drappeggiata\", \"drenata\", \"dribblata\", \"drizzata\", \"drogata\", \"dugliata\", \"duplicata\", \"duramificata\", \"ebraizzata\", \"ecceduta\", \"eccepita\", \"eccettuata\", \"eccitata\", \"echeggiata\", \"eclissata\", \"economizzata\", \"edificata\", \"editata\", \"edotta\", \"educata\", \"edulcorata\", \"effettuata\", \"efficientata\", \"effigiata\", \"effinta\", \"effluita\", \"effusa\", \"egemonizzata\", \"eguagliata\", \"eiettata\", \"elaborata\", \"elargita\", \"elasticizzata\", \"elementarizzata\", \"elemosinata\", \"elencata\", \"eletta\", \"elettrificata\", \"elettrizzata\", \"elettrocoagulata\", \"elettrolizzata\", \"elevata\", \"eliminata\", \"elisa\", \"elitrasportata\", \"ellenizzata\", \"elogiata\", \"elucidata\", \"elucubrata\", \"eluita\", \"elusa\", \"emanata\", \"emancipata\", \"emarginata\", \"embricata\", \"emendata\", \"emessa\", \"emozionata\", \"empita\", \"empiuta\", \"emulata\", \"emulsionata\", \"emunta\", \"encomiata\", \"endocitata\", \"energizzata\", \"enfatizzata\", \"enfiata\", \"entusiasmata\", \"enucleata\", \"enumerata\", \"enunciata\", \"epicureggiata\", \"epurata\", \"equalizzata\", \"equilibrata\", \"equipaggiata\", \"equiparata\", \"eradicata\", \"erasa\", \"ereditata\", \"eretta\", \"erogata\", \"eroicizzata\", \"erosa\", \"erotizzata\", \"erpicata\", \"ersa\", \"erudita\", \"eruttata\", \"esacerbata\", \"esagerata\", \"esagitata\", \"esalata\", \"esaltata\", \"esaminata\", \"esasperata\", \"esaudita\", \"esaurita\", \"esautorata\", \"esborsata\", \"esclusa\", \"escogitata\", \"escomiata\", \"escoriata\", \"escossa\", \"escussa\", \"esecrata\", \"esecutata\", \"eseguita\", \"esemplificata\", \"esentata\", \"esercitata\", \"esfoliata\", \"esibita\", \"esilarata\", \"esiliata\", \"esimuta\", \"esitata\", \"esonerata\", \"esorbitata\", \"esorcizzata\", \"esortata\", \"espansa\", \"esparsa\", \"esperimentata\", \"esperita\", \"espettorata\", \"espiantata\", \"espiata\", \"espirata\", \"espletata\", \"esplicata\", \"esplicitata\", \"esplorata\", \"esplosa\", \"esportata\", \"esposta\", \"espressa\", \"espropriata\", \"espugnata\", \"espulsa\", \"espunta\", \"espurgata\", \"essiccata\", \"essuta\", \"estasiata\", \"estenuata\", \"esterificata\", \"esteriorizzata\", \"esterminata\", \"esternalizzata\", \"esternata\", \"estesa\", \"estimata\", \"estinta\", \"estirpata\", \"estivata\", \"estorta\", \"estradata\", \"estraniata\", \"estrapolata\", \"estratta\", \"estremizzata\", \"estrinsecata\", \"estromessa\", \"estrusa\", \"estubata\", \"esulcerata\", \"esultata\", \"esumata\", \"eterificata\", \"eterizzata\", \"eternata\", \"eternizzata\", \"etichettata\", \"etossilata\", \"euforizzata\", \"europeizzata\", \"evacuata\", \"evangelizzata\", \"evasa\", \"eveta\", \"evidenziata\", \"evinta\", \"evirata\", \"eviscerata\", \"evitata\", \"evocata\", \"evolta\", \"evoluta\", \"evulsa\", \"fabbricata\", \"faccettata\", \"facilitata\", \"fagocitata\", \"falciata\", \"falcidiata\", \"fallita\", \"falsata\", \"falsificata\", \"familiarizzata\", \"fanatizzata\", \"fantasticata\", \"farcita\", \"farfugliata\", \"fasciata\", \"fascicolata\", \"fascistizzata\", \"fattacela\", \"fatta\", \"fattorizzata\", \"fatturata\", \"favellata\", \"favoreggiata\", \"favorita\", \"faxata\", \"fecondata\", \"fedecommessa\", \"federalizzata\", \"federata\", \"felicitata\", \"felpata\", \"feltrata\", \"femminilizzata\", \"fenduta\", \"ferita\", \"fermata\", \"fermentata\", \"ferrata\", \"fertilizzata\", \"fessa\", \"fessurata\", \"festeggiata\", \"festonata\", \"feudalizzata\", \"fiaccata\", \"fiammeggiata\", \"fiancheggiata\", \"ficcata\", \"fidanzata\", \"fidata\", \"fidecommessa\", \"fidelizzata\", \"figliata\", \"figurata\", \"filata\", \"filettata\", \"filmata\", \"filosofata\", \"filtrata\", \"finalizzata\", \"finanziata\", \"finitala\", \"finita\", \"finlandizzata\", \"fintata\", \"finta\", \"fiocinata\", \"fiondata\", \"fiorettata\", \"firmata\", \"fiscalizzata\", \"fischiata\", \"fischiettata\", \"fissata\", \"fissionata\", \"fitta\", \"fiutata\", \"flagellata\", \"flaggata\", \"flambata\", \"flangiata\", \"flemmatizzata\", \"flessa\", \"flippata\", \"flottata\", \"fluidificata\", \"fluidizzata\", \"fluorizzata\", \"fluorurata\", \"focalizzata\", \"focheggiata\", \"foderata\", \"foggiata\", \"fognata\", \"folgorata\", \"follata\", \"fomentata\", \"fonata\", \"fondata\", \"foracchiata\", \"foraggiata\", \"forata\", \"forestata\", \"forfettizzata\", \"forgiata\", \"formalizzata\", \"formata\", \"formattata\", \"formilata\", \"formulata\", \"fornita\", \"fortificata\", \"forviata\", \"forwardata\", \"forzata\", \"fosfatata\", \"fosforata\", \"fosforilata\", \"fossilizzata\", \"fotocomposta\", \"fotocopiata\", \"fotografata\", \"fottuta\", \"fracassata\", \"fraintesa\", \"framessa\", \"frammentata\", \"frammessa\", \"frammezzata\", \"frammischiata\", \"franceseggiata\", \"francesizzata\", \"frangiata\", \"franta\", \"frantumata\", \"frappata\", \"frapposta\", \"fraseggiata\", \"frastagliata\", \"frastornata\", \"fratturata\", \"frazionata\", \"freddata\", \"fregata\", \"fregiata\", \"frenata\", \"frequentata\", \"fresata\", \"frettata\", \"friendzonata\", \"fritta\", \"frizionata\", \"frodata\", \"frollata\", \"fronteggiata\", \"frugata\", \"fruita\", \"frullata\", \"frusciata\", \"frustata\", \"frustrata\", \"fruttata\", \"fucilata\", \"fucinata\", \"fugata\", \"fuggita\", \"fulminata\", \"fumata\", \"fumigata\", \"funestata\", \"funta\", \"funzionata\", \"fuoriuscita\", \"fuorviata\", \"fusa\", \"fustellata\", \"fustigata\", \"gabbata\", \"gabellata\", \"gallata\", \"gallicizzata\", \"gallonata\", \"galvanizzata\", \"gambizzata\", \"garantita\", \"garnettata\", \"garrotata\", \"garzata\", \"gasata\", \"gassata\", \"gassificata\", \"gazata\", \"gelatinizzata\", \"gelata\", \"gelificata\", \"gemellata\", \"gemicata\", \"geminata\", \"generalizzata\", \"generata\", \"gentrificata\", \"genuflessa\", \"geometrizzata\", \"georeferenziata\", \"gerarchizzata\", \"germanizzata\", \"gestita\", \"gettata\", \"gettonata\", \"ghermita\", \"ghettizzata\", \"ghigliottinata\", \"ghindata\", \"gibollata\", \"gingillata\", \"ginnata\", \"giocata\", \"gioita\", \"gionglata\", \"giovaneggiata\", \"girandolata\", \"girata\", \"giudicata\", \"giulebbata\", \"giuntata\", \"giunta\", \"giuracchiata\", \"giurata\", \"giustapposta\", \"giustificata\", \"giustiziata\", \"glamourizzata\", \"glassata\", \"glissata\", \"globalizzata\", \"gloriata\", \"glorificata\", \"glossata\", \"godronata\", \"goduta\", \"goffrata\", \"gommata\", \"gonfiata\", \"googlata\", \"gottata\", \"governata\", \"gradinata\", \"gradita\", \"gradualizzata\", \"graduata\", \"graffata\", \"graffiata\", \"graffita\", \"graficata\", \"grafitata\", \"gramolata\", \"granagliata\", \"grandinata\", \"granellata\", \"granita\", \"granulata\", \"graticciata\", \"graticolata\", \"gratificata\", \"gratinata\", \"grattata\", \"grattugiata\", \"gravata\", \"graziata\", \"grecheggiata\", \"grecizzata\", \"gremita\", \"gridata\", \"griffata\", \"grigliata\", \"grippata\", \"groccata\", \"grondata\", \"grugata\", \"grugnita\", \"guadagnata\", \"gualcita\", \"guardata\", \"guarita\", \"guarnita\", \"guastata\", \"guatata\", \"guerreggiata\", \"gufata\", \"guidata\", \"gustata\", \"hackerata\", \"handicappata\", \"ibridata\", \"idealizzata\", \"ideata\", \"identificata\", \"ideologizzata\", \"idolatrata\", \"idoleggiata\", \"idratata\", \"idrogenata\", \"idrolizzata\", \"iettata\", \"igienizzata\", \"ignifugata\", \"ignorata\", \"illanguidita\", \"illeggiadrita\", \"illividita\", \"illuminata\", \"illusa\", \"illustrata\", \"imbacuccata\", \"imbaldanzita\", \"imballata\", \"imbalsamata\", \"imbambolata\", \"imbandierata\", \"imbandita\", \"imbarbarita\", \"imbarcata\", \"imbarilata\", \"imbastardita\", \"imbastita\", \"imbattuta\", \"imbavagliata\", \"imbeccata\", \"imbellettata\", \"imbellita\", \"imbestialita\", \"imbestiata\", \"imbevuta\", \"imbiaccata\", \"imbiancata\", \"imbianchita\", \"imbibita\", \"imbiettata\", \"imbiondita\", \"imbizzarrita\", \"imboccata\", \"imbonita\", \"imborghesita\", \"imboscata\", \"imboschita\", \"imbottata\", \"imbottigliata\", \"imbottita\", \"imbozzimata\", \"imbracata\", \"imbracciata\", \"imbragata\", \"imbrancata\", \"imbrattata\", \"imbrecciata\", \"imbrigliata\", \"imbrillantinata\", \"imbroccata\", \"imbrodata\", \"imbrogliata\", \"imbronciata\", \"imbruttita\", \"imbucata\", \"imbudellata\", \"imbullettata\", \"imbullonata\", \"imburrata\", \"imbussolata\", \"imbustata\", \"imbutita\", \"imitata\", \"immagazzinata\", \"immaginata\", \"immalinconita\", \"immatricolata\", \"immedesimata\", \"immersa\", \"immessa\", \"immischiata\", \"immiserita\", \"immobilizzata\", \"immolata\", \"immortalata\", \"immunizzata\", \"immusonita\", \"impaccata\", \"impacchettata\", \"impacciata\", \"impadronita\", \"impaginata\", \"impagliata\", \"impalata\", \"impalcata\", \"impallata\", \"impallinata\", \"impalmata\", \"impaludata\", \"impanata\", \"impaniata\", \"impannata\", \"impantanata\", \"impaperata\", \"impapocchiata\", \"impappinata\", \"imparentata\", \"imparruccata\", \"impartita\", \"impastata\", \"impasticcata\", \"impasticciata\", \"impastocchiata\", \"impastoiata\", \"impataccata\", \"impattata\", \"impaurita\", \"impavesata\", \"impeciata\", \"impedicata\", \"impedita\", \"impegnata\", \"impegolata\", \"impelagata\", \"impellicciata\", \"impennacchiata\", \"impennata\", \"impensierita\", \"impepata\", \"imperlata\", \"impermalita\", \"impermeabilizzata\", \"imperniata\", \"impersonata\", \"impersonificata\", \"impestata\", \"impetrata\", \"impiallacciata\", \"impiantata\", \"impiastrata\", \"impiastricciata\", \"impiccata\", \"impicciata\", \"impicciolita\", \"impiccolita\", \"impidocchiata\", \"impiegata\", \"impietosita\", \"impietrita\", \"impigliata\", \"impigrita\", \"impilata\", \"impillaccherata\", \"impinguata\", \"impinta\", \"impinzata\", \"impiombata\", \"impipata\", \"impiumata\", \"implementata\", \"implicata\", \"implorata\", \"impollinata\", \"impolpata\", \"impoltronita\", \"impolverata\", \"impomatata\", \"imporcata\", \"imporporata\", \"importata\", \"importunata\", \"impossessata\", \"impossibilitata\", \"impostata\", \"imposta\", \"impratichita\", \"impregnata\", \"impresa\", \"impressionata\", \"impressa\", \"imprestata\", \"impreziosita\", \"imprigionata\", \"impromessa\", \"improntata\", \"improsciuttita\", \"impugnata\", \"impuntita\", \"impunturata\", \"impupata\", \"imputata\", \"impuzzolentita\", \"inabilitata\", \"inabissata\", \"inacerbita\", \"inacetita\", \"inacidita\", \"inacutita\", \"inaffiata\", \"inalata\", \"inalberata\", \"inalveata\", \"inalzata\", \"inamidata\", \"inanellata\", \"inarcata\", \"inargentata\", \"inaridita\", \"inasprita\", \"inastata\", \"inattivata\", \"inaugurata\", \"incacchiata\", \"incalcinata\", \"incalorita\", \"incalzata\", \"incamerata\", \"incamiciata\", \"incamminata\", \"incanaglita\", \"incanalata\", \"incannata\", \"incannucciata\", \"incaponita\", \"incappottata\", \"incappucciata\", \"incaprettata\", \"incapricciata\", \"incapsulata\", \"incarcerata\", \"incardinata\", \"incaricata\", \"incarnata\", \"incarrozzata\", \"incartata\", \"incartocciata\", \"incartonata\", \"incasellata\", \"incasinata\", \"incassata\", \"incastellata\", \"incastonata\", \"incastrata\", \"incatenata\", \"incatramata\", \"incattivita\", \"incavata\", \"incavigliata\", \"incavolata\", \"incazzata\", \"incellofanata\", \"incendiata\", \"incenerita\", \"incensata\", \"incentivata\", \"incentrata\", \"inceppata\", \"incerata\", \"incernierata\", \"incerottata\", \"incesa\", \"incettata\", \"inchiappettata\", \"inchiavardata\", \"inchiesta\", \"inchinata\", \"inchiodata\", \"inchiostrata\", \"incipriata\", \"incisa\", \"incistata\", \"incitata\", \"inciuccata\", \"incivilita\", \"inclinata\", \"inclusa\", \"incoccata\", \"incocciata\", \"incoiata\", \"incollata\", \"incolonnata\", \"incolpata\", \"incominciata\", \"incomodata\", \"incontrata\", \"incoraggiata\", \"incordata\", \"incornata\", \"incorniciata\", \"incoronata\", \"incorporata\", \"incotta\", \"incravattata\", \"incrementata\", \"increspata\", \"incretinita\", \"incriminata\", \"incrinata\", \"incrociata\", \"incrostata\", \"incrudelita\", \"incrudita\", \"incruscata\", \"incubata\", \"inculata\", \"inculcata\", \"incuneata\", \"incuoiata\", \"incuorata\", \"incupita\", \"incuriosita\", \"incurvata\", \"incussa\", \"indagata\", \"indebitata\", \"indebolita\", \"indemaniata\", \"indennizzata\", \"indetta\", \"indicata\", \"indicizzata\", \"indignata\", \"indiretta\", \"indirizzata\", \"indispettita\", \"indisposta\", \"individualizzata\", \"individuata\", \"indolenzita\", \"indorata\", \"indossata\", \"indotta\", \"indottoma\", \"indottrinata\", \"indovinata\", \"indugiata\", \"indulta\", \"indurata\", \"indurita\", \"industrializzata\", \"industriata\", \"inebetita\", \"inebriata\", \"inerita\", \"inerpicata\", \"infagottata\", \"infamata\", \"infangata\", \"infarcita\", \"infarinata\", \"infastidita\", \"infatuata\", \"infeltrita\", \"inferita\", \"inferocita\", \"inferta\", \"infervorata\", \"infestata\", \"infettata\", \"infeudata\", \"infiacchita\", \"infialata\", \"infialettata\", \"infiammata\", \"infiascata\", \"infibulata\", \"inficiata\", \"infilata\", \"infiltrata\", \"infilzata\", \"infingardita\", \"infinocchiata\", \"infinta\", \"infioccata\", \"infiocchettata\", \"infiochita\", \"infiorata\", \"infirmata\", \"infischiata\", \"infissa\", \"infittita\", \"inflazionata\", \"inflessa\", \"inflitta\", \"influenzata\", \"infocata\", \"infoderata\", \"infognata\", \"infoibata\", \"infoltita\", \"inforcata\", \"informatizzata\", \"informata\", \"informicolata\", \"informicolita\", \"infornaciata\", \"infornata\", \"infortunata\", \"infoscata\", \"infossata\", \"infradiciata\", \"inframessa\", \"inframezzata\", \"inframmessa\", \"inframmezzata\", \"infrancesata\", \"infrapposta\", \"infrascata\", \"infrattata\", \"infreddata\", \"infronzolata\", \"infuocata\", \"infurbita\", \"infuriata\", \"ingabbiata\", \"ingaggiata\", \"ingagliardita\", \"ingannata\", \"ingarbugliata\", \"ingavonata\", \"ingegnata\", \"ingegnerizzata\", \"ingelosita\", \"ingemmata\", \"ingenerata\", \"ingentilita\", \"ingerita\", \"ingessata\", \"inghiaiata\", \"inghiottita\", \"inghirlandata\", \"ingiallita\", \"ingigantita\", \"inginocchiata\", \"ingioiellata\", \"ingiunta\", \"ingiuriata\", \"inglesizzata\", \"inglobata\", \"ingoffita\", \"ingoiata\", \"ingolfata\", \"ingollata\", \"ingolosita\", \"ingombrata\", \"ingommata\", \"ingorgata\", \"ingozzata\", \"ingranata\", \"ingrandita\", \"ingrassata\", \"ingraticciata\", \"ingraticolata\", \"ingravidata\", \"ingraziata\", \"ingraziosita\", \"ingrigita\", \"ingrommata\", \"ingrossata\", \"ingrullita\", \"inguaiata\", \"inguainata\", \"ingualdrappata\", \"inguantata\", \"ingurgitata\", \"inibita\", \"iniettata\", \"inimicata\", \"inizializzata\", \"iniziata\", \"inmillata\", \"innacquata\", \"innaffiata\", \"innalzata\", \"innamorata\", \"innastata\", \"innervata\", \"innervosita\", \"innescata\", \"innestata\", \"innevata\", \"innocentata\", \"innocuizzata\", \"innovata\", \"inoculata\", \"inoltrata\", \"inondata\", \"inorgoglita\", \"inorpellata\", \"inorridita\", \"inquadrata\", \"inquietata\", \"inquisita\", \"insabbiata\", \"insacchettata\", \"insalata\", \"insaldata\", \"insalivata\", \"insanguinata\", \"insaponata\", \"insaporita\", \"inscatolata\", \"inscenata\", \"inscritta\", \"insecchita\", \"insediata\", \"insegnata\", \"inseguita\", \"insellata\", \"inselvatichita\", \"inserita\", \"insidiata\", \"insignita\", \"insilata\", \"insinuata\", \"insolentita\", \"insonnolita\", \"insonorizzata\", \"insordita\", \"insospettita\", \"insozzata\", \"inspessita\", \"inspirata\", \"installata\", \"instaurata\", \"insterilita\", \"instillata\", \"instituita\", \"instradata\", \"insudiciata\", \"insufflata\", \"insultata\", \"insuperbita\", \"intabaccata\", \"intabarrata\", \"intaccata\", \"intagliata\", \"intarsiata\", \"intasata\", \"intascata\", \"intavolata\", \"integrata\", \"intelaiata\", \"intelata\", \"intellettualizzata\", \"intenebrata\", \"intenerita\", \"intensificata\", \"intentata\", \"intepidita\", \"intercalata\", \"intercambiata\", \"intercettata\", \"intercisa\", \"interclusa\", \"intercollegata\", \"interconnessa\", \"interconvertita\", \"interdetta\", \"interessata\", \"interfacciata\", \"interfogliata\", \"interfoliata\", \"interiorizzata\", \"interlacciata\", \"interlineata\", \"intermessa\", \"intermezzata\", \"internalizzata\", \"internata\", \"internazionalizzata\", \"interpellata\", \"interpenetrata\", \"interpolata\", \"interposta\", \"interpretata\", \"interpunta\", \"interrata\", \"interrogata\", \"interrotta\", \"intersecata\", \"intervallata\", \"intervistata\", \"intesa\", \"intessuta\", \"intestardita\", \"intestata\", \"intiepidita\", \"intimata\", \"intimidita\", \"intimorita\", \"intinta\", \"intirizzita\", \"intitolata\", \"intonacata\", \"intonata\", \"intontita\", \"intorbidata\", \"intorbidita\", \"intorpidita\", \"intortata\", \"intossicata\", \"intralciata\", \"intramessa\", \"intramezzata\", \"intrappolata\", \"intrapresa\", \"intrattenuta\", \"intraveduta\", \"intravista\", \"intravveduta\", \"intravvista\", \"intrecciata\", \"intricata\", \"intrigata\", \"intrinsecata\", \"intrippata\", \"intrisa\", \"introdotta\", \"introflessa\", \"introiettata\", \"introitata\", \"intromessa\", \"intronata\", \"intronizzata\", \"intruduta\", \"intrufolata\", \"intrugliata\", \"intruppata\", \"intrusa\", \"intubata\", \"intubettata\", \"intuita\", \"inumata\", \"inumidita\", \"inurbata\", \"inutilizzata\", \"invaghita\", \"invaginata\", \"invalidata\", \"invasata\", \"invasa\", \"invelenita\", \"inventariata\", \"inventata\", \"invenuta\", \"inverdita\", \"invergata\", \"inverniciata\", \"investigata\", \"investita\", \"invetriata\", \"inviata\", \"invidiata\", \"invigorita\", \"inviluppata\", \"invischiata\", \"invitata\", \"invocata\", \"invogliata\", \"involata\", \"involgarita\", \"involtata\", \"involta\", \"inzaccherata\", \"inzeppata\", \"inzigata\", \"inzolfata\", \"inzuccata\", \"inzuccherata\", \"inzuppata\", \"iodurata\", \"ionizzata\", \"ipertrofizzata\", \"ipnotizzata\", \"ipostatizzata\", \"ipotecata\", \"ipotizzata\", \"iridata\", \"irradiata\", \"irraggiata\", \"irreggimentata\", \"irretita\", \"irrigata\", \"irrigidita\", \"irrisa\", \"irritata\", \"irrobustita\", \"irrogata\", \"irrorata\", \"irrugginita\", \"irruvidita\", \"ischeletrita\", \"iscritta\", \"islamizzata\", \"isolata\", \"isomerizzata\", \"ispanizzata\", \"ispessita\", \"ispezionata\", \"ispirata\", \"issata\", \"istallata\", \"istanziata\", \"istaurata\", \"isterilita\", \"istigata\", \"istillata\", \"istituita\", \"istituzionalizzata\", \"istoriata\", \"istradata\", \"istruita\", \"istupidita\", \"italianeggiata\", \"italianizzata\", \"iterata\", \"iudicata\", \"killerata\", \"labbreggiata\", \"labializzata\", \"laccata\", \"lacerata\", \"laconizzata\", \"lacrimata\", \"ladroneggiata\", \"lagnata\", \"lagrimata\", \"laicizzata\", \"lambiccata\", \"lambita\", \"lamentata\", \"laminata\", \"lanciata\", \"lapidata\", \"lappata\", \"lardata\", \"lardellata\", \"largita\", \"larvata\", \"lascata\", \"lasciata\", \"lastricata\", \"latinizzata\", \"laudata\", \"laureata\", \"lavata\", \"lavorata\", \"leccata\", \"legalizzata\", \"legata\", \"leggicchiata\", \"leggiucchiata\", \"legittimata\", \"legittimizzata\", \"legnata\", \"lemmatizzata\", \"lenita\", \"lesinata\", \"lesionata\", \"lesa\", \"lessata\", \"letta\", \"levata\", \"levigata\", \"liberalizzata\", \"liberata\", \"licenziata\", \"lievitata\", \"liftata\", \"lignificata\", \"limata\", \"limitata\", \"linciata\", \"linearizzata\", \"lineata\", \"linkata\", \"liofilizzata\", \"liquefatta\", \"liquidata\", \"lisata\", \"lisciata\", \"lisciviata\", \"listata\", \"litografata\", \"livellata\", \"lizzata\", \"lobotomizzata\", \"localizzata\", \"locata\", \"lodata\", \"logorata\", \"lordata\", \"lottata\", \"lottizzata\", \"lubrificata\", \"lucchettata\", \"lucidata\", \"lucrata\", \"lumeggiata\", \"luppolizzata\", \"lusingata\", \"lussata\", \"lustrata\", \"macadamizzata\", \"macchiata\", \"macchinata\", \"macellata\", \"macerata\", \"maciullata\", \"maggesata\", \"maggiorata\", \"magnata\", \"magnetizzata\", \"magnificata\", \"maiolicata\", \"maledetta\", \"malfatta\", \"malignata\", \"malmenata\", \"malmessa\", \"maltata\", \"maltrattata\", \"malveduta\", \"malversata\", \"malvista\", \"malvoluta\", \"mandata\", \"mandrinata\", \"manducata\", \"maneggiata\", \"manganata\", \"manganellata\", \"mangiata\", \"mangiucchiata\", \"manifatturata\", \"manifestata\", \"manimessa\", \"manipolata\", \"manlevata\", \"manomessa\", \"manoscritta\", \"manovrata\", \"mansuefatta\", \"mantecata\", \"mantenutasa\", \"mantenuta\", \"manualizzata\", \"manutenuta\", \"mappata\", \"marcata\", \"marchiata\", \"marcita\", \"marezzata\", \"marginalizzata\", \"marginata\", \"margottata\", \"marimessa\", \"marinata\", \"maritata\", \"marmorizzata\", \"marnata\", \"marocchinata\", \"martellata\", \"martellinata\", \"martirizzata\", \"martoriata\", \"mascherata\", \"maschiata\", \"maschiettata\", \"mascolinizzata\", \"massacrata\", \"massaggiata\", \"massellata\", \"massicciata\", \"massificata\", \"massimata\", \"massimizzata\", \"mastectomizzata\", \"masterizzata\", \"masticata\", \"masturbata\", \"matematizzata\", \"materializzata\", \"matricolata\", \"mattonata\", \"maturata\", \"mazziata\", \"mazzolata\", \"meccanizzata\", \"medagliata\", \"mediata\", \"medicalizzata\", \"medicata\", \"meditata\", \"membrata\", \"memorizzata\", \"menata\", \"mendicata\", \"menomata\", \"mentovata\", \"menzionata\", \"meravigliata\", \"mercanteggiata\", \"mercerizzata\", \"mercificata\", \"meriata\", \"meridionalizzata\", \"meritata\", \"merlata\", \"merlettata\", \"mersa\", \"mesciata\", \"mesciuta\", \"mescolata\", \"mescuta\", \"mesmerizzata\", \"messaggiata\", \"messa\", \"messoca\", \"mestata\", \"mesticata\", \"mestruata\", \"metabolizzata\", \"metaforeggiata\", \"metaforizzata\", \"metallizzata\", \"metamorfizzata\", \"metamorfosata\", \"metanizzata\", \"metilata\", \"metodizzata\", \"microfilmata\", \"microfonata\", \"microminiaturizzata\", \"micronizzata\", \"mietuta\", \"migliorata\", \"militarizzata\", \"millantata\", \"millimetrata\", \"mimata\", \"mimeografata\", \"mimetizzata\", \"minacciata\", \"minata\", \"minchionata\", \"mineralizzata\", \"miniata\", \"miniaturizzata\", \"minimizzata\", \"minuita\", \"minuzzata\", \"miracolata\", \"miscelata\", \"mischiata\", \"misconosciuta\", \"missata\", \"mistificata\", \"misturata\", \"misurata\", \"miticizzata\", \"mitigata\", \"mitizzata\", \"mitragliata\", \"mitrata\", \"mixata\", \"mobiliata\", \"mobilitata\", \"mobilizzata\", \"modanata\", \"modellata\", \"modellizzata\", \"moderata\", \"modernizzata\", \"modificata\", \"modulata\", \"molata\", \"molestata\", \"mollata\", \"molleggiata\", \"moltiplicata\", \"monacata\", \"mondata\", \"mondializzata\", \"monetarizzata\", \"monetata\", \"monetizzata\", \"monitorata\", \"monitorizzata\", \"monocromatizzata\", \"monopolizzata\", \"monottongata\", \"montata\", \"monumentalizzata\", \"mordenzata\", \"mordicchiata\", \"mormorata\", \"morphata\", \"morsicata\", \"morsicchiata\", \"morsa\", \"mortasata\", \"mortificata\", \"mossa\", \"mostrata\", \"motivata\", \"motorizzata\", \"motteggiata\", \"movimentata\", \"mozzata\", \"mugolata\", \"mulcita\", \"multata\", \"multiplexata\", \"mummificata\", \"municipalizzata\", \"munita\", \"munta\", \"murata\", \"musata\", \"musicata\", \"mussata\", \"mutata\", \"mutilata\", \"mutizzata\", \"mutuata\", \"nappata\", \"narcotizzata\", \"narrativizzata\", \"narrata\", \"nasalizzata\", \"nascosa\", \"nascosta\", \"nastrata\", \"naturaleggiata\", \"naturalizzata\", \"nauseata\", \"naverata\", \"navicata\", \"navigata\", \"nazificata\", \"nazionalizzata\", \"nebulizzata\", \"necessitata\", \"necrosata\", \"necrotizzata\", \"negativizzata\", \"negata\", \"negletta\", \"negoziata\", \"negreggiata\", \"neologizzata\", \"nerbata\", \"nericata\", \"nettata\", \"neutralizzata\", \"nevata\", \"nevicata\", \"nevischiata\", \"nevrotizzata\", \"nichelata\", \"niellata\", \"ninfeggiata\", \"ninnata\", \"ninnolata\", \"nitratata\", \"nitrificata\", \"nobilitata\", \"noiata\", \"noleggiata\", \"nomata\", \"nominalizzata\", \"nominata\", \"normalizzata\", \"normata\", \"notata\", \"notificata\", \"notiziata\", \"notricata\", \"noverata\", \"nuclearizzata\", \"nudricata\", \"nullificata\", \"numerata\", \"numerizzata\", \"nuotata\", \"nutrita\", \"obbiettata\", \"obbliata\", \"obbligata\", \"oberata\", \"obiettata\", \"obiettivata\", \"obiettivizzata\", \"obiurgata\", \"obliata\", \"obliterata\", \"obnubilata\", \"occasionata\", \"occhieggiata\", \"occidentalizzata\", \"occisa\", \"occlusa\", \"occultata\", \"occupata\", \"ocheggiata\", \"odiata\", \"odorata\", \"odorizzata\", \"offerita\", \"offerta\", \"offesa\", \"officiata\", \"offiziata\", \"offuscata\", \"ofiziata\", \"oggettivata\", \"oggettivizzata\", \"oggettualizzata\", \"oliata\", \"olita\", \"olografata\", \"oltraggiata\", \"oltrapassata\", \"oltrepassata\", \"omaggiata\", \"ombrata\", \"ombreggiata\", \"omessa\", \"omogeneizzata\", \"omogenizzata\", \"omologata\", \"ondata\", \"ondulata\", \"onestata\", \"onnubilata\", \"onorata\", \"opacata\", \"opacizzata\", \"operata\", \"opinata\", \"oppiata\", \"oppignorata\", \"oppilata\", \"opposta\", \"oppressa\", \"oppugnata\", \"oprata\", \"opsonizzata\", \"optata\", \"opzionata\", \"orbitata\", \"orchestrata\", \"ordinata\", \"ordita\", \"orecchiata\", \"organata\", \"organicata\", \"organizzata\", \"orgasmata\", \"orientalizzata\", \"orientata\", \"originata\", \"origliata\", \"orizzontata\", \"orlata\", \"orlettata\", \"ormata\", \"ormeggiata\", \"ornata\", \"orpellata\", \"orrata\", \"orripilata\", \"ortogonalizzata\", \"osannata\", \"osata\", \"osculata\", \"oscurata\", \"ospedalizzata\", \"ospitata\", \"osseduta\", \"ossequiata\", \"osservata\", \"ossessionata\", \"ossidata\", \"ossificata\", \"ossitonizzata\", \"ostacolata\", \"osteggiata\", \"ostentata\", \"ostinata\", \"ostracizzata\", \"ostruita\", \"ottemperata\", \"ottenebrata\", \"ottenuta\", \"ottimalizzata\", \"ottimata\", \"ottimizzata\", \"ottonata\", \"ottriata\", \"ottuplicata\", \"otturata\", \"ottusa\", \"ottussa\", \"ovalizzata\", \"ovariectomizzata\", \"ovattata\", \"overcloccata\", \"ovrata\", \"ovviata\", \"ozieggiata\", \"ozonizzata\", \"pacata\", \"pacciamata\", \"pacificata\", \"padroneggiata\", \"paganizzata\", \"pagata\", \"paginata\", \"palafittata\", \"palatalizzata\", \"palata\", \"palesata\", \"palettata\", \"palettizzata\", \"palificata\", \"palleggiata\", \"pallettizzata\", \"palpata\", \"palpeggiata\", \"panata\", \"panneggiata\", \"panoramicata\", \"pappata\", \"paracadutata\", \"parafata\", \"paraffinata\", \"parafrasata\", \"paragonata\", \"paragrafata\", \"paralizzata\", \"parallelizzata\", \"parametrata\", \"parametrizzata\", \"parassitata\", \"parata\", \"parcata\", \"parcellizzata\", \"parcheggiata\", \"pareggiata\", \"parificata\", \"parkerizzata\", \"parlata\", \"parlucchiata\", \"parodiata\", \"partecipata\", \"particolareggiata\", \"particolarizzata\", \"partizionata\", \"partorita\", \"parzializzata\", \"pasciuta\", \"pascolata\", \"passata\", \"passeggiata\", \"passionata\", \"passivata\", \"pasticciata\", \"pastorizzata\", \"pasturata\", \"patinata\", \"patita\", \"patrocinata\", \"patteggiata\", \"pattugliata\", \"pattuita\", \"paventata\", \"pavesata\", \"pavimentata\", \"pavoneggiata\", \"pazziata\", \"pedinata\", \"pedonalizzata\", \"peggiorata\", \"pelata\", \"pellettizzata\", \"penalizzata\", \"penetrata\", \"pennellata\", \"pensata\", \"pensionata\", \"pentita\", \"pepata\", \"peptonizzata\", \"peragrata\", \"percentualizzata\", \"percepita\", \"percolata\", \"percorsa\", \"percossa\", \"perdonata\", \"perdotta\", \"perduta\", \"perequata\", \"perfatta\", \"perfezionata\", \"perforata\", \"performata\", \"perita\", \"periziata\", \"perlustrata\", \"permeata\", \"permessa\", \"perorata\", \"perpetrata\", \"perpetuata\", \"perplimuta\", \"perquisita\", \"perscrutata\", \"perseguitata\", \"perseguita\", \"persa\", \"personalizzata\", \"personificata\", \"persuasa\", \"perturbata\", \"pervasa\", \"pervertita\", \"pesata\", \"pescata\", \"pestata\", \"petrarcheggiata\", \"pettegolata\", \"pettinata\", \"piagata\", \"piaggiata\", \"piallata\", \"pianeggiata\", \"pianificata\", \"piantata\", \"piantatala\", \"piantata\", \"pianta\", \"piantonata\", \"piantumata\", \"piastrellata\", \"piatita\", \"piazzata\", \"picchettata\", \"picchiata\", \"picchierellata\", \"picchiettata\", \"picconata\", \"piegata\", \"pieghettata\", \"pietrificata\", \"pigiata\", \"pigliata\", \"pigmentata\", \"pignorata\", \"pigolata\", \"pilotata\", \"pimentata\", \"pinta\", \"pinzata\", \"piombata\", \"piovigginata\", \"piovuta\", \"pipata\", \"pippata\", \"piratata\", \"pirogenata\", \"pisciata\", \"pitoccata\", \"pittata\", \"pitturata\", \"pizzicata\", \"pizzicottata\", \"placata\", \"placcata\", \"plagiata\", \"plasmata\", \"plasticata\", \"plastificata\", \"platinata\", \"plissettata\", \"pluralizzata\", \"poetata\", \"poeticizzata\", \"poggiata\", \"polarizzata\", \"poligrafata\", \"polimerizzata\", \"politicizzata\", \"polverizzata\", \"pomiciata\", \"pompata\", \"ponderata\", \"ponzata\", \"popolarizzata\", \"popolata\", \"poppata\", \"porcellanata\", \"porfirizzata\", \"portata\", \"portesa\", \"porta\", \"porzionata\", \"posata\", \"posdatata\", \"positivizzata\", \"posizionata\", \"posposta\", \"posseduta\", \"postata\", \"postdatata\", \"posteggiata\", \"posticipata\", \"postillata\", \"posta\", \"postsincronizzata\", \"postulata\", \"potabilizzata\", \"potata\", \"potenziata\", \"potuta\", \"pralinata\", \"praticata\", \"preaccennata\", \"preannunciata\", \"preannunziata\", \"preavvertita\", \"preavvisata\", \"precaricata\", \"preceduta\", \"precettata\", \"precinta\", \"precisata\", \"preclusa\", \"precompilata\", \"precompressa\", \"preconfezionata\", \"preconizzata\", \"preconosciuta\", \"precorsa\", \"precostituita\", \"predata\", \"predefinita\", \"predestinata\", \"predeterminata\", \"predetta\", \"predicata\", \"predigerita\", \"prediletta\", \"predisposta\", \"preeletta\", \"preesistuta\", \"prefabbricata\", \"prefata\", \"prefatta\", \"prefazionata\", \"preferita\", \"prefigurata\", \"prefinanziata\", \"prefissata\", \"prefissa\", \"preformata\", \"pregata\", \"pregiata\", \"pregiudicata\", \"pregustata\", \"preimpregnata\", \"prelevata\", \"premeditata\", \"premescolata\", \"premessa\", \"premiata\", \"premonita\", \"premunita\", \"premurata\", \"premuta\", \"prenotata\", \"preoccupata\", \"preordinata\", \"preparata\", \"prepensionata\", \"prepigmentata\", \"preposta\", \"preprogrammata\", \"preraffreddata\", \"prerefrigerata\", \"preregistrata\", \"preregolata\", \"preriscaldata\", \"presa\", \"presagita\", \"presaputa\", \"presasela\", \"prescelta\", \"prescritta\", \"preseduta\", \"presegnalata\", \"preselezionata\", \"presentata\", \"presentita\", \"preservata\", \"presidiata\", \"presieduta\", \"presa\", \"pressata\", \"pressa\", \"pressurizzata\", \"prestabilita\", \"prestampata\", \"prestata\", \"prestigiata\", \"presunta\", \"presupposta\", \"pretermessa\", \"pretesa\", \"pretrattata\", \"prevaricata\", \"preveduta\", \"prevenduta\", \"preventivata\", \"prevenuta\", \"prevista\", \"prezzata\", \"prezzolata\", \"principiata\", \"privatizzata\", \"privata\", \"privilegiata\", \"problematizzata\", \"procacciata\", \"processata\", \"proclamata\", \"procrastinata\", \"procreata\", \"procurata\", \"prodigata\", \"prodotta\", \"profanata\", \"proferita\", \"professata\", \"professionalizzata\", \"profetata\", \"profetizzata\", \"profferita\", \"profilata\", \"profondata\", \"profumata\", \"profusa\", \"progettata\", \"prognosticata\", \"programmata\", \"proibita\", \"proiettata\", \"proletarizzata\", \"prolungata\", \"promanata\", \"promessa\", \"promossa\", \"promozionata\", \"promulgata\", \"pronosticata\", \"pronunciata\", \"pronunziata\", \"propagandata\", \"propagata\", \"propagginata\", \"propalata\", \"propinata\", \"propiziata\", \"proporzionata\", \"proposta\", \"propugnata\", \"propulsa\", \"prorogata\", \"prosciolta\", \"prosciugata\", \"proscritta\", \"proseguita\", \"prospettata\", \"prosternata\", \"prostesa\", \"prostituita\", \"prostrata\", \"prosunta\", \"protesa\", \"protestata\", \"protetta\", \"protocollata\", \"protonata\", \"protratta\", \"protrusa\", \"provata\", \"proveduta\", \"provincializzata\", \"provista\", \"provocata\", \"provveduta\", \"provvista\", \"psicanalizzata\", \"psichiatrizzata\", \"psicoanalizzata\", \"psicologizzata\", \"pubblicata\", \"pubblicizzata\", \"puddellata\", \"pugnalata\", \"pulita\", \"pungolata\", \"punita\", \"puntata\", \"punteggiata\", \"puntellata\", \"punta\", \"puntualizzata\", \"punzecchiata\", \"punzonata\", \"purgata\", \"purificata\", \"putita\", \"putrefatta\", \"putrita\", \"quadrata\", \"quadrettata\", \"quadriennalizzata\", \"quadruplicata\", \"qualificata\", \"quantificata\", \"quantizzata\", \"querelata\", \"questuata\", \"quetata\", \"quietanzata\", \"quietata\", \"quintessenziata\", \"quintuplicata\", \"quotata\", \"quotizzata\", \"rabberciata\", \"rabboccata\", \"rabbonita\", \"rabbuffata\", \"rabuffata\", \"raccapezzata\", \"raccapricciata\", \"raccattata\", \"raccerchiata\", \"raccesa\", \"racchetata\", \"racchiusa\", \"raccolta\", \"raccolta\", \"raccomandata\", \"raccomodata\", \"raccontata\", \"raccorciata\", \"raccorcita\", \"raccordata\", \"raccostata\", \"raccozzata\", \"racemizzata\", \"racimolata\", \"radazzata\", \"raddensata\", \"raddobbata\", \"raddolcita\", \"raddoppiata\", \"raddotta\", \"raddrizzata\", \"radiata\", \"radicalizzata\", \"radioassistita\", \"radioattivata\", \"radiocomandata\", \"radiodiffusa\", \"radiografata\", \"radioguidata\", \"radiolocalizzata\", \"radiomarcata\", \"radiotelegrafata\", \"radiotrasmessa\", \"radunata\", \"raffazzonata\", \"raffermata\", \"raffigurata\", \"raffilata\", \"raffinata\", \"rafforzata\", \"raffreddata\", \"raffrenata\", \"raffrescata\", \"raffrontata\", \"raggelata\", \"raggentilita\", \"ragghiata\", \"raggirata\", \"raggiunta\", \"raggiustata\", \"raggomitolata\", \"raggranchiata\", \"raggranchita\", \"raggranellata\", \"raggrinzata\", \"raggrinzita\", \"raggrumata\", \"raggruppata\", \"raggruzzolata\", \"ragguagliata\", \"ralingata\", \"rallegrata\", \"rallentata\", \"ramata\", \"ramazzata\", \"rammagliata\", \"rammaricata\", \"rammemorata\", \"rammendata\", \"rammentata\", \"rammodernata\", \"rammollita\", \"rammorbidita\", \"rampognata\", \"randellata\", \"randomizzata\", \"rannicchiata\", \"rannuvolata\", \"ranzata\", \"rapata\", \"rapinata\", \"rapita\", \"rappacificata\", \"rappata\", \"rappattumata\", \"rappezzata\", \"rapportata\", \"rappresantata\", \"rappresentata\", \"rappresa\", \"rarefatta\", \"rasata\", \"raschiata\", \"raschiettata\", \"rasentata\", \"rasa\", \"raspata\", \"rassegnata\", \"rasserenata\", \"rassettata\", \"rassicurata\", \"rassodata\", \"rassomigliata\", \"rassottigliata\", \"rassunta\", \"rastrellata\", \"rastremata\", \"rateata\", \"rateizzata\", \"ratificata\", \"ratinata\", \"rattizzata\", \"rattoppata\", \"rattorta\", \"rattrappita\", \"rattristata\", \"rattristita\", \"raunata\", \"ravvalorata\", \"ravveduta\", \"ravviata\", \"ravvicinata\", \"ravviluppata\", \"ravvisata\", \"ravvista\", \"ravvivata\", \"ravvolta\", \"ravvoltolata\", \"razionalizzata\", \"razionata\", \"razziata\", \"razzolata\", \"realizzata\", \"reassunta\", \"recapitata\", \"recata\", \"receduta\", \"recensita\", \"recepita\", \"recidivata\", \"recintata\", \"recinta\", \"reciprocata\", \"recisa\", \"recitata\", \"reclamata\", \"reclamizzata\", \"reclinata\", \"reclusa\", \"reclutata\", \"recuperata\", \"redarguita\", \"redatta\", \"redazzata\", \"redduta\", \"redenta\", \"redistribuita\", \"redotta\", \"referenziata\", \"refertata\", \"refilata\", \"reflessa\", \"reflettuta\", \"refranta\", \"refrigerata\", \"regalata\", \"regimata\", \"regimentata\", \"regionalizzata\", \"registrata\", \"regolamentata\", \"regolarizzata\", \"regolata\", \"reidratata\", \"reificata\", \"reimbarcata\", \"reimmersa\", \"reimmessa\", \"reimparata\", \"reimpastata\", \"reimpiantata\", \"reimpiegata\", \"reimportata\", \"reimpostata\", \"reincarcerata\", \"reincaricata\", \"reincarnata\", \"reincisa\", \"reincontrata\", \"reindirizzata\", \"reindustrializzata\", \"reinfettata\", \"reingaggiata\", \"reinizializzata\", \"reinnestata\", \"reinoltrata\", \"reinscritta\", \"reinsediata\", \"reinserita\", \"reinstallata\", \"reinstaurata\", \"reintegrata\", \"reinterpretata\", \"reintitolata\", \"reintrodotta\", \"reinventata\", \"reinvestita\", \"reiterata\", \"relativizzata\", \"relazionata\", \"relegata\", \"remixata\", \"remunerata\", \"renderizzata\", \"reperita\", \"repertata\", \"replicata\", \"repressa\", \"repulsa\", \"reputata\", \"requisita\", \"rescissa\", \"resecata\", \"resettata\", \"residuata\", \"resinificata\", \"resa\", \"resolata\", \"resolta\", \"respinta\", \"respirata\", \"responsabilizzata\", \"resposta\", \"restaurata\", \"restituita\", \"resunta\", \"resuscitata\", \"reticolata\", \"retinata\", \"retribuita\", \"retroceduta\", \"retrocessa\", \"retrodatata\", \"rettificata\", \"retta\", \"reumatizzata\", \"revisionata\", \"revocata\", \"riabbassata\", \"riabbellita\", \"riabbonata\", \"riabbottonata\", \"riabbracciata\", \"riabilitata\", \"riabitata\", \"riabituata\", \"riaccaduta\", \"riaccasata\", \"riaccesa\", \"riaccettata\", \"riacchiappata\", \"riacciuffata\", \"riaccolta\", \"riaccomodata\", \"riaccompagnata\", \"riaccordata\", \"riaccostata\", \"riaccreditata\", \"riacquisita\", \"riacquistata\", \"riacutizzata\", \"riadattata\", \"riaddestrata\", \"riaddormentata\", \"riadoperata\", \"riaffacciata\", \"riaffermata\", \"riafferrata\", \"riaffiorata\", \"riaffittata\", \"riaffrontata\", \"riagganciata\", \"riaggiornata\", \"riaggiustata\", \"riaggravata\", \"riaggregata\", \"riagguantata\", \"rialimentata\", \"riallacciata\", \"riallargata\", \"riallineata\", \"riallocata\", \"riallungata\", \"rialzata\", \"riamata\", \"riambientata\", \"riammalata\", \"riammessa\", \"riammodernata\", \"riammogliata\", \"rianimata\", \"riannessa\", \"riannodata\", \"riannunciata\", \"riaperta\", \"riappacificata\", \"riappaltata\", \"riapparecchiata\", \"riapparita\", \"riappesa\", \"riappiccicata\", \"riapplicata\", \"riappresa\", \"riapprodata\", \"riappropriata\", \"riapprovata\", \"riarmata\", \"riarrangiata\", \"riarredata\", \"riascoltata\", \"riasfaltata\", \"riassalita\", \"riassaporata\", \"riassegnata\", \"riassemblata\", \"riassestata\", \"riassettata\", \"riassicurata\", \"riassociata\", \"riassopita\", \"riassorbita\", \"riassunta\", \"riattaccata\", \"riattata\", \"riattesa\", \"riattinta\", \"riattivata\", \"riattizzata\", \"riattraversata\", \"riaumentata\", \"riavuta\", \"riavventata\", \"riavvertita\", \"riavviata\", \"riavvicinata\", \"riavvinta\", \"riavvisata\", \"riavvistata\", \"riavvolta\", \"riazzuffata\", \"ribaciata\", \"ribadita\", \"ribaltata\", \"ribassata\", \"ribattezzata\", \"ribattuta\", \"ribellata\", \"ribenedetta\", \"ribevuta\", \"ributtata\", \"ricacciata\", \"ricalata\", \"ricalcata\", \"ricalcificata\", \"ricalcitrata\", \"ricalcolata\", \"ricalibrata\", \"ricamata\", \"ricambiata\", \"ricanalizzata\", \"ricandidata\", \"ricantata\", \"ricapitalizzata\", \"ricapitolata\", \"ricaricata\", \"ricategorizzata\", \"ricattata\", \"ricavata\", \"ricelebrata\", \"ricercata\", \"ricetrasmessa\", \"ricettata\", \"ricevuta\", \"richiamata\", \"richiesta\", \"richiusa\", \"riciclata\", \"ricinta\", \"ricircolata\", \"riclassificata\", \"ricodificata\", \"ricollegata\", \"ricollocata\", \"ricolmata\", \"ricolonizzata\", \"ricolorata\", \"ricolorita\", \"ricoltivata\", \"ricombinata\", \"ricominciata\", \"ricommessa\", \"ricomparita\", \"ricompattata\", \"ricompensata\", \"ricomperata\", \"ricompilata\", \"ricompiuta\", \"ricomposta\", \"ricomprata\", \"ricompressa\", \"ricomunicata\", \"riconceduta\", \"riconcessa\", \"riconciliata\", \"ricondizionata\", \"ricondotta\", \"riconfermata\", \"riconfezionata\", \"riconfigurata\", \"riconfortata\", \"riconfusa\", \"ricongelata\", \"ricongiunta\", \"riconnessa\", \"riconosciuta\", \"riconquistata\", \"riconsacrata\", \"riconsegnata\", \"riconsiderata\", \"riconsigliata\", \"riconsolata\", \"ricontata\", \"ricontattata\", \"ricontrattata\", \"ricontratta\", \"ricontrollata\", \"riconvalidata\", \"riconvenuta\", \"riconvertita\", \"riconvinta\", \"riconvocata\", \"riconvogliata\", \"ricoperta\", \"ricopiata\", \"ricordata\", \"ricoricata\", \"ricorretta\", \"ricosparsa\", \"ricostituita\", \"ricostretta\", \"ricostruita\", \"ricotta\", \"ricoverata\", \"ricreata\", \"ricristallizzata\", \"ricrocifissa\", \"ricucita\", \"ricuperata\", \"ricusata\", \"ridata\", \"ridecorata\", \"ridefinita\", \"ridenominata\", \"ridestata\", \"rideterminata\", \"ridetta\", \"ridicolizzata\", \"ridigitata\", \"ridimensionata\", \"ridipinta\", \"ridiscesa\", \"ridisciolta\", \"ridisciplinata\", \"ridiscussa\", \"ridisegnata\", \"ridisfatta\", \"ridisposta\", \"ridistesa\", \"ridistinta\", \"ridistribuita\", \"ridivisa\", \"ridomandata\", \"ridonata\", \"ridondata\", \"ridorata\", \"ridotata\", \"ridotta\", \"ridovuta\", \"riecheggiata\", \"riedificata\", \"rieducata\", \"rielaborata\", \"rieletta\", \"riemessa\", \"riempita\", \"riempiuta\", \"rientrata\", \"riepilogata\", \"riequilibrata\", \"riequipaggiata\", \"riesaminata\", \"rieseguita\", \"riesercitata\", \"riesplosa\", \"riesportata\", \"riesposta\", \"riespressa\", \"riespulsa\", \"riestesa\", \"riesumata\", \"rietichettata\", \"rievaporata\", \"rievocata\", \"rifabbricata\", \"rifasciata\", \"rifatta\", \"rifenduta\", \"riferita\", \"rifermata\", \"rifermentata\", \"rifessa\", \"rificcata\", \"rifilata\", \"rifiltrata\", \"rifinanziata\", \"rifinita\", \"rifirmata\", \"rifischiata\", \"rifissa\", \"rifiutata\", \"riflessa\", \"riflettuta\", \"rifocillata\", \"rifoderata\", \"rifondata\", \"riforestata\", \"riforgiata\", \"riformata\", \"riformattata\", \"riformulata\", \"rifornita\", \"rifranta\", \"rifritta\", \"rifrugata\", \"rifuggita\", \"rifugiata\", \"rifusa\", \"rigassificata\", \"rigata\", \"rigelata\", \"rigenerata\", \"rigettata\", \"righettata\", \"rigiocata\", \"rigirata\", \"rigiudicata\", \"rigiunta\", \"rigoduta\", \"rigonfiata\", \"rigovernata\", \"riguadagnata\", \"riguardata\", \"rigurgitata\", \"rilanciata\", \"rilasciata\", \"rilassata\", \"rilavata\", \"rilavorata\", \"rilegata\", \"riletta\", \"rilevata\", \"rilocalizzata\", \"rimagliata\", \"rimandata\", \"rimaneggiata\", \"rimangiata\", \"rimappata\", \"rimarcata\", \"rimarchiata\", \"rimarginata\", \"rimaritata\", \"rimasticata\", \"rimata\", \"rimbacuccata\", \"rimbaldanzita\", \"rimbarcata\", \"rimbeccata\", \"rimbecillita\", \"rimbellita\", \"rimbiancata\", \"rimbiondita\", \"rimboccata\", \"rimbombata\", \"rimborsata\", \"rimboscata\", \"rimboschita\", \"rimbrottata\", \"rimediata\", \"rimembrata\", \"rimemorata\", \"rimenata\", \"rimeritata\", \"rimescolata\", \"rimessa\", \"rimestata\", \"rimilitarizzata\", \"rimirata\", \"rimischiata\", \"rimisurata\", \"rimodellata\", \"rimodernata\", \"rimodulata\", \"rimondata\", \"rimontata\", \"rimorchiata\", \"rimorsa\", \"rimossa\", \"rimostrata\", \"rimotivata\", \"rimpacchettata\", \"rimpadronita\", \"rimpaginata\", \"rimpagliata\", \"rimpannucciata\", \"rimpastata\", \"rimpatriata\", \"rimpiallacciata\", \"rimpianta\", \"rimpiattata\", \"rimpiazzata\", \"rimpicciolita\", \"rimpiccolita\", \"rimpiegata\", \"rimpinguata\", \"rimpinzata\", \"rimpolpata\", \"rimpossessata\", \"rimpressa\", \"rimproverata\", \"rimuginata\", \"rimunerata\", \"rimunta\", \"rimusicata\", \"rimutata\", \"rinarrata\", \"rinascosta\", \"rincalcata\", \"rincalzata\", \"rincamminata\", \"rincantucciata\", \"rincarata\", \"rincarcerata\", \"rincarnata\", \"rincentrata\", \"rinchiesta\", \"rinchiodata\", \"rinchiusa\", \"rincitrullita\", \"rincivilita\", \"rincoglionita\", \"rincollata\", \"rincominciata\", \"rincontrata\", \"rincoraggiata\", \"rincorata\", \"rincorporata\", \"rincorsa\", \"rincretinita\", \"rincrudita\", \"rinculcata\", \"rincuorata\", \"rindossata\", \"rindurita\", \"rinegoziata\", \"rinfacciata\", \"rinfagottata\", \"rinfiammata\", \"rinfiancata\", \"rinfilata\", \"rinfittita\", \"rinfocolata\", \"rinfoderata\", \"rinforzata\", \"rinfrancata\", \"rinfranta\", \"rinfrescata\", \"rinfusa\", \"ringagliardita\", \"ringalluzzita\", \"ringiovanita\", \"ringiovenita\", \"ringoiata\", \"ringorgata\", \"ringraziata\", \"ringuainata\", \"rinnamorata\", \"rinnegata\", \"rinnestata\", \"rinnovata\", \"rinnovellata\", \"rinociuta\", \"rinomata\", \"rinominata\", \"rinormalizzata\", \"rinquadrata\", \"rinsaccata\", \"rinsaldata\", \"rinsanguata\", \"rinselvatichita\", \"rinselvata\", \"rinserrata\", \"rintanata\", \"rintasata\", \"rintascata\", \"rintavolata\", \"rintenerita\", \"rinterrata\", \"rinterrogata\", \"rintesa\", \"rintiepidita\", \"rintoccata\", \"rintonacata\", \"rintontita\", \"rintorpidita\", \"rintracciata\", \"rintrodotta\", \"rintronata\", \"rintuzzata\", \"rinunciata\", \"rinunziata\", \"rinutrita\", \"rinvangata\", \"rinvasata\", \"rinvenuta\", \"rinverdita\", \"rinvestita\", \"rinviata\", \"rinvigorita\", \"rinvilita\", \"rinvitata\", \"rinvoltata\", \"rinvolta\", \"rinvoltolata\", \"rinzaffata\", \"rinzeppata\", \"riobbligata\", \"rioccupata\", \"riofferta\", \"rioffesa\", \"rioperata\", \"riordinata\", \"riorganizzata\", \"riorientata\", \"riosservata\", \"riottenuta\", \"riottimizzata\", \"riotturata\", \"ripagata\", \"riparametrizzata\", \"riparata\", \"ripartita\", \"ripassata\", \"ripercorsa\", \"ripercossa\", \"riperduta\", \"ripersa\", \"ripesata\", \"ripescata\", \"ripestata\", \"ripetuta\", \"ripianata\", \"ripianificata\", \"ripiantata\", \"ripianta\", \"ripicchiata\", \"ripiegata\", \"ripigliata\", \"ripinta\", \"ripiovuta\", \"ripitturata\", \"riplasmata\", \"ripolarizzata\", \"ripopolata\", \"riportata\", \"riporta\", \"riposata\", \"riposizionata\", \"riposseduta\", \"riposta\", \"ripotuta\", \"ripresentata\", \"ripresa\", \"riprestata\", \"ripretesa\", \"riprincipiata\", \"ripristinata\", \"riprivatizzata\", \"riprodotta\", \"riprogettata\", \"riprogrammata\", \"ripromessa\", \"riproposta\", \"riprotetta\", \"riprovata\", \"riprovveduta\", \"riprovvista\", \"ripubblicata\", \"ripudiata\", \"ripugnata\", \"ripulita\", \"ripuntata\", \"ripunta\", \"ripurgata\", \"riputata\", \"riquadrata\", \"riqualificata\", \"riresa\", \"rirotta\", \"risaldata\", \"risalita\", \"risaltata\", \"risalutata\", \"risanata\", \"risaputa\", \"risarcita\", \"riscalata\", \"riscaldata\", \"riscattata\", \"riscelta\", \"riscesa\", \"rischiarata\", \"rischiata\", \"risciacquata\", \"risciolta\", \"riscommessa\", \"riscontata\", \"riscontrata\", \"risconvolta\", \"riscoperta\", \"riscoppiata\", \"riscorsa\", \"riscossa\", \"riscritta\", \"risecata\", \"riseduta\", \"risegata\", \"risegnata\", \"riselciata\", \"riselezionata\", \"riseminata\", \"risentita\", \"riseppellita\", \"riserbata\", \"riservata\", \"risicata\", \"risigillata\", \"risistemata\", \"risa\", \"risoffiata\", \"risoggiunta\", \"risolata\", \"risolidificata\", \"risollevata\", \"risolta\", \"risommata\", \"risommersa\", \"risonata\", \"risorpassata\", \"risospesa\", \"risospinta\", \"risottomessa\", \"risparmiata\", \"risparsa\", \"rispecchiata\", \"rispedita\", \"rispenta\", \"rispersa\", \"rispettata\", \"rispiegata\", \"rispinta\", \"rispolverata\", \"risposata\", \"risposta\", \"rissata\", \"ristabilita\", \"ristagnata\", \"ristampata\", \"ristaurata\", \"ristesa\", \"ristilizzata\", \"ristorata\", \"ristretta\", \"ristrutta\", \"ristrutturata\", \"ristuccata\", \"ristudiata\", \"risucchiata\", \"risultata\", \"risuolata\", \"risuonata\", \"risuscitata\", \"risvegliata\", \"risvolta\", \"ritagliata\", \"ritarata\", \"ritardata\", \"ritemprata\", \"ritentata\", \"ritenuta\", \"ritersa\", \"ritesa\", \"ritinta\", \"ritirata\", \"ritoccata\", \"ritolta\", \"ritorta\", \"ritracciata\", \"ritradotta\", \"ritrascorsa\", \"ritrascritta\", \"ritrasferita\", \"ritrasformata\", \"ritrasmessa\", \"ritrasposta\", \"ritrattata\", \"ritratta\", \"ritrovata\", \"ritualizzata\", \"rituffata\", \"riudita\", \"riunificata\", \"riunita\", \"riusata\", \"riutilizzata\", \"rivaccinata\", \"rivaleggiata\", \"rivalorizzata\", \"rivalsa\", \"rivalutata\", \"rivangata\", \"riveduta\", \"rivelata\", \"rivendicata\", \"rivenduta\", \"riverberata\", \"riverita\", \"riverniciata\", \"riversata\", \"rivestita\", \"rivettata\", \"rivinta\", \"rivisitata\", \"rivissuta\", \"rivista\", \"rivitalizzata\", \"rivivificata\", \"rivoltata\", \"rivolta\", \"rivoltolata\", \"rivoluta\", \"rivoluzionata\", \"rizappata\", \"rizzata\", \"robotizzata\", \"rodata\", \"rogata\", \"rollata\", \"romanizzata\", \"romanticizzata\", \"romanzata\", \"roncolata\", \"rosicata\", \"rosicchiata\", \"rosa\", \"rosolata\", \"rotacizzata\", \"rotata\", \"roteata\", \"rotolata\", \"rottamata\", \"rotta\", \"rovesciata\", \"rovinata\", \"rovistata\", \"rubacchiata\", \"rubata\", \"rullata\", \"ruminata\", \"ruotata\", \"russificata\", \"ruzzolata\", \"sabbiata\", \"sabotata\", \"saccarificata\", \"saccheggiata\", \"sacralizzata\", \"sacramentata\", \"sacrificata\", \"saettata\", \"saggiata\", \"sagginata\", \"sagomata\", \"salamoiata\", \"salariata\", \"salassata\", \"salata\", \"saldata\", \"salificata\", \"salinizzata\", \"salita\", \"salmeggiata\", \"salmistrata\", \"salpata\", \"saltata\", \"salutata\", \"salvaguardata\", \"salvata\", \"sanata\", \"sancita\", \"sanforizzata\", \"sanificata\", \"sanitizzata\", \"santificata\", \"sanzionata\", \"saponificata\", \"saputa\", \"sarchiata\", \"sarchiellata\", \"sartiata\", \"satellizzata\", \"satinata\", \"satireggiata\", \"satisfatta\", \"satollata\", \"saturata\", \"saziata\", \"sbaccellata\", \"sbaciucchiata\", \"sbafata\", \"sbaffata\", \"sbalestrata\", \"sballata\", \"sballottata\", \"sballottolata\", \"sbalordita\", \"sbalzata\", \"sbancata\", \"sbandata\", \"sbandierata\", \"sbandita\", \"sbaraccata\", \"sbaragliata\", \"sbarazzata\", \"sbarbata\", \"sbarcata\", \"sbardata\", \"sbarrata\", \"sbassata\", \"sbastita\", \"sbatacchiata\", \"sbattezzata\", \"sbattuta\", \"sbeccata\", \"sbeffeggiata\", \"sbellicata\", \"sbendata\", \"sbertucciata\", \"sbiadita\", \"sbiancata\", \"sbianchita\", \"sbiellata\", \"sbiettata\", \"sbigottita\", \"sbilanciata\", \"sbirbata\", \"sbirciata\", \"sbizzarrita\", \"sbloccata\", \"sbobinata\", \"sboccata\", \"sbocconcellata\", \"sbollentata\", \"sbolognata\", \"sborniata\", \"sborsata\", \"sboscata\", \"sbottonata\", \"sbozzata\", \"sbozzimata\", \"sbozzolata\", \"sbracata\", \"sbracciata\", \"sbraciata\", \"sbraitata\", \"sbranata\", \"sbrancata\", \"sbrattata\", \"sbreccata\", \"sbriciolata\", \"sbrigata\", \"sbrigliata\", \"sbrinata\", \"sbrindellata\", \"sbrodolata\", \"sbrogliata\", \"sbronzata\", \"sbruffata\", \"sbucciata\", \"sbudellata\", \"sbuffata\", \"sbugiardata\", \"sbullettata\", \"sbullonata\", \"sburrata\", \"scacazzata\", \"scacchiata\", \"scacciata\", \"scaccolata\", \"scadenzata\", \"scafata\", \"scaffalata\", \"scagionata\", \"scagliata\", \"scaglionata\", \"scalata\", \"scalcata\", \"scalcinata\", \"scaldata\", \"scalettata\", \"scalfata\", \"scalfita\", \"scalmanata\", \"scaloppata\", \"scalpata\", \"scalpellata\", \"scalpellinata\", \"scaltrita\", \"scalzata\", \"scambiata\", \"scamiciata\", \"scamosciata\", \"scamozzata\", \"scampata\", \"scampatala\", \"scampata\", \"scamuffata\", \"scanalata\", \"scancellata\", \"scandagliata\", \"scandalizzata\", \"scandita\", \"scannata\", \"scannellata\", \"scannerata\", \"scannerizata\", \"scannerizzata\", \"scansata\", \"scansionata\", \"scapecchiata\", \"scapezzata\", \"scapicollata\", \"scapigliata\", \"scapitozzata\", \"scapocchiata\", \"scappata\", \"scappellata\", \"scappottata\", \"scapricciata\", \"scapsulata\", \"scarabocchiata\", \"scaracchiata\", \"scaraventata\", \"scarcerata\", \"scardassata\", \"scardata\", \"scardinata\", \"scaricata\", \"scarificata\", \"scarmigliata\", \"scarnata\", \"scarnificata\", \"scarnita\", \"scarrellata\", \"scarrocciata\", \"scarrozzata\", \"scarruffata\", \"scartabellata\", \"scartata\", \"scartavetrata\", \"scartinata\", \"scartocciata\", \"scassata\", \"scassinata\", \"scatenata\", \"scattata\", \"scavalcata\", \"scavallata\", \"scavata\", \"scavezzata\", \"scazzottata\", \"scekerata\", \"scelta\", \"scempiata\", \"sceneggiata\", \"scernuta\", \"scervellata\", \"scesa\", \"sceverata\", \"schedata\", \"schedulata\", \"scheggiata\", \"scheletrita\", \"schematizzata\", \"schermata\", \"schermita\", \"schermografata\", \"schernita\", \"schiacciata\", \"schiaffata\", \"schiaffeggiata\", \"schiantata\", \"schiarita\", \"schiavardata\", \"schiavizzata\", \"schiccherata\", \"schierata\", \"schifata\", \"schinciata\", \"schioccata\", \"schiodata\", \"schiumata\", \"schiusa\", \"schivata\", \"schizzata\", \"schizzettata\", \"sciabolata\", \"sciabordata\", \"sciacquata\", \"scialacquata\", \"sciamanizzata\", \"sciamannata\", \"sciancata\", \"sciancrata\", \"scimmieggiata\", \"scimmiottata\", \"scinta\", \"scioccata\", \"sciolinata\", \"sciolta\", \"sciorinata\", \"scippata\", \"sciroppata\", \"scissa\", \"sciupacchiata\", \"sciupata\", \"sclamata\", \"sclerosata\", \"sclerotizzata\", \"scoccata\", \"scocciata\", \"scodata\", \"scodellata\", \"scoiata\", \"scolarizzata\", \"scolata\", \"scollacciata\", \"scollata\", \"scollegata\", \"scolorata\", \"scolorita\", \"scolpata\", \"scolpita\", \"scombaciata\", \"scombinata\", \"scombussolata\", \"scommessa\", \"scomodata\", \"scompaginata\", \"scompagnata\", \"scompartita\", \"scompattata\", \"scompensata\", \"scompiacuta\", \"scompigliata\", \"scomposta\", \"scomputata\", \"scomunicata\", \"sconcertata\", \"sconciata\", \"sconclusa\", \"sconfessata\", \"sconficcata\", \"sconﬁtta\", \"sconfortata\", \"sconfusa\", \"scongelata\", \"scongiurata\", \"sconnessa\", \"sconosciuta\", \"sconquassata\", \"sconsacrata\", \"sconsigliata\", \"sconsolata\", \"scontata\", \"scontentata\", \"scontornata\", \"scontorta\", \"scontrata\", \"sconvolta\", \"scopata\", \"scoperchiata\", \"scoperta\", \"scopiazzata\", \"scoraggiata\", \"scoraggita\", \"scorata\", \"scorazzata\", \"scorciata\", \"scorcita\", \"scordata\", \"scoreggiata\", \"scorificata\", \"scornata\", \"scorniciata\", \"scoronata\", \"scorporata\", \"scorrazzata\", \"scorreggiata\", \"scorretta\", \"scorsa\", \"scortata\", \"scortecciata\", \"scorticata\", \"scorta\", \"scorzata\", \"scoscesa\", \"scosciata\", \"scossa\", \"scostata\", \"scostolata\", \"scotennata\", \"scoticata\", \"scotolata\", \"scotomizzata\", \"scottata\", \"scotta\", \"scovata\", \"scoverta\", \"scozzata\", \"scozzonata\", \"screditata\", \"scremata\", \"screpolata\", \"screziata\", \"scribacchiata\", \"scriminata\", \"scristianizzata\", \"scritta\", \"scritturata\", \"scroccata\", \"scrocchiata\", \"scrollata\", \"scrostata\", \"scrutata\", \"scrutinata\", \"scucita\", \"scudisciata\", \"scuffiata\", \"sculacciata\", \"sculettata\", \"scuoiata\", \"scuriosata\", \"scurita\", \"scusata\", \"sdaziata\", \"sdebitata\", \"sdegnata\", \"sdemanializzata\", \"sdentata\", \"sdilinquita\", \"sdoganata\", \"sdoluta\", \"sdoppiata\", \"sdraiata\", \"sdrammatizzata\", \"sdrucita\", \"secata\", \"seccata\", \"secernuta\", \"secolarizzata\", \"secondata\", \"secretata\", \"secreta\", \"sedata\", \"sedentarizzata\", \"sedotta\", \"segata\", \"seghettata\", \"segmentata\", \"segnalata\", \"segnata\", \"segnoreggiata\", \"segregata\", \"segretata\", \"seguitata\", \"seguita\", \"selciata\", \"selezionata\", \"sellata\", \"sembrata\", \"sementata\", \"semicinta\", \"seminata\", \"semplificata\", \"senilizzata\", \"sensibilizzata\", \"sensorizzata\", \"sentenziata\", \"sentita\", \"sentitasela\", \"sentita\", \"sentita\", \"separata\", \"sepolta\", \"seppellita\", \"sequenziata\", \"sequestrata\", \"serbata\", \"serrata\", \"servita\", \"servoassistita\", \"sessualizzata\", \"sestuplicata\", \"setacciata\", \"setificata\", \"settata\", \"settorializzata\", \"settuplicata\", \"seviziata\", \"sezionata\", \"sfaccettata\", \"sfagliata\", \"sfaldata\", \"sfalsata\", \"sfamata\", \"sfanalata\", \"sfangata\", \"sfarinata\", \"sfasata\", \"sfasciata\", \"sfatata\", \"sfatta\", \"sfavillata\", \"sfavorita\", \"sfegatata\", \"sfeltrata\", \"sfenduta\", \"sferragliata\", \"sferrata\", \"sferzata\", \"sfessa\", \"sfiancata\", \"sfiatata\", \"sfiata\", \"sfibbiata\", \"sfibrata\", \"sfidata\", \"sfiduciata\", \"sfigurata\", \"sfilata\", \"sfilettata\", \"sfinita\", \"sfioccata\", \"sfiorata\", \"sfittata\", \"sfocata\", \"sfociata\", \"sfoderata\", \"sfogata\", \"sfoggiata\", \"sfogliata\", \"sfollata\", \"sfoltita\", \"sfondata\", \"sforacchiata\", \"sforata\", \"sforbiciata\", \"sformata\", \"sfornaciata\", \"sfornata\", \"sfornita\", \"sforzata\", \"sfottuta\", \"sfracellata\", \"sfrangiata\", \"sfrascata\", \"sfratata\", \"sfrattata\", \"sfrecciata\", \"sfregata\", \"sfregiata\", \"sfrenata\", \"sfrisata\", \"sfrondata\", \"sfrucugliata\", \"sfruculiata\", \"sfruttata\", \"sfumata\", \"sfuocata\", \"sgamata\", \"sganasciata\", \"sganciata\", \"sgarbugliata\", \"sgattaiolata\", \"sgelata\", \"sghiacciata\", \"sgocciolata\", \"sgolata\", \"sgomberata\", \"sgombrata\", \"sgomentata\", \"sgominata\", \"sgomitata\", \"sgomitolata\", \"sgonfiata\", \"sgorbiata\", \"sgottata\", \"sgovernata\", \"sgozzata\", \"sgraffiata\", \"sgraffignata\", \"sgranata\", \"sgranchita\", \"sgranellata\", \"sgrassata\", \"sgravata\", \"sgretolata\", \"sgridata\", \"sgrommata\", \"sgrondata\", \"sgroppata\", \"sgrossata\", \"sgrovigliata\", \"sgrugnata\", \"sguainata\", \"sgualcita\", \"sguanciata\", \"sguarnita\", \"sguinzagliata\", \"sgusciata\", \"shakerata\", \"shoccata\", \"shuntata\", \"sigillata\", \"siglata\", \"significata\", \"signoreggiata\", \"silenziata\", \"silicizzata\", \"sillabata\", \"sillogizzata\", \"silurata\", \"simboleggiata\", \"simbolizzata\", \"simmetrizzata\", \"simpatizzata\", \"simulata\", \"sincerata\", \"sincopata\", \"sincretizzata\", \"sincronizzata\", \"sindacalizzata\", \"sindacata\", \"singolarizzata\", \"sinistrata\", \"sinizzata\", \"sinterizzata\", \"sintetizzata\", \"sintonizzata\", \"siringata\", \"sistematizzata\", \"sistemata\", \"situata\", \"slabbrata\", \"slacciata\", \"slamata\", \"slanciata\", \"slappolata\", \"slargata\", \"slavizzata\", \"slegata\", \"slentata\", \"slinguata\", \"slogata\", \"sloggata\", \"sloggiata\", \"slombata\", \"slungata\", \"smaccata\", \"smacchiata\", \"smagliata\", \"smagnetizzata\", \"smagrita\", \"smaliziata\", \"smallata\", \"smaltata\", \"smaltita\", \"smammata\", \"smanacciata\", \"smangiata\", \"smantellata\", \"smarcata\", \"smarginata\", \"smarrita\", \"smascellata\", \"smascherata\", \"smaterializzata\", \"smattonata\", \"smembrata\", \"smentita\", \"smerciata\", \"smerdata\", \"smerigliata\", \"smerlata\", \"smerlettata\", \"smessala\", \"smessa\", \"smezzata\", \"smidollata\", \"smielata\", \"smilitarizzata\", \"sminata\", \"sminuita\", \"sminuzzata\", \"smistata\", \"smitizzata\", \"smobiliata\", \"smobilitata\", \"smobilizzata\", \"smoccolata\", \"smollicata\", \"smonacata\", \"smontata\", \"smorbata\", \"smorzata\", \"smossa\", \"smozzicata\", \"smunta\", \"smurata\", \"smussata\", \"smutandata\", \"snaturata\", \"snazionalizzata\", \"snebbiata\", \"snellita\", \"snervata\", \"snidata\", \"sniffata\", \"snobbata\", \"snocciolata\", \"snodata\", \"snudata\", \"sobbarcata\", \"sobbollita\", \"sobillata\", \"socchiusa\", \"soccorsa\", \"soddisfatta\", \"sodisfatta\", \"sodomizzata\", \"sofferita\", \"soffermata\", \"sofferta\", \"soffiata\", \"soffocata\", \"soffregata\", \"soffritta\", \"soffusa\", \"sofisticata\", \"soggettivata\", \"soggettivizzata\", \"sogghignata\", \"soggiogata\", \"soggiunta\", \"sogguardata\", \"sognata\", \"solarizzata\", \"solcata\", \"soleggiata\", \"solennizzata\", \"solfeggiata\", \"solfitata\", \"solfonata\", \"solforata\", \"solidificata\", \"solita\", \"sollazzata\", \"sollecitata\", \"solleticata\", \"sollevata\", \"solta\", \"solubilizzata\", \"soluta\", \"soluzionata\", \"solvatata\", \"somatizzata\", \"someggiata\", \"somigliata\", \"sommata\", \"sommersa\", \"sommessa\", \"somministrata\", \"sommossa\", \"sonata\", \"sondata\", \"sonorizzata\", \"sopita\", \"soppalcata\", \"soppesata\", \"soppiantata\", \"sopportata\", \"sopposta\", \"soppressa\", \"sopraddotata\", \"sopraeccitata\", \"sopraedificata\", \"sopraelevata\", \"sopraffata\", \"sopraffatta\", \"sopraggiunta\", \"sopraintesa\", \"soprammessa\", \"soprannominata\", \"sopraposta\", \"soprappresa\", \"soprascritta\", \"sopraspesa\", \"soprassaturata\", \"soprasseduta\", \"sopravanzata\", \"sopravvalutata\", \"sopravveduta\", \"sopravvinta\", \"sopravvista\", \"sopreccitata\", \"sopredificata\", \"soprelevata\", \"soprintesa\", \"sorbettata\", \"sorbita\", \"sorgiunta\", \"sormontata\", \"sorpassata\", \"sorpresa\", \"sorrasa\", \"sorretta\", \"sorseggiata\", \"sorteggiata\", \"sortita\", \"sorvegliata\", \"sorvolata\", \"soscritta\", \"sospesa\", \"sospettata\", \"sospinta\", \"sospirata\", \"sostantivata\", \"sostanziata\", \"sostentata\", \"sostenuta\", \"sostituita\", \"sottaciuta\", \"sotterrata\", \"sottesa\", \"sottintesa\", \"sottoalimentata\", \"sottocapitalizzata\", \"sottodivisa\", \"sottoesposta\", \"sottofirmata\", \"sottolineata\", \"sottomessa\", \"sottomurata\", \"sottopagata\", \"sottopassata\", \"sottoposta\", \"sottorappresentata\", \"sottorisa\", \"sottoscritta\", \"sottostimata\", \"sottosviluppata\", \"sottotitolata\", \"sottovalutata\", \"sottratta\", \"soverchiata\", \"sovesciata\", \"sovietizzata\", \"sovracapitalizzata\", \"sovraccaricata\", \"sovradimensionata\", \"sovraeccitata\", \"sovraesposta\", \"sovraffaticata\", \"sovraffollata\", \"sovraggiunta\", \"sovraimposta\", \"sovraintesa\", \"sovralimentata\", \"sovramodulata\", \"sovrappopolata\", \"sovrapposta\", \"sovrariscaldata\", \"sovrasaturata\", \"sovrascritta\", \"sovrastampata\", \"sovrastata\", \"sovrastimata\", \"sovrautilizzata\", \"sovreccitata\", \"sovresposta\", \"sovrimposta\", \"sovrintesa\", \"sovvenuta\", \"sovvenzionata\", \"sovvertita\", \"spaccata\", \"spacchettata\", \"spacciata\", \"spaginata\", \"spaiata\", \"spalancata\", \"spalata\", \"spalcata\", \"spalleggiata\", \"spalmata\", \"spammata\", \"spampanata\", \"spampinata\", \"spanata\", \"spanciata\", \"spanduta\", \"spannata\", \"spannocchiata\", \"spansa\", \"spantanata\", \"spanta\", \"spaparacchiata\", \"spaparanzata\", \"spappolata\", \"sparata\", \"sparecchiata\", \"sparigliata\", \"sparita\", \"sparlata\", \"sparpagliata\", \"spartita\", \"spassata\", \"spassatosela\", \"spastoiata\", \"spaurata\", \"spaurita\", \"spaventata\", \"spazializzata\", \"spaziata\", \"spazieggiata\", \"spazientita\", \"spazzata\", \"spazzolata\", \"specchiata\", \"specializzata\", \"specificata\", \"specillata\", \"specolata\", \"spedita\", \"spegnata\", \"spelacchiata\", \"spelata\", \"spellata\", \"spennacchiata\", \"spennata\", \"spennellata\", \"spenta\", \"spenzolata\", \"sperata\", \"sperimentata\", \"spernacchiata\", \"speronata\", \"sperperata\", \"spersonalizzata\", \"sperticata\", \"spesata\", \"spesa\", \"spessita\", \"spettacolarizzata\", \"spettinata\", \"spezzata\", \"spezzettata\", \"spezziata\", \"spezzonata\", \"spiaccicata\", \"spianata\", \"spiantata\", \"spiata\", \"spiattellata\", \"spiazzata\", \"spiccata\", \"spicciata\", \"spiccicata\", \"spicciolata\", \"spicconata\", \"spidocchiata\", \"spiegata\", \"spiegazzata\", \"spietrata\", \"spifferata\", \"spigionata\", \"spignorata\", \"spigolata\", \"spigrita\", \"spillata\", \"spilluzzicata\", \"spiluccata\", \"spinta\", \"spintonata\", \"spiombata\", \"spiralizzata\", \"spirantizzata\", \"spirata\", \"spiritualizzata\", \"spiumata\", \"spizzicata\", \"spodestata\", \"spoetizzata\", \"spogliata\", \"spolettata\", \"spoliata\", \"spoliticizzata\", \"spollonata\", \"spolmonata\", \"spolpata\", \"spoltronita\", \"spolverata\", \"spolverizzata\", \"spompata\", \"spompinata\", \"sponsorizzata\", \"spopolata\", \"spoppata\", \"sporcata\", \"sportata\", \"sporta\", \"sposata\", \"sposseduta\", \"spossessata\", \"spostata\", \"sposta\", \"sprangata\", \"sprecata\", \"spregiata\", \"spremuta\", \"spretata\", \"sprezzata\", \"sprigionata\", \"sprimacciata\", \"spromessa\", \"spronata\", \"sprotetta\", \"sprovincializzata\", \"sprovveduta\", \"sprovvista\", \"spruzzata\", \"spugnata\", \"spulata\", \"spulciata\", \"spuntata\", \"spuntellata\", \"spupazzata\", \"spurgata\", \"sputacchiata\", \"sputata\", \"sputtanata\", \"squadernata\", \"squadrata\", \"squagliata\", \"squagliatasela\", \"squagliata\", \"squalificata\", \"squamata\", \"squarciata\", \"squartata\", \"squassata\", \"squattrinata\", \"squilibrata\", \"squinternata\", \"sradicata\", \"srotolata\", \"srugginita\", \"stabbiata\", \"stabilita\", \"stabilizzata\", \"stabulata\", \"staccata\", \"stacciata\", \"staffata\", \"staffilata\", \"staggiata\", \"staggita\", \"stagionata\", \"stagliata\", \"stagnata\", \"stamburata\", \"stampata\", \"stampigliata\", \"stanata\", \"stancata\", \"standardizzata\", \"stangata\", \"stanziata\", \"stappata\", \"starata\", \"starnazzata\", \"stasata\", \"statalizzata\", \"statizzata\", \"statoca\", \"statosena\", \"statuita\", \"stazzata\", \"stazzonata\", \"steccacciata\", \"steccata\", \"stecchita\", \"stecconata\", \"stemperata\", \"stempiata\", \"stenografata\", \"stereotipata\", \"sterilita\", \"sterilizzata\", \"sterpata\", \"sterrata\", \"sterzata\", \"stesa\", \"stigliata\", \"stigmatizzata\", \"stilata\", \"stilettata\", \"stilizzata\", \"stillata\", \"stimata\", \"stimolata\", \"stinta\", \"stipata\", \"stipendiata\", \"stipulata\", \"stiracchiata\", \"stirata\", \"stivata\", \"stizzita\", \"stoccata\", \"stolta\", \"stomacata\", \"stonata\", \"stondata\", \"stoppata\", \"stordita\", \"storicizzata\", \"stornata\", \"storpiata\", \"stortata\", \"storta\", \"stozzata\", \"strabenedetta\", \"strabuzzata\", \"stracannata\", \"straccata\", \"stracciata\", \"stracotta\", \"strafogata\", \"stragoduta\", \"stralciata\", \"stralodata\", \"stralunata\", \"stramaledetta\", \"stramortita\", \"strangolata\", \"straniata\", \"stranita\", \"straorzata\", \"strapagata\", \"strapazzata\", \"straperduta\", \"strapersa\", \"strappata\", \"strasaputa\", \"strascicata\", \"strascinata\", \"strasformata\", \"stratificata\", \"strattonata\", \"stravaccata\", \"stravinta\", \"stravolta\", \"stravoluta\", \"straziata\", \"stregata\", \"stremata\", \"stressata\", \"striata\", \"stridulata\", \"strigata\", \"strigliata\", \"strillata\", \"striminzita\", \"strimpellata\", \"strinata\", \"stringata\", \"strisciata\", \"stritolata\", \"strizzata\", \"strofinata\", \"strombata\", \"strombazzata\", \"stroncata\", \"stronzata\", \"stropicciata\", \"stroppata\", \"stroppiata\", \"strozzata\", \"struccata\", \"strumentalizzata\", \"strumentata\", \"strusciata\", \"strutta\", \"strutturalizzata\", \"strutturata\", \"stuccata\", \"studiacchiata\", \"studiata\", \"stuellata\", \"stufata\", \"stupefatta\", \"stupita\", \"stuprata\", \"sturata\", \"stutata\", \"stuzzicata\", \"suasa\", \"subaffittata\", \"subappaltata\", \"subbiata\", \"subdelegata\", \"subissata\", \"subita\", \"sublicenziata\", \"sublimata\", \"sublocata\", \"subodorata\", \"subordinata\", \"subornata\", \"suburbanizzata\", \"sucata\", \"succhiata\", \"succhiellata\", \"succiata\", \"succinta\", \"succisa\", \"suddistinta\", \"suddivisa\", \"suffissata\", \"suffissa\", \"suffragata\", \"suffumicata\", \"suffusa\", \"suggellata\", \"suggerita\", \"suggestionata\", \"suicidata\", \"sunteggiata\", \"sunta\", \"suolata\", \"suonata\", \"superata\", \"superpagata\", \"superraffreddata\", \"supervalutata\", \"supervisionata\", \"supplicata\", \"supplita\", \"supportata\", \"supposta\", \"suppurata\", \"surclassata\", \"surfata\", \"surgelata\", \"surraffreddata\", \"surriscaldata\", \"surrogata\", \"survoltata\", \"suscitata\", \"susseguita\", \"sussidiata\", \"sussunta\", \"sussurrata\", \"suturata\", \"svaccata\", \"svagata\", \"svaligiata\", \"svalutata\", \"svapata\", \"svariata\", \"svasata\", \"svecchiata\", \"svegliata\", \"svelata\", \"svelenita\", \"sveltita\", \"svelta\", \"svenata\", \"svenduta\", \"sventagliata\", \"sventata\", \"sventolata\", \"sventrata\", \"sverginata\", \"svergognata\", \"svergolata\", \"sverminata\", \"sverniciata\", \"svestita\", \"svettata\", \"svezzata\", \"sviata\", \"svignatosela\", \"svigorita\", \"svilita\", \"svillaneggiata\", \"sviluppata\", \"svinata\", \"svincolata\", \"sviolinata\", \"svirgolata\", \"svirilizzata\", \"svisata\", \"sviscerata\", \"svitata\", \"sviticchiata\", \"svolata\", \"svolazzata\", \"svolta\", \"svoluta\", \"svuotata\", \"tabuizzata\", \"tabulata\", \"taccata\", \"taccheggiata\", \"tacciata\", \"tacitata\", \"taciuta\", \"tagliata\", \"taglieggiata\", \"tagliuzzata\", \"talebanizzata\", \"tallonata\", \"tampinata\", \"tamponata\", \"tanguta\", \"tannata\", \"tappata\", \"tappezzata\", \"tarata\", \"tardata\", \"targata\", \"tariffata\", \"tarlata\", \"tarmata\", \"taroccata\", \"tarpata\", \"tartagliata\", \"tartassata\", \"tartufata\", \"tassata\", \"tassellata\", \"tastata\", \"tasteggiata\", \"tatuata\", \"tecnicizzata\", \"tecnologizzata\", \"tedeschizzata\", \"tediata\", \"teflonata\", \"telecomandata\", \"telecontrollata\", \"telediffusa\", \"telefonata\", \"telegrafata\", \"teleguidata\", \"telematizzata\", \"telemetrata\", \"teleradiotrasmessa\", \"teletrasmessa\", \"teletrasportata\", \"tematizzata\", \"temperata\", \"tempestata\", \"tempificata\", \"templatizzata\", \"temporizzata\", \"temprata\", \"temuta\", \"tentata\", \"tenuta\", \"teologizzata\", \"teorizzata\", \"tepefatta\", \"terebrata\", \"terminata\", \"termostatata\", \"terrazzata\", \"terrificata\", \"terrorizzata\", \"tersa\", \"terzarolata\", \"terziarizzata\", \"terziata\", \"tesata\", \"tesaurizzata\", \"tesa\", \"tesserata\", \"testata\", \"testificata\", \"testimoniata\", \"timbrata\", \"tindalizzata\", \"tinteggiata\", \"tinta\", \"tipicizzata\", \"tipizzata\", \"tippata\", \"tiranneggiata\", \"tirata\", \"titillata\", \"titolata\", \"toccata\", \"toelettata\", \"tollerata\", \"tolta\", \"tonalizzata\", \"tonificata\", \"tonneggiata\", \"tonsurata\", \"torchiata\", \"tormentata\", \"tornatosena\", \"tornita\", \"torrefatta\", \"torta\", \"tortoreggiata\", \"torturata\", \"tosata\", \"toscaneggiata\", \"toscanizzata\", \"tostata\", \"totalizzata\", \"traboccata\", \"trabuccata\", \"tracannata\", \"tracciata\", \"tradita\", \"tradotta\", \"trafficata\", \"trafilata\", \"trafitta\", \"traforata\", \"trafugata\", \"traghettata\", \"traguardata\", \"trainata\", \"tralasciata\", \"tralignata\", \"tramandata\", \"tramata\", \"trambasciata\", \"tramessa\", \"tramestata\", \"tramezzata\", \"tramortita\", \"tramutata\", \"tranciata\", \"trangugiata\", \"tranquillata\", \"tranquillizzata\", \"transatta\", \"transcesa\", \"transcodificata\", \"transcorsa\", \"transcritta\", \"transennata\", \"transfluita\", \"transfusa\", \"transistorizzata\", \"translitterata\", \"transposta\", \"transricevuta\", \"transustanziata\", \"transveduta\", \"transvista\", \"trapanata\", \"trapassata\", \"trapiantata\", \"traportata\", \"traposta\", \"trapposta\", \"trapuntata\", \"trapunta\", \"trarotta\", \"trasandata\", \"trasbordata\", \"trascelta\", \"trascesa\", \"trascinata\", \"trascorsa\", \"trascritta\", \"trascurata\", \"trasdotta\", \"trasferita\", \"trasfigurata\", \"trasformata\", \"trasfusa\", \"trasgredita\", \"traslata\", \"traslitterata\", \"traslocata\", \"trasmessa\", \"trasmutata\", \"trasparita\", \"traspirata\", \"trasportata\", \"trasposta\", \"trastullata\", \"trasudata\", \"trasvolata\", \"trasvolta\", \"trattata\", \"tratteggiata\", \"trattenuta\", \"tratta\", \"traumatizzata\", \"travagliata\", \"travalicata\", \"travasata\", \"traveduta\", \"traversata\", \"travestita\", \"traviata\", \"travisata\", \"travista\", \"travolta\", \"trebbiata\", \"triangolata\", \"tribbiata\", \"tribolata\", \"tributata\", \"triennalizzata\", \"trimestralizzata\", \"trincata\", \"trincerata\", \"trinciata\", \"tripartita\", \"triplicata\", \"trisecata\", \"trisezionata\", \"tritata\", \"triturata\", \"trivellata\", \"trollata\", \"trombata\", \"troncata\", \"tropicalizzata\", \"trovata\", \"truccata\", \"trucidata\", \"truffata\", \"tuffata\", \"tumefatta\", \"tumulata\", \"turata\", \"turbata\", \"turlupinata\", \"tutelata\", \"ubbligata\", \"ubicata\", \"ubidita\", \"ubiquitinata\", \"ubriacata\", \"uccellata\", \"uccellinata\", \"uccisa\", \"udita\", \"ufficializzata\", \"uggita\", \"ugnata\", \"uguagliata\", \"ulcerata\", \"ulita\", \"ulolata\", \"ultimata\", \"ultracentrifugata\", \"ululata\", \"umanata\", \"umanizzata\", \"umettata\", \"umidificata\", \"umidita\", \"umiliata\", \"uncinata\", \"unguentata\", \"unificata\", \"uniformata\", \"unita\", \"univerbata\", \"universaleggiata\", \"universalizzata\", \"untata\", \"unta\", \"uperizzata\", \"urbanizzata\", \"urgenzata\", \"urlata\", \"urtacchiata\", \"urtata\", \"urticchiata\", \"usata\", \"usciolata\", \"usolata\", \"ustionata\", \"usucapita\", \"usurata\", \"usurpata\", \"utilitata\", \"utilizzata\", \"vaccinata\", \"vagabondeggiata\", \"vagellata\", \"vagheggiata\", \"vagillata\", \"vagliata\", \"valcata\", \"valicata\", \"validata\", \"valorizzata\", \"valsa\", \"valutata\", \"vanagloriata\", \"vanata\", \"vandalizzata\", \"vangata\", \"vangelizzata\", \"vanificata\", \"vanita\", \"vantaggiata\", \"vantata\", \"vaporata\", \"vaporizzata\", \"varata\", \"varcata\", \"variata\", \"vasectomizzata\", \"vaticinata\", \"vedovata\", \"veduta\", \"vegetata\", \"veggiata\", \"vegliata\", \"veicolata\", \"velarizzata\", \"velata\", \"velettata\", \"velinata\", \"vellicata\", \"vellutata\", \"velocizzata\", \"vendemmiata\", \"vendicata\", \"vendicchiata\", \"venducchiata\", \"venduta\", \"venerata\", \"vengiata\", \"ventagliata\", \"ventilata\", \"ventolata\", \"verbalizzata\", \"vergata\", \"vergheggiata\", \"vergognata\", \"vergolata\", \"verificata\", \"verminata\", \"vernalizzata\", \"verniciata\", \"verrinata\", \"versata\", \"verseggiata\", \"versificata\", \"verticalizzata\", \"vessata\", \"vestita\", \"vestita\", \"vetrificata\", \"vetrinata\", \"vetrioleggiata\", \"vettovagliata\", \"vezzeggiata\", \"viaggiata\", \"vicinata\", \"vicitata\", \"videochattata\", \"videochiamata\", \"videocomunicata\", \"videoregistrata\", \"videotrasmessa\", \"vidimata\", \"vigilata\", \"vigliata\", \"vigoreggiata\", \"vigorita\", \"vilificata\", \"vilipesa\", \"villaneggiata\", \"vincolata\", \"vinta\", \"violata\", \"violentata\", \"violinata\", \"virgolata\", \"virgoleggiata\", \"virgolettata\", \"virilizzata\", \"virtualizzata\", \"visionata\", \"visitata\", \"vissuta\", \"vistata\", \"vista\", \"visualizzata\", \"vitaliziata\", \"vitalizzata\", \"vitaminizzata\", \"vittimizzata\", \"vituperata\", \"vivacizzata\", \"vivandata\", \"vivificata\", \"vivisezionata\", \"viziata\", \"vocabolarizzata\", \"vocalizzata\", \"vocata\", \"vociferata\", \"volantinata\", \"volatilizzata\", \"volgarizzata\", \"volicchiata\", \"volpeggiata\", \"voltata\", \"volta\", \"voltolata\", \"volturata\", \"voluminizzata\", \"voluta\", \"volutoca\", \"vomitata\", \"vorata\", \"votata\", \"vulcanizzata\", \"vuotata\", \"wappata\", \"wikificata\", \"xerocopiata\", \"zaffata\", \"zampata\", \"zampettata\", \"zampillata\", \"zannata\", \"zappata\", \"zappettata\", \"zapponata\", \"zavorrata\", \"zeppata\", \"zigrinata\", \"zigzagata\", \"zimbellata\", \"zincata\", \"zinnata\", \"zipolata\", \"zippata\", \"zirlata\", \"zittita\", \"zizzagata\", \"zoccolata\", \"zollata\", \"zombata\", \"zonata\", \"zonizzata\", \"zoppata\", \"zoppeggiata\", \"zoppicata\", \"zucconata\", \"zufolata\", \"zumata\", \"zuppata\", \"abalienate\", \"abbacchiate\", \"abbacinate\", \"abbadate\", \"abbagliate\", \"abbaiate\", \"abballate\", \"abbambinate\", \"abbancate\", \"abbandonate\", \"abbarbagliate\", \"abbarbate\", \"abbarcate\", \"abbaruffate\", \"abbassate\", \"abbatacchiate\", \"abbattute\", \"abbatuffolate\", \"abbelite\", \"abbellate\", \"abbellite\", \"abbendate\", \"abbeverate\", \"abbiadate\", \"abbicate\", \"abbigliate\", \"abbinate\", \"abbindolate\", \"abbioccate\", \"abbiosciate\", \"abbisciate\", \"abbittate\", \"abboccate\", \"abboffate\", \"abbominate\", \"abbonacciate\", \"abbonate\", \"abbonite\", \"abbordate\", \"abborracciate\", \"abborrate\", \"abborrite\", \"abbottinate\", \"abbottonate\", \"abbozzacchiate\", \"abbozzate\", \"abbozzolate\", \"abbracciate\", \"abbraciate\", \"abbrancate\", \"abbreviate\", \"abbriccate\", \"abbrigliate\", \"abbrivate\", \"abbriviate\", \"abbrividite\", \"abbronzate\", \"abbrostolate\", \"abbrostolite\", \"abbruciacchiate\", \"abbruciate\", \"abbrunate\", \"abbrunite\", \"abbruscate\", \"abbrusciate\", \"abbrustiate\", \"abbrustolate\", \"abbrustolite\", \"abbrutite\", \"abbruttite\", \"abbuffate\", \"abbuiate\", \"abbuonate\", \"abburattate\", \"abbuzzite\", \"abdicate\", \"abdotte\", \"abiettate\", \"abilitate\", \"abissate\", \"abitate\", \"abituate\", \"abiurate\", \"abolite\", \"abominate\", \"abondate\", \"aborrite\", \"abrase\", \"abrogate\", \"abusate\", \"accaffate\", \"accagionate\", \"accagliate\", \"accalappiate\", \"accalcate\", \"accaldate\", \"accallate\", \"accalorate\", \"accalorite\", \"accambiate\", \"accampate\", \"accampionate\", \"accanalate\", \"accanate\", \"accaneggiate\", \"accanite\", \"accantonate\", \"accaparrate\", \"accapezzate\", \"accapigliate\", \"accapottate\", \"accappiate\", \"accappiettate\", \"accapponate\", \"accappucciate\", \"accaprettate\", \"accareggiate\", \"accarezzate\", \"accarnate\", \"accarpionate\", \"accartocciate\", \"accasate\", \"accasciate\", \"accasellate\", \"accasermate\", \"accastellate\", \"accastellinate\", \"accatarrate\", \"accatastate\", \"accattate\", \"accattivate\", \"accavalcate\", \"accavalciate\", \"accavallate\", \"accavezzate\", \"accecate\", \"acceffate\", \"accelerate\", \"accellerate\", \"accennate\", \"accensate\", \"accentate\", \"accentrate\", \"accentuate\", \"acceppate\", \"accerchiate\", \"accercinate\", \"accertate\", \"accese\", \"accessoriate\", \"accettate\", \"acchetate\", \"acchiappate\", \"acchiocciolate\", \"acchitate\", \"acchiudute\", \"acciabattate\", \"acciaiate\", \"acciambellate\", \"acciarpate\", \"acciecate\", \"accigliate\", \"acciglionate\", \"accignute\", \"accincignate\", \"accinte\", \"acciocchite\", \"acciottolate\", \"accipigliate\", \"accismate\", \"accise\", \"acciucchite\", \"acciuffate\", \"accivettate\", \"acclamate\", \"acclarate\", \"acclimatate\", \"accluse\", \"accoccate\", \"accoccolate\", \"accoccovate\", \"accodate\", \"accollate\", \"accoltellate\", \"accolte\", \"accomandate\", \"accomiatate\", \"accommiatate\", \"accomodate\", \"accompagnate\", \"accomunate\", \"acconciate\", \"acconigliate\", \"accontate\", \"accontentate\", \"accoppate\", \"accoppiate\", \"accorate\", \"accorciate\", \"accorcite\", \"accordate\", \"accordellate\", \"accorpate\", \"accorte\", \"accosciate\", \"accostate\", \"accostumate\", \"accotonate\", \"accottimate\", \"accovacciate\", \"accovate\", \"accovonate\", \"accozzate\", \"accreditate\", \"accresciute\", \"accrespate\", \"accucciate\", \"accucciolate\", \"accudite\", \"acculate\", \"acculturate\", \"accumulate\", \"accumunate\", \"accusate\", \"acetificate\", \"acetilate\", \"acetite\", \"acidate\", \"acidificate\", \"acidulate\", \"acquadernate\", \"acquarellate\", \"acquartierate\", \"acquate\", \"acquattate\", \"acquerellate\", \"acquetate\", \"acquietate\", \"acquisite\", \"acquistate\", \"acromatizzate\", \"acuite\", \"acuminate\", \"acutizzate\", \"adacquate\", \"adagiate\", \"adattate\", \"addaziate\", \"addebbiate\", \"addebitate\", \"addecimate\", \"addensate\", \"addentate\", \"addentellate\", \"addentrate\", \"addestrate\", \"addette\", \"addiacciate\", \"addimandate\", \"addimesticate\", \"addimorate\", \"addimostrate\", \"addipanate\", \"addirizzate\", \"additate\", \"additivate\", \"addizionate\", \"addobbate\", \"addocilite\", \"addogliate\", \"addolcate\", \"addolciate\", \"addolcite\", \"addolorate\", \"addomandate\", \"addomesticate\", \"addoppiate\", \"addormentate\", \"addossate\", \"addotte\", \"addottorate\", \"addottrinate\", \"addrizzate\", \"adduate\", \"addugliate\", \"adeguate\", \"adempite\", \"adempiute\", \"adequate\", \"aderizzate\", \"adescate\", \"adibite\", \"adirate\", \"adite\", \"adiuvate\", \"adizzate\", \"adocchiate\", \"adombrate\", \"adonate\", \"adonestate\", \"adontate\", \"adoperate\", \"adoprate\", \"adorate\", \"adornate\", \"adottate\", \"adsorbite\", \"aduggiate\", \"adugnate\", \"adulate\", \"adulterate\", \"adunate\", \"adunghiate\", \"adusate\", \"aerate\", \"aereate\", \"aerotrainate\", \"aerotrasportate\", \"affabulate\", \"affaccendate\", \"affacchinate\", \"affacciate\", \"affagottate\", \"affaldate\", \"affamate\", \"affamigliate\", \"affannate\", \"affardellate\", \"affascinate\", \"affastellate\", \"affaticate\", \"affattucchiate\", \"affatturate\", \"affermate\", \"afferrate\", \"affettate\", \"affezionate\", \"affiancate\", \"affiatate\", \"affibbiate\", \"affidate\", \"affienate\", \"affievolite\", \"affigliate\", \"affigurate\", \"affilate\", \"affilettate\", \"affiliate\", \"affinate\", \"affiochite\", \"affiorate\", \"affisate\", \"affissate\", \"affisse\", \"affittate\", \"affittite\", \"afflitte\", \"afflosciate\", \"affocate\", \"affogate\", \"affogliate\", \"affollate\", \"affoltate\", \"affondate\", \"afforcate\", \"afforestate\", \"afforzate\", \"affossate\", \"affralite\", \"affrancate\", \"affrante\", \"affratellate\", \"affrenate\", \"affrenellate\", \"affrescate\", \"affrettate\", \"affrittellate\", \"affrontate\", \"affumate\", \"affumicate\", \"affumigate\", \"affuocate\", \"affusolate\", \"africanizzate\", \"ageminate\", \"agevolate\", \"aggallate\", \"agganciate\", \"aggangherate\", \"aggarbate\", \"aggattonate\", \"aggavignate\", \"aggelate\", \"aggettivate\", \"agghiacciate\", \"agghiadate\", \"agghiaiate\", \"agghindate\", \"aggiaccate\", \"aggiogate\", \"aggiornate\", \"aggirate\", \"aggiucchite\", \"aggiudicate\", \"aggiuntate\", \"aggiunte\", \"aggiustate\", \"agglomerate\", \"agglutinate\", \"aggomitolate\", \"aggottate\", \"aggradite\", \"aggraffate\", \"aggranchiate\", \"aggranchite\", \"aggrandite\", \"aggrappate\", \"aggraticciate\", \"aggravate\", \"aggredite\", \"aggregate\", \"aggrevate\", \"aggricciate\", \"aggrinzate\", \"aggrinzite\", \"aggrommate\", \"aggrondate\", \"aggroppate\", \"aggrottate\", \"aggrovigliate\", \"aggrumate\", \"aggruppate\", \"aggruzzolate\", \"agguagliate\", \"agguantate\", \"agguardate\", \"agguatate\", \"aggueffate\", \"agitate\", \"agognate\", \"agrarizzate\", \"aguatate\", \"agucchiate\", \"agunate\", \"agurate\", \"aguzzate\", \"aitate\", \"aiutate\", \"aizzate\", \"alate\", \"alberate\", \"albergate\", \"alcalinizzate\", \"alchilate\", \"alchimiate\", \"alchimizzate\", \"alcolizzate\", \"alcoolizzate\", \"alenate\", \"alesate\", \"alettate\", \"alfabetate\", \"alfabetizzate\", \"alidite\", \"alienate\", \"alimentate\", \"allacciate\", \"allagate\", \"allappate\", \"allargate\", \"allascate\", \"allattate\", \"alleate\", \"allegate\", \"alleggerite\", \"alleggiate\", \"allegorizzate\", \"alleluiate\", \"allenate\", \"allenite\", \"allentate\", \"allertate\", \"allessate\", \"allestite\", \"allettate\", \"allevate\", \"alleviate\", \"allibate\", \"allibite\", \"allibrate\", \"allicciate\", \"allietate\", \"allindate\", \"allineate\", \"allise\", \"allocate\", \"allogate\", \"alloggiate\", \"allontanate\", \"allottate\", \"allucchettate\", \"allucciolate\", \"allucinate\", \"allumate\", \"alluminate\", \"alluminiate\", \"allungate\", \"allupate\", \"alluse\", \"alluzzate\", \"alogenate\", \"alonate\", \"alpeggiate\", \"alterate\", \"alternate\", \"alzate\", \"amalgamate\", \"amareggiate\", \"amaricate\", \"amate\", \"ambientate\", \"ambiguate\", \"ambite\", \"americanizzate\", \"amicate\", \"ammaccate\", \"ammaestrate\", \"ammainate\", \"ammalate\", \"ammaliate\", \"ammalinconite\", \"ammaltate\", \"ammanettate\", \"ammanicate\", \"ammanierate\", \"ammanigliate\", \"ammannate\", \"ammannellate\", \"ammannite\", \"ammansate\", \"ammansite\", \"ammantate\", \"ammantellate\", \"ammarate\", \"ammarezzate\", \"ammassate\", \"ammassellate\", \"ammassicciate\", \"ammatassate\", \"ammattonate\", \"ammazzate\", \"ammelmate\", \"ammencite\", \"ammendate\", \"ammennicolate\", \"ammesse\", \"ammetate\", \"ammezzite\", \"amministrate\", \"amminutate\", \"ammirate\", \"ammiserite\", \"ammobiliate\", \"ammodernate\", \"ammodernizzate\", \"ammogliate\", \"ammoinate\", \"ammollate\", \"ammollite\", \"ammonite\", \"ammonticchiate\", \"ammonticellate\", \"ammorbate\", \"ammorbidate\", \"ammorbidite\", \"ammorsate\", \"ammortate\", \"ammortite\", \"ammortizzate\", \"ammorzate\", \"ammosciate\", \"ammoscite\", \"ammostate\", \"ammotinate\", \"ammucchiate\", \"ammulinate\", \"ammusate\", \"ammutate\", \"ammutinate\", \"amnistiate\", \"amoracciate\", \"ampiate\", \"ampliate\", \"amplificate\", \"amputate\", \"anagrammate\", \"analizzate\", \"anamorfizzate\", \"anastomizzate\", \"anatematizzate\", \"anatomizzate\", \"anchilosate\", \"ancise\", \"ancorate\", \"andatosene\", \"andicappate\", \"anellate\", \"anemizzate\", \"anestetizzate\", \"angariate\", \"anglicizzate\", \"angolate\", \"angosciate\", \"angustiate\", \"animate\", \"annacquate\", \"annaffiate\", \"annasate\", \"annaspate\", \"annaspicate\", \"annebbiate\", \"annegate\", \"annerate\", \"annerite\", \"annesse\", \"annestate\", \"annichilate\", \"annichilite\", \"annidate\", \"annientate\", \"annitrite\", \"annobilite\", \"annodate\", \"annodicchiate\", \"annoiate\", \"annotate\", \"annottate\", \"annottolate\", \"annoverate\", \"annullate\", \"annunciate\", \"annunziate\", \"annusate\", \"annuvolate\", \"anodizzate\", \"anonimizzate\", \"antecedute\", \"anteposte\", \"antergate\", \"anticheggiate\", \"antichizzate\", \"anticipate\", \"anticonosciute\", \"antidatate\", \"antivedute\", \"antiviste\", \"antologizzate\", \"antropizzate\", \"antropomorfizzate\", \"aocchiate\", \"aombrate\", \"aonestate\", \"aontate\", \"aperte\", \"apocopate\", \"apologizzate\", \"apostrofate\", \"appaciate\", \"appacificate\", \"appagate\", \"appaiate\", \"appalesate\", \"appallottolate\", \"appaltate\", \"appanettate\", \"appannate\", \"apparate\", \"apparecchiate\", \"apparentate\", \"apparigliate\", \"apparite\", \"appartate\", \"appassionate\", \"appastate\", \"appastellate\", \"appellate\", \"appennellate\", \"appercepite\", \"appertizzate\", \"appesantite\", \"appesite\", \"appese\", \"appestate\", \"appetite\", \"appezzate\", \"appiacevolite\", \"appianate\", \"appiastrate\", \"appiatate\", \"appiattate\", \"appiattite\", \"appiccate\", \"appiccicate\", \"appiccolite\", \"appiedate\", \"appigionate\", \"appigliate\", \"appinzate\", \"appiombate\", \"appioppate\", \"appisolate\", \"applaudite\", \"applicate\", \"appoderate\", \"appoggiate\", \"appollaiate\", \"appoppate\", \"apportate\", \"appostate\", \"apposte\", \"appratite\", \"appresentate\", \"apprese\", \"appressate\", \"apprestate\", \"apprettate\", \"apprezzate\", \"approcciate\", \"approfittate\", \"approfondate\", \"approfondite\", \"approntate\", \"appropinquate\", \"appropriate\", \"approssimate\", \"approvate\", \"approvisionate\", \"approvvigionate\", \"appruate\", \"appulcrate\", \"appuntate\", \"appuntellate\", \"appuntite\", \"appurate\", \"appuzzate\", \"arabescate\", \"arabizzate\", \"arate\", \"arbitrate\", \"arborate\", \"arcaizzate\", \"arcate\", \"architettate\", \"archiviate\", \"arcuate\", \"ardite\", \"areate\", \"argentate\", \"arginate\", \"argomentate\", \"arguite\", \"arianizzate\", \"arieggiate\", \"armate\", \"armonizzate\", \"aromatizzate\", \"arpeggiate\", \"arpionate\", \"arponate\", \"arrabattate\", \"arraffate\", \"arraffiate\", \"arrandellate\", \"arrangiate\", \"arrapate\", \"arrapinate\", \"arrappate\", \"arrazzate\", \"arrecate\", \"arredate\", \"arreggimentate\", \"arrembate\", \"arrenate\", \"arresise\", \"arrese\", \"arrestate\", \"arretrate\", \"arricchite\", \"arricciate\", \"arricciolate\", \"arriffate\", \"arringate\", \"arrischiate\", \"arrisicate\", \"arrise\", \"arrocate\", \"arroccate\", \"arrochite\", \"arrogate\", \"arrolate\", \"arroncate\", \"arronzate\", \"arrosate\", \"arrossate\", \"arrostate\", \"arrostite\", \"arrotate\", \"arrotolate\", \"arrotondate\", \"arrovellate\", \"arroventate\", \"arroventite\", \"arrovesciate\", \"arrubinate\", \"arruffate\", \"arruffianate\", \"arrugginite\", \"arruncigliate\", \"arruolate\", \"arruvidite\", \"arsicciate\", \"arse\", \"artefatte\", \"articolate\", \"artigliate\", \"ascese\", \"asciate\", \"asciolvute\", \"asciugate\", \"ascoltate\", \"ascose\", \"ascoste\", \"ascritte\", \"asfaltate\", \"asfissiate\", \"asperse\", \"aspettate\", \"aspirate\", \"asportate\", \"aspreggiate\", \"assaettate\", \"assaggiate\", \"assalite\", \"assaltate\", \"assaporate\", \"assaporite\", \"assassinate\", \"assecondate\", \"assecurate\", \"assediate\", \"asseggiate\", \"assegnate\", \"assembiate\", \"assemblate\", \"assembrate\", \"assemprate\", \"assentate\", \"asserite\", \"asserragliate\", \"asservite\", \"assestate\", \"assetate\", \"assettate\", \"asseverate\", \"assibilate\", \"assicurate\", \"assiderate\", \"assiemate\", \"assiepate\", \"assillate\", \"assimigliate\", \"assimilate\", \"assiomatizzate\", \"assise\", \"assistite\", \"associate\", \"assodate\", \"assoggettate\", \"assolcate\", \"assoldate\", \"assolte\", \"assolutizzate\", \"assomate\", \"assommate\", \"assonate\", \"assonnate\", \"assopite\", \"assorbite\", \"assordate\", \"assordite\", \"assortite\", \"assottigliate\", \"assuefatte\", \"assunte\", \"asteggiate\", \"astenute\", \"asterse\", \"astratte\", \"astrette\", \"atomizzate\", \"atrofizzate\", \"atrovate\", \"attaccate\", \"attagliate\", \"attanagliate\", \"attardate\", \"attediate\", \"atteggiate\", \"attempate\", \"attendate\", \"attentate\", \"attenuate\", \"attenute\", \"attergate\", \"atterrate\", \"atterrite\", \"atterzate\", \"attese\", \"attestate\", \"atticizzate\", \"attillate\", \"attinte\", \"attirate\", \"attivate\", \"attivizzate\", \"attizzate\", \"attorcigliate\", \"attorniate\", \"attorte\", \"attoscate\", \"attossicate\", \"attraccate\", \"attrappite\", \"attratte\", \"attraversate\", \"attrezzate\", \"attribuite\", \"attristate\", \"attristite\", \"attruppate\", \"attualizzate\", \"attuate\", \"attuffate\", \"attutate\", \"attutite\", \"auggiate\", \"augumentate\", \"augurate\", \"aulite\", \"aumentate\", \"aunghiate\", \"ausate\", \"auscultate\", \"auspicate\", \"autenticate\", \"autentificate\", \"autoaccusate\", \"autoaffondate\", \"autoalimentate\", \"autoassolte\", \"autocandidate\", \"autocensurate\", \"autocitate\", \"autocommiserate\", \"autoconsumate\", \"autoconvinte\", \"autodefinite\", \"autodenunciate\", \"autodistrutte\", \"autofinanziate\", \"autogestite\", \"autogovernate\", \"autografate\", \"autoincensate\", \"autointersecate\", \"autoinvitate\", \"autolesionate\", \"autolimitate\", \"automaticizzate\", \"automatizzate\", \"automotivate\", \"autonominate\", \"autoproclamate\", \"autoprodotte\", \"autoprotette\", \"autopubblicate\", \"autopubblicizzate\", \"autoregolamentate\", \"autoregolate\", \"autoridotte\", \"autoriparate\", \"autorizzate\", \"autosomministrate\", \"autosostenute\", \"autosuggestionate\", \"autotassate\", \"autotrapiantate\", \"autotrasportate\", \"autovalutate\", \"avallate\", \"avampate\", \"avanzate\", \"avariate\", \"avinte\", \"aviolanciate\", \"aviotrasportate\", \"avocate\", \"avolterate\", \"avulse\", \"avutacele\", \"avute\", \"avvalorate\", \"avvalse\", \"avvantaggiate\", \"avvelate\", \"avvelenate\", \"avventate\", \"avventurate\", \"avverate\", \"avversate\", \"avvertite\", \"avvezzate\", \"avviate\", \"avvicendate\", \"avvicinate\", \"avvignate\", \"avvilite\", \"avviluppate\", \"avvinate\", \"avvinchiate\", \"avvinghiate\", \"avvinte\", \"avvisate\", \"avvistate\", \"avvitate\", \"avviticchiate\", \"avvitite\", \"avvivate\", \"avvolte\", \"avvoltolate\", \"aziendalizzate\", \"azionate\", \"azotate\", \"azzannate\", \"azzardate\", \"azzeccate\", \"azzerate\", \"azzimate\", \"azzittate\", \"azzittite\", \"azzoppate\", \"azzoppite\", \"azzuffate\", \"azzurrate\", \"bacate\", \"baccagliate\", \"bacchettate\", \"bacchiate\", \"baciate\", \"badate\", \"bagnate\", \"baipassate\", \"balbettate\", \"balcanizzate\", \"ballate\", \"baloccate\", \"balzate\", \"banalizzate\", \"bancate\", \"bandite\", \"bannate\", \"baraccate\", \"barattate\", \"barbarizzate\", \"barcamenate\", \"bardate\", \"barellate\", \"barrate\", \"barricate\", \"basate\", \"basciate\", \"basculate\", \"bassate\", \"bastate\", \"bastionate\", \"bastite\", \"bastonate\", \"battezzate\", \"battute\", \"bazzicate\", \"beatificate\", \"beate\", \"beccate\", \"beccheggiate\", \"becchettate\", \"beffate\", \"beffeggiate\", \"bendate\", \"benedette\", \"beneficate\", \"benvolute\", \"berlusconizzate\", \"bersagliate\", \"bestemmiate\", \"bevute\", \"biadate\", \"bianchettate\", \"bianchite\", \"biascicate\", \"biasimate\", \"biasmate\", \"bidonate\", \"biennalizzate\", \"biforcate\", \"bigiate\", \"bilanciate\", \"binate\", \"bindolate\", \"biodegradate\", \"biografate\", \"bipartite\", \"bisbigliate\", \"biscottate\", \"bisecate\", \"bisellate\", \"bisognate\", \"bissate\", \"bistrate\", \"bistrattate\", \"bitumate\", \"bituminate\", \"blandite\", \"bleffate\", \"blindate\", \"bloccate\", \"bobinate\", \"boccheggiate\", \"bocciate\", \"boicottate\", \"bollate\", \"bollite\", \"bombardate\", \"bombate\", \"bonderizzate\", \"bonificate\", \"bootate\", \"borbottate\", \"bordate\", \"boriate\", \"borrate\", \"borseggiate\", \"braccate\", \"bracciate\", \"bramate\", \"bramite\", \"brancicate\", \"brandeggiate\", \"brandite\", \"brasate\", \"bravate\", \"brevettate\", \"breviate\", \"brillantate\", \"brillate\", \"brinate\", \"broccate\", \"brocciate\", \"broccolate\", \"brontolate\", \"bronzate\", \"brucate\", \"bruciacchiate\", \"bruciate\", \"brunite\", \"bruscate\", \"bruschinate\", \"brutalizzate\", \"bruttate\", \"bucate\", \"bucherellate\", \"bufate\", \"buffate\", \"bufferizzate\", \"buggerate\", \"bugnate\", \"bulicate\", \"bulinate\", \"bullettate\", \"bullonate\", \"burattate\", \"burlate\", \"burocratizzate\", \"burrificate\", \"buscate\", \"buttate\", \"butterate\", \"bypassate\", \"cablate\", \"cabrate\", \"cacate\", \"cacciate\", \"cadenzate\", \"cadmiate\", \"caducate\", \"cagate\", \"caggiate\", \"cagionate\", \"cagliate\", \"calafatate\", \"calamitate\", \"calandrate\", \"calate\", \"calcate\", \"calciate\", \"calcificate\", \"calcolate\", \"caldeggiate\", \"calettate\", \"calibrate\", \"calmate\", \"calmierate\", \"calpestate\", \"calumate\", \"calunniate\", \"calzate\", \"cambiate\", \"camerate\", \"campionate\", \"campite\", \"camuffate\", \"canalizzate\", \"cancellate\", \"cancerizzate\", \"candeggiate\", \"candidate\", \"candite\", \"canforate\", \"cangiate\", \"cannate\", \"canneggiate\", \"cannibalizzate\", \"cannoneggiate\", \"canonizzate\", \"cantate\", \"canterellate\", \"canticchiate\", \"cantilenate\", \"canzonate\", \"caolinizzate\", \"capacitate\", \"capeggiate\", \"capillarizzate\", \"capitalizzate\", \"capitanate\", \"capitaneggiate\", \"capite\", \"capitozzate\", \"capivolte\", \"caponate\", \"capotate\", \"capottate\", \"capovolte\", \"capponate\", \"captate\", \"caramellate\", \"caramellizzate\", \"caratate\", \"caratterizzate\", \"carbonizzate\", \"carbossilate\", \"carburate\", \"carcate\", \"carcerate\", \"cardate\", \"carenate\", \"carezzate\", \"cariate\", \"caricate\", \"caricaturate\", \"caricaturizzate\", \"carotate\", \"carpionate\", \"carpite\", \"carreggiate\", \"carrozzate\", \"cartavetrate\", \"carteggiate\", \"cartellinate\", \"cartografate\", \"cartolarizzate\", \"cartonate\", \"cascolate\", \"cassate\", \"casse\", \"castigate\", \"castrate\", \"casualizzate\", \"catabolizzate\", \"catalizzate\", \"catalogate\", \"catapultate\", \"catechizzate\", \"categorizzate\", \"cateterizzate\", \"catramate\", \"cattolicizzate\", \"catturate\", \"causate\", \"cautelate\", \"cauterizzate\", \"cauzionate\", \"cavalcate\", \"cavatasele\", \"cavate\", \"cazzate\", \"cazziate\", \"cazzottate\", \"cedrate\", \"cedute\", \"celate\", \"celebrate\", \"cellofanate\", \"cementate\", \"cementificate\", \"cennate\", \"censite\", \"censurate\", \"centellate\", \"centellinate\", \"centimetrate\", \"centinate\", \"centralizzate\", \"centrate\", \"centrifugate\", \"centuplicate\", \"cerate\", \"cercate\", \"cerchiate\", \"cernute\", \"certificate\", \"cesellate\", \"cessate\", \"cestinate\", \"cheratinizzate\", \"chetate\", \"chiamate\", \"chiappate\", \"chiarificate\", \"chiarite\", \"chiaroscurate\", \"chiavate\", \"chiazzate\", \"chieste\", \"chilificate\", \"chilometrate\", \"chimificate\", \"chinate\", \"chinizzate\", \"chiodate\", \"chiosate\", \"chiuse\", \"choccate\", \"ciancicate\", \"cianfrinate\", \"cianfrugliate\", \"ciangottate\", \"ciattate\", \"cibate\", \"cicatrizzate\", \"ciccate\", \"cicchettate\", \"ciclizzate\", \"ciclostilate\", \"cifrate\", \"cilindrate\", \"cimate\", \"cimentate\", \"cincischiate\", \"cinematografate\", \"cintate\", \"cinte\", \"cioncate\", \"ciondolate\", \"circolate\", \"circoncinte\", \"circoncise\", \"circondate\", \"circondotte\", \"circonflesse\", \"circonfluite\", \"circonfuse\", \"circonscritte\", \"circonvenute\", \"circoscritte\", \"circostanziate\", \"circuite\", \"circumcinte\", \"circumnavigate\", \"citate\", \"ciucciate\", \"ciurmate\", \"civettate\", \"civilizzate\", \"clamate\", \"classate\", \"classicizzate\", \"classificate\", \"cliccate\", \"climatizzate\", \"clivate\", \"clonate\", \"cloroformizzate\", \"clorurate\", \"clusterizzate\", \"co-dirette\", \"coacervate\", \"coadiuvate\", \"coagulate\", \"coalizzate\", \"coartate\", \"coccolate\", \"codificate\", \"coeditate\", \"coesistite\", \"cofinanziate\", \"cofirmate\", \"cofondate\", \"cogestite\", \"cogitate\", \"coglionate\", \"cognosciute\", \"coibentate\", \"coincise\", \"cointeressate\", \"cointestate\", \"coinvolte\", \"cokificate\", \"colate\", \"colettate\", \"collassate\", \"collaudate\", \"collazionate\", \"collegate\", \"collettivizzate\", \"collezionate\", \"collimate\", \"colliquate\", \"collise\", \"collocate\", \"colluttate\", \"colmate\", \"colonizzate\", \"colorate\", \"colorite\", \"colorizzate\", \"colpevolizzate\", \"colpite\", \"coltellate\", \"coltivate\", \"colte\", \"coltrate\", \"comandate\", \"combattute\", \"combinate\", \"comburute\", \"comicizzate\", \"cominciate\", \"commemorate\", \"commendate\", \"commensurate\", \"commentate\", \"commercializzate\", \"commesse\", \"comminate\", \"commiserate\", \"commissariate\", \"commissionate\", \"commisurate\", \"commosse\", \"commutate\", \"comodate\", \"compaginate\", \"comparite\", \"compartimentalizzate\", \"compartite\", \"compassionate\", \"compatibilizzate\", \"compatite\", \"compattate\", \"compendiate\", \"compenetrate\", \"compensate\", \"comperate\", \"compiaciute\", \"compiante\", \"compilate\", \"compitate\", \"compiute\", \"complessate\", \"complessificate\", \"complesse\", \"completate\", \"complicate\", \"complimentate\", \"comportate\", \"compostate\", \"composte\", \"comprate\", \"compravendute\", \"comprese\", \"compresse\", \"compromesse\", \"comprovate\", \"compulsate\", \"compunte\", \"computate\", \"computerizzate\", \"comunicate\", \"comunistizzate\", \"concatenate\", \"concedute\", \"concelebrate\", \"concentrate\", \"concepite\", \"concertate\", \"concesse\", \"concettate\", \"concettualizzate\", \"conchiuse\", \"conciate\", \"conciliate\", \"concimate\", \"concitate\", \"conclamate\", \"concluse\", \"concordate\", \"concotte\", \"concretate\", \"concretizzate\", \"conculcate\", \"concupite\", \"condannate\", \"condensate\", \"condite\", \"condivise\", \"condizionate\", \"condolute\", \"condonate\", \"condotte\", \"confatte\", \"confederate\", \"conferite\", \"confermate\", \"confessate\", \"confettate\", \"confezionate\", \"conficcate\", \"confidate\", \"configurate\", \"confinate\", \"confinte\", \"confiscate\", \"confitte\", \"conformate\", \"confortate\", \"confricate\", \"confrontate\", \"confuse\", \"confutate\", \"congedate\", \"congegnate\", \"congelate\", \"congestionate\", \"congetturate\", \"congiunte\", \"conglobate\", \"conglomerate\", \"conglutinate\", \"congratulate\", \"congregate\", \"conguagliate\", \"coniate\", \"coniugate\", \"connaturate\", \"connesse\", \"connotate\", \"connumerate\", \"conosciute\", \"conquistate\", \"consacrate\", \"consapevolizzate\", \"consegnate\", \"conseguite\", \"consentite\", \"conservate\", \"considerate\", \"consigliate\", \"consistite\", \"consociate\", \"consolate\", \"consolidate\", \"consorziate\", \"consparse\", \"consperse\", \"constatate\", \"constrette\", \"construite\", \"consultate\", \"consumate\", \"consunte\", \"contabilizzate\", \"contagiate\", \"containerizzate\", \"contaminate\", \"contate\", \"contattate\", \"conteggiate\", \"contemperate\", \"contemplate\", \"contentate\", \"contenute\", \"contese\", \"contestate\", \"contestualizzate\", \"contingentate\", \"continuate\", \"contornate\", \"contorte\", \"contrabbandate\", \"contraccambiate\", \"contraddette\", \"contraddistinte\", \"contradette\", \"contraffatte\", \"contrappesate\", \"contrapposte\", \"contrappuntate\", \"contrariate\", \"contrassegnate\", \"contrastate\", \"contrate\", \"contrattaccate\", \"contrattate\", \"contratte\", \"contravvalse\", \"contristate\", \"controbattute\", \"controbilanciate\", \"controdatate\", \"controfirmate\", \"controindicate\", \"controllate\", \"controminate\", \"contronotate\", \"controproposte\", \"controprovate\", \"controquerelate\", \"controsoffittate\", \"controstampate\", \"controventate\", \"conturbate\", \"contuse\", \"convalidate\", \"convenute\", \"convenzionate\", \"convertite\", \"convinte\", \"convitate\", \"convocate\", \"convogliate\", \"convolte\", \"coobate\", \"cooptate\", \"coordinate\", \"coperchiate\", \"coperte\", \"copiaincollate\", \"copiate\", \"copolimerizzate\", \"coppellate\", \"coprodotte\", \"corazzate\", \"corbellate\", \"corcate\", \"cordonate\", \"coreografate\", \"coricate\", \"cornificate\", \"coronate\", \"corredate\", \"correlate\", \"corresponsabilizzate\", \"corrette\", \"corricchiate\", \"corrisposte\", \"corroborate\", \"corrose\", \"corrotte\", \"corrucciate\", \"corrugate\", \"corse\", \"corteate\", \"corteggiate\", \"cortocircuitate\", \"coruscate\", \"cosate\", \"coscritte\", \"cosparse\", \"cosperse\", \"costatate\", \"costeggiate\", \"costellate\", \"costernate\", \"costicchiate\", \"costipate\", \"costituite\", \"costituzionalizzate\", \"costrette\", \"costruite\", \"costudite\", \"cotonate\", \"cotte\", \"covate\", \"coventrizzate\", \"coverchiate\", \"craccate\", \"create\", \"credute\", \"cremate\", \"crepate\", \"cresciute\", \"cresimate\", \"crespate\", \"criminalizzate\", \"crioconcentrate\", \"criptate\", \"cristallizzate\", \"cristianizzate\", \"criticate\", \"crittate\", \"crittografate\", \"crivellate\", \"crocchiate\", \"crocefisse\", \"crocefitte\", \"crocifisse\", \"crocifitte\", \"crogiolate\", \"cromate\", \"cronicizzate\", \"cronometrate\", \"crostate\", \"crucciate\", \"crucifisse\", \"crucifitte\", \"cuccate\", \"cucinate\", \"cucite\", \"cullate\", \"cumulate\", \"cuntate\", \"curate\", \"curvate\", \"curvate\", \"custodite\", \"customizzate\", \"damascate\", \"damaschinate\", \"damate\", \"dannate\", \"danneggiate\", \"danzate\", \"dardeggiate\", \"datate\", \"date\", \"dattilografate\", \"dattiloscritte\", \"daziate\", \"deacidificate\", \"deattivate\", \"debbiate\", \"debellate\", \"debilitate\", \"decaffeinate\", \"decaffeinizzate\", \"decalcate\", \"decalcificate\", \"decantate\", \"decapate\", \"decapitate\", \"decappottate\", \"decarbossilate\", \"decarburate\", \"decatizzate\", \"decelerate\", \"decentralizzate\", \"decentrate\", \"decerebrate\", \"decernute\", \"decespugliate\", \"deciferate\", \"decifrate\", \"decimalizzate\", \"decimate\", \"decise\", \"declamate\", \"declassate\", \"declassificate\", \"declinate\", \"declorate\", \"decodificate\", \"decolonizzate\", \"decolorate\", \"decompartimentate\", \"decompilate\", \"decomposte\", \"decompresse\", \"deconcentrate\", \"decondizionate\", \"decongelate\", \"decongestionate\", \"decontaminate\", \"decontestualizzate\", \"decontratte\", \"decorate\", \"decorticate\", \"decostruite\", \"decrementate\", \"decretate\", \"decriminalizzate\", \"decriptate\", \"decrittate\", \"decuplicate\", \"decurtate\", \"dedicate\", \"dedotte\", \"defacciate\", \"defalcate\", \"defascistizzate\", \"defecate\", \"defenestrate\", \"deferite\", \"defilate\", \"definite\", \"defiscalizzate\", \"defitte\", \"deflazionate\", \"deflemmate\", \"deflorate\", \"defogliate\", \"defoliate\", \"deforestate\", \"deformate\", \"defosforate\", \"defosforilate\", \"deframmentate\", \"defraudate\", \"degassate\", \"degassificate\", \"deglutite\", \"degnate\", \"degradate\", \"degustate\", \"deidratate\", \"deidrogenate\", \"deificate\", \"deindicizzate\", \"deindustrializzate\", \"deionizzate\", \"delegate\", \"delegificate\", \"delegittimate\", \"delibate\", \"deliberate\", \"delimitate\", \"delineate\", \"delirate\", \"deliziate\", \"delocalizzate\", \"delucidate\", \"deluse\", \"demagnetizzate\", \"demandate\", \"demanializzate\", \"demarcate\", \"demeritate\", \"demerse\", \"demetallizzate\", \"demilitarizzate\", \"demineralizzate\", \"demistificate\", \"demitizzate\", \"democratizzate\", \"demodulate\", \"demolite\", \"demoltiplicate\", \"demonetate\", \"demonetizzate\", \"demonizzate\", \"demoralizzate\", \"demorse\", \"demotivate\", \"denaturalizzate\", \"denaturate\", \"denazificate\", \"denazionalizzate\", \"denicotinizzate\", \"denigrate\", \"denitrificate\", \"denocciolate\", \"denominate\", \"denotate\", \"dentellate\", \"denuclearizzate\", \"denudate\", \"denunciate\", \"denunziate\", \"deodorate\", \"deossidate\", \"deossigenate\", \"deostruite\", \"depauperate\", \"depenalizzate\", \"depennate\", \"depilate\", \"depinte\", \"depistate\", \"deplorate\", \"depolarizzate\", \"depolimerizzate\", \"depoliticizzate\", \"depolverizzate\", \"deportate\", \"depositate\", \"deposte\", \"depotenziate\", \"depravate\", \"deprecate\", \"depredate\", \"depresse\", \"depressurizzate\", \"deprezzate\", \"deprivate\", \"deprotonate\", \"depulse\", \"depurate\", \"dequalificate\", \"deratizzate\", \"derattizzate\", \"dereferenziate\", \"deregolamentate\", \"deregolate\", \"derequisite\", \"deresponsabilizzate\", \"derise\", \"derubate\", \"derubricate\", \"desacralizzate\", \"desalate\", \"desalinizzate\", \"descolarizzate\", \"descritte\", \"desecretate\", \"desegretate\", \"deselezionate\", \"desensibilizzate\", \"desessualizzate\", \"desiate\", \"desiderate\", \"designate\", \"desinate\", \"desirate\", \"desolate\", \"desolforate\", \"desonorizzate\", \"desorbite\", \"desossidate\", \"desquamate\", \"destabilizzate\", \"destagionalizzate\", \"destalinizzate\", \"destatalizzate\", \"destatizzate\", \"destate\", \"destinate\", \"destituite\", \"destoricizzate\", \"destreggiate\", \"destrutte\", \"destrutturate\", \"desunte\", \"detassate\", \"detenute\", \"deteriorate\", \"determinate\", \"deterse\", \"detestate\", \"detonate\", \"detorte\", \"detossificate\", \"detratte\", \"detronizzate\", \"dettagliate\", \"dettate\", \"dette\", \"deturpate\", \"deumidificate\", \"devastate\", \"deventate\", \"deviate\", \"deviscerate\", \"devitalizzate\", \"devitaminizzate\", \"devolute\", \"dezippate\", \"diaframmate\", \"diagnosticate\", \"diagonalizzate\", \"diagrammate\", \"dializzate\", \"dialogate\", \"dialogizzate\", \"diazotate\", \"dibattute\", \"diboscate\", \"dichiarate\", \"diesate\", \"diesizzate\", \"difese\", \"diffamate\", \"differite\", \"diffidate\", \"diffrante\", \"diffratte\", \"diffuse\", \"digerite\", \"digitalizzate\", \"digitate\", \"digiunte\", \"digrassate\", \"digrignate\", \"digrossate\", \"dilacerate\", \"dilaniate\", \"dilapidate\", \"dilatate\", \"dilavate\", \"dilazionate\", \"dileggiate\", \"dileguate\", \"dilettate\", \"dilette\", \"diliscate\", \"dilucidate\", \"diluite\", \"dilungate\", \"dimagrate\", \"dimandate\", \"dimenate\", \"dimensionate\", \"dimenticate\", \"dimerizzate\", \"dimesse\", \"dimezzate\", \"diminuite\", \"dimissionate\", \"dimostrate\", \"dimunte\", \"dinamizzate\", \"dinoccate\", \"dipanate\", \"dipelate\", \"dipinte\", \"diplomate\", \"diposte\", \"diradate\", \"diramate\", \"dirette\", \"direzionate\", \"dirimute\", \"diroccate\", \"dirottate\", \"dirotte\", \"dirozzate\", \"disabilitate\", \"disabituate\", \"disaccentate\", \"disaccoppiate\", \"disaccordate\", \"disacerbate\", \"disacidate\", \"disacidificate\", \"disacidite\", \"disaerate\", \"disaffezionate\", \"disaggregate\", \"disalberate\", \"disallineate\", \"disamate\", \"disambiguate\", \"disaminate\", \"disamorate\", \"disancorate\", \"disanimate\", \"disappannate\", \"disapplicate\", \"disapprese\", \"disapprovate\", \"disarcionate\", \"disarmate\", \"disarticolate\", \"disascoste\", \"disassemblate\", \"disassuefatte\", \"disatomizzate\", \"disattese\", \"disattivate\", \"disattrezzate\", \"disavvezzate\", \"disboscate\", \"disbrigate\", \"discacciate\", \"discalzate\", \"discantate\", \"discaricate\", \"discernute\", \"discese\", \"disceverate\", \"dischieste\", \"dischiuse\", \"discinte\", \"disciolte\", \"disciplinate\", \"discolorate\", \"discolpate\", \"discommesse\", \"discompagnate\", \"discomposte\", \"disconcluse\", \"disconfitte\", \"discongiunte\", \"disconnesse\", \"disconosciute\", \"discoperte\", \"discordate\", \"discoscese\", \"discostate\", \"discreditate\", \"discresciute\", \"discriminate\", \"discritte\", \"discucite\", \"discuoiate\", \"discusse\", \"disdegnate\", \"disdettate\", \"disdette\", \"diseccate\", \"diseccitate\", \"diseducate\", \"disegnate\", \"diserbate\", \"diseredate\", \"disertate\", \"diserte\", \"disfatte\", \"disgelate\", \"disgiunte\", \"disgraziate\", \"disgregate\", \"disgustate\", \"disidentificate\", \"disiderate\", \"disidratate\", \"disilluse\", \"disimballate\", \"disimparate\", \"disimpegnate\", \"disimpresse\", \"disincagliate\", \"disincantate\", \"disincentivate\", \"disincrostate\", \"disindustrializzate\", \"disinfestate\", \"disinfettate\", \"disinflazionate\", \"disinformate\", \"disingannate\", \"disingranate\", \"disinibite\", \"disinnamorate\", \"disinnescate\", \"disinnestate\", \"disinquinate\", \"disinserite\", \"disinstallate\", \"disintasate\", \"disintegrate\", \"disinteressate\", \"disintese\", \"disintossicate\", \"disinvestite\", \"disinvolte\", \"disistimate\", \"dislocate\", \"dismesse\", \"disobbedite\", \"disobbligate\", \"disonorate\", \"disordinate\", \"disorganizzate\", \"disorientate\", \"disormeggiate\", \"disossate\", \"disossidate\", \"disostruite\", \"disotterrate\", \"disparite\", \"dispensate\", \"dispente\", \"disperdute\", \"disperse\", \"dispese\", \"dispiegate\", \"dispinte\", \"dispogliate\", \"disposte\", \"dispregiate\", \"disprezzate\", \"dispromesse\", \"disproporzionate\", \"disputate\", \"disqualificate\", \"disrotte\", \"dissacrate\", \"dissalate\", \"dissaldate\", \"dissanguate\", \"dissecate\", \"disseccate\", \"disselciate\", \"dissellate\", \"disseminate\", \"dissepolte\", \"disseppellite\", \"dissequestrate\", \"disserrate\", \"dissestate\", \"dissetate\", \"dissezionate\", \"dissigillate\", \"dissimulate\", \"dissipate\", \"dissociate\", \"dissodate\", \"dissolte\", \"dissomigliate\", \"dissotterrate\", \"dissuase\", \"dissuggellate\", \"distaccate\", \"distanziate\", \"distese\", \"distillate\", \"distinte\", \"distolte\", \"distorte\", \"distratte\", \"distrette\", \"distribuite\", \"districate\", \"distrigate\", \"distrutte\", \"disturbate\", \"disubbidite\", \"disumanate\", \"disumanizzate\", \"disunite\", \"disusate\", \"disvedute\", \"disvelate\", \"disvestite\", \"disviate\", \"disviste\", \"disvolte\", \"disvolute\", \"dittongate\", \"divallate\", \"divaricate\", \"divelte\", \"diversificate\", \"divertite\", \"divezzate\", \"divinate\", \"divincolate\", \"divinizzate\", \"divise\", \"divolte\", \"divorate\", \"divorziate\", \"divulgate\", \"documentate\", \"dogate\", \"dogmatizzate\", \"dolcificate\", \"dollarizzate\", \"dolorate\", \"dolute\", \"domandate\", \"domate\", \"domesticate\", \"domiciliate\", \"dominate\", \"donate\", \"dondolate\", \"dopate\", \"doppiate\", \"dorate\", \"dormitoce\", \"dosate\", \"dotate\", \"dovute\", \"dragate\", \"drammatizzate\", \"drappeggiate\", \"drenate\", \"dribblate\", \"drizzate\", \"drogate\", \"dugliate\", \"duplicate\", \"duramificate\", \"ebraizzate\", \"eccedute\", \"eccepite\", \"eccettuate\", \"eccitate\", \"echeggiate\", \"eclissate\", \"economizzate\", \"edificate\", \"editate\", \"edotte\", \"educate\", \"edulcorate\", \"effettuate\", \"efficientate\", \"effigiate\", \"effinte\", \"effluite\", \"effuse\", \"egemonizzate\", \"eguagliate\", \"eiettate\", \"elaborate\", \"elargite\", \"elasticizzate\", \"elementarizzate\", \"elemosinate\", \"elencate\", \"elette\", \"elettrificate\", \"elettrizzate\", \"elettrocoagulate\", \"elettrolizzate\", \"elevate\", \"eliminate\", \"elise\", \"elitrasportate\", \"ellenizzate\", \"elogiate\", \"elucidate\", \"elucubrate\", \"eluite\", \"eluse\", \"emanate\", \"emancipate\", \"emarginate\", \"embricate\", \"emendate\", \"emesse\", \"emozionate\", \"empite\", \"empiute\", \"emulate\", \"emulsionate\", \"emunte\", \"encomiate\", \"endocitate\", \"energizzate\", \"enfatizzate\", \"enfiate\", \"entusiasmate\", \"enucleate\", \"enumerate\", \"enunciate\", \"epicureggiate\", \"epurate\", \"equalizzate\", \"equilibrate\", \"equipaggiate\", \"equiparate\", \"eradicate\", \"erase\", \"ereditate\", \"erette\", \"erogate\", \"eroicizzate\", \"erose\", \"erotizzate\", \"erpicate\", \"erse\", \"erudite\", \"eruttate\", \"esacerbate\", \"esagerate\", \"esagitate\", \"esalate\", \"esaltate\", \"esaminate\", \"esasperate\", \"esaudite\", \"esaurite\", \"esautorate\", \"esborsate\", \"escluse\", \"escogitate\", \"escomiate\", \"escoriate\", \"escosse\", \"escusse\", \"esecrate\", \"esecutate\", \"eseguite\", \"esemplificate\", \"esentate\", \"esercitate\", \"esfoliate\", \"esibite\", \"esilarate\", \"esiliate\", \"esimute\", \"esitate\", \"esonerate\", \"esorbitate\", \"esorcizzate\", \"esortate\", \"espanse\", \"esparse\", \"esperimentate\", \"esperite\", \"espettorate\", \"espiantate\", \"espiate\", \"espirate\", \"espletate\", \"esplicate\", \"esplicitate\", \"esplorate\", \"esplose\", \"esportate\", \"esposte\", \"espresse\", \"espropriate\", \"espugnate\", \"espulse\", \"espunte\", \"espurgate\", \"essiccate\", \"essute\", \"estasiate\", \"estenuate\", \"esterificate\", \"esteriorizzate\", \"esterminate\", \"esternalizzate\", \"esternate\", \"estese\", \"estimate\", \"estinte\", \"estirpate\", \"estivate\", \"estorte\", \"estradate\", \"estraniate\", \"estrapolate\", \"estratte\", \"estremizzate\", \"estrinsecate\", \"estromesse\", \"estruse\", \"estubate\", \"esulcerate\", \"esultate\", \"esumate\", \"eterificate\", \"eterizzate\", \"eternate\", \"eternizzate\", \"etichettate\", \"etossilate\", \"euforizzate\", \"europeizzate\", \"evacuate\", \"evangelizzate\", \"evase\", \"evete\", \"evidenziate\", \"evinte\", \"evirate\", \"eviscerate\", \"evitate\", \"evocate\", \"evolte\", \"evolute\", \"evulse\", \"fabbricate\", \"faccettate\", \"facilitate\", \"fagocitate\", \"falciate\", \"falcidiate\", \"fallite\", \"falsate\", \"falsificate\", \"familiarizzate\", \"fanatizzate\", \"fantasticate\", \"farcite\", \"farfugliate\", \"fasciate\", \"fascicolate\", \"fascistizzate\", \"fattacele\", \"fatte\", \"fattorizzate\", \"fatturate\", \"favellate\", \"favoreggiate\", \"favorite\", \"faxate\", \"fecondate\", \"fedecommesse\", \"federalizzate\", \"federate\", \"felicitate\", \"felpate\", \"feltrate\", \"femminilizzate\", \"fendute\", \"ferite\", \"fermate\", \"fermentate\", \"ferrate\", \"fertilizzate\", \"fesse\", \"fessurate\", \"festeggiate\", \"festonate\", \"feudalizzate\", \"fiaccate\", \"fiammeggiate\", \"fiancheggiate\", \"ficcate\", \"fidanzate\", \"fidate\", \"fidecommesse\", \"fidelizzate\", \"figliate\", \"figurate\", \"filate\", \"filettate\", \"filmate\", \"filosofate\", \"filtrate\", \"finalizzate\", \"finanziate\", \"finitale\", \"finite\", \"finlandizzate\", \"fintate\", \"finte\", \"fiocinate\", \"fiondate\", \"fiorettate\", \"firmate\", \"fiscalizzate\", \"fischiate\", \"fischiettate\", \"fissate\", \"fissionate\", \"fitte\", \"fiutate\", \"flagellate\", \"flaggate\", \"flambate\", \"flangiate\", \"flemmatizzate\", \"flesse\", \"flippate\", \"flottate\", \"fluidificate\", \"fluidizzate\", \"fluorizzate\", \"fluorurate\", \"focalizzate\", \"focheggiate\", \"foderate\", \"foggiate\", \"fognate\", \"folgorate\", \"follate\", \"fomentate\", \"fonate\", \"fondate\", \"foracchiate\", \"foraggiate\", \"forate\", \"forestate\", \"forfettizzate\", \"forgiate\", \"formalizzate\", \"formate\", \"formattate\", \"formilate\", \"formulate\", \"fornite\", \"fortificate\", \"forviate\", \"forwardate\", \"forzate\", \"fosfatate\", \"fosforate\", \"fosforilate\", \"fossilizzate\", \"fotocomposte\", \"fotocopiate\", \"fotografate\", \"fottute\", \"fracassate\", \"fraintese\", \"framesse\", \"frammentate\", \"frammesse\", \"frammezzate\", \"frammischiate\", \"franceseggiate\", \"francesizzate\", \"frangiate\", \"frante\", \"frantumate\", \"frappate\", \"frapposte\", \"fraseggiate\", \"frastagliate\", \"frastornate\", \"fratturate\", \"frazionate\", \"freddate\", \"fregate\", \"fregiate\", \"frenate\", \"frequentate\", \"fresate\", \"frettate\", \"friendzonate\", \"fritte\", \"frizionate\", \"frodate\", \"frollate\", \"fronteggiate\", \"frugate\", \"fruite\", \"frullate\", \"frusciate\", \"frustate\", \"frustrate\", \"fruttate\", \"fucilate\", \"fucinate\", \"fugate\", \"fuggite\", \"fulminate\", \"fumate\", \"fumigate\", \"funestate\", \"funte\", \"funzionate\", \"fuoriuscite\", \"fuorviate\", \"fuse\", \"fustellate\", \"fustigate\", \"gabbate\", \"gabellate\", \"gallate\", \"gallicizzate\", \"gallonate\", \"galvanizzate\", \"gambizzate\", \"garantite\", \"garnettate\", \"garrotate\", \"garzate\", \"gasate\", \"gassate\", \"gassificate\", \"gazate\", \"gelatinizzate\", \"gelate\", \"gelificate\", \"gemellate\", \"gemicate\", \"geminate\", \"generalizzate\", \"generate\", \"gentrificate\", \"genuflesse\", \"geometrizzate\", \"georeferenziate\", \"gerarchizzate\", \"germanizzate\", \"gestite\", \"gettate\", \"gettonate\", \"ghermite\", \"ghettizzate\", \"ghigliottinate\", \"ghindate\", \"gibollate\", \"gingillate\", \"ginnate\", \"giocate\", \"gioite\", \"gionglate\", \"giovaneggiate\", \"girandolate\", \"girate\", \"giudicate\", \"giulebbate\", \"giuntate\", \"giunte\", \"giuracchiate\", \"giurate\", \"giustapposte\", \"giustificate\", \"giustiziate\", \"glamourizzate\", \"glassate\", \"glissate\", \"globalizzate\", \"gloriate\", \"glorificate\", \"glossate\", \"godronate\", \"godute\", \"goffrate\", \"gommate\", \"gonfiate\", \"googlate\", \"gottate\", \"governate\", \"gradinate\", \"gradite\", \"gradualizzate\", \"graduate\", \"graffate\", \"graffiate\", \"graffite\", \"graficate\", \"grafitate\", \"gramolate\", \"granagliate\", \"grandinate\", \"granellate\", \"granite\", \"granulate\", \"graticciate\", \"graticolate\", \"gratificate\", \"gratinate\", \"grattate\", \"grattugiate\", \"gravate\", \"graziate\", \"grecheggiate\", \"grecizzate\", \"gremite\", \"gridate\", \"griffate\", \"grigliate\", \"grippate\", \"groccate\", \"grondate\", \"grugate\", \"grugnite\", \"guadagnate\", \"gualcite\", \"guardate\", \"guarite\", \"guarnite\", \"guastate\", \"guatate\", \"guerreggiate\", \"gufate\", \"guidate\", \"gustate\", \"hackerate\", \"handicappate\", \"ibridate\", \"idealizzate\", \"ideate\", \"identificate\", \"ideologizzate\", \"idolatrate\", \"idoleggiate\", \"idratate\", \"idrogenate\", \"idrolizzate\", \"iettate\", \"igienizzate\", \"ignifugate\", \"ignorate\", \"illanguidite\", \"illeggiadrite\", \"illividite\", \"illuminate\", \"illuse\", \"illustrate\", \"imbacuccate\", \"imbaldanzite\", \"imballate\", \"imbalsamate\", \"imbambolate\", \"imbandierate\", \"imbandite\", \"imbarbarite\", \"imbarcate\", \"imbarilate\", \"imbastardite\", \"imbastite\", \"imbattute\", \"imbavagliate\", \"imbeccate\", \"imbellettate\", \"imbellite\", \"imbestialite\", \"imbestiate\", \"imbevute\", \"imbiaccate\", \"imbiancate\", \"imbianchite\", \"imbibite\", \"imbiettate\", \"imbiondite\", \"imbizzarrite\", \"imboccate\", \"imbonite\", \"imborghesite\", \"imboscate\", \"imboschite\", \"imbottate\", \"imbottigliate\", \"imbottite\", \"imbozzimate\", \"imbracate\", \"imbracciate\", \"imbragate\", \"imbrancate\", \"imbrattate\", \"imbrecciate\", \"imbrigliate\", \"imbrillantinate\", \"imbroccate\", \"imbrodate\", \"imbrogliate\", \"imbronciate\", \"imbruttite\", \"imbucate\", \"imbudellate\", \"imbullettate\", \"imbullonate\", \"imburrate\", \"imbussolate\", \"imbustate\", \"imbutite\", \"imitate\", \"immagazzinate\", \"immaginate\", \"immalinconite\", \"immatricolate\", \"immedesimate\", \"immerse\", \"immesse\", \"immischiate\", \"immiserite\", \"immobilizzate\", \"immolate\", \"immortalate\", \"immunizzate\", \"immusonite\", \"impaccate\", \"impacchettate\", \"impacciate\", \"impadronite\", \"impaginate\", \"impagliate\", \"impalate\", \"impalcate\", \"impallate\", \"impallinate\", \"impalmate\", \"impaludate\", \"impanate\", \"impaniate\", \"impannate\", \"impantanate\", \"impaperate\", \"impapocchiate\", \"impappinate\", \"imparentate\", \"imparruccate\", \"impartite\", \"impastate\", \"impasticcate\", \"impasticciate\", \"impastocchiate\", \"impastoiate\", \"impataccate\", \"impattate\", \"impaurite\", \"impavesate\", \"impeciate\", \"impedicate\", \"impedite\", \"impegnate\", \"impegolate\", \"impelagate\", \"impellicciate\", \"impennacchiate\", \"impennate\", \"impensierite\", \"impepate\", \"imperlate\", \"impermalite\", \"impermeabilizzate\", \"imperniate\", \"impersonate\", \"impersonificate\", \"impestate\", \"impetrate\", \"impiallacciate\", \"impiantate\", \"impiastrate\", \"impiastricciate\", \"impiccate\", \"impicciate\", \"impicciolite\", \"impiccolite\", \"impidocchiate\", \"impiegate\", \"impietosite\", \"impietrite\", \"impigliate\", \"impigrite\", \"impilate\", \"impillaccherate\", \"impinguate\", \"impinte\", \"impinzate\", \"impiombate\", \"impipate\", \"impiumate\", \"implementate\", \"implicate\", \"implorate\", \"impollinate\", \"impolpate\", \"impoltronite\", \"impolverate\", \"impomatate\", \"imporcate\", \"imporporate\", \"importate\", \"importunate\", \"impossessate\", \"impossibilitate\", \"impostate\", \"imposte\", \"impratichite\", \"impregnate\", \"imprese\", \"impressionate\", \"impresse\", \"imprestate\", \"impreziosite\", \"imprigionate\", \"impromesse\", \"improntate\", \"improsciuttite\", \"impugnate\", \"impuntite\", \"impunturate\", \"impupate\", \"imputate\", \"impuzzolentite\", \"inabilitate\", \"inabissate\", \"inacerbite\", \"inacetite\", \"inacidite\", \"inacutite\", \"inaffiate\", \"inalate\", \"inalberate\", \"inalveate\", \"inalzate\", \"inamidate\", \"inanellate\", \"inarcate\", \"inargentate\", \"inaridite\", \"inasprite\", \"inastate\", \"inattivate\", \"inaugurate\", \"incacchiate\", \"incalcinate\", \"incalorite\", \"incalzate\", \"incamerate\", \"incamiciate\", \"incamminate\", \"incanaglite\", \"incanalate\", \"incannate\", \"incannucciate\", \"incaponite\", \"incappottate\", \"incappucciate\", \"incaprettate\", \"incapricciate\", \"incapsulate\", \"incarcerate\", \"incardinate\", \"incaricate\", \"incarnate\", \"incarrozzate\", \"incartate\", \"incartocciate\", \"incartonate\", \"incasellate\", \"incasinate\", \"incassate\", \"incastellate\", \"incastonate\", \"incastrate\", \"incatenate\", \"incatramate\", \"incattivite\", \"incavate\", \"incavigliate\", \"incavolate\", \"incazzate\", \"incellofanate\", \"incendiate\", \"incenerite\", \"incensate\", \"incentivate\", \"incentrate\", \"inceppate\", \"incerate\", \"incernierate\", \"incerottate\", \"incese\", \"incettate\", \"inchiappettate\", \"inchiavardate\", \"inchieste\", \"inchinate\", \"inchiodate\", \"inchiostrate\", \"incipriate\", \"incise\", \"incistate\", \"incitate\", \"inciuccate\", \"incivilite\", \"inclinate\", \"incluse\", \"incoccate\", \"incocciate\", \"incoiate\", \"incollate\", \"incolonnate\", \"incolpate\", \"incominciate\", \"incomodate\", \"incontrate\", \"incoraggiate\", \"incordate\", \"incornate\", \"incorniciate\", \"incoronate\", \"incorporate\", \"incotte\", \"incravattate\", \"incrementate\", \"increspate\", \"incretinite\", \"incriminate\", \"incrinate\", \"incrociate\", \"incrostate\", \"incrudelite\", \"incrudite\", \"incruscate\", \"incubate\", \"inculate\", \"inculcate\", \"incuneate\", \"incuoiate\", \"incuorate\", \"incupite\", \"incuriosite\", \"incurvate\", \"incusse\", \"indagate\", \"indebitate\", \"indebolite\", \"indemaniate\", \"indennizzate\", \"indette\", \"indicate\", \"indicizzate\", \"indignate\", \"indirette\", \"indirizzate\", \"indispettite\", \"indisposte\", \"individualizzate\", \"individuate\", \"indolenzite\", \"indorate\", \"indossate\", \"indotte\", \"indottome\", \"indottrinate\", \"indovinate\", \"indugiate\", \"indulte\", \"indurate\", \"indurite\", \"industrializzate\", \"industriate\", \"inebetite\", \"inebriate\", \"inerite\", \"inerpicate\", \"infagottate\", \"infamate\", \"infangate\", \"infarcite\", \"infarinate\", \"infastidite\", \"infatuate\", \"infeltrite\", \"inferite\", \"inferocite\", \"inferte\", \"infervorate\", \"infestate\", \"infettate\", \"infeudate\", \"infiacchite\", \"infialate\", \"infialettate\", \"infiammate\", \"infiascate\", \"infibulate\", \"inficiate\", \"infilate\", \"infiltrate\", \"infilzate\", \"infingardite\", \"infinocchiate\", \"infinte\", \"infioccate\", \"infiocchettate\", \"infiochite\", \"infiorate\", \"infirmate\", \"infischiate\", \"infisse\", \"infittite\", \"inflazionate\", \"inflesse\", \"inflitte\", \"influenzate\", \"infocate\", \"infoderate\", \"infognate\", \"infoibate\", \"infoltite\", \"inforcate\", \"informatizzate\", \"informate\", \"informicolate\", \"informicolite\", \"infornaciate\", \"infornate\", \"infortunate\", \"infoscate\", \"infossate\", \"infradiciate\", \"inframesse\", \"inframezzate\", \"inframmesse\", \"inframmezzate\", \"infrancesate\", \"infrapposte\", \"infrascate\", \"infrattate\", \"infreddate\", \"infronzolate\", \"infuocate\", \"infurbite\", \"infuriate\", \"ingabbiate\", \"ingaggiate\", \"ingagliardite\", \"ingannate\", \"ingarbugliate\", \"ingavonate\", \"ingegnate\", \"ingegnerizzate\", \"ingelosite\", \"ingemmate\", \"ingenerate\", \"ingentilite\", \"ingerite\", \"ingessate\", \"inghiaiate\", \"inghiottite\", \"inghirlandate\", \"ingiallite\", \"ingigantite\", \"inginocchiate\", \"ingioiellate\", \"ingiunte\", \"ingiuriate\", \"inglesizzate\", \"inglobate\", \"ingoffite\", \"ingoiate\", \"ingolfate\", \"ingollate\", \"ingolosite\", \"ingombrate\", \"ingommate\", \"ingorgate\", \"ingozzate\", \"ingranate\", \"ingrandite\", \"ingrassate\", \"ingraticciate\", \"ingraticolate\", \"ingravidate\", \"ingraziate\", \"ingraziosite\", \"ingrigite\", \"ingrommate\", \"ingrossate\", \"ingrullite\", \"inguaiate\", \"inguainate\", \"ingualdrappate\", \"inguantate\", \"ingurgitate\", \"inibite\", \"iniettate\", \"inimicate\", \"inizializzate\", \"iniziate\", \"inmillate\", \"innacquate\", \"innaffiate\", \"innalzate\", \"innamorate\", \"innastate\", \"innervate\", \"innervosite\", \"innescate\", \"innestate\", \"innevate\", \"innocentate\", \"innocuizzate\", \"innovate\", \"inoculate\", \"inoltrate\", \"inondate\", \"inorgoglite\", \"inorpellate\", \"inorridite\", \"inquadrate\", \"inquietate\", \"inquisite\", \"insabbiate\", \"insacchettate\", \"insalate\", \"insaldate\", \"insalivate\", \"insanguinate\", \"insaponate\", \"insaporite\", \"inscatolate\", \"inscenate\", \"inscritte\", \"insecchite\", \"insediate\", \"insegnate\", \"inseguite\", \"insellate\", \"inselvatichite\", \"inserite\", \"insidiate\", \"insignite\", \"insilate\", \"insinuate\", \"insolentite\", \"insonnolite\", \"insonorizzate\", \"insordite\", \"insospettite\", \"insozzate\", \"inspessite\", \"inspirate\", \"installate\", \"instaurate\", \"insterilite\", \"instillate\", \"instituite\", \"instradate\", \"insudiciate\", \"insufflate\", \"insultate\", \"insuperbite\", \"intabaccate\", \"intabarrate\", \"intaccate\", \"intagliate\", \"intarsiate\", \"intasate\", \"intascate\", \"intavolate\", \"integrate\", \"intelaiate\", \"intelate\", \"intellettualizzate\", \"intenebrate\", \"intenerite\", \"intensificate\", \"intentate\", \"intepidite\", \"intercalate\", \"intercambiate\", \"intercettate\", \"intercise\", \"intercluse\", \"intercollegate\", \"interconnesse\", \"interconvertite\", \"interdette\", \"interessate\", \"interfacciate\", \"interfogliate\", \"interfoliate\", \"interiorizzate\", \"interlacciate\", \"interlineate\", \"intermesse\", \"intermezzate\", \"internalizzate\", \"internate\", \"internazionalizzate\", \"interpellate\", \"interpenetrate\", \"interpolate\", \"interposte\", \"interpretate\", \"interpunte\", \"interrate\", \"interrogate\", \"interrotte\", \"intersecate\", \"intervallate\", \"intervistate\", \"intese\", \"intessute\", \"intestardite\", \"intestate\", \"intiepidite\", \"intimate\", \"intimidite\", \"intimorite\", \"intinte\", \"intirizzite\", \"intitolate\", \"intonacate\", \"intonate\", \"intontite\", \"intorbidate\", \"intorbidite\", \"intorpidite\", \"intortate\", \"intossicate\", \"intralciate\", \"intramesse\", \"intramezzate\", \"intrappolate\", \"intraprese\", \"intrattenute\", \"intravedute\", \"intraviste\", \"intravvedute\", \"intravviste\", \"intrecciate\", \"intricate\", \"intrigate\", \"intrinsecate\", \"intrippate\", \"intrise\", \"introdotte\", \"introflesse\", \"introiettate\", \"introitate\", \"intromesse\", \"intronate\", \"intronizzate\", \"intrudute\", \"intrufolate\", \"intrugliate\", \"intruppate\", \"intruse\", \"intubate\", \"intubettate\", \"intuite\", \"inumate\", \"inumidite\", \"inurbate\", \"inutilizzate\", \"invaghite\", \"invaginate\", \"invalidate\", \"invasate\", \"invase\", \"invelenite\", \"inventariate\", \"inventate\", \"invenute\", \"inverdite\", \"invergate\", \"inverniciate\", \"investigate\", \"investite\", \"invetriate\", \"inviate\", \"invidiate\", \"invigorite\", \"inviluppate\", \"invischiate\", \"invitate\", \"invocate\", \"invogliate\", \"involate\", \"involgarite\", \"involtate\", \"involte\", \"inzaccherate\", \"inzeppate\", \"inzigate\", \"inzolfate\", \"inzuccate\", \"inzuccherate\", \"inzuppate\", \"iodurate\", \"ionizzate\", \"ipertrofizzate\", \"ipnotizzate\", \"ipostatizzate\", \"ipotecate\", \"ipotizzate\", \"iridate\", \"irradiate\", \"irraggiate\", \"irreggimentate\", \"irretite\", \"irrigate\", \"irrigidite\", \"irrise\", \"irritate\", \"irrobustite\", \"irrogate\", \"irrorate\", \"irrugginite\", \"irruvidite\", \"ischeletrite\", \"iscritte\", \"islamizzate\", \"isolate\", \"isomerizzate\", \"ispanizzate\", \"ispessite\", \"ispezionate\", \"ispirate\", \"issate\", \"istallate\", \"istanziate\", \"istaurate\", \"isterilite\", \"istigate\", \"istillate\", \"istituite\", \"istituzionalizzate\", \"istoriate\", \"istradate\", \"istruite\", \"istupidite\", \"italianeggiate\", \"italianizzate\", \"iterate\", \"iudicate\", \"killerate\", \"labbreggiate\", \"labializzate\", \"laccate\", \"lacerate\", \"laconizzate\", \"lacrimate\", \"ladroneggiate\", \"lagnate\", \"lagrimate\", \"laicizzate\", \"lambiccate\", \"lambite\", \"lamentate\", \"laminate\", \"lanciate\", \"lapidate\", \"lappate\", \"lardate\", \"lardellate\", \"largite\", \"larvate\", \"lascate\", \"lasciate\", \"lastricate\", \"latinizzate\", \"laudate\", \"laureate\", \"lavate\", \"lavorate\", \"leccate\", \"legalizzate\", \"legate\", \"leggicchiate\", \"leggiucchiate\", \"legittimate\", \"legittimizzate\", \"legnate\", \"lemmatizzate\", \"lenite\", \"lesinate\", \"lesionate\", \"lese\", \"lessate\", \"lette\", \"levate\", \"levigate\", \"liberalizzate\", \"liberate\", \"licenziate\", \"lievitate\", \"liftate\", \"lignificate\", \"limate\", \"limitate\", \"linciate\", \"linearizzate\", \"lineate\", \"linkate\", \"liofilizzate\", \"liquefatte\", \"liquidate\", \"lisate\", \"lisciate\", \"lisciviate\", \"listate\", \"litografate\", \"livellate\", \"lizzate\", \"lobotomizzate\", \"localizzate\", \"locate\", \"lodate\", \"logorate\", \"lordate\", \"lottate\", \"lottizzate\", \"lubrificate\", \"lucchettate\", \"lucidate\", \"lucrate\", \"lumeggiate\", \"luppolizzate\", \"lusingate\", \"lussate\", \"lustrate\", \"macadamizzate\", \"macchiate\", \"macchinate\", \"macellate\", \"macerate\", \"maciullate\", \"maggesate\", \"maggiorate\", \"magnate\", \"magnetizzate\", \"magnificate\", \"maiolicate\", \"maledette\", \"malfatte\", \"malignate\", \"malmenate\", \"malmesse\", \"maltate\", \"maltrattate\", \"malvedute\", \"malversate\", \"malviste\", \"malvolute\", \"mandate\", \"mandrinate\", \"manducate\", \"maneggiate\", \"manganate\", \"manganellate\", \"mangiate\", \"mangiucchiate\", \"manifatturate\", \"manifestate\", \"manimesse\", \"manipolate\", \"manlevate\", \"manomesse\", \"manoscritte\", \"manovrate\", \"mansuefatte\", \"mantecate\", \"mantenutase\", \"mantenute\", \"manualizzate\", \"manutenute\", \"mappate\", \"marcate\", \"marchiate\", \"marcite\", \"marezzate\", \"marginalizzate\", \"marginate\", \"margottate\", \"marimesse\", \"marinate\", \"maritate\", \"marmorizzate\", \"marnate\", \"marocchinate\", \"martellate\", \"martellinate\", \"martirizzate\", \"martoriate\", \"mascherate\", \"maschiate\", \"maschiettate\", \"mascolinizzate\", \"massacrate\", \"massaggiate\", \"massellate\", \"massicciate\", \"massificate\", \"massimate\", \"massimizzate\", \"mastectomizzate\", \"masterizzate\", \"masticate\", \"masturbate\", \"matematizzate\", \"materializzate\", \"matricolate\", \"mattonate\", \"maturate\", \"mazziate\", \"mazzolate\", \"meccanizzate\", \"medagliate\", \"mediate\", \"medicalizzate\", \"medicate\", \"meditate\", \"membrate\", \"memorizzate\", \"menate\", \"mendicate\", \"menomate\", \"mentovate\", \"menzionate\", \"meravigliate\", \"mercanteggiate\", \"mercerizzate\", \"mercificate\", \"meriate\", \"meridionalizzate\", \"meritate\", \"merlate\", \"merlettate\", \"merse\", \"mesciate\", \"mesciute\", \"mescolate\", \"mescute\", \"mesmerizzate\", \"messaggiate\", \"messe\", \"messoce\", \"mestate\", \"mesticate\", \"mestruate\", \"metabolizzate\", \"metaforeggiate\", \"metaforizzate\", \"metallizzate\", \"metamorfizzate\", \"metamorfosate\", \"metanizzate\", \"metilate\", \"metodizzate\", \"microfilmate\", \"microfonate\", \"microminiaturizzate\", \"micronizzate\", \"mietute\", \"migliorate\", \"militarizzate\", \"millantate\", \"millimetrate\", \"mimate\", \"mimeografate\", \"mimetizzate\", \"minacciate\", \"minate\", \"minchionate\", \"mineralizzate\", \"miniate\", \"miniaturizzate\", \"minimizzate\", \"minuite\", \"minuzzate\", \"miracolate\", \"miscelate\", \"mischiate\", \"misconosciute\", \"missate\", \"mistificate\", \"misturate\", \"misurate\", \"miticizzate\", \"mitigate\", \"mitizzate\", \"mitragliate\", \"mitrate\", \"mixate\", \"mobiliate\", \"mobilitate\", \"mobilizzate\", \"modanate\", \"modellate\", \"modellizzate\", \"moderate\", \"modernizzate\", \"modificate\", \"modulate\", \"molate\", \"molestate\", \"mollate\", \"molleggiate\", \"moltiplicate\", \"monacate\", \"mondate\", \"mondializzate\", \"monetarizzate\", \"monetate\", \"monetizzate\", \"monitorate\", \"monitorizzate\", \"monocromatizzate\", \"monopolizzate\", \"monottongate\", \"montate\", \"monumentalizzate\", \"mordenzate\", \"mordicchiate\", \"mormorate\", \"morphate\", \"morsicate\", \"morsicchiate\", \"morse\", \"mortasate\", \"mortificate\", \"mosse\", \"mostrate\", \"motivate\", \"motorizzate\", \"motteggiate\", \"movimentate\", \"mozzate\", \"mugolate\", \"mulcite\", \"multate\", \"multiplexate\", \"mummificate\", \"municipalizzate\", \"munite\", \"munte\", \"murate\", \"musate\", \"musicate\", \"mussate\", \"mutate\", \"mutilate\", \"mutizzate\", \"mutuate\", \"nappate\", \"narcotizzate\", \"narrativizzate\", \"narrate\", \"nasalizzate\", \"nascose\", \"nascoste\", \"nastrate\", \"naturaleggiate\", \"naturalizzate\", \"nauseate\", \"naverate\", \"navicate\", \"navigate\", \"nazificate\", \"nazionalizzate\", \"nebulizzate\", \"necessitate\", \"necrosate\", \"necrotizzate\", \"negativizzate\", \"negate\", \"neglette\", \"negoziate\", \"negreggiate\", \"neologizzate\", \"nerbate\", \"nericate\", \"nettate\", \"neutralizzate\", \"nevate\", \"nevicate\", \"nevischiate\", \"nevrotizzate\", \"nichelate\", \"niellate\", \"ninfeggiate\", \"ninnate\", \"ninnolate\", \"nitratate\", \"nitrificate\", \"nobilitate\", \"noiate\", \"noleggiate\", \"nomate\", \"nominalizzate\", \"nominate\", \"normalizzate\", \"normate\", \"notate\", \"notificate\", \"notiziate\", \"notricate\", \"noverate\", \"nuclearizzate\", \"nudricate\", \"nullificate\", \"numerate\", \"numerizzate\", \"nuotate\", \"nutrite\", \"obbiettate\", \"obbliate\", \"obbligate\", \"oberate\", \"obiettate\", \"obiettivate\", \"obiettivizzate\", \"obiurgate\", \"obliate\", \"obliterate\", \"obnubilate\", \"occasionate\", \"occhieggiate\", \"occidentalizzate\", \"occise\", \"occluse\", \"occultate\", \"occupate\", \"ocheggiate\", \"odiate\", \"odorate\", \"odorizzate\", \"offerite\", \"offerte\", \"offese\", \"officiate\", \"offiziate\", \"offuscate\", \"ofiziate\", \"oggettivate\", \"oggettivizzate\", \"oggettualizzate\", \"oliate\", \"olite\", \"olografate\", \"oltraggiate\", \"oltrapassate\", \"oltrepassate\", \"omaggiate\", \"ombrate\", \"ombreggiate\", \"omesse\", \"omogeneizzate\", \"omogenizzate\", \"omologate\", \"ondate\", \"ondulate\", \"onestate\", \"onnubilate\", \"onorate\", \"opacate\", \"opacizzate\", \"operate\", \"opinate\", \"oppiate\", \"oppignorate\", \"oppilate\", \"opposte\", \"oppresse\", \"oppugnate\", \"oprate\", \"opsonizzate\", \"optate\", \"opzionate\", \"orbitate\", \"orchestrate\", \"ordinate\", \"ordite\", \"orecchiate\", \"organate\", \"organicate\", \"organizzate\", \"orgasmate\", \"orientalizzate\", \"orientate\", \"originate\", \"origliate\", \"orizzontate\", \"orlate\", \"orlettate\", \"ormate\", \"ormeggiate\", \"ornate\", \"orpellate\", \"orrate\", \"orripilate\", \"ortogonalizzate\", \"osannate\", \"osate\", \"osculate\", \"oscurate\", \"ospedalizzate\", \"ospitate\", \"ossedute\", \"ossequiate\", \"osservate\", \"ossessionate\", \"ossidate\", \"ossificate\", \"ossitonizzate\", \"ostacolate\", \"osteggiate\", \"ostentate\", \"ostinate\", \"ostracizzate\", \"ostruite\", \"ottemperate\", \"ottenebrate\", \"ottenute\", \"ottimalizzate\", \"ottimate\", \"ottimizzate\", \"ottonate\", \"ottriate\", \"ottuplicate\", \"otturate\", \"ottuse\", \"ottusse\", \"ovalizzate\", \"ovariectomizzate\", \"ovattate\", \"overcloccate\", \"ovrate\", \"ovviate\", \"ozieggiate\", \"ozonizzate\", \"pacate\", \"pacciamate\", \"pacificate\", \"padroneggiate\", \"paganizzate\", \"pagate\", \"paginate\", \"palafittate\", \"palatalizzate\", \"palate\", \"palesate\", \"palettate\", \"palettizzate\", \"palificate\", \"palleggiate\", \"pallettizzate\", \"palpate\", \"palpeggiate\", \"panate\", \"panneggiate\", \"panoramicate\", \"pappate\", \"paracadutate\", \"parafate\", \"paraffinate\", \"parafrasate\", \"paragonate\", \"paragrafate\", \"paralizzate\", \"parallelizzate\", \"parametrate\", \"parametrizzate\", \"parassitate\", \"parate\", \"parcate\", \"parcellizzate\", \"parcheggiate\", \"pareggiate\", \"parificate\", \"parkerizzate\", \"parlate\", \"parlucchiate\", \"parodiate\", \"partecipate\", \"particolareggiate\", \"particolarizzate\", \"partizionate\", \"partorite\", \"parzializzate\", \"pasciute\", \"pascolate\", \"passate\", \"passeggiate\", \"passionate\", \"passivate\", \"pasticciate\", \"pastorizzate\", \"pasturate\", \"patinate\", \"patite\", \"patrocinate\", \"patteggiate\", \"pattugliate\", \"pattuite\", \"paventate\", \"pavesate\", \"pavimentate\", \"pavoneggiate\", \"pazziate\", \"pedinate\", \"pedonalizzate\", \"peggiorate\", \"pelate\", \"pellettizzate\", \"penalizzate\", \"penetrate\", \"pennellate\", \"pensate\", \"pensionate\", \"pentite\", \"pepate\", \"peptonizzate\", \"peragrate\", \"percentualizzate\", \"percepite\", \"percolate\", \"percorse\", \"percosse\", \"perdonate\", \"perdotte\", \"perdute\", \"perequate\", \"perfatte\", \"perfezionate\", \"perforate\", \"performate\", \"perite\", \"periziate\", \"perlustrate\", \"permeate\", \"permesse\", \"perorate\", \"perpetrate\", \"perpetuate\", \"perplimute\", \"perquisite\", \"perscrutate\", \"perseguitate\", \"perseguite\", \"perse\", \"personalizzate\", \"personificate\", \"persuase\", \"perturbate\", \"pervase\", \"pervertite\", \"pesate\", \"pescate\", \"pestate\", \"petrarcheggiate\", \"pettegolate\", \"pettinate\", \"piagate\", \"piaggiate\", \"piallate\", \"pianeggiate\", \"pianificate\", \"piantate\", \"piantatale\", \"piantate\", \"piante\", \"piantonate\", \"piantumate\", \"piastrellate\", \"piatite\", \"piazzate\", \"picchettate\", \"picchiate\", \"picchierellate\", \"picchiettate\", \"picconate\", \"piegate\", \"pieghettate\", \"pietrificate\", \"pigiate\", \"pigliate\", \"pigmentate\", \"pignorate\", \"pigolate\", \"pilotate\", \"pimentate\", \"pinte\", \"pinzate\", \"piombate\", \"piovigginate\", \"piovute\", \"pipate\", \"pippate\", \"piratate\", \"pirogenate\", \"pisciate\", \"pitoccate\", \"pittate\", \"pitturate\", \"pizzicate\", \"pizzicottate\", \"placate\", \"placcate\", \"plagiate\", \"plasmate\", \"plasticate\", \"plastificate\", \"platinate\", \"plissettate\", \"pluralizzate\", \"poetate\", \"poeticizzate\", \"poggiate\", \"polarizzate\", \"poligrafate\", \"polimerizzate\", \"politicizzate\", \"polverizzate\", \"pomiciate\", \"pompate\", \"ponderate\", \"ponzate\", \"popolarizzate\", \"popolate\", \"poppate\", \"porcellanate\", \"porfirizzate\", \"portate\", \"portese\", \"porte\", \"porzionate\", \"posate\", \"posdatate\", \"positivizzate\", \"posizionate\", \"posposte\", \"possedute\", \"postate\", \"postdatate\", \"posteggiate\", \"posticipate\", \"postillate\", \"poste\", \"postsincronizzate\", \"postulate\", \"potabilizzate\", \"potate\", \"potenziate\", \"potute\", \"pralinate\", \"praticate\", \"preaccennate\", \"preannunciate\", \"preannunziate\", \"preavvertite\", \"preavvisate\", \"precaricate\", \"precedute\", \"precettate\", \"precinte\", \"precisate\", \"precluse\", \"precompilate\", \"precompresse\", \"preconfezionate\", \"preconizzate\", \"preconosciute\", \"precorse\", \"precostituite\", \"predate\", \"predefinite\", \"predestinate\", \"predeterminate\", \"predette\", \"predicate\", \"predigerite\", \"predilette\", \"predisposte\", \"preelette\", \"preesistute\", \"prefabbricate\", \"prefate\", \"prefatte\", \"prefazionate\", \"preferite\", \"prefigurate\", \"prefinanziate\", \"prefissate\", \"prefisse\", \"preformate\", \"pregate\", \"pregiate\", \"pregiudicate\", \"pregustate\", \"preimpregnate\", \"prelevate\", \"premeditate\", \"premescolate\", \"premesse\", \"premiate\", \"premonite\", \"premunite\", \"premurate\", \"premute\", \"prenotate\", \"preoccupate\", \"preordinate\", \"preparate\", \"prepensionate\", \"prepigmentate\", \"preposte\", \"preprogrammate\", \"preraffreddate\", \"prerefrigerate\", \"preregistrate\", \"preregolate\", \"preriscaldate\", \"prese\", \"presagite\", \"presapute\", \"presasele\", \"prescelte\", \"prescritte\", \"presedute\", \"presegnalate\", \"preselezionate\", \"presentate\", \"presentite\", \"preservate\", \"presidiate\", \"presiedute\", \"prese\", \"pressate\", \"presse\", \"pressurizzate\", \"prestabilite\", \"prestampate\", \"prestate\", \"prestigiate\", \"presunte\", \"presupposte\", \"pretermesse\", \"pretese\", \"pretrattate\", \"prevaricate\", \"prevedute\", \"prevendute\", \"preventivate\", \"prevenute\", \"previste\", \"prezzate\", \"prezzolate\", \"principiate\", \"privatizzate\", \"private\", \"privilegiate\", \"problematizzate\", \"procacciate\", \"processate\", \"proclamate\", \"procrastinate\", \"procreate\", \"procurate\", \"prodigate\", \"prodotte\", \"profanate\", \"proferite\", \"professate\", \"professionalizzate\", \"profetate\", \"profetizzate\", \"profferite\", \"profilate\", \"profondate\", \"profumate\", \"profuse\", \"progettate\", \"prognosticate\", \"programmate\", \"proibite\", \"proiettate\", \"proletarizzate\", \"prolungate\", \"promanate\", \"promesse\", \"promosse\", \"promozionate\", \"promulgate\", \"pronosticate\", \"pronunciate\", \"pronunziate\", \"propagandate\", \"propagate\", \"propagginate\", \"propalate\", \"propinate\", \"propiziate\", \"proporzionate\", \"proposte\", \"propugnate\", \"propulse\", \"prorogate\", \"prosciolte\", \"prosciugate\", \"proscritte\", \"proseguite\", \"prospettate\", \"prosternate\", \"prostese\", \"prostituite\", \"prostrate\", \"prosunte\", \"protese\", \"protestate\", \"protette\", \"protocollate\", \"protonate\", \"protratte\", \"protruse\", \"provate\", \"provedute\", \"provincializzate\", \"proviste\", \"provocate\", \"provvedute\", \"provviste\", \"psicanalizzate\", \"psichiatrizzate\", \"psicoanalizzate\", \"psicologizzate\", \"pubblicate\", \"pubblicizzate\", \"puddellate\", \"pugnalate\", \"pulite\", \"pungolate\", \"punite\", \"puntate\", \"punteggiate\", \"puntellate\", \"punte\", \"puntualizzate\", \"punzecchiate\", \"punzonate\", \"purgate\", \"purificate\", \"putite\", \"putrefatte\", \"putrite\", \"quadrate\", \"quadrettate\", \"quadriennalizzate\", \"quadruplicate\", \"qualificate\", \"quantificate\", \"quantizzate\", \"querelate\", \"questuate\", \"quetate\", \"quietanzate\", \"quietate\", \"quintessenziate\", \"quintuplicate\", \"quotate\", \"quotizzate\", \"rabberciate\", \"rabboccate\", \"rabbonite\", \"rabbuffate\", \"rabuffate\", \"raccapezzate\", \"raccapricciate\", \"raccattate\", \"raccerchiate\", \"raccese\", \"racchetate\", \"racchiuse\", \"raccolte\", \"raccolte\", \"raccomandate\", \"raccomodate\", \"raccontate\", \"raccorciate\", \"raccorcite\", \"raccordate\", \"raccostate\", \"raccozzate\", \"racemizzate\", \"racimolate\", \"radazzate\", \"raddensate\", \"raddobbate\", \"raddolcite\", \"raddoppiate\", \"raddotte\", \"raddrizzate\", \"radiate\", \"radicalizzate\", \"radioassistite\", \"radioattivate\", \"radiocomandate\", \"radiodiffuse\", \"radiografate\", \"radioguidate\", \"radiolocalizzate\", \"radiomarcate\", \"radiotelegrafate\", \"radiotrasmesse\", \"radunate\", \"raffazzonate\", \"raffermate\", \"raffigurate\", \"raffilate\", \"raffinate\", \"rafforzate\", \"raffreddate\", \"raffrenate\", \"raffrescate\", \"raffrontate\", \"raggelate\", \"raggentilite\", \"ragghiate\", \"raggirate\", \"raggiunte\", \"raggiustate\", \"raggomitolate\", \"raggranchiate\", \"raggranchite\", \"raggranellate\", \"raggrinzate\", \"raggrinzite\", \"raggrumate\", \"raggruppate\", \"raggruzzolate\", \"ragguagliate\", \"ralingate\", \"rallegrate\", \"rallentate\", \"ramate\", \"ramazzate\", \"rammagliate\", \"rammaricate\", \"rammemorate\", \"rammendate\", \"rammentate\", \"rammodernate\", \"rammollite\", \"rammorbidite\", \"rampognate\", \"randellate\", \"randomizzate\", \"rannicchiate\", \"rannuvolate\", \"ranzate\", \"rapate\", \"rapinate\", \"rapite\", \"rappacificate\", \"rappate\", \"rappattumate\", \"rappezzate\", \"rapportate\", \"rappresantate\", \"rappresentate\", \"rapprese\", \"rarefatte\", \"rasate\", \"raschiate\", \"raschiettate\", \"rasentate\", \"rase\", \"raspate\", \"rassegnate\", \"rasserenate\", \"rassettate\", \"rassicurate\", \"rassodate\", \"rassomigliate\", \"rassottigliate\", \"rassunte\", \"rastrellate\", \"rastremate\", \"rateate\", \"rateizzate\", \"ratificate\", \"ratinate\", \"rattizzate\", \"rattoppate\", \"rattorte\", \"rattrappite\", \"rattristate\", \"rattristite\", \"raunate\", \"ravvalorate\", \"ravvedute\", \"ravviate\", \"ravvicinate\", \"ravviluppate\", \"ravvisate\", \"ravviste\", \"ravvivate\", \"ravvolte\", \"ravvoltolate\", \"razionalizzate\", \"razionate\", \"razziate\", \"razzolate\", \"realizzate\", \"reassunte\", \"recapitate\", \"recate\", \"recedute\", \"recensite\", \"recepite\", \"recidivate\", \"recintate\", \"recinte\", \"reciprocate\", \"recise\", \"recitate\", \"reclamate\", \"reclamizzate\", \"reclinate\", \"recluse\", \"reclutate\", \"recuperate\", \"redarguite\", \"redatte\", \"redazzate\", \"reddute\", \"redente\", \"redistribuite\", \"redotte\", \"referenziate\", \"refertate\", \"refilate\", \"reflesse\", \"reflettute\", \"refrante\", \"refrigerate\", \"regalate\", \"regimate\", \"regimentate\", \"regionalizzate\", \"registrate\", \"regolamentate\", \"regolarizzate\", \"regolate\", \"reidratate\", \"reificate\", \"reimbarcate\", \"reimmerse\", \"reimmesse\", \"reimparate\", \"reimpastate\", \"reimpiantate\", \"reimpiegate\", \"reimportate\", \"reimpostate\", \"reincarcerate\", \"reincaricate\", \"reincarnate\", \"reincise\", \"reincontrate\", \"reindirizzate\", \"reindustrializzate\", \"reinfettate\", \"reingaggiate\", \"reinizializzate\", \"reinnestate\", \"reinoltrate\", \"reinscritte\", \"reinsediate\", \"reinserite\", \"reinstallate\", \"reinstaurate\", \"reintegrate\", \"reinterpretate\", \"reintitolate\", \"reintrodotte\", \"reinventate\", \"reinvestite\", \"reiterate\", \"relativizzate\", \"relazionate\", \"relegate\", \"remixate\", \"remunerate\", \"renderizzate\", \"reperite\", \"repertate\", \"replicate\", \"represse\", \"repulse\", \"reputate\", \"requisite\", \"rescisse\", \"resecate\", \"resettate\", \"residuate\", \"resinificate\", \"rese\", \"resolate\", \"resolte\", \"respinte\", \"respirate\", \"responsabilizzate\", \"resposte\", \"restaurate\", \"restituite\", \"resunte\", \"resuscitate\", \"reticolate\", \"retinate\", \"retribuite\", \"retrocedute\", \"retrocesse\", \"retrodatate\", \"rettificate\", \"rette\", \"reumatizzate\", \"revisionate\", \"revocate\", \"riabbassate\", \"riabbellite\", \"riabbonate\", \"riabbottonate\", \"riabbracciate\", \"riabilitate\", \"riabitate\", \"riabituate\", \"riaccadute\", \"riaccasate\", \"riaccese\", \"riaccettate\", \"riacchiappate\", \"riacciuffate\", \"riaccolte\", \"riaccomodate\", \"riaccompagnate\", \"riaccordate\", \"riaccostate\", \"riaccreditate\", \"riacquisite\", \"riacquistate\", \"riacutizzate\", \"riadattate\", \"riaddestrate\", \"riaddormentate\", \"riadoperate\", \"riaffacciate\", \"riaffermate\", \"riafferrate\", \"riaffiorate\", \"riaffittate\", \"riaffrontate\", \"riagganciate\", \"riaggiornate\", \"riaggiustate\", \"riaggravate\", \"riaggregate\", \"riagguantate\", \"rialimentate\", \"riallacciate\", \"riallargate\", \"riallineate\", \"riallocate\", \"riallungate\", \"rialzate\", \"riamate\", \"riambientate\", \"riammalate\", \"riammesse\", \"riammodernate\", \"riammogliate\", \"rianimate\", \"riannesse\", \"riannodate\", \"riannunciate\", \"riaperte\", \"riappacificate\", \"riappaltate\", \"riapparecchiate\", \"riapparite\", \"riappese\", \"riappiccicate\", \"riapplicate\", \"riapprese\", \"riapprodate\", \"riappropriate\", \"riapprovate\", \"riarmate\", \"riarrangiate\", \"riarredate\", \"riascoltate\", \"riasfaltate\", \"riassalite\", \"riassaporate\", \"riassegnate\", \"riassemblate\", \"riassestate\", \"riassettate\", \"riassicurate\", \"riassociate\", \"riassopite\", \"riassorbite\", \"riassunte\", \"riattaccate\", \"riattate\", \"riattese\", \"riattinte\", \"riattivate\", \"riattizzate\", \"riattraversate\", \"riaumentate\", \"riavute\", \"riavventate\", \"riavvertite\", \"riavviate\", \"riavvicinate\", \"riavvinte\", \"riavvisate\", \"riavvistate\", \"riavvolte\", \"riazzuffate\", \"ribaciate\", \"ribadite\", \"ribaltate\", \"ribassate\", \"ribattezzate\", \"ribattute\", \"ribellate\", \"ribenedette\", \"ribevute\", \"ributtate\", \"ricacciate\", \"ricalate\", \"ricalcate\", \"ricalcificate\", \"ricalcitrate\", \"ricalcolate\", \"ricalibrate\", \"ricamate\", \"ricambiate\", \"ricanalizzate\", \"ricandidate\", \"ricantate\", \"ricapitalizzate\", \"ricapitolate\", \"ricaricate\", \"ricategorizzate\", \"ricattate\", \"ricavate\", \"ricelebrate\", \"ricercate\", \"ricetrasmesse\", \"ricettate\", \"ricevute\", \"richiamate\", \"richieste\", \"richiuse\", \"riciclate\", \"ricinte\", \"ricircolate\", \"riclassificate\", \"ricodificate\", \"ricollegate\", \"ricollocate\", \"ricolmate\", \"ricolonizzate\", \"ricolorate\", \"ricolorite\", \"ricoltivate\", \"ricombinate\", \"ricominciate\", \"ricommesse\", \"ricomparite\", \"ricompattate\", \"ricompensate\", \"ricomperate\", \"ricompilate\", \"ricompiute\", \"ricomposte\", \"ricomprate\", \"ricompresse\", \"ricomunicate\", \"riconcedute\", \"riconcesse\", \"riconciliate\", \"ricondizionate\", \"ricondotte\", \"riconfermate\", \"riconfezionate\", \"riconfigurate\", \"riconfortate\", \"riconfuse\", \"ricongelate\", \"ricongiunte\", \"riconnesse\", \"riconosciute\", \"riconquistate\", \"riconsacrate\", \"riconsegnate\", \"riconsiderate\", \"riconsigliate\", \"riconsolate\", \"ricontate\", \"ricontattate\", \"ricontrattate\", \"ricontratte\", \"ricontrollate\", \"riconvalidate\", \"riconvenute\", \"riconvertite\", \"riconvinte\", \"riconvocate\", \"riconvogliate\", \"ricoperte\", \"ricopiate\", \"ricordate\", \"ricoricate\", \"ricorrette\", \"ricosparse\", \"ricostituite\", \"ricostrette\", \"ricostruite\", \"ricotte\", \"ricoverate\", \"ricreate\", \"ricristallizzate\", \"ricrocifisse\", \"ricucite\", \"ricuperate\", \"ricusate\", \"ridate\", \"ridecorate\", \"ridefinite\", \"ridenominate\", \"ridestate\", \"rideterminate\", \"ridette\", \"ridicolizzate\", \"ridigitate\", \"ridimensionate\", \"ridipinte\", \"ridiscese\", \"ridisciolte\", \"ridisciplinate\", \"ridiscusse\", \"ridisegnate\", \"ridisfatte\", \"ridisposte\", \"ridistese\", \"ridistinte\", \"ridistribuite\", \"ridivise\", \"ridomandate\", \"ridonate\", \"ridondate\", \"ridorate\", \"ridotate\", \"ridotte\", \"ridovute\", \"riecheggiate\", \"riedificate\", \"rieducate\", \"rielaborate\", \"rielette\", \"riemesse\", \"riempite\", \"riempiute\", \"rientrate\", \"riepilogate\", \"riequilibrate\", \"riequipaggiate\", \"riesaminate\", \"rieseguite\", \"riesercitate\", \"riesplose\", \"riesportate\", \"riesposte\", \"riespresse\", \"riespulse\", \"riestese\", \"riesumate\", \"rietichettate\", \"rievaporate\", \"rievocate\", \"rifabbricate\", \"rifasciate\", \"rifatte\", \"rifendute\", \"riferite\", \"rifermate\", \"rifermentate\", \"rifesse\", \"rificcate\", \"rifilate\", \"rifiltrate\", \"rifinanziate\", \"rifinite\", \"rifirmate\", \"rifischiate\", \"rifisse\", \"rifiutate\", \"riflesse\", \"riflettute\", \"rifocillate\", \"rifoderate\", \"rifondate\", \"riforestate\", \"riforgiate\", \"riformate\", \"riformattate\", \"riformulate\", \"rifornite\", \"rifrante\", \"rifritte\", \"rifrugate\", \"rifuggite\", \"rifugiate\", \"rifuse\", \"rigassificate\", \"rigate\", \"rigelate\", \"rigenerate\", \"rigettate\", \"righettate\", \"rigiocate\", \"rigirate\", \"rigiudicate\", \"rigiunte\", \"rigodute\", \"rigonfiate\", \"rigovernate\", \"riguadagnate\", \"riguardate\", \"rigurgitate\", \"rilanciate\", \"rilasciate\", \"rilassate\", \"rilavate\", \"rilavorate\", \"rilegate\", \"rilette\", \"rilevate\", \"rilocalizzate\", \"rimagliate\", \"rimandate\", \"rimaneggiate\", \"rimangiate\", \"rimappate\", \"rimarcate\", \"rimarchiate\", \"rimarginate\", \"rimaritate\", \"rimasticate\", \"rimate\", \"rimbacuccate\", \"rimbaldanzite\", \"rimbarcate\", \"rimbeccate\", \"rimbecillite\", \"rimbellite\", \"rimbiancate\", \"rimbiondite\", \"rimboccate\", \"rimbombate\", \"rimborsate\", \"rimboscate\", \"rimboschite\", \"rimbrottate\", \"rimediate\", \"rimembrate\", \"rimemorate\", \"rimenate\", \"rimeritate\", \"rimescolate\", \"rimesse\", \"rimestate\", \"rimilitarizzate\", \"rimirate\", \"rimischiate\", \"rimisurate\", \"rimodellate\", \"rimodernate\", \"rimodulate\", \"rimondate\", \"rimontate\", \"rimorchiate\", \"rimorse\", \"rimosse\", \"rimostrate\", \"rimotivate\", \"rimpacchettate\", \"rimpadronite\", \"rimpaginate\", \"rimpagliate\", \"rimpannucciate\", \"rimpastate\", \"rimpatriate\", \"rimpiallacciate\", \"rimpiante\", \"rimpiattate\", \"rimpiazzate\", \"rimpicciolite\", \"rimpiccolite\", \"rimpiegate\", \"rimpinguate\", \"rimpinzate\", \"rimpolpate\", \"rimpossessate\", \"rimpresse\", \"rimproverate\", \"rimuginate\", \"rimunerate\", \"rimunte\", \"rimusicate\", \"rimutate\", \"rinarrate\", \"rinascoste\", \"rincalcate\", \"rincalzate\", \"rincamminate\", \"rincantucciate\", \"rincarate\", \"rincarcerate\", \"rincarnate\", \"rincentrate\", \"rinchieste\", \"rinchiodate\", \"rinchiuse\", \"rincitrullite\", \"rincivilite\", \"rincoglionite\", \"rincollate\", \"rincominciate\", \"rincontrate\", \"rincoraggiate\", \"rincorate\", \"rincorporate\", \"rincorse\", \"rincretinite\", \"rincrudite\", \"rinculcate\", \"rincuorate\", \"rindossate\", \"rindurite\", \"rinegoziate\", \"rinfacciate\", \"rinfagottate\", \"rinfiammate\", \"rinfiancate\", \"rinfilate\", \"rinfittite\", \"rinfocolate\", \"rinfoderate\", \"rinforzate\", \"rinfrancate\", \"rinfrante\", \"rinfrescate\", \"rinfuse\", \"ringagliardite\", \"ringalluzzite\", \"ringiovanite\", \"ringiovenite\", \"ringoiate\", \"ringorgate\", \"ringraziate\", \"ringuainate\", \"rinnamorate\", \"rinnegate\", \"rinnestate\", \"rinnovate\", \"rinnovellate\", \"rinociute\", \"rinomate\", \"rinominate\", \"rinormalizzate\", \"rinquadrate\", \"rinsaccate\", \"rinsaldate\", \"rinsanguate\", \"rinselvatichite\", \"rinselvate\", \"rinserrate\", \"rintanate\", \"rintasate\", \"rintascate\", \"rintavolate\", \"rintenerite\", \"rinterrate\", \"rinterrogate\", \"rintese\", \"rintiepidite\", \"rintoccate\", \"rintonacate\", \"rintontite\", \"rintorpidite\", \"rintracciate\", \"rintrodotte\", \"rintronate\", \"rintuzzate\", \"rinunciate\", \"rinunziate\", \"rinutrite\", \"rinvangate\", \"rinvasate\", \"rinvenute\", \"rinverdite\", \"rinvestite\", \"rinviate\", \"rinvigorite\", \"rinvilite\", \"rinvitate\", \"rinvoltate\", \"rinvolte\", \"rinvoltolate\", \"rinzaffate\", \"rinzeppate\", \"riobbligate\", \"rioccupate\", \"riofferte\", \"rioffese\", \"rioperate\", \"riordinate\", \"riorganizzate\", \"riorientate\", \"riosservate\", \"riottenute\", \"riottimizzate\", \"riotturate\", \"ripagate\", \"riparametrizzate\", \"riparate\", \"ripartite\", \"ripassate\", \"ripercorse\", \"ripercosse\", \"riperdute\", \"riperse\", \"ripesate\", \"ripescate\", \"ripestate\", \"ripetute\", \"ripianate\", \"ripianificate\", \"ripiantate\", \"ripiante\", \"ripicchiate\", \"ripiegate\", \"ripigliate\", \"ripinte\", \"ripiovute\", \"ripitturate\", \"riplasmate\", \"ripolarizzate\", \"ripopolate\", \"riportate\", \"riporte\", \"riposate\", \"riposizionate\", \"ripossedute\", \"riposte\", \"ripotute\", \"ripresentate\", \"riprese\", \"riprestate\", \"ripretese\", \"riprincipiate\", \"ripristinate\", \"riprivatizzate\", \"riprodotte\", \"riprogettate\", \"riprogrammate\", \"ripromesse\", \"riproposte\", \"riprotette\", \"riprovate\", \"riprovvedute\", \"riprovviste\", \"ripubblicate\", \"ripudiate\", \"ripugnate\", \"ripulite\", \"ripuntate\", \"ripunte\", \"ripurgate\", \"riputate\", \"riquadrate\", \"riqualificate\", \"rirese\", \"rirotte\", \"risaldate\", \"risalite\", \"risaltate\", \"risalutate\", \"risanate\", \"risapute\", \"risarcite\", \"riscalate\", \"riscaldate\", \"riscattate\", \"riscelte\", \"riscese\", \"rischiarate\", \"rischiate\", \"risciacquate\", \"risciolte\", \"riscommesse\", \"riscontate\", \"riscontrate\", \"risconvolte\", \"riscoperte\", \"riscoppiate\", \"riscorse\", \"riscosse\", \"riscritte\", \"risecate\", \"risedute\", \"risegate\", \"risegnate\", \"riselciate\", \"riselezionate\", \"riseminate\", \"risentite\", \"riseppellite\", \"riserbate\", \"riservate\", \"risicate\", \"risigillate\", \"risistemate\", \"rise\", \"risoffiate\", \"risoggiunte\", \"risolate\", \"risolidificate\", \"risollevate\", \"risolte\", \"risommate\", \"risommerse\", \"risonate\", \"risorpassate\", \"risospese\", \"risospinte\", \"risottomesse\", \"risparmiate\", \"risparse\", \"rispecchiate\", \"rispedite\", \"rispente\", \"risperse\", \"rispettate\", \"rispiegate\", \"rispinte\", \"rispolverate\", \"risposate\", \"risposte\", \"rissate\", \"ristabilite\", \"ristagnate\", \"ristampate\", \"ristaurate\", \"ristese\", \"ristilizzate\", \"ristorate\", \"ristrette\", \"ristrutte\", \"ristrutturate\", \"ristuccate\", \"ristudiate\", \"risucchiate\", \"risultate\", \"risuolate\", \"risuonate\", \"risuscitate\", \"risvegliate\", \"risvolte\", \"ritagliate\", \"ritarate\", \"ritardate\", \"ritemprate\", \"ritentate\", \"ritenute\", \"riterse\", \"ritese\", \"ritinte\", \"ritirate\", \"ritoccate\", \"ritolte\", \"ritorte\", \"ritracciate\", \"ritradotte\", \"ritrascorse\", \"ritrascritte\", \"ritrasferite\", \"ritrasformate\", \"ritrasmesse\", \"ritrasposte\", \"ritrattate\", \"ritratte\", \"ritrovate\", \"ritualizzate\", \"rituffate\", \"riudite\", \"riunificate\", \"riunite\", \"riusate\", \"riutilizzate\", \"rivaccinate\", \"rivaleggiate\", \"rivalorizzate\", \"rivalse\", \"rivalutate\", \"rivangate\", \"rivedute\", \"rivelate\", \"rivendicate\", \"rivendute\", \"riverberate\", \"riverite\", \"riverniciate\", \"riversate\", \"rivestite\", \"rivettate\", \"rivinte\", \"rivisitate\", \"rivissute\", \"riviste\", \"rivitalizzate\", \"rivivificate\", \"rivoltate\", \"rivolte\", \"rivoltolate\", \"rivolute\", \"rivoluzionate\", \"rizappate\", \"rizzate\", \"robotizzate\", \"rodate\", \"rogate\", \"rollate\", \"romanizzate\", \"romanticizzate\", \"romanzate\", \"roncolate\", \"rosicate\", \"rosicchiate\", \"rose\", \"rosolate\", \"rotacizzate\", \"rotate\", \"roteate\", \"rotolate\", \"rottamate\", \"rotte\", \"rovesciate\", \"rovinate\", \"rovistate\", \"rubacchiate\", \"rubate\", \"rullate\", \"ruminate\", \"ruotate\", \"russificate\", \"ruzzolate\", \"sabbiate\", \"sabotate\", \"saccarificate\", \"saccheggiate\", \"sacralizzate\", \"sacramentate\", \"sacrificate\", \"saettate\", \"saggiate\", \"sagginate\", \"sagomate\", \"salamoiate\", \"salariate\", \"salassate\", \"salate\", \"saldate\", \"salificate\", \"salinizzate\", \"salite\", \"salmeggiate\", \"salmistrate\", \"salpate\", \"saltate\", \"salutate\", \"salvaguardate\", \"salvate\", \"sanate\", \"sancite\", \"sanforizzate\", \"sanificate\", \"sanitizzate\", \"santificate\", \"sanzionate\", \"saponificate\", \"sapute\", \"sarchiate\", \"sarchiellate\", \"sartiate\", \"satellizzate\", \"satinate\", \"satireggiate\", \"satisfatte\", \"satollate\", \"saturate\", \"saziate\", \"sbaccellate\", \"sbaciucchiate\", \"sbafate\", \"sbaffate\", \"sbalestrate\", \"sballate\", \"sballottate\", \"sballottolate\", \"sbalordite\", \"sbalzate\", \"sbancate\", \"sbandate\", \"sbandierate\", \"sbandite\", \"sbaraccate\", \"sbaragliate\", \"sbarazzate\", \"sbarbate\", \"sbarcate\", \"sbardate\", \"sbarrate\", \"sbassate\", \"sbastite\", \"sbatacchiate\", \"sbattezzate\", \"sbattute\", \"sbeccate\", \"sbeffeggiate\", \"sbellicate\", \"sbendate\", \"sbertucciate\", \"sbiadite\", \"sbiancate\", \"sbianchite\", \"sbiellate\", \"sbiettate\", \"sbigottite\", \"sbilanciate\", \"sbirbate\", \"sbirciate\", \"sbizzarrite\", \"sbloccate\", \"sbobinate\", \"sboccate\", \"sbocconcellate\", \"sbollentate\", \"sbolognate\", \"sborniate\", \"sborsate\", \"sboscate\", \"sbottonate\", \"sbozzate\", \"sbozzimate\", \"sbozzolate\", \"sbracate\", \"sbracciate\", \"sbraciate\", \"sbraitate\", \"sbranate\", \"sbrancate\", \"sbrattate\", \"sbreccate\", \"sbriciolate\", \"sbrigate\", \"sbrigliate\", \"sbrinate\", \"sbrindellate\", \"sbrodolate\", \"sbrogliate\", \"sbronzate\", \"sbruffate\", \"sbucciate\", \"sbudellate\", \"sbuffate\", \"sbugiardate\", \"sbullettate\", \"sbullonate\", \"sburrate\", \"scacazzate\", \"scacchiate\", \"scacciate\", \"scaccolate\", \"scadenzate\", \"scafate\", \"scaffalate\", \"scagionate\", \"scagliate\", \"scaglionate\", \"scalate\", \"scalcate\", \"scalcinate\", \"scaldate\", \"scalettate\", \"scalfate\", \"scalfite\", \"scalmanate\", \"scaloppate\", \"scalpate\", \"scalpellate\", \"scalpellinate\", \"scaltrite\", \"scalzate\", \"scambiate\", \"scamiciate\", \"scamosciate\", \"scamozzate\", \"scampate\", \"scampatale\", \"scampate\", \"scamuffate\", \"scanalate\", \"scancellate\", \"scandagliate\", \"scandalizzate\", \"scandite\", \"scannate\", \"scannellate\", \"scannerate\", \"scannerizate\", \"scannerizzate\", \"scansate\", \"scansionate\", \"scapecchiate\", \"scapezzate\", \"scapicollate\", \"scapigliate\", \"scapitozzate\", \"scapocchiate\", \"scappate\", \"scappellate\", \"scappottate\", \"scapricciate\", \"scapsulate\", \"scarabocchiate\", \"scaracchiate\", \"scaraventate\", \"scarcerate\", \"scardassate\", \"scardate\", \"scardinate\", \"scaricate\", \"scarificate\", \"scarmigliate\", \"scarnate\", \"scarnificate\", \"scarnite\", \"scarrellate\", \"scarrocciate\", \"scarrozzate\", \"scarruffate\", \"scartabellate\", \"scartate\", \"scartavetrate\", \"scartinate\", \"scartocciate\", \"scassate\", \"scassinate\", \"scatenate\", \"scattate\", \"scavalcate\", \"scavallate\", \"scavate\", \"scavezzate\", \"scazzottate\", \"scekerate\", \"scelte\", \"scempiate\", \"sceneggiate\", \"scernute\", \"scervellate\", \"scese\", \"sceverate\", \"schedate\", \"schedulate\", \"scheggiate\", \"scheletrite\", \"schematizzate\", \"schermate\", \"schermite\", \"schermografate\", \"schernite\", \"schiacciate\", \"schiaffate\", \"schiaffeggiate\", \"schiantate\", \"schiarite\", \"schiavardate\", \"schiavizzate\", \"schiccherate\", \"schierate\", \"schifate\", \"schinciate\", \"schioccate\", \"schiodate\", \"schiumate\", \"schiuse\", \"schivate\", \"schizzate\", \"schizzettate\", \"sciabolate\", \"sciabordate\", \"sciacquate\", \"scialacquate\", \"sciamanizzate\", \"sciamannate\", \"sciancate\", \"sciancrate\", \"scimmieggiate\", \"scimmiottate\", \"scinte\", \"scioccate\", \"sciolinate\", \"sciolte\", \"sciorinate\", \"scippate\", \"sciroppate\", \"scisse\", \"sciupacchiate\", \"sciupate\", \"sclamate\", \"sclerosate\", \"sclerotizzate\", \"scoccate\", \"scocciate\", \"scodate\", \"scodellate\", \"scoiate\", \"scolarizzate\", \"scolate\", \"scollacciate\", \"scollate\", \"scollegate\", \"scolorate\", \"scolorite\", \"scolpate\", \"scolpite\", \"scombaciate\", \"scombinate\", \"scombussolate\", \"scommesse\", \"scomodate\", \"scompaginate\", \"scompagnate\", \"scompartite\", \"scompattate\", \"scompensate\", \"scompiacute\", \"scompigliate\", \"scomposte\", \"scomputate\", \"scomunicate\", \"sconcertate\", \"sconciate\", \"sconcluse\", \"sconfessate\", \"sconficcate\", \"sconﬁtte\", \"sconfortate\", \"sconfuse\", \"scongelate\", \"scongiurate\", \"sconnesse\", \"sconosciute\", \"sconquassate\", \"sconsacrate\", \"sconsigliate\", \"sconsolate\", \"scontate\", \"scontentate\", \"scontornate\", \"scontorte\", \"scontrate\", \"sconvolte\", \"scopate\", \"scoperchiate\", \"scoperte\", \"scopiazzate\", \"scoraggiate\", \"scoraggite\", \"scorate\", \"scorazzate\", \"scorciate\", \"scorcite\", \"scordate\", \"scoreggiate\", \"scorificate\", \"scornate\", \"scorniciate\", \"scoronate\", \"scorporate\", \"scorrazzate\", \"scorreggiate\", \"scorrette\", \"scorse\", \"scortate\", \"scortecciate\", \"scorticate\", \"scorte\", \"scorzate\", \"scoscese\", \"scosciate\", \"scosse\", \"scostate\", \"scostolate\", \"scotennate\", \"scoticate\", \"scotolate\", \"scotomizzate\", \"scottate\", \"scotte\", \"scovate\", \"scoverte\", \"scozzate\", \"scozzonate\", \"screditate\", \"scremate\", \"screpolate\", \"screziate\", \"scribacchiate\", \"scriminate\", \"scristianizzate\", \"scritte\", \"scritturate\", \"scroccate\", \"scrocchiate\", \"scrollate\", \"scrostate\", \"scrutate\", \"scrutinate\", \"scucite\", \"scudisciate\", \"scuffiate\", \"sculacciate\", \"sculettate\", \"scuoiate\", \"scuriosate\", \"scurite\", \"scusate\", \"sdaziate\", \"sdebitate\", \"sdegnate\", \"sdemanializzate\", \"sdentate\", \"sdilinquite\", \"sdoganate\", \"sdolute\", \"sdoppiate\", \"sdraiate\", \"sdrammatizzate\", \"sdrucite\", \"secate\", \"seccate\", \"secernute\", \"secolarizzate\", \"secondate\", \"secretate\", \"secrete\", \"sedate\", \"sedentarizzate\", \"sedotte\", \"segate\", \"seghettate\", \"segmentate\", \"segnalate\", \"segnate\", \"segnoreggiate\", \"segregate\", \"segretate\", \"seguitate\", \"seguite\", \"selciate\", \"selezionate\", \"sellate\", \"sembrate\", \"sementate\", \"semicinte\", \"seminate\", \"semplificate\", \"senilizzate\", \"sensibilizzate\", \"sensorizzate\", \"sentenziate\", \"sentite\", \"sentitasele\", \"sentite\", \"sentite\", \"separate\", \"sepolte\", \"seppellite\", \"sequenziate\", \"sequestrate\", \"serbate\", \"serrate\", \"servite\", \"servoassistite\", \"sessualizzate\", \"sestuplicate\", \"setacciate\", \"setificate\", \"settate\", \"settorializzate\", \"settuplicate\", \"seviziate\", \"sezionate\", \"sfaccettate\", \"sfagliate\", \"sfaldate\", \"sfalsate\", \"sfamate\", \"sfanalate\", \"sfangate\", \"sfarinate\", \"sfasate\", \"sfasciate\", \"sfatate\", \"sfatte\", \"sfavillate\", \"sfavorite\", \"sfegatate\", \"sfeltrate\", \"sfendute\", \"sferragliate\", \"sferrate\", \"sferzate\", \"sfesse\", \"sfiancate\", \"sfiatate\", \"sfiate\", \"sfibbiate\", \"sfibrate\", \"sfidate\", \"sfiduciate\", \"sfigurate\", \"sfilate\", \"sfilettate\", \"sfinite\", \"sfioccate\", \"sfiorate\", \"sfittate\", \"sfocate\", \"sfociate\", \"sfoderate\", \"sfogate\", \"sfoggiate\", \"sfogliate\", \"sfollate\", \"sfoltite\", \"sfondate\", \"sforacchiate\", \"sforate\", \"sforbiciate\", \"sformate\", \"sfornaciate\", \"sfornate\", \"sfornite\", \"sforzate\", \"sfottute\", \"sfracellate\", \"sfrangiate\", \"sfrascate\", \"sfratate\", \"sfrattate\", \"sfrecciate\", \"sfregate\", \"sfregiate\", \"sfrenate\", \"sfrisate\", \"sfrondate\", \"sfrucugliate\", \"sfruculiate\", \"sfruttate\", \"sfumate\", \"sfuocate\", \"sgamate\", \"sganasciate\", \"sganciate\", \"sgarbugliate\", \"sgattaiolate\", \"sgelate\", \"sghiacciate\", \"sgocciolate\", \"sgolate\", \"sgomberate\", \"sgombrate\", \"sgomentate\", \"sgominate\", \"sgomitate\", \"sgomitolate\", \"sgonfiate\", \"sgorbiate\", \"sgottate\", \"sgovernate\", \"sgozzate\", \"sgraffiate\", \"sgraffignate\", \"sgranate\", \"sgranchite\", \"sgranellate\", \"sgrassate\", \"sgravate\", \"sgretolate\", \"sgridate\", \"sgrommate\", \"sgrondate\", \"sgroppate\", \"sgrossate\", \"sgrovigliate\", \"sgrugnate\", \"sguainate\", \"sgualcite\", \"sguanciate\", \"sguarnite\", \"sguinzagliate\", \"sgusciate\", \"shakerate\", \"shoccate\", \"shuntate\", \"sigillate\", \"siglate\", \"significate\", \"signoreggiate\", \"silenziate\", \"silicizzate\", \"sillabate\", \"sillogizzate\", \"silurate\", \"simboleggiate\", \"simbolizzate\", \"simmetrizzate\", \"simpatizzate\", \"simulate\", \"sincerate\", \"sincopate\", \"sincretizzate\", \"sincronizzate\", \"sindacalizzate\", \"sindacate\", \"singolarizzate\", \"sinistrate\", \"sinizzate\", \"sinterizzate\", \"sintetizzate\", \"sintonizzate\", \"siringate\", \"sistematizzate\", \"sistemate\", \"situate\", \"slabbrate\", \"slacciate\", \"slamate\", \"slanciate\", \"slappolate\", \"slargate\", \"slavizzate\", \"slegate\", \"slentate\", \"slinguate\", \"slogate\", \"sloggate\", \"sloggiate\", \"slombate\", \"slungate\", \"smaccate\", \"smacchiate\", \"smagliate\", \"smagnetizzate\", \"smagrite\", \"smaliziate\", \"smallate\", \"smaltate\", \"smaltite\", \"smammate\", \"smanacciate\", \"smangiate\", \"smantellate\", \"smarcate\", \"smarginate\", \"smarrite\", \"smascellate\", \"smascherate\", \"smaterializzate\", \"smattonate\", \"smembrate\", \"smentite\", \"smerciate\", \"smerdate\", \"smerigliate\", \"smerlate\", \"smerlettate\", \"smessale\", \"smesse\", \"smezzate\", \"smidollate\", \"smielate\", \"smilitarizzate\", \"sminate\", \"sminuite\", \"sminuzzate\", \"smistate\", \"smitizzate\", \"smobiliate\", \"smobilitate\", \"smobilizzate\", \"smoccolate\", \"smollicate\", \"smonacate\", \"smontate\", \"smorbate\", \"smorzate\", \"smosse\", \"smozzicate\", \"smunte\", \"smurate\", \"smussate\", \"smutandate\", \"snaturate\", \"snazionalizzate\", \"snebbiate\", \"snellite\", \"snervate\", \"snidate\", \"sniffate\", \"snobbate\", \"snocciolate\", \"snodate\", \"snudate\", \"sobbarcate\", \"sobbollite\", \"sobillate\", \"socchiuse\", \"soccorse\", \"soddisfatte\", \"sodisfatte\", \"sodomizzate\", \"sofferite\", \"soffermate\", \"sofferte\", \"soffiate\", \"soffocate\", \"soffregate\", \"soffritte\", \"soffuse\", \"sofisticate\", \"soggettivate\", \"soggettivizzate\", \"sogghignate\", \"soggiogate\", \"soggiunte\", \"sogguardate\", \"sognate\", \"solarizzate\", \"solcate\", \"soleggiate\", \"solennizzate\", \"solfeggiate\", \"solfitate\", \"solfonate\", \"solforate\", \"solidificate\", \"solite\", \"sollazzate\", \"sollecitate\", \"solleticate\", \"sollevate\", \"solte\", \"solubilizzate\", \"solute\", \"soluzionate\", \"solvatate\", \"somatizzate\", \"someggiate\", \"somigliate\", \"sommate\", \"sommerse\", \"sommesse\", \"somministrate\", \"sommosse\", \"sonate\", \"sondate\", \"sonorizzate\", \"sopite\", \"soppalcate\", \"soppesate\", \"soppiantate\", \"sopportate\", \"sopposte\", \"soppresse\", \"sopraddotate\", \"sopraeccitate\", \"sopraedificate\", \"sopraelevate\", \"sopraffate\", \"sopraffatte\", \"sopraggiunte\", \"sopraintese\", \"soprammesse\", \"soprannominate\", \"sopraposte\", \"soprapprese\", \"soprascritte\", \"sopraspese\", \"soprassaturate\", \"soprassedute\", \"sopravanzate\", \"sopravvalutate\", \"sopravvedute\", \"sopravvinte\", \"sopravviste\", \"sopreccitate\", \"sopredificate\", \"soprelevate\", \"soprintese\", \"sorbettate\", \"sorbite\", \"sorgiunte\", \"sormontate\", \"sorpassate\", \"sorprese\", \"sorrase\", \"sorrette\", \"sorseggiate\", \"sorteggiate\", \"sortite\", \"sorvegliate\", \"sorvolate\", \"soscritte\", \"sospese\", \"sospettate\", \"sospinte\", \"sospirate\", \"sostantivate\", \"sostanziate\", \"sostentate\", \"sostenute\", \"sostituite\", \"sottaciute\", \"sotterrate\", \"sottese\", \"sottintese\", \"sottoalimentate\", \"sottocapitalizzate\", \"sottodivise\", \"sottoesposte\", \"sottofirmate\", \"sottolineate\", \"sottomesse\", \"sottomurate\", \"sottopagate\", \"sottopassate\", \"sottoposte\", \"sottorappresentate\", \"sottorise\", \"sottoscritte\", \"sottostimate\", \"sottosviluppate\", \"sottotitolate\", \"sottovalutate\", \"sottratte\", \"soverchiate\", \"sovesciate\", \"sovietizzate\", \"sovracapitalizzate\", \"sovraccaricate\", \"sovradimensionate\", \"sovraeccitate\", \"sovraesposte\", \"sovraffaticate\", \"sovraffollate\", \"sovraggiunte\", \"sovraimposte\", \"sovraintese\", \"sovralimentate\", \"sovramodulate\", \"sovrappopolate\", \"sovrapposte\", \"sovrariscaldate\", \"sovrasaturate\", \"sovrascritte\", \"sovrastampate\", \"sovrastate\", \"sovrastimate\", \"sovrautilizzate\", \"sovreccitate\", \"sovresposte\", \"sovrimposte\", \"sovrintese\", \"sovvenute\", \"sovvenzionate\", \"sovvertite\", \"spaccate\", \"spacchettate\", \"spacciate\", \"spaginate\", \"spaiate\", \"spalancate\", \"spalate\", \"spalcate\", \"spalleggiate\", \"spalmate\", \"spammate\", \"spampanate\", \"spampinate\", \"spanate\", \"spanciate\", \"spandute\", \"spannate\", \"spannocchiate\", \"spanse\", \"spantanate\", \"spante\", \"spaparacchiate\", \"spaparanzate\", \"spappolate\", \"sparate\", \"sparecchiate\", \"sparigliate\", \"sparite\", \"sparlate\", \"sparpagliate\", \"spartite\", \"spassate\", \"spassatosele\", \"spastoiate\", \"spaurate\", \"spaurite\", \"spaventate\", \"spazializzate\", \"spaziate\", \"spazieggiate\", \"spazientite\", \"spazzate\", \"spazzolate\", \"specchiate\", \"specializzate\", \"specificate\", \"specillate\", \"specolate\", \"spedite\", \"spegnate\", \"spelacchiate\", \"spelate\", \"spellate\", \"spennacchiate\", \"spennate\", \"spennellate\", \"spente\", \"spenzolate\", \"sperate\", \"sperimentate\", \"spernacchiate\", \"speronate\", \"sperperate\", \"spersonalizzate\", \"sperticate\", \"spesate\", \"spese\", \"spessite\", \"spettacolarizzate\", \"spettinate\", \"spezzate\", \"spezzettate\", \"spezziate\", \"spezzonate\", \"spiaccicate\", \"spianate\", \"spiantate\", \"spiate\", \"spiattellate\", \"spiazzate\", \"spiccate\", \"spicciate\", \"spiccicate\", \"spicciolate\", \"spicconate\", \"spidocchiate\", \"spiegate\", \"spiegazzate\", \"spietrate\", \"spifferate\", \"spigionate\", \"spignorate\", \"spigolate\", \"spigrite\", \"spillate\", \"spilluzzicate\", \"spiluccate\", \"spinte\", \"spintonate\", \"spiombate\", \"spiralizzate\", \"spirantizzate\", \"spirate\", \"spiritualizzate\", \"spiumate\", \"spizzicate\", \"spodestate\", \"spoetizzate\", \"spogliate\", \"spolettate\", \"spoliate\", \"spoliticizzate\", \"spollonate\", \"spolmonate\", \"spolpate\", \"spoltronite\", \"spolverate\", \"spolverizzate\", \"spompate\", \"spompinate\", \"sponsorizzate\", \"spopolate\", \"spoppate\", \"sporcate\", \"sportate\", \"sporte\", \"sposate\", \"spossedute\", \"spossessate\", \"spostate\", \"sposte\", \"sprangate\", \"sprecate\", \"spregiate\", \"spremute\", \"spretate\", \"sprezzate\", \"sprigionate\", \"sprimacciate\", \"spromesse\", \"spronate\", \"sprotette\", \"sprovincializzate\", \"sprovvedute\", \"sprovviste\", \"spruzzate\", \"spugnate\", \"spulate\", \"spulciate\", \"spuntate\", \"spuntellate\", \"spupazzate\", \"spurgate\", \"sputacchiate\", \"sputate\", \"sputtanate\", \"squadernate\", \"squadrate\", \"squagliate\", \"squagliatasele\", \"squagliate\", \"squalificate\", \"squamate\", \"squarciate\", \"squartate\", \"squassate\", \"squattrinate\", \"squilibrate\", \"squinternate\", \"sradicate\", \"srotolate\", \"srugginite\", \"stabbiate\", \"stabilite\", \"stabilizzate\", \"stabulate\", \"staccate\", \"stacciate\", \"staffate\", \"staffilate\", \"staggiate\", \"staggite\", \"stagionate\", \"stagliate\", \"stagnate\", \"stamburate\", \"stampate\", \"stampigliate\", \"stanate\", \"stancate\", \"standardizzate\", \"stangate\", \"stanziate\", \"stappate\", \"starate\", \"starnazzate\", \"stasate\", \"statalizzate\", \"statizzate\", \"statoce\", \"statosene\", \"statuite\", \"stazzate\", \"stazzonate\", \"steccacciate\", \"steccate\", \"stecchite\", \"stecconate\", \"stemperate\", \"stempiate\", \"stenografate\", \"stereotipate\", \"sterilite\", \"sterilizzate\", \"sterpate\", \"sterrate\", \"sterzate\", \"stese\", \"stigliate\", \"stigmatizzate\", \"stilate\", \"stilettate\", \"stilizzate\", \"stillate\", \"stimate\", \"stimolate\", \"stinte\", \"stipate\", \"stipendiate\", \"stipulate\", \"stiracchiate\", \"stirate\", \"stivate\", \"stizzite\", \"stoccate\", \"stolte\", \"stomacate\", \"stonate\", \"stondate\", \"stoppate\", \"stordite\", \"storicizzate\", \"stornate\", \"storpiate\", \"stortate\", \"storte\", \"stozzate\", \"strabenedette\", \"strabuzzate\", \"stracannate\", \"straccate\", \"stracciate\", \"stracotte\", \"strafogate\", \"stragodute\", \"stralciate\", \"stralodate\", \"stralunate\", \"stramaledette\", \"stramortite\", \"strangolate\", \"straniate\", \"stranite\", \"straorzate\", \"strapagate\", \"strapazzate\", \"straperdute\", \"straperse\", \"strappate\", \"strasapute\", \"strascicate\", \"strascinate\", \"strasformate\", \"stratificate\", \"strattonate\", \"stravaccate\", \"stravinte\", \"stravolte\", \"stravolute\", \"straziate\", \"stregate\", \"stremate\", \"stressate\", \"striate\", \"stridulate\", \"strigate\", \"strigliate\", \"strillate\", \"striminzite\", \"strimpellate\", \"strinate\", \"stringate\", \"strisciate\", \"stritolate\", \"strizzate\", \"strofinate\", \"strombate\", \"strombazzate\", \"stroncate\", \"stronzate\", \"stropicciate\", \"stroppate\", \"stroppiate\", \"strozzate\", \"struccate\", \"strumentalizzate\", \"strumentate\", \"strusciate\", \"strutte\", \"strutturalizzate\", \"strutturate\", \"stuccate\", \"studiacchiate\", \"studiate\", \"stuellate\", \"stufate\", \"stupefatte\", \"stupite\", \"stuprate\", \"sturate\", \"stutate\", \"stuzzicate\", \"suase\", \"subaffittate\", \"subappaltate\", \"subbiate\", \"subdelegate\", \"subissate\", \"subite\", \"sublicenziate\", \"sublimate\", \"sublocate\", \"subodorate\", \"subordinate\", \"subornate\", \"suburbanizzate\", \"sucate\", \"succhiate\", \"succhiellate\", \"succiate\", \"succinte\", \"succise\", \"suddistinte\", \"suddivise\", \"suffissate\", \"suffisse\", \"suffragate\", \"suffumicate\", \"suffuse\", \"suggellate\", \"suggerite\", \"suggestionate\", \"suicidate\", \"sunteggiate\", \"sunte\", \"suolate\", \"suonate\", \"superate\", \"superpagate\", \"superraffreddate\", \"supervalutate\", \"supervisionate\", \"supplicate\", \"supplite\", \"supportate\", \"supposte\", \"suppurate\", \"surclassate\", \"surfate\", \"surgelate\", \"surraffreddate\", \"surriscaldate\", \"surrogate\", \"survoltate\", \"suscitate\", \"susseguite\", \"sussidiate\", \"sussunte\", \"sussurrate\", \"suturate\", \"svaccate\", \"svagate\", \"svaligiate\", \"svalutate\", \"svapate\", \"svariate\", \"svasate\", \"svecchiate\", \"svegliate\", \"svelate\", \"svelenite\", \"sveltite\", \"svelte\", \"svenate\", \"svendute\", \"sventagliate\", \"sventate\", \"sventolate\", \"sventrate\", \"sverginate\", \"svergognate\", \"svergolate\", \"sverminate\", \"sverniciate\", \"svestite\", \"svettate\", \"svezzate\", \"sviate\", \"svignatosele\", \"svigorite\", \"svilite\", \"svillaneggiate\", \"sviluppate\", \"svinate\", \"svincolate\", \"sviolinate\", \"svirgolate\", \"svirilizzate\", \"svisate\", \"sviscerate\", \"svitate\", \"sviticchiate\", \"svolate\", \"svolazzate\", \"svolte\", \"svolute\", \"svuotate\", \"tabuizzate\", \"tabulate\", \"taccate\", \"taccheggiate\", \"tacciate\", \"tacitate\", \"taciute\", \"tagliate\", \"taglieggiate\", \"tagliuzzate\", \"talebanizzate\", \"tallonate\", \"tampinate\", \"tamponate\", \"tangute\", \"tannate\", \"tappate\", \"tappezzate\", \"tarate\", \"tardate\", \"targate\", \"tariffate\", \"tarlate\", \"tarmate\", \"taroccate\", \"tarpate\", \"tartagliate\", \"tartassate\", \"tartufate\", \"tassate\", \"tassellate\", \"tastate\", \"tasteggiate\", \"tatuate\", \"tecnicizzate\", \"tecnologizzate\", \"tedeschizzate\", \"tediate\", \"teflonate\", \"telecomandate\", \"telecontrollate\", \"telediffuse\", \"telefonate\", \"telegrafate\", \"teleguidate\", \"telematizzate\", \"telemetrate\", \"teleradiotrasmesse\", \"teletrasmesse\", \"teletrasportate\", \"tematizzate\", \"temperate\", \"tempestate\", \"tempificate\", \"templatizzate\", \"temporizzate\", \"temprate\", \"temute\", \"tentate\", \"tenute\", \"teologizzate\", \"teorizzate\", \"tepefatte\", \"terebrate\", \"terminate\", \"termostatate\", \"terrazzate\", \"terrificate\", \"terrorizzate\", \"terse\", \"terzarolate\", \"terziarizzate\", \"terziate\", \"tesate\", \"tesaurizzate\", \"tese\", \"tesserate\", \"testate\", \"testificate\", \"testimoniate\", \"timbrate\", \"tindalizzate\", \"tinteggiate\", \"tinte\", \"tipicizzate\", \"tipizzate\", \"tippate\", \"tiranneggiate\", \"tirate\", \"titillate\", \"titolate\", \"toccate\", \"toelettate\", \"tollerate\", \"tolte\", \"tonalizzate\", \"tonificate\", \"tonneggiate\", \"tonsurate\", \"torchiate\", \"tormentate\", \"tornatosene\", \"tornite\", \"torrefatte\", \"torte\", \"tortoreggiate\", \"torturate\", \"tosate\", \"toscaneggiate\", \"toscanizzate\", \"tostate\", \"totalizzate\", \"traboccate\", \"trabuccate\", \"tracannate\", \"tracciate\", \"tradite\", \"tradotte\", \"trafficate\", \"trafilate\", \"trafitte\", \"traforate\", \"trafugate\", \"traghettate\", \"traguardate\", \"trainate\", \"tralasciate\", \"tralignate\", \"tramandate\", \"tramate\", \"trambasciate\", \"tramesse\", \"tramestate\", \"tramezzate\", \"tramortite\", \"tramutate\", \"tranciate\", \"trangugiate\", \"tranquillate\", \"tranquillizzate\", \"transatte\", \"transcese\", \"transcodificate\", \"transcorse\", \"transcritte\", \"transennate\", \"transfluite\", \"transfuse\", \"transistorizzate\", \"translitterate\", \"transposte\", \"transricevute\", \"transustanziate\", \"transvedute\", \"transviste\", \"trapanate\", \"trapassate\", \"trapiantate\", \"traportate\", \"traposte\", \"trapposte\", \"trapuntate\", \"trapunte\", \"trarotte\", \"trasandate\", \"trasbordate\", \"trascelte\", \"trascese\", \"trascinate\", \"trascorse\", \"trascritte\", \"trascurate\", \"trasdotte\", \"trasferite\", \"trasfigurate\", \"trasformate\", \"trasfuse\", \"trasgredite\", \"traslate\", \"traslitterate\", \"traslocate\", \"trasmesse\", \"trasmutate\", \"trasparite\", \"traspirate\", \"trasportate\", \"trasposte\", \"trastullate\", \"trasudate\", \"trasvolate\", \"trasvolte\", \"trattate\", \"tratteggiate\", \"trattenute\", \"tratte\", \"traumatizzate\", \"travagliate\", \"travalicate\", \"travasate\", \"travedute\", \"traversate\", \"travestite\", \"traviate\", \"travisate\", \"traviste\", \"travolte\", \"trebbiate\", \"triangolate\", \"tribbiate\", \"tribolate\", \"tributate\", \"triennalizzate\", \"trimestralizzate\", \"trincate\", \"trincerate\", \"trinciate\", \"tripartite\", \"triplicate\", \"trisecate\", \"trisezionate\", \"tritate\", \"triturate\", \"trivellate\", \"trollate\", \"trombate\", \"troncate\", \"tropicalizzate\", \"trovate\", \"truccate\", \"trucidate\", \"truffate\", \"tuffate\", \"tumefatte\", \"tumulate\", \"turate\", \"turbate\", \"turlupinate\", \"tutelate\", \"ubbligate\", \"ubicate\", \"ubidite\", \"ubiquitinate\", \"ubriacate\", \"uccellate\", \"uccellinate\", \"uccise\", \"udite\", \"ufficializzate\", \"uggite\", \"ugnate\", \"uguagliate\", \"ulcerate\", \"ulite\", \"ulolate\", \"ultimate\", \"ultracentrifugate\", \"ululate\", \"umanate\", \"umanizzate\", \"umettate\", \"umidificate\", \"umidite\", \"umiliate\", \"uncinate\", \"unguentate\", \"unificate\", \"uniformate\", \"unite\", \"univerbate\", \"universaleggiate\", \"universalizzate\", \"untate\", \"unte\", \"uperizzate\", \"urbanizzate\", \"urgenzate\", \"urlate\", \"urtacchiate\", \"urtate\", \"urticchiate\", \"usate\", \"usciolate\", \"usolate\", \"ustionate\", \"usucapite\", \"usurate\", \"usurpate\", \"utilitate\", \"utilizzate\", \"vaccinate\", \"vagabondeggiate\", \"vagellate\", \"vagheggiate\", \"vagillate\", \"vagliate\", \"valcate\", \"valicate\", \"validate\", \"valorizzate\", \"valse\", \"valutate\", \"vanagloriate\", \"vanate\", \"vandalizzate\", \"vangate\", \"vangelizzate\", \"vanificate\", \"vanite\", \"vantaggiate\", \"vantate\", \"vaporate\", \"vaporizzate\", \"varate\", \"varcate\", \"variate\", \"vasectomizzate\", \"vaticinate\", \"vedovate\", \"vedute\", \"vegetate\", \"veggiate\", \"vegliate\", \"veicolate\", \"velarizzate\", \"velate\", \"velettate\", \"velinate\", \"vellicate\", \"vellutate\", \"velocizzate\", \"vendemmiate\", \"vendicate\", \"vendicchiate\", \"venducchiate\", \"vendute\", \"venerate\", \"vengiate\", \"ventagliate\", \"ventilate\", \"ventolate\", \"verbalizzate\", \"vergate\", \"vergheggiate\", \"vergognate\", \"vergolate\", \"verificate\", \"verminate\", \"vernalizzate\", \"verniciate\", \"verrinate\", \"versate\", \"verseggiate\", \"versificate\", \"verticalizzate\", \"vessate\", \"vestite\", \"vestite\", \"vetrificate\", \"vetrinate\", \"vetrioleggiate\", \"vettovagliate\", \"vezzeggiate\", \"viaggiate\", \"vicinate\", \"vicitate\", \"videochattate\", \"videochiamate\", \"videocomunicate\", \"videoregistrate\", \"videotrasmesse\", \"vidimate\", \"vigilate\", \"vigliate\", \"vigoreggiate\", \"vigorite\", \"vilificate\", \"vilipese\", \"villaneggiate\", \"vincolate\", \"vinte\", \"violate\", \"violentate\", \"violinate\", \"virgolate\", \"virgoleggiate\", \"virgolettate\", \"virilizzate\", \"virtualizzate\", \"visionate\", \"visitate\", \"vissute\", \"vistate\", \"viste\", \"visualizzate\", \"vitaliziate\", \"vitalizzate\", \"vitaminizzate\", \"vittimizzate\", \"vituperate\", \"vivacizzate\", \"vivandate\", \"vivificate\", \"vivisezionate\", \"viziate\", \"vocabolarizzate\", \"vocalizzate\", \"vocate\", \"vociferate\", \"volantinate\", \"volatilizzate\", \"volgarizzate\", \"volicchiate\", \"volpeggiate\", \"voltate\", \"volte\", \"voltolate\", \"volturate\", \"voluminizzate\", \"volute\", \"volutoce\", \"vomitate\", \"vorate\", \"votate\", \"vulcanizzate\", \"vuotate\", \"wappate\", \"wikificate\", \"xerocopiate\", \"zaffate\", \"zampate\", \"zampettate\", \"zampillate\", \"zannate\", \"zappate\", \"zappettate\", \"zapponate\", \"zavorrate\", \"zeppate\", \"zigrinate\", \"zigzagate\", \"zimbellate\", \"zincate\", \"zinnate\", \"zipolate\", \"zippate\", \"zirlate\", \"zittite\", \"zizzagate\", \"zoccolate\", \"zollate\", \"zombate\", \"zonate\", \"zonizzate\", \"zoppate\", \"zoppeggiate\", \"zoppicate\", \"zucconate\", \"zufolate\", \"zumate\", \"zuppate\", \"abalienati\", \"abbacchiati\", \"abbacinati\", \"abbadati\", \"abbagliati\", \"abbaiati\", \"abballati\", \"abbambinati\", \"abbancati\", \"abbandonati\", \"abbarbagliati\", \"abbarbati\", \"abbarcati\", \"abbaruffati\", \"abbassati\", \"abbatacchiati\", \"abbattuti\", \"abbatuffolati\", \"abbeliti\", \"abbellati\", \"abbelliti\", \"abbendati\", \"abbeverati\", \"abbiadati\", \"abbicati\", \"abbigliati\", \"abbinati\", \"abbindolati\", \"abbioccati\", \"abbiosciati\", \"abbisciati\", \"abbittati\", \"abboccati\", \"abboffati\", \"abbominati\", \"abbonacciati\", \"abbonati\", \"abboniti\", \"abbordati\", \"abborracciati\", \"abborrati\", \"abborriti\", \"abbottinati\", \"abbottonati\", \"abbozzacchiati\", \"abbozzati\", \"abbozzolati\", \"abbracciati\", \"abbraciati\", \"abbrancati\", \"abbreviati\", \"abbriccati\", \"abbrigliati\", \"abbrivati\", \"abbriviati\", \"abbrividiti\", \"abbronzati\", \"abbrostolati\", \"abbrostoliti\", \"abbruciacchiati\", \"abbruciati\", \"abbrunati\", \"abbruniti\", \"abbruscati\", \"abbrusciati\", \"abbrustiati\", \"abbrustolati\", \"abbrustoliti\", \"abbrutiti\", \"abbruttiti\", \"abbuffati\", \"abbuiati\", \"abbuonati\", \"abburattati\", \"abbuzziti\", \"abdicati\", \"abdotti\", \"abiettati\", \"abilitati\", \"abissati\", \"abitati\", \"abituati\", \"abiurati\", \"aboliti\", \"abominati\", \"abondati\", \"aborriti\", \"abrasi\", \"abrogati\", \"abusati\", \"accaffati\", \"accagionati\", \"accagliati\", \"accalappiati\", \"accalcati\", \"accaldati\", \"accallati\", \"accalorati\", \"accaloriti\", \"accambiati\", \"accampati\", \"accampionati\", \"accanalati\", \"accanati\", \"accaneggiati\", \"accaniti\", \"accantonati\", \"accaparrati\", \"accapezzati\", \"accapigliati\", \"accapottati\", \"accappiati\", \"accappiettati\", \"accapponati\", \"accappucciati\", \"accaprettati\", \"accareggiati\", \"accarezzati\", \"accarnati\", \"accarpionati\", \"accartocciati\", \"accasati\", \"accasciati\", \"accasellati\", \"accasermati\", \"accastellati\", \"accastellinati\", \"accatarrati\", \"accatastati\", \"accattati\", \"accattivati\", \"accavalcati\", \"accavalciati\", \"accavallati\", \"accavezzati\", \"accecati\", \"acceffati\", \"accelerati\", \"accellerati\", \"accennati\", \"accensati\", \"accentati\", \"accentrati\", \"accentuati\", \"acceppati\", \"accerchiati\", \"accercinati\", \"accertati\", \"accesi\", \"accessoriati\", \"accettati\", \"acchetati\", \"acchiappati\", \"acchiocciolati\", \"acchitati\", \"acchiuduti\", \"acciabattati\", \"acciaiati\", \"acciambellati\", \"acciarpati\", \"acciecati\", \"accigliati\", \"acciglionati\", \"accignuti\", \"accincignati\", \"accinti\", \"acciocchiti\", \"acciottolati\", \"accipigliati\", \"accismati\", \"accisi\", \"acciucchiti\", \"acciuffati\", \"accivettati\", \"acclamati\", \"acclarati\", \"acclimatati\", \"acclusi\", \"accoccati\", \"accoccolati\", \"accoccovati\", \"accodati\", \"accollati\", \"accoltellati\", \"accolti\", \"accomandati\", \"accomiatati\", \"accommiatati\", \"accomodati\", \"accompagnati\", \"accomunati\", \"acconciati\", \"acconigliati\", \"accontati\", \"accontentati\", \"accoppati\", \"accoppiati\", \"accorati\", \"accorciati\", \"accorciti\", \"accordati\", \"accordellati\", \"accorpati\", \"accorti\", \"accosciati\", \"accostati\", \"accostumati\", \"accotonati\", \"accottimati\", \"accovacciati\", \"accovati\", \"accovonati\", \"accozzati\", \"accreditati\", \"accresciuti\", \"accrespati\", \"accucciati\", \"accucciolati\", \"accuditi\", \"acculati\", \"acculturati\", \"accumulati\", \"accumunati\", \"accusati\", \"acetificati\", \"acetilati\", \"acetiti\", \"acidati\", \"acidificati\", \"acidulati\", \"acquadernati\", \"acquarellati\", \"acquartierati\", \"acquati\", \"acquattati\", \"acquerellati\", \"acquetati\", \"acquietati\", \"acquisiti\", \"acquistati\", \"acromatizzati\", \"acuiti\", \"acuminati\", \"acutizzati\", \"adacquati\", \"adagiati\", \"adattati\", \"addaziati\", \"addebbiati\", \"addebitati\", \"addecimati\", \"addensati\", \"addentati\", \"addentellati\", \"addentrati\", \"addestrati\", \"addetti\", \"addiacciati\", \"addimandati\", \"addimesticati\", \"addimorati\", \"addimostrati\", \"addipanati\", \"addirizzati\", \"additati\", \"additivati\", \"addizionati\", \"addobbati\", \"addociliti\", \"addogliati\", \"addolcati\", \"addolciati\", \"addolciti\", \"addolorati\", \"addomandati\", \"addomesticati\", \"addoppiati\", \"addormentati\", \"addossati\", \"addotti\", \"addottorati\", \"addottrinati\", \"addrizzati\", \"adduati\", \"addugliati\", \"adeguati\", \"adempiti\", \"adempiuti\", \"adequati\", \"aderizzati\", \"adescati\", \"adibiti\", \"adirati\", \"aditi\", \"adiuvati\", \"adizzati\", \"adocchiati\", \"adombrati\", \"adonati\", \"adonestati\", \"adontati\", \"adoperati\", \"adoprati\", \"adorati\", \"adornati\", \"adottati\", \"adsorbiti\", \"aduggiati\", \"adugnati\", \"adulati\", \"adulterati\", \"adunati\", \"adunghiati\", \"adusati\", \"aerati\", \"aereati\", \"aerotrainati\", \"aerotrasportati\", \"affabulati\", \"affaccendati\", \"affacchinati\", \"affacciati\", \"affagottati\", \"affaldati\", \"affamati\", \"affamigliati\", \"affannati\", \"affardellati\", \"affascinati\", \"affastellati\", \"affaticati\", \"affattucchiati\", \"affatturati\", \"affermati\", \"afferrati\", \"affettati\", \"affezionati\", \"affiancati\", \"affiatati\", \"affibbiati\", \"affidati\", \"affienati\", \"affievoliti\", \"affigliati\", \"affigurati\", \"affilati\", \"affilettati\", \"affiliati\", \"affinati\", \"affiochiti\", \"affiorati\", \"affisati\", \"affissati\", \"affissi\", \"affittati\", \"affittiti\", \"afflitti\", \"afflosciati\", \"affocati\", \"affogati\", \"affogliati\", \"affollati\", \"affoltati\", \"affondati\", \"afforcati\", \"afforestati\", \"afforzati\", \"affossati\", \"affraliti\", \"affrancati\", \"affranti\", \"affratellati\", \"affrenati\", \"affrenellati\", \"affrescati\", \"affrettati\", \"affrittellati\", \"affrontati\", \"affumati\", \"affumicati\", \"affumigati\", \"affuocati\", \"affusolati\", \"africanizzati\", \"ageminati\", \"agevolati\", \"aggallati\", \"agganciati\", \"aggangherati\", \"aggarbati\", \"aggattonati\", \"aggavignati\", \"aggelati\", \"aggettivati\", \"agghiacciati\", \"agghiadati\", \"agghiaiati\", \"agghindati\", \"aggiaccati\", \"aggiogati\", \"aggiornati\", \"aggirati\", \"aggiucchiti\", \"aggiudicati\", \"aggiuntati\", \"aggiunti\", \"aggiustati\", \"agglomerati\", \"agglutinati\", \"aggomitolati\", \"aggottati\", \"aggraditi\", \"aggraffati\", \"aggranchiati\", \"aggranchiti\", \"aggranditi\", \"aggrappati\", \"aggraticciati\", \"aggravati\", \"aggrediti\", \"aggregati\", \"aggrevati\", \"aggricciati\", \"aggrinzati\", \"aggrinziti\", \"aggrommati\", \"aggrondati\", \"aggroppati\", \"aggrottati\", \"aggrovigliati\", \"aggrumati\", \"aggruppati\", \"aggruzzolati\", \"agguagliati\", \"agguantati\", \"agguardati\", \"agguatati\", \"aggueffati\", \"agitati\", \"agognati\", \"agrarizzati\", \"aguatati\", \"agucchiati\", \"agunati\", \"agurati\", \"aguzzati\", \"aitati\", \"aiutati\", \"aizzati\", \"alati\", \"alberati\", \"albergati\", \"alcalinizzati\", \"alchilati\", \"alchimiati\", \"alchimizzati\", \"alcolizzati\", \"alcoolizzati\", \"alenati\", \"alesati\", \"alettati\", \"alfabetati\", \"alfabetizzati\", \"aliditi\", \"alienati\", \"alimentati\", \"allacciati\", \"allagati\", \"allappati\", \"allargati\", \"allascati\", \"allattati\", \"alleati\", \"allegati\", \"alleggeriti\", \"alleggiati\", \"allegorizzati\", \"alleluiati\", \"allenati\", \"alleniti\", \"allentati\", \"allertati\", \"allessati\", \"allestiti\", \"allettati\", \"allevati\", \"alleviati\", \"allibati\", \"allibiti\", \"allibrati\", \"allicciati\", \"allietati\", \"allindati\", \"allineati\", \"allisi\", \"allocati\", \"allogati\", \"alloggiati\", \"allontanati\", \"allottati\", \"allucchettati\", \"allucciolati\", \"allucinati\", \"allumati\", \"alluminati\", \"alluminiati\", \"allungati\", \"allupati\", \"allusi\", \"alluzzati\", \"alogenati\", \"alonati\", \"alpeggiati\", \"alterati\", \"alternati\", \"alzati\", \"amalgamati\", \"amareggiati\", \"amaricati\", \"amati\", \"ambientati\", \"ambiguati\", \"ambiti\", \"americanizzati\", \"amicati\", \"ammaccati\", \"ammaestrati\", \"ammainati\", \"ammalati\", \"ammaliati\", \"ammalinconiti\", \"ammaltati\", \"ammanettati\", \"ammanicati\", \"ammanierati\", \"ammanigliati\", \"ammannati\", \"ammannellati\", \"ammanniti\", \"ammansati\", \"ammansiti\", \"ammantati\", \"ammantellati\", \"ammarati\", \"ammarezzati\", \"ammassati\", \"ammassellati\", \"ammassicciati\", \"ammatassati\", \"ammattonati\", \"ammazzati\", \"ammelmati\", \"ammenciti\", \"ammendati\", \"ammennicolati\", \"ammessi\", \"ammetati\", \"ammezziti\", \"amministrati\", \"amminutati\", \"ammirati\", \"ammiseriti\", \"ammobiliati\", \"ammodernati\", \"ammodernizzati\", \"ammogliati\", \"ammoinati\", \"ammollati\", \"ammolliti\", \"ammoniti\", \"ammonticchiati\", \"ammonticellati\", \"ammorbati\", \"ammorbidati\", \"ammorbiditi\", \"ammorsati\", \"ammortati\", \"ammortiti\", \"ammortizzati\", \"ammorzati\", \"ammosciati\", \"ammosciti\", \"ammostati\", \"ammotinati\", \"ammucchiati\", \"ammulinati\", \"ammusati\", \"ammutati\", \"ammutinati\", \"amnistiati\", \"amoracciati\", \"ampiati\", \"ampliati\", \"amplificati\", \"amputati\", \"anagrammati\", \"analizzati\", \"anamorfizzati\", \"anastomizzati\", \"anatematizzati\", \"anatomizzati\", \"anchilosati\", \"ancisi\", \"ancorati\", \"andatoseni\", \"andicappati\", \"anellati\", \"anemizzati\", \"anestetizzati\", \"angariati\", \"anglicizzati\", \"angolati\", \"angosciati\", \"angustiati\", \"animati\", \"annacquati\", \"annaffiati\", \"annasati\", \"annaspati\", \"annaspicati\", \"annebbiati\", \"annegati\", \"annerati\", \"anneriti\", \"annessi\", \"annestati\", \"annichilati\", \"annichiliti\", \"annidati\", \"annientati\", \"annitriti\", \"annobiliti\", \"annodati\", \"annodicchiati\", \"annoiati\", \"annotati\", \"annottati\", \"annottolati\", \"annoverati\", \"annullati\", \"annunciati\", \"annunziati\", \"annusati\", \"annuvolati\", \"anodizzati\", \"anonimizzati\", \"anteceduti\", \"anteposti\", \"antergati\", \"anticheggiati\", \"antichizzati\", \"anticipati\", \"anticonosciuti\", \"antidatati\", \"antiveduti\", \"antivisti\", \"antologizzati\", \"antropizzati\", \"antropomorfizzati\", \"aocchiati\", \"aombrati\", \"aonestati\", \"aontati\", \"aperti\", \"apocopati\", \"apologizzati\", \"apostrofati\", \"appaciati\", \"appacificati\", \"appagati\", \"appaiati\", \"appalesati\", \"appallottolati\", \"appaltati\", \"appanettati\", \"appannati\", \"apparati\", \"apparecchiati\", \"apparentati\", \"apparigliati\", \"appariti\", \"appartati\", \"appassionati\", \"appastati\", \"appastellati\", \"appellati\", \"appennellati\", \"appercepiti\", \"appertizzati\", \"appesantiti\", \"appesiti\", \"appesi\", \"appestati\", \"appetiti\", \"appezzati\", \"appiacevoliti\", \"appianati\", \"appiastrati\", \"appiatati\", \"appiattati\", \"appiattiti\", \"appiccati\", \"appiccicati\", \"appiccoliti\", \"appiedati\", \"appigionati\", \"appigliati\", \"appinzati\", \"appiombati\", \"appioppati\", \"appisolati\", \"applauditi\", \"applicati\", \"appoderati\", \"appoggiati\", \"appollaiati\", \"appoppati\", \"apportati\", \"appostati\", \"apposti\", \"appratiti\", \"appresentati\", \"appresi\", \"appressati\", \"apprestati\", \"apprettati\", \"apprezzati\", \"approcciati\", \"approfittati\", \"approfondati\", \"approfonditi\", \"approntati\", \"appropinquati\", \"appropriati\", \"approssimati\", \"approvati\", \"approvisionati\", \"approvvigionati\", \"appruati\", \"appulcrati\", \"appuntati\", \"appuntellati\", \"appuntiti\", \"appurati\", \"appuzzati\", \"arabescati\", \"arabizzati\", \"arati\", \"arbitrati\", \"arborati\", \"arcaizzati\", \"arcati\", \"architettati\", \"archiviati\", \"arcuati\", \"arditi\", \"areati\", \"argentati\", \"arginati\", \"argomentati\", \"arguiti\", \"arianizzati\", \"arieggiati\", \"armati\", \"armonizzati\", \"aromatizzati\", \"arpeggiati\", \"arpionati\", \"arponati\", \"arrabattati\", \"arraffati\", \"arraffiati\", \"arrandellati\", \"arrangiati\", \"arrapati\", \"arrapinati\", \"arrappati\", \"arrazzati\", \"arrecati\", \"arredati\", \"arreggimentati\", \"arrembati\", \"arrenati\", \"arresisi\", \"arresi\", \"arrestati\", \"arretrati\", \"arricchiti\", \"arricciati\", \"arricciolati\", \"arriffati\", \"arringati\", \"arrischiati\", \"arrisicati\", \"arrisi\", \"arrocati\", \"arroccati\", \"arrochiti\", \"arrogati\", \"arrolati\", \"arroncati\", \"arronzati\", \"arrosati\", \"arrossati\", \"arrostati\", \"arrostiti\", \"arrotati\", \"arrotolati\", \"arrotondati\", \"arrovellati\", \"arroventati\", \"arroventiti\", \"arrovesciati\", \"arrubinati\", \"arruffati\", \"arruffianati\", \"arrugginiti\", \"arruncigliati\", \"arruolati\", \"arruviditi\", \"arsicciati\", \"arsi\", \"artefatti\", \"articolati\", \"artigliati\", \"ascesi\", \"asciati\", \"asciolvuti\", \"asciugati\", \"ascoltati\", \"ascosi\", \"ascosti\", \"ascritti\", \"asfaltati\", \"asfissiati\", \"aspersi\", \"aspettati\", \"aspirati\", \"asportati\", \"aspreggiati\", \"assaettati\", \"assaggiati\", \"assaliti\", \"assaltati\", \"assaporati\", \"assaporiti\", \"assassinati\", \"assecondati\", \"assecurati\", \"assediati\", \"asseggiati\", \"assegnati\", \"assembiati\", \"assemblati\", \"assembrati\", \"assemprati\", \"assentati\", \"asseriti\", \"asserragliati\", \"asserviti\", \"assestati\", \"assetati\", \"assettati\", \"asseverati\", \"assibilati\", \"assicurati\", \"assiderati\", \"assiemati\", \"assiepati\", \"assillati\", \"assimigliati\", \"assimilati\", \"assiomatizzati\", \"assisi\", \"assistiti\", \"associati\", \"assodati\", \"assoggettati\", \"assolcati\", \"assoldati\", \"assolti\", \"assolutizzati\", \"assomati\", \"assommati\", \"assonati\", \"assonnati\", \"assopiti\", \"assorbiti\", \"assordati\", \"assorditi\", \"assortiti\", \"assottigliati\", \"assuefatti\", \"assunti\", \"asteggiati\", \"astenuti\", \"astersi\", \"astratti\", \"astretti\", \"atomizzati\", \"atrofizzati\", \"atrovati\", \"attaccati\", \"attagliati\", \"attanagliati\", \"attardati\", \"attediati\", \"atteggiati\", \"attempati\", \"attendati\", \"attentati\", \"attenuati\", \"attenuti\", \"attergati\", \"atterrati\", \"atterriti\", \"atterzati\", \"attesi\", \"attestati\", \"atticizzati\", \"attillati\", \"attinti\", \"attirati\", \"attivati\", \"attivizzati\", \"attizzati\", \"attorcigliati\", \"attorniati\", \"attorti\", \"attoscati\", \"attossicati\", \"attraccati\", \"attrappiti\", \"attratti\", \"attraversati\", \"attrezzati\", \"attribuiti\", \"attristati\", \"attristiti\", \"attruppati\", \"attualizzati\", \"attuati\", \"attuffati\", \"attutati\", \"attutiti\", \"auggiati\", \"augumentati\", \"augurati\", \"auliti\", \"aumentati\", \"aunghiati\", \"ausati\", \"auscultati\", \"auspicati\", \"autenticati\", \"autentificati\", \"autoaccusati\", \"autoaffondati\", \"autoalimentati\", \"autoassolti\", \"autocandidati\", \"autocensurati\", \"autocitati\", \"autocommiserati\", \"autoconsumati\", \"autoconvinti\", \"autodefiniti\", \"autodenunciati\", \"autodistrutti\", \"autofinanziati\", \"autogestiti\", \"autogovernati\", \"autografati\", \"autoincensati\", \"autointersecati\", \"autoinvitati\", \"autolesionati\", \"autolimitati\", \"automaticizzati\", \"automatizzati\", \"automotivati\", \"autonominati\", \"autoproclamati\", \"autoprodotti\", \"autoprotetti\", \"autopubblicati\", \"autopubblicizzati\", \"autoregolamentati\", \"autoregolati\", \"autoridotti\", \"autoriparati\", \"autorizzati\", \"autosomministrati\", \"autosostenuti\", \"autosuggestionati\", \"autotassati\", \"autotrapiantati\", \"autotrasportati\", \"autovalutati\", \"avallati\", \"avampati\", \"avanzati\", \"avariati\", \"avinti\", \"aviolanciati\", \"aviotrasportati\", \"avocati\", \"avolterati\", \"avulsi\", \"avutaceli\", \"avuti\", \"avvalorati\", \"avvalsi\", \"avvantaggiati\", \"avvelati\", \"avvelenati\", \"avventati\", \"avventurati\", \"avverati\", \"avversati\", \"avvertiti\", \"avvezzati\", \"avviati\", \"avvicendati\", \"avvicinati\", \"avvignati\", \"avviliti\", \"avviluppati\", \"avvinati\", \"avvinchiati\", \"avvinghiati\", \"avvinti\", \"avvisati\", \"avvistati\", \"avvitati\", \"avviticchiati\", \"avvititi\", \"avvivati\", \"avvolti\", \"avvoltolati\", \"aziendalizzati\", \"azionati\", \"azotati\", \"azzannati\", \"azzardati\", \"azzeccati\", \"azzerati\", \"azzimati\", \"azzittati\", \"azzittiti\", \"azzoppati\", \"azzoppiti\", \"azzuffati\", \"azzurrati\", \"bacati\", \"baccagliati\", \"bacchettati\", \"bacchiati\", \"baciati\", \"badati\", \"bagnati\", \"baipassati\", \"balbettati\", \"balcanizzati\", \"ballati\", \"baloccati\", \"balzati\", \"banalizzati\", \"bancati\", \"banditi\", \"bannati\", \"baraccati\", \"barattati\", \"barbarizzati\", \"barcamenati\", \"bardati\", \"barellati\", \"barrati\", \"barricati\", \"basati\", \"basciati\", \"basculati\", \"bassati\", \"bastati\", \"bastionati\", \"bastiti\", \"bastonati\", \"battezzati\", \"battuti\", \"bazzicati\", \"beatificati\", \"beati\", \"beccati\", \"beccheggiati\", \"becchettati\", \"beffati\", \"beffeggiati\", \"bendati\", \"benedetti\", \"beneficati\", \"benvoluti\", \"berlusconizzati\", \"bersagliati\", \"bestemmiati\", \"bevuti\", \"biadati\", \"bianchettati\", \"bianchiti\", \"biascicati\", \"biasimati\", \"biasmati\", \"bidonati\", \"biennalizzati\", \"biforcati\", \"bigiati\", \"bilanciati\", \"binati\", \"bindolati\", \"biodegradati\", \"biografati\", \"bipartiti\", \"bisbigliati\", \"biscottati\", \"bisecati\", \"bisellati\", \"bisognati\", \"bissati\", \"bistrati\", \"bistrattati\", \"bitumati\", \"bituminati\", \"blanditi\", \"bleffati\", \"blindati\", \"bloccati\", \"bobinati\", \"boccheggiati\", \"bocciati\", \"boicottati\", \"bollati\", \"bolliti\", \"bombardati\", \"bombati\", \"bonderizzati\", \"bonificati\", \"bootati\", \"borbottati\", \"bordati\", \"boriati\", \"borrati\", \"borseggiati\", \"braccati\", \"bracciati\", \"bramati\", \"bramiti\", \"brancicati\", \"brandeggiati\", \"branditi\", \"brasati\", \"bravati\", \"brevettati\", \"breviati\", \"brillantati\", \"brillati\", \"brinati\", \"broccati\", \"brocciati\", \"broccolati\", \"brontolati\", \"bronzati\", \"brucati\", \"bruciacchiati\", \"bruciati\", \"bruniti\", \"bruscati\", \"bruschinati\", \"brutalizzati\", \"bruttati\", \"bucati\", \"bucherellati\", \"bufati\", \"buffati\", \"bufferizzati\", \"buggerati\", \"bugnati\", \"bulicati\", \"bulinati\", \"bullettati\", \"bullonati\", \"burattati\", \"burlati\", \"burocratizzati\", \"burrificati\", \"buscati\", \"buttati\", \"butterati\", \"bypassati\", \"cablati\", \"cabrati\", \"cacati\", \"cacciati\", \"cadenzati\", \"cadmiati\", \"caducati\", \"cagati\", \"caggiati\", \"cagionati\", \"cagliati\", \"calafatati\", \"calamitati\", \"calandrati\", \"calati\", \"calcati\", \"calciati\", \"calcificati\", \"calcolati\", \"caldeggiati\", \"calettati\", \"calibrati\", \"calmati\", \"calmierati\", \"calpestati\", \"calumati\", \"calunniati\", \"calzati\", \"cambiati\", \"camerati\", \"campionati\", \"campiti\", \"camuffati\", \"canalizzati\", \"cancellati\", \"cancerizzati\", \"candeggiati\", \"candidati\", \"canditi\", \"canforati\", \"cangiati\", \"cannati\", \"canneggiati\", \"cannibalizzati\", \"cannoneggiati\", \"canonizzati\", \"cantati\", \"canterellati\", \"canticchiati\", \"cantilenati\", \"canzonati\", \"caolinizzati\", \"capacitati\", \"capeggiati\", \"capillarizzati\", \"capitalizzati\", \"capitanati\", \"capitaneggiati\", \"capiti\", \"capitozzati\", \"capivolti\", \"caponati\", \"capotati\", \"capottati\", \"capovolti\", \"capponati\", \"captati\", \"caramellati\", \"caramellizzati\", \"caratati\", \"caratterizzati\", \"carbonizzati\", \"carbossilati\", \"carburati\", \"carcati\", \"carcerati\", \"cardati\", \"carenati\", \"carezzati\", \"cariati\", \"caricati\", \"caricaturati\", \"caricaturizzati\", \"carotati\", \"carpionati\", \"carpiti\", \"carreggiati\", \"carrozzati\", \"cartavetrati\", \"carteggiati\", \"cartellinati\", \"cartografati\", \"cartolarizzati\", \"cartonati\", \"cascolati\", \"cassati\", \"cassi\", \"castigati\", \"castrati\", \"casualizzati\", \"catabolizzati\", \"catalizzati\", \"catalogati\", \"catapultati\", \"catechizzati\", \"categorizzati\", \"cateterizzati\", \"catramati\", \"cattolicizzati\", \"catturati\", \"causati\", \"cautelati\", \"cauterizzati\", \"cauzionati\", \"cavalcati\", \"cavataseli\", \"cavati\", \"cazzati\", \"cazziati\", \"cazzottati\", \"cedrati\", \"ceduti\", \"celati\", \"celebrati\", \"cellofanati\", \"cementati\", \"cementificati\", \"cennati\", \"censiti\", \"censurati\", \"centellati\", \"centellinati\", \"centimetrati\", \"centinati\", \"centralizzati\", \"centrati\", \"centrifugati\", \"centuplicati\", \"cerati\", \"cercati\", \"cerchiati\", \"cernuti\", \"certificati\", \"cesellati\", \"cessati\", \"cestinati\", \"cheratinizzati\", \"chetati\", \"chiamati\", \"chiappati\", \"chiarificati\", \"chiariti\", \"chiaroscurati\", \"chiavati\", \"chiazzati\", \"chiesti\", \"chilificati\", \"chilometrati\", \"chimificati\", \"chinati\", \"chinizzati\", \"chiodati\", \"chiosati\", \"chiusi\", \"choccati\", \"ciancicati\", \"cianfrinati\", \"cianfrugliati\", \"ciangottati\", \"ciattati\", \"cibati\", \"cicatrizzati\", \"ciccati\", \"cicchettati\", \"ciclizzati\", \"ciclostilati\", \"cifrati\", \"cilindrati\", \"cimati\", \"cimentati\", \"cincischiati\", \"cinematografati\", \"cintati\", \"cinti\", \"cioncati\", \"ciondolati\", \"circolati\", \"circoncinti\", \"circoncisi\", \"circondati\", \"circondotti\", \"circonflessi\", \"circonfluiti\", \"circonfusi\", \"circonscritti\", \"circonvenuti\", \"circoscritti\", \"circostanziati\", \"circuiti\", \"circumcinti\", \"circumnavigati\", \"citati\", \"ciucciati\", \"ciurmati\", \"civettati\", \"civilizzati\", \"clamati\", \"classati\", \"classicizzati\", \"classificati\", \"cliccati\", \"climatizzati\", \"clivati\", \"clonati\", \"cloroformizzati\", \"clorurati\", \"clusterizzati\", \"co-diretti\", \"coacervati\", \"coadiuvati\", \"coagulati\", \"coalizzati\", \"coartati\", \"coccolati\", \"codificati\", \"coeditati\", \"coesistiti\", \"cofinanziati\", \"cofirmati\", \"cofondati\", \"cogestiti\", \"cogitati\", \"coglionati\", \"cognosciuti\", \"coibentati\", \"coincisi\", \"cointeressati\", \"cointestati\", \"coinvolti\", \"cokificati\", \"colati\", \"colettati\", \"collassati\", \"collaudati\", \"collazionati\", \"collegati\", \"collettivizzati\", \"collezionati\", \"collimati\", \"colliquati\", \"collisi\", \"collocati\", \"colluttati\", \"colmati\", \"colonizzati\", \"colorati\", \"coloriti\", \"colorizzati\", \"colpevolizzati\", \"colpiti\", \"coltellati\", \"coltivati\", \"colti\", \"coltrati\", \"comandati\", \"combattuti\", \"combinati\", \"comburuti\", \"comicizzati\", \"cominciati\", \"commemorati\", \"commendati\", \"commensurati\", \"commentati\", \"commercializzati\", \"commessi\", \"comminati\", \"commiserati\", \"commissariati\", \"commissionati\", \"commisurati\", \"commossi\", \"commutati\", \"comodati\", \"compaginati\", \"compariti\", \"compartimentalizzati\", \"compartiti\", \"compassionati\", \"compatibilizzati\", \"compatiti\", \"compattati\", \"compendiati\", \"compenetrati\", \"compensati\", \"comperati\", \"compiaciuti\", \"compianti\", \"compilati\", \"compitati\", \"compiuti\", \"complessati\", \"complessificati\", \"complessi\", \"completati\", \"complicati\", \"complimentati\", \"comportati\", \"compostati\", \"composti\", \"comprati\", \"compravenduti\", \"compresi\", \"compressi\", \"compromessi\", \"comprovati\", \"compulsati\", \"compunti\", \"computati\", \"computerizzati\", \"comunicati\", \"comunistizzati\", \"concatenati\", \"conceduti\", \"concelebrati\", \"concentrati\", \"concepiti\", \"concertati\", \"concessi\", \"concettati\", \"concettualizzati\", \"conchiusi\", \"conciati\", \"conciliati\", \"concimati\", \"concitati\", \"conclamati\", \"conclusi\", \"concordati\", \"concotti\", \"concretati\", \"concretizzati\", \"conculcati\", \"concupiti\", \"condannati\", \"condensati\", \"conditi\", \"condivisi\", \"condizionati\", \"condoluti\", \"condonati\", \"condotti\", \"confatti\", \"confederati\", \"conferiti\", \"confermati\", \"confessati\", \"confettati\", \"confezionati\", \"conficcati\", \"confidati\", \"configurati\", \"confinati\", \"confinti\", \"confiscati\", \"confitti\", \"conformati\", \"confortati\", \"confricati\", \"confrontati\", \"confusi\", \"confutati\", \"congedati\", \"congegnati\", \"congelati\", \"congestionati\", \"congetturati\", \"congiunti\", \"conglobati\", \"conglomerati\", \"conglutinati\", \"congratulati\", \"congregati\", \"conguagliati\", \"coniati\", \"coniugati\", \"connaturati\", \"connessi\", \"connotati\", \"connumerati\", \"conosciuti\", \"conquistati\", \"consacrati\", \"consapevolizzati\", \"consegnati\", \"conseguiti\", \"consentiti\", \"conservati\", \"considerati\", \"consigliati\", \"consistiti\", \"consociati\", \"consolati\", \"consolidati\", \"consorziati\", \"consparsi\", \"conspersi\", \"constatati\", \"constretti\", \"construiti\", \"consultati\", \"consumati\", \"consunti\", \"contabilizzati\", \"contagiati\", \"containerizzati\", \"contaminati\", \"contati\", \"contattati\", \"conteggiati\", \"contemperati\", \"contemplati\", \"contentati\", \"contenuti\", \"contesi\", \"contestati\", \"contestualizzati\", \"contingentati\", \"continuati\", \"contornati\", \"contorti\", \"contrabbandati\", \"contraccambiati\", \"contraddetti\", \"contraddistinti\", \"contradetti\", \"contraffatti\", \"contrappesati\", \"contrapposti\", \"contrappuntati\", \"contrariati\", \"contrassegnati\", \"contrastati\", \"contrati\", \"contrattaccati\", \"contrattati\", \"contratti\", \"contravvalsi\", \"contristati\", \"controbattuti\", \"controbilanciati\", \"controdatati\", \"controfirmati\", \"controindicati\", \"controllati\", \"controminati\", \"contronotati\", \"controproposti\", \"controprovati\", \"controquerelati\", \"controsoffittati\", \"controstampati\", \"controventati\", \"conturbati\", \"contusi\", \"convalidati\", \"convenuti\", \"convenzionati\", \"convertiti\", \"convinti\", \"convitati\", \"convocati\", \"convogliati\", \"convolti\", \"coobati\", \"cooptati\", \"coordinati\", \"coperchiati\", \"coperti\", \"copiaincollati\", \"copiati\", \"copolimerizzati\", \"coppellati\", \"coprodotti\", \"corazzati\", \"corbellati\", \"corcati\", \"cordonati\", \"coreografati\", \"coricati\", \"cornificati\", \"coronati\", \"corredati\", \"correlati\", \"corresponsabilizzati\", \"corretti\", \"corricchiati\", \"corrisposti\", \"corroborati\", \"corrosi\", \"corrotti\", \"corrucciati\", \"corrugati\", \"corsi\", \"corteati\", \"corteggiati\", \"cortocircuitati\", \"coruscati\", \"cosati\", \"coscritti\", \"cosparsi\", \"cospersi\", \"costatati\", \"costeggiati\", \"costellati\", \"costernati\", \"costicchiati\", \"costipati\", \"costituiti\", \"costituzionalizzati\", \"costretti\", \"costruiti\", \"costuditi\", \"cotonati\", \"cotti\", \"covati\", \"coventrizzati\", \"coverchiati\", \"craccati\", \"creati\", \"creduti\", \"cremati\", \"crepati\", \"cresciuti\", \"cresimati\", \"crespati\", \"criminalizzati\", \"crioconcentrati\", \"criptati\", \"cristallizzati\", \"cristianizzati\", \"criticati\", \"crittati\", \"crittografati\", \"crivellati\", \"crocchiati\", \"crocefissi\", \"crocefitti\", \"crocifissi\", \"crocifitti\", \"crogiolati\", \"cromati\", \"cronicizzati\", \"cronometrati\", \"crostati\", \"crucciati\", \"crucifissi\", \"crucifitti\", \"cuccati\", \"cucinati\", \"cuciti\", \"cullati\", \"cumulati\", \"cuntati\", \"curati\", \"curvati\", \"curvati\", \"custoditi\", \"customizzati\", \"damascati\", \"damaschinati\", \"damati\", \"dannati\", \"danneggiati\", \"danzati\", \"dardeggiati\", \"datati\", \"dati\", \"dattilografati\", \"dattiloscritti\", \"daziati\", \"deacidificati\", \"deattivati\", \"debbiati\", \"debellati\", \"debilitati\", \"decaffeinati\", \"decaffeinizzati\", \"decalcati\", \"decalcificati\", \"decantati\", \"decapati\", \"decapitati\", \"decappottati\", \"decarbossilati\", \"decarburati\", \"decatizzati\", \"decelerati\", \"decentralizzati\", \"decentrati\", \"decerebrati\", \"decernuti\", \"decespugliati\", \"deciferati\", \"decifrati\", \"decimalizzati\", \"decimati\", \"decisi\", \"declamati\", \"declassati\", \"declassificati\", \"declinati\", \"declorati\", \"decodificati\", \"decolonizzati\", \"decolorati\", \"decompartimentati\", \"decompilati\", \"decomposti\", \"decompressi\", \"deconcentrati\", \"decondizionati\", \"decongelati\", \"decongestionati\", \"decontaminati\", \"decontestualizzati\", \"decontratti\", \"decorati\", \"decorticati\", \"decostruiti\", \"decrementati\", \"decretati\", \"decriminalizzati\", \"decriptati\", \"decrittati\", \"decuplicati\", \"decurtati\", \"dedicati\", \"dedotti\", \"defacciati\", \"defalcati\", \"defascistizzati\", \"defecati\", \"defenestrati\", \"deferiti\", \"defilati\", \"definiti\", \"defiscalizzati\", \"defitti\", \"deflazionati\", \"deflemmati\", \"deflorati\", \"defogliati\", \"defoliati\", \"deforestati\", \"deformati\", \"defosforati\", \"defosforilati\", \"deframmentati\", \"defraudati\", \"degassati\", \"degassificati\", \"deglutiti\", \"degnati\", \"degradati\", \"degustati\", \"deidratati\", \"deidrogenati\", \"deificati\", \"deindicizzati\", \"deindustrializzati\", \"deionizzati\", \"delegati\", \"delegificati\", \"delegittimati\", \"delibati\", \"deliberati\", \"delimitati\", \"delineati\", \"delirati\", \"deliziati\", \"delocalizzati\", \"delucidati\", \"delusi\", \"demagnetizzati\", \"demandati\", \"demanializzati\", \"demarcati\", \"demeritati\", \"demersi\", \"demetallizzati\", \"demilitarizzati\", \"demineralizzati\", \"demistificati\", \"demitizzati\", \"democratizzati\", \"demodulati\", \"demoliti\", \"demoltiplicati\", \"demonetati\", \"demonetizzati\", \"demonizzati\", \"demoralizzati\", \"demorsi\", \"demotivati\", \"denaturalizzati\", \"denaturati\", \"denazificati\", \"denazionalizzati\", \"denicotinizzati\", \"denigrati\", \"denitrificati\", \"denocciolati\", \"denominati\", \"denotati\", \"dentellati\", \"denuclearizzati\", \"denudati\", \"denunciati\", \"denunziati\", \"deodorati\", \"deossidati\", \"deossigenati\", \"deostruiti\", \"depauperati\", \"depenalizzati\", \"depennati\", \"depilati\", \"depinti\", \"depistati\", \"deplorati\", \"depolarizzati\", \"depolimerizzati\", \"depoliticizzati\", \"depolverizzati\", \"deportati\", \"depositati\", \"deposti\", \"depotenziati\", \"depravati\", \"deprecati\", \"depredati\", \"depressi\", \"depressurizzati\", \"deprezzati\", \"deprivati\", \"deprotonati\", \"depulsi\", \"depurati\", \"dequalificati\", \"deratizzati\", \"derattizzati\", \"dereferenziati\", \"deregolamentati\", \"deregolati\", \"derequisiti\", \"deresponsabilizzati\", \"derisi\", \"derubati\", \"derubricati\", \"desacralizzati\", \"desalati\", \"desalinizzati\", \"descolarizzati\", \"descritti\", \"desecretati\", \"desegretati\", \"deselezionati\", \"desensibilizzati\", \"desessualizzati\", \"desiati\", \"desiderati\", \"designati\", \"desinati\", \"desirati\", \"desolati\", \"desolforati\", \"desonorizzati\", \"desorbiti\", \"desossidati\", \"desquamati\", \"destabilizzati\", \"destagionalizzati\", \"destalinizzati\", \"destatalizzati\", \"destatizzati\", \"destati\", \"destinati\", \"destituiti\", \"destoricizzati\", \"destreggiati\", \"destrutti\", \"destrutturati\", \"desunti\", \"detassati\", \"detenuti\", \"deteriorati\", \"determinati\", \"detersi\", \"detestati\", \"detonati\", \"detorti\", \"detossificati\", \"detratti\", \"detronizzati\", \"dettagliati\", \"dettati\", \"detti\", \"deturpati\", \"deumidificati\", \"devastati\", \"deventati\", \"deviati\", \"deviscerati\", \"devitalizzati\", \"devitaminizzati\", \"devoluti\", \"dezippati\", \"diaframmati\", \"diagnosticati\", \"diagonalizzati\", \"diagrammati\", \"dializzati\", \"dialogati\", \"dialogizzati\", \"diazotati\", \"dibattuti\", \"diboscati\", \"dichiarati\", \"diesati\", \"diesizzati\", \"difesi\", \"diffamati\", \"differiti\", \"diffidati\", \"diffranti\", \"diffratti\", \"diffusi\", \"digeriti\", \"digitalizzati\", \"digitati\", \"digiunti\", \"digrassati\", \"digrignati\", \"digrossati\", \"dilacerati\", \"dilaniati\", \"dilapidati\", \"dilatati\", \"dilavati\", \"dilazionati\", \"dileggiati\", \"dileguati\", \"dilettati\", \"diletti\", \"diliscati\", \"dilucidati\", \"diluiti\", \"dilungati\", \"dimagrati\", \"dimandati\", \"dimenati\", \"dimensionati\", \"dimenticati\", \"dimerizzati\", \"dimessi\", \"dimezzati\", \"diminuiti\", \"dimissionati\", \"dimostrati\", \"dimunti\", \"dinamizzati\", \"dinoccati\", \"dipanati\", \"dipelati\", \"dipinti\", \"diplomati\", \"diposti\", \"diradati\", \"diramati\", \"diretti\", \"direzionati\", \"dirimuti\", \"diroccati\", \"dirottati\", \"dirotti\", \"dirozzati\", \"disabilitati\", \"disabituati\", \"disaccentati\", \"disaccoppiati\", \"disaccordati\", \"disacerbati\", \"disacidati\", \"disacidificati\", \"disaciditi\", \"disaerati\", \"disaffezionati\", \"disaggregati\", \"disalberati\", \"disallineati\", \"disamati\", \"disambiguati\", \"disaminati\", \"disamorati\", \"disancorati\", \"disanimati\", \"disappannati\", \"disapplicati\", \"disappresi\", \"disapprovati\", \"disarcionati\", \"disarmati\", \"disarticolati\", \"disascosti\", \"disassemblati\", \"disassuefatti\", \"disatomizzati\", \"disattesi\", \"disattivati\", \"disattrezzati\", \"disavvezzati\", \"disboscati\", \"disbrigati\", \"discacciati\", \"discalzati\", \"discantati\", \"discaricati\", \"discernuti\", \"discesi\", \"disceverati\", \"dischiesti\", \"dischiusi\", \"discinti\", \"disciolti\", \"disciplinati\", \"discolorati\", \"discolpati\", \"discommessi\", \"discompagnati\", \"discomposti\", \"disconclusi\", \"disconfitti\", \"discongiunti\", \"disconnessi\", \"disconosciuti\", \"discoperti\", \"discordati\", \"discoscesi\", \"discostati\", \"discreditati\", \"discresciuti\", \"discriminati\", \"discritti\", \"discuciti\", \"discuoiati\", \"discussi\", \"disdegnati\", \"disdettati\", \"disdetti\", \"diseccati\", \"diseccitati\", \"diseducati\", \"disegnati\", \"diserbati\", \"diseredati\", \"disertati\", \"diserti\", \"disfatti\", \"disgelati\", \"disgiunti\", \"disgraziati\", \"disgregati\", \"disgustati\", \"disidentificati\", \"disiderati\", \"disidratati\", \"disillusi\", \"disimballati\", \"disimparati\", \"disimpegnati\", \"disimpressi\", \"disincagliati\", \"disincantati\", \"disincentivati\", \"disincrostati\", \"disindustrializzati\", \"disinfestati\", \"disinfettati\", \"disinflazionati\", \"disinformati\", \"disingannati\", \"disingranati\", \"disinibiti\", \"disinnamorati\", \"disinnescati\", \"disinnestati\", \"disinquinati\", \"disinseriti\", \"disinstallati\", \"disintasati\", \"disintegrati\", \"disinteressati\", \"disintesi\", \"disintossicati\", \"disinvestiti\", \"disinvolti\", \"disistimati\", \"dislocati\", \"dismessi\", \"disobbediti\", \"disobbligati\", \"disonorati\", \"disordinati\", \"disorganizzati\", \"disorientati\", \"disormeggiati\", \"disossati\", \"disossidati\", \"disostruiti\", \"disotterrati\", \"dispariti\", \"dispensati\", \"dispenti\", \"disperduti\", \"dispersi\", \"dispesi\", \"dispiegati\", \"dispinti\", \"dispogliati\", \"disposti\", \"dispregiati\", \"disprezzati\", \"dispromessi\", \"disproporzionati\", \"disputati\", \"disqualificati\", \"disrotti\", \"dissacrati\", \"dissalati\", \"dissaldati\", \"dissanguati\", \"dissecati\", \"disseccati\", \"disselciati\", \"dissellati\", \"disseminati\", \"dissepolti\", \"disseppelliti\", \"dissequestrati\", \"disserrati\", \"dissestati\", \"dissetati\", \"dissezionati\", \"dissigillati\", \"dissimulati\", \"dissipati\", \"dissociati\", \"dissodati\", \"dissolti\", \"dissomigliati\", \"dissotterrati\", \"dissuasi\", \"dissuggellati\", \"distaccati\", \"distanziati\", \"distesi\", \"distillati\", \"distinti\", \"distolti\", \"distorti\", \"distratti\", \"distretti\", \"distribuiti\", \"districati\", \"distrigati\", \"distrutti\", \"disturbati\", \"disubbiditi\", \"disumanati\", \"disumanizzati\", \"disuniti\", \"disusati\", \"disveduti\", \"disvelati\", \"disvestiti\", \"disviati\", \"disvisti\", \"disvolti\", \"disvoluti\", \"dittongati\", \"divallati\", \"divaricati\", \"divelti\", \"diversificati\", \"divertiti\", \"divezzati\", \"divinati\", \"divincolati\", \"divinizzati\", \"divisi\", \"divolti\", \"divorati\", \"divorziati\", \"divulgati\", \"documentati\", \"dogati\", \"dogmatizzati\", \"dolcificati\", \"dollarizzati\", \"dolorati\", \"doluti\", \"domandati\", \"domati\", \"domesticati\", \"domiciliati\", \"dominati\", \"donati\", \"dondolati\", \"dopati\", \"doppiati\", \"dorati\", \"dormitoci\", \"dosati\", \"dotati\", \"dovuti\", \"dragati\", \"drammatizzati\", \"drappeggiati\", \"drenati\", \"dribblati\", \"drizzati\", \"drogati\", \"dugliati\", \"duplicati\", \"duramificati\", \"ebraizzati\", \"ecceduti\", \"eccepiti\", \"eccettuati\", \"eccitati\", \"echeggiati\", \"eclissati\", \"economizzati\", \"edificati\", \"editati\", \"edotti\", \"educati\", \"edulcorati\", \"effettuati\", \"efficientati\", \"effigiati\", \"effinti\", \"effluiti\", \"effusi\", \"egemonizzati\", \"eguagliati\", \"eiettati\", \"elaborati\", \"elargiti\", \"elasticizzati\", \"elementarizzati\", \"elemosinati\", \"elencati\", \"eletti\", \"elettrificati\", \"elettrizzati\", \"elettrocoagulati\", \"elettrolizzati\", \"elevati\", \"eliminati\", \"elisi\", \"elitrasportati\", \"ellenizzati\", \"elogiati\", \"elucidati\", \"elucubrati\", \"eluiti\", \"elusi\", \"emanati\", \"emancipati\", \"emarginati\", \"embricati\", \"emendati\", \"emessi\", \"emozionati\", \"empiti\", \"empiuti\", \"emulati\", \"emulsionati\", \"emunti\", \"encomiati\", \"endocitati\", \"energizzati\", \"enfatizzati\", \"enfiati\", \"entusiasmati\", \"enucleati\", \"enumerati\", \"enunciati\", \"epicureggiati\", \"epurati\", \"equalizzati\", \"equilibrati\", \"equipaggiati\", \"equiparati\", \"eradicati\", \"erasi\", \"ereditati\", \"eretti\", \"erogati\", \"eroicizzati\", \"erosi\", \"erotizzati\", \"erpicati\", \"ersi\", \"eruditi\", \"eruttati\", \"esacerbati\", \"esagerati\", \"esagitati\", \"esalati\", \"esaltati\", \"esaminati\", \"esasperati\", \"esauditi\", \"esauriti\", \"esautorati\", \"esborsati\", \"esclusi\", \"escogitati\", \"escomiati\", \"escoriati\", \"escossi\", \"escussi\", \"esecrati\", \"esecutati\", \"eseguiti\", \"esemplificati\", \"esentati\", \"esercitati\", \"esfoliati\", \"esibiti\", \"esilarati\", \"esiliati\", \"esimuti\", \"esitati\", \"esonerati\", \"esorbitati\", \"esorcizzati\", \"esortati\", \"espansi\", \"esparsi\", \"esperimentati\", \"esperiti\", \"espettorati\", \"espiantati\", \"espiati\", \"espirati\", \"espletati\", \"esplicati\", \"esplicitati\", \"esplorati\", \"esplosi\", \"esportati\", \"esposti\", \"espressi\", \"espropriati\", \"espugnati\", \"espulsi\", \"espunti\", \"espurgati\", \"essiccati\", \"essuti\", \"estasiati\", \"estenuati\", \"esterificati\", \"esteriorizzati\", \"esterminati\", \"esternalizzati\", \"esternati\", \"estesi\", \"estimati\", \"estinti\", \"estirpati\", \"estivati\", \"estorti\", \"estradati\", \"estraniati\", \"estrapolati\", \"estratti\", \"estremizzati\", \"estrinsecati\", \"estromessi\", \"estrusi\", \"estubati\", \"esulcerati\", \"esultati\", \"esumati\", \"eterificati\", \"eterizzati\", \"eternati\", \"eternizzati\", \"etichettati\", \"etossilati\", \"euforizzati\", \"europeizzati\", \"evacuati\", \"evangelizzati\", \"evasi\", \"eveti\", \"evidenziati\", \"evinti\", \"evirati\", \"eviscerati\", \"evitati\", \"evocati\", \"evolti\", \"evoluti\", \"evulsi\", \"fabbricati\", \"faccettati\", \"facilitati\", \"fagocitati\", \"falciati\", \"falcidiati\", \"falliti\", \"falsati\", \"falsificati\", \"familiarizzati\", \"fanatizzati\", \"fantasticati\", \"farciti\", \"farfugliati\", \"fasciati\", \"fascicolati\", \"fascistizzati\", \"fattaceli\", \"fatti\", \"fattorizzati\", \"fatturati\", \"favellati\", \"favoreggiati\", \"favoriti\", \"faxati\", \"fecondati\", \"fedecommessi\", \"federalizzati\", \"federati\", \"felicitati\", \"felpati\", \"feltrati\", \"femminilizzati\", \"fenduti\", \"feriti\", \"fermati\", \"fermentati\", \"ferrati\", \"fertilizzati\", \"fessi\", \"fessurati\", \"festeggiati\", \"festonati\", \"feudalizzati\", \"fiaccati\", \"fiammeggiati\", \"fiancheggiati\", \"ficcati\", \"fidanzati\", \"fidati\", \"fidecommessi\", \"fidelizzati\", \"figliati\", \"figurati\", \"filati\", \"filettati\", \"filmati\", \"filosofati\", \"filtrati\", \"finalizzati\", \"finanziati\", \"finitali\", \"finiti\", \"finlandizzati\", \"fintati\", \"finti\", \"fiocinati\", \"fiondati\", \"fiorettati\", \"firmati\", \"fiscalizzati\", \"fischiati\", \"fischiettati\", \"fissati\", \"fissionati\", \"fitti\", \"fiutati\", \"flagellati\", \"flaggati\", \"flambati\", \"flangiati\", \"flemmatizzati\", \"flessi\", \"flippati\", \"flottati\", \"fluidificati\", \"fluidizzati\", \"fluorizzati\", \"fluorurati\", \"focalizzati\", \"focheggiati\", \"foderati\", \"foggiati\", \"fognati\", \"folgorati\", \"follati\", \"fomentati\", \"fonati\", \"fondati\", \"foracchiati\", \"foraggiati\", \"forati\", \"forestati\", \"forfettizzati\", \"forgiati\", \"formalizzati\", \"formati\", \"formattati\", \"formilati\", \"formulati\", \"forniti\", \"fortificati\", \"forviati\", \"forwardati\", \"forzati\", \"fosfatati\", \"fosforati\", \"fosforilati\", \"fossilizzati\", \"fotocomposti\", \"fotocopiati\", \"fotografati\", \"fottuti\", \"fracassati\", \"fraintesi\", \"framessi\", \"frammentati\", \"frammessi\", \"frammezzati\", \"frammischiati\", \"franceseggiati\", \"francesizzati\", \"frangiati\", \"franti\", \"frantumati\", \"frappati\", \"frapposti\", \"fraseggiati\", \"frastagliati\", \"frastornati\", \"fratturati\", \"frazionati\", \"freddati\", \"fregati\", \"fregiati\", \"frenati\", \"frequentati\", \"fresati\", \"frettati\", \"friendzonati\", \"fritti\", \"frizionati\", \"frodati\", \"frollati\", \"fronteggiati\", \"frugati\", \"fruiti\", \"frullati\", \"frusciati\", \"frustati\", \"frustrati\", \"fruttati\", \"fucilati\", \"fucinati\", \"fugati\", \"fuggiti\", \"fulminati\", \"fumati\", \"fumigati\", \"funestati\", \"funti\", \"funzionati\", \"fuoriusciti\", \"fuorviati\", \"fusi\", \"fustellati\", \"fustigati\", \"gabbati\", \"gabellati\", \"gallati\", \"gallicizzati\", \"gallonati\", \"galvanizzati\", \"gambizzati\", \"garantiti\", \"garnettati\", \"garrotati\", \"garzati\", \"gasati\", \"gassati\", \"gassificati\", \"gazati\", \"gelatinizzati\", \"gelati\", \"gelificati\", \"gemellati\", \"gemicati\", \"geminati\", \"generalizzati\", \"generati\", \"gentrificati\", \"genuflessi\", \"geometrizzati\", \"georeferenziati\", \"gerarchizzati\", \"germanizzati\", \"gestiti\", \"gettati\", \"gettonati\", \"ghermiti\", \"ghettizzati\", \"ghigliottinati\", \"ghindati\", \"gibollati\", \"gingillati\", \"ginnati\", \"giocati\", \"gioiti\", \"gionglati\", \"giovaneggiati\", \"girandolati\", \"girati\", \"giudicati\", \"giulebbati\", \"giuntati\", \"giunti\", \"giuracchiati\", \"giurati\", \"giustapposti\", \"giustificati\", \"giustiziati\", \"glamourizzati\", \"glassati\", \"glissati\", \"globalizzati\", \"gloriati\", \"glorificati\", \"glossati\", \"godronati\", \"goduti\", \"goffrati\", \"gommati\", \"gonfiati\", \"googlati\", \"gottati\", \"governati\", \"gradinati\", \"graditi\", \"gradualizzati\", \"graduati\", \"graffati\", \"graffiati\", \"graffiti\", \"graficati\", \"grafitati\", \"gramolati\", \"granagliati\", \"grandinati\", \"granellati\", \"graniti\", \"granulati\", \"graticciati\", \"graticolati\", \"gratificati\", \"gratinati\", \"grattati\", \"grattugiati\", \"gravati\", \"graziati\", \"grecheggiati\", \"grecizzati\", \"gremiti\", \"gridati\", \"griffati\", \"grigliati\", \"grippati\", \"groccati\", \"grondati\", \"grugati\", \"grugniti\", \"guadagnati\", \"gualciti\", \"guardati\", \"guariti\", \"guarniti\", \"guastati\", \"guatati\", \"guerreggiati\", \"gufati\", \"guidati\", \"gustati\", \"hackerati\", \"handicappati\", \"ibridati\", \"idealizzati\", \"ideati\", \"identificati\", \"ideologizzati\", \"idolatrati\", \"idoleggiati\", \"idratati\", \"idrogenati\", \"idrolizzati\", \"iettati\", \"igienizzati\", \"ignifugati\", \"ignorati\", \"illanguiditi\", \"illeggiadriti\", \"illividiti\", \"illuminati\", \"illusi\", \"illustrati\", \"imbacuccati\", \"imbaldanziti\", \"imballati\", \"imbalsamati\", \"imbambolati\", \"imbandierati\", \"imbanditi\", \"imbarbariti\", \"imbarcati\", \"imbarilati\", \"imbastarditi\", \"imbastiti\", \"imbattuti\", \"imbavagliati\", \"imbeccati\", \"imbellettati\", \"imbelliti\", \"imbestialiti\", \"imbestiati\", \"imbevuti\", \"imbiaccati\", \"imbiancati\", \"imbianchiti\", \"imbibiti\", \"imbiettati\", \"imbionditi\", \"imbizzarriti\", \"imboccati\", \"imboniti\", \"imborghesiti\", \"imboscati\", \"imboschiti\", \"imbottati\", \"imbottigliati\", \"imbottiti\", \"imbozzimati\", \"imbracati\", \"imbracciati\", \"imbragati\", \"imbrancati\", \"imbrattati\", \"imbrecciati\", \"imbrigliati\", \"imbrillantinati\", \"imbroccati\", \"imbrodati\", \"imbrogliati\", \"imbronciati\", \"imbruttiti\", \"imbucati\", \"imbudellati\", \"imbullettati\", \"imbullonati\", \"imburrati\", \"imbussolati\", \"imbustati\", \"imbutiti\", \"imitati\", \"immagazzinati\", \"immaginati\", \"immalinconiti\", \"immatricolati\", \"immedesimati\", \"immersi\", \"immessi\", \"immischiati\", \"immiseriti\", \"immobilizzati\", \"immolati\", \"immortalati\", \"immunizzati\", \"immusoniti\", \"impaccati\", \"impacchettati\", \"impacciati\", \"impadroniti\", \"impaginati\", \"impagliati\", \"impalati\", \"impalcati\", \"impallati\", \"impallinati\", \"impalmati\", \"impaludati\", \"impanati\", \"impaniati\", \"impannati\", \"impantanati\", \"impaperati\", \"impapocchiati\", \"impappinati\", \"imparentati\", \"imparruccati\", \"impartiti\", \"impastati\", \"impasticcati\", \"impasticciati\", \"impastocchiati\", \"impastoiati\", \"impataccati\", \"impattati\", \"impauriti\", \"impavesati\", \"impeciati\", \"impedicati\", \"impediti\", \"impegnati\", \"impegolati\", \"impelagati\", \"impellicciati\", \"impennacchiati\", \"impennati\", \"impensieriti\", \"impepati\", \"imperlati\", \"impermaliti\", \"impermeabilizzati\", \"imperniati\", \"impersonati\", \"impersonificati\", \"impestati\", \"impetrati\", \"impiallacciati\", \"impiantati\", \"impiastrati\", \"impiastricciati\", \"impiccati\", \"impicciati\", \"impiccioliti\", \"impiccoliti\", \"impidocchiati\", \"impiegati\", \"impietositi\", \"impietriti\", \"impigliati\", \"impigriti\", \"impilati\", \"impillaccherati\", \"impinguati\", \"impinti\", \"impinzati\", \"impiombati\", \"impipati\", \"impiumati\", \"implementati\", \"implicati\", \"implorati\", \"impollinati\", \"impolpati\", \"impoltroniti\", \"impolverati\", \"impomatati\", \"imporcati\", \"imporporati\", \"importati\", \"importunati\", \"impossessati\", \"impossibilitati\", \"impostati\", \"imposti\", \"impratichiti\", \"impregnati\", \"impresi\", \"impressionati\", \"impressi\", \"imprestati\", \"impreziositi\", \"imprigionati\", \"impromessi\", \"improntati\", \"improsciuttiti\", \"impugnati\", \"impuntiti\", \"impunturati\", \"impupati\", \"imputati\", \"impuzzolentiti\", \"inabilitati\", \"inabissati\", \"inacerbiti\", \"inacetiti\", \"inaciditi\", \"inacutiti\", \"inaffiati\", \"inalati\", \"inalberati\", \"inalveati\", \"inalzati\", \"inamidati\", \"inanellati\", \"inarcati\", \"inargentati\", \"inariditi\", \"inaspriti\", \"inastati\", \"inattivati\", \"inaugurati\", \"incacchiati\", \"incalcinati\", \"incaloriti\", \"incalzati\", \"incamerati\", \"incamiciati\", \"incamminati\", \"incanagliti\", \"incanalati\", \"incannati\", \"incannucciati\", \"incaponiti\", \"incappottati\", \"incappucciati\", \"incaprettati\", \"incapricciati\", \"incapsulati\", \"incarcerati\", \"incardinati\", \"incaricati\", \"incarnati\", \"incarrozzati\", \"incartati\", \"incartocciati\", \"incartonati\", \"incasellati\", \"incasinati\", \"incassati\", \"incastellati\", \"incastonati\", \"incastrati\", \"incatenati\", \"incatramati\", \"incattiviti\", \"incavati\", \"incavigliati\", \"incavolati\", \"incazzati\", \"incellofanati\", \"incendiati\", \"inceneriti\", \"incensati\", \"incentivati\", \"incentrati\", \"inceppati\", \"incerati\", \"incernierati\", \"incerottati\", \"incesi\", \"incettati\", \"inchiappettati\", \"inchiavardati\", \"inchiesti\", \"inchinati\", \"inchiodati\", \"inchiostrati\", \"incipriati\", \"incisi\", \"incistati\", \"incitati\", \"inciuccati\", \"inciviliti\", \"inclinati\", \"inclusi\", \"incoccati\", \"incocciati\", \"incoiati\", \"incollati\", \"incolonnati\", \"incolpati\", \"incominciati\", \"incomodati\", \"incontrati\", \"incoraggiati\", \"incordati\", \"incornati\", \"incorniciati\", \"incoronati\", \"incorporati\", \"incotti\", \"incravattati\", \"incrementati\", \"increspati\", \"incretiniti\", \"incriminati\", \"incrinati\", \"incrociati\", \"incrostati\", \"incrudeliti\", \"incruditi\", \"incruscati\", \"incubati\", \"inculati\", \"inculcati\", \"incuneati\", \"incuoiati\", \"incuorati\", \"incupiti\", \"incuriositi\", \"incurvati\", \"incussi\", \"indagati\", \"indebitati\", \"indeboliti\", \"indemaniati\", \"indennizzati\", \"indetti\", \"indicati\", \"indicizzati\", \"indignati\", \"indiretti\", \"indirizzati\", \"indispettiti\", \"indisposti\", \"individualizzati\", \"individuati\", \"indolenziti\", \"indorati\", \"indossati\", \"indotti\", \"indottomi\", \"indottrinati\", \"indovinati\", \"indugiati\", \"indulti\", \"indurati\", \"induriti\", \"industrializzati\", \"industriati\", \"inebetiti\", \"inebriati\", \"ineriti\", \"inerpicati\", \"infagottati\", \"infamati\", \"infangati\", \"infarciti\", \"infarinati\", \"infastiditi\", \"infatuati\", \"infeltriti\", \"inferiti\", \"inferociti\", \"inferti\", \"infervorati\", \"infestati\", \"infettati\", \"infeudati\", \"infiacchiti\", \"infialati\", \"infialettati\", \"infiammati\", \"infiascati\", \"infibulati\", \"inficiati\", \"infilati\", \"infiltrati\", \"infilzati\", \"infingarditi\", \"infinocchiati\", \"infinti\", \"infioccati\", \"infiocchettati\", \"infiochiti\", \"infiorati\", \"infirmati\", \"infischiati\", \"infissi\", \"infittiti\", \"inflazionati\", \"inflessi\", \"inflitti\", \"influenzati\", \"infocati\", \"infoderati\", \"infognati\", \"infoibati\", \"infoltiti\", \"inforcati\", \"informatizzati\", \"informati\", \"informicolati\", \"informicoliti\", \"infornaciati\", \"infornati\", \"infortunati\", \"infoscati\", \"infossati\", \"infradiciati\", \"inframessi\", \"inframezzati\", \"inframmessi\", \"inframmezzati\", \"infrancesati\", \"infrapposti\", \"infrascati\", \"infrattati\", \"infreddati\", \"infronzolati\", \"infuocati\", \"infurbiti\", \"infuriati\", \"ingabbiati\", \"ingaggiati\", \"ingagliarditi\", \"ingannati\", \"ingarbugliati\", \"ingavonati\", \"ingegnati\", \"ingegnerizzati\", \"ingelositi\", \"ingemmati\", \"ingenerati\", \"ingentiliti\", \"ingeriti\", \"ingessati\", \"inghiaiati\", \"inghiottiti\", \"inghirlandati\", \"ingialliti\", \"ingigantiti\", \"inginocchiati\", \"ingioiellati\", \"ingiunti\", \"ingiuriati\", \"inglesizzati\", \"inglobati\", \"ingoffiti\", \"ingoiati\", \"ingolfati\", \"ingollati\", \"ingolositi\", \"ingombrati\", \"ingommati\", \"ingorgati\", \"ingozzati\", \"ingranati\", \"ingranditi\", \"ingrassati\", \"ingraticciati\", \"ingraticolati\", \"ingravidati\", \"ingraziati\", \"ingraziositi\", \"ingrigiti\", \"ingrommati\", \"ingrossati\", \"ingrulliti\", \"inguaiati\", \"inguainati\", \"ingualdrappati\", \"inguantati\", \"ingurgitati\", \"inibiti\", \"iniettati\", \"inimicati\", \"inizializzati\", \"iniziati\", \"inmillati\", \"innacquati\", \"innaffiati\", \"innalzati\", \"innamorati\", \"innastati\", \"innervati\", \"innervositi\", \"innescati\", \"innestati\", \"innevati\", \"innocentati\", \"innocuizzati\", \"innovati\", \"inoculati\", \"inoltrati\", \"inondati\", \"inorgogliti\", \"inorpellati\", \"inorriditi\", \"inquadrati\", \"inquietati\", \"inquisiti\", \"insabbiati\", \"insacchettati\", \"insalati\", \"insaldati\", \"insalivati\", \"insanguinati\", \"insaponati\", \"insaporiti\", \"inscatolati\", \"inscenati\", \"inscritti\", \"insecchiti\", \"insediati\", \"insegnati\", \"inseguiti\", \"insellati\", \"inselvatichiti\", \"inseriti\", \"insidiati\", \"insigniti\", \"insilati\", \"insinuati\", \"insolentiti\", \"insonnoliti\", \"insonorizzati\", \"insorditi\", \"insospettiti\", \"insozzati\", \"inspessiti\", \"inspirati\", \"installati\", \"instaurati\", \"insteriliti\", \"instillati\", \"instituiti\", \"instradati\", \"insudiciati\", \"insufflati\", \"insultati\", \"insuperbiti\", \"intabaccati\", \"intabarrati\", \"intaccati\", \"intagliati\", \"intarsiati\", \"intasati\", \"intascati\", \"intavolati\", \"integrati\", \"intelaiati\", \"intelati\", \"intellettualizzati\", \"intenebrati\", \"inteneriti\", \"intensificati\", \"intentati\", \"intepiditi\", \"intercalati\", \"intercambiati\", \"intercettati\", \"intercisi\", \"interclusi\", \"intercollegati\", \"interconnessi\", \"interconvertiti\", \"interdetti\", \"interessati\", \"interfacciati\", \"interfogliati\", \"interfoliati\", \"interiorizzati\", \"interlacciati\", \"interlineati\", \"intermessi\", \"intermezzati\", \"internalizzati\", \"internati\", \"internazionalizzati\", \"interpellati\", \"interpenetrati\", \"interpolati\", \"interposti\", \"interpretati\", \"interpunti\", \"interrati\", \"interrogati\", \"interrotti\", \"intersecati\", \"intervallati\", \"intervistati\", \"intesi\", \"intessuti\", \"intestarditi\", \"intestati\", \"intiepiditi\", \"intimati\", \"intimiditi\", \"intimoriti\", \"intinti\", \"intirizziti\", \"intitolati\", \"intonacati\", \"intonati\", \"intontiti\", \"intorbidati\", \"intorbiditi\", \"intorpiditi\", \"intortati\", \"intossicati\", \"intralciati\", \"intramessi\", \"intramezzati\", \"intrappolati\", \"intrapresi\", \"intrattenuti\", \"intraveduti\", \"intravisti\", \"intravveduti\", \"intravvisti\", \"intrecciati\", \"intricati\", \"intrigati\", \"intrinsecati\", \"intrippati\", \"intrisi\", \"introdotti\", \"introflessi\", \"introiettati\", \"introitati\", \"intromessi\", \"intronati\", \"intronizzati\", \"intruduti\", \"intrufolati\", \"intrugliati\", \"intruppati\", \"intrusi\", \"intubati\", \"intubettati\", \"intuiti\", \"inumati\", \"inumiditi\", \"inurbati\", \"inutilizzati\", \"invaghiti\", \"invaginati\", \"invalidati\", \"invasati\", \"invasi\", \"inveleniti\", \"inventariati\", \"inventati\", \"invenuti\", \"inverditi\", \"invergati\", \"inverniciati\", \"investigati\", \"investiti\", \"invetriati\", \"inviati\", \"invidiati\", \"invigoriti\", \"inviluppati\", \"invischiati\", \"invitati\", \"invocati\", \"invogliati\", \"involati\", \"involgariti\", \"involtati\", \"involti\", \"inzaccherati\", \"inzeppati\", \"inzigati\", \"inzolfati\", \"inzuccati\", \"inzuccherati\", \"inzuppati\", \"iodurati\", \"ionizzati\", \"ipertrofizzati\", \"ipnotizzati\", \"ipostatizzati\", \"ipotecati\", \"ipotizzati\", \"iridati\", \"irradiati\", \"irraggiati\", \"irreggimentati\", \"irretiti\", \"irrigati\", \"irrigiditi\", \"irrisi\", \"irritati\", \"irrobustiti\", \"irrogati\", \"irrorati\", \"irrugginiti\", \"irruviditi\", \"ischeletriti\", \"iscritti\", \"islamizzati\", \"isolati\", \"isomerizzati\", \"ispanizzati\", \"ispessiti\", \"ispezionati\", \"ispirati\", \"issati\", \"istallati\", \"istanziati\", \"istaurati\", \"isteriliti\", \"istigati\", \"istillati\", \"istituiti\", \"istituzionalizzati\", \"istoriati\", \"istradati\", \"istruiti\", \"istupiditi\", \"italianeggiati\", \"italianizzati\", \"iterati\", \"iudicati\", \"killerati\", \"labbreggiati\", \"labializzati\", \"laccati\", \"lacerati\", \"laconizzati\", \"lacrimati\", \"ladroneggiati\", \"lagnati\", \"lagrimati\", \"laicizzati\", \"lambiccati\", \"lambiti\", \"lamentati\", \"laminati\", \"lanciati\", \"lapidati\", \"lappati\", \"lardati\", \"lardellati\", \"largiti\", \"larvati\", \"lascati\", \"lasciati\", \"lastricati\", \"latinizzati\", \"laudati\", \"laureati\", \"lavati\", \"lavorati\", \"leccati\", \"legalizzati\", \"legati\", \"leggicchiati\", \"leggiucchiati\", \"legittimati\", \"legittimizzati\", \"legnati\", \"lemmatizzati\", \"leniti\", \"lesinati\", \"lesionati\", \"lesi\", \"lessati\", \"letti\", \"levati\", \"levigati\", \"liberalizzati\", \"liberati\", \"licenziati\", \"lievitati\", \"liftati\", \"lignificati\", \"limati\", \"limitati\", \"linciati\", \"linearizzati\", \"lineati\", \"linkati\", \"liofilizzati\", \"liquefatti\", \"liquidati\", \"lisati\", \"lisciati\", \"lisciviati\", \"listati\", \"litografati\", \"livellati\", \"lizzati\", \"lobotomizzati\", \"localizzati\", \"locati\", \"lodati\", \"logorati\", \"lordati\", \"lottati\", \"lottizzati\", \"lubrificati\", \"lucchettati\", \"lucidati\", \"lucrati\", \"lumeggiati\", \"luppolizzati\", \"lusingati\", \"lussati\", \"lustrati\", \"macadamizzati\", \"macchiati\", \"macchinati\", \"macellati\", \"macerati\", \"maciullati\", \"maggesati\", \"maggiorati\", \"magnati\", \"magnetizzati\", \"magnificati\", \"maiolicati\", \"maledetti\", \"malfatti\", \"malignati\", \"malmenati\", \"malmessi\", \"maltati\", \"maltrattati\", \"malveduti\", \"malversati\", \"malvisti\", \"malvoluti\", \"mandati\", \"mandrinati\", \"manducati\", \"maneggiati\", \"manganati\", \"manganellati\", \"mangiati\", \"mangiucchiati\", \"manifatturati\", \"manifestati\", \"manimessi\", \"manipolati\", \"manlevati\", \"manomessi\", \"manoscritti\", \"manovrati\", \"mansuefatti\", \"mantecati\", \"mantenutasi\", \"mantenuti\", \"manualizzati\", \"manutenuti\", \"mappati\", \"marcati\", \"marchiati\", \"marciti\", \"marezzati\", \"marginalizzati\", \"marginati\", \"margottati\", \"marimessi\", \"marinati\", \"maritati\", \"marmorizzati\", \"marnati\", \"marocchinati\", \"martellati\", \"martellinati\", \"martirizzati\", \"martoriati\", \"mascherati\", \"maschiati\", \"maschiettati\", \"mascolinizzati\", \"massacrati\", \"massaggiati\", \"massellati\", \"massicciati\", \"massificati\", \"massimati\", \"massimizzati\", \"mastectomizzati\", \"masterizzati\", \"masticati\", \"masturbati\", \"matematizzati\", \"materializzati\", \"matricolati\", \"mattonati\", \"maturati\", \"mazziati\", \"mazzolati\", \"meccanizzati\", \"medagliati\", \"mediati\", \"medicalizzati\", \"medicati\", \"meditati\", \"membrati\", \"memorizzati\", \"menati\", \"mendicati\", \"menomati\", \"mentovati\", \"menzionati\", \"meravigliati\", \"mercanteggiati\", \"mercerizzati\", \"mercificati\", \"meriati\", \"meridionalizzati\", \"meritati\", \"merlati\", \"merlettati\", \"mersi\", \"mesciati\", \"mesciuti\", \"mescolati\", \"mescuti\", \"mesmerizzati\", \"messaggiati\", \"messi\", \"messoci\", \"mestati\", \"mesticati\", \"mestruati\", \"metabolizzati\", \"metaforeggiati\", \"metaforizzati\", \"metallizzati\", \"metamorfizzati\", \"metamorfosati\", \"metanizzati\", \"metilati\", \"metodizzati\", \"microfilmati\", \"microfonati\", \"microminiaturizzati\", \"micronizzati\", \"mietuti\", \"migliorati\", \"militarizzati\", \"millantati\", \"millimetrati\", \"mimati\", \"mimeografati\", \"mimetizzati\", \"minacciati\", \"minati\", \"minchionati\", \"mineralizzati\", \"miniati\", \"miniaturizzati\", \"minimizzati\", \"minuiti\", \"minuzzati\", \"miracolati\", \"miscelati\", \"mischiati\", \"misconosciuti\", \"missati\", \"mistificati\", \"misturati\", \"misurati\", \"miticizzati\", \"mitigati\", \"mitizzati\", \"mitragliati\", \"mitrati\", \"mixati\", \"mobiliati\", \"mobilitati\", \"mobilizzati\", \"modanati\", \"modellati\", \"modellizzati\", \"moderati\", \"modernizzati\", \"modificati\", \"modulati\", \"molati\", \"molestati\", \"mollati\", \"molleggiati\", \"moltiplicati\", \"monacati\", \"mondati\", \"mondializzati\", \"monetarizzati\", \"monetati\", \"monetizzati\", \"monitorati\", \"monitorizzati\", \"monocromatizzati\", \"monopolizzati\", \"monottongati\", \"montati\", \"monumentalizzati\", \"mordenzati\", \"mordicchiati\", \"mormorati\", \"morphati\", \"morsicati\", \"morsicchiati\", \"morsi\", \"mortasati\", \"mortificati\", \"mossi\", \"mostrati\", \"motivati\", \"motorizzati\", \"motteggiati\", \"movimentati\", \"mozzati\", \"mugolati\", \"mulciti\", \"multati\", \"multiplexati\", \"mummificati\", \"municipalizzati\", \"muniti\", \"munti\", \"murati\", \"musati\", \"musicati\", \"mussati\", \"mutati\", \"mutilati\", \"mutizzati\", \"mutuati\", \"nappati\", \"narcotizzati\", \"narrativizzati\", \"narrati\", \"nasalizzati\", \"nascosi\", \"nascosti\", \"nastrati\", \"naturaleggiati\", \"naturalizzati\", \"nauseati\", \"naverati\", \"navicati\", \"navigati\", \"nazificati\", \"nazionalizzati\", \"nebulizzati\", \"necessitati\", \"necrosati\", \"necrotizzati\", \"negativizzati\", \"negati\", \"negletti\", \"negoziati\", \"negreggiati\", \"neologizzati\", \"nerbati\", \"nericati\", \"nettati\", \"neutralizzati\", \"nevati\", \"nevicati\", \"nevischiati\", \"nevrotizzati\", \"nichelati\", \"niellati\", \"ninfeggiati\", \"ninnati\", \"ninnolati\", \"nitratati\", \"nitrificati\", \"nobilitati\", \"noiati\", \"noleggiati\", \"nomati\", \"nominalizzati\", \"nominati\", \"normalizzati\", \"normati\", \"notati\", \"notificati\", \"notiziati\", \"notricati\", \"noverati\", \"nuclearizzati\", \"nudricati\", \"nullificati\", \"numerati\", \"numerizzati\", \"nuotati\", \"nutriti\", \"obbiettati\", \"obbliati\", \"obbligati\", \"oberati\", \"obiettati\", \"obiettivati\", \"obiettivizzati\", \"obiurgati\", \"obliati\", \"obliterati\", \"obnubilati\", \"occasionati\", \"occhieggiati\", \"occidentalizzati\", \"occisi\", \"occlusi\", \"occultati\", \"occupati\", \"ocheggiati\", \"odiati\", \"odorati\", \"odorizzati\", \"offeriti\", \"offerti\", \"offesi\", \"officiati\", \"offiziati\", \"offuscati\", \"ofiziati\", \"oggettivati\", \"oggettivizzati\", \"oggettualizzati\", \"oliati\", \"oliti\", \"olografati\", \"oltraggiati\", \"oltrapassati\", \"oltrepassati\", \"omaggiati\", \"ombrati\", \"ombreggiati\", \"omessi\", \"omogeneizzati\", \"omogenizzati\", \"omologati\", \"ondati\", \"ondulati\", \"onestati\", \"onnubilati\", \"onorati\", \"opacati\", \"opacizzati\", \"operati\", \"opinati\", \"oppiati\", \"oppignorati\", \"oppilati\", \"opposti\", \"oppressi\", \"oppugnati\", \"oprati\", \"opsonizzati\", \"optati\", \"opzionati\", \"orbitati\", \"orchestrati\", \"ordinati\", \"orditi\", \"orecchiati\", \"organati\", \"organicati\", \"organizzati\", \"orgasmati\", \"orientalizzati\", \"orientati\", \"originati\", \"origliati\", \"orizzontati\", \"orlati\", \"orlettati\", \"ormati\", \"ormeggiati\", \"ornati\", \"orpellati\", \"orrati\", \"orripilati\", \"ortogonalizzati\", \"osannati\", \"osati\", \"osculati\", \"oscurati\", \"ospedalizzati\", \"ospitati\", \"osseduti\", \"ossequiati\", \"osservati\", \"ossessionati\", \"ossidati\", \"ossificati\", \"ossitonizzati\", \"ostacolati\", \"osteggiati\", \"ostentati\", \"ostinati\", \"ostracizzati\", \"ostruiti\", \"ottemperati\", \"ottenebrati\", \"ottenuti\", \"ottimalizzati\", \"ottimati\", \"ottimizzati\", \"ottonati\", \"ottriati\", \"ottuplicati\", \"otturati\", \"ottusi\", \"ottussi\", \"ovalizzati\", \"ovariectomizzati\", \"ovattati\", \"overcloccati\", \"ovrati\", \"ovviati\", \"ozieggiati\", \"ozonizzati\", \"pacati\", \"pacciamati\", \"pacificati\", \"padroneggiati\", \"paganizzati\", \"pagati\", \"paginati\", \"palafittati\", \"palatalizzati\", \"palati\", \"palesati\", \"palettati\", \"palettizzati\", \"palificati\", \"palleggiati\", \"pallettizzati\", \"palpati\", \"palpeggiati\", \"panati\", \"panneggiati\", \"panoramicati\", \"pappati\", \"paracadutati\", \"parafati\", \"paraffinati\", \"parafrasati\", \"paragonati\", \"paragrafati\", \"paralizzati\", \"parallelizzati\", \"parametrati\", \"parametrizzati\", \"parassitati\", \"parati\", \"parcati\", \"parcellizzati\", \"parcheggiati\", \"pareggiati\", \"parificati\", \"parkerizzati\", \"parlati\", \"parlucchiati\", \"parodiati\", \"partecipati\", \"particolareggiati\", \"particolarizzati\", \"partizionati\", \"partoriti\", \"parzializzati\", \"pasciuti\", \"pascolati\", \"passati\", \"passeggiati\", \"passionati\", \"passivati\", \"pasticciati\", \"pastorizzati\", \"pasturati\", \"patinati\", \"patiti\", \"patrocinati\", \"patteggiati\", \"pattugliati\", \"pattuiti\", \"paventati\", \"pavesati\", \"pavimentati\", \"pavoneggiati\", \"pazziati\", \"pedinati\", \"pedonalizzati\", \"peggiorati\", \"pelati\", \"pellettizzati\", \"penalizzati\", \"penetrati\", \"pennellati\", \"pensati\", \"pensionati\", \"pentiti\", \"pepati\", \"peptonizzati\", \"peragrati\", \"percentualizzati\", \"percepiti\", \"percolati\", \"percorsi\", \"percossi\", \"perdonati\", \"perdotti\", \"perduti\", \"perequati\", \"perfatti\", \"perfezionati\", \"perforati\", \"performati\", \"periti\", \"periziati\", \"perlustrati\", \"permeati\", \"permessi\", \"perorati\", \"perpetrati\", \"perpetuati\", \"perplimuti\", \"perquisiti\", \"perscrutati\", \"perseguitati\", \"perseguiti\", \"persi\", \"personalizzati\", \"personificati\", \"persuasi\", \"perturbati\", \"pervasi\", \"pervertiti\", \"pesati\", \"pescati\", \"pestati\", \"petrarcheggiati\", \"pettegolati\", \"pettinati\", \"piagati\", \"piaggiati\", \"piallati\", \"pianeggiati\", \"pianificati\", \"piantati\", \"piantatali\", \"piantati\", \"pianti\", \"piantonati\", \"piantumati\", \"piastrellati\", \"piatiti\", \"piazzati\", \"picchettati\", \"picchiati\", \"picchierellati\", \"picchiettati\", \"picconati\", \"piegati\", \"pieghettati\", \"pietrificati\", \"pigiati\", \"pigliati\", \"pigmentati\", \"pignorati\", \"pigolati\", \"pilotati\", \"pimentati\", \"pinti\", \"pinzati\", \"piombati\", \"piovigginati\", \"piovuti\", \"pipati\", \"pippati\", \"piratati\", \"pirogenati\", \"pisciati\", \"pitoccati\", \"pittati\", \"pitturati\", \"pizzicati\", \"pizzicottati\", \"placati\", \"placcati\", \"plagiati\", \"plasmati\", \"plasticati\", \"plastificati\", \"platinati\", \"plissettati\", \"pluralizzati\", \"poetati\", \"poeticizzati\", \"poggiati\", \"polarizzati\", \"poligrafati\", \"polimerizzati\", \"politicizzati\", \"polverizzati\", \"pomiciati\", \"pompati\", \"ponderati\", \"ponzati\", \"popolarizzati\", \"popolati\", \"poppati\", \"porcellanati\", \"porfirizzati\", \"portati\", \"portesi\", \"porti\", \"porzionati\", \"posati\", \"posdatati\", \"positivizzati\", \"posizionati\", \"posposti\", \"posseduti\", \"postati\", \"postdatati\", \"posteggiati\", \"posticipati\", \"postillati\", \"posti\", \"postsincronizzati\", \"postulati\", \"potabilizzati\", \"potati\", \"potenziati\", \"potuti\", \"pralinati\", \"praticati\", \"preaccennati\", \"preannunciati\", \"preannunziati\", \"preavvertiti\", \"preavvisati\", \"precaricati\", \"preceduti\", \"precettati\", \"precinti\", \"precisati\", \"preclusi\", \"precompilati\", \"precompressi\", \"preconfezionati\", \"preconizzati\", \"preconosciuti\", \"precorsi\", \"precostituiti\", \"predati\", \"predefiniti\", \"predestinati\", \"predeterminati\", \"predetti\", \"predicati\", \"predigeriti\", \"prediletti\", \"predisposti\", \"preeletti\", \"preesistuti\", \"prefabbricati\", \"prefati\", \"prefatti\", \"prefazionati\", \"preferiti\", \"prefigurati\", \"prefinanziati\", \"prefissati\", \"prefissi\", \"preformati\", \"pregati\", \"pregiati\", \"pregiudicati\", \"pregustati\", \"preimpregnati\", \"prelevati\", \"premeditati\", \"premescolati\", \"premessi\", \"premiati\", \"premoniti\", \"premuniti\", \"premurati\", \"premuti\", \"prenotati\", \"preoccupati\", \"preordinati\", \"preparati\", \"prepensionati\", \"prepigmentati\", \"preposti\", \"preprogrammati\", \"preraffreddati\", \"prerefrigerati\", \"preregistrati\", \"preregolati\", \"preriscaldati\", \"presi\", \"presagiti\", \"presaputi\", \"presaseli\", \"prescelti\", \"prescritti\", \"preseduti\", \"presegnalati\", \"preselezionati\", \"presentati\", \"presentiti\", \"preservati\", \"presidiati\", \"presieduti\", \"presi\", \"pressati\", \"pressi\", \"pressurizzati\", \"prestabiliti\", \"prestampati\", \"prestati\", \"prestigiati\", \"presunti\", \"presupposti\", \"pretermessi\", \"pretesi\", \"pretrattati\", \"prevaricati\", \"preveduti\", \"prevenduti\", \"preventivati\", \"prevenuti\", \"previsti\", \"prezzati\", \"prezzolati\", \"principiati\", \"privatizzati\", \"privati\", \"privilegiati\", \"problematizzati\", \"procacciati\", \"processati\", \"proclamati\", \"procrastinati\", \"procreati\", \"procurati\", \"prodigati\", \"prodotti\", \"profanati\", \"proferiti\", \"professati\", \"professionalizzati\", \"profetati\", \"profetizzati\", \"profferiti\", \"profilati\", \"profondati\", \"profumati\", \"profusi\", \"progettati\", \"prognosticati\", \"programmati\", \"proibiti\", \"proiettati\", \"proletarizzati\", \"prolungati\", \"promanati\", \"promessi\", \"promossi\", \"promozionati\", \"promulgati\", \"pronosticati\", \"pronunciati\", \"pronunziati\", \"propagandati\", \"propagati\", \"propagginati\", \"propalati\", \"propinati\", \"propiziati\", \"proporzionati\", \"proposti\", \"propugnati\", \"propulsi\", \"prorogati\", \"prosciolti\", \"prosciugati\", \"proscritti\", \"proseguiti\", \"prospettati\", \"prosternati\", \"prostesi\", \"prostituiti\", \"prostrati\", \"prosunti\", \"protesi\", \"protestati\", \"protetti\", \"protocollati\", \"protonati\", \"protratti\", \"protrusi\", \"provati\", \"proveduti\", \"provincializzati\", \"provisti\", \"provocati\", \"provveduti\", \"provvisti\", \"psicanalizzati\", \"psichiatrizzati\", \"psicoanalizzati\", \"psicologizzati\", \"pubblicati\", \"pubblicizzati\", \"puddellati\", \"pugnalati\", \"puliti\", \"pungolati\", \"puniti\", \"puntati\", \"punteggiati\", \"puntellati\", \"punti\", \"puntualizzati\", \"punzecchiati\", \"punzonati\", \"purgati\", \"purificati\", \"putiti\", \"putrefatti\", \"putriti\", \"quadrati\", \"quadrettati\", \"quadriennalizzati\", \"quadruplicati\", \"qualificati\", \"quantificati\", \"quantizzati\", \"querelati\", \"questuati\", \"quetati\", \"quietanzati\", \"quietati\", \"quintessenziati\", \"quintuplicati\", \"quotati\", \"quotizzati\", \"rabberciati\", \"rabboccati\", \"rabboniti\", \"rabbuffati\", \"rabuffati\", \"raccapezzati\", \"raccapricciati\", \"raccattati\", \"raccerchiati\", \"raccesi\", \"racchetati\", \"racchiusi\", \"raccolti\", \"raccolti\", \"raccomandati\", \"raccomodati\", \"raccontati\", \"raccorciati\", \"raccorciti\", \"raccordati\", \"raccostati\", \"raccozzati\", \"racemizzati\", \"racimolati\", \"radazzati\", \"raddensati\", \"raddobbati\", \"raddolciti\", \"raddoppiati\", \"raddotti\", \"raddrizzati\", \"radiati\", \"radicalizzati\", \"radioassistiti\", \"radioattivati\", \"radiocomandati\", \"radiodiffusi\", \"radiografati\", \"radioguidati\", \"radiolocalizzati\", \"radiomarcati\", \"radiotelegrafati\", \"radiotrasmessi\", \"radunati\", \"raffazzonati\", \"raffermati\", \"raffigurati\", \"raffilati\", \"raffinati\", \"rafforzati\", \"raffreddati\", \"raffrenati\", \"raffrescati\", \"raffrontati\", \"raggelati\", \"raggentiliti\", \"ragghiati\", \"raggirati\", \"raggiunti\", \"raggiustati\", \"raggomitolati\", \"raggranchiati\", \"raggranchiti\", \"raggranellati\", \"raggrinzati\", \"raggrinziti\", \"raggrumati\", \"raggruppati\", \"raggruzzolati\", \"ragguagliati\", \"ralingati\", \"rallegrati\", \"rallentati\", \"ramati\", \"ramazzati\", \"rammagliati\", \"rammaricati\", \"rammemorati\", \"rammendati\", \"rammentati\", \"rammodernati\", \"rammolliti\", \"rammorbiditi\", \"rampognati\", \"randellati\", \"randomizzati\", \"rannicchiati\", \"rannuvolati\", \"ranzati\", \"rapati\", \"rapinati\", \"rapiti\", \"rappacificati\", \"rappati\", \"rappattumati\", \"rappezzati\", \"rapportati\", \"rappresantati\", \"rappresentati\", \"rappresi\", \"rarefatti\", \"rasati\", \"raschiati\", \"raschiettati\", \"rasentati\", \"rasi\", \"raspati\", \"rassegnati\", \"rasserenati\", \"rassettati\", \"rassicurati\", \"rassodati\", \"rassomigliati\", \"rassottigliati\", \"rassunti\", \"rastrellati\", \"rastremati\", \"rateati\", \"rateizzati\", \"ratificati\", \"ratinati\", \"rattizzati\", \"rattoppati\", \"rattorti\", \"rattrappiti\", \"rattristati\", \"rattristiti\", \"raunati\", \"ravvalorati\", \"ravveduti\", \"ravviati\", \"ravvicinati\", \"ravviluppati\", \"ravvisati\", \"ravvisti\", \"ravvivati\", \"ravvolti\", \"ravvoltolati\", \"razionalizzati\", \"razionati\", \"razziati\", \"razzolati\", \"realizzati\", \"reassunti\", \"recapitati\", \"recati\", \"receduti\", \"recensiti\", \"recepiti\", \"recidivati\", \"recintati\", \"recinti\", \"reciprocati\", \"recisi\", \"recitati\", \"reclamati\", \"reclamizzati\", \"reclinati\", \"reclusi\", \"reclutati\", \"recuperati\", \"redarguiti\", \"redatti\", \"redazzati\", \"redduti\", \"redenti\", \"redistribuiti\", \"redotti\", \"referenziati\", \"refertati\", \"refilati\", \"reflessi\", \"reflettuti\", \"refranti\", \"refrigerati\", \"regalati\", \"regimati\", \"regimentati\", \"regionalizzati\", \"registrati\", \"regolamentati\", \"regolarizzati\", \"regolati\", \"reidratati\", \"reificati\", \"reimbarcati\", \"reimmersi\", \"reimmessi\", \"reimparati\", \"reimpastati\", \"reimpiantati\", \"reimpiegati\", \"reimportati\", \"reimpostati\", \"reincarcerati\", \"reincaricati\", \"reincarnati\", \"reincisi\", \"reincontrati\", \"reindirizzati\", \"reindustrializzati\", \"reinfettati\", \"reingaggiati\", \"reinizializzati\", \"reinnestati\", \"reinoltrati\", \"reinscritti\", \"reinsediati\", \"reinseriti\", \"reinstallati\", \"reinstaurati\", \"reintegrati\", \"reinterpretati\", \"reintitolati\", \"reintrodotti\", \"reinventati\", \"reinvestiti\", \"reiterati\", \"relativizzati\", \"relazionati\", \"relegati\", \"remixati\", \"remunerati\", \"renderizzati\", \"reperiti\", \"repertati\", \"replicati\", \"repressi\", \"repulsi\", \"reputati\", \"requisiti\", \"rescissi\", \"resecati\", \"resettati\", \"residuati\", \"resinificati\", \"resi\", \"resolati\", \"resolti\", \"respinti\", \"respirati\", \"responsabilizzati\", \"resposti\", \"restaurati\", \"restituiti\", \"resunti\", \"resuscitati\", \"reticolati\", \"retinati\", \"retribuiti\", \"retroceduti\", \"retrocessi\", \"retrodatati\", \"rettificati\", \"retti\", \"reumatizzati\", \"revisionati\", \"revocati\", \"riabbassati\", \"riabbelliti\", \"riabbonati\", \"riabbottonati\", \"riabbracciati\", \"riabilitati\", \"riabitati\", \"riabituati\", \"riaccaduti\", \"riaccasati\", \"riaccesi\", \"riaccettati\", \"riacchiappati\", \"riacciuffati\", \"riaccolti\", \"riaccomodati\", \"riaccompagnati\", \"riaccordati\", \"riaccostati\", \"riaccreditati\", \"riacquisiti\", \"riacquistati\", \"riacutizzati\", \"riadattati\", \"riaddestrati\", \"riaddormentati\", \"riadoperati\", \"riaffacciati\", \"riaffermati\", \"riafferrati\", \"riaffiorati\", \"riaffittati\", \"riaffrontati\", \"riagganciati\", \"riaggiornati\", \"riaggiustati\", \"riaggravati\", \"riaggregati\", \"riagguantati\", \"rialimentati\", \"riallacciati\", \"riallargati\", \"riallineati\", \"riallocati\", \"riallungati\", \"rialzati\", \"riamati\", \"riambientati\", \"riammalati\", \"riammessi\", \"riammodernati\", \"riammogliati\", \"rianimati\", \"riannessi\", \"riannodati\", \"riannunciati\", \"riaperti\", \"riappacificati\", \"riappaltati\", \"riapparecchiati\", \"riappariti\", \"riappesi\", \"riappiccicati\", \"riapplicati\", \"riappresi\", \"riapprodati\", \"riappropriati\", \"riapprovati\", \"riarmati\", \"riarrangiati\", \"riarredati\", \"riascoltati\", \"riasfaltati\", \"riassaliti\", \"riassaporati\", \"riassegnati\", \"riassemblati\", \"riassestati\", \"riassettati\", \"riassicurati\", \"riassociati\", \"riassopiti\", \"riassorbiti\", \"riassunti\", \"riattaccati\", \"riattati\", \"riattesi\", \"riattinti\", \"riattivati\", \"riattizzati\", \"riattraversati\", \"riaumentati\", \"riavuti\", \"riavventati\", \"riavvertiti\", \"riavviati\", \"riavvicinati\", \"riavvinti\", \"riavvisati\", \"riavvistati\", \"riavvolti\", \"riazzuffati\", \"ribaciati\", \"ribaditi\", \"ribaltati\", \"ribassati\", \"ribattezzati\", \"ribattuti\", \"ribellati\", \"ribenedetti\", \"ribevuti\", \"ributtati\", \"ricacciati\", \"ricalati\", \"ricalcati\", \"ricalcificati\", \"ricalcitrati\", \"ricalcolati\", \"ricalibrati\", \"ricamati\", \"ricambiati\", \"ricanalizzati\", \"ricandidati\", \"ricantati\", \"ricapitalizzati\", \"ricapitolati\", \"ricaricati\", \"ricategorizzati\", \"ricattati\", \"ricavati\", \"ricelebrati\", \"ricercati\", \"ricetrasmessi\", \"ricettati\", \"ricevuti\", \"richiamati\", \"richiesti\", \"richiusi\", \"riciclati\", \"ricinti\", \"ricircolati\", \"riclassificati\", \"ricodificati\", \"ricollegati\", \"ricollocati\", \"ricolmati\", \"ricolonizzati\", \"ricolorati\", \"ricoloriti\", \"ricoltivati\", \"ricombinati\", \"ricominciati\", \"ricommessi\", \"ricompariti\", \"ricompattati\", \"ricompensati\", \"ricomperati\", \"ricompilati\", \"ricompiuti\", \"ricomposti\", \"ricomprati\", \"ricompressi\", \"ricomunicati\", \"riconceduti\", \"riconcessi\", \"riconciliati\", \"ricondizionati\", \"ricondotti\", \"riconfermati\", \"riconfezionati\", \"riconfigurati\", \"riconfortati\", \"riconfusi\", \"ricongelati\", \"ricongiunti\", \"riconnessi\", \"riconosciuti\", \"riconquistati\", \"riconsacrati\", \"riconsegnati\", \"riconsiderati\", \"riconsigliati\", \"riconsolati\", \"ricontati\", \"ricontattati\", \"ricontrattati\", \"ricontratti\", \"ricontrollati\", \"riconvalidati\", \"riconvenuti\", \"riconvertiti\", \"riconvinti\", \"riconvocati\", \"riconvogliati\", \"ricoperti\", \"ricopiati\", \"ricordati\", \"ricoricati\", \"ricorretti\", \"ricosparsi\", \"ricostituiti\", \"ricostretti\", \"ricostruiti\", \"ricotti\", \"ricoverati\", \"ricreati\", \"ricristallizzati\", \"ricrocifissi\", \"ricuciti\", \"ricuperati\", \"ricusati\", \"ridati\", \"ridecorati\", \"ridefiniti\", \"ridenominati\", \"ridestati\", \"rideterminati\", \"ridetti\", \"ridicolizzati\", \"ridigitati\", \"ridimensionati\", \"ridipinti\", \"ridiscesi\", \"ridisciolti\", \"ridisciplinati\", \"ridiscussi\", \"ridisegnati\", \"ridisfatti\", \"ridisposti\", \"ridistesi\", \"ridistinti\", \"ridistribuiti\", \"ridivisi\", \"ridomandati\", \"ridonati\", \"ridondati\", \"ridorati\", \"ridotati\", \"ridotti\", \"ridovuti\", \"riecheggiati\", \"riedificati\", \"rieducati\", \"rielaborati\", \"rieletti\", \"riemessi\", \"riempiti\", \"riempiuti\", \"rientrati\", \"riepilogati\", \"riequilibrati\", \"riequipaggiati\", \"riesaminati\", \"rieseguiti\", \"riesercitati\", \"riesplosi\", \"riesportati\", \"riesposti\", \"riespressi\", \"riespulsi\", \"riestesi\", \"riesumati\", \"rietichettati\", \"rievaporati\", \"rievocati\", \"rifabbricati\", \"rifasciati\", \"rifatti\", \"rifenduti\", \"riferiti\", \"rifermati\", \"rifermentati\", \"rifessi\", \"rificcati\", \"rifilati\", \"rifiltrati\", \"rifinanziati\", \"rifiniti\", \"rifirmati\", \"rifischiati\", \"rifissi\", \"rifiutati\", \"riflessi\", \"riflettuti\", \"rifocillati\", \"rifoderati\", \"rifondati\", \"riforestati\", \"riforgiati\", \"riformati\", \"riformattati\", \"riformulati\", \"riforniti\", \"rifranti\", \"rifritti\", \"rifrugati\", \"rifuggiti\", \"rifugiati\", \"rifusi\", \"rigassificati\", \"rigati\", \"rigelati\", \"rigenerati\", \"rigettati\", \"righettati\", \"rigiocati\", \"rigirati\", \"rigiudicati\", \"rigiunti\", \"rigoduti\", \"rigonfiati\", \"rigovernati\", \"riguadagnati\", \"riguardati\", \"rigurgitati\", \"rilanciati\", \"rilasciati\", \"rilassati\", \"rilavati\", \"rilavorati\", \"rilegati\", \"riletti\", \"rilevati\", \"rilocalizzati\", \"rimagliati\", \"rimandati\", \"rimaneggiati\", \"rimangiati\", \"rimappati\", \"rimarcati\", \"rimarchiati\", \"rimarginati\", \"rimaritati\", \"rimasticati\", \"rimati\", \"rimbacuccati\", \"rimbaldanziti\", \"rimbarcati\", \"rimbeccati\", \"rimbecilliti\", \"rimbelliti\", \"rimbiancati\", \"rimbionditi\", \"rimboccati\", \"rimbombati\", \"rimborsati\", \"rimboscati\", \"rimboschiti\", \"rimbrottati\", \"rimediati\", \"rimembrati\", \"rimemorati\", \"rimenati\", \"rimeritati\", \"rimescolati\", \"rimessi\", \"rimestati\", \"rimilitarizzati\", \"rimirati\", \"rimischiati\", \"rimisurati\", \"rimodellati\", \"rimodernati\", \"rimodulati\", \"rimondati\", \"rimontati\", \"rimorchiati\", \"rimorsi\", \"rimossi\", \"rimostrati\", \"rimotivati\", \"rimpacchettati\", \"rimpadroniti\", \"rimpaginati\", \"rimpagliati\", \"rimpannucciati\", \"rimpastati\", \"rimpatriati\", \"rimpiallacciati\", \"rimpianti\", \"rimpiattati\", \"rimpiazzati\", \"rimpiccioliti\", \"rimpiccoliti\", \"rimpiegati\", \"rimpinguati\", \"rimpinzati\", \"rimpolpati\", \"rimpossessati\", \"rimpressi\", \"rimproverati\", \"rimuginati\", \"rimunerati\", \"rimunti\", \"rimusicati\", \"rimutati\", \"rinarrati\", \"rinascosti\", \"rincalcati\", \"rincalzati\", \"rincamminati\", \"rincantucciati\", \"rincarati\", \"rincarcerati\", \"rincarnati\", \"rincentrati\", \"rinchiesti\", \"rinchiodati\", \"rinchiusi\", \"rincitrulliti\", \"rinciviliti\", \"rincoglioniti\", \"rincollati\", \"rincominciati\", \"rincontrati\", \"rincoraggiati\", \"rincorati\", \"rincorporati\", \"rincorsi\", \"rincretiniti\", \"rincruditi\", \"rinculcati\", \"rincuorati\", \"rindossati\", \"rinduriti\", \"rinegoziati\", \"rinfacciati\", \"rinfagottati\", \"rinfiammati\", \"rinfiancati\", \"rinfilati\", \"rinfittiti\", \"rinfocolati\", \"rinfoderati\", \"rinforzati\", \"rinfrancati\", \"rinfranti\", \"rinfrescati\", \"rinfusi\", \"ringagliarditi\", \"ringalluzziti\", \"ringiovaniti\", \"ringioveniti\", \"ringoiati\", \"ringorgati\", \"ringraziati\", \"ringuainati\", \"rinnamorati\", \"rinnegati\", \"rinnestati\", \"rinnovati\", \"rinnovellati\", \"rinociuti\", \"rinomati\", \"rinominati\", \"rinormalizzati\", \"rinquadrati\", \"rinsaccati\", \"rinsaldati\", \"rinsanguati\", \"rinselvatichiti\", \"rinselvati\", \"rinserrati\", \"rintanati\", \"rintasati\", \"rintascati\", \"rintavolati\", \"rinteneriti\", \"rinterrati\", \"rinterrogati\", \"rintesi\", \"rintiepiditi\", \"rintoccati\", \"rintonacati\", \"rintontiti\", \"rintorpiditi\", \"rintracciati\", \"rintrodotti\", \"rintronati\", \"rintuzzati\", \"rinunciati\", \"rinunziati\", \"rinutriti\", \"rinvangati\", \"rinvasati\", \"rinvenuti\", \"rinverditi\", \"rinvestiti\", \"rinviati\", \"rinvigoriti\", \"rinviliti\", \"rinvitati\", \"rinvoltati\", \"rinvolti\", \"rinvoltolati\", \"rinzaffati\", \"rinzeppati\", \"riobbligati\", \"rioccupati\", \"riofferti\", \"rioffesi\", \"rioperati\", \"riordinati\", \"riorganizzati\", \"riorientati\", \"riosservati\", \"riottenuti\", \"riottimizzati\", \"riotturati\", \"ripagati\", \"riparametrizzati\", \"riparati\", \"ripartiti\", \"ripassati\", \"ripercorsi\", \"ripercossi\", \"riperduti\", \"ripersi\", \"ripesati\", \"ripescati\", \"ripestati\", \"ripetuti\", \"ripianati\", \"ripianificati\", \"ripiantati\", \"ripianti\", \"ripicchiati\", \"ripiegati\", \"ripigliati\", \"ripinti\", \"ripiovuti\", \"ripitturati\", \"riplasmati\", \"ripolarizzati\", \"ripopolati\", \"riportati\", \"riporti\", \"riposati\", \"riposizionati\", \"riposseduti\", \"riposti\", \"ripotuti\", \"ripresentati\", \"ripresi\", \"riprestati\", \"ripretesi\", \"riprincipiati\", \"ripristinati\", \"riprivatizzati\", \"riprodotti\", \"riprogettati\", \"riprogrammati\", \"ripromessi\", \"riproposti\", \"riprotetti\", \"riprovati\", \"riprovveduti\", \"riprovvisti\", \"ripubblicati\", \"ripudiati\", \"ripugnati\", \"ripuliti\", \"ripuntati\", \"ripunti\", \"ripurgati\", \"riputati\", \"riquadrati\", \"riqualificati\", \"riresi\", \"rirotti\", \"risaldati\", \"risaliti\", \"risaltati\", \"risalutati\", \"risanati\", \"risaputi\", \"risarciti\", \"riscalati\", \"riscaldati\", \"riscattati\", \"riscelti\", \"riscesi\", \"rischiarati\", \"rischiati\", \"risciacquati\", \"risciolti\", \"riscommessi\", \"riscontati\", \"riscontrati\", \"risconvolti\", \"riscoperti\", \"riscoppiati\", \"riscorsi\", \"riscossi\", \"riscritti\", \"risecati\", \"riseduti\", \"risegati\", \"risegnati\", \"riselciati\", \"riselezionati\", \"riseminati\", \"risentiti\", \"riseppelliti\", \"riserbati\", \"riservati\", \"risicati\", \"risigillati\", \"risistemati\", \"risi\", \"risoffiati\", \"risoggiunti\", \"risolati\", \"risolidificati\", \"risollevati\", \"risolti\", \"risommati\", \"risommersi\", \"risonati\", \"risorpassati\", \"risospesi\", \"risospinti\", \"risottomessi\", \"risparmiati\", \"risparsi\", \"rispecchiati\", \"rispediti\", \"rispenti\", \"rispersi\", \"rispettati\", \"rispiegati\", \"rispinti\", \"rispolverati\", \"risposati\", \"risposti\", \"rissati\", \"ristabiliti\", \"ristagnati\", \"ristampati\", \"ristaurati\", \"ristesi\", \"ristilizzati\", \"ristorati\", \"ristretti\", \"ristrutti\", \"ristrutturati\", \"ristuccati\", \"ristudiati\", \"risucchiati\", \"risultati\", \"risuolati\", \"risuonati\", \"risuscitati\", \"risvegliati\", \"risvolti\", \"ritagliati\", \"ritarati\", \"ritardati\", \"ritemprati\", \"ritentati\", \"ritenuti\", \"ritersi\", \"ritesi\", \"ritinti\", \"ritirati\", \"ritoccati\", \"ritolti\", \"ritorti\", \"ritracciati\", \"ritradotti\", \"ritrascorsi\", \"ritrascritti\", \"ritrasferiti\", \"ritrasformati\", \"ritrasmessi\", \"ritrasposti\", \"ritrattati\", \"ritratti\", \"ritrovati\", \"ritualizzati\", \"rituffati\", \"riuditi\", \"riunificati\", \"riuniti\", \"riusati\", \"riutilizzati\", \"rivaccinati\", \"rivaleggiati\", \"rivalorizzati\", \"rivalsi\", \"rivalutati\", \"rivangati\", \"riveduti\", \"rivelati\", \"rivendicati\", \"rivenduti\", \"riverberati\", \"riveriti\", \"riverniciati\", \"riversati\", \"rivestiti\", \"rivettati\", \"rivinti\", \"rivisitati\", \"rivissuti\", \"rivisti\", \"rivitalizzati\", \"rivivificati\", \"rivoltati\", \"rivolti\", \"rivoltolati\", \"rivoluti\", \"rivoluzionati\", \"rizappati\", \"rizzati\", \"robotizzati\", \"rodati\", \"rogati\", \"rollati\", \"romanizzati\", \"romanticizzati\", \"romanzati\", \"roncolati\", \"rosicati\", \"rosicchiati\", \"rosi\", \"rosolati\", \"rotacizzati\", \"rotati\", \"roteati\", \"rotolati\", \"rottamati\", \"rotti\", \"rovesciati\", \"rovinati\", \"rovistati\", \"rubacchiati\", \"rubati\", \"rullati\", \"ruminati\", \"ruotati\", \"russificati\", \"ruzzolati\", \"sabbiati\", \"sabotati\", \"saccarificati\", \"saccheggiati\", \"sacralizzati\", \"sacramentati\", \"sacrificati\", \"saettati\", \"saggiati\", \"sagginati\", \"sagomati\", \"salamoiati\", \"salariati\", \"salassati\", \"salati\", \"saldati\", \"salificati\", \"salinizzati\", \"saliti\", \"salmeggiati\", \"salmistrati\", \"salpati\", \"saltati\", \"salutati\", \"salvaguardati\", \"salvati\", \"sanati\", \"sanciti\", \"sanforizzati\", \"sanificati\", \"sanitizzati\", \"santificati\", \"sanzionati\", \"saponificati\", \"saputi\", \"sarchiati\", \"sarchiellati\", \"sartiati\", \"satellizzati\", \"satinati\", \"satireggiati\", \"satisfatti\", \"satollati\", \"saturati\", \"saziati\", \"sbaccellati\", \"sbaciucchiati\", \"sbafati\", \"sbaffati\", \"sbalestrati\", \"sballati\", \"sballottati\", \"sballottolati\", \"sbalorditi\", \"sbalzati\", \"sbancati\", \"sbandati\", \"sbandierati\", \"sbanditi\", \"sbaraccati\", \"sbaragliati\", \"sbarazzati\", \"sbarbati\", \"sbarcati\", \"sbardati\", \"sbarrati\", \"sbassati\", \"sbastiti\", \"sbatacchiati\", \"sbattezzati\", \"sbattuti\", \"sbeccati\", \"sbeffeggiati\", \"sbellicati\", \"sbendati\", \"sbertucciati\", \"sbiaditi\", \"sbiancati\", \"sbianchiti\", \"sbiellati\", \"sbiettati\", \"sbigottiti\", \"sbilanciati\", \"sbirbati\", \"sbirciati\", \"sbizzarriti\", \"sbloccati\", \"sbobinati\", \"sboccati\", \"sbocconcellati\", \"sbollentati\", \"sbolognati\", \"sborniati\", \"sborsati\", \"sboscati\", \"sbottonati\", \"sbozzati\", \"sbozzimati\", \"sbozzolati\", \"sbracati\", \"sbracciati\", \"sbraciati\", \"sbraitati\", \"sbranati\", \"sbrancati\", \"sbrattati\", \"sbreccati\", \"sbriciolati\", \"sbrigati\", \"sbrigliati\", \"sbrinati\", \"sbrindellati\", \"sbrodolati\", \"sbrogliati\", \"sbronzati\", \"sbruffati\", \"sbucciati\", \"sbudellati\", \"sbuffati\", \"sbugiardati\", \"sbullettati\", \"sbullonati\", \"sburrati\", \"scacazzati\", \"scacchiati\", \"scacciati\", \"scaccolati\", \"scadenzati\", \"scafati\", \"scaffalati\", \"scagionati\", \"scagliati\", \"scaglionati\", \"scalati\", \"scalcati\", \"scalcinati\", \"scaldati\", \"scalettati\", \"scalfati\", \"scalfiti\", \"scalmanati\", \"scaloppati\", \"scalpati\", \"scalpellati\", \"scalpellinati\", \"scaltriti\", \"scalzati\", \"scambiati\", \"scamiciati\", \"scamosciati\", \"scamozzati\", \"scampati\", \"scampatali\", \"scampati\", \"scamuffati\", \"scanalati\", \"scancellati\", \"scandagliati\", \"scandalizzati\", \"scanditi\", \"scannati\", \"scannellati\", \"scannerati\", \"scannerizati\", \"scannerizzati\", \"scansati\", \"scansionati\", \"scapecchiati\", \"scapezzati\", \"scapicollati\", \"scapigliati\", \"scapitozzati\", \"scapocchiati\", \"scappati\", \"scappellati\", \"scappottati\", \"scapricciati\", \"scapsulati\", \"scarabocchiati\", \"scaracchiati\", \"scaraventati\", \"scarcerati\", \"scardassati\", \"scardati\", \"scardinati\", \"scaricati\", \"scarificati\", \"scarmigliati\", \"scarnati\", \"scarnificati\", \"scarniti\", \"scarrellati\", \"scarrocciati\", \"scarrozzati\", \"scarruffati\", \"scartabellati\", \"scartati\", \"scartavetrati\", \"scartinati\", \"scartocciati\", \"scassati\", \"scassinati\", \"scatenati\", \"scattati\", \"scavalcati\", \"scavallati\", \"scavati\", \"scavezzati\", \"scazzottati\", \"scekerati\", \"scelti\", \"scempiati\", \"sceneggiati\", \"scernuti\", \"scervellati\", \"scesi\", \"sceverati\", \"schedati\", \"schedulati\", \"scheggiati\", \"scheletriti\", \"schematizzati\", \"schermati\", \"schermiti\", \"schermografati\", \"scherniti\", \"schiacciati\", \"schiaffati\", \"schiaffeggiati\", \"schiantati\", \"schiariti\", \"schiavardati\", \"schiavizzati\", \"schiccherati\", \"schierati\", \"schifati\", \"schinciati\", \"schioccati\", \"schiodati\", \"schiumati\", \"schiusi\", \"schivati\", \"schizzati\", \"schizzettati\", \"sciabolati\", \"sciabordati\", \"sciacquati\", \"scialacquati\", \"sciamanizzati\", \"sciamannati\", \"sciancati\", \"sciancrati\", \"scimmieggiati\", \"scimmiottati\", \"scinti\", \"scioccati\", \"sciolinati\", \"sciolti\", \"sciorinati\", \"scippati\", \"sciroppati\", \"scissi\", \"sciupacchiati\", \"sciupati\", \"sclamati\", \"sclerosati\", \"sclerotizzati\", \"scoccati\", \"scocciati\", \"scodati\", \"scodellati\", \"scoiati\", \"scolarizzati\", \"scolati\", \"scollacciati\", \"scollati\", \"scollegati\", \"scolorati\", \"scoloriti\", \"scolpati\", \"scolpiti\", \"scombaciati\", \"scombinati\", \"scombussolati\", \"scommessi\", \"scomodati\", \"scompaginati\", \"scompagnati\", \"scompartiti\", \"scompattati\", \"scompensati\", \"scompiacuti\", \"scompigliati\", \"scomposti\", \"scomputati\", \"scomunicati\", \"sconcertati\", \"sconciati\", \"sconclusi\", \"sconfessati\", \"sconficcati\", \"sconﬁtti\", \"sconfortati\", \"sconfusi\", \"scongelati\", \"scongiurati\", \"sconnessi\", \"sconosciuti\", \"sconquassati\", \"sconsacrati\", \"sconsigliati\", \"sconsolati\", \"scontati\", \"scontentati\", \"scontornati\", \"scontorti\", \"scontrati\", \"sconvolti\", \"scopati\", \"scoperchiati\", \"scoperti\", \"scopiazzati\", \"scoraggiati\", \"scoraggiti\", \"scorati\", \"scorazzati\", \"scorciati\", \"scorciti\", \"scordati\", \"scoreggiati\", \"scorificati\", \"scornati\", \"scorniciati\", \"scoronati\", \"scorporati\", \"scorrazzati\", \"scorreggiati\", \"scorretti\", \"scorsi\", \"scortati\", \"scortecciati\", \"scorticati\", \"scorti\", \"scorzati\", \"scoscesi\", \"scosciati\", \"scossi\", \"scostati\", \"scostolati\", \"scotennati\", \"scoticati\", \"scotolati\", \"scotomizzati\", \"scottati\", \"scotti\", \"scovati\", \"scoverti\", \"scozzati\", \"scozzonati\", \"screditati\", \"scremati\", \"screpolati\", \"screziati\", \"scribacchiati\", \"scriminati\", \"scristianizzati\", \"scritti\", \"scritturati\", \"scroccati\", \"scrocchiati\", \"scrollati\", \"scrostati\", \"scrutati\", \"scrutinati\", \"scuciti\", \"scudisciati\", \"scuffiati\", \"sculacciati\", \"sculettati\", \"scuoiati\", \"scuriosati\", \"scuriti\", \"scusati\", \"sdaziati\", \"sdebitati\", \"sdegnati\", \"sdemanializzati\", \"sdentati\", \"sdilinquiti\", \"sdoganati\", \"sdoluti\", \"sdoppiati\", \"sdraiati\", \"sdrammatizzati\", \"sdruciti\", \"secati\", \"seccati\", \"secernuti\", \"secolarizzati\", \"secondati\", \"secretati\", \"secreti\", \"sedati\", \"sedentarizzati\", \"sedotti\", \"segati\", \"seghettati\", \"segmentati\", \"segnalati\", \"segnati\", \"segnoreggiati\", \"segregati\", \"segretati\", \"seguitati\", \"seguiti\", \"selciati\", \"selezionati\", \"sellati\", \"sembrati\", \"sementati\", \"semicinti\", \"seminati\", \"semplificati\", \"senilizzati\", \"sensibilizzati\", \"sensorizzati\", \"sentenziati\", \"sentiti\", \"sentitaseli\", \"sentiti\", \"sentiti\", \"separati\", \"sepolti\", \"seppelliti\", \"sequenziati\", \"sequestrati\", \"serbati\", \"serrati\", \"serviti\", \"servoassistiti\", \"sessualizzati\", \"sestuplicati\", \"setacciati\", \"setificati\", \"settati\", \"settorializzati\", \"settuplicati\", \"seviziati\", \"sezionati\", \"sfaccettati\", \"sfagliati\", \"sfaldati\", \"sfalsati\", \"sfamati\", \"sfanalati\", \"sfangati\", \"sfarinati\", \"sfasati\", \"sfasciati\", \"sfatati\", \"sfatti\", \"sfavillati\", \"sfavoriti\", \"sfegatati\", \"sfeltrati\", \"sfenduti\", \"sferragliati\", \"sferrati\", \"sferzati\", \"sfessi\", \"sfiancati\", \"sfiatati\", \"sfiati\", \"sfibbiati\", \"sfibrati\", \"sfidati\", \"sfiduciati\", \"sfigurati\", \"sfilati\", \"sfilettati\", \"sfiniti\", \"sfioccati\", \"sfiorati\", \"sfittati\", \"sfocati\", \"sfociati\", \"sfoderati\", \"sfogati\", \"sfoggiati\", \"sfogliati\", \"sfollati\", \"sfoltiti\", \"sfondati\", \"sforacchiati\", \"sforati\", \"sforbiciati\", \"sformati\", \"sfornaciati\", \"sfornati\", \"sforniti\", \"sforzati\", \"sfottuti\", \"sfracellati\", \"sfrangiati\", \"sfrascati\", \"sfratati\", \"sfrattati\", \"sfrecciati\", \"sfregati\", \"sfregiati\", \"sfrenati\", \"sfrisati\", \"sfrondati\", \"sfrucugliati\", \"sfruculiati\", \"sfruttati\", \"sfumati\", \"sfuocati\", \"sgamati\", \"sganasciati\", \"sganciati\", \"sgarbugliati\", \"sgattaiolati\", \"sgelati\", \"sghiacciati\", \"sgocciolati\", \"sgolati\", \"sgomberati\", \"sgombrati\", \"sgomentati\", \"sgominati\", \"sgomitati\", \"sgomitolati\", \"sgonfiati\", \"sgorbiati\", \"sgottati\", \"sgovernati\", \"sgozzati\", \"sgraffiati\", \"sgraffignati\", \"sgranati\", \"sgranchiti\", \"sgranellati\", \"sgrassati\", \"sgravati\", \"sgretolati\", \"sgridati\", \"sgrommati\", \"sgrondati\", \"sgroppati\", \"sgrossati\", \"sgrovigliati\", \"sgrugnati\", \"sguainati\", \"sgualciti\", \"sguanciati\", \"sguarniti\", \"sguinzagliati\", \"sgusciati\", \"shakerati\", \"shoccati\", \"shuntati\", \"sigillati\", \"siglati\", \"significati\", \"signoreggiati\", \"silenziati\", \"silicizzati\", \"sillabati\", \"sillogizzati\", \"silurati\", \"simboleggiati\", \"simbolizzati\", \"simmetrizzati\", \"simpatizzati\", \"simulati\", \"sincerati\", \"sincopati\", \"sincretizzati\", \"sincronizzati\", \"sindacalizzati\", \"sindacati\", \"singolarizzati\", \"sinistrati\", \"sinizzati\", \"sinterizzati\", \"sintetizzati\", \"sintonizzati\", \"siringati\", \"sistematizzati\", \"sistemati\", \"situati\", \"slabbrati\", \"slacciati\", \"slamati\", \"slanciati\", \"slappolati\", \"slargati\", \"slavizzati\", \"slegati\", \"slentati\", \"slinguati\", \"slogati\", \"sloggati\", \"sloggiati\", \"slombati\", \"slungati\", \"smaccati\", \"smacchiati\", \"smagliati\", \"smagnetizzati\", \"smagriti\", \"smaliziati\", \"smallati\", \"smaltati\", \"smaltiti\", \"smammati\", \"smanacciati\", \"smangiati\", \"smantellati\", \"smarcati\", \"smarginati\", \"smarriti\", \"smascellati\", \"smascherati\", \"smaterializzati\", \"smattonati\", \"smembrati\", \"smentiti\", \"smerciati\", \"smerdati\", \"smerigliati\", \"smerlati\", \"smerlettati\", \"smessali\", \"smessi\", \"smezzati\", \"smidollati\", \"smielati\", \"smilitarizzati\", \"sminati\", \"sminuiti\", \"sminuzzati\", \"smistati\", \"smitizzati\", \"smobiliati\", \"smobilitati\", \"smobilizzati\", \"smoccolati\", \"smollicati\", \"smonacati\", \"smontati\", \"smorbati\", \"smorzati\", \"smossi\", \"smozzicati\", \"smunti\", \"smurati\", \"smussati\", \"smutandati\", \"snaturati\", \"snazionalizzati\", \"snebbiati\", \"snelliti\", \"snervati\", \"snidati\", \"sniffati\", \"snobbati\", \"snocciolati\", \"snodati\", \"snudati\", \"sobbarcati\", \"sobbolliti\", \"sobillati\", \"socchiusi\", \"soccorsi\", \"soddisfatti\", \"sodisfatti\", \"sodomizzati\", \"sofferiti\", \"soffermati\", \"sofferti\", \"soffiati\", \"soffocati\", \"soffregati\", \"soffritti\", \"soffusi\", \"sofisticati\", \"soggettivati\", \"soggettivizzati\", \"sogghignati\", \"soggiogati\", \"soggiunti\", \"sogguardati\", \"sognati\", \"solarizzati\", \"solcati\", \"soleggiati\", \"solennizzati\", \"solfeggiati\", \"solfitati\", \"solfonati\", \"solforati\", \"solidificati\", \"soliti\", \"sollazzati\", \"sollecitati\", \"solleticati\", \"sollevati\", \"solti\", \"solubilizzati\", \"soluti\", \"soluzionati\", \"solvatati\", \"somatizzati\", \"someggiati\", \"somigliati\", \"sommati\", \"sommersi\", \"sommessi\", \"somministrati\", \"sommossi\", \"sonati\", \"sondati\", \"sonorizzati\", \"sopiti\", \"soppalcati\", \"soppesati\", \"soppiantati\", \"sopportati\", \"sopposti\", \"soppressi\", \"sopraddotati\", \"sopraeccitati\", \"sopraedificati\", \"sopraelevati\", \"sopraffati\", \"sopraffatti\", \"sopraggiunti\", \"sopraintesi\", \"soprammessi\", \"soprannominati\", \"sopraposti\", \"soprappresi\", \"soprascritti\", \"sopraspesi\", \"soprassaturati\", \"soprasseduti\", \"sopravanzati\", \"sopravvalutati\", \"sopravveduti\", \"sopravvinti\", \"sopravvisti\", \"sopreccitati\", \"sopredificati\", \"soprelevati\", \"soprintesi\", \"sorbettati\", \"sorbiti\", \"sorgiunti\", \"sormontati\", \"sorpassati\", \"sorpresi\", \"sorrasi\", \"sorretti\", \"sorseggiati\", \"sorteggiati\", \"sortiti\", \"sorvegliati\", \"sorvolati\", \"soscritti\", \"sospesi\", \"sospettati\", \"sospinti\", \"sospirati\", \"sostantivati\", \"sostanziati\", \"sostentati\", \"sostenuti\", \"sostituiti\", \"sottaciuti\", \"sotterrati\", \"sottesi\", \"sottintesi\", \"sottoalimentati\", \"sottocapitalizzati\", \"sottodivisi\", \"sottoesposti\", \"sottofirmati\", \"sottolineati\", \"sottomessi\", \"sottomurati\", \"sottopagati\", \"sottopassati\", \"sottoposti\", \"sottorappresentati\", \"sottorisi\", \"sottoscritti\", \"sottostimati\", \"sottosviluppati\", \"sottotitolati\", \"sottovalutati\", \"sottratti\", \"soverchiati\", \"sovesciati\", \"sovietizzati\", \"sovracapitalizzati\", \"sovraccaricati\", \"sovradimensionati\", \"sovraeccitati\", \"sovraesposti\", \"sovraffaticati\", \"sovraffollati\", \"sovraggiunti\", \"sovraimposti\", \"sovraintesi\", \"sovralimentati\", \"sovramodulati\", \"sovrappopolati\", \"sovrapposti\", \"sovrariscaldati\", \"sovrasaturati\", \"sovrascritti\", \"sovrastampati\", \"sovrastati\", \"sovrastimati\", \"sovrautilizzati\", \"sovreccitati\", \"sovresposti\", \"sovrimposti\", \"sovrintesi\", \"sovvenuti\", \"sovvenzionati\", \"sovvertiti\", \"spaccati\", \"spacchettati\", \"spacciati\", \"spaginati\", \"spaiati\", \"spalancati\", \"spalati\", \"spalcati\", \"spalleggiati\", \"spalmati\", \"spammati\", \"spampanati\", \"spampinati\", \"spanati\", \"spanciati\", \"spanduti\", \"spannati\", \"spannocchiati\", \"spansi\", \"spantanati\", \"spanti\", \"spaparacchiati\", \"spaparanzati\", \"spappolati\", \"sparati\", \"sparecchiati\", \"sparigliati\", \"spariti\", \"sparlati\", \"sparpagliati\", \"spartiti\", \"spassati\", \"spassatoseli\", \"spastoiati\", \"spaurati\", \"spauriti\", \"spaventati\", \"spazializzati\", \"spaziati\", \"spazieggiati\", \"spazientiti\", \"spazzati\", \"spazzolati\", \"specchiati\", \"specializzati\", \"specificati\", \"specillati\", \"specolati\", \"spediti\", \"spegnati\", \"spelacchiati\", \"spelati\", \"spellati\", \"spennacchiati\", \"spennati\", \"spennellati\", \"spenti\", \"spenzolati\", \"sperati\", \"sperimentati\", \"spernacchiati\", \"speronati\", \"sperperati\", \"spersonalizzati\", \"sperticati\", \"spesati\", \"spesi\", \"spessiti\", \"spettacolarizzati\", \"spettinati\", \"spezzati\", \"spezzettati\", \"spezziati\", \"spezzonati\", \"spiaccicati\", \"spianati\", \"spiantati\", \"spiati\", \"spiattellati\", \"spiazzati\", \"spiccati\", \"spicciati\", \"spiccicati\", \"spicciolati\", \"spicconati\", \"spidocchiati\", \"spiegati\", \"spiegazzati\", \"spietrati\", \"spifferati\", \"spigionati\", \"spignorati\", \"spigolati\", \"spigriti\", \"spillati\", \"spilluzzicati\", \"spiluccati\", \"spinti\", \"spintonati\", \"spiombati\", \"spiralizzati\", \"spirantizzati\", \"spirati\", \"spiritualizzati\", \"spiumati\", \"spizzicati\", \"spodestati\", \"spoetizzati\", \"spogliati\", \"spolettati\", \"spoliati\", \"spoliticizzati\", \"spollonati\", \"spolmonati\", \"spolpati\", \"spoltroniti\", \"spolverati\", \"spolverizzati\", \"spompati\", \"spompinati\", \"sponsorizzati\", \"spopolati\", \"spoppati\", \"sporcati\", \"sportati\", \"sporti\", \"sposati\", \"sposseduti\", \"spossessati\", \"spostati\", \"sposti\", \"sprangati\", \"sprecati\", \"spregiati\", \"spremuti\", \"spretati\", \"sprezzati\", \"sprigionati\", \"sprimacciati\", \"spromessi\", \"spronati\", \"sprotetti\", \"sprovincializzati\", \"sprovveduti\", \"sprovvisti\", \"spruzzati\", \"spugnati\", \"spulati\", \"spulciati\", \"spuntati\", \"spuntellati\", \"spupazzati\", \"spurgati\", \"sputacchiati\", \"sputati\", \"sputtanati\", \"squadernati\", \"squadrati\", \"squagliati\", \"squagliataseli\", \"squagliati\", \"squalificati\", \"squamati\", \"squarciati\", \"squartati\", \"squassati\", \"squattrinati\", \"squilibrati\", \"squinternati\", \"sradicati\", \"srotolati\", \"srugginiti\", \"stabbiati\", \"stabiliti\", \"stabilizzati\", \"stabulati\", \"staccati\", \"stacciati\", \"staffati\", \"staffilati\", \"staggiati\", \"staggiti\", \"stagionati\", \"stagliati\", \"stagnati\", \"stamburati\", \"stampati\", \"stampigliati\", \"stanati\", \"stancati\", \"standardizzati\", \"stangati\", \"stanziati\", \"stappati\", \"starati\", \"starnazzati\", \"stasati\", \"statalizzati\", \"statizzati\", \"statoci\", \"statoseni\", \"statuiti\", \"stazzati\", \"stazzonati\", \"steccacciati\", \"steccati\", \"stecchiti\", \"stecconati\", \"stemperati\", \"stempiati\", \"stenografati\", \"stereotipati\", \"steriliti\", \"sterilizzati\", \"sterpati\", \"sterrati\", \"sterzati\", \"stesi\", \"stigliati\", \"stigmatizzati\", \"stilati\", \"stilettati\", \"stilizzati\", \"stillati\", \"stimati\", \"stimolati\", \"stinti\", \"stipati\", \"stipendiati\", \"stipulati\", \"stiracchiati\", \"stirati\", \"stivati\", \"stizziti\", \"stoccati\", \"stolti\", \"stomacati\", \"stonati\", \"stondati\", \"stoppati\", \"storditi\", \"storicizzati\", \"stornati\", \"storpiati\", \"stortati\", \"storti\", \"stozzati\", \"strabenedetti\", \"strabuzzati\", \"stracannati\", \"straccati\", \"stracciati\", \"stracotti\", \"strafogati\", \"stragoduti\", \"stralciati\", \"stralodati\", \"stralunati\", \"stramaledetti\", \"stramortiti\", \"strangolati\", \"straniati\", \"straniti\", \"straorzati\", \"strapagati\", \"strapazzati\", \"straperduti\", \"strapersi\", \"strappati\", \"strasaputi\", \"strascicati\", \"strascinati\", \"strasformati\", \"stratificati\", \"strattonati\", \"stravaccati\", \"stravinti\", \"stravolti\", \"stravoluti\", \"straziati\", \"stregati\", \"stremati\", \"stressati\", \"striati\", \"stridulati\", \"strigati\", \"strigliati\", \"strillati\", \"striminziti\", \"strimpellati\", \"strinati\", \"stringati\", \"strisciati\", \"stritolati\", \"strizzati\", \"strofinati\", \"strombati\", \"strombazzati\", \"stroncati\", \"stronzati\", \"stropicciati\", \"stroppati\", \"stroppiati\", \"strozzati\", \"struccati\", \"strumentalizzati\", \"strumentati\", \"strusciati\", \"strutti\", \"strutturalizzati\", \"strutturati\", \"stuccati\", \"studiacchiati\", \"studiati\", \"stuellati\", \"stufati\", \"stupefatti\", \"stupiti\", \"stuprati\", \"sturati\", \"stutati\", \"stuzzicati\", \"suasi\", \"subaffittati\", \"subappaltati\", \"subbiati\", \"subdelegati\", \"subissati\", \"subiti\", \"sublicenziati\", \"sublimati\", \"sublocati\", \"subodorati\", \"subordinati\", \"subornati\", \"suburbanizzati\", \"sucati\", \"succhiati\", \"succhiellati\", \"succiati\", \"succinti\", \"succisi\", \"suddistinti\", \"suddivisi\", \"suffissati\", \"suffissi\", \"suffragati\", \"suffumicati\", \"suffusi\", \"suggellati\", \"suggeriti\", \"suggestionati\", \"suicidati\", \"sunteggiati\", \"sunti\", \"suolati\", \"suonati\", \"superati\", \"superpagati\", \"superraffreddati\", \"supervalutati\", \"supervisionati\", \"supplicati\", \"suppliti\", \"supportati\", \"supposti\", \"suppurati\", \"surclassati\", \"surfati\", \"surgelati\", \"surraffreddati\", \"surriscaldati\", \"surrogati\", \"survoltati\", \"suscitati\", \"susseguiti\", \"sussidiati\", \"sussunti\", \"sussurrati\", \"suturati\", \"svaccati\", \"svagati\", \"svaligiati\", \"svalutati\", \"svapati\", \"svariati\", \"svasati\", \"svecchiati\", \"svegliati\", \"svelati\", \"sveleniti\", \"sveltiti\", \"svelti\", \"svenati\", \"svenduti\", \"sventagliati\", \"sventati\", \"sventolati\", \"sventrati\", \"sverginati\", \"svergognati\", \"svergolati\", \"sverminati\", \"sverniciati\", \"svestiti\", \"svettati\", \"svezzati\", \"sviati\", \"svignatoseli\", \"svigoriti\", \"sviliti\", \"svillaneggiati\", \"sviluppati\", \"svinati\", \"svincolati\", \"sviolinati\", \"svirgolati\", \"svirilizzati\", \"svisati\", \"sviscerati\", \"svitati\", \"sviticchiati\", \"svolati\", \"svolazzati\", \"svolti\", \"svoluti\", \"svuotati\", \"tabuizzati\", \"tabulati\", \"taccati\", \"taccheggiati\", \"tacciati\", \"tacitati\", \"taciuti\", \"tagliati\", \"taglieggiati\", \"tagliuzzati\", \"talebanizzati\", \"tallonati\", \"tampinati\", \"tamponati\", \"tanguti\", \"tannati\", \"tappati\", \"tappezzati\", \"tarati\", \"tardati\", \"targati\", \"tariffati\", \"tarlati\", \"tarmati\", \"taroccati\", \"tarpati\", \"tartagliati\", \"tartassati\", \"tartufati\", \"tassati\", \"tassellati\", \"tastati\", \"tasteggiati\", \"tatuati\", \"tecnicizzati\", \"tecnologizzati\", \"tedeschizzati\", \"tediati\", \"teflonati\", \"telecomandati\", \"telecontrollati\", \"telediffusi\", \"telefonati\", \"telegrafati\", \"teleguidati\", \"telematizzati\", \"telemetrati\", \"teleradiotrasmessi\", \"teletrasmessi\", \"teletrasportati\", \"tematizzati\", \"temperati\", \"tempestati\", \"tempificati\", \"templatizzati\", \"temporizzati\", \"temprati\", \"temuti\", \"tentati\", \"tenuti\", \"teologizzati\", \"teorizzati\", \"tepefatti\", \"terebrati\", \"terminati\", \"termostatati\", \"terrazzati\", \"terrificati\", \"terrorizzati\", \"tersi\", \"terzarolati\", \"terziarizzati\", \"terziati\", \"tesati\", \"tesaurizzati\", \"tesi\", \"tesserati\", \"testati\", \"testificati\", \"testimoniati\", \"timbrati\", \"tindalizzati\", \"tinteggiati\", \"tinti\", \"tipicizzati\", \"tipizzati\", \"tippati\", \"tiranneggiati\", \"tirati\", \"titillati\", \"titolati\", \"toccati\", \"toelettati\", \"tollerati\", \"tolti\", \"tonalizzati\", \"tonificati\", \"tonneggiati\", \"tonsurati\", \"torchiati\", \"tormentati\", \"tornatoseni\", \"torniti\", \"torrefatti\", \"torti\", \"tortoreggiati\", \"torturati\", \"tosati\", \"toscaneggiati\", \"toscanizzati\", \"tostati\", \"totalizzati\", \"traboccati\", \"trabuccati\", \"tracannati\", \"tracciati\", \"traditi\", \"tradotti\", \"trafficati\", \"trafilati\", \"trafitti\", \"traforati\", \"trafugati\", \"traghettati\", \"traguardati\", \"trainati\", \"tralasciati\", \"tralignati\", \"tramandati\", \"tramati\", \"trambasciati\", \"tramessi\", \"tramestati\", \"tramezzati\", \"tramortiti\", \"tramutati\", \"tranciati\", \"trangugiati\", \"tranquillati\", \"tranquillizzati\", \"transatti\", \"transcesi\", \"transcodificati\", \"transcorsi\", \"transcritti\", \"transennati\", \"transfluiti\", \"transfusi\", \"transistorizzati\", \"translitterati\", \"transposti\", \"transricevuti\", \"transustanziati\", \"transveduti\", \"transvisti\", \"trapanati\", \"trapassati\", \"trapiantati\", \"traportati\", \"traposti\", \"trapposti\", \"trapuntati\", \"trapunti\", \"trarotti\", \"trasandati\", \"trasbordati\", \"trascelti\", \"trascesi\", \"trascinati\", \"trascorsi\", \"trascritti\", \"trascurati\", \"trasdotti\", \"trasferiti\", \"trasfigurati\", \"trasformati\", \"trasfusi\", \"trasgrediti\", \"traslati\", \"traslitterati\", \"traslocati\", \"trasmessi\", \"trasmutati\", \"traspariti\", \"traspirati\", \"trasportati\", \"trasposti\", \"trastullati\", \"trasudati\", \"trasvolati\", \"trasvolti\", \"trattati\", \"tratteggiati\", \"trattenuti\", \"tratti\", \"traumatizzati\", \"travagliati\", \"travalicati\", \"travasati\", \"traveduti\", \"traversati\", \"travestiti\", \"traviati\", \"travisati\", \"travisti\", \"travolti\", \"trebbiati\", \"triangolati\", \"tribbiati\", \"tribolati\", \"tributati\", \"triennalizzati\", \"trimestralizzati\", \"trincati\", \"trincerati\", \"trinciati\", \"tripartiti\", \"triplicati\", \"trisecati\", \"trisezionati\", \"tritati\", \"triturati\", \"trivellati\", \"trollati\", \"trombati\", \"troncati\", \"tropicalizzati\", \"trovati\", \"truccati\", \"trucidati\", \"truffati\", \"tuffati\", \"tumefatti\", \"tumulati\", \"turati\", \"turbati\", \"turlupinati\", \"tutelati\", \"ubbligati\", \"ubicati\", \"ubiditi\", \"ubiquitinati\", \"ubriacati\", \"uccellati\", \"uccellinati\", \"uccisi\", \"uditi\", \"ufficializzati\", \"uggiti\", \"ugnati\", \"uguagliati\", \"ulcerati\", \"uliti\", \"ulolati\", \"ultimati\", \"ultracentrifugati\", \"ululati\", \"umanati\", \"umanizzati\", \"umettati\", \"umidificati\", \"umiditi\", \"umiliati\", \"uncinati\", \"unguentati\", \"unificati\", \"uniformati\", \"uniti\", \"univerbati\", \"universaleggiati\", \"universalizzati\", \"untati\", \"unti\", \"uperizzati\", \"urbanizzati\", \"urgenzati\", \"urlati\", \"urtacchiati\", \"urtati\", \"urticchiati\", \"usati\", \"usciolati\", \"usolati\", \"ustionati\", \"usucapiti\", \"usurati\", \"usurpati\", \"utilitati\", \"utilizzati\", \"vaccinati\", \"vagabondeggiati\", \"vagellati\", \"vagheggiati\", \"vagillati\", \"vagliati\", \"valcati\", \"valicati\", \"validati\", \"valorizzati\", \"valsi\", \"valutati\", \"vanagloriati\", \"vanati\", \"vandalizzati\", \"vangati\", \"vangelizzati\", \"vanificati\", \"vaniti\", \"vantaggiati\", \"vantati\", \"vaporati\", \"vaporizzati\", \"varati\", \"varcati\", \"variati\", \"vasectomizzati\", \"vaticinati\", \"vedovati\", \"veduti\", \"vegetati\", \"veggiati\", \"vegliati\", \"veicolati\", \"velarizzati\", \"velati\", \"velettati\", \"velinati\", \"vellicati\", \"vellutati\", \"velocizzati\", \"vendemmiati\", \"vendicati\", \"vendicchiati\", \"venducchiati\", \"venduti\", \"venerati\", \"vengiati\", \"ventagliati\", \"ventilati\", \"ventolati\", \"verbalizzati\", \"vergati\", \"vergheggiati\", \"vergognati\", \"vergolati\", \"verificati\", \"verminati\", \"vernalizzati\", \"verniciati\", \"verrinati\", \"versati\", \"verseggiati\", \"versificati\", \"verticalizzati\", \"vessati\", \"vestiti\", \"vestiti\", \"vetrificati\", \"vetrinati\", \"vetrioleggiati\", \"vettovagliati\", \"vezzeggiati\", \"viaggiati\", \"vicinati\", \"vicitati\", \"videochattati\", \"videochiamati\", \"videocomunicati\", \"videoregistrati\", \"videotrasmessi\", \"vidimati\", \"vigilati\", \"vigliati\", \"vigoreggiati\", \"vigoriti\", \"vilificati\", \"vilipesi\", \"villaneggiati\", \"vincolati\", \"vinti\", \"violati\", \"violentati\", \"violinati\", \"virgolati\", \"virgoleggiati\", \"virgolettati\", \"virilizzati\", \"virtualizzati\", \"visionati\", \"visitati\", \"vissuti\", \"vistati\", \"visti\", \"visualizzati\", \"vitaliziati\", \"vitalizzati\", \"vitaminizzati\", \"vittimizzati\", \"vituperati\", \"vivacizzati\", \"vivandati\", \"vivificati\", \"vivisezionati\", \"viziati\", \"vocabolarizzati\", \"vocalizzati\", \"vocati\", \"vociferati\", \"volantinati\", \"volatilizzati\", \"volgarizzati\", \"volicchiati\", \"volpeggiati\", \"voltati\", \"volti\", \"voltolati\", \"volturati\", \"voluminizzati\", \"voluti\", \"volutoci\", \"vomitati\", \"vorati\", \"votati\", \"vulcanizzati\", \"vuotati\", \"wappati\", \"wikificati\", \"xerocopiati\", \"zaffati\", \"zampati\", \"zampettati\", \"zampillati\", \"zannati\", \"zappati\", \"zappettati\", \"zapponati\", \"zavorrati\", \"zeppati\", \"zigrinati\", \"zigzagati\", \"zimbellati\", \"zincati\", \"zinnati\", \"zipolati\", \"zippati\", \"zirlati\", \"zittiti\", \"zizzagati\", \"zoccolati\", \"zollati\", \"zombati\", \"zonati\", \"zonizzati\", \"zoppati\", \"zoppeggiati\", \"zoppicati\", \"zucconati\", \"zufolati\", \"zumati\", \"zuppati\"];\n}; //# sourceMappingURL=participles.js.map\n//# sourceMappingURL=participles.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/participles.js\n// module id = 1489\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/participles.js?");

/***/ }),
/* 1490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// This is a list of irregular participles used in Dutch.\n\nmodule.exports = function () {\n    return [\"aaneengedraaid\", \"aaneengeschakeld\", \"aanschouwd\", \"aanvaard\", \"achtergebleven\", \"achtergelaten\", \"achterhaald\", \"achteromgekeken\", \"achteropgekomen\", \"achteruitgegaan\", \"achtervolgd\", \"ademgehaald\", \"bedolven\", \"bedongen\", \"bedorven\", \"bedragen\", \"bedreven\", \"bedrogen\", \"bedropen\", \"bedwongen\", \"beetgenomen\", \"begeven\", \"begonnen\", \"begraven\", \"begrepen\", \"behangen\", \"behouden\", \"bekeken\", \"beklommen\", \"bekomen\", \"bekropen\", \"beleden\", \"belezen\", \"benomen\", \"beraden\", \"beschenen\", \"beschoten\", \"beschreven\", \"beslagen\", \"beslopen\", \"besloten\", \"besneden\", \"besproken\", \"besprongen\", \"bestegen\", \"bestolen\", \"bestorven\", \"bestreden\", \"bestreken\", \"betreden\", \"betroffen\", \"betrokken\", \"bevallen\", \"bevochten\", \"bevolen\", \"bevonden\", \"bevroren\", \"bewezen\", \"bewogen\", \"bezeten\", \"bezien\", \"beziggehouden\", \"bezonnen\", \"bezweken\", \"bezworen\", \"bijeengehouden\", \"bijeengeroepen\", \"blootgelegd\", \"blootgesteld\", \"bovengehaald\", \"brandgesticht\", \"buitengesloten\", \"buitgemaakt\", \"deelgenomen\", \"dichtgebonden\", \"dichtgedaan\", \"diepgevroren\", \"doodgegaan\", \"doorbladerd\", \"doorboord\", \"doorbroken\", \"doordacht\", \"doordrongen\", \"doorgrond\", \"doorkruist\", \"doorlopen\", \"doorsneden\", \"doorstaan\", \"doorverteld\", \"doorzien\", \"doorzocht\", \"drooggelegd\", \"dwarsgezeten\", \"ervaren\", \"flauwgevallen\", \"gebakken\", \"gebannen\", \"gebarsten\", \"gebeden\", \"gebersten\", \"gebeten\", \"geblazen\", \"gebleken\", \"gebleven\", \"geblonken\", \"geboden\", \"gebogen\", \"gebonden\", \"geboren\", \"geborgen\", \"geborsten\", \"gebraden\", \"gebroken\", \"gebrouwen\", \"gedaan\", \"gedoken\", \"gedolven\", \"gedongen\", \"gedragen\", \"gedreten\", \"gedreven\", \"gedrongen\", \"gedronken\", \"gedropen\", \"gedwongen\", \"gefloten\", \"gegeten\", \"gegeven\", \"gegleden\", \"geglommen\", \"gegolden\", \"gegoten\", \"gegraven\", \"gegrepen\", \"gehangen\", \"gehesen\", \"geheven\", \"geholpen\", \"gehouden\", \"gehouwen\", \"gekeken\", \"geklommen\", \"geklonken\", \"gekloven\", \"geknepen\", \"gekomen\", \"gekorven\", \"gekozen\", \"gekregen\", \"gekresen\", \"gekreten\", \"gekrompen\", \"gekrooien\", \"gekropen\", \"gekunnen\", \"gekweten\", \"gelachen\", \"geladen\", \"gelaten\", \"geleden\", \"gelegen\", \"geleken\", \"gelezen\", \"gelogen\", \"geloken\", \"gelopen\", \"gemalen\", \"gemeden\", \"gemeten\", \"gemoeten\", \"gemogen\", \"gemolken\", \"genegen\", \"genezen\", \"genomen\", \"genoten\", \"geprezen\", \"geraden\", \"gereden\", \"geregen\", \"gereten\", \"gerezen\", \"geroepen\", \"geroken\", \"geschapen\", \"gescheiden\", \"geschenen\", \"gescheten\", \"gescholden\", \"gescholen\", \"geschonden\", \"geschonken\", \"geschoren\", \"geschoten\", \"geschoven\", \"geschreden\", \"geschreven\", \"geschrokken\", \"geslagen\", \"geslapen\", \"geslepen\", \"gesleten\", \"geslonken\", \"geslopen\", \"gesloten\", \"gesmeten\", \"gesmolten\", \"gesneden\", \"gesnoten\", \"gesnoven\", \"gespannen\", \"gespeten\", \"gespleten\", \"gesponnen\", \"gespoten\", \"gesproken\", \"gesprongen\", \"gesproten\", \"gestegen\", \"gestoken\", \"gestolen\", \"gestonken\", \"gestoten\", \"gestoven\", \"gestreden\", \"gestreken\", \"getreden\", \"getroffen\", \"getrokken\", \"gevallen\", \"gevangen\", \"gevangengenomen\", \"gevaren\", \"gevezen\", \"gevlochten\", \"gevloden\", \"gevlogen\", \"gevloten\", \"gevochten\", \"gevonden\", \"gevouwen\", \"gevreten\", \"gevroren\", \"gewassen\", \"geweken\", \"geweten\", \"geweven\", \"gewezen\", \"gewogen\", \"gewonden\", \"gewonnen\", \"geworden\", \"geworpen\", \"geworven\", \"gewoven\", \"gewreten\", \"gewreven\", \"gewrongen\", \"gezegen\", \"gezeken\", \"gezeten\", \"gezien\", \"gezoden\", \"gezogen\", \"gezonden\", \"gezongen\", \"gezonken\", \"gezonnen\", \"gezopen\", \"gezouten\", \"gezwegen\", \"gezwolgen\", \"gezwollen\", \"gezwommen\", \"gezwonden\", \"gezworen\", \"gezworven\", \"hardgelopen\", \"herladen\", \"hernomen\", \"herwonnen\", \"herzien\", \"huisgehouden\", \"kennisgemaakt\", \"klaargekomen\", \"kortgesloten\", \"kwaadgesproken\", \"kwijtgeraakt\", \"kwijtgescholden\", \"langsgekomen\", \"leeggelopen\", \"leeggemaakt\", \"lesgegeven\", \"liefgehad\", \"lipgelezen\", \"meebetaald\", \"misbruikt\", \"misleid\", \"mislukt\", \"misprezen\", \"nabewerkt\", \"nedergedaald\", \"omarmd\", \"omfloerst\", \"omhelsd\", \"omkleed\", \"omklemd\", \"ommuurd\", \"omringd\", \"omschreven\", \"omsingeld\", \"omsloten\", \"omvat\", \"omvergeworpen\", \"omwikkeld\", \"omwonden\", \"omzeild\", \"omzoomd\", \"omzworven\", \"onderbouwd\", \"onderbroken\", \"onderdrukt\", \"ondergaan\", \"ondergraven\", \"onderhandeld\", \"onderhouden\", \"onderkend\", \"ondermijnd\", \"ondernomen\", \"onderscheiden\", \"onderschept\", \"ondersteund\", \"onderstreept\", \"ondertekend\", \"onderverdeeld\", \"ondervonden\", \"ondervraagd\", \"onderwezen\", \"onderworpen\", \"onderzocht\", \"ontbeten\", \"ontboden\", \"ontbonden\", \"ontbroken\", \"ontdoken\", \"ontgonnen\", \"onthouden\", \"ontkomen\", \"ontladen\", \"ontloken\", \"ontlopen\", \"ontnomen\", \"ontraden\", \"ontslagen\", \"ontsloten\", \"ontspannen\", \"ontsprongen\", \"ontsproten\", \"ontstoken\", \"onttrokken\", \"ontvangen\", \"ontweken\", \"schoongemaakt\", \"schoongewassen\", \"stilgestaan\", \"tandengepoetst\", \"tegemoetgekomen\", \"teleurgesteld\", \"teloorgegaan\", \"terechtgekomen\", \"terechtgesteld\", \"teweeggebracht\", \"thuisbezorgd\", \"thuisgekomen\", \"toebehoord\", \"toevertrouwd\", \"tussengekomen\", \"tussengeworpen\", \"uitbesteed\", \"uitbetaald\", \"uitvergroot\", \"uitverkocht\", \"valsgespeeld\", \"verbannen\", \"verbleven\", \"verboden\", \"verbogen\", \"verbonden\", \"verborgen\", \"verbroken\", \"verdragen\", \"verdreven\", \"verdrongen\", \"verdronken\", \"verdroten\", \"verdwenen\", \"vergeleken\", \"vergeten\", \"vergeven\", \"vergleden\", \"vergolden\", \"vergoten\", \"vergrepen\", \"verhangen\", \"verheven\", \"verholpen\", \"verhouden\", \"verkozen\", \"verkregen\", \"verladen\", \"verlaten\", \"verlopen\", \"verloren\", \"vermeden\", \"vermogen\", \"vernomen\", \"verraden\", \"verrezen\", \"verscheiden\", \"verschenen\", \"verscholen\", \"verschoten\", \"verschoven\", \"verschreven\", \"verschrokken\", \"verslagen\", \"verslapen\", \"versleten\", \"verslonden\", \"versmolten\", \"verstoten\", \"verstreken\", \"vertrokken\", \"vervallen\", \"vervangen\", \"vervlogen\", \"verweten\", \"verweven\", \"verwezen\", \"verworpen\", \"verworven\", \"verwrongen\", \"verzonden\", \"verzonken\", \"verzonnen\", \"verzopen\", \"verzouten\", \"verzwonden\", \"volbracht\", \"voldaan\", \"voleindigd\", \"volhard\", \"volmaakt\", \"volstaan\", \"voltooid\", \"voltrokken\", \"voorbehouden\", \"voorkomen\", \"voorspeld\", \"voorzien\", \"wederhaald\", \"weergalmd\", \"weerhouden\", \"weerkaatst\", \"weerlegd\", \"weerstaan\"];\n};\n//# sourceMappingURL=irregulars.js.map\n//# sourceMappingURL=irregulars.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/irregulars.js\n// module id = 1490\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/irregulars.js?");

/***/ }),
/* 1491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Participle = __webpack_require__(393);\nvar checkException = __webpack_require__(568);\nvar nonVerbsEndingEd = __webpack_require__(1492)();\nvar directPrecedenceException = __webpack_require__(569);\nvar precedenceException = __webpack_require__(693);\nvar includes = __webpack_require__(147);\nvar isEmpty = __webpack_require__(97);\nvar intersection = __webpack_require__(1255);\nvar irregularExclusionArray = [\"get\", \"gets\", \"getting\", \"got\", \"gotten\"];\n/**\n * Creates an Participle object for the English language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes  The attributes object.\n *\n * @constructor\n */\nvar EnglishParticiple = function EnglishParticiple(participle, sentencePart, attributes) {\n    Participle.call(this, participle, sentencePart, attributes);\n    checkException.call(this);\n};\n__webpack_require__(79).inherits(EnglishParticiple, Participle);\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nEnglishParticiple.prototype.isPassive = function () {\n    var sentencePart = this.getSentencePart();\n    var participleIndex = sentencePart.indexOf(this.getParticiple());\n    var language = this.getLanguage();\n    return !this.isNonVerbEndingEd() && !this.hasRidException() && !this.directPrecedenceException(sentencePart, participleIndex, language) && !this.precedenceException(sentencePart, participleIndex, language);\n};\n/**\n * Checks whether a found participle is in the nonVerbsEndingEd list.\n * If a word is in the nonVerbsEndingEd list, it isn't a participle.\n * Irregular participles do not end in -ed, and therefore cannot be in the nonVerbsEndingEd list.\n *\n * @returns {boolean} Returns true if it is in the nonVerbsEndingEd list, otherwise returns false.\n */\nEnglishParticiple.prototype.isNonVerbEndingEd = function () {\n    if (this.getType() === \"irregular\") {\n        return false;\n    }\n    return includes(nonVerbsEndingEd, this.getParticiple());\n};\n/**\n * Checks whether the participle is 'rid' in combination with 'get', 'gets', 'getting', 'got' or 'gotten'.\n * If this is true, the participle is not passive.\n *\n * @returns {boolean} Returns true if 'rid' is found in combination with a form of 'get'\n * otherwise returns false.\n */\nEnglishParticiple.prototype.hasRidException = function () {\n    if (this.getParticiple() === \"rid\") {\n        var auxiliaries = this.getAuxiliaries();\n        return !isEmpty(intersection(irregularExclusionArray, auxiliaries));\n    }\n    return false;\n};\nEnglishParticiple.prototype.directPrecedenceException = directPrecedenceException;\nEnglishParticiple.prototype.precedenceException = precedenceException;\nmodule.exports = EnglishParticiple;\n//# sourceMappingURL=EnglishParticiple.js.map\n//# sourceMappingURL=EnglishParticiple.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/EnglishParticiple.js\n// module id = 1491\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/EnglishParticiple.js?");

/***/ }),
/* 1492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function () {\n    return [\"ablebodied\", \"abovementioned\", \"absentminded\", \"accoladed\", \"accompanied\", \"acculturized\", \"accursed\", \"acerated\", \"acerbated\", \"acetylized\", \"achromatised\", \"achromatized\", \"acidified\", \"acned\", \"actualised\", \"adrenalised\", \"adulated\", \"adversed\", \"aestheticised\", \"affectioned\", \"affined\", \"affricated\", \"aforementioned\", \"agerelated\", \"aggrieved\", \"airbed\", \"aircooled\", \"airspeed\", \"alcoholized\", \"alcoved\", \"alkalised\", \"allianced\", \"aluminized\", \"alveolated\", \"ambered\", \"ammonified\", \"amplified\", \"anagrammatised\", \"anagrammatized\", \"anathematised\", \"aniseed\", \"ankled\", \"annualized\", \"anonymised\", \"anthologized\", \"antlered\", \"anucleated\", \"anviled\", \"anvilshaped\", \"apostrophised\", \"apostrophized\", \"appliqued\", \"apprized\", \"arbitrated\", \"armored\", \"articled\", \"ashamed\", \"assented\", \"atomised\", \"atrophied\", \"auricled\", \"auriculated\", \"aurified\", \"autopsied\", \"axled\", \"babied\", \"backhoed\", \"badmannered\", \"badtempered\", \"balustered\", \"baned\", \"barcoded\", \"bareboned\", \"barefooted\", \"barelegged\", \"barnacled\", \"based\", \"bayoneted\", \"beadyeyed\", \"beaked\", \"beaned\", \"beatified\", \"beautified\", \"beavered\", \"bed\", \"bedamned\", \"bedecked\", \"behoved\", \"belated\", \"bellbottomed\", \"bellshaped\", \"benighted\", \"bequeathed\", \"berried\", \"bespectacled\", \"bewhiskered\", \"bighearted\", \"bigmouthed\", \"bigoted\", \"bindweed\", \"binucleated\", \"biopsied\", \"bioturbed\", \"biped\", \"bipinnated\", \"birdfeed\", \"birdseed\", \"bisegmented\", \"bitterhearted\", \"blabbermouthed\", \"blackhearted\", \"bladed\", \"blankminded\", \"blearyeyed\", \"bleed\", \"blissed\", \"blobbed\", \"blondhaired\", \"bloodied\", \"bloodred\", \"bloodshed\", \"blueblooded\", \"boatshaped\", \"bobsled\", \"bodied\", \"boldhearted\", \"boogied\", \"boosed\", \"bosomed\", \"bottlefed\", \"bottlefeed\", \"bottlenecked\", \"bouldered\", \"bowlegged\", \"bowlshaped\", \"brandied\", \"bravehearted\", \"breastfed\", \"breastfeed\", \"breed\", \"brighteyed\", \"brindled\", \"broadhearted\", \"broadleaved\", \"broadminded\", \"brokenhearted\", \"broomed\", \"broomweed\", \"buccaned\", \"buckskinned\", \"bucktoothed\", \"buddied\", \"buffaloed\", \"bugeyed\", \"bugleweed\", \"bugweed\", \"bulletined\", \"bunked\", \"busied\", \"butterfingered\", \"cabbed\", \"caddied\", \"cairned\", \"calcified\", \"canalized\", \"candied\", \"cannulated\", \"canoed\", \"canopied\", \"canvased\", \"caped\", \"capsulated\", \"cassocked\", \"castellated\", \"catabolised\", \"catheterised\", \"caudated\", \"cellmediated\", \"cellulosed\", \"certified\", \"chagrined\", \"chambered\", \"chested\", \"chevroned\", \"chickenfeed\", \"chickenhearted\", \"chickweed\", \"chilblained\", \"childbed\", \"chinned\", \"chromatographed\", \"ciliated\", \"cindered\", \"cingulated\", \"circumstanced\", \"cisgendered\", \"citrullinated\", \"clappered\", \"clarified\", \"classified\", \"clawshaped\", \"claysized\", \"cleanhearted\", \"clearminded\", \"clearsighted\", \"cliched\", \"clodded\", \"cloistered\", \"closefisted\", \"closehearted\", \"closelipped\", \"closemouthed\", \"closeted\", \"cloudseed\", \"clubfooted\", \"clubshaped\", \"clued\", \"cockeyed\", \"codified\", \"coed\", \"coevolved\", \"coffined\", \"coiffed\", \"coinfected\", \"coldblooded\", \"coldhearted\", \"collateralised\", \"colonialised\", \"colorcoded\", \"colorised\", \"colourised\", \"columned\", \"commoditized\", \"compactified\", \"companioned\", \"complexioned\", \"conceited\", \"concerned\", \"concussed\", \"coneshaped\", \"congested\", \"contented\", \"convexed\", \"coralled\", \"corymbed\", \"cottonseed\", \"countrified\", \"countrybred\", \"courtmartialled\", \"coved\", \"coveralled\", \"cowshed\", \"cozied\", \"cragged\", \"crayoned\", \"credentialed\", \"creed\", \"crenulated\", \"crescentshaped\", \"cressweed\", \"crewed\", \"cricked\", \"crispated\", \"crossbarred\", \"crossbed\", \"crossbred\", \"crossbreed\", \"crossclassified\", \"crosseyed\", \"crossfertilised\", \"crossfertilized\", \"crossindexed\", \"crosslegged\", \"crossshaped\", \"crossstratified\", \"crossstriated\", \"crotched\", \"crucified\", \"cruelhearted\", \"crutched\", \"cubeshaped\", \"cubified\", \"cuckolded\", \"cucumbershaped\", \"cumbered\", \"cuminseed\", \"cupshaped\", \"curated\", \"curded\", \"curfewed\", \"curlicued\", \"curlycued\", \"curried\", \"curtsied\", \"cyclized\", \"cylindershaped\", \"damed\", \"dandified\", \"dangered\", \"darkhearted\", \"daybed\", \"daylighted\", \"deacidified\", \"deacylated\", \"deadhearted\", \"deadlined\", \"deaminized\", \"deathbed\", \"decalcified\", \"decertified\", \"deckbed\", \"declassified\", \"declutched\", \"decolourated\", \"decreed\", \"deed\", \"deeprooted\", \"deepseated\", \"defensed\", \"defied\", \"deflexed\", \"deglamorised\", \"degunkified\", \"dehumidified\", \"deified\", \"deled\", \"delegitimised\", \"demoded\", \"demystified\", \"denasalized\", \"denazified\", \"denied\", \"denitrified\", \"denticulated\", \"deseed\", \"desexualised\", \"desposited\", \"detoxified\", \"deuced\", \"devitrified\", \"dewlapped\", \"dezincified\", \"diagonalised\", \"dialogued\", \"died\", \"digitated\", \"dignified\", \"dilled\", \"dimwitted\", \"diphthonged\", \"disaffected\", \"disaggregated\", \"disarrayed\", \"discalced\", \"discolorated\", \"discolourated\", \"discshaped\", \"diseased\", \"disembodied\", \"disencumbered\", \"disfranchised\", \"diskshaped\", \"disproportionated\", \"disproportioned\", \"disqualified\", \"distempered\", \"districted\", \"diversified\", \"diverticulated\", \"divested\", \"divvied\", \"dizzied\", \"dogged\", \"dogsbodied\", \"dogsled\", \"domeshaped\", \"domiciled\", \"dormered\", \"doublebarrelled\", \"doublestranded\", \"doublewalled\", \"downhearted\", \"duckbilled\", \"eared\", \"echeloned\", \"eddied\", \"edified\", \"eggshaped\", \"elasticated\", \"electrified\", \"elegized\", \"embed\", \"embodied\", \"emceed\", \"empaneled\", \"empanelled\", \"emptyhearted\", \"emulsified\", \"engined\", \"ennobled\", \"envied\", \"enzymecatalysed\", \"enzymecatalyzed\", \"epitomised\", \"epoxidized\", \"epoxied\", \"etherised\", \"etherized\", \"evilhearted\", \"evilminded\", \"exceed\", \"excited\", \"exemplified\", \"exponentiated\", \"expurgated\", \"extravasated\", \"extraverted\", \"extroverted\", \"fabled\", \"facelifted\", \"facsimiled\", \"fainthearted\", \"falcated\", \"falsehearted\", \"falsified\", \"famed\", \"fancified\", \"fanged\", \"fanshaped\", \"fantasied\", \"farsighted\", \"fated\", \"fatted\", \"fazed\", \"featherbed\", \"fed\", \"federalized\", \"feeblehearted\", \"feebleminded\", \"feeblewitted\", \"feed\", \"fendered\", \"fenestrated\", \"ferried\", \"fevered\", \"fibered\", \"fibred\", \"ficklehearted\", \"fiercehearted\", \"figged\", \"filigreed\", \"filterfeed\", \"fireweed\", \"firmhearted\", \"fissured\", \"flanged\", \"flanneled\", \"flannelled\", \"flatbed\", \"flatfooted\", \"flatted\", \"flawed\", \"flaxenhaired\", \"flaxseed\", \"flaxweed\", \"flighted\", \"floodgenerated\", \"flowerbed\", \"fluidised\", \"fluidized\", \"flurried\", \"fobbed\", \"fonded\", \"forcefeed\", \"foreshortened\", \"foresighted\", \"forkshaped\", \"formfeed\", \"fortified\", \"fortressed\", \"foulmouthed\", \"foureyed\", \"foxtailed\", \"fractionalised\", \"fractionalized\", \"frankhearted\", \"freed\", \"freehearted\", \"freespirited\", \"frenzied\", \"friezed\", \"frontiered\", \"fructified\", \"frumped\", \"fullblooded\", \"fullbodied\", \"fullfledged\", \"fullhearted\", \"funnelshaped\", \"furnaced\", \"gaitered\", \"galleried\", \"gangliated\", \"ganglionated\", \"gangrened\", \"gargoyled\", \"gasified\", \"gaunted\", \"gauntleted\", \"gauzed\", \"gavelled\", \"gelatinised\", \"gemmed\", \"genderized\", \"gentled\", \"gentlehearted\", \"gerrymandered\", \"gladhearted\", \"glamored\", \"globed\", \"gloried\", \"glorified\", \"glycosylated\", \"goateed\", \"gobletshaped\", \"godspeed\", \"goodhearted\", \"goodhumored\", \"goodhumoured\", \"goodnatured\", \"goodtempered\", \"goosed\", \"goosenecked\", \"goutweed\", \"grainfed\", \"grammaticalized\", \"grapeseed\", \"gratified\", \"graved\", \"gravelbed\", \"grayhaired\", \"greathearted\", \"greed\", \"greenweed\", \"grommeted\", \"groundspeed\", \"groved\", \"gruffed\", \"guiled\", \"gulled\", \"gumshoed\", \"gunkholed\", \"gussied\", \"guyed\", \"gyrostabilized\", \"hackneyed\", \"hagged\", \"haired\", \"halfcivilized\", \"halfhearted\", \"halfwitted\", \"haloed\", \"handballed\", \"handfed\", \"handfeed\", \"hardcoded\", \"hardhearted\", \"hardnosed\", \"hared\", \"harelipped\", \"hasted\", \"hatred\", \"haunched\", \"hawkeyed\", \"hayseed\", \"hayweed\", \"hearsed\", \"hearted\", \"heartshaped\", \"heavenlyminded\", \"heavyfooted\", \"heavyhearted\", \"heed\", \"heired\", \"heisted\", \"helicoptered\", \"helmed\", \"helmeted\", \"hemagglutinated\", \"hemolyzed\", \"hempseed\", \"hempweed\", \"heparinised\", \"heparinized\", \"herbed\", \"highheeled\", \"highminded\", \"highpriced\", \"highspeed\", \"highspirited\", \"hilled\", \"hipped\", \"hispanicised\", \"hocked\", \"hoed\", \"hogweed\", \"holstered\", \"homaged\", \"hoodooed\", \"hoofed\", \"hooknosed\", \"hooved\", \"horned\", \"horrified\", \"horseshoed\", \"horseweed\", \"hotbed\", \"hotblooded\", \"hothearted\", \"hotted\", \"hottempered\", \"hued\", \"humansized\", \"humidified\", \"humped\", \"hundred\", \"hutched\", \"hyperinflated\", \"hyperpigmented\", \"hyperstimulated\", \"hypertrophied\", \"hyphened\", \"hypophysectomised\", \"hypophysectomized\", \"hypopigmented\", \"hypostatised\", \"hysterectomized\", \"iconified\", \"iconised\", \"iconized\", \"ideologised\", \"illbred\", \"illconceived\", \"illdefined\", \"illdisposed\", \"illequipped\", \"illfated\", \"illfavored\", \"illfavoured\", \"illflavored\", \"illfurnished\", \"illhumored\", \"illhumoured\", \"illimited\", \"illmannered\", \"illnatured\", \"illomened\", \"illproportioned\", \"illqualified\", \"illscented\", \"illtempered\", \"illumed\", \"illusioned\", \"imbed\", \"imbossed\", \"imbued\", \"immatured\", \"impassioned\", \"impenetrated\", \"imperfected\", \"imperialised\", \"imperturbed\", \"impowered\", \"imputed\", \"inarticulated\", \"inbred\", \"inbreed\", \"incapsulated\", \"incased\", \"incrustated\", \"incrusted\", \"indebted\", \"indeed\", \"indemnified\", \"indentured\", \"indigested\", \"indisposed\", \"inexperienced\", \"infrared\", \"intensified\", \"intentioned\", \"interbedded\", \"interbred\", \"interbreed\", \"interluded\", \"introverted\", \"inured\", \"inventoried\", \"iodinated\", \"iodised\", \"irked\", \"ironfisted\", \"ironweed\", \"itchweed\", \"ivied\", \"ivyweed\", \"jagged\", \"jellified\", \"jerseyed\", \"jetlagged\", \"jetpropelled\", \"jeweled\", \"jewelled\", \"jewelweed\", \"jiggered\", \"jimmyweed\", \"jimsonweed\", \"jointweed\", \"joyweed\", \"jungled\", \"juried\", \"justiceweed\", \"justified\", \"karstified\", \"kerchiefed\", \"kettleshaped\", \"kibbled\", \"kidneyshaped\", \"kimonoed\", \"kindhearted\", \"kindred\", \"kingsized\", \"kirtled\", \"knacked\", \"knapweed\", \"kneed\", \"knobbed\", \"knobweed\", \"knopweed\", \"knotweed\", \"lakebed\", \"lakeweed\", \"lamed\", \"lamellated\", \"lanceshaped\", \"lanceted\", \"landbased\", \"lapeled\", \"lapelled\", \"largehearted\", \"lariated\", \"lased\", \"latticed\", \"lauded\", \"lavaged\", \"lavendered\", \"lawned\", \"led\", \"lefteyed\", \"legitimatised\", \"legitimatized\", \"leisured\", \"lensshaped\", \"leveed\", \"levied\", \"lichened\", \"lichenized\", \"lidded\", \"lifesized\", \"lightfingered\", \"lightfooted\", \"lighthearted\", \"lightminded\", \"lightspeed\", \"lignified\", \"likeminded\", \"lilylivered\", \"limbed\", \"linearised\", \"linearized\", \"linefeed\", \"linseed\", \"lionhearted\", \"liquefied\", \"liquified\", \"lithified\", \"liveried\", \"lobbied\", \"located\", \"locoweed\", \"longarmed\", \"longhaired\", \"longhorned\", \"longlegged\", \"longnecked\", \"longsighted\", \"longwinded\", \"lopsided\", \"loudmouthed\", \"louvered\", \"louvred\", \"lowbred\", \"lowpriced\", \"lowspirited\", \"lozenged\", \"lunated\", \"lyrated\", \"lysinated\", \"maced\", \"macroaggregated\", \"macrodissected\", \"maculated\", \"madweed\", \"magnified\", \"maidenweed\", \"maladapted\", \"maladjusted\", \"malnourished\", \"malrotated\", \"maned\", \"mannered\", \"manuevered\", \"manyhued\", \"manyshaped\", \"manysided\", \"masted\", \"mealymouthed\", \"meanspirited\", \"membered\", \"membraned\", \"metaled\", \"metalized\", \"metallised\", \"metallized\", \"metamerized\", \"metathesized\", \"meted\", \"methylated\", \"mettled\", \"microbrecciated\", \"microminiaturized\", \"microstratified\", \"middleaged\", \"midsized\", \"miffed\", \"mildhearted\", \"milkweed\", \"miniskirted\", \"misactivated\", \"misaligned\", \"mischiefed\", \"misclassified\", \"misdeed\", \"misdemeaned\", \"mismannered\", \"misnomered\", \"misproportioned\", \"miswired\", \"mitred\", \"mitted\", \"mittened\", \"moneyed\", \"monocled\", \"mononucleated\", \"monospaced\", \"monotoned\", \"monounsaturated\", \"mortified\", \"moseyed\", \"motorised\", \"motorized\", \"moussed\", \"moustached\", \"muddied\", \"mugweed\", \"multiarmed\", \"multibarreled\", \"multibladed\", \"multicelled\", \"multichambered\", \"multichanneled\", \"multichannelled\", \"multicoated\", \"multidirected\", \"multiengined\", \"multifaceted\", \"multilaminated\", \"multilaned\", \"multilayered\", \"multilobed\", \"multilobulated\", \"multinucleated\", \"multipronged\", \"multisegmented\", \"multisided\", \"multispeed\", \"multistemmed\", \"multistoried\", \"multitalented\", \"multitoned\", \"multitowered\", \"multivalued\", \"mummied\", \"mummified\", \"mustached\", \"mustachioed\", \"mutinied\", \"myelinated\", \"mystified\", \"mythicised\", \"naked\", \"narcotised\", \"narrowminded\", \"natured\", \"neaped\", \"nearsighted\", \"necrosed\", \"nectared\", \"need\", \"needleshaped\", \"newfangled\", \"newlywed\", \"nibbed\", \"nimblewitted\", \"nippled\", \"nixed\", \"nobled\", \"noduled\", \"noised\", \"nonaccented\", \"nonactivated\", \"nonadsorbed\", \"nonadulterated\", \"nonaerated\", \"nonaffiliated\", \"nonaliased\", \"nonalienated\", \"nonaligned\", \"nonarchived\", \"nonarmored\", \"nonassociated\", \"nonattenuated\", \"nonblackened\", \"nonbreastfed\", \"nonbrecciated\", \"nonbuffered\", \"nonbuttered\", \"noncarbonated\", \"noncarbonized\", \"noncatalogued\", \"noncatalyzed\", \"noncategorized\", \"noncertified\", \"nonchlorinated\", \"nonciliated\", \"noncircumcised\", \"noncivilized\", \"nonclassified\", \"noncoated\", \"noncodified\", \"noncoerced\", \"noncommercialized\", \"noncommissioned\", \"noncompacted\", \"noncompiled\", \"noncomplicated\", \"noncomposed\", \"noncomputed\", \"noncomputerized\", \"nonconcerted\", \"nonconditioned\", \"nonconfirmed\", \"noncongested\", \"nonconjugated\", \"noncooled\", \"noncorrugated\", \"noncoupled\", \"noncreated\", \"noncrowded\", \"noncultured\", \"noncurated\", \"noncushioned\", \"nondecoded\", \"nondecomposed\", \"nondedicated\", \"nondeferred\", \"nondeflated\", \"nondegenerated\", \"nondegraded\", \"nondelegated\", \"nondelimited\", \"nondelineated\", \"nondemarcated\", \"nondeodorized\", \"nondeployed\", \"nonderivatized\", \"nonderived\", \"nondetached\", \"nondetailed\", \"nondifferentiated\", \"nondigested\", \"nondigitized\", \"nondilapidated\", \"nondilated\", \"nondimensionalised\", \"nondimensionalized\", \"nondirected\", \"nondisabled\", \"nondisciplined\", \"nondispersed\", \"nondisputed\", \"nondisqualified\", \"nondisrupted\", \"nondisseminated\", \"nondissipated\", \"nondissolved\", \"nondistressed\", \"nondistributed\", \"nondiversified\", \"nondiverted\", \"nondocumented\", \"nondomesticated\", \"nondoped\", \"nondrafted\", \"nondrugged\", \"nondubbed\", \"nonducted\", \"nonearthed\", \"noneclipsed\", \"nonedged\", \"nonedited\", \"nonelasticized\", \"nonelectrified\", \"nonelectroplated\", \"nonelectroporated\", \"nonelevated\", \"noneliminated\", \"nonelongated\", \"nonembedded\", \"nonembodied\", \"nonemphasized\", \"nonencapsulated\", \"nonencoded\", \"nonencrypted\", \"nonendangered\", \"nonengraved\", \"nonenlarged\", \"nonenriched\", \"nonentangled\", \"nonentrenched\", \"nonepithelized\", \"nonequilibrated\", \"nonestablished\", \"nonetched\", \"nonethoxylated\", \"nonethylated\", \"nonetiolated\", \"nonexaggerated\", \"nonexcavated\", \"nonexhausted\", \"nonexperienced\", \"nonexpired\", \"nonfabricated\", \"nonfalsified\", \"nonfeathered\", \"nonfeatured\", \"nonfed\", \"nonfederated\", \"nonfeed\", \"nonfenestrated\", \"nonfertilized\", \"nonfilamented\", \"nonfinanced\", \"nonfinished\", \"nonfinned\", \"nonfissured\", \"nonflagellated\", \"nonflagged\", \"nonflared\", \"nonflavored\", \"nonfluidized\", \"nonfluorinated\", \"nonfluted\", \"nonforested\", \"nonformalized\", \"nonformatted\", \"nonfragmented\", \"nonfragranced\", \"nonfranchised\", \"nonfreckled\", \"nonfueled\", \"nonfumigated\", \"nonfunctionalized\", \"nonfunded\", \"nongalvanized\", \"nongated\", \"nongelatinized\", \"nongendered\", \"nongeneralized\", \"nongenerated\", \"nongifted\", \"nonglazed\", \"nonglucosated\", \"nonglucosylated\", \"nonglycerinated\", \"nongraded\", \"nongrounded\", \"nonhalogenated\", \"nonhandicapped\", \"nonhospitalised\", \"nonhospitalized\", \"nonhydrated\", \"nonincorporated\", \"nonindexed\", \"noninfected\", \"noninfested\", \"noninitialized\", \"noninitiated\", \"noninoculated\", \"noninseminated\", \"noninstitutionalized\", \"noninsured\", \"nonintensified\", \"noninterlaced\", \"noninterpreted\", \"nonintroverted\", \"noninvestigated\", \"noninvolved\", \"nonirrigated\", \"nonisolated\", \"nonisomerized\", \"nonissued\", \"nonitalicized\", \"nonitemized\", \"noniterated\", \"nonjaded\", \"nonlabelled\", \"nonlaminated\", \"nonlateralized\", \"nonlayered\", \"nonlegalized\", \"nonlegislated\", \"nonlesioned\", \"nonlexicalized\", \"nonliberated\", \"nonlichenized\", \"nonlighted\", \"nonlignified\", \"nonlimited\", \"nonlinearized\", \"nonlinked\", \"nonlobed\", \"nonlobotomized\", \"nonlocalized\", \"nonlysed\", \"nonmachined\", \"nonmalnourished\", \"nonmandated\", \"nonmarginalized\", \"nonmassaged\", \"nonmatriculated\", \"nonmatted\", \"nonmatured\", \"nonmechanized\", \"nonmedicated\", \"nonmedullated\", \"nonmentioned\", \"nonmetabolized\", \"nonmetallized\", \"nonmetastasized\", \"nonmetered\", \"nonmethoxylated\", \"nonmilled\", \"nonmineralized\", \"nonmirrored\", \"nonmodeled\", \"nonmoderated\", \"nonmodified\", \"nonmonetized\", \"nonmonitored\", \"nonmortgaged\", \"nonmotorized\", \"nonmottled\", \"nonmounted\", \"nonmultithreaded\", \"nonmutilated\", \"nonmyelinated\", \"nonnormalized\", \"nonnucleated\", \"nonobjectified\", \"nonobligated\", \"nonoccupied\", \"nonoiled\", \"nonopinionated\", \"nonoxygenated\", \"nonpaginated\", \"nonpaired\", \"nonparalyzed\", \"nonparameterized\", \"nonparasitized\", \"nonpasteurized\", \"nonpatterned\", \"nonphased\", \"nonphosphatized\", \"nonphosphorized\", \"nonpierced\", \"nonpigmented\", \"nonpiloted\", \"nonpipelined\", \"nonpitted\", \"nonplussed\", \"nonpuffed\", \"nonrandomized\", \"nonrated\", \"nonrefined\", \"nonregistered\", \"nonregulated\", \"nonrelated\", \"nonretarded\", \"nonsacred\", \"nonsalaried\", \"nonsanctioned\", \"nonsaturated\", \"nonscented\", \"nonscheduled\", \"nonseasoned\", \"nonsecluded\", \"nonsegmented\", \"nonsegregated\", \"nonselected\", \"nonsolidified\", \"nonspecialized\", \"nonspored\", \"nonstandardised\", \"nonstandardized\", \"nonstratified\", \"nonstressed\", \"nonstriated\", \"nonstriped\", \"nonstructured\", \"nonstylised\", \"nonstylized\", \"nonsubmerged\", \"nonsubscripted\", \"nonsubsidised\", \"nonsubsidized\", \"nonsubstituted\", \"nonsyndicated\", \"nonsynthesised\", \"nontabulated\", \"nontalented\", \"nonthreaded\", \"nontinted\", \"nontolerated\", \"nontranslated\", \"nontunnelled\", \"nonunified\", \"nonunionised\", \"nonupholstered\", \"nonutilised\", \"nonutilized\", \"nonvalued\", \"nonvaried\", \"nonverbalized\", \"nonvitrified\", \"nonvolatilised\", \"nonvolatilized\", \"normed\", \"nosebleed\", \"notated\", \"notified\", \"nuanced\", \"nullified\", \"numerated\", \"oarweed\", \"objectified\", \"obliqued\", \"obtunded\", \"occupied\", \"octupled\", \"odored\", \"oilseed\", \"oinked\", \"oldfashioned\", \"onesided\", \"oophorectomized\", \"opaqued\", \"openhearted\", \"openminded\", \"openmouthed\", \"opiated\", \"opinionated\", \"oracled\", \"oreweed\", \"ossified\", \"outbreed\", \"outmoded\", \"outrigged\", \"outriggered\", \"outsized\", \"outskated\", \"outspeed\", \"outtopped\", \"outtrumped\", \"outvoiced\", \"outweed\", \"ovated\", \"overadorned\", \"overaged\", \"overalled\", \"overassured\", \"overbred\", \"overbreed\", \"overcomplicated\", \"overdamped\", \"overdetailed\", \"overdiversified\", \"overdyed\", \"overequipped\", \"overfatigued\", \"overfed\", \"overfeed\", \"overindebted\", \"overintensified\", \"overinventoried\", \"overmagnified\", \"overmodified\", \"overpreoccupied\", \"overprivileged\", \"overproportionated\", \"overqualified\", \"overseed\", \"oversexed\", \"oversimplified\", \"oversized\", \"oversophisticated\", \"overstudied\", \"oversulfated\", \"ovicelled\", \"ovoidshaped\", \"ozonated\", \"pacified\", \"packeted\", \"palatalized\", \"paled\", \"palsied\", \"paned\", \"panicled\", \"parabled\", \"parallelepiped\", \"parallelized\", \"parallelopiped\", \"parenthesised\", \"parodied\", \"parqueted\", \"passioned\", \"paunched\", \"pauperised\", \"pedigreed\", \"pedimented\", \"pedunculated\", \"pegged\", \"peglegged\", \"penanced\", \"pencilshaped\", \"permineralized\", \"personified\", \"petrified\", \"photodissociated\", \"photoduplicated\", \"photoed\", \"photoinduced\", \"photolysed\", \"photolyzed\", \"pied\", \"pigeoned\", \"pigtailed\", \"pigweed\", \"pilastered\", \"pillared\", \"pilloried\", \"pimpled\", \"pinealectomised\", \"pinealectomized\", \"pinfeathered\", \"pinnacled\", \"pinstriped\", \"pixellated\", \"pixilated\", \"pixillated\", \"plainclothed\", \"plantarflexed\", \"pled\", \"plumaged\", \"pocked\", \"pokeweed\", \"polychlorinated\", \"polyunsaturated\", \"ponytailed\", \"pooched\", \"poorspirited\", \"popeyed\", \"poppyseed\", \"porcelainized\", \"porched\", \"poshed\", \"pottered\", \"poxed\", \"preachified\", \"precertified\", \"preclassified\", \"preconized\", \"preinoculated\", \"premed\", \"prenotified\", \"preoccupied\", \"preposed\", \"prequalified\", \"preshaped\", \"presignified\", \"prespecified\", \"prettified\", \"pried\", \"principled\", \"proceed\", \"prophesied\", \"propounded\", \"prosed\", \"protonated\", \"proudhearted\", \"proxied\", \"pulpified\", \"pumpkinseed\", \"puppied\", \"purebred\", \"pured\", \"pureed\", \"purified\", \"pustuled\", \"putrefied\", \"pyjamaed\", \"quadruped\", \"qualified\", \"quantified\", \"quantised\", \"quantized\", \"quarried\", \"queried\", \"questoned\", \"quicktempered\", \"quickwitted\", \"quiesced\", \"quietened\", \"quizzified\", \"racemed\", \"radiosensitised\", \"ragweed\", \"raindrenched\", \"ramped\", \"rapeseed\", \"rarefied\", \"rarified\", \"ratified\", \"razoredged\", \"reaccelerated\", \"reaccompanied\", \"reachieved\", \"reacknowledged\", \"readdicted\", \"readied\", \"reamplified\", \"reannealed\", \"reassociated\", \"rebadged\", \"rebiopsied\", \"recabled\", \"recategorised\", \"receipted\", \"recentred\", \"recertified\", \"rechoreographed\", \"reclarified\", \"reclassified\", \"reconferred\", \"recrystalized\", \"rectified\", \"recursed\", \"red\", \"redblooded\", \"redefied\", \"redenied\", \"rednecked\", \"redshifted\", \"redweed\", \"redyed\", \"reed\", \"reembodied\", \"reenlighted\", \"refeed\", \"refereed\", \"reflexed\", \"refortified\", \"refronted\", \"refuged\", \"reglorified\", \"reimpregnated\", \"reinitialized\", \"rejustified\", \"related\", \"reliquefied\", \"remedied\", \"remodified\", \"remonetized\", \"remythologized\", \"renotified\", \"renullified\", \"renumerated\", \"reoccupied\", \"repacified\", \"repurified\", \"reputed\", \"requalified\", \"rescinded\", \"reseed\", \"reshoed\", \"resolidified\", \"resorbed\", \"respecified\", \"restudied\", \"retabulated\", \"reticulated\", \"retinted\", \"retreed\", \"retroacted\", \"reunified\", \"reverified\", \"revested\", \"revivified\", \"rewed\", \"ridgepoled\", \"riffled\", \"rightminded\", \"rigidified\", \"rinded\", \"riped\", \"rited\", \"ritualised\", \"riverbed\", \"rivered\", \"roached\", \"roadbed\", \"robotised\", \"robotized\", \"romanized\", \"rosetted\", \"rosined\", \"roughhearted\", \"rubied\", \"ruddied\", \"runcinated\", \"russeted\", \"sabled\", \"sabred\", \"sabretoothed\", \"sacheted\", \"sacred\", \"saddlebred\", \"sainted\", \"salaried\", \"samoyed\", \"sanctified\", \"satellited\", \"savvied\", \"sawtoothed\", \"scandalled\", \"scarified\", \"scarped\", \"sceptred\", \"scissored\", \"screed\", \"screwshaped\", \"scrupled\", \"sculked\", \"scurried\", \"scuttled\", \"seabed\", \"seaweed\", \"seed\", \"seedbed\", \"selfassured\", \"selforganized\", \"semicivilized\", \"semidetached\", \"semidisassembled\", \"semidomesticated\", \"semipetrified\", \"semipronated\", \"semirefined\", \"semivitrified\", \"sentineled\", \"sepaled\", \"sepalled\", \"sequinned\", \"sexed\", \"shagged\", \"shaggycoated\", \"shaggyhaired\", \"shaled\", \"shammed\", \"sharpangled\", \"sharpclawed\", \"sharpcornered\", \"sharpeared\", \"sharpedged\", \"sharpeyed\", \"sharpflavored\", \"sharplimbed\", \"sharpnosed\", \"sharpsighted\", \"sharptailed\", \"sharptongued\", \"sharptoothed\", \"sharpwitted\", \"sharpworded\", \"shed\", \"shellbed\", \"shieldshaped\", \"shimmied\", \"shinned\", \"shirted\", \"shirtsleeved\", \"shoed\", \"shortbeaked\", \"shortbilled\", \"shortbodied\", \"shorthaired\", \"shortlegged\", \"shortlimbed\", \"shortnecked\", \"shortnosed\", \"shortsighted\", \"shortsleeved\", \"shortsnouted\", \"shortstaffed\", \"shorttailed\", \"shorttempered\", \"shorttoed\", \"shorttongued\", \"shortwinded\", \"shortwinged\", \"shotted\", \"shred\", \"shrewsized\", \"shrined\", \"shrinkproofed\", \"sickbed\", \"sickleshaped\", \"sickleweed\", \"signalised\", \"signified\", \"silicified\", \"siliconized\", \"silkweed\", \"siltsized\", \"silvertongued\", \"simpleminded\", \"simplified\", \"singlebarreled\", \"singlebarrelled\", \"singlebed\", \"singlebladed\", \"singlebreasted\", \"singlecelled\", \"singlefooted\", \"singlelayered\", \"singleminded\", \"singleseeded\", \"singleshelled\", \"singlestranded\", \"singlevalued\", \"sissified\", \"sistered\", \"sixgilled\", \"sixmembered\", \"sixsided\", \"sixstoried\", \"skulled\", \"slickered\", \"slipcased\", \"slowpaced\", \"slowwitted\", \"slurried\", \"smallminded\", \"smoothened\", \"smoothtongued\", \"snaggletoothed\", \"snouted\", \"snowballed\", \"snowcapped\", \"snowshed\", \"snowshoed\", \"snubnosed\", \"so-called\", \"sofabed\", \"softhearted\", \"sogged\", \"soled\", \"solidified\", \"soliped\", \"sorbed\", \"souled\", \"spearshaped\", \"specified\", \"spectacled\", \"sped\", \"speeched\", \"speechified\", \"speed\", \"spied\", \"spiffied\", \"spindleshaped\", \"spiritualised\", \"spirted\", \"splayfooted\", \"spoonfed\", \"spoonfeed\", \"spoonshaped\", \"spreadeagled\", \"squarejawed\", \"squareshaped\", \"squareshouldered\", \"squaretoed\", \"squeegeed\", \"staled\", \"starshaped\", \"starspangled\", \"starstudded\", \"statechartered\", \"statesponsored\", \"statued\", \"steadied\", \"steampowered\", \"steed\", \"steelhearted\", \"steepled\", \"sterned\", \"stiffnecked\", \"stilettoed\", \"stimied\", \"stinkweed\", \"stirrupshaped\", \"stockinged\", \"storeyed\", \"storied\", \"stouthearted\", \"straitlaced\", \"stratified\", \"strawberryflavored\", \"streambed\", \"stressinduced\", \"stretchered\", \"strictured\", \"strongbodied\", \"strongboned\", \"strongflavored\", \"stronghearted\", \"stronglimbed\", \"strongminded\", \"strongscented\", \"strongwilled\", \"stubbled\", \"studied\", \"stultified\", \"stupefied\", \"styed\", \"stymied\", \"subclassified\", \"subcommissioned\", \"subminiaturised\", \"subsaturated\", \"subulated\", \"suburbanised\", \"suburbanized\", \"suburbed\", \"succeed\", \"sueded\", \"sugarrelated\", \"sulfurized\", \"sunbed\", \"superhardened\", \"superinfected\", \"supersimplified\", \"surefooted\", \"sweetscented\", \"swifted\", \"swordshaped\", \"syllabified\", \"syphilized\", \"tabularized\", \"talented\", \"tarpapered\", \"tautomerized\", \"teated\", \"teed\", \"teenaged\", \"teetotaled\", \"tenderhearted\", \"tentacled\", \"tenured\", \"termed\", \"ternated\", \"testbed\", \"testified\", \"theatricalised\", \"theatricalized\", \"themed\", \"thicketed\", \"thickskinned\", \"thickwalled\", \"thighed\", \"thimbled\", \"thimblewitted\", \"thonged\", \"thoroughbred\", \"thralled\", \"threated\", \"throated\", \"throughbred\", \"thyroidectomised\", \"thyroidectomized\", \"tiaraed\", \"ticktocked\", \"tidied\", \"tightassed\", \"tightfisted\", \"tightlipped\", \"timehonoured\", \"tindered\", \"tined\", \"tinselled\", \"tippytoed\", \"tiptoed\", \"titled\", \"toed\", \"tomahawked\", \"tonged\", \"toolshed\", \"toothplated\", \"toplighted\", \"torchlighted\", \"toughhearted\", \"traditionalized\", \"trajected\", \"tranced\", \"transgendered\", \"transliterated\", \"translocated\", \"transmogrified\", \"treadled\", \"treed\", \"treelined\", \"tressed\", \"trialled\", \"triangled\", \"trifoliated\", \"trifoliolated\", \"trilobed\", \"trucklebed\", \"truehearted\", \"trumpetshaped\", \"trumpetweed\", \"tuberculated\", \"tumbleweed\", \"tunnelshaped\", \"turbaned\", \"turreted\", \"turtlenecked\", \"tuskshaped\", \"tweed\", \"twigged\", \"typified\", \"ulcered\", \"ultracivilised\", \"ultracivilized\", \"ultracooled\", \"ultradignified\", \"ultradispersed\", \"ultrafiltered\", \"ultrared\", \"ultrasimplified\", \"ultrasophisticated\", \"unabandoned\", \"unabashed\", \"unabbreviated\", \"unabetted\", \"unabolished\", \"unaborted\", \"unabraded\", \"unabridged\", \"unabsolved\", \"unabsorbed\", \"unaccelerated\", \"unaccented\", \"unaccentuated\", \"unacclimatised\", \"unacclimatized\", \"unaccompanied\", \"unaccomplished\", \"unaccosted\", \"unaccredited\", \"unaccrued\", \"unaccumulated\", \"unaccustomed\", \"unacidulated\", \"unacquainted\", \"unacquitted\", \"unactivated\", \"unactuated\", \"unadapted\", \"unaddicted\", \"unadjourned\", \"unadjudicated\", \"unadjusted\", \"unadmonished\", \"unadopted\", \"unadored\", \"unadorned\", \"unadsorbed\", \"unadulterated\", \"unadvertised\", \"unaerated\", \"unaffiliated\", \"unaggregated\", \"unagitated\", \"unaimed\", \"unaired\", \"unaliased\", \"unalienated\", \"unaligned\", \"unallocated\", \"unalloyed\", \"unalphabetized\", \"unamassed\", \"unamortized\", \"unamplified\", \"unanaesthetised\", \"unanaesthetized\", \"unaneled\", \"unanesthetised\", \"unanesthetized\", \"unangered\", \"unannealed\", \"unannexed\", \"unannihilated\", \"unannotated\", \"unanointed\", \"unanticipated\", \"unappareled\", \"unappendaged\", \"unapportioned\", \"unapprenticed\", \"unapproached\", \"unappropriated\", \"unarbitrated\", \"unarched\", \"unarchived\", \"unarmored\", \"unarmoured\", \"unarticulated\", \"unascertained\", \"unashamed\", \"unaspirated\", \"unassembled\", \"unasserted\", \"unassessed\", \"unassociated\", \"unassorted\", \"unassuaged\", \"unastonished\", \"unastounded\", \"unatoned\", \"unattained\", \"unattainted\", \"unattenuated\", \"unattributed\", \"unauctioned\", \"unaudited\", \"unauthenticated\", \"unautographed\", \"unaverted\", \"unawaked\", \"unawakened\", \"unawarded\", \"unawed\", \"unbaffled\", \"unbaited\", \"unbalconied\", \"unbanded\", \"unbanished\", \"unbaptised\", \"unbaptized\", \"unbarreled\", \"unbarrelled\", \"unbattered\", \"unbeaded\", \"unbearded\", \"unbeneficed\", \"unbesotted\", \"unbetrayed\", \"unbetrothed\", \"unbiased\", \"unbiassed\", \"unbigoted\", \"unbilled\", \"unblackened\", \"unblanketed\", \"unblasphemed\", \"unblazoned\", \"unblistered\", \"unblockaded\", \"unbloodied\", \"unbodied\", \"unbonded\", \"unbothered\", \"unbounded\", \"unbracketed\", \"unbranded\", \"unbreaded\", \"unbrewed\", \"unbridged\", \"unbridled\", \"unbroached\", \"unbudgeted\", \"unbuffed\", \"unbuffered\", \"unburnished\", \"unbutchered\", \"unbuttered\", \"uncached\", \"uncaked\", \"uncalcified\", \"uncalibrated\", \"uncamouflaged\", \"uncamphorated\", \"uncanceled\", \"uncancelled\", \"uncapitalized\", \"uncarbonated\", \"uncarpeted\", \"uncased\", \"uncashed\", \"uncastrated\", \"uncatalogued\", \"uncatalysed\", \"uncatalyzed\", \"uncategorised\", \"uncatered\", \"uncaulked\", \"uncelebrated\", \"uncensored\", \"uncensured\", \"uncertified\", \"unchambered\", \"unchanneled\", \"unchannelled\", \"unchaperoned\", \"uncharacterized\", \"uncharted\", \"unchartered\", \"unchastened\", \"unchastised\", \"unchelated\", \"uncherished\", \"unchilled\", \"unchristened\", \"unchronicled\", \"uncircumcised\", \"uncircumscribed\", \"uncited\", \"uncivilised\", \"uncivilized\", \"unclarified\", \"unclassed\", \"unclassified\", \"uncleaved\", \"unclimbed\", \"unclustered\", \"uncluttered\", \"uncoagulated\", \"uncoded\", \"uncodified\", \"uncoerced\", \"uncoined\", \"uncollapsed\", \"uncollated\", \"uncolonised\", \"uncolonized\", \"uncolumned\", \"uncombined\", \"uncommented\", \"uncommercialised\", \"uncommercialized\", \"uncommissioned\", \"uncommitted\", \"uncompacted\", \"uncompartmentalized\", \"uncompartmented\", \"uncompensated\", \"uncompiled\", \"uncomplicated\", \"uncompounded\", \"uncomprehened\", \"uncomputed\", \"unconcealed\", \"unconceded\", \"unconcluded\", \"uncondensed\", \"unconditioned\", \"unconfined\", \"unconfirmed\", \"uncongested\", \"unconglomerated\", \"uncongratulated\", \"unconjugated\", \"unconquered\", \"unconsecrated\", \"unconsoled\", \"unconsolidated\", \"unconstipated\", \"unconstricted\", \"unconstructed\", \"unconsumed\", \"uncontacted\", \"uncontracted\", \"uncontradicted\", \"uncontrived\", \"unconverted\", \"unconveyed\", \"unconvicted\", \"uncooked\", \"uncooled\", \"uncoordinated\", \"uncopyrighted\", \"uncored\", \"uncorrelated\", \"uncorroborated\", \"uncosted\", \"uncounseled\", \"uncounselled\", \"uncounterfeited\", \"uncoveted\", \"uncrafted\", \"uncramped\", \"uncrannied\", \"uncrazed\", \"uncreamed\", \"uncreased\", \"uncreated\", \"uncredentialled\", \"uncredited\", \"uncrested\", \"uncrevassed\", \"uncrippled\", \"uncriticised\", \"uncriticized\", \"uncropped\", \"uncrosslinked\", \"uncrowded\", \"uncrucified\", \"uncrumbled\", \"uncrystalized\", \"uncrystallised\", \"uncrystallized\", \"uncubed\", \"uncuddled\", \"uncued\", \"unculled\", \"uncultivated\", \"uncultured\", \"uncupped\", \"uncurated\", \"uncurbed\", \"uncurried\", \"uncurtained\", \"uncushioned\", \"undamped\", \"undampened\", \"undappled\", \"undarkened\", \"undated\", \"undaubed\", \"undazzled\", \"undeadened\", \"undeafened\", \"undebated\", \"undebunked\", \"undeceased\", \"undecimalized\", \"undeciphered\", \"undecked\", \"undeclared\", \"undecomposed\", \"undeconstructed\", \"undedicated\", \"undefeated\", \"undeferred\", \"undefied\", \"undefined\", \"undeflected\", \"undefrauded\", \"undefrayed\", \"undegassed\", \"undejected\", \"undelegated\", \"undeleted\", \"undelimited\", \"undelineated\", \"undemented\", \"undemolished\", \"undemonstrated\", \"undenatured\", \"undenied\", \"undented\", \"undeodorized\", \"undepicted\", \"undeputized\", \"underaged\", \"underarmed\", \"underassessed\", \"underbred\", \"underbudgeted\", \"undercapitalised\", \"undercapitalized\", \"underdiagnosed\", \"underdocumented\", \"underequipped\", \"underexploited\", \"underexplored\", \"underfed\", \"underfeed\", \"underfurnished\", \"undergoverned\", \"undergrazed\", \"underinflated\", \"underinsured\", \"underinvested\", \"underived\", \"undermaintained\", \"undermentioned\", \"undermotivated\", \"underperceived\", \"underpowered\", \"underprivileged\", \"underqualified\", \"underrehearsed\", \"underresourced\", \"underripened\", \"undersaturated\", \"undersexed\", \"undersized\", \"underspecified\", \"understaffed\", \"understocked\", \"understressed\", \"understudied\", \"underutilised\", \"underventilated\", \"undescaled\", \"undesignated\", \"undetached\", \"undetailed\", \"undetained\", \"undeteriorated\", \"undeterred\", \"undetonated\", \"undevised\", \"undevoted\", \"undevoured\", \"undiagnosed\", \"undialed\", \"undialysed\", \"undialyzed\", \"undiapered\", \"undiffracted\", \"undigested\", \"undignified\", \"undiluted\", \"undiminished\", \"undimmed\", \"undipped\", \"undirected\", \"undisciplined\", \"undiscouraged\", \"undiscussed\", \"undisfigured\", \"undisguised\", \"undisinfected\", \"undismayed\", \"undisposed\", \"undisproved\", \"undisputed\", \"undisrupted\", \"undissembled\", \"undissipated\", \"undissociated\", \"undissolved\", \"undistilled\", \"undistorted\", \"undistracted\", \"undistributed\", \"undisturbed\", \"undiversified\", \"undiverted\", \"undivulged\", \"undoctored\", \"undocumented\", \"undomesticated\", \"undosed\", \"undramatised\", \"undrilled\", \"undrugged\", \"undubbed\", \"unduplicated\", \"uneclipsed\", \"unedged\", \"unedited\", \"unejaculated\", \"unejected\", \"unelaborated\", \"unelapsed\", \"unelected\", \"unelectrified\", \"unelevated\", \"unelongated\", \"unelucidated\", \"unemaciated\", \"unemancipated\", \"unemasculated\", \"unembalmed\", \"unembed\", \"unembellished\", \"unembodied\", \"unemboldened\", \"unemerged\", \"unenacted\", \"unencoded\", \"unencrypted\", \"unencumbered\", \"unendangered\", \"unendorsed\", \"unenergized\", \"unenfranchised\", \"unengraved\", \"unenhanced\", \"unenlarged\", \"unenlivened\", \"unenraptured\", \"unenriched\", \"unentangled\", \"unentitled\", \"unentombed\", \"unentranced\", \"unentwined\", \"unenumerated\", \"unenveloped\", \"unenvied\", \"unequaled\", \"unequalised\", \"unequalized\", \"unequalled\", \"unequipped\", \"unerased\", \"unerected\", \"uneroded\", \"unerupted\", \"unescorted\", \"unestablished\", \"unevaluated\", \"unexaggerated\", \"unexampled\", \"unexcavated\", \"unexceeded\", \"unexcelled\", \"unexecuted\", \"unexerted\", \"unexhausted\", \"unexpensed\", \"unexperienced\", \"unexpired\", \"unexploited\", \"unexplored\", \"unexposed\", \"unexpurgated\", \"unextinguished\", \"unfabricated\", \"unfaceted\", \"unfanned\", \"unfashioned\", \"unfathered\", \"unfathomed\", \"unfattened\", \"unfavored\", \"unfavoured\", \"unfazed\", \"unfeathered\", \"unfed\", \"unfeigned\", \"unfermented\", \"unfertilised\", \"unfertilized\", \"unfilleted\", \"unfiltered\", \"unfinished\", \"unflavored\", \"unflavoured\", \"unflawed\", \"unfledged\", \"unfleshed\", \"unflurried\", \"unflushed\", \"unflustered\", \"unfluted\", \"unfocussed\", \"unforested\", \"unformatted\", \"unformulated\", \"unfortified\", \"unfractionated\", \"unfractured\", \"unfragmented\", \"unfrequented\", \"unfretted\", \"unfrosted\", \"unfueled\", \"unfunded\", \"unfurnished\", \"ungarbed\", \"ungarmented\", \"ungarnished\", \"ungeared\", \"ungerminated\", \"ungifted\", \"unglazed\", \"ungoverned\", \"ungraded\", \"ungrasped\", \"ungratified\", \"ungroomed\", \"ungrounded\", \"ungrouped\", \"ungummed\", \"ungusseted\", \"unhabituated\", \"unhampered\", \"unhandicapped\", \"unhardened\", \"unharvested\", \"unhasped\", \"unhatched\", \"unheralded\", \"unhindered\", \"unhomogenised\", \"unhomogenized\", \"unhonored\", \"unhonoured\", \"unhooded\", \"unhusked\", \"unhyphenated\", \"unified\", \"unillustrated\", \"unimpacted\", \"unimpaired\", \"unimpassioned\", \"unimpeached\", \"unimpelled\", \"unimplemented\", \"unimpregnated\", \"unimprisoned\", \"unimpugned\", \"unincorporated\", \"unincubated\", \"unincumbered\", \"unindemnified\", \"unindexed\", \"unindicted\", \"unindorsed\", \"uninduced\", \"unindustrialised\", \"unindustrialized\", \"uninebriated\", \"uninfected\", \"uninflated\", \"uninflected\", \"uninhabited\", \"uninhibited\", \"uninitialised\", \"uninitialized\", \"uninitiated\", \"uninoculated\", \"uninseminated\", \"uninsulated\", \"uninsured\", \"uninterpreted\", \"unintimidated\", \"unintoxicated\", \"unintroverted\", \"uninucleated\", \"uninverted\", \"uninvested\", \"uninvolved\", \"unissued\", \"unjaundiced\", \"unjointed\", \"unjustified\", \"unkeyed\", \"unkindled\", \"unlabelled\", \"unlacquered\", \"unlamented\", \"unlaminated\", \"unlarded\", \"unlaureled\", \"unlaurelled\", \"unleaded\", \"unleavened\", \"unled\", \"unlettered\", \"unlicenced\", \"unlighted\", \"unlimbered\", \"unlimited\", \"unlined\", \"unlipped\", \"unliquidated\", \"unlithified\", \"unlittered\", \"unliveried\", \"unlobed\", \"unlocalised\", \"unlocalized\", \"unlocated\", \"unlogged\", \"unlubricated\", \"unmagnified\", \"unmailed\", \"unmaimed\", \"unmaintained\", \"unmalted\", \"unmangled\", \"unmanifested\", \"unmanipulated\", \"unmannered\", \"unmanufactured\", \"unmapped\", \"unmarred\", \"unmastered\", \"unmatriculated\", \"unmechanised\", \"unmechanized\", \"unmediated\", \"unmedicated\", \"unmentioned\", \"unmerged\", \"unmerited\", \"unmetabolised\", \"unmetabolized\", \"unmetamorphosed\", \"unmethylated\", \"unmineralized\", \"unmitigated\", \"unmoderated\", \"unmodernised\", \"unmodernized\", \"unmodified\", \"unmodulated\", \"unmolded\", \"unmolested\", \"unmonitored\", \"unmortgaged\", \"unmotivated\", \"unmotorised\", \"unmotorized\", \"unmounted\", \"unmutated\", \"unmutilated\", \"unmyelinated\", \"unnaturalised\", \"unnaturalized\", \"unnotched\", \"unnourished\", \"unobligated\", \"unobstructed\", \"unoccupied\", \"unoiled\", \"unopposed\", \"unoptimised\", \"unordained\", \"unorganised\", \"unorganized\", \"unoriented\", \"unoriginated\", \"unornamented\", \"unoxidized\", \"unoxygenated\", \"unpacified\", \"unpackaged\", \"unpaired\", \"unparalleled\", \"unparallelled\", \"unparasitized\", \"unpardoned\", \"unparodied\", \"unpartitioned\", \"unpasteurised\", \"unpasteurized\", \"unpatented\", \"unpaved\", \"unpedigreed\", \"unpenetrated\", \"unpenned\", \"unperfected\", \"unperjured\", \"unpersonalised\", \"unpersuaded\", \"unperturbed\", \"unperverted\", \"unpestered\", \"unphosphorylated\", \"unphotographed\", \"unpigmented\", \"unpiloted\", \"unpledged\", \"unploughed\", \"unplumbed\", \"unpoised\", \"unpolarized\", \"unpoliced\", \"unpolled\", \"unpopulated\", \"unposed\", \"unpowered\", \"unprecedented\", \"unpredicted\", \"unprejudiced\", \"unpremeditated\", \"unprescribed\", \"unpressurised\", \"unpressurized\", \"unpriced\", \"unprimed\", \"unprincipled\", \"unprivileged\", \"unprized\", \"unprocessed\", \"unprofaned\", \"unprofessed\", \"unprohibited\", \"unprompted\", \"unpronounced\", \"unproposed\", \"unprospected\", \"unproved\", \"unpruned\", \"unpublicised\", \"unpublicized\", \"unpublished\", \"unpuckered\", \"unpunctuated\", \"unpurified\", \"unqualified\", \"unquantified\", \"unquenched\", \"unquoted\", \"unranked\", \"unrated\", \"unratified\", \"unrebuked\", \"unreckoned\", \"unrecompensed\", \"unreconciled\", \"unreconstructed\", \"unrectified\", \"unredeemed\", \"unrefined\", \"unrefreshed\", \"unrefrigerated\", \"unregarded\", \"unregimented\", \"unregistered\", \"unregulated\", \"unrehearsed\", \"unrelated\", \"unrelieved\", \"unrelinquished\", \"unrenewed\", \"unrented\", \"unrepealed\", \"unreplicated\", \"unreprimanded\", \"unrequited\", \"unrespected\", \"unrestricted\", \"unretained\", \"unretarded\", \"unrevised\", \"unrevived\", \"unrevoked\", \"unrifled\", \"unripened\", \"unrivaled\", \"unrivalled\", \"unroasted\", \"unroofed\", \"unrounded\", \"unruffled\", \"unsalaried\", \"unsalted\", \"unsanctified\", \"unsanctioned\", \"unsanded\", \"unsaponified\", \"unsated\", \"unsatiated\", \"unsatisfied\", \"unsaturated\", \"unscaled\", \"unscarred\", \"unscathed\", \"unscented\", \"unscheduled\", \"unschooled\", \"unscreened\", \"unscripted\", \"unseamed\", \"unseared\", \"unseasoned\", \"unseeded\", \"unsegmented\", \"unsegregated\", \"unselected\", \"unserviced\", \"unsexed\", \"unshamed\", \"unshaped\", \"unsharpened\", \"unsheared\", \"unshielded\", \"unshifted\", \"unshirted\", \"unshoed\", \"unshuttered\", \"unsifted\", \"unsighted\", \"unsilenced\", \"unsimplified\", \"unsized\", \"unskewed\", \"unskinned\", \"unslaked\", \"unsliced\", \"unsloped\", \"unsmoothed\", \"unsoiled\", \"unsoldered\", \"unsolicited\", \"unsolved\", \"unsophisticated\", \"unsorted\", \"unsourced\", \"unsoured\", \"unspaced\", \"unspanned\", \"unspecialised\", \"unspecialized\", \"unspecified\", \"unspiced\", \"unstaged\", \"unstandardised\", \"unstandardized\", \"unstapled\", \"unstarched\", \"unstarred\", \"unstated\", \"unsteadied\", \"unstemmed\", \"unsterilised\", \"unsterilized\", \"unstickered\", \"unstiffened\", \"unstifled\", \"unstigmatised\", \"unstigmatized\", \"unstilted\", \"unstippled\", \"unstipulated\", \"unstirred\", \"unstocked\", \"unstoked\", \"unstoppered\", \"unstratified\", \"unstressed\", \"unstriped\", \"unstructured\", \"unstudied\", \"unstumped\", \"unsubdued\", \"unsubmitted\", \"unsubsidised\", \"unsubsidized\", \"unsubstantiated\", \"unsubstituted\", \"unsugared\", \"unsummarized\", \"unsupervised\", \"unsuprised\", \"unsurveyed\", \"unswayed\", \"unsweetened\", \"unsyllabled\", \"unsymmetrized\", \"unsynchronised\", \"unsynchronized\", \"unsyncopated\", \"unsyndicated\", \"unsynthesized\", \"unsystematized\", \"untagged\", \"untainted\", \"untalented\", \"untanned\", \"untaped\", \"untapered\", \"untargeted\", \"untarnished\", \"untattooed\", \"untelevised\", \"untempered\", \"untenanted\", \"unterminated\", \"untextured\", \"unthickened\", \"unthinned\", \"unthrashed\", \"unthreaded\", \"unthrottled\", \"unticketed\", \"untiled\", \"untilled\", \"untilted\", \"untimbered\", \"untinged\", \"untinned\", \"untinted\", \"untitled\", \"untoasted\", \"untoggled\", \"untoothed\", \"untopped\", \"untoughened\", \"untracked\", \"untrammeled\", \"untrammelled\", \"untranscribed\", \"untransduced\", \"untransferred\", \"untranslated\", \"untransmitted\", \"untraumatized\", \"untraversed\", \"untufted\", \"untuned\", \"untutored\", \"unupgraded\", \"unupholstered\", \"unutilised\", \"unutilized\", \"unuttered\", \"unvaccinated\", \"unvacuumed\", \"unvalidated\", \"unvalued\", \"unvandalized\", \"unvaned\", \"unvanquished\", \"unvapourised\", \"unvapourized\", \"unvaried\", \"unvariegated\", \"unvarnished\", \"unvented\", \"unventilated\", \"unverbalised\", \"unverbalized\", \"unverified\", \"unversed\", \"unvetted\", \"unvictimized\", \"unviolated\", \"unvitrified\", \"unvocalized\", \"unvoiced\", \"unwaged\", \"unwarped\", \"unwarranted\", \"unwaxed\", \"unweakened\", \"unweaned\", \"unwearied\", \"unweathered\", \"unwebbed\", \"unwed\", \"unwedded\", \"unweeded\", \"unweighted\", \"unwelded\", \"unwinterized\", \"unwired\", \"unwitnessed\", \"unwonted\", \"unwooded\", \"unworshipped\", \"unwounded\", \"unzoned\", \"uprated\", \"uprighted\", \"upsized\", \"upswelled\", \"vacuolated\", \"valanced\", \"valueoriented\", \"varied\", \"vascularised\", \"vascularized\", \"vasectomised\", \"vaunted\", \"vectorised\", \"vectorized\", \"vegged\", \"verdured\", \"verified\", \"vermiculated\", \"vernacularized\", \"versified\", \"verticillated\", \"vesiculated\", \"vied\", \"vilified\", \"virtualised\", \"vitrified\", \"vivified\", \"volumed\", \"vulcanised\", \"wabbled\", \"wafered\", \"waisted\", \"walleyed\", \"wared\", \"warmblooded\", \"warmhearted\", \"warted\", \"waterbased\", \"waterbed\", \"watercooled\", \"watersaturated\", \"watershed\", \"wavegenerated\", \"waxweed\", \"weakhearted\", \"weakkneed\", \"weakminded\", \"wearied\", \"weatherised\", \"weatherstriped\", \"webfooted\", \"wedgeshaped\", \"weed\", \"weeviled\", \"welladapted\", \"welladjusted\", \"wellbred\", \"wellconducted\", \"welldefined\", \"welldisposed\", \"welldocumented\", \"wellequipped\", \"wellestablished\", \"wellfavored\", \"wellfed\", \"wellgrounded\", \"wellintentioned\", \"wellmannered\", \"wellminded\", \"wellorganised\", \"wellrounded\", \"wellshaped\", \"wellstructured\", \"whinged\", \"whinnied\", \"whiplashed\", \"whiskered\", \"wholehearted\", \"whorled\", \"widebased\", \"wideeyed\", \"widemeshed\", \"widemouthed\", \"widenecked\", \"widespaced\", \"wilded\", \"wildered\", \"wildeyed\", \"willinghearted\", \"windspeed\", \"winterfed\", \"winterfeed\", \"winterised\", \"wirehaired\", \"wised\", \"witchweed\", \"woaded\", \"wombed\", \"wooded\", \"woodshed\", \"wooled\", \"woolled\", \"woollyhaired\", \"woollystemmed\", \"woolyhaired\", \"woolyminded\", \"wormholed\", \"wormshaped\", \"wrappered\", \"wretched\", \"wronghearted\", \"ycleped\", \"yolked\", \"zincified\", \"zinckified\", \"zinkified\", \"zombified\"];\n};\n//# sourceMappingURL=non-verb-ending-ed.js.map\n//# sourceMappingURL=non-verb-ending-ed.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/non-verb-ending-ed.js\n// module id = 1492\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/non-verb-ending-ed.js?");

/***/ }),
/* 1493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isEmpty = __webpack_require__(97);\nvar forEach = __webpack_require__(32);\n/**\n * Checks whether a given word precedes a participle directly or indirectly.\n *\n * @param {Array} precedingWords The array of objects with matches and indices.\n * @param {number} participleIndex The index of the participle.\n *\n * @returns {boolean} Returns true if the participle is preceded by a given word, otherwise returns false.\n */\nmodule.exports = function (precedingWords, participleIndex) {\n    if (isEmpty(precedingWords)) {\n        return false;\n    }\n    var precedingWordsIndices = [];\n    forEach(precedingWords, function (precedingWord) {\n        var precedingWordsIndex = precedingWord.index;\n        precedingWordsIndices.push(precedingWordsIndex);\n    });\n    var matches = [];\n    forEach(precedingWordsIndices, function (precedingWordsIndex) {\n        // + 1 because the beginning word boundary is not included in the passive participle match\n        if (precedingWordsIndex + 1 < participleIndex) {\n            matches.push(precedingWordsIndex);\n        }\n    });\n    if (matches.length > 0) {\n        return true;\n    }\n    return false;\n};\n//# sourceMappingURL=precedesIndex.js.map\n//# sourceMappingURL=precedesIndex.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/precedesIndex.js\n// module id = 1493\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/precedesIndex.js?");

/***/ }),
/* 1494 */
/***/ (function(module, exports, __webpack_require__) {

eval("var SetCache = __webpack_require__(708),\n    arrayIncludes = __webpack_require__(1125),\n    arrayIncludesWith = __webpack_require__(1126),\n    arrayMap = __webpack_require__(327),\n    baseUnary = __webpack_require__(401),\n    cacheHas = __webpack_require__(709);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseIntersection;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIntersection.js\n// module id = 1494\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIntersection.js?");

/***/ }),
/* 1495 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isArrayLikeObject = __webpack_require__(1092);\n\n/**\n * Casts `value` to an empty array if it's not an array like object.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array|Object} Returns the cast array-like object.\n */\nfunction castArrayLikeObject(value) {\n  return isArrayLikeObject(value) ? value : [];\n}\n\nmodule.exports = castArrayLikeObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_castArrayLikeObject.js\n// module id = 1495\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_castArrayLikeObject.js?");

/***/ }),
/* 1496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Participle = __webpack_require__(393);\nvar checkException = __webpack_require__(568);\nvar directPrecedenceException = __webpack_require__(569);\nvar precedenceException = __webpack_require__(693);\nvar exceptionsParticiplesAdjectivesVerbs = __webpack_require__(694)().adjectivesVerbs;\nvar exceptionsParticiplesNounsVowel = __webpack_require__(694)().nounsStartingWithVowel;\nvar exceptionsParticiplesNounsConsonant = __webpack_require__(694)().nounsStartingWithConsonant;\nvar exceptionsParticiplesOthers = __webpack_require__(694)().others;\nvar includes = __webpack_require__(147);\nvar forEach = __webpack_require__(32);\nvar memoize = __webpack_require__(214);\n/**\n * Creates an Participle object for the French language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes  The attributes object.\n *\n * @constructor\n */\nvar FrenchParticiple = function FrenchParticiple(participle, sentencePart, attributes) {\n    Participle.call(this, participle, sentencePart, attributes);\n    checkException.call(this);\n};\n__webpack_require__(79).inherits(FrenchParticiple, Participle);\n/**\n * Checks whether the participle is irregular.\n *\n * @returns {boolean} Returns true if the passive is irregular.\n */\nvar checkIrregular = function checkIrregular() {\n    if (this.getType() === \"irregular\") {\n        return true;\n    }\n};\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nFrenchParticiple.prototype.isPassive = function () {\n    var sentencePart = this.getSentencePart();\n    var participleIndex = sentencePart.indexOf(this.getParticiple());\n    var language = this.getLanguage();\n    // Only check precedence exceptions for irregular participles.\n    if (checkIrregular.call(this)) {\n        return !this.directPrecedenceException(sentencePart, participleIndex, language) && !this.precedenceException(sentencePart, participleIndex, language);\n    }\n    // Check precedence exceptions and exception lists for regular participles.\n    return !this.isOnAdjectivesVerbsExceptionList() && !this.isOnNounsExceptionList() && !this.isOnOthersExceptionList() && !this.directPrecedenceException(sentencePart, participleIndex, language) && !this.precedenceException(sentencePart, participleIndex, language);\n};\n/**\n * Creates regexes to match adjective and verb participle exceptions (including suffixes) and memoizes them.\n *\n * @returns {Array} Returns an array with all adjective and verb participle exceptions.\n */\nvar getExceptionsParticiplesAdjectivesVerbsRegexes = memoize(function () {\n    var exceptionsParticiplesAdjectivesVerbsRegexes = [];\n    forEach(exceptionsParticiplesAdjectivesVerbs, function (exceptionParticiplesAdjectivesVerbs) {\n        exceptionsParticiplesAdjectivesVerbsRegexes.push(new RegExp(\"^\" + exceptionParticiplesAdjectivesVerbs + \"(e|s|es)?$\", \"ig\"));\n    });\n    return exceptionsParticiplesAdjectivesVerbsRegexes;\n});\n/**\n * Creates regexes to match noun participle exceptions (including suffixes) and memoizes them.\n *\n * @returns {Array} Returns an array with all noun participle exceptions.\n */\nvar getExceptionsParticiplesNounsRegexes = memoize(function () {\n    var exceptionsParticiplesNounsRegexes = [];\n    // Nouns starting with a vowel are checked with -s suffix and l' and d' prefixes.\n    forEach(exceptionsParticiplesNounsVowel, function (exceptionParticipleNounVowel) {\n        exceptionsParticiplesNounsRegexes.push(new RegExp(\"^(l'|d')?\" + exceptionParticipleNounVowel + \"(s)?$\", \"ig\"));\n    });\n    // Nouns starting with a consonant are checked with -s suffix.\n    forEach(exceptionsParticiplesNounsConsonant, function (exceptionParticipleNounConsonant) {\n        exceptionsParticiplesNounsRegexes.push(new RegExp(\"^\" + exceptionParticipleNounConsonant + \"(s)?$\", \"ig\"));\n    });\n    return exceptionsParticiplesNounsRegexes;\n});\n/**\n * Checks whether a given participle matches a list of regex exceptions.\n *\n * @param {Array} participleExceptionRegexes The array of regexes to check.\n * @returns {boolean} Returns true if the participle matches a regex.\n */\nvar checkParticipleExceptionRegexes = function checkParticipleExceptionRegexes(participleExceptionRegexes) {\n    var participle = this.getParticiple();\n    var match = [];\n    forEach(participleExceptionRegexes, function (participleExceptionRegex) {\n        var exceptionMatch = participle.match(participleExceptionRegex);\n        if (exceptionMatch) {\n            match.push(exceptionMatch[0]);\n        }\n    });\n    if (match.length > 0) {\n        return true;\n    }\n    return false;\n};\n/**\n * Checks whether a found participle is in the exception list of adjectives and verbs.\n * These words are checked with e/s/es as possible suffixes.\n * If a word is on the list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list of adjectives and verbs, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnAdjectivesVerbsExceptionList = function () {\n    var exceptionParticiplesAdjectivesVerbs = getExceptionsParticiplesAdjectivesVerbsRegexes();\n    return checkParticipleExceptionRegexes.call(this, exceptionParticiplesAdjectivesVerbs);\n};\n/**\n * Checks whether a found participle is in the exception list of nouns.\n * These words are checked with s as a possible suffix.\n * If a word is on the list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list of nouns, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnNounsExceptionList = function () {\n    var exceptionsParticiplesNouns = getExceptionsParticiplesNounsRegexes();\n    return checkParticipleExceptionRegexes.call(this, exceptionsParticiplesNouns);\n};\n/**\n * Checks whether a found participle is in the exception list in the 'other' category.\n * If a word is on the list, it isn't a participle.\n * Irregular participles do not end in -é and therefore can't be on the list.\n *\n * @returns {boolean} Returns true if it is in the exception list of nouns, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnOthersExceptionList = function () {\n    return includes(exceptionsParticiplesOthers, this.getParticiple());\n};\nFrenchParticiple.prototype.directPrecedenceException = directPrecedenceException;\nFrenchParticiple.prototype.precedenceException = precedenceException;\nmodule.exports = FrenchParticiple;\n//# sourceMappingURL=FrenchParticiple.js.map\n//# sourceMappingURL=FrenchParticiple.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/FrenchParticiple.js\n// module id = 1496\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/FrenchParticiple.js?");

/***/ }),
/* 1497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Participle = __webpack_require__(393);\nvar checkException = __webpack_require__(568);\nvar directPrecedenceException = __webpack_require__(569);\nvar precedenceException = __webpack_require__(693);\n/**\n * Creates an Participle object for the Spanish language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes The attributes object.\n *\n * @constructor\n */\nvar SpanishParticiple = function SpanishParticiple(participle, sentencePart, attributes) {\n  Participle.call(this, participle, sentencePart, attributes);\n  checkException.call(this);\n};\n__webpack_require__(79).inherits(SpanishParticiple, Participle);\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nSpanishParticiple.prototype.isPassive = function () {\n  var sentencePart = this.getSentencePart();\n  var participleIndex = sentencePart.indexOf(this.getParticiple());\n  var language = this.getLanguage();\n  return !this.directPrecedenceException(sentencePart, participleIndex, language) && !this.precedenceException(sentencePart, participleIndex, language);\n};\nSpanishParticiple.prototype.directPrecedenceException = directPrecedenceException;\nSpanishParticiple.prototype.precedenceException = precedenceException;\nmodule.exports = SpanishParticiple;\n//# sourceMappingURL=SpanishParticiple.js.map\n//# sourceMappingURL=SpanishParticiple.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/SpanishParticiple.js\n// module id = 1497\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/SpanishParticiple.js?");

/***/ }),
/* 1498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Participle = __webpack_require__(393);\nvar checkException = __webpack_require__(568);\nvar directPrecedenceException = __webpack_require__(569);\nvar precedenceException = __webpack_require__(693);\n/**\n * Creates an Participle object for the Italian language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes The attributes object.\n *\n * @constructor\n */\nvar ItalianParticiple = function ItalianParticiple(participle, sentencePart, attributes) {\n  Participle.call(this, participle, sentencePart, attributes);\n  checkException.call(this);\n};\n__webpack_require__(79).inherits(ItalianParticiple, Participle);\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nItalianParticiple.prototype.isPassive = function () {\n  var sentencePart = this.getSentencePart();\n  var participleIndex = sentencePart.indexOf(this.getParticiple());\n  var language = this.getLanguage();\n  return !this.directPrecedenceException(sentencePart, participleIndex, language) && !this.precedenceException(sentencePart, participleIndex, language);\n};\nItalianParticiple.prototype.directPrecedenceException = directPrecedenceException;\nItalianParticiple.prototype.precedenceException = precedenceException;\nmodule.exports = ItalianParticiple;\n//# sourceMappingURL=ItalianParticiple.js.map\n//# sourceMappingURL=ItalianParticiple.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/ItalianParticiple.js\n// module id = 1498\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/ItalianParticiple.js?");

/***/ }),
/* 1499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar includes = __webpack_require__(147);\nvar Participle = __webpack_require__(393);\nvar checkException = __webpack_require__(568);\nvar nonParticiples = __webpack_require__(1500);\nvar directPrecedenceException = __webpack_require__(569);\n/**\n * Creates an Participle object for the Dutch language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes The attributes object.\n *\n * @constructor\n */\nvar DutchParticiple = function DutchParticiple(participle, sentencePart, attributes) {\n    Participle.call(this, participle, sentencePart, attributes);\n    checkException.call(this);\n};\n__webpack_require__(79).inherits(DutchParticiple, Participle);\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nDutchParticiple.prototype.isPassive = function () {\n    var sentencePart = this.getSentencePart();\n    var participleIndex = sentencePart.indexOf(this.getParticiple());\n    var language = this.getLanguage();\n    return !this.isOnNonParticiplesList() && !this.hasNonParticipleEnding() && !this.directPrecedenceException(sentencePart, participleIndex, language);\n};\n/**\n * Checks whether a found participle is in the nonParticiples list.\n *\n * @returns {boolean} Returns true if it is in the nonParticiples list, otherwise returns false.\n */\nDutchParticiple.prototype.isOnNonParticiplesList = function () {\n    if (this.getType() === \"irregular\") {\n        return false;\n    }\n    return includes(nonParticiples(), this.getParticiple());\n};\n/**\n * Checks whether a found participle has a non-participle ending and is therefore not really a participle.\n *\n * @returns {boolean} Returns true if the participle has a non-participle ending, otherwise returns false.\n */\nDutchParticiple.prototype.hasNonParticipleEnding = function () {\n    return (/\\S+(heid|teit|tijd)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig.test(this.getParticiple())\n    );\n};\nDutchParticiple.prototype.directPrecedenceException = directPrecedenceException;\nmodule.exports = DutchParticiple;\n//# sourceMappingURL=DutchParticiple.js.map\n//# sourceMappingURL=DutchParticiple.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/DutchParticiple.js\n// module id = 1499\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/DutchParticiple.js?");

/***/ }),
/* 1500 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list of non-participles which would incorrectly be recognized as participles if they weren't filtered.\n * @returns {Array} The list with non-participles.\n */\n\nmodule.exports = function () {\n  return [\"gebraad\", \"gebed\", \"gebied\", \"gebod\", \"gebodsbord\", \"geboorte-eiland\", \"geboortestad\", \"gebruikspaard\", \"gedachtewereld\", \"gedenkblad\", \"gedenknaald\", \"gedichtenwedstrijd\", \"gedoogakkoord\", \"gedoogbeleid\", \"geduld\", \"geestenwereld\", \"geesteskind\", \"geestestoestand\", \"geesteswereld\", \"gehandicaptenbeleid\", \"gehoorafstand\", \"gehoorsafstand\", \"geitenbaard\", \"geitenhuid\", \"geld\", \"geldhond\", \"geldvoorraad\", \"geleidehond\", \"gelijkekansenbeleid\", \"geloofsdaad\", \"geloofsinhoud\", \"geluidswand\", \"gelukskind\", \"gemeenschapsraad\", \"gemeentebeleid\", \"gemeenteraad\", \"gemeenteraadslid\", \"gemoedstoestand\", \"genadeverbond\", \"genderbeleid\", \"geneesmiddelenbeleid\", \"generaalsbewind\", \"geslachtsdaad\", \"gespreksavond\", \"gespreksflard\", \"getijdengebied\", \"gevangenisbeleid\", \"gevangeniswereld\", \"gevechtsafstand\", \"gevelwand\", \"gevoelstoestand\", \"gevoelswereld\", \"gewelddaad\", \"geweldigaard\", \"geweldverbod\", \"gezelschapshond\", \"gezichtsafstand\", \"gezichtshuid\", \"gezinsbeleid\", \"gezinsbond\", \"gezinshoofd\", \"gezinslid\", \"gezinspaard\", \"gezinstoestand\", \"gezondheidsbeleid\", \"gezondheidstoestand\", \"gezondheidszorgbeleid\", \"gecentreerd\", \"geserreerd\", \"gepolitoerd\", \"gebocheld\", \"gebrild\", \"gegleufd\", \"gekarteld\", \"gemeubeld\", \"gesausd\", \"geaccidenteerd\", \"geaccrediteerd\", \"geacheveerd\", \"geaderd\", \"geaggregeerd\", \"geagiteerd\", \"geallieerd\", \"geanimeerd\", \"geanticipeerd\", \"gearticuleerd\", \"geassorteerd\", \"gebenedijd\", \"gebiedend\", \"geblaseerd\", \"geblindeerd\", \"geborneerd\", \"gebronzeerd\", \"gebrouilleerd\", \"gebruind\", \"gecharmeerd\", \"gechromeerd\", \"geciviliseerd\", \"geclausuleerd\", \"gecoiffeerd\", \"geconditioneerd\", \"geconstipeerd\", \"gecontinueerd\", \"gecoöpteerd\", \"gecrispeerd\", \"gecultiveerd\", \"gedecideerd\", \"gedecolleteerd\", \"gedegouteerd\", \"gedemilitariseerd\", \"gedemodeerd\", \"gedesillusioneerd\", \"gedesinteresseerd\", \"gedetailleerd\", \"gediplomeerd\", \"gedisciplineerd\", \"gedisponeerd\", \"gedistingeerd\", \"gedomicilieerd\", \"gedoteerd\", \"gedupeerd\", \"geëigend\", \"geestdodend\", \"geestverruimend\", \"geëxalteerd\", \"geëxponeerd\", \"gefigureerd\", \"gefingeerd\", \"geflatteerd\", \"geforceerd\", \"gefumeerd\", \"gegeerd\", \"gegeneerd\", \"gegradueerd\", \"gegriepeerd\", \"gehaaid\", \"gehandschoend\", \"gehavend\", \"gehomologeerd\", \"gehorend\", \"geïllustreerd\", \"geïmponeerd\", \"geïmproviseerd\", \"geïncrimineerd\", \"geïrriteerd\", \"geklasseerd\", \"gekmakend\", \"gekuifd\", \"gekwalificeerd\", \"gelardeerd\", \"geldend\", \"geldverslindend\", \"geleed\", \"geleidend\", \"gelieerd\", \"geliefkoosd\", \"gelijkluidend\", \"gelinieerd\", \"geluiddempend\", \"geluidswerend\", \"geluidwerend\", \"gemarineerd\", \"gematteerd\", \"gemiddeld\", \"geoccupeerd\", \"geoutilleerd\", \"geparaffineerd\", \"geparfumeerd\", \"gepatenteerd\", \"gepermitteerd\", \"geplafonneerd\", \"geplisseerd\", \"gepredisponeerd\", \"geprefabriceerd\", \"gepreoccupeerd\", \"geproportioneerd\", \"geraffineerd\", \"gerandomiseerd\", \"gereformeerd\", \"gereglementeerd\", \"geresigneerd\", \"geresponsabiliseerd\", \"gerimpeld\", \"geringschattend\", \"geruchtmakend\", \"geruststellend\", \"gesatureerd\", \"gesauteerd\", \"geschakeerd\", \"gesepareerd\", \"geseponeerd\", \"gesofisticeerd\", \"gesoigneerd\", \"gespeend\", \"gespikkeld\", \"gestresseerd\", \"geurenblind\", \"gevergeerd\", \"geverseerd\", \"gezaghebbend\", \"gezagsondermijnend\", \"gezichtsbepalend\", \"gezinsvervangend\", \"gezwind\", \"geit\", \"gedragstherapeut\", \"geveltoerist\", \"gezant\", \"gerant\", \"gerst\", \"gerstenat\", \"geut\", \"gebarenkunst\", \"gebedsbijeenkomst\", \"gebekvecht\", \"gebiedsagent\", \"gebit\", \"geboorterecht\", \"gebruikersovereenkomst\", \"gebruiksrecht\", \"gebruiksvoorschrift\", \"gedragsvoorschrift\", \"geest\", \"geestdrift\", \"geesteskracht\", \"geestesproduct\", \"geestkracht\", \"gefluit\", \"gehandicaptensport\", \"geheimhoudingsplicht\", \"geheimschrift\", \"geheugenkunst\", \"gehoorapparaat\", \"geitenteelt\", \"gekloot\", \"geldautomaat\", \"geldingskracht\", \"geldingszucht\", \"geldkist\", \"geldmarkt\", \"geldmarkttekort\", \"geldpot\", \"geldsoort\", \"geldtekort\", \"geldtransport\", \"gelduitgifteautomaat\", \"geldzucht\", \"gelegenheidsargument\", \"geloofsgenoot\", \"geluidseffect\", \"geluidsoverlast\", \"geluidspoort\", \"gemaksproduct\", \"gemakzucht\", \"gemberpot\", \"gemeenschapsrecht\", \"gemeenteadvocaat\", \"gemeenteraadsbesluit\", \"gemeenterecht\", \"gemeentewet\", \"gemeentewiet\", \"gemoedsrust\", \"geneeskracht\", \"geneeskundestudent\", \"geneeskunst\", \"geneesmiddelenfabrikant\", \"geneesmiddelenmarkt\", \"generatieconflict\", \"generatiegenoot\", \"generatiepact\", \"generatiestudent\", \"genetkat\", \"genocidewet\", \"genot\", \"genotsproduct\", \"genotzucht\", \"gent\", \"geodeet\", \"geologiedocent\", \"gereedschapskist\", \"gerucht\", \"geruchtencircuit\", \"geschiedenisdocent\", \"geschiedenisstudent\", \"geschiet\", \"geschrift\", \"gespreksgenoot\", \"gesprekspunt\", \"getijdenkracht\", \"gevangenispoort\", \"gevecht\", \"gevechtskracht\", \"gevechtssport\", \"gevellijst\", \"gevelornament\", \"gewest\", \"gewetensangst\", \"gewetensconflict\", \"gewicht\", \"gewinzucht\", \"gewondentransport\", \"gewoonterecht\", \"gewricht\", \"gezagsapparaat\", \"gezinsbudget\", \"gezinsrapport\", \"gezondheidseffect\", \"gezondheidsklacht\", \"gezondheidsproduct\", \"gezondheidsrecht\", \"gezondheidswet\", \"gezondheidswinst\", \"gerokt\", \"gevlekt\", \"gebuikt\", \"gesaust\", \"gebiedsgericht\", \"geel-zwart\", \"gehandicapt\", \"gereformeerd-vrijgemaakt\", \"gestuikt\", \"geëtst\", \"bed\", \"bediendevakbond\", \"bedrijfsbeleid\", \"bedrijfsblad\", \"bedrijfspand\", \"bedrijfswereld\", \"bedrijvenbond\", \"beekdonderpad\", \"beeld\", \"beginselakkoord\", \"begintoestand\", \"begripsinhoud\", \"begrotingsakkoord\", \"begrotingsbeleid\", \"behandelaanbod\", \"beheerraad\", \"beheersgebied\", \"behoud\", \"beiaard\", \"bejaardenbeleid\", \"bekerwedstrijd\", \"belastinggebied\", \"belastinggeld\", \"belastingschuld\", \"beleggingsbeleid\", \"beleggingspand\", \"beleid\", \"beleidsdaad\", \"beleidsgebied\", \"belevingswereld\", \"belplafond\", \"beltegoed\", \"bemanningslid\", \"Bemiddelingsraad\", \"bendehoofd\", \"bendelid\", \"benedenstad\", \"benefietwedstrijd\", \"benoemingenbeleid\", \"benuttingsgraad\", \"berberpaard\", \"beregeningsverbod\", \"bergeend\", \"berggebied\", \"bergland\", \"bergpaard\", \"bergpad\", \"bergwand\", \"beroepsarbeid\", \"beroepsverbod\", \"beroepswereld\", \"beschermingsbeleid\", \"beschermingsgebied\", \"beslissingswedstrijd\", \"besparingsbeleid\", \"bestand\", \"bestandsakkoord\", \"besteleend\", \"besturenbond\", \"bestuursakkoord\", \"bestuursbeleid\", \"bestuurshoofd\", \"bestuurslid\", \"beukenblad\", \"beursmaand\", \"beursrecord\", \"beurswaakhond\", \"beurswereld\", \"beveiligingsbeleid\", \"bevolkingsbeleid\", \"bewind\", \"bewustzijnsinhoud\", \"bewustzijnstoestand\", \"bezuinigingsbeleid\", \"beenhard\", \"bebrild\", \"beangstigend\", \"bebaard\", \"bedeesd\", \"bederfwerend\", \"bedreigend\", \"bedrijvend\", \"bedroevend\", \"beduidend\", \"beduusd\", \"bedwelmend\", \"beeldbepalend\", \"beeldend\", \"beeldvormend\", \"beeldvullend\", \"begeleidend\", \"begerenswaard\", \"begrijpend\", \"behartenswaard\", \"behartigenswaard\", \"behoudend\", \"bejaard\", \"beklagenswaard\", \"beklemmend\", \"belanghebbend\", \"belangstellend\", \"belangwekkend\", \"belastingbesparend\", \"belastingbetalend\", \"beledigend\", \"beleerd\", \"beleidsadviserend\", \"belendend\", \"belerend\", \"bemoedigend\", \"benauwend\", \"benijdenswaard\", \"bepalend\", \"beperkend\", \"beregoed\", \"berekenend\", \"beroemd\", \"beroepsblind\", \"beschaamd\", \"beschamend\", \"beschouwend\", \"beschrijvend\", \"besdragend\", \"beslissend\", \"bestaand\", \"bestverkopend\", \"beteuterd\", \"betoverend\", \"betraand\", \"betreffend\", \"betreurenswaard\", \"bevelend\", \"bevelhebbend\", \"bevestigend\", \"bevoegd\", \"bevredigend\", \"bevreemdend\", \"bevriend\", \"bewonderenswaard\", \"bewustzijnsverruimend\", \"bezwarend\", \"beest\", \"berggeit\", \"betaalkracht\", \"beerput\", \"bergamot\", \"beschuit\", \"beademingsapparaat\", \"beddenfabrikant\", \"bedeltocht\", \"bedevaart\", \"bedevaartstocht\", \"bediendecontract\", \"bedieningsfout\", \"bedilzucht\", \"bedoeïenentent\", \"bedrijfsadvocaat\", \"bedrijfsfeest\", \"bedrijfsfysiotherapeut\", \"bedrijfsmanagement\", \"bedrijfsopbrengst\", \"bedrijfsrestaurant\", \"bedrijfsresultaat\", \"bedrijfssport\", \"bedrijfswinst\", \"bedrijvenmarkt\", \"bedrust\", \"beeldhouwkunst\", \"beeldmoment\", \"beeldrecht\", \"beeldsnijkunst\", \"beestenmarkt\", \"beet\", \"begeleidwonenproject\", \"beginnersfout\", \"beginpunt\", \"begrippenapparaat\", \"begrotingsdebat\", \"begrotingsrecht\", \"begrotingstekort\", \"behaagzucht\", \"behandelingsresultaat\", \"behoudzucht\", \"bejaardenpaspoort\", \"bekerplant\", \"bekerwinst\", \"beklagrecht\", \"beklemrecht\", \"belangenconflict\", \"belastingafdracht\", \"belastingbiljet\", \"belastingconsulent\", \"belastingdienst\", \"belastingexpert\", \"belastingopbrengst\", \"belastingplicht\", \"belastingrecht\", \"belastingspecialist\", \"belastingwet\", \"beleggersmarkt\", \"beleggingsexpert\", \"beleggingsmarkt\", \"beleggingsopbrengst\", \"beleggingsproduct\", \"beleggingsresultaat\", \"beleidsaspect\", \"beleidsdebat\", \"beleidsfout\", \"beleidsresultaat\", \"beleidsspecialist\", \"belevingsrestaurant\", \"belgicist\", \"belminuut\", \"beltegoedkaart\", \"bemoeizucht\", \"benefiet\", \"benefietconcert\", \"benoemingsbesluit\", \"benzinelucht\", \"benzinemarkt\", \"benzinetekort\", \"beoordelingsfout\", \"beoordelingsrapport\", \"berghut\", \"bergklimaat\", \"berglucht\", \"bergrit\", \"bergsport\", \"bergtijdrit\", \"bergtocht\", \"berichtendienst\", \"berkenhout\", \"bermmonument\", \"bermrecreant\", \"bermsloot\", \"bermtoerist\", \"beroepsdiplomaat\", \"beroepsernst\", \"beroepsfout\", \"beroepsgenoot\", \"beroepsjournalist\", \"beroepskracht\", \"beroepsrecht\", \"beroepssoldaat\", \"beroepssport\", \"berufsverbot\", \"beschermingsbesluit\", \"beschikkingsrecht\", \"beslismoment\", \"beslissingsrecht\", \"besluit\", \"bestaansrecht\", \"bestandsformaat\", \"bestelbiljet\", \"bestelkaart\", \"bestuursapparaat\", \"bestuursassistent\", \"bestuursbesluit\", \"bestuursconflict\", \"bestuurskracht\", \"bestuurskundedocent\", \"bestuursmandaat\", \"bestuursprocesrecht\", \"bestuursrecht\", \"betaalautomaat\", \"betaaldienst\", \"betaalkaart\", \"betaalopdracht\", \"betalingsbalanstekort\", \"betalingsopdracht\", \"bètastudent\", \"beterschapskaart\", \"betrouwbaarheidsrit\", \"beukenhout\", \"beursapparaat\", \"beursklimaat\", \"beurskrant\", \"beursmarkt\", \"beursstudent\", \"beurt\", \"beverrat\", \"bevoegdheidsconflict\", \"bevrijdingsconcert\", \"bevrijdingsfeest\", \"bewaarplicht\", \"bewegingsapparaat\", \"bewegingsdocent\", \"bewegingskunst\", \"bewijskracht\", \"bewijsrecht\", \"bewustwordingsproject\", \"bezemkast\", \"bezit\", \"bezitsrecht\", \"bezoekrecht\", \"bezuinigingsdrift\", \"bezuinigingsopdracht\", \"bezwaarschrift\", \"beroepsgericht\", \"bedompt\", \"bedrijfsgericht\", \"beginselvast\", \"beleidsgericht\", \"bewolkt\", \"bezweet\", \"verbeterblad\", \"verband\", \"verbeeldingswereld\", \"verbod\", \"verbodsbord\", \"verbond\", \"verdwaalarmband\", \"verdwijnwoord\", \"verenigingsblad\", \"verenigingslid\", \"verfhuid\", \"vergismoord\", \"vergunningenbeleid\", \"verhalenpad\", \"verhalenwedstrijd\", \"verkeersaanbod\", \"verkeersbeleid\", \"verkeersbord\", \"verkiezingsavond\", \"verkleinwoord\", \"verkoopbeleid\", \"verkoopverbod\", \"vernieuwingsbeleid\", \"verpleeghuisbed\", \"verraad\", \"verschijningsverbod\", \"verstand\", \"vertoningsverbod\", \"vertrekbeleid\", \"vervalmaand\", \"vervoerbeleid\", \"vervoersaanbod\", \"vervoersbeleid\", \"vervoersbond\", \"vervoersverbod\", \"vervolgingsbeleid\", \"verwijderingsbeleid\", \"verzamelbeleid\", \"verzekeringswereld\", \"verzetsdaad\", \"verzetsheld\", \"verzuimbeleid\", \"verdragend\", \"verkeersremmend\", \"verbazend\", \"verbazingwekkend\", \"verbijsterend\", \"verblindend\", \"verbluffend\", \"verbouwereerd\", \"verdaagd\", \"verdedigend\", \"verdovend\", \"vereend\", \"verfrissend\", \"vergelijkend\", \"verhalend\", \"verheffend\", \"verheugend\", \"verkikkerd\", \"verklarend\", \"verkwikkend\", \"verkwistend\", \"verlammend\", \"verlangend\", \"verliesgevend\", \"verlieslatend\", \"verlieslijdend\", \"verlokkend\", \"verlossend\", \"vermeend\", \"vermeldenswaard\", \"vermeldingswaard\", \"vermoeiend\", \"vermogend\", \"vernederend\", \"vernietigend\", \"verontrustend\", \"verpletterend\", \"verrassend\", \"verscheurend\", \"verschillend\", \"verslaafd\", \"verspringend\", \"verstikkend\", \"verstrekkend\", \"verstrooid\", \"vertederend\", \"vertrouwenwekkend\", \"vertwijfeld\", \"vervelend\", \"verwaand\", \"verwarrend\", \"verwoestend\", \"verzachtend\", \"verziend\", \"verzoenend\", \"verwant\", \"verantwoordingsplicht\", \"verbandkist\", \"verbeeldingskracht\", \"verbintenissenrecht\", \"verblijfsrecht\", \"verbrandingsproduct\", \"verbroederingsfeest\", \"verdedigingsfout\", \"verdragsrecht\", \"verdriet\", \"verdringingseffect\", \"veredelingsproduct\", \"verenigingsrecht\", \"verffabrikant\", \"verfpot\", \"verfrest\", \"vergiet\", \"vergoedingslimiet\", \"vergrotingsapparaat\", \"vergunningplicht\", \"verhaalsrecht\", \"verhuiskist\", \"verhuurboot\", \"verjaardagsfeest\", \"verjaardagsgast\", \"verjaardagstaart\", \"verjaarfeest\", \"verjaringsfeest\", \"verkeersagent\", \"verkeersinfarct\", \"verkeersmanagement\", \"verkeersmarkt\", \"verkeersoverlast\", \"verkeerswet\", \"verkenningstocht\", \"verkiezingsbijeenkomst\", \"verkiezingsbiljet\", \"verkiezingsdebat\", \"verkiezingsinkt\", \"verkiezingsresultaat\", \"verkiezingswinst\", \"verkleedkist\", \"verkoopapparaat\", \"verkoopargument\", \"verkoopopbrengst\", \"verkoopopdracht\", \"verkooprecht\", \"verkoopresultaat\", \"verkopersmarkt\", \"verlatingsangst\", \"verlovingsfeest\", \"verminderingskaart\", \"vermogensrecht\", \"vermogenstekort\", \"vermogenswinst\", \"vernielzucht\", \"vernietigingskracht\", \"vernieuwingsdebat\", \"vernieuwingsproject\", \"veroveringstocht\", \"veroveringszucht\", \"verpleegassistent\", \"verrassingseffect\", \"verrassingsfeest\", \"verrijkingsmarkt\", \"verruimingskandidaat\", \"verschoningsrecht\", \"verschot\", \"versproduct\", \"versterfrecht\", \"vertaalfout\", \"vertaalproject\", \"vertaalrecht\", \"vertebraat\", \"vertegenwoordigingsrecht\", \"vervangingsmarkt\", \"vervoersmanagement\", \"vervoersmarkt\", \"vervolgbijeenkomst\", \"vervolgingsapparaat\", \"vervolgopdracht\", \"vervolgproject\", \"vervreemdingseffect\", \"verwijt\", \"verzakingsrecht\", \"verzamelkrant\", \"verzekeringsagent\", \"verzekeringsmarkt\", \"verzekeringsproduct\", \"verzekeringsrecht\", \"verzekeringsresultaat\", \"verzetskrant\", \"verzoeningsbijeenkomst\", \"verzorgingsproduct\", \"slingerpad\", \"avondgebed\", \"bibbergeld\", \"dageraad\", \"drinkgeld\", \"kalfsgebraad\", \"leefgeld\", \"ochtendgebed\", \"ongelukskind\", \"vluggerd\", \"voltigeerpaard\", \"voltigepaard\", \"aandachtsgebied\", \"aanlijngebod\", \"aardbevingsgebied\", \"abonnementsgeld\", \"achtergrondgeluid\", \"achterstandsgebied\", \"actiegebied\", \"afzetgebied\", \"akkerbouwgebied\", \"alpengebied\", \"amazonegebied\", \"ambtsgebied\", \"ambtsgewaad\", \"antigeluid\", \"aspergebed\", \"autonomiegebied\", \"baggereiland\", \"bangerd\", \"bijgeluid\", \"bijstandsgeld\", \"binnenduingebied\", \"blindengeleidehond\", \"blowgebodsbord\", \"boezemgebied\", \"bongerd\", \"bosgebied\", \"bridgeavond\", \"bridgebond\", \"bridgewedstrijd\", \"broedgebied\", \"brongebied\", \"budgetbeleid\", \"burgerbewind\", \"centrumgebied\", \"collegelid\", \"computergebied\", \"concentratiegebied\", \"conceptregeerakkoord\", \"concessiegebied\", \"conflictgebied\", \"contactgeluid\", \"crisisgebied\", \"cultuurgebied\", \"dankgebed\", \"deelgebied\", \"deelnemingenbeleid\", \"deltagebied\", \"deskundigheidsgebied\", \"dierengeluid\", \"doelgebied\", \"doodsgewaad\", \"doorgangsgebied\", \"dopgeld\", \"douanegebied\", \"drempelgeld\", \"driekoningenavond\", \"duinengebied\", \"duingebied\", \"eigendomsvoorbehoud\", \"energiegebied\", \"engerd\", \"eurogebied\", \"feestgewaad\", \"filmgebied\", \"foerageergebied\", \"formuliergebed\", \"frequentiegebied\", \"frontgebied\", \"functioneringsgebied\", \"gangenpaard\", \"gitaargeluid\", \"gitaargeweld\", \"golfgebied\", \"golflengtegebied\", \"graangebied\", \"grachtengebied\", \"grensgebied\", \"groeigebied\", \"groengebied\", \"groepsgeluid\", \"groepsgeweld\", \"grondgebied\", \"grondwaterbeschermingsgebied\", \"haflingerpaard\", \"handelsgebied\", \"havengebied\", \"heidegebied\", \"helikoptergeld\", \"herkomstgebied\", \"herwaarderingsgebied\", \"hogedrukgebied\", \"hogeronderwijsbeleid\", \"hongersnood\", \"hoogveengebied\", \"ICT-gebied\", \"immigratiegebied\", \"inburgeringsbeleid\", \"indicatiegebied\", \"industriegebied\", \"ingeland\", \"inkomgeld\", \"interessegebied\", \"jachtgebied\", \"jagershond\", \"jongerenbeleid\", \"jongerenblad\", \"kantorengebied\", \"kassengebied\", \"keelgeluid\", \"kennisgebied\", \"kerngebied\", \"kernwinkelgebied\", \"kijkgeld\", \"kindergeld\", \"kleigebied\", \"kloostergewaad\", \"knipooggeweld\", \"kogelwond\", \"koorgebed\", \"krapgeldbeleid\", \"krijgsgeweld\", \"krimpgebied\", \"kruisgebed\", \"kunstgebied\", \"kustgebied\", \"kwelgebied\", \"lagedrukgebied\", \"landbouwgebied\", \"langeafstandspaard\", \"langebaanwedstrijd\", \"langetermijnbeleid\", \"leefgebied\", \"leergebied\", \"leerstofgebied\", \"legerpaard\", \"legervoorraad\", \"levensgebied\", \"lidgeld\", \"logeerbed\", \"luchtvaartgebied\", \"luistergeld\", \"machtsgebied\", \"managementbeleid\", \"mandaatgebied\", \"manegepaard\", \"marktgebied\", \"mededelingenblad\", \"mededelingenbord\", \"mediageweld\", \"merengebied\", \"middaggebed\", \"middengebied\", \"mijngebied\", \"milieubeschermingsgebied\", \"milieugebied\", \"misgewaad\", \"missiegebied\", \"modegebied\", \"moerasgebied\", \"morgengebed\", \"Morgenland\", \"morgenstond\", \"moslimgebied\", \"motorgeluid\", \"muilkorfgebod\", \"nachtgewaad\", \"nagelbed\", \"natuurbeschermingsgebied\", \"natuurgebied\", \"natuurgeweld\", \"natuurontwikkelingsgebied\", \"NAVO-gebied\", \"NAVO-grondgebied\", \"nederzettingenbeleid\", \"neerslaggebied\", \"negerkind\", \"no-gogebied\", \"noodgebied\", \"noordpoolgebied\", \"Noordzeegebied\", \"oceaangebied\", \"octrooigebied\", \"oefengebied\", \"oerwoudgeluid\", \"oliegebied\", \"omgevingsbeleid\", \"omgevingsgeluid\", \"onderwijsgebied\", \"onderzoeksgebied\", \"onrustgebied\", \"ontwikkelingsgebied\", \"oorlogsgebied\", \"oorlogsgeweld\", \"oorsprongsgebied\", \"operatiegebied\", \"opleidingenaanbod\", \"opmarsgebied\", \"overgangsgebied\", \"overlastgebied\", \"overstromingsgebied\", \"overwinteringsgebied\", \"paaigebied\", \"partnergeweld\", \"ploegenwedstrijd\", \"poldergebied\", \"politiegeweld\", \"potpoldergebied\", \"presentiegeld\", \"priestergewaad\", \"regeerakkoord\", \"regelafstand\", \"regenboogkind\", \"regenboogzebrapad\", \"regenwoud\", \"regeringsaanbod\", \"regeringsbeleid\", \"regeringsraad\", \"regeringsstad\", \"reizigersaanbod\", \"richtingenstrijd\", \"roggebrood\", \"rouwgewaad\", \"rugzakgeld\", \"rustgebied\", \"rustgeld\", \"sabotagedaad\", \"samenwerkingsgebied\", \"schandegeld\", \"Schengenakkoord\", \"schietgebed\", \"schoolgeld\", \"servicegeweld\", \"slangenhuid\", \"sleutelgeld\", \"slotgebed\", \"smeekgebed\", \"smeergeldstad\", \"spaargeld\", \"spanningsgebied\", \"spiegelbeeld\", \"spiegelwand\", \"sportgebied\", \"spraakgeluid\", \"stemgeluid\", \"stiltegebied\", \"stoelgeld\", \"stormgeweld\", \"straatgeluid\", \"straatgeweld\", \"strafschopgebied\", \"supportersgeweld\", \"taalgebied\", \"tegelpad\", \"tegelwand\", \"tegenbod\", \"tegengeluid\", \"tegengeweld\", \"tegenspoed\", \"tegenwind\", \"televisiegeweld\", \"tussengebied\", \"uitgaansgeweld\", \"uitgeefbeleid\", \"uitgeversverbond\", \"uitgeverswereld\", \"ultrageluid\", \"vaargebied\", \"vagebond\", \"vakantiegeld\", \"veertigurengebed\", \"vegetariërsbond\", \"vingerhoed\", \"vliegtuiggeluid\", \"vluchtelingenbeleid\", \"voetbalgeweld\", \"vogelgeluid\", \"vogelwereld\", \"volksgezondheidsbeleid\", \"voorzieningenaanbod\", \"vormgevingsbeleid\", \"vredesgeluid\", \"vreemdelingenbeleid\", \"vrijdaggebed\", \"vrijgezellenavond\", \"vrijwilligersbeleid\", \"vuurwapengeweld\", \"wapengeweld\", \"waterbergingsgebied\", \"watergebied\", \"watergeweld\", \"werkgelegenheidsbeleid\", \"werkgeversaanbod\", \"werkgeversbond\", \"werkgeversverbond\", \"wetgevingsbeleid\", \"wiegenkind\", \"wijngebied\", \"wintersportgebied\", \"wisselgeld\", \"woestijngebied\", \"zakgeld\", \"zangersbond\", \"zeegebied\", \"zeehavengebied\", \"ziektegeld\", \"zigeunerkind\", \"zigeunerpaard\", \"zondegeld\", \"zorgenkind\", \"zwangerschapsmaand\", \"zwijggeld\", \"agent\", \"afgezant\", \"dirigent\", \"echtgenoot\", \"morgendienst\", \"apologeet\", \"budgetsupermarkt\", \"burgerdienst\", \"changement\", \"dorpsgenoot\", \"huisgenoot\", \"krankzinnigengesticht\", \"muggenbeet\", \"nagerecht\", \"omgevingsportret\", \"politieagent\", \"tijgerkat\", \"tussengerecht\", \"vogelmijt\", \"voorgerecht\", \"wegenwacht\", \"wegenzout\", \"wijkagent\", \"wisselagent\", \"zeegezicht\", \"zorgbudget\", \"aankoopbudget\", \"aardappelgerecht\", \"accountmanagement\", \"achterhoedegevecht\", \"adoptieagent\", \"advertentiebudget\", \"afspiegelingskabinet\", \"agendahedonist\", \"algemenebijstandswet\", \"amandelgeest\", \"ambtenarengerecht\", \"apengezicht\", \"arbeidsgerecht\", \"aspergerobot\", \"aspergeteelt\", \"assetmanagement\", \"baggerboot\", \"baggermarkt\", \"baggeropdracht\", \"baggerproject\", \"baggerschuit\", \"baggervloot\", \"balkanvergeet-mij-niet\", \"barricadegevecht\", \"bijgerecht\", \"boemerangeffect\", \"bouwmanagement\", \"bovengebit\", \"branchegenoot\", \"bridgejournalist\", \"bridgesport\", \"budget\", \"budgetrecht\", \"budgettekort\", \"bugnugget\", \"burgemeestersambt\", \"burgemeesterspost\", \"burgerdocent\", \"burgerplicht\", \"burgerpot\", \"burgerpresident\", \"burgerrecht\", \"burgerschapsrecht\", \"buurtagent\", \"buurtgenoot\", \"capaciteitsmanagement\", \"casemanagement\", \"celgenoot\", \"chef-dirigent\", \"CIA-agent\", \"clubgenoot\", \"coalitiegenoot\", \"collectiemanagement\", \"collegebesluit\", \"collegekaart\", \"collegestudent\", \"competentiemanagement\", \"crisismanagement\", \"defensiebudget\", \"depannagedienst\", \"deskundigenrapport\", \"disgenoot\", \"dopingexpert\", \"draagvleugelboot\", \"dreigement\", \"driekoningenfeest\", \"dubbelagent\", \"dwerggeit\", \"eerstgeboorterecht\", \"eigendomsrecht\", \"elftalgenoot\", \"enkelgewricht\", \"etalageruit\", \"ex-agent\", \"ex-echtgenoot\", \"exploitatiebudget\", \"FBI-agent\", \"fractiegenoot\", \"gadget\", \"garagepoort\", \"glogetuigschrift\", \"groentegerecht\", \"groentenugget\", \"grondgevecht\", \"halfgeleiderfabrikant\", \"halsgerecht\", \"halsgewricht\", \"hamburgerrestaurant\", \"hamburgertent\", \"handelsagent\", \"handgewricht\", \"hanengevecht\", \"hengelsport\", \"hersengadget\", \"heupgewricht\", \"hogeschooldocent\", \"hogeschoolstudent\", \"hokjesgeest\", \"hondengevecht\", \"hoofdagent\", \"hoofdgerecht\", \"horlogekast\", \"hotelmanagement\", \"huishoudbudget\", \"hulpagent\", \"huwelijksvermogensrecht\", \"inburgeringsplicht\", \"inburgeringstraject\", \"informatiemanagement\", \"ingenieursdienst\", \"ingenieursstudent\", \"inlichtingenrapport\", \"interim-management\", \"internetevangelist\", \"investeringsbudget\", \"inzagerecht\", \"jaarbudget\", \"jongerenkrant\", \"jongerenpaspoort\", \"kaakgewricht\", \"kaasgerecht\", \"kaasnugget\", \"kalfsgehakt\", \"kamergenoot\", \"kant-en-klaargerecht\", \"kantongerecht\", \"kennismanagement\", \"kipnugget\", \"klasgenoot\", \"kniegewricht\", \"kogelgewricht\", \"kooigevecht\", \"kredietmanagement\", \"kroegentocht\", \"kruidnagelsigaret\", \"kunstbudget\", \"kunstgeschiedenisdocent\", \"kunstgeschiedenisstudent\", \"kunstmanagement\", \"kussengevecht\", \"kwaliteitsmanagement\", \"kwelgeest\", \"lamsgehakt\", \"langetermijneffect\", \"leeftijdgenoot\", \"leeftijdsgenoot\", \"legercommandant\", \"legerdienst\", \"legerkrant\", \"legerpredikant\", \"legertent\", \"lievelingsgerecht\", \"logeergast\", \"lotgenotencontact\", \"loungerestaurant\", \"low budget\", \"lozingenbesluit\", \"luchtagent\", \"luchtgevecht\", \"lunchgerecht\", \"macrobudget\", \"management\", \"managementfout\", \"melkgeit\", \"mens-erger-je-niet\", \"mergelgrot\", \"milieumanagement\", \"miljoenenbudget\", \"mobiliteitsbudget\", \"moddergevecht\", \"monumentenbudget\", \"morgenlicht\", \"morgenpost\", \"motoragent\", \"muggenbult\", \"narcotica-agent\", \"NAVO-bondgenoot\", \"negerhut\", \"nepagent\", \"nugget\", \"ondergebit\", \"onderwijsbudget\", \"onderwijsmanagement\", \"onderzoeksbudget\", \"onderzoeksgerecht\", \"on-en-minvermogenkaart\", \"ongevallenwet\", \"onteigeningswet\", \"orgelconcert\", \"orgeldocent\", \"orgelkast\", \"overheidsbudget\", \"overheidsmanagement\", \"overnamegevecht\", \"overnemingsgevecht\", \"paardengebit\", \"passagebiljet\", \"pastagerecht\", \"persagent\", \"personeelsbudget\", \"personeelsmanagement\", \"plaggenhut\", \"ploegentijdrit\", \"pluimgewicht\", \"politiebudget\", \"polsgewricht\", \"postzegelformaat\", \"prestigeproject\", \"prins-regent\", \"procesmanagement\", \"productiebudget\", \"projectmanagement\", \"pseudovogelpest\", \"publiciteitsagent\", \"raffinageproduct\", \"reclamebudget\", \"reegeit\", \"regeerambt\", \"regelzucht\", \"regenboogtricot\", \"regenput\", \"regent\", \"regentaat\", \"regenwaterput\", \"regeringsapparaat\", \"regeringsbesluit\", \"regeringsbudget\", \"regeringskrant\", \"regeringsrapport\", \"regeringssoldaat\", \"reisagent\", \"reisbudget\", \"restauratiebudget\", \"rijksbudget\", \"rijstgerecht\", \"risicomanagement\", \"röntgenapparaat\", \"ruggenmergsvocht\", \"rundergehakt\", \"scharniergewricht\", \"scheidsgerecht\", \"schijngevecht\", \"schimmengevecht\", \"schoolagent\", \"schoolbegeleidingsdienst\", \"schoolgenoot\", \"schoolwijkagent\", \"schoudergewricht\", \"sergeant\", \"slangenbeet\", \"slangenhout\", \"slingerplant\", \"slowfoodgerecht\", \"soortgenoot\", \"spiegelgevecht\", \"spiegelkast\", \"spiegelruit\", \"spiegelschrift\", \"spiegeltent\", \"spinazienugget\", \"sportmanagement\", \"spronggewricht\", \"stagedocent\", \"stageopdracht\", \"stagerapport\", \"stierengevecht\", \"straatgevecht\", \"streekgerecht\", \"stressmanagement\", \"studentenbudget\", \"subsidiebudget\", \"taalgenoot\", \"tafelgenoot\", \"tafelgenot\", \"teamgeest\", \"tegenargument\", \"tegeneffect\", \"tegenkracht\", \"tentoonstellingsbudget\", \"tijdgeest\", \"tijdgenoot\", \"tijdmanagement\", \"tijdsgewricht\", \"tijgerpunt\", \"timemanagement\", \"titanengevecht\", \"titelgevecht\", \"topdirigent\", \"topmanagement\", \"totaalbudget\", \"totaalgewicht\", \"tweegevecht\", \"tweevingertest\", \"twintigeurobiljet\", \"undercoveragent\", \"urgentierecht\", \"veiligheidsagent\", \"veiligheidsarrangement\", \"veiligheidsmanagement\", \"vijftigeurobiljet\", \"vingerplant\", \"visgerecht\", \"visnugget\", \"vleesgerecht\", \"vleugelboot\", \"vliegenkast\", \"vliegerfeest\", \"vluchtelingenrecht\", \"vluchtelingentransport\", \"VN-gezant\", \"vogelmarkt\", \"vogeltjesmarkt\", \"vogelvangst\", \"vogelvlucht\", \"volksgericht\", \"voorlichtingsbudget\", \"vrachtwagenfabrikant\", \"vrachtwagenmarkt\", \"vragersmarkt\", \"vredegerecht\", \"vreemdelingenangst\", \"vreemdelingenbesluit\", \"vreemdelingendebat\", \"vreemdelingenrecht\", \"vreemdelingenstemrecht\", \"vuistgevecht\", \"vuurgevecht\", \"watergeest\", \"watergevecht\", \"watermanagement\", \"wegenbouwproject\", \"wereldtitelgevecht\", \"werkgelegenheidseffect\", \"werkgelegenheidsproject\", \"werkingsbudget\", \"wervelgewricht\", \"wetenschapsbudget\", \"wetgevingsproject\", \"wintergerst\", \"wintergezicht\", \"wrevelagent\", \"zadelgewricht\", \"zagevent\", \"zanger-componist\", \"zanger-gitarist\", \"zangerscast\", \"zangvogelsport\", \"zeegevecht\", \"zegelrecht\", \"zegetocht\", \"zelfmanagement\", \"ziekenhuisbudget\", \"zwangerschapstest\", \"goedgevuld\", \"aangebrand\", \"welgevuld\", \"afgeborsteld\", \"donkergekleurd\", \"goedgevormd\", \"welgevormd\", \"allesverzengend\", \"bontgekleurd\", \"doorgewinterd\", \"goedgehumeurd\", \"goedgeluimd\", \"goedgezind\", \"haatdragend\", \"kegeldragend\", \"lichtgekleurd\", \"nagelbijtend\", \"ongekleurd\", \"ongemanierd\", \"ongeverfd\", \"rentedragend\", \"risicodragend\", \"roodgekleurd\", \"slechtgehumeurd\", \"slechtgezind\", \"vruchtdragend\", \"welgemanierd\", \"welgezind\", \"welopgevoed\", \"woldragend\", \"zaaddragend\", \"zorgdragend\", \"aanbodgestuurd\", \"aangehuwd\", \"aangetekend\", \"aangetrouwd\", \"aanliggend\", \"aanmatigend\", \"aanvoegend\", \"achtereenvolgend\", \"achterliggend\", \"afgewend\", \"allesdoordringend\", \"allesvernietigend\", \"alleszeggend\", \"almogend\", \"alvermogend\", \"angstaanjagend\", \"bijstandsgerechtigd\", \"bloeddrukverhogend\", \"bloeddrukverlagend\", \"bloemdragend\", \"braakliggend\", \"brandvertragend\", \"breedgerand\", \"brildragend\", \"cholesterolverlagend\", \"christelijk-gereformeerd\", \"computergestuurd\", \"diepliggend\", \"doodgemoedereerd\", \"doordringend\", \"doorslaggevend\", \"dreigend\", \"drempelverlagend\", \"dringend\", \"dwingend\", \"eerstvolgend\", \"eierleggend\", \"Engelssprekend\", \"ergerniswekkend\", \"felgekleurd\", \"godtergend\", \"goedgekleed\", \"goedgemanierd\", \"goudgerand\", \"grensverleggend\", \"handenwringend\", \"hemeltergend\", \"hiernavolgend\", \"hogergenoemd\", \"hoogdringend\", \"hoopgevend\", \"indringend\", \"ingebeeld\", \"ingekankerd\", \"ingekeerd\", \"ingenaaid\", \"ingewikkeld\", \"ingeworteld\", \"intrigerend\", \"knoldragend\", \"kogelwerend\", \"laaggeletterd\", \"leidinggevend\", \"levensbedreigend\", \"levensbeëindigend\", \"levensverlengend\", \"lichtgevend\", \"lichtgewond\", \"liggend\", \"losliggend\", \"maatgevend\", \"meedogend\", \"minvermogend\", \"moedgevend\", \"naastliggend\", \"navolgend\", \"neerbuigend\", \"niet-geleidend\", \"nietszeggend\", \"normgevend\", \"oergezond\", \"omliggend\", \"onaangediend\", \"onbevredigend\", \"ondergewaardeerd\", \"onderliggend\", \"ondeugend\", \"ongeaccepteerd\", \"ongeanimeerd\", \"ongearticuleerd\", \"ongeautoriseerd\", \"ongecensureerd\", \"ongeciviliseerd\", \"ongeclausuleerd\", \"ongecompliceerd\", \"ongeconcentreerd\", \"ongeconditioneerd\", \"ongecontroleerd\", \"ongecoördineerd\", \"ongecorrigeerd\", \"ongecultiveerd\", \"ongedateerd\", \"ongedefinieerd\", \"ongedifferentieerd\", \"ongediplomeerd\", \"ongedisciplineerd\", \"ongedoubleerd\", \"ongeëmancipeerd\", \"ongeëmotioneerd\", \"ongeforceerd\", \"ongefrankeerd\", \"ongefundeerd\", \"ongegeneerd\", \"ongehavend\", \"ongehonoreerd\", \"ongeïdentificeerd\", \"ongeïnformeerd\", \"ongeïnspireerd\", \"ongeïnteresseerd\", \"ongekend\", \"ongekwalificeerd\", \"ongeleerd\", \"ongelimiteerd\", \"ongelinieerd\", \"ongematteerd\", \"ongemeend\", \"ongemeubileerd\", \"ongemonteerd\", \"ongemotiveerd\", \"ongemotoriseerd\", \"ongenuanceerd\", \"ongeoefend\", \"ongeopend\", \"ongeordend\", \"ongeorganiseerd\", \"ongepaneerd\", \"ongepermitteerd\", \"ongeprepareerd\", \"ongepubliceerd\", \"ongeraffineerd\", \"ongerealiseerd\", \"ongeregistreerd\", \"ongereglementeerd\", \"ongereguleerd\", \"ongesigneerd\", \"ongespecificeerd\", \"ongestoffeerd\", \"ongestructureerd\", \"ongestudeerd\", \"ongesubsidieerd\", \"ongevaccineerd\", \"ongewapend\", \"onsamenhangend\", \"onuitgenodigd\", \"onuitgevoerd\", \"onvermogend\", \"onwelgezind\", \"opeenvolgend\", \"opvliegend\", \"opvolgend\", \"orthodox-gereformeerd\", \"overtuigend\", \"overwegend\", \"overweldigend\", \"plaatsvervangend\", \"prangend\", \"raadgevend\", \"redengevend\", \"rentegevend\", \"rolbevestigend\", \"roodgeverfd\", \"rustgevend\", \"samenhangend\", \"schermdragend\", \"schrikaanjagend\", \"slechtgekleed\", \"sneldrogend\", \"statusverhogend\", \"stilzwijgend\", \"supergezond\", \"tegemoetkomend\", \"tergend\", \"toegevend\", \"toonaangevend\", \"tussenliggend\", \"uitdagend\", \"uitgekiend\", \"uitgeregend\", \"uitgerekend\", \"uitnodigend\", \"vakoverstijgend\", \"veelzeggend\", \"vigerend\", \"vleesvervangend\", \"vliegend\", \"volgend\", \"voorbijgestreefd\", \"vraaggestuurd\", \"vreesaanjagend\", \"Wajonggerechtigd\", \"waterbergend\", \"watergekoeld\", \"welgekend\", \"welgemeend\", \"werkgelegenheidsbevorderend\", \"wetgevend\", \"winstgevend\", \"witgehandschoend\", \"witgepleisterd\", \"witgeschilderd\", \"witgeverfd\", \"zelfcorrigerend\", \"zelfdragend\", \"zelfreinigend\", \"zelfvernietigend\", \"zelfverzorgend\", \"zieltogend\", \"zingevend\", \"zoetgeurend\", \"zogenaamd\", \"zogenoemd\", \"zwaargehavend\", \"zwaargewapend\", \"zwaargewond\", \"zwaarwegend\", \"zwartgeverfd\", \"zwijgend\", \"doelgericht\", \"ontwikkelingsgericht\", \"zwartgerokt\", \"arbeidsmarktgericht\", \"functiegericht\", \"goedgemutst\", \"kindgericht\", \"aanbodgericht\", \"aangedampt\", \"actiegericht\", \"arbeidsongeschikt\", \"brongericht\", \"buurtgericht\", \"cliëntgericht\", \"competentiegericht\", \"consumentgericht\", \"divergent\", \"doelgroepgericht\", \"doodongerust\", \"effectgericht\", \"ervaringsgericht\", \"exportgericht\", \"groepsgericht\", \"ingemaakt\", \"ingeroest\", \"innovatiegericht\", \"intelligent\", \"klantgericht\", \"kortgerokt\", \"maatschappijgericht\", \"marktgericht\", \"mensgericht\", \"nagelvast\", \"natuurgericht\", \"niet-gericht\", \"ongekuist\", \"ongericht\", \"onuitgebracht\", \"onuitgepakt\", \"onuitgewerkt\", \"oplossingsgericht\", \"persoonsgericht\", \"praktijkgericht\", \"prestatiegericht\", \"probleemgericht\", \"procesgericht\", \"productgericht\", \"publieksgericht\", \"resultaatgericht\", \"roodgelakt\", \"taakgericht\", \"themagericht\", \"toekomstgericht\", \"toepassingsgericht\", \"vakgericht\", \"voortgezet\", \"vraaggericht\", \"wijkgericht\", \"witgekalkt\", \"witgelakt\", \"zelfgemaakt\", \"zwartgelakt\", \"morgennacht\", \"negenduizend\", \"negenentwintigduizend\", \"negenhonderd\", \"negenhonderdduizend\", \"negentienduizend\", \"negentienhonderd\", \"negentigduizend\", \"morgenochtend\", \"desgevallend\", \"morgenavond\", \"zogezegd\", \"nergensland\", \"ontbijtbord\", \"onthaalbeleid\", \"onthaalkind\", \"ontmoedigingsbeleid\", \"ontmoetingsavond\", \"ontwapeningsakkoord\", \"ontwerpakkoord\", \"ontwerplandbouwakkoord\", \"ontwerpwedstrijd\", \"ontwikkelingsbeleid\", \"ontwikkelingshulpbeleid\", \"ontwikkelingsland\", \"ontbeend\", \"ontbrekend\", \"onthullend\", \"onthutsend\", \"ontkennend\", \"ontluisterend\", \"ontoereikend\", \"ontslagnemend\", \"ontsmettend\", \"ontspannend\", \"ontstekingsremmend\", \"ontstellend\", \"ontwapenend\", \"ontwijkend\", \"ontwikkeld\", \"ontzagwekkend\", \"ontzettend\", \"ontbijt\", \"onthardingszout\", \"ontzet\", \"ontbijtbuffet\", \"ontbindingsrecht\", \"ontdekkingstocht\", \"onterecht\", \"ontkoppelingsbesluit\", \"ontmijningsdienst\", \"ontslagbesluit\", \"ontslagdecreet\", \"ontslagrecht\", \"ontvangst\", \"ontwerpbesluit\", \"ontwerpfout\", \"ontwerpgrondwet\", \"ontwerpopdracht\", \"ontwerprapport\", \"ontwerpwet\", \"ontwikkelingspot\", \"ontwikkelingsproject\", \"herdershond\", \"herenakkoord\", \"herenblad\", \"herfstavond\", \"herfstblad\", \"herfstdraad\", \"herfstmaand\", \"herfstochtend\", \"herfstwind\", \"herkeuringsraad\", \"heroïnehond\", \"herseninhoud\", \"herstelbeleid\", \"hervormingsbeleid\", \"herfst\", \"hermafrodiet\", \"hert\", \"heraut\", \"herfstlucht\", \"heraanplant\", \"herdenkingsbijeenkomst\", \"herdenkingsconcert\", \"herdenkingsfeest\", \"heremietkreeft\", \"herfstnacht\", \"herfsttint\", \"herinneringskunst\", \"herkomst\", \"heroïnespuit\", \"heroïnetransport\", \"heroïnevangst\", \"herroepingsrecht\", \"hersenkracht\", \"hersenvlucht\", \"hersenvocht\", \"hersteldienst\", \"herstelrecht\", \"hervormingsproject\", \"erwt\", \"ernst\", \"erbovenuit\", \"ereambt\", \"eregast\", \"erepunt\", \"erfenisrecht\", \"erfrecht\", \"ergotherapeut\", \"ernaast\", \"eronderuit\", \"eropuit\", \"ertussenuit\", \"eruit\", \"ervanuit\", \"erytrocyt\", \"eredivisiewedstrijd\", \"erelid\", \"erfgoedbeleid\", \"erkenningsbeleid\", \"errond\", \"ervaringswereld\", \"gebaart\", \"gebeurt\", \"gebiedt\", \"gebood\", \"gedenkt\", \"gedraagt\", \"geeuwt\", \"gehoorzamt\", \"geilt\", \"geldt\", \"geelt\", \"gelooft\", \"geneest\", \"geniet\", \"genoot\", \"gerust\", \"geurt\", \"geeft\", \"besnuffelt\", \"bedeelt\", \"bedelt\", \"bekeert\", \"beugelt\", \"beamt\", \"beantwoordt\", \"beargumenteert\", \"beatblogt\", \"becijfert\", \"becommentariërt\", \"beconcurreert\", \"bedaart\", \"bedelft\", \"bedenkt\", \"bederft\", \"bedient\", \"bediscussiërt\", \"bedoelt\", \"bedraagt\", \"bedreigt\", \"bedriegt\", \"bedrijft\", \"bedroeft\", \"bedwingt\", \"beëindigt\", \"beeldbelt\", \"beetneemt\", \"beft\", \"begaat\", \"begeleidt\", \"begeert\", \"begeeft\", \"begint\", \"begraaft\", \"begrijpt\", \"begroeit\", \"behaalt\", \"behandelt\", \"behangt\", \"beheert\", \"behoedt\", \"behoeft\", \"behoort\", \"behoudt\", \"beïnvloedt\", \"bekent\", \"bekeurt\", \"bekijkt\", \"beklaagt\", \"bekleedt\", \"beklemt\", \"beklimt\", \"bekomt\", \"bekritiseert\", \"bekroont\", \"belandt\", \"beledigt\", \"belegt\", \"belemmert\", \"beleeft\", \"belt\", \"beloont\", \"belooft\", \"belparkeert\", \"beluistert\", \"bemeesteert\", \"bemeubelt\", \"bemoedigt\", \"bemoeit\", \"benadert\", \"benauwt\", \"beneemt\", \"bengelt\", \"benieuwt\", \"benoemt\", \"beogt\", \"beoordeelt\", \"bepaalt\", \"bepoteelt\", \"bereidt\", \"berekent\", \"berooft\", \"beschaamt\", \"beschaaft\", \"beschermt\", \"beschildert\", \"beschouwt\", \"beschrijft\", \"beschuldigt\", \"beslaat\", \"besloot\", \"besnijdt\", \"bespaart\", \"bespeurt\", \"bespioneert\", \"bespreekt\", \"bespringt\", \"bestaat\", \"bestempelt\", \"bestrijdt\", \"bestreed\", \"bestudeert\", \"bestuurt\", \"beswaffeelt\", \"betekent\", \"betert\", \"betont\", \"betonneert\", \"betovert\", \"betreedt\", \"betreft\", \"betrekt\", \"betreurt\", \"betwijfelt\", \"beult\", \"bevalt\", \"beeft\", \"bevindt\", \"bevoordeliigt\", \"bevordert\", \"bevraagt\", \"bevriest\", \"bewapent\", \"beweert\", \"bewijst\", \"bewondert\", \"bewoont\", \"bewonersparkeert\", \"bezaait\", \"bezeert\", \"beziet\", \"bezat\", \"bezoekt\", \"bezorgt\", \"bezuinigt\", \"bezweert\", \"verlaat\", \"verliet\", \"verschaalt\", \"verspringt\", \"vertelt\", \"veraangenaamt\", \"verabsoluteert\", \"verachtvoudiigt\", \"veradeemt\", \"verafgoodt\", \"verafschuwt\", \"veralgemeent\", \"verandert\", \"verankert\", \"verantwoordt\", \"verarmt\", \"verbabbelt\", \"verbaliseert\", \"verbant\", \"verbaast\", \"verbeeldt\", \"verbeidt\", \"verbergt\", \"verbetert\", \"verbeuzelt\", \"verbiedt\", \"verbood\", \"verbijstert\", \"verbindt\", \"verblijft\", \"verblindt\", \"verbouwt\", \"verbrandt\", \"verbreekt\", \"verdappert\", \"verdedigt\", \"verdeelt\", \"verdenkt\", \"verdient\", \"verdort\", \"verdooft\", \"verdraait\", \"verdraagt\", \"verdrijft\", \"verdringt\", \"verdrinkt\", \"verdroogt\", \"verdubbelt\", \"verdwaalt\", \"verdwijnt\", \"vereenvoudigt\", \"vet\", \"verenigt\", \"vereert\", \"vergaat\", \"vergadeert\", \"vergelijkt\", \"vergt\", \"vergeet\", \"vergat\", \"vergeeft\", \"vergiftigt\", \"vergoedt\", \"vergrendelt\", \"verhaalt\", \"verhangt\", \"verheldert\", \"verheugt\", \"verhindert\", \"verhoogt\", \"verhongert\", \"verhoudt\", \"verhuist\", \"verhuurt\", \"verifiërt\", \"verjaagt\", \"verkent\", \"verkeert\", \"verkiest\", \"verklaart\", \"verkleedt\", \"verkleint\", \"verkleurt\", \"verknoeit\", \"verkoopt\", \"verkreukelt\", \"verkrijgt\", \"verlaagt\", \"verlamt\", \"verlangt\", \"verleidt\", \"verleent\", \"verlengt\", \"verliest\", \"verloocheent\", \"verloopt\", \"verlooft\", \"verluiert\", \"verlummelt\", \"vermagert\", \"vermaalt\", \"vermangelt\", \"vermeldt\", \"vermengt\", \"vermenigvuldigt\", \"vermijdt\", \"vermindert\", \"vermoedt\", \"vermoeit\", \"vermolmt\", \"vermomt\", \"vermoordt\", \"vernauwt\", \"verneemt\", \"vernevelt\", \"vernielt\", \"vernietigt\", \"vernieuwt\", \"vernikkelt\", \"vernoemt\", \"vernummert\", \"veronaangenaamt\", \"veronachtzaamt\", \"veronderstelt\", \"verontheiliigt\", \"verontreinigt\", \"verontschuldigt\", \"veroordeelt\", \"veroorlooft\", \"verootmoediigt\", \"veropenbaart\", \"verordonneert\", \"verovert\", \"verpandt\", \"verpaupert\", \"verpietert\", \"verplegt\", \"verplettert\", \"verpulvert\", \"verraadt\", \"verried\", \"verrechtvaardiigt\", \"verregeent\", \"verreist\", \"verrekeent\", \"verrijdt\", \"verrijst\", \"verroert\", \"verrolt\", \"verronselt\", \"verruigt\", \"verruilt\", \"verruuwt\", \"verscheurt\", \"verschijnt\", \"verschilt\", \"verschimmelt\", \"verschoont\", \"verschraalt\", \"verschrijft\", \"verschroeit\", \"verschrompelt\", \"verschuilt\", \"versiert\", \"versimpelt\", \"versjachert\", \"versjouwt\", \"verslaat\", \"verslechtert\", \"versleutelt\", \"verslijt\", \"versleet\", \"verslindt\", \"verslond\", \"versluiert\", \"versluist\", \"versmaadt\", \"versmalt\", \"versmoort\", \"versnelt\", \"versnijdt\", \"versnippert\", \"versobert\", \"versoepelt\", \"versombert\", \"verspeelt\", \"verspeent\", \"verspert\", \"verspiedt\", \"verspilt\", \"verspint\", \"versplintert\", \"verspreidt\", \"verstaat\", \"verstond\", \"verstaalt\", \"verstart\", \"verstelt\", \"versteent\", \"versterft\", \"versteviigt\", \"verstijft\", \"verstilt\", \"verstomt\", \"verstoort\", \"verstoot\", \"verstiet\", \"verstouwt\", \"verstramt\", \"verstrengt\", \"verstrijkt\", \"verstrooit\", \"verstuift\", \"verstuurt\", \"verstuuwt\", \"versuikert\", \"versukkelt\", \"vertaalt\", \"vertedert\", \"vertegenwoordigt\", \"vertekeent\", \"verteert\", \"vertienvoudiigt\", \"vertilt\", \"vertimmert\", \"vertint\", \"vertoeft\", \"vertoont\", \"vertoornt\", \"vertraagt\", \"vertreedt\", \"vertroebelt\", \"vertroetelt\", \"vertrouwt\", \"vertwijfelt\", \"vervaagt\", \"vervaalt\", \"vervalt\", \"vervangt\", \"vervelt\", \"verft\", \"verveent\", \"verviervoudiigt\", \"vervijfvoudiigt\", \"vervliegt\", \"vervloeit\", \"vervluchtiigt\", \"vervoedeert\", \"vervoegt\", \"vervoert\", \"vervolgt\", \"vervollediigt\", \"vervordert\", \"vervormt\", \"vervreemdt\", \"vervroegt\", \"vervuilt\", \"vervult\", \"verwaait\", \"verwaardiigt\", \"verwaarloost\", \"verwarmt\", \"verwart\", \"verwaseemt\", \"verwatert\", \"verwedt\", \"verwelkoomt\", \"verweert\", \"verwerpt\", \"verwerft\", \"verweeft\", \"verwijdt\", \"verwijdert\", \"verwijlt\", \"verwijft\", \"verwikkelt\", \"verwildert\", \"verwint\", \"verwintert\", \"verwisselt\", \"verwittiigt\", \"verwondt\", \"verwondert\", \"verwoont\", \"verwoordt\", \"verwringt\", \"verwurgt\", \"verzaagt\", \"verzandt\", \"verzegelt\", \"verzegt\", \"verzeilt\", \"verzekert\", \"verzelfstandiigt\", \"verzendt\", \"verzengt\", \"verzesvoudiigt\", \"verzilvert\", \"verzinnebeeldt\", \"verzint\", \"verzoekt\", \"verzoent\", \"verzoolt\", \"verzuilt\", \"verzuurt\", \"verzusteert\", \"verzwagert\", \"verzwaart\", \"verzwelgt\", \"verzwendelt\", \"verzweert\", \"verzwijgt\", \"ontbiedt\", \"ontbood\", \"ontbeet\", \"ontbindt\", \"ontbolstert\", \"ontbraamt\", \"ontbreekt\", \"ontcijfert\", \"ontdoet\", \"ontdeed\", \"ontdooit\", \"ontdubbelt\", \"onteert\", \"onterft\", \"ontgaat\", \"ontgeldt\", \"ontglijdt\", \"ontgloeit\", \"ontgraaft\", \"ontgrendelt\", \"ontgroeit\", \"ontgroent\", \"onthaalt\", \"onthalst\", \"onthardt\", \"onthaart\", \"ontheft\", \"ontheiligt\", \"onthoofdt\", \"onthoudt\", \"onthield\", \"onthult\", \"ontkent\", \"ontketeent\", \"ontkiemt\", \"ontkleurt\", \"ontkoomt\", \"ontkoppelt\", \"ontlaadt\", \"ontleent\", \"ontleert\", \"ontloopt\", \"ontluist\", \"ontmengt\", \"ontmijnt\", \"ontmoedigt\", \"ontmythologiseert\", \"ontneemt\", \"ontradicaliseert\", \"ontroert\", \"ontrommeelt\", \"ontruimt\", \"ontslaat\", \"ontspant\", \"ontspult\", \"ontstaat\", \"ontstond\", \"ontsteekt\", \"ontvangt\", \"ontvoert\", \"ontvolgt\", \"ontvoogdt\", \"ontvriendt\", \"ontvriest\", \"ontwerpt\", \"ontwijkt\", \"ontwikkelt\", \"ontzwavelt\", \"herdenkt\", \"herdacht\", \"ergert\", \"ekent\", \"eruitzit\", \"ervaart\", \"erft\"];\n};\n//# sourceMappingURL=nonParticiples.js.map\n//# sourceMappingURL=nonParticiples.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/nonParticiples.js\n// module id = 1500\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/nonParticiples.js?");

/***/ }),
/* 1501 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar verbsBeginningWithGeRegex = /^((ge)\\S+t($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>]))/ig;\nvar verbsBeginningWithErVerEntBeZerHerUberRegex = /^(((be|ent|er|her|ver|zer|über|ueber)\\S+([^s]t|sst))($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>]))/ig;\nvar verbsWithGeInMiddleRegex = /(ab|an|auf|aus|vor|wieder|zurück)(ge)\\S+t($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig;\nvar verbsWithErVerEntBeZerHerUberInMiddleRegex = /((ab|an|auf|aus|vor|wieder|zurück)(be|ent|er|her|ver|zer|über|ueber)\\S+([^s]t|sst))($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig;\nvar verbsEndingWithIertRegex = /\\S+iert($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig;\nvar exceptionsRegex = /\\S+(apparat|arbeit|dienst|haft|halt|kraft|not|pflicht|schaft|schrift|tät|wert|zeit)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig;\n/**\n * Checks if the word starts with 'ge'.\n *\n * @param {string} word The word to match.\n * @returns {Array} A list with matches.\n */\nvar verbsBeginningWithGe = function verbsBeginningWithGe(word) {\n    return word.match(verbsBeginningWithGeRegex) || [];\n};\n/**\n * Checks if the word starts with 'er', 'ver', 'ent', 'be' or 'zer'.\n *\n * @param {string} word The word to match.\n * @returns {Array} A list with matches.\n */\nvar verbsBeginningWithErVerEntBeZerHerUber = function verbsBeginningWithErVerEntBeZerHerUber(word) {\n    return word.match(verbsBeginningWithErVerEntBeZerHerUberRegex) || [];\n};\n/**\n * Checks if the word contains 'ge' following 'ab', 'an', 'auf', 'aus', 'vor', 'wieder' or 'zurück'.\n *\n * @param {string} word The word to match.\n * @returns {Array} A list with matches.\n */\nvar verbsWithGeInMiddle = function verbsWithGeInMiddle(word) {\n    return word.match(verbsWithGeInMiddleRegex) || [];\n};\n/**\n * Checks if the word starts with 'er', 'ver', 'ent', 'be' or 'zer',\n * following  'ab', 'an', 'auf', 'aus', 'vor', 'wieder' or 'zurück'.\n *\n * @param {string} word The word to match.\n * @returns {Array} A list with matches.\n */\nvar verbsWithErVerEntBeZerHerUberInMiddle = function verbsWithErVerEntBeZerHerUberInMiddle(word) {\n    return word.match(verbsWithErVerEntBeZerHerUberInMiddleRegex) || [];\n};\n/**\n * Checks if the word ends in 'iert'.\n *\n * @param {string} word The word to match.\n * @returns {Array} A list with matches.\n */\nvar verbsEndingWithIert = function verbsEndingWithIert(word) {\n    return word.match(verbsEndingWithIertRegex) || [];\n};\n/**\n * Matches the word againts the exceptions regex.\n *\n * @param {string} word The word to match.\n * @returns {Array} A list with matches.\n */\nvar exceptions = function exceptions(word) {\n    return word.match(exceptionsRegex) || [];\n};\nmodule.exports = function () {\n    return {\n        verbsBeginningWithGe: verbsBeginningWithGe,\n        verbsBeginningWithErVerEntBeZerHerUber: verbsBeginningWithErVerEntBeZerHerUber,\n        verbsWithGeInMiddle: verbsWithGeInMiddle,\n        verbsWithErVerEntBeZerHerUberInMiddle: verbsWithErVerEntBeZerHerUberInMiddle,\n        verbsEndingWithIert: verbsEndingWithIert,\n        exceptions: exceptions\n    };\n};\n//# sourceMappingURL=regex.js.map\n//# sourceMappingURL=regex.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/regex.js\n// module id = 1501\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/regex.js?");

/***/ }),
/* 1502 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// This is a list of irregular participles used in German.\n\nmodule.exports = function () {\n    return [\"angefangen\", \"aufgerissen\", \"ausgesehen\", \"befohlen\", \"befunden\", \"begonnen\", \"bekommen\", \"bewiesen\", \"beworben\", \"empfohlen\", \"empfunden\", \"entschieden\", \"erschrocken\", \"erwogen\", \"gebacken\", \"gebeten\", \"gebissen\", \"geblasen\", \"geblieben\", \"gebogen\", \"geboren\", \"geborgen\", \"geboten\", \"gebraten\", \"gebrochen\", \"gebunden\", \"gediehen\", \"gedroschen\", \"gedrungen\", \"gefahren\", \"gefallen\", \"gefangen\", \"geflogen\", \"geflohen\", \"geflossen\", \"gefressen\", \"gefroren\", \"gefunden\", \"gegangen\", \"gegeben\", \"gegessen\", \"geglichen\", \"geglitten\", \"gelungen\", \"gegolten\", \"gegoren\", \"gegossen\", \"gegraben\", \"gegriffen\", \"gehalten\", \"gehangen\", \"gehauen\", \"geheissen\", \"geheißen\", \"gehoben\", \"geholfen\", \"geklungen\", \"gekniffen\", \"gekommen\", \"gekrochen\", \"geladen\", \"gelassen\", \"gelaufen\", \"gelegen\", \"gelesen\", \"geliehen\", \"gelitten\", \"gelogen\", \"gelungen\", \"gemessen\", \"gemieden\", \"genesen\", \"genommen\", \"genossen\", \"gepfiffen\", \"gepriesen\", \"gequollen\", \"geraten\", \"gerieben\", \"gerissen\", \"geritten\", \"gerochen\", \"geronnen\", \"gerufen\", \"gerungen\", \"geschaffen\", \"geschehen\", \"geschieden\", \"geschienen\", \"geschlafen\", \"geschlagen\", \"geschlichen\", \"geschliffen\", \"geschlossen\", \"geschlungen\", \"geschmissen\", \"geschmolzen\", \"geschnitten\", \"geschoben\", \"gescholten\", \"geschoren\", \"geschossen\", \"geschrieben\", \"geschrien\", \"geschritten\", \"geschunden\", \"geschwiegen\", \"geschwollen\", \"geschwommen\", \"geschworen\", \"geschwunden\", \"geschwungen\", \"gesehen\", \"gesessen\", \"gesoffen\", \"gesonnen\", \"gespien\", \"gesponnen\", \"gesprochen\", \"gesprossen\", \"gesprungen\", \"gestanden\", \"gestiegen\", \"gestochen\", \"gestohlen\", \"gestorben\", \"gestoßen\", \"gestossen\", \"gestrichen\", \"gestritten\", \"gesungen\", \"gesunken\", \"getan\", \"getragen\", \"getreten\", \"getrieben\", \"getroffen\", \"getrogen\", \"getrunken\", \"gewachsen\", \"gewaschen\", \"gewichen\", \"gewiesen\", \"gewoben\", \"gewogen\", \"gewonnen\", \"geworben\", \"geworfen\", \"gewrungen\", \"gezogen\", \"gezwungen\", \"misslungen\", \"überbacken\", \"ueberbacken\", \"überbehalten\", \"ueberbehalten\", \"überbekommen\", \"ueberbekommen\", \"überbelegen\", \"ueberbelegen\", \"überbezahlen\", \"ueberbezahlen\", \"überboten\", \"ueberboten\", \"übergebunden\", \"uebergebunden\", \"überbunden\", \"ueberbunden\", \"überblasen\", \"ueberblasen\", \"überbraten\", \"ueberbraten\", \"übergebraten\", \"uebergebraten\",\n    // Participles ending in -st are not found with the regex to avoid second person singular verbs.\n    \"überbremst\", \"ueberbremst\", \"übergeblieben\", \"uebergeblieben\", \"übereinandergelegen\", \"uebereinandergelegen\", \"übereinandergeschlagen\", \"uebereinandergeschlagen\", \"übereinandergesessen\", \"uebereinandergesessen\", \"übereinandergestanden\", \"uebereinandergestanden\", \"übereingefallen\", \"uebereingefallen\", \"übereingekommen\", \"uebereingekommen\", \"übereingetroffen\", \"uebereingetroffen\", \"übergefallen\", \"uebergefallen\", \"übergessen\", \"uebergessen\", \"überfahren\", \"ueberfahren\", \"übergefahren\", \"uebergefahren\", \"überfallen\", \"ueberfallen\", \"überfangen\", \"ueberfangen\", \"überflogen\", \"ueberflogen\", \"überflossen\", \"ueberflossen\", \"übergeflossen\", \"uebergeflossen\", \"überfressen\", \"ueberfressen\", \"überfroren\", \"ueberfroren\", \"übergegeben\", \"uebergegeben\", \"übergeben\", \"uebergeben\", \"übergegangen\", \"uebergegangen\", \"übergangen\", \"uebergangen\", \"übergangen\", \"uebergangen\", \"übergossen\", \"uebergossen\", \"übergriffen\", \"uebergriffen\", \"übergegriffen\", \"uebergegriffen\", \"übergehalten\", \"uebergehalten\", \"überhandgenommen\", \"ueberhandgenommen\", \"überhangen\", \"ueberhangen\", \"übergehangen\", \"uebergehangen\", \"übergehoben\", \"uebergehoben\", \"überhoben\", \"ueberhoben\", \"überkommen\", \"ueberkommen\", \"übergekommen\", \"uebergekommen\", \"überladen\", \"ueberladen\", \"übergeladen\", \"uebergeladen\", \"überlassen\", \"ueberlassen\", \"übergelassen\", \"uebergelassen\", \"überlaufen\", \"ueberlaufen\", \"übergelaufen\", \"uebergelaufen\", \"überlesen\", \"ueberlesen\", \"übergelegen\", \"uebergelegen\", \"übergenommen\", \"uebergenommen\", \"übernommen\", \"uebernommen\", \"übergequollen\", \"uebergequollen\", \"überrissen\", \"ueberrissen\", \"überritten\", \"ueberritten\", \"übergeschossen\", \"uebergeschossen\", \"überschlafen\", \"ueberschlafen\", \"überschlagen\", \"ueberschlagen\", \"übergeschlagen\", \"uebergeschlagen\", \"übergeschlossen\", \"uebergeschlossen\", \"überschnitten\", \"ueberschnitten\", \"überschrieben\", \"ueberschrieben\", \"überschrieen\", \"ueberschrieen\", \"überschrien\", \"ueberschrien\", \"überschritten\", \"ueberschritten\", \"überschwungen\", \"ueberschwungen\", \"übergesehen\", \"uebergesehen\", \"übersehen\", \"uebersehen\", \"übergesotten\", \"uebergesotten\", \"übergesotten\", \"uebergesotten\", \"übersponnen\", \"uebersponnen\", \"übersprochen\", \"uebersprochen\", \"übersprungen\", \"uebersprungen\", \"übergesprungen\", \"uebergesprungen\", \"überstochen\", \"ueberstochen\", \"übergestochen\", \"uebergestochen\", \"überstanden\", \"ueberstanden\", \"übergestanden\", \"uebergestanden\", \"überstiegen\", \"ueberstiegen\", \"übergestiegen\", \"uebergestiegen\", \"übergestrichen\", \"uebergestrichen\", \"überstrichen\", \"ueberstrichen\", \"übertragen\", \"uebertragen\", \"übertroffen\", \"uebertroffen\", \"übertrieben\", \"uebertrieben\", \"übertreten\", \"uebertreten\", \"übergetreten\", \"uebergetreten\", \"überwachsen\", \"ueberwachsen\", \"überwiesen\", \"ueberwiesen\", \"überworfen\", \"ueberworfen\", \"übergeworfen\", \"uebergeworfen\", \"überwogen\", \"ueberwogen\", \"überwunden\", \"ueberwunden\", \"überzogen\", \"ueberzogen\", \"übergezogen\", \"uebergezogen\", \"verdorben\", \"vergessen\", \"verglichen\", \"verloren\", \"verstanden\", \"verschwunden\", \"vorgeschlagen\"];\n};\n//# sourceMappingURL=irregulars.js.map\n//# sourceMappingURL=irregulars.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/irregulars.js\n// module id = 1502\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/irregulars.js?");

/***/ }),
/* 1503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Participle = __webpack_require__(393);\nvar getIndices = __webpack_require__(1114).getIndicesByWord;\nvar getIndicesOfList = __webpack_require__(1114).getIndicesByWordList;\nvar exceptionsParticiplesActive = __webpack_require__(1504)();\nvar auxiliaries = __webpack_require__(570)().participleLike;\nvar exceptionsRegex = /\\S+(apparat|arbeit|dienst|haft|halt|keit|kraft|not|pflicht|schaft|schrift|tät|wert|zeit)($|[ \\n\\r\\t.,'()\"+-;!?:/»«‹›<>])/ig;\nvar includes = __webpack_require__(147);\nvar map = __webpack_require__(63);\n/**\n * Creates an Participle object for the German language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {object} attributes  The attributes object.\n *\n * @constructor\n */\nvar GermanParticiple = function GermanParticiple(participle, sentencePart, attributes) {\n    Participle.call(this, participle, sentencePart, attributes);\n    this.setSentencePartPassiveness(this.isPassive());\n};\n__webpack_require__(79).inherits(GermanParticiple, Participle);\n/**\n * Checks if the text is passive based on the participle exceptions.\n *\n * @returns {boolean} Returns true if there is no exception, and the sentence is passive.\n */\nGermanParticiple.prototype.isPassive = function () {\n    return !this.hasNounSuffix() && !this.isInExceptionList() && !this.hasHabenSeinException() && !this.isAuxiliary();\n};\n/**\n * Checks whether a found participle is in the exception list.\n * If a word is in the exceptionsParticiplesActive list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list, otherwise returns false.\n */\nGermanParticiple.prototype.isInExceptionList = function () {\n    return includes(exceptionsParticiplesActive, this.getParticiple());\n};\n/**\n * Checks whether a found participle ends in a noun suffix.\n * If a word ends in a noun suffix from the exceptionsRegex, it isn't a participle.\n *\n * @returns {boolean} Returns true if it ends in a noun suffix, otherwise returns false.\n */\nGermanParticiple.prototype.hasNounSuffix = function () {\n    return this.getParticiple().match(exceptionsRegex) !== null;\n};\n/**\n * Checks whether a participle is followed by 'haben' or 'sein'.\n * If a participle is followed by one of these, the sentence is not passive.\n *\n * @returns {boolean} Returns true if it is an exception, otherwise returns false.\n */\nGermanParticiple.prototype.hasHabenSeinException = function () {\n    var participleIndices = getIndices(this.getParticiple(), this.getSentencePart());\n    var habenSeinIndices = getIndicesOfList([\"haben\", \"sein\"], this.getSentencePart());\n    if (participleIndices.length > 0 && habenSeinIndices.length === 0) {\n        return false;\n    }\n    habenSeinIndices = map(habenSeinIndices, \"index\");\n    var currentParticiple = participleIndices[0];\n    return includes(habenSeinIndices, currentParticiple.index + currentParticiple.match.length + 1);\n};\n/**\n * Checks whether a found participle is an auxiliary.\n * If a word is an auxiliary, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is an auxiliary, otherwise returns false.\n */\nGermanParticiple.prototype.isAuxiliary = function () {\n    return includes(auxiliaries, this.getParticiple());\n};\nmodule.exports = GermanParticiple;\n//# sourceMappingURL=GermanParticiple.js.map\n//# sourceMappingURL=GermanParticiple.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/GermanParticiple.js\n// module id = 1503\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/GermanParticiple.js?");

/***/ }),
/* 1504 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// This is a list of words that look like a participle, but aren't participles.\n\nmodule.exports = function () {\n    return [\"geht\", \"gämsbart\", \"gemsbart\", \"geäst\", \"gebarungsbericht\", \"geähnelt\", \"geartet\", \"gebäudetrakt\", \"gebet\", \"gebiet\", \"gebietsrepräsentant\", \"gebildbrot\", \"gebirgsart\", \"gebirgsgrat\", \"gebirgskurort\", \"gebirgsluft\", \"gebirgsschlucht\", \"geblüt\", \"geblütsrecht\", \"gebohntkraut\", \"gebot\", \"gebrauchsgut\", \"gebrauchstext\", \"gebrauchsverlust\", \"gebrauchtgerät\", \"gebrauchtwagengeschäft\", \"gebrauchtwagenmarkt\", \"geburt\", \"geburtsakt\", \"geburtsgeschwulst\", \"geburtsgewicht\", \"geburtsort\", \"geburtsrecht\", \"geburtsstadt\", \"geburtstagsfest\", \"geckenart\", \"gedächtniskonzert\", \"gedächtniskunst\", \"gedächtnisverlust\", \"gedankenarmut\", \"gedankenexperiment\", \"gedankenflucht\", \"gedankengut\", \"gedankenschritt\", \"gedankenwelt\", \"gedenkkonzert\", \"gedicht\", \"geest\", \"gefahrengebiet\", \"gefahrenmoment\", \"gefahrenpunkt\", \"gefahrgut\", \"gefahrguttransport\", \"gefährt\", \"gefälligkeitsakzept\", \"gefallsucht\", \"gefangenenanstalt\", \"gefangenentransport\", \"gefängnisarzt\", \"gefängniskluft\", \"gefäßnaht\", \"gefecht\", \"gefechtsabschnitt\", \"gefechtsbereit\", \"gefechtsgebiet\", \"gefechtsgewicht\", \"gefechtshut\", \"gefechtsmast\", \"gefechtsmast\", \"geflecht\", \"geflügelaufzucht\", \"geflügelleberwurst\", \"geflügelmarkt\", \"geflügelmast\", \"geflügelpest\", \"geflügelsalat\", \"geflügelwurst\", \"geflügelzucht\", \"gefolgsleute\", \"gefrett\", \"gefriergerät\", \"gefriergut\", \"gefrierobst\", \"gefrierpunkt\", \"gefrierschnitt\", \"gefühlsarmut\", \"gefühlswelt\", \"gegenangebot\", \"gegenansicht\", \"gegenargument\", \"gegengeschäft\", \"gegengewalt\", \"gegengewicht\", \"gegenkandidat\", \"gegenkompliment\", \"gegenkonzept\", \"gegenlicht\", \"gegenmacht\", \"gegenpapst\", \"gegenpart\", \"gegensatzwort\", \"gegenstandpunkt\", \"gegenstandsgebiet\", \"gegenwart\", \"gegenwartskunst\", \"gegenwelt\", \"gegenwort\", \"gehaart\", \"gehandicapt\", \"gehandikapt\", \"geheimagent\", \"geheimbericht\", \"geheimdokument\", \"geheimfavorit\", \"geheimkontakt\", \"geheimkult\", \"geheimnisverrat\", \"geheimpolizist\", \"geheimrat\", \"geheimrezept\", \"geheimtext\", \"gehirnakrobat\", \"gehirngeschwulst\", \"gehirnhaut\", \"gehirnsandgeschwulst\", \"gehirntot\", \"gehirntrust\", \"gehöft\", \"gehörlosensport\", \"geigenkonzert\", \"geißbart\", \"geißblatt\", \"geißhirte\", \"geißhirt\", \"geist\", \"geisterfahrt\", \"geisterstadt\", \"geisterwelt\", \"geistesarmut\", \"geistesart\", \"geistesfürst\", \"geistesgegenwart\", \"geistesgestört\", \"geistesprodukt\", \"geistestat\", \"geistesverwandt\", \"geisteswelt\", \"geklüft\", \"geländefahrt\", \"geländeritt\", \"geländesport\", \"gelangweilt\", \"gelaut\", \"geläut\", \"gelblicht\", \"gelbrost\", \"gelbsucht\", \"gelbwurst\", \"gelcoat\", \"geldausgabeautomat\", \"geldautomat\", \"geldgeschäft\", \"geldheirat\", \"geldinstitut\", \"geldmarkt\", \"geldsurrogat\", \"geldtransport\", \"geldverlust\", \"gelehrtenstreit\", \"gelehrtenwelt\", \"geleit\", \"geleitboot\", \"geleitwort\", \"gelenkgicht\", \"gelenkwassersucht\", \"geleucht\", \"geltungssucht\", \"gelüst\", \"gemächt\", \"gemeindeamt\", \"gemeindebürgerrecht\", \"gemeindegut\", \"gemeindekirchenrat\", \"gemeindepräsident\", \"gemeinderat\", \"gemeingeist\", \"gemeingut\", \"gemeinschaftsgeist\", \"gemeinschaftsprojekt\", \"gemeinschaftsunterkunft\", \"gemengesaat\", \"gemüseart\", \"gemüsebeet\", \"gemüsegeschäft\", \"gemüsemarkt\", \"gemüsesaft\", \"gemüsesalat\", \"gemüsezucht\", \"gemüt\", \"gemütsarmut\", \"gemütsart\", \"gemütsathlet\", \"gemütskalt\", \"genausogut\", \"genausooft\", \"genausoweit\", \"gendefekt\", \"generalagent\", \"generalarzt\", \"generalat\", \"generalbassinstrument\", \"generalbaßinstrument\", \"generalbundesanwalt\", \"generalgouvernement\", \"generalintendant\", \"generalist\", \"generalkonsulat\", \"generalleutnant\", \"generaloberst\", \"generalresident\", \"generalsekretariat\", \"generalstaaten\", \"generalstaatsanwalt\", \"generalsuperintendent\", \"generalüberholt\", \"generalvikariat\", \"generalvollmacht\", \"generationenkonflikt\", \"generativist\", \"genist\", \"genitivattribut\", \"genitivobjekt\", \"genmanipuliert\", \"gennesaret\", \"genotzüchtigt\", \"gent\", \"genuasamt\", \"genussgift\", \"genußgift\", \"genusssucht\", \"genuss-sucht\", \"genußsucht\", \"genverändert\", \"geobiont\", \"geodät\", \"geografieunterricht\", \"geographieunterricht\", \"geokrat\", \"geophyt\", \"gepäckfracht\", \"geradeausfahrt\", \"geradesogut\", \"gefälligst\", \"gerant\", \"gerät\", \"gerätewart\", \"geräuschlaut\", \"gerbextrakt\", \"gericht\", \"gerichtsarzt\", \"gerichtsort\", \"gerichtspräsident\", \"germanisiert\", \"germanist\", \"germanistikstudent\", \"gerodelt\", \"geröllschicht\", \"geröllschutt\", \"geront\", \"gerontokrat\", \"gerstenbrot\", \"gerstensaft\", \"gerstenschrot\", \"gerücht\", \"gerüst\", \"gesamtansicht\", \"gesamtaspekt\", \"gesamtdurchschnitt\", \"gesamtgewicht\", \"gesamtgut\", \"gesamt\", \"gesamtklassement\", \"gesamtunterricht\", \"gesandtschaftsrat\", \"gesangskunst\", \"gesangspart\", \"gesangssolist\", \"gesangsunterricht\", \"gesangunterricht\", \"geschäft\", \"geschäftsaufsicht\", \"geschäftsbericht\", \"geschäftsgeist\", \"geschäftswelt\", \"geschenkpaket\", \"geschichtsunterricht\", \"geschicklichkeitstest\", \"geschicklichkeitstest\", \"geschlecht\", \"geschlechtsakt\", \"geschlechtslust\", \"geschlechtsprodukt\", \"geschlechtswort\", \"geschmackstest\", \"geschwindigkeitslimit\", \"geschworenengericht\", \"geschwulst\", \"gesellschaftsfahrt\", \"gesellschaftsschicht\", \"gesetzblatt\", \"gesetzespaket\", \"gesetzestext\", \"gesicht\", \"gesichtshaut\", \"gesichtspunkt\", \"gesichtsschnitt\", \"gesichtsverlust\", \"gespenst\", \"gespensterfurcht\", \"gespinst\", \"gespött\", \"gesprächstherapeut\", \"gestalt\", \"gestaltungselement\", \"gesteinsart\", \"gesteinschutt\", \"gesteinsschicht\", \"gestüt\", \"gestüthengst\", \"verantwortungsbewusst\", \"verantwortungsbewußt\", \"getast\", \"getränkeabholmarkt\", \"getränkeautomat\", \"getränkemarkt\", \"getreideart\", \"getreideaussaat\", \"getreideexport\", \"getreideimport\", \"getreideprodukt\", \"getreideschnitt\", \"getreidevorrat\", \"gewährfrist\", \"gewalt\", \"gewaltakt\", \"gewaltbereit\", \"gewalttat\", \"gesprächsbereit\", \"gewaltverbot\", \"gewaltverzicht\", \"gewässerbett\", \"gewässerwart\", \"gewebeschicht\", \"gewebsrest\", \"gewicht\", \"gewichtsprozent\", \"gewichtsverlust\", \"gewerbeamt\", \"gewerbearzt\", \"gewerbeaufsicht\", \"gewerbeaufsichtsamt\", \"gewerbegebiet\", \"gewerberecht\", \"gewerbsunzucht\", \"gewerkschaft\", \"gewerkschaftsjournalist\", \"gewindestift\", \"gewinnsucht\", \"gewinst\", \"gewissensangst\", \"gewissenskonflikt\", \"gewitterfront\", \"gewitterluft\", \"gewohnheitsrecht\", \"gewürzextrakt\", \"gewürzkraut\", \"gezücht\", \"erbbaurecht\", \"erbfolgerecht\", \"erbfolgestreit\", \"erbgut\", \"erbhofrecht\", \"erblast\", \"erbpacht\", \"erbrecht\", \"erbschaftsstreit\", \"erbsenkraut\", \"erbbedingt\", \"erbberechtigt\", \"erblasst\", \"erblaßt\", \"erbswurst\", \"erbverzicht\", \"erbwort\", \"erbzinsgut\", \"erdbebengebiet\", \"erdbeerjogurt\", \"erdbeerjoghurt\", \"erdbeeryoghurt\", \"erdbeerkompott\", \"erdbeerrot\", \"erdbeersaft\", \"erdbeersekt\", \"erdengut\", \"erdenlust\", \"erdfrucht\", \"erdgeist\", \"erdkundeunterricht\", \"erdlicht\", \"erdmittelpunkt\", \"erdnussfett\", \"erdölprodukt\", \"erdölproduzent\", \"erdsatellit\", \"erdschicht\", \"erdsicht\", \"erdtrabant\", \"erdverhaftet\", \"eremit\", \"erfahrungsbericht\", \"erfahrungshorizont\", \"erfahrungswelt\", \"erfindergeist\", \"erfolgsaussicht\", \"erfolgsorientiert\", \"erfolgsrezept\", \"erfolgsverwöhnt\", \"erfüllungsort\", \"erfurt\", \"ergänzungsheft\", \"ergänzungssport\", \"ergänzungstest\", \"ergostat\", \"ergotherapeut\", \"erholungsgebiet\", \"erholungsort\", \"erkundungsfahrt\", \"erlaucht\", \"erläuterungstext\", \"erlebnisbericht\", \"erlebnisorientiert\", \"erlebniswelt\", \"ernährungsamt\", \"ernst\", \"ernstgemeint\", \"ernteaussicht\", \"erntedankfest\", \"erntefest\", \"erntemonat\", \"ernteresultat\", \"eroberungsabsicht\", \"eroberungsgeist\", \"eroberungslust\", \"eroberungssucht\", \"eröffnungskonzert\", \"ersatzgeschwächt\", \"ersatzgut\", \"ersatzkandidat\", \"ersatzobjekt\", \"ersatzpräparat\", \"ersatzreservist\", \"ersatztorwart\", \"erscheinungsfest\", \"erscheinungsort\", \"erscheinungswelt\", \"erschließungsgebiet\", \"erst\", \"erstbundesligist\", \"erstfahrt\", \"erstgebot\", \"erstgeburt\", \"erstgeburtsrecht\", \"erstklassbillett\", \"erstklaßbillett\", \"erstkommunikant\", \"erstkonsument\", \"erstligist\", \"erstplatziert\", \"erstplaciert\", \"erstplaziert\", \"erstrecht\", \"ertragsaussicht\", \"erwartungsangst\", \"erwartungshorizont\", \"erwerbseinkünfte\", \"erythrit\", \"erythroblast\", \"erythrozyt\", \"erzählertalent\", \"erzählgut\", \"erzählkunst\", \"erzähltalent\", \"erzamt\", \"erzdemokrat\", \"erzeugungsschlacht\", \"erzfaschist\", \"erziehungsanstalt\", \"erziehungsberechtigt\", \"erziehungsinstitut\", \"erzkommunist\", \"erzprotestant\", \"veranlassungswort\", \"veranschaulicht\", \"veranschlagt\", \"verantwortungsbewusst\", \"verantwortungsbewußt\", \"veräußerungsverbot\", \"verbalist\", \"verbalkontrakt\", \"verbändestaat\", \"verbannungsort\", \"verbildlicht\", \"verbindungspunkt\", \"verbindungsstudent\", \"verbraucherkredit\", \"verbrauchermarkt\", \"verbrauchsgut\", \"verbrechernest\", \"verbrechersyndikat\", \"verbrecherwelt\", \"verbreitungsgebiet\", \"verbrennungsprodukt\", \"verdachtsmoment\", \"verdampfungsgerät\", \"verdauungstrakt\", \"verdikt\", \"veredelungsprodukt\", \"verehrerpost\", \"vereinspräsident\", \"vereinsrecht\", \"vereinssport\", \"verfahrensrecht\", \"verfassungsfahrt\", \"verfassungsgericht\", \"verfassungsrecht\", \"verfassungsstaat\", \"verfolgungsrecht\", \"verfremdungseffekt\", \"verfügungsgewalt\", \"verfügungsrecht\", \"verfügungsberechtigt\", \"verführungskunst\", \"vergegenständlicht\", \"vergegenwärtigt\", \"vergeltungsakt\", \"vergenossenschaftlicht\", \"vergissmeinnicht\", \"vergißmeinnicht\", \"vergleichsmonat\", \"vergleichsobjekt\", \"vergleichspunkt\", \"vergnügungsetablissement\", \"vergnügungsfahrt\", \"vergnügungssucht\", \"vergrößerungsgerät\", \"verhaltensgestört\", \"verhältniswahlrecht\", \"verhältniswort\", \"verhandlungsangebot\", \"verhandlungsbereit\", \"versandbereit\", \"verteidigungsbereit\", \"verhandlungsmandat\", \"verhandlungsort\", \"verhandlungspunkt\", \"verhöramt\", \"verist\", \"verjährungsfrist\", \"verkaufsagent\", \"verkaufsangebot\", \"verkaufsargument\", \"verkaufsautomat\", \"verkaufsfront\", \"verkaufshit\", \"verkaufsobjekt\", \"verkaufsorientiert\", \"verkaufspunkt\", \"verkehrsamt\", \"verkehrsdelikt\", \"verkehrsinfarkt\", \"verkehrsknotenpunkt\", \"verkehrslicht\", \"verkehrsnachricht\", \"verkehrspolizist\", \"verkehrsrecht\", \"verkehrsunterricht\", \"verkehrsverbot\", \"verklarungsbericht\", \"verknüpfungspunkt\", \"verkündungsblatt\", \"verlagsanstalt\", \"verlagsprospekt\", \"verlagsrecht\", \"verlagsrepräsentant\", \"verlagssignet\", \"verlust\", \"verlustgeschäft\", \"verlust\", \"verlustgeschäft\", \"verlustpunkt\", \"vermessungsamt\", \"vermittlungsamt\", \"vermögensrecht\", \"vermont\", \"vermummungsverbot\", \"verneinungswort\", \"vernichtungswut\", \"vernunft\", \"vernunftheirat\", \"verordnungsblatt\", \"verpackungsflut\", \"verpflichtungsgeschäft\", \"verrat\", \"versammlungsort\", \"versammlungsrecht\", \"versandgeschäft\", \"versandgut\", \"versart\", \"verschlusslaut\", \"verschnitt\", \"verschwendungssucht\", \"versehrtensport\", \"versicherungsagent\", \"versicherungsanstalt\", \"versicherungsrecht\", \"verskunst\", \"versöhnungsfest\", \"versorgungsamt\", \"versorgungsberechtigt\", \"versorgungsgebiet\", \"versorgungsgut\", \"versorgungsstaat\", \"verstakt\", \"verständigungsbereit\", \"verstellungskunst\", \"verstürznaht\", \"versuchsanstalt\", \"versuchsobjekt\", \"versuchsprojekt\", \"vertebrat\", \"verteidigungsbudget\", \"verteidigungsetat\", \"verteidigungspakt\", \"verteilungskonflikt\", \"verteilungszahlwort\", \"vertikalschnitt\", \"vertikutiergerät\", \"vertragsgerecht\", \"vertragspunkt\", \"vertragsrecht\", \"vertragsstaat\", \"vertragstext\", \"vertragswerkstatt\", \"vertrauensanwalt\", \"vertrauensarzt\", \"vertrauensverlust\", \"vertriebsrecht\", \"vervielfältigungsrecht\", \"vervielfältigungszahlwort\", \"verwaltungsakt\", \"verwaltungsgericht\", \"verwaltungsrat\", \"verwaltungsrecht\", \"verwundetentransport\", \"verzicht\", \"verzweiflungsakt\", \"verzweiflungstat\", \"entbindungsanstalt\", \"entdeckungsfahrt\", \"entenbrust\", \"entenfett\", \"entertainment\", \"enthusiast\", \"entlastungsmoment\", \"entlüftungsschacht\", \"entnazifizierungsgericht\", \"entoblast\", \"entoparasit\", \"entrechat\", \"entrefilet\", \"entrepot\", \"entscheidungsfurcht\", \"entscheidungsgewalt\", \"entscheidungsrecht\", \"entscheidungsschlacht\", \"entstehungsort\", \"entsteht\", \"entwässerungsschacht\", \"entwicklungsabschnitt\", \"entwicklungsinstitut\", \"entwicklungsprojekt\", \"entwicklungsschritt\", \"entziehungsanstalt\", \"zerat\", \"zerebrallaut\", \"zerfallsprodukt\", \"zergliederungskunst\", \"zerit\", \"zermatt\", \"zersetzungsprodukt\", \"zerstörungslust\", \"zerstörungswut\", \"zertifikat\", \"zerussit\", \"zervelat\", \"zervelatwurst\", \"beamtenrecht\", \"beamtenschicht\", \"beamtenstaat\", \"beat\", \"beatmungsgerät\", \"beaufort\", \"becherfrucht\", \"beckengurt\", \"becquereleffekt\", \"bedarfsgut\", \"bedenkfrist\", \"bedienungselement\", \"bedienungsgerät\", \"bedienungskomfort\", \"bedingtgut\", \"bedürfnisanstalt\", \"beeinflusst\", \"beeinflußt\", \"beerdigungsanstalt\", \"beerdigungsinstitut\", \"beerenfrucht\", \"beerenobst\", \"beerensaft\", \"beet\", \"befasst\", \"befaßt\", \"befehlsgewalt\", \"beförderungsentgelt\", \"beförderungsrecht\", \"begabungstest\", \"begegnungsort\", \"begleitinstrument\", \"begleittext\", \"begleitwort\", \"begnadigungsrecht\", \"begräbt\", \"begrenzungslicht\", \"begriffswelt\", \"begriffswort\", \"begrüßungswort\", \"behaviorist\", \"behebungsfrist\", \"behelfsausfahrt\", \"behelfsunterkunft\", \"behindertengerecht\", \"behindertensport\", \"behindertentransport\", \"behmlot\", \"beiblatt\", \"beiboot\", \"beignet\", \"beiheft\", \"beikost\", \"beilast\", \"beileidswort\", \"beinamputiert\", \"beinhaut\", \"beirat\", \"beirut\", \"beistandskredit\", \"beistandspakt\", \"beitritt\", \"beitrittsabsicht\", \"beitrittsgebiet\", \"beiwacht\", \"beiwort\", \"beizgerät\", \"bekehrungswut\", \"bekennergeist\", \"bekennermut\", \"bekleidungsamt\", \"bekommen\", \"belegarzt\", \"belegbett\", \"belegfrist\", \"belehrungssucht\", \"belemnit\", \"belesprit\", \"beleuchtungseffekt\", \"beleuchtungsgerät\", \"belfast\", \"belkantist\", \"belcantist\", \"belletrist\", \"bellizist\", \"belt\", \"benedikt\", \"benediktenkraut\", \"benefiziant\", \"benefiziat\", \"benefizkonzert\", \"beneluxstaat\", \"bentonit\", \"benzindunst\", \"beratungspunkt\", \"bereit\", \"bereicherungsabsicht\", \"bereitschaftsarzt\", \"bergamt\", \"bergeslast\", \"bergfahrt\", \"bergfest\", \"berggeist\", \"berggrat\", \"bergluft\", \"bergpredigt\", \"bergsport\", \"berg-und-Tal-Fahrt\", \"bergwacht\", \"bergwelt\", \"bericht\", \"berichtsmonat\", \"beritt\", \"bermudashort\", \"bernbiet\", \"berserkerwut\", \"berufsaussicht\", \"berufssoldat\", \"berufssport\", \"berufsstart\", \"berufstracht\", \"berufsverbot\", \"berufungsfrist\", \"berufungsgericht\", \"berufungsrecht\", \"berührungsangst\", \"berührungspunkt\", \"besanmast\", \"besatzungsgebiet\", \"besatzungsmacht\", \"besatzungsrecht\", \"besatzungssoldat\", \"besatzungsstatut\", \"beschaffungsamt\", \"beschäftigungstherapeut\", \"beschlächt\", \"beschlussrecht\", \"beschlußrecht\", \"beschmet\", \"beschneidungsfest\", \"beschlächt\", \"beschlussrecht\", \"beschlußrecht\", \"beschmet\", \"beschneidungsfest\", \"beschwerdefrist\", \"beschwerderecht\", \"beschwörungskunst\", \"beseitigungsanstalt\", \"besetzungsgebiet\", \"besetzungsmacht\", \"besetzungsstatut\", \"besichtigungsfahrt\", \"besitzrecht\", \"besoldungsrecht\", \"besprechungspunkt\", \"besserungsanstalt\", \"bestattungsinstitut\", \"bestimmungsort\", \"bestimmungswort\", \"bestinformiert\", \"bestqualifiziert\", \"bestrahlungsgerät\", \"bestrenommiert\", \"bestsituiert\", \"bestverkauft\", \"besucherrat\", \"besuchsrecht\", \"betpult\", \"betracht\", \"betreibungsamt\", \"betriebsarzt\", \"betriebsfest\", \"betriebsrat\", \"betriebswirt\", \"bett\", \"bettelmusikant\", \"bettelvogt\", \"bettstatt\", \"bettwurst\", \"beulenpest\", \"beutegut\", \"beutekunst\", \"beuterecht\", \"bevölkerungsschicht\", \"bewahranstalt\", \"bewährungsfrist\", \"bewegungsarmut\", \"beweislast\", \"bewußt\", \"bewusst\", \"beziehungsgeflecht\", \"bezirksamt\", \"bezirksarzt\", \"bezirksgericht\", \"bezirkskabinett\", \"bezirksschulrat\", \"bezirksstadt\", \"bezugspunkt\", \"bezugsrecht\", \"heraklit\", \"herat\", \"herbalist\", \"herbst\", \"herbstmonat\", \"herbstpunkt\", \"herdbuchzucht\", \"herdeninstinkt\", \"herfahrt\", \"heringsfilet\", \"heringssalat\", \"herkuleskraut\", \"herkunft\", \"herkunftsort\", \"hermaphrodit\", \"heroenkult\", \"heroinsucht\", \"heroldsamt\", \"heroldskunst\", \"herostrat\", \"herrenabfahrt\", \"herrenbrot\", \"herrendienst\", \"herrenfest\", \"herrenhut\", \"herrenrecht\", \"herrenschnitt\", \"herrenwelt\", \"herrgott\", \"herrnhut\", \"herrschaftsgebiet\", \"herrschaftsgewalt\", \"herrschaftsinstrument\", \"herrschergeschlecht\", \"herrscherkult\", \"herrschsucht\", \"herstellungsart\", \"herzacht\", \"herzangst\", \"herzblatt\", \"herzblut\", \"herzensangst\", \"herzensgut\", \"herzenslust\", \"herzenstrost\", \"herzgeliebt\", \"herzinfarkt\", \"herzinnenhaut\", \"herzklappendefekt\", \"herzogshut\", \"herzlichst\", \"herzpatient\", \"herzpunkt\", \"herzspezialist\", \"überbackt\", \"ueberbackt\", \"überbacktet\", \"ueberbacktet\", \"überbietet\", \"ueberbietet\", \"überbot\", \"ueberbot\", \"überbotet\", \"ueberbotet\", \"überbindet\", \"ueberbindet\", \"überbandet\", \"ueberbandet\", \"überbläst\", \"ueberblaest\", \"überbliest\", \"ueberbliest\", \"überbrät\", \"ueberbraet\", \"überbratet\", \"ueberbratet\", \"überbriet\", \"ueberbriet\", \"überbrietet\", \"ueberbrietet\", \"überbringt\", \"ueberbringt\", \"überbrachtet\", \"ueberbrachtet\", \"überbrücktet\", \"ueberbruecktet\", \"überbrühtet\", \"ueberbrühtet\", \"überbrülltet\", \"ueberbruelltet\", \"überbuchtet\", \"ueberbuchtet\", \"überbürdetet\", \"ueberbuerdetet\", \"überdecktet\", \"ueberdecktet\", \"überdehntet\", \"ueberdehntet\", \"überdenkt\", \"ueberdenkt\", \"überdachtet\", \"ueberdachtet\", \"überdosiertet\", \"ueberdosiertet\", \"überdrehtet\", \"ueberdrehtet\", \"überdrucktet\", \"ueberdrucktet\", \"überdüngtet\", \"ueberdüngtet\", \"übereignetet\", \"uebereignetet\", \"übereiltet\", \"uebereiltet\", \"übererfülltet\", \"uebererfuelltet\", \"überißt\", \"ueberisst\", \"ueberißt\", \"überisst\", \"überesst\", \"ueberesst\", \"übereßt\", \"uebereßt\", \"überaßt\", \"ueberaßt\", \"überesset\", \"ueberesset\", \"überäßet\", \"ueberaesset\", \"überfährt\", \"ueberfaehrt\", \"überfahrt\", \"ueberfahrt\", \"überfuhrt\", \"ueberfuhrt\", \"überfällt\", \"ueberfaellt\", \"überfallet\", \"ueberfallet\", \"überfielt\", \"ueberfielt\", \"überfielet\", \"ueberfielet\", \"überfängt\", \"ueberfaengt\", \"überfingt\", \"ueberfingt\", \"überfinget\", \"ueberfinget\", \"überfärbet\", \"ueberfaerbet\", \"überfettetet\", \"ueberfettetet\", \"überfirnisset\", \"ueberfirnisset\", \"überfirnißtet\", \"ueberfirnisstet\", \"überfischet\", \"ueberfischet\", \"überfischtet\", \"ueberfischtet\", \"überflanktet\", \"ueberflanktet\", \"überflanktet\", \"ueberflanktet\", \"überfliegt\", \"ueberfliegt\", \"überflieget\", \"ueberflieget\", \"überflöget\", \"ueberflöget\", \"überflösset\", \"ueberfloesset\", \"überflosst\", \"ueberflosst\", \"überfloßt\", \"ueberflosst\", \"überfließt\", \"ueberfliesst\", \"überflutetet\", \"ueberflutetet\", \"überformet\", \"ueberformet\", \"überformtet\", \"ueberformtet\", \"überfrachtetet\", \"ueberfrachtetet\", \"überfracht\", \"ueberfracht\", \"überfraget\", \"ueberfraget\", \"überfragtet\", \"ueberfragtet\", \"überfremdetet\", \"ueberfremdetet\", \"überfrisst\", \"ueberfrisst\", \"überfrißt\", \"ueberfrißt\", \"überfresst\", \"ueberfresst\", \"überfreßt\", \"ueberfreßt\", \"überfresset\", \"ueberfresset\", \"überfraßt\", \"ueberfraßt\", \"ueberfrasst\", \"überfräßet\", \"ueberfraesset\", \"überfriert\", \"ueberfriert\", \"überfrieret\", \"ueberfrieret\", \"überfrort\", \"ueberfrort\", \"überfröret\", \"ueberfroeret\", \"überfrört\", \"ueberfroert\", \"überführet\", \"ueberfuehret\", \"überführtet\", \"ueberfuehrtet\", \"überfüllet\", \"ueberfuellet\", \"übergibt\", \"uebergibt\", \"übergebt\", \"uebergebt\", \"übergebet\", \"uebergebet\", \"übergabt\", \"uebergabt\", \"übergäbet\", \"uebergaebet\", \"übergäbt\", \"uebergaebt\", \"übergeht\", \"uebergeht\", \"übergehet\", \"uebergehet\", \"übergingt\", \"uebergingt\", \"übergewichtetet\", \"uebergewichtetet\", \"übergießet\", \"uebergiesset\", \"übergießt\", \"uebergiesst\", \"übergösset\", \"uebergoesset\", \"übergosst\", \"uebergosst\", \"uebergoßt\", \"übergipset\", \"uebergipset\", \"übergipstet\", \"uebergipstet\", \"übergipset\", \"uebergipset\", \"übergipstet\", \"uebergipstet\", \"überglänzet\", \"ueberglaenzet\", \"überglänztet\", \"ueberglaenztet\", \"überglaset\", \"ueberglaset\", \"überglastet\", \"ueberglastet\", \"überglühet\", \"uebergluehet\", \"überglühtet\", \"uebergluehtet\", \"übergoldetet\", \"uebergoldetet\", \"übergraset\", \"uebergraset\", \"übergrastet\", \"uebergrastet\", \"übergrätschet\", \"uebergraetschet\", \"übergrätschtet\", \"uebergraetschtet\", \"übergreift\", \"uebergreift\", \"übergreifet\", \"uebergreifet\", \"übergrifft\", \"uebergrifft\", \"übergriffet\", \"uebergriffet\", \"übergreift\", \"uebergreift\", \"übergreifet\", \"uebergreifet\", \"übergriffet\", \"uebergriffet\", \"übergrifft\", \"uebergrifft\", \"übergrünet\", \"uebergruenet\", \"übergrüntet\", \"uebergruentet\", \"überhat\", \"ueberhat\", \"überhabt\", \"ueberhabt\", \"überhabet\", \"ueberhabet\", \"überhattet\", \"ueberhattet\", \"überhättet\", \"ueberhaettet\", \"überhält\", \"ueberhaelt\", \"überhaltet\", \"ueberhaltet\", \"überhielt\", \"ueberhielt\", \"überhieltet\", \"ueberhieltet\", \"überhändiget\", \"ueberhaendiget\", \"überhändigtet\", \"ueberhaendigtet\", \"überhängt\", \"ueberhaengt\", \"überhänget\", \"ueberhaenget\", \"überhingt\", \"ueberhingt\", \"überhinget\", \"ueberhinget\", \"überhängt\", \"ueberhaengt\", \"überhänget\", \"ueberhaenget\", \"überhängtet\", \"ueberhaengtet\", \"überhänget\", \"ueberhaenget\", \"überhängtet\", \"ueberhaengtet\", \"überhängt\", \"ueberhaengt\", \"überhänget\", \"ueberhaenget\", \"überhingt\", \"ueberhingt\", \"überhinget\", \"ueberhinget\", \"überhastetet\", \"ueberhastetet\", \"überhäufet\", \"ueberhaeufet\", \"überhäuftet\", \"ueberhaeuftet\", \"überhebt\", \"ueberhebt\", \"überhebet\", \"ueberhebet\", \"überhobt\", \"ueberhobt\", \"überhöbet\", \"ueberhoebet\", \"überhebt\", \"ueberhebt\", \"überhebet\", \"ueberhebet\", \"überhobt\", \"ueberhobt\", \"überheiztet\", \"ueberheiztet\", \"überheizet\", \"ueberheizet\", \"überhöhet\", \"ueberhoehet\", \"überhöhtet\", \"ueberhoehtet\", \"überhitzet\", \"ueberhitzet\", \"überhitztet\", \"ueberhitztet\", \"überholet\", \"ueberholet\", \"überholtet\", \"ueberholtet\", \"überhöret\", \"ueberhoeret\", \"überhörtet\", \"ueberhoertet\", \"überinterpretieret\", \"ueberinterpretieret\", \"überinterpretiertet\", \"ueberinterpretiertet\", \"überinterpretieret\", \"ueberinterpretieret\", \"überinterpretiertet\", \"ueberinterpretiertet\", \"überklebet\", \"ueberklebet\", \"überklebtet\", \"ueberklebtet\", \"überkleidetet\", \"ueberkleidetet\", \"überkochet\", \"ueberkochet\", \"überkochtet\", \"ueberkochtet\", \"überkommet\", \"ueberkommet\", \"überkamt\", \"ueberkamt\", \"überkämet\", \"ueberkaemet\", \"überkämt\", \"ueberkaemt\", \"überkompensieret\", \"ueberkompensieret\", \"überkompensiertet\", \"ueberkompensiertet\", \"überkreuzet\", \"ueberkreuzet\", \"überkreuztet\", \"ueberkreuztet\", \"überkronet\", \"ueberkronet\", \"überkrontet\", \"ueberkrontet\", \"überkrustetet\", \"ueberkrustetet\", \"überladet\", \"ueberladet\", \"überludet\", \"ueberludet\", \"überlüdet\", \"ueberluedet\", \"überlappet\", \"ueberlappet\", \"überlapptet\", \"ueberlapptet\", \"überlasset\", \"ueberlasset\", \"überlaßt\", \"ueberlaßt\", \"ueberlasst\", \"ueberlasst\", \"überlässt\", \"ueberlaesst\", \"überließt\", \"ueberließt\", \"ueberliesst\", \"überließet\", \"ueberließet\", \"ueberliesset\", \"überlastet\", \"ueberlastet\", \"überlastetet\", \"ueberlastetet\", \"überläuft\", \"ueberlaeuft\", \"überlaufet\", \"ueberlaufet\", \"überlieft\", \"ueberlieft\", \"überliefet\", \"ueberliefet\", \"überlebet\", \"ueberlebet\", \"überlebtet\", \"ueberlebtet\", \"überleget\", \"ueberleget\", \"überlegtet\", \"ueberlegtet\", \"überlegt\", \"ueberlegt\", \"überleget\", \"ueberleget\", \"überlegtet\", \"ueberlegtet\", \"überleitet\", \"ueberleitet\", \"überleitetet\", \"ueberleitetet\", \"überleset\", \"ueberleset\", \"überlast\", \"ueberlast\", \"überläset\", \"ueberlaeset\", \"überliegt\", \"ueberliegt\", \"überlieget\", \"ueberlieget\", \"überlagt\", \"ueberlagt\", \"überläget\", \"ueberlaeget\", \"überlägt\", \"ueberlaegt\", \"überlistetet\", \"ueberlistetet\", \"übermachet\", \"uebermachet\", \"übermachtet\", \"uebermachtet\", \"übermalet\", \"uebermalet\", \"übermaltet\", \"uebermaltet\", \"übermalet\", \"uebermalet\", \"übermaltet\", \"uebermaltet\", \"übermannet\", \"uebermannet\", \"übermanntet\", \"uebermanntet\", \"übermarchtet\", \"uebermarchtet\", \"übermarchet\", \"uebermarchet\", \"übermästetet\", \"uebermaestetet\", \"übermüdetet\", \"uebermuedetet\", \"übernächtiget\", \"uebernaechtiget\", \"übernächtigtet\", \"uebernaechtigtet\", \"übernimmt\", \"uebernimmt\", \"übernehmt\", \"uebernehmt\", \"übernehmet\", \"uebernehmet\", \"übernahmt\", \"uebernahmt\", \"übernähmet\", \"uebernaehmet\", \"übernähmt\", \"uebernaehmt\", \"übernutzet\", \"uebernutzet\", \"übernutztet\", \"uebernutztet\", \"überpflanzt\", \"ueberpflanzt\", \"überpflanzet\", \"ueberpflanzet\", \"überpflanztet\", \"ueberpflanztet\", \"überplanet\", \"ueberplanet\", \"überplantet\", \"ueberplantet\", \"überprüfet\", \"ueberpruefet\", \"überprüftet\", \"ueberprueftet\", \"überquillt\", \"ueberquillt\", \"überquellt\", \"ueberquellt\", \"überquellet\", \"ueberquellet\", \"überquollt\", \"ueberquollt\", \"überquöllet\", \"ueberquoellet\", \"ueberquöllt\", \"ueberquoellt\", \"überqueret\", \"ueberqueret\", \"überquertet\", \"ueberquertet\", \"überraget\", \"ueberraget\", \"überragtet\", \"ueberragtet\", \"überragt\", \"ueberragt\", \"überraget\", \"ueberraget\", \"überragtet\", \"ueberragtet\", \"überraschet\", \"ueberraschet\", \"überraschtet\", \"ueberraschtet\", \"überreagieret\", \"ueberreagieret\", \"überreagiertet\", \"ueberreagiertet\", \"überrechnetet\", \"ueberrechnetet\", \"überredetet\", \"ueberredetet\", \"überreglementieret\", \"ueberreglementieret\", \"überreglementiertet\", \"ueberreglementiertet\", \"überregulieret\", \"ueberregulieret\", \"überreguliertet\", \"ueberreguliertet\", \"überreichet\", \"ueberreichet\", \"überreichtet\", \"ueberreichtet\", \"überreißet\", \"ueberreisset\", \"überrisset\", \"ueberrisset\", \"überreitet\", \"ueberreitet\", \"überrittet\", \"ueberrittet\", \"überreizet\", \"ueberreizet\", \"überreiztet\", \"ueberreiztet\", \"überrennet\", \"ueberrennet\", \"überrenntet\", \"ueberrenntet\", \"überrollet\", \"ueberrollet\", \"überrolltet\", \"ueberrolltet\", \"überrundetet\", \"ueberrundetet\", \"übersäet\", \"uebersaeet\", \"übersätet\", \"uebersaetet\", \"übersättiget\", \"uebersaettiget\", \"uebersaettigtet\", \"übersättigtet\", \"überschattetet\", \"ueberschattetet\", \"überschätzet\", \"ueberschaetzet\", \"überschätztet\", \"ueberschaetztet\", \"überschauet\", \"ueberschauet\", \"überschautet\", \"ueberschautet\", \"überschäumt\", \"ueberschaeumt\", \"überschäumet\", \"ueberschaeumet\", \"überschäumtet\", \"ueberschaeumtet\", \"überschießt\", \"ueberschießt\", \"ueberschiesst\", \"überschießet\", \"ueberschiesset\", \"ueberschießet\", \"überschosst\", \"ueberschosst\", \"überschosst\", \"ueberschosst\", \"überschoßt\", \"ueberschoßt\", \"überschösset\", \"ueberschoesset\", \"überschlafet\", \"ueberschlafet\", \"überschliefet\", \"ueberschliefet\", \"überschlieft\", \"ueberschlieft\", \"überschlaget\", \"ueberschlaget\", \"überschlüget\", \"ueberschlueget\", \"überschlügt\", \"ueberschluegt\", \"überschlägt\", \"ueberschlaegt\", \"überschlagt\", \"ueberschlagt\", \"überschlaget\", \"ueberschlaget\", \"überschlugt\", \"ueberschlugt\", \"überschlüget\", \"ueberschlueget\", \"überschlügt\", \"ueberschluegt\", \"überschlägt\", \"ueberschlaegt\", \"überschlagt\", \"ueberschlagt\", \"überschlaget\", \"ueberschlaget\", \"überschlugt\", \"ueberschlugt\", \"überschlüget\", \"ueberschlueget\", \"ueberschluegt\", \"überschlügt\", \"überschließt\", \"ueberschließt\", \"ueberschliesst\", \"überschließet\", \"ueberschliesset\", \"überschlosst\", \"ueberschlosst\", \"überschloßt\", \"ueberschlosst\", \"überschlösset\", \"ueberschloesset\", \"überschmieret\", \"ueberschmieret\", \"überschmiertet\", \"ueberschmiertet\", \"überschminket\", \"ueberschminket\", \"überschminktet\", \"ueberschminktet\", \"überschnappt\", \"ueberschnappt\", \"überschnappet\", \"ueberschnappet\", \"überschnapptet\", \"ueberschnapptet\", \"überschneidet\", \"ueberschneidet\", \"überschnittet\", \"ueberschnittet\", \"überschneiet\", \"ueberschneiet\", \"überschneitet\", \"ueberschneitet\", \"überschreibet\", \"ueberschreibet\", \"überschriebet\", \"ueberschriebet\", \"überschriebt\", \"ueberschriebt\", \"überschreiet\", \"ueberschreiet\", \"überschrieet\", \"ueberschrieet\", \"überschriet\", \"ueberschriet\", \"überschriet\", \"ueberschriet\", \"überschreitet\", \"ueberschreitet\", \"überschritt\", \"ueberschritt\", \"überschrittet\", \"ueberschrittet\", \"überschuldetet\", \"ueberschuldetet\", \"überschüttet\", \"ueberschüttet\", \"überschüttetet\", \"ueberschüttetet\", \"überschüttetet\", \"ueberschuettetet\", \"überschwappt\", \"ueberschwappt\", \"überschwappet\", \"ueberschwappet\", \"überschwapptet\", \"ueberschwapptet\", \"überschwemmet\", \"ueberschwemmet\", \"überschwemmtet\", \"ueberschwemmtet\", \"überschwinget\", \"ueberschwinget\", \"überschwangt\", \"ueberschwangt\", \"überschwänget\", \"ueberschwaenget\", \"überschwängt\", \"ueberschwaengt\", \"übersieht\", \"uebersieht\", \"überseht\", \"ueberseht\", \"übersehet\", \"uebersehet\", \"übersaht\", \"uebersaht\", \"übersähet\", \"uebersaehet\", \"übersäht\", \"uebersaeht\", \"übersähet\", \"uebersaehet\", \"übersäht\", \"uebersaeht\", \"übersandtet\", \"uebersandtet\", \"übersendetet\", \"uebersendetet\", \"übersensibilisieret\", \"uebersensibilisieret\", \"übersensibilisiertet\", \"uebersensibilisiertet\", \"übersetzt\", \"uebersetzt\", \"übersetzet\", \"uebersetzet\", \"übersetztet\", \"uebersetztet\", \"übersetzet\", \"uebersetzet\", \"übersetztet\", \"uebersetztet\", \"übersiedet\", \"uebersiedet\", \"übersiedetet\", \"uebersiedetet\", \"übersott\", \"uebersott\", \"übersottet\", \"uebersottet\", \"übersöttet\", \"uebersoettet\", \"übersiedet\", \"uebersiedet\", \"übersiedetet\", \"uebersiedetet\", \"übersott\", \"uebersott\", \"übersottet\", \"uebersottet\", \"übersöttet\", \"uebersoettet\", \"überspannet\", \"ueberspannet\", \"überspanntet\", \"ueberspanntet\", \"überspielet\", \"ueberspielet\", \"überspieltet\", \"ueberspieltet\", \"überspinnet\", \"ueberspinnet\", \"überspännet\", \"ueberspaennet\", \"überspännt\", \"ueberspaennt\", \"überspönnet\", \"ueberspoennet\", \"überspönnt\", \"ueberspoennt\", \"überspitzet\", \"ueberspitzet\", \"überspitztet\", \"ueberspitztet\", \"übersprechet\", \"uebersprechet\", \"überspracht\", \"ueberspracht\", \"übersprächet\", \"ueberspraechet\", \"übersprächt\", \"ueberspraecht\", \"überspringt\", \"ueberspringt\", \"überspringet\", \"ueberspringet\", \"überspränget\", \"ueberspraenget\", \"übersprängt\", \"ueberspraengt\", \"überspringt\", \"ueberspringt\", \"überspringet\", \"ueberspringet\", \"übersprangt\", \"uebersprangt\", \"überspränget\", \"ueberspraenget\", \"übersprängt\", \"ueberspraengt\", \"übersprühet\", \"ueberspruehet\", \"übersprühtet\", \"ueberspruehtet\", \"übersprühet\", \"ueberspruehet\", \"übersprühtet\", \"ueberspruehtet\", \"überspület\", \"ueberspuelet\", \"überspültet\", \"überspueltet\", \"übersticht\", \"uebersticht\", \"überstecht\", \"ueberstecht\", \"überstechet\", \"ueberstechet\", \"überstacht\", \"ueberstacht\", \"überstächet\", \"ueberstaechet\", \"überstächt\", \"ueberstaecht\", \"übersticht\", \"uebersticht\", \"überstecht\", \"ueberstecht\", \"überstechet\", \"ueberstechet\", \"überstacht\", \"ueberstacht\", \"überstächet\", \"ueberstaechet\", \"überstächt\", \"ueberstaecht\", \"überstehet\", \"ueberstehet\", \"überstandet\", \"überstandet\", \"überständet\", \"überstaendet\", \"überstündet\", \"überstuendet\", \"übersteht\", \"uebersteht\", \"überstehet\", \"ueberstehet\", \"überstandet\", \"ueberstandet\", \"überständet\", \"ueberstaendet\", \"überstündet\", \"ueberstuendet\", \"übersteiget\", \"uebersteiget\", \"überstieget\", \"ueberstieget\", \"überstiegt\", \"ueberstiegt\", \"übersteigt\", \"uebersteigt\", \"übersteiget\", \"uebersteiget\", \"überstiegt\", \"ueberstiegt\", \"überstieget\", \"ueberstieget\", \"überstellet\", \"ueberstellet\", \"überstilisieret\", \"ueberstilisieret\", \"überstimmet\", \"ueberstimmet\", \"überstimmtet\", \"ueberstimmtet\", \"überstrahlet\", \"ueberstrahlet\", \"überstrahltet\", \"ueberstrahltet\", \"überstrapazieret\", \"ueberstrapazieret\", \"überstrapaziertet\", \"ueberstrapaziertet\", \"überstreicht\", \"ueberstreicht\", \"überstreichet\", \"ueberstreichet\", \"überstricht\", \"ueberstricht\", \"überstrichet\", \"ueberstrichet\", \"überstreichet\", \"ueberstreichet\", \"überstrichet\", \"ueberstrichet\", \"überstricht\", \"ueberstricht\", \"überstreift\", \"ueberstreift\", \"überstreifet\", \"ueberstreifet\", \"überstreiftet\", \"ueberstreiftet\", \"überstreuet\", \"ueberstreuet\", \"überstreutet\", \"ueberstreutet\", \"überströmet\", \"ueberstroemet\", \"überströmtet\", \"überstroemtet\", \"überstülpt\", \"überstuelpt\", \"ueberstuelpet\", \"überstülpet\", \"überstülptet\", \"ueberstuelptet\", \"überstürzet\", \"ueberstuerzet\", \"überstürztet\", \"ueberstuerztet\", \"übertäubet\", \"uebertaeubet\", \"übertäubtet\", \"uebertaeubtet\", \"übertauchet\", \"uebertauchet\", \"übertauchtet\", \"uebertauchtet\", \"übertippet\", \"uebertippet\", \"übertipptet\", \"uebertipptet\", \"übertönet\", \"uebertoenet\", \"übertöntet\", \"uebertoentet\", \"übertouret\", \"uebertouret\", \"übertourtet\", \"uebertourtet\", \"überträgt\", \"uebertraegt\", \"übertragt\", \"uebertragt\", \"übertraget\", \"uebertraget\", \"übertrugt\", \"uebertrugt\", \"übertrüget\", \"uebertrueget\", \"übertrügt\", \"uebertruegt\", \"übertrainieret\", \"uebertrainieret\", \"übertrainiertet\", \"uebertrainiertet\", \"übertreffet\", \"uebertreffet\", \"übertraft\", \"uebertraft\", \"überträfet\", \"uebertraefet\", \"überträft\", \"uebertraeft\", \"übertreibt\", \"uebertreibt\", \"übertreibet\", \"uebertreibet\", \"übertriebet\", \"uebertriebet\", \"übertriebt\", \"uebertriebt\", \"übertritt\", \"uebertritt\", \"übertretet\", \"uebertretet\", \"übertrat\", \"uebertrat\", \"übertratet\", \"uebertratet\", \"überträtet\", \"uebertraetet\", \"übertritt\", \"uebertritt\", \"übertretet\", \"uebertretet\", \"übertrat\", \"uebertrat\", \"übertratet\", \"uebertratet\", \"überträtet\", \"uebertraetet\", \"übertrumpfet\", \"uebertrumpfet\", \"übertrumpftet\", \"uebertrumpftet\", \"übertünchet\", \"uebertuenchet\", \"übertünchtet\", \"überversorget\", \"ueberversorget\", \"überversorgtet\", \"ueberversorgtet\", \"übervorteilet\", \"uebervorteilet\", \"übervorteiltet\", \"uebervorteiltet\", \"überwachet\", \"ueberwachet\", \"überwachtet\", \"ueberwachtet\", \"überwachset\", \"ueberwachset\", \"überwüchset\", \"ueberwuechset\", \"überwallt\", \"ueberwallt\", \"überwallet\", \"ueberwallet\", \"überwalltet\", \"ueberwalltet\", \"überwallet\", \"ueberwallet\", \"überwalltet\", \"ueberwalltet\", \"überwältiget\", \"ueberwaeltiget\", \"überwältigtet\", \"ueberwaeltigtet\", \"überwalzet\", \"ueberwalzet\", \"überwalztet\", \"ueberwalztet\", \"überwälzet\", \"ueberwaelzet\", \"überwälztet\", \"ueberwaelztet\", \"überwechtetet\", \"ueberwechtetet\", \"überwächtetet\", \"ueberwaechtetet\", \"überwehet\", \"ueberwehet\", \"überwehtet\", \"ueberwehtet\", \"überweidetet\", \"ueberweidetet\", \"überweist\", \"ueberweist\", \"überweiset\", \"ueberweiset\", \"überwiest\", \"ueberwiest\", \"überwieset\", \"ueberwieset\", \"überweißet\", \"ueberweisset\", \"überweißtet\", \"ueberweisstet\", \"überwirft\", \"ueberwirft\", \"überwerft\", \"ueberwerft\", \"überwerfet\", \"ueberwerfet\", \"überwarft\", \"ueberwarft\", \"überwürfet\", \"ueberwuerfet\", \"überwürft\", \"ueberwuerft\", \"überwirft\", \"ueberwirft\", \"überwerft\", \"ueberwerft\", \"überwerfet\", \"ueberwerfet\", \"überwarft\", \"ueberwarft\", \"überwürfet\", \"ueberwuerfet\", \"überwürft\", \"ueberwuerft\", \"überwertetet\", \"ueberwertetet\", \"überwiegt\", \"ueberwiegt\", \"überwieget\", \"ueberwieget\", \"überwogt\", \"ueberwogt\", \"überwöget\", \"ueberwoeget\", \"überwögt\", \"ueberwoegt\", \"überwindet\", \"ueberwindet\", \"überwandet\", \"ueberwandet\", \"überwändet\", \"ueberwaendet\", \"überwölbet\", \"ueberwoelbet\", \"überwölbtet\", \"ueberwoelbtet\", \"ueberwuerzet\", \"ueberwuerzet\", \"überwürztet\", \"ueberwuerztet\", \"überzahlet\", \"ueberzahlet\", \"überzahltet\", \"ueberzahltet\", \"überzahltet\", \"ueberzahltet\", \"überzeichnetet\", \"ueberzeichnetet\", \"überzeuget\", \"ueberzeuget\", \"überzeugtet\", \"ueberzeugtet\", \"überzieht\", \"ueberzieht\", \"überziehet\", \"ueberziehet\", \"überzogt\", \"ueberzogt\", \"überzöget\", \"ueberzoeget\", \"überzögt\", \"ueberzoegt\", \"überzüchtetet\", \"ueberzuechtetet\", \"überangebot\", \"ueberangebot\", \"überbrückungskredit\", \"ueberbrückungskredit\", \"übereinkunft\", \"uebereinkunft\", \"überfahrt\", \"ueberfahrt\", \"überflugverbot\", \"ueberflugverbot\", \"überflutungsgebiet\", \"ueberflutungsgebiet\", \"überfracht\", \"ueberfracht\", \"überfrucht\", \"ueberfrucht\", \"übergangslaut\", \"uebergangslaut\", \"übergebot\", \"uebergebot\", \"übergewicht\", \"uebergewicht\", \"überhangmandat\", \"ueberhangmandat\", \"überhangsrecht\", \"ueberhangsrecht\", \"überholverbot\", \"ueberholverbot\", \"überladenheit\", \"ueberladenheit\", \"überlandfahrt\", \"ueberlandfahrt\", \"überlast\", \"ueberlast\", \"überlegenheit\", \"ueberlegenheit\", \"übermacht\", \"uebermacht\", \"übermaßverbot\", \"uebermassverbot\", \"übermut\", \"uebermut\", \"überraschungseffekt\", \"ueberraschungseffekt\", \"überraschungsgast\", \"ueberraschungsgast\", \"überraschungsmoment\", \"ueberraschungsmoment\", \"überredungskunst\", \"ueberredungskunst\", \"überreiztheit\", \"ueberreiztheit\", \"überrest\", \"ueberrest\", \"überschicht\", \"ueberschicht\", \"überschnitt\", \"ueberschnitt\", \"überschrift\", \"ueberschrift\", \"überschwemmungsgebiet\", \"ueberschwemmungsgebiet\", \"überseegebiet\", \"ueberseegebiet\", \"überseegeschäft\", \"ueberseegeschaeft\", \"übersicht\", \"uebersicht\", \"überspanntheit\", \"ueberspanntheit\", \"überspitztheit\", \"ueberspitztheit\", \"übertragungsrecht\", \"uebertragungsrecht\", \"übertriebenheit\", \"uebertriebenheit\", \"übertritt\", \"uebertritt\", \"überwachungsdienst\", \"ueberwachungsdienst\", \"überwachungsstaat\", \"ueberwachungsstaat\", \"überwelt\", \"ueberwelt\", \"überwinterungsgebiet\", \"ueberwinterungsgebiet\", \"überzeugtheit\", \"ueberzeugtheit\", \"überzeugungstat\", \"ueberzeugungstat\", \"überziehungskredit\", \"ueberziehungskredit\"];\n};\n//# sourceMappingURL=exceptionsParticiplesActive.js.map\n//# sourceMappingURL=exceptionsParticiplesActive.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/exceptionsParticiplesActive.js\n// module id = 1504\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/exceptionsParticiplesActive.js?");

/***/ }),
/* 1505 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar filter = __webpack_require__(112);\nvar getWords = __webpack_require__(229);\n// Verb-form lists per language\nvar getPassiveVerbsRussian = __webpack_require__(1506)().all;\n/**\n * Matches the sentence against passive verbs.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} passiveVerbs The array containing passive verb-forms.\n * @returns {Array} The found passive verbs.\n */\nvar matchPassiveVerbs = function matchPassiveVerbs(sentence, passiveVerbs) {\n    return filter(getWords(sentence), function (word) {\n        return passiveVerbs.includes(word.toLocaleLowerCase());\n    });\n};\n/**\n * Checks the passed sentences to see if they contain passive verb-forms.\n *\n * @param {string} sentence The sentence to match against.\n * @param {string} language The language of the text.\n * @returns {Array} The list of encountered passive verbs.\n */\nvar determineSentenceIsPassive = function determineSentenceIsPassive(sentence, language) {\n    var passiveVerbs = [];\n    switch (language) {\n        case \"ru\":\n            passiveVerbs = getPassiveVerbsRussian;\n            break;\n    }\n    return matchPassiveVerbs(sentence, passiveVerbs).length !== 0;\n};\n/**\n * Determines whether a sentence is passive.\n *\n * @param {string} sentenceText The sentence to determine voice for.\n * @param {string} language The language of the sentence part.\n\n * @returns {boolean} Returns true if passive, otherwise returns false.\n */\nmodule.exports = function (sentenceText, language) {\n    return determineSentenceIsPassive(sentenceText, language);\n};\n//# sourceMappingURL=determinePassiveSentence.js.map\n//# sourceMappingURL=determinePassiveSentence.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/morphological/determinePassiveSentence.js\n// module id = 1505\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/morphological/determinePassiveSentence.js?");

/***/ }),
/* 1506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list of all frequent participles used for the Russian passive voice assessment.\n * For each participle, versions for all four possible suffixes (-[], -а, -о, -ы) are included for masculine, feminine,\n * neuter, and plural respectively.\n * @returns {Array} The list with participles.\n */\n\nvar passiveVerbs = [\"абсолютизирован\", \"абсолютизирована\", \"абсолютизировано\", \"абсолютизированы\", \"абстрагирован\", \"абстрагирована\", \"абстрагировано\", \"абстрагированы\", \"автоматизирован\", \"автоматизирована\", \"автоматизировано\", \"автоматизированы\", \"адаптирован\", \"адаптирована\", \"адаптировано\", \"адаптированы\", \"адресован\", \"адресована\", \"адресовано\", \"адресованы\", \"адсорбирован\", \"адсорбирована\", \"адсорбировано\", \"адсорбированы\", \"аккредитован\", \"аккредитована\", \"аккредитовано\", \"аккредитованы\", \"аккумулирован\", \"аккумулирована\", \"аккумулировано\", \"аккумулированы\", \"активизирован\", \"активизирована\", \"активизировано\", \"активизированы\", \"активирован\", \"активирована\", \"активировано\", \"активированы\", \"актуализирован\", \"актуализирована\", \"актуализировано\", \"актуализированы\", \"акцентирован\", \"акцентирована\", \"акцентировано\", \"акцентированы\", \"амнистирован\", \"амнистирована\", \"амнистировано\", \"амнистированы\", \"амортизирован\", \"амортизирована\", \"амортизировано\", \"амортизированы\", \"ампутирован\", \"ампутирована\", \"ампутировано\", \"ампутированы\", \"ангажирован\", \"ангажирована\", \"ангажировано\", \"ангажированы\", \"аннулирован\", \"аннулирована\", \"аннулировано\", \"аннулированы\", \"анонсирован\", \"анонсирована\", \"анонсировано\", \"анонсированы\", \"апробирован\", \"апробирована\", \"апробировано\", \"апробированы\", \"аранжирован\", \"аранжирована\", \"аранжировано\", \"аранжированы\", \"аргументирован\", \"аргументирована\", \"аргументировано\", \"аргументированы\", \"арендован\", \"арендована\", \"арендовано\", \"арендованы\", \"арестован\", \"арестована\", \"арестовано\", \"арестованы\", \"ассигнован\", \"ассигнована\", \"ассигновано\", \"ассигнованы\", \"ассимилирован\", \"ассимилирована\", \"ассимилировано\", \"ассимилированы\", \"ассоциирован\", \"ассоциирована\", \"ассоциировано\", \"ассоциированы\", \"атакован\", \"атакована\", \"атаковано\", \"атакованы\", \"аттестован\", \"аттестована\", \"аттестовано\", \"аттестованы\", \"благословлен\", \"благословлена\", \"благословлено\", \"благословлены\", \"благоустроен\", \"благоустроена\", \"благоустроено\", \"благоустроены\", \"блокирован\", \"блокирована\", \"блокировано\", \"блокированы\", \"бойкотирован\", \"бойкотирована\", \"бойкотировано\", \"бойкотированы\", \"бронирован\", \"бронирована\", \"бронировано\", \"бронированы\", \"брошен\", \"брошена\", \"брошено\", \"брошены\", \"вакцинирован\", \"вакцинирована\", \"вакцинировано\", \"вакцинированы\", \"вбит\", \"вбита\", \"вбито\", \"вбиты\", \"вброшен\", \"вброшена\", \"вброшено\", \"вброшены\", \"вбухан\", \"вбухана\", \"вбухано\", \"вбуханы\", \"введен\", \"введена\", \"введено\", \"введены\", \"ввезен\", \"ввезена\", \"ввезено\", \"ввезены\", \"ввергнут\", \"ввергнута\", \"ввергнуто\", \"ввергнуты\", \"вверен\", \"вверена\", \"вверено\", \"вверены\", \"ввернут\", \"ввернута\", \"ввернуто\", \"ввернуты\", \"ввинчен\", \"ввинчена\", \"ввинчено\", \"ввинчены\", \"вдавлен\", \"вдавлена\", \"вдавлено\", \"вдавлены\", \"вдарен\", \"вдарена\", \"вдарено\", \"вдарены\", \"вдвинут\", \"вдвинута\", \"вдвинуто\", \"вдвинуты\", \"вделан\", \"вделана\", \"вделано\", \"вделаны\", \"вдет\", \"вдета\", \"вдето\", \"вдеты\", \"вдолблен\", \"вдолблена\", \"вдолблено\", \"вдолблены\", \"вдохновлен\", \"вдохновлена\", \"вдохновлено\", \"вдохновлены\", \"венчан\", \"венчана\", \"венчано\", \"венчаны\", \"вжат\", \"вжата\", \"вжато\", \"вжаты\", \"вживлен\", \"вживлена\", \"вживлено\", \"вживлены\", \"взбаламучен\", \"взбаламучена\", \"взбаламучено\", \"взбаламучены\", \"взбешен\", \"взбешена\", \"взбешено\", \"взбешены\", \"взбит\", \"взбита\", \"взбито\", \"взбиты\", \"взбодрен\", \"взбодрена\", \"взбодрено\", \"взбодрены\", \"взболтан\", \"взболтана\", \"взболтано\", \"взболтаны\", \"взбудоражена\", \"взбудоражено\", \"взбудоражены\", \"взведен\", \"взведена\", \"взведено\", \"взведены\", \"взвешен\", \"взвешена\", \"взвешено\", \"взвешены\", \"взвинчен\", \"взвинчена\", \"взвинчено\", \"взвинчены\", \"взвихрен\", \"взвихрена\", \"взвихрено\", \"взвихрены\", \"взволнована\", \"взволновано\", \"взволнованы\", \"взгромозжден\", \"взгромозждена\", \"взгромозждено\", \"взгромозждены\", \"вздернут\", \"вздернута\", \"вздернуто\", \"вздернуты\", \"вздет\", \"вздета\", \"вздето\", \"вздеты\", \"вздут\", \"вздута\", \"вздуто\", \"вздуты\", \"вздыблен\", \"вздыблена\", \"вздыблено\", \"вздыблены\", \"взлелеян\", \"взлелеяна\", \"взлелеяно\", \"взлелеяны\", \"взломан\", \"взломана\", \"взломано\", \"взломаны\", \"взлохмачен\", \"взлохмачена\", \"взлохмачено\", \"взлохмачены\", \"взметнут\", \"взметнута\", \"взметнуто\", \"взметнуты\", \"взмылен\", \"взмылена\", \"взмылено\", \"взмылены\", \"взнуздан\", \"взнуздана\", \"взнуздано\", \"взнузданы\", \"взорван\", \"взорвана\", \"взорвано\", \"взорваны\", \"взращен\", \"взращена\", \"взращено\", \"взращены\", \"взрезан\", \"взрезана\", \"взрезано\", \"взрезаны\", \"взрыхлен\", \"взрыхлена\", \"взрыхлено\", \"взрыхлены\", \"взъерошен\", \"взъерошена\", \"взъерошено\", \"взъерошены\", \"взыскан\", \"взыскана\", \"взыскано\", \"взысканы\", \"взят\", \"взята\", \"взято\", \"взяты\", \"видоизменен\", \"видоизменена\", \"видоизменено\", \"видоизменены\", \"визирован\", \"визирована\", \"визировано\", \"визированы\", \"вкачен\", \"вкачена\", \"вкачено\", \"вкачены\", \"вклеен\", \"вклеена\", \"вклеено\", \"вклеены\", \"включен\", \"включена\", \"включено\", \"включены\", \"вколот\", \"вколота\", \"вколото\", \"вколоты\", \"вколочен\", \"вколочена\", \"вколочено\", \"вколочены\", \"вкопан\", \"вкопана\", \"вкопано\", \"вкопаны\", \"вкраплен\", \"вкраплена\", \"вкраплено\", \"вкраплены\", \"вкушен\", \"вкушена\", \"вкушено\", \"вкушены\", \"влеплен\", \"влеплена\", \"влеплено\", \"влеплены\", \"влит\", \"влита\", \"влито\", \"влиты\", \"вложен\", \"вложена\", \"вложено\", \"вложены\", \"вмазан\", \"вмазана\", \"вмазано\", \"вмазаны\", \"вменен\", \"вменена\", \"вменено\", \"вменены\", \"вмещен\", \"вмещена\", \"вмещено\", \"вмещены\", \"вмонтирован\", \"вмонтирована\", \"вмонтировано\", \"вмонтированы\", \"вмурован\", \"вмурована\", \"вмуровано\", \"вмурованы\", \"вмят\", \"вмята\", \"вмято\", \"вмяты\", \"внедрен\", \"внедрена\", \"внедрено\", \"внедрены\", \"внесен\", \"внесена\", \"внесено\", \"внесены\", \"внушен\", \"внушена\", \"внушено\", \"внушены\", \"вобран\", \"вобрана\", \"вобрано\", \"вобраны\", \"вовлечен\", \"вовлечена\", \"вовлечено\", \"вовлечены\", \"вогнан\", \"вогнана\", \"вогнано\", \"вогнаны\", \"водворен\", \"водворена\", \"водворено\", \"водворены\", \"водружен\", \"водружена\", \"водружено\", \"водружены\", \"возбуждена\", \"возбуждено\", \"возбуждены\", \"возведен\", \"возведена\", \"возведено\", \"возведены\", \"возвеличен\", \"возвеличена\", \"возвеличено\", \"возвеличены\", \"возвещен\", \"возвещена\", \"возвещено\", \"возвещены\", \"возвращен\", \"возвращена\", \"возвращено\", \"возвращены\", \"возвышен\", \"возвышена\", \"возвышено\", \"возвышены\", \"возглавлен\", \"возглавлена\", \"возглавлено\", \"возглавлены\", \"возглашен\", \"возглашена\", \"возглашено\", \"возглашены\", \"воздвигнут\", \"воздвигнута\", \"воздвигнуто\", \"воздвигнуты\", \"возделан\", \"возделана\", \"возделано\", \"возделаны\", \"возложен\", \"возложена\", \"возложено\", \"возложены\", \"возмещен\", \"возмещена\", \"возмещено\", \"возмещены\", \"возмущена\", \"возмущено\", \"возмущены\", \"вознагражден\", \"вознаграждена\", \"вознаграждено\", \"вознаграждены\", \"вознесен\", \"вознесена\", \"вознесено\", \"вознесены\", \"возобновлен\", \"возобновлена\", \"возобновлено\", \"возобновлены\", \"возрожден\", \"возрождена\", \"возрождено\", \"возрождены\", \"воображен\", \"воображена\", \"воображено\", \"воображены\", \"воодушевлен\", \"воодушевлена\", \"воодушевлено\", \"воодушевлены\", \"вооружен\", \"вооружена\", \"вооружено\", \"вооружены\", \"воплощен\", \"воплощена\", \"воплощено\", \"воплощены\", \"вопрошен\", \"вопрошена\", \"вопрошено\", \"вопрошены\", \"воскрешен\", \"воскрешена\", \"воскрешено\", \"воскрешены\", \"воспет\", \"воспета\", \"воспето\", \"воспеты\", \"воспитана\", \"воспитано\", \"воспитаны\", \"воспламенен\", \"воспламенена\", \"воспламенено\", \"воспламенены\", \"восполнен\", \"восполнена\", \"восполнено\", \"восполнены\", \"воспрещен\", \"воспрещена\", \"воспрещено\", \"воспрещены\", \"воспринят\", \"воспринята\", \"воспринято\", \"восприняты\", \"воспроизведен\", \"воспроизведена\", \"воспроизведено\", \"воспроизведены\", \"восславлен\", \"восславлена\", \"восславлено\", \"восславлены\", \"восстановлен\", \"восстановлена\", \"восстановлено\", \"восстановлены\", \"востребована\", \"востребовано\", \"востребованы\", \"восхищен\", \"восхищена\", \"восхищено\", \"восхищены\", \"воткнут\", \"воткнута\", \"воткнуто\", \"воткнуты\", \"впаян\", \"впаяна\", \"впаяно\", \"впаяны\", \"впечатлен\", \"впечатлена\", \"впечатлено\", \"впечатлены\", \"вписан\", \"вписана\", \"вписано\", \"вписаны\", \"впитан\", \"впитана\", \"впитано\", \"впитаны\", \"впихнут\", \"впихнута\", \"впихнуто\", \"впихнуты\", \"вплетен\", \"вплетена\", \"вплетено\", \"вплетены\", \"вправлен\", \"вправлена\", \"вправлено\", \"вправлены\", \"впрыснут\", \"впрыснута\", \"впрыснуто\", \"впрыснуты\", \"впряжен\", \"впряжена\", \"впряжено\", \"впряжены\", \"впущен\", \"впущена\", \"впущено\", \"впущены\", \"вразумлен\", \"вразумлена\", \"вразумлено\", \"вразумлены\", \"врезан\", \"врезана\", \"врезано\", \"врезаны\", \"врублен\", \"врублена\", \"врублено\", \"врублены\", \"вручен\", \"вручена\", \"вручено\", \"вручены\", \"врыт\", \"врыта\", \"врыто\", \"врыты\", \"всажен\", \"всажена\", \"всажено\", \"всажены\", \"вселен\", \"вселена\", \"вселено\", \"вселены\", \"вскинут\", \"вскинута\", \"вскинуто\", \"вскинуты\", \"вскипячен\", \"вскипячена\", \"вскипячено\", \"вскипячены\", \"всколыхнут\", \"всколыхнута\", \"всколыхнуто\", \"всколыхнуты\", \"вскопан\", \"вскопана\", \"вскопано\", \"вскопаны\", \"вскормлен\", \"вскормлена\", \"вскормлено\", \"вскормлены\", \"вскружен\", \"вскружена\", \"вскружено\", \"вскружены\", \"вскрыт\", \"вскрыта\", \"вскрыто\", \"вскрыты\", \"всосан\", \"всосана\", \"всосано\", \"всосаны\", \"вспахан\", \"вспахана\", \"вспахано\", \"вспаханы\", \"вспенен\", \"вспенена\", \"вспенено\", \"вспенены\", \"всплеснут\", \"всплеснута\", \"всплеснуто\", \"всплеснуты\", \"всполошен\", \"всполошена\", \"всполошено\", \"всполошены\", \"вспорот\", \"вспорота\", \"вспорото\", \"вспороты\", \"вставлен\", \"вставлена\", \"вставлено\", \"вставлены\", \"встревожен\", \"встревожена\", \"встревожено\", \"встревожены\", \"встречен\", \"встречена\", \"встречено\", \"встречены\", \"встроен\", \"встроена\", \"встроено\", \"встроены\", \"встряхнут\", \"встряхнута\", \"встряхнуто\", \"встряхнуты\", \"всунут\", \"всунута\", \"всунуто\", \"всунуты\", \"всучен\", \"всучена\", \"всучено\", \"всучены\", \"втащен\", \"втащена\", \"втащено\", \"втащены\", \"втерт\", \"втерта\", \"втерто\", \"втерты\", \"втиснут\", \"втиснута\", \"втиснуто\", \"втиснуты\", \"втолкнут\", \"втолкнута\", \"втолкнуто\", \"втолкнуты\", \"втолкован\", \"втолкована\", \"втолковано\", \"втолкованы\", \"втоптан\", \"втоптана\", \"втоптано\", \"втоптаны\", \"втравлен\", \"втравлена\", \"втравлено\", \"втравлены\", \"втянут\", \"втянута\", \"втянуто\", \"втянуты\", \"вшит\", \"вшита\", \"вшито\", \"вшиты\", \"выбелен\", \"выбелена\", \"выбелено\", \"выбелены\", \"выбит\", \"выбита\", \"выбито\", \"выбиты\", \"выболтан\", \"выболтана\", \"выболтано\", \"выболтаны\", \"выбран\", \"выбрана\", \"выбрано\", \"выбраны\", \"выбрит\", \"выбрита\", \"выбрито\", \"выбриты\", \"выброшен\", \"выброшена\", \"выброшено\", \"выброшены\", \"вывален\", \"вывалена\", \"вывалено\", \"вывалены\", \"вывалян\", \"вываляна\", \"вываляно\", \"вываляны\", \"выварен\", \"выварена\", \"выварено\", \"выварены\", \"выведан\", \"выведана\", \"выведано\", \"выведаны\", \"выведен\", \"выведена\", \"выведено\", \"выведены\", \"вывезен\", \"вывезена\", \"вывезено\", \"вывезены\", \"выверен\", \"выверена\", \"выверено\", \"выверены\", \"вывернут\", \"вывернута\", \"вывернуто\", \"вывернуты\", \"выветрен\", \"выветрена\", \"выветрено\", \"выветрены\", \"вывешен\", \"вывешена\", \"вывешено\", \"вывешены\", \"вывихнут\", \"вывихнута\", \"вывихнуто\", \"вывихнуты\", \"вывожен\", \"вывожена\", \"вывожено\", \"вывожены\", \"выворочен\", \"выворочена\", \"выворочено\", \"выворочены\", \"выгадан\", \"выгадана\", \"выгадано\", \"выгаданы\", \"выглажен\", \"выглажена\", \"выглажено\", \"выглажены\", \"выгнан\", \"выгнана\", \"выгнано\", \"выгнаны\", \"выгнут\", \"выгнута\", \"выгнуто\", \"выгнуты\", \"выговорен\", \"выговорена\", \"выговорено\", \"выговорены\", \"выгорожен\", \"выгорожена\", \"выгорожено\", \"выгорожены\", \"выгравирован\", \"выгравирована\", \"выгравировано\", \"выгравированы\", \"выгребен\", \"выгребена\", \"выгребено\", \"выгребены\", \"выгружен\", \"выгружена\", \"выгружено\", \"выгружены\", \"выдавлен\", \"выдавлена\", \"выдавлено\", \"выдавлены\", \"выдвинут\", \"выдвинута\", \"выдвинуто\", \"выдвинуты\", \"выдворен\", \"выдворена\", \"выдворено\", \"выдворены\", \"выделан\", \"выделана\", \"выделано\", \"выделаны\", \"выделен\", \"выделена\", \"выделено\", \"выделены\", \"выдержан\", \"выдержана\", \"выдержано\", \"выдержаны\", \"выдернут\", \"выдернута\", \"выдернуто\", \"выдернуты\", \"выдолблен\", \"выдолблена\", \"выдолблено\", \"выдолблены\", \"выдохнут\", \"выдохнута\", \"выдохнуто\", \"выдохнуты\", \"выдран\", \"выдрана\", \"выдрано\", \"выдраны\", \"выдрессирована\", \"выдрессировано\", \"выдрессированы\", \"выдуман\", \"выдумана\", \"выдумано\", \"выдуманы\", \"выдут\", \"выдута\", \"выдуто\", \"выдуты\", \"выжат\", \"выжата\", \"выжато\", \"выжаты\", \"выждан\", \"выждана\", \"выждано\", \"выжданы\", \"выжит\", \"выжита\", \"выжито\", \"выжиты\", \"выжран\", \"выжрана\", \"выжрано\", \"выжраны\", \"вызван\", \"вызвана\", \"вызвано\", \"вызваны\", \"вызволен\", \"вызволена\", \"вызволено\", \"вызволены\", \"вызнан\", \"вызнана\", \"вызнано\", \"вызнаны\", \"вызубрен\", \"вызубрена\", \"вызубрено\", \"вызубрены\", \"выигран\", \"выиграна\", \"выиграно\", \"выиграны\", \"выискан\", \"выискана\", \"выискано\", \"выисканы\", \"выказан\", \"выказана\", \"выказано\", \"выказаны\", \"выкачан\", \"выкачана\", \"выкачано\", \"выкачаны\", \"выкачен\", \"выкачена\", \"выкачено\", \"выкачены\", \"выкинут\", \"выкинута\", \"выкинуто\", \"выкинуты\", \"выклеван\", \"выклевана\", \"выклевано\", \"выклеваны\", \"выкликнут\", \"выкликнута\", \"выкликнуто\", \"выкликнуты\", \"выключен\", \"выключена\", \"выключено\", \"выключены\", \"выклянчен\", \"выклянчена\", \"выклянчено\", \"выклянчены\", \"выкован\", \"выкована\", \"выковано\", \"выкованы\", \"выковырян\", \"выковыряна\", \"выковыряно\", \"выковыряны\", \"выколот\", \"выколота\", \"выколото\", \"выколоты\", \"выколочен\", \"выколочена\", \"выколочено\", \"выколочены\", \"выкопан\", \"выкопана\", \"выкопано\", \"выкопаны\", \"выкормлен\", \"выкормлена\", \"выкормлено\", \"выкормлены\", \"выкорчеван\", \"выкорчевана\", \"выкорчевано\", \"выкорчеваны\", \"выкошен\", \"выкошена\", \"выкошено\", \"выкошены\", \"выкраден\", \"выкрадена\", \"выкрадено\", \"выкрадены\", \"выкрашен\", \"выкрашена\", \"выкрашено\", \"выкрашены\", \"выкрикнут\", \"выкрикнута\", \"выкрикнуто\", \"выкрикнуты\", \"выкроен\", \"выкроена\", \"выкроено\", \"выкроены\", \"выкручен\", \"выкручена\", \"выкручено\", \"выкручены\", \"выкупан\", \"выкупана\", \"выкупано\", \"выкупаны\", \"выкуплен\", \"выкуплена\", \"выкуплено\", \"выкуплены\", \"выкурен\", \"выкурена\", \"выкурено\", \"выкурены\", \"выкушен\", \"выкушена\", \"выкушено\", \"выкушены\", \"вылакан\", \"вылакана\", \"вылакано\", \"вылаканы\", \"вылеплен\", \"вылеплена\", \"вылеплено\", \"вылеплены\", \"вылечен\", \"вылечена\", \"вылечено\", \"вылечены\", \"вылизан\", \"вылизана\", \"вылизано\", \"вылизаны\", \"вылит\", \"вылита\", \"вылито\", \"вылиты\", \"выловлен\", \"выловлена\", \"выловлено\", \"выловлены\", \"выложен\", \"выложена\", \"выложено\", \"выложены\", \"выломан\", \"выломана\", \"выломано\", \"выломаны\", \"вылуплен\", \"вылуплена\", \"вылуплено\", \"вылуплены\", \"вымазан\", \"вымазана\", \"вымазано\", \"вымазаны\", \"выманен\", \"выманена\", \"выманено\", \"выманены\", \"вымаран\", \"вымарана\", \"вымарано\", \"вымараны\", \"вымахан\", \"вымахана\", \"вымахано\", \"вымаханы\", \"выменян\", \"выменяна\", \"выменяно\", \"выменяны\", \"выметен\", \"выметена\", \"выметено\", \"выметены\", \"вымолвлен\", \"вымолвлена\", \"вымолвлено\", \"вымолвлены\", \"вымолен\", \"вымолена\", \"вымолено\", \"вымолены\", \"вымотан\", \"вымотана\", \"вымотано\", \"вымотаны\", \"вымочен\", \"вымочена\", \"вымочено\", \"вымочены\", \"вымощен\", \"вымощена\", \"вымощено\", \"вымощены\", \"вымучен\", \"вымучена\", \"вымучено\", \"вымучены\", \"вымуштрован\", \"вымуштрована\", \"вымуштровано\", \"вымуштрованы\", \"вымыт\", \"вымыта\", \"вымыто\", \"вымыты\", \"вымышлен\", \"вымышлена\", \"вымышлено\", \"вымышлены\", \"вынесен\", \"вынесена\", \"вынесено\", \"вынесены\", \"выношен\", \"выношена\", \"выношено\", \"выношены\", \"вынужден\", \"вынуждена\", \"вынуждено\", \"вынуждены\", \"вынут\", \"вынута\", \"вынуто\", \"вынуты\", \"выпачкан\", \"выпачкана\", \"выпачкано\", \"выпачканы\", \"выпестован\", \"выпестована\", \"выпестовано\", \"выпестованы\", \"выпечен\", \"выпечена\", \"выпечено\", \"выпечены\", \"выпилен\", \"выпилена\", \"выпилено\", \"выпилены\", \"выписан\", \"выписана\", \"выписано\", \"выписаны\", \"выпит\", \"выпита\", \"выпито\", \"выпиты\", \"выпихнут\", \"выпихнута\", \"выпихнуто\", \"выпихнуты\", \"выплавлен\", \"выплавлена\", \"выплавлено\", \"выплавлены\", \"выплакан\", \"выплакана\", \"выплакано\", \"выплаканы\", \"выплачен\", \"выплачена\", \"выплачено\", \"выплачены\", \"выплеснут\", \"выплеснута\", \"выплеснуто\", \"выплеснуты\", \"выплюнут\", \"выплюнута\", \"выплюнуто\", \"выплюнуты\", \"выполнен\", \"выполнена\", \"выполнено\", \"выполнены\", \"выпорот\", \"выпорота\", \"выпорото\", \"выпороты\", \"выпотрошен\", \"выпотрошена\", \"выпотрошено\", \"выпотрошены\", \"выправлен\", \"выправлена\", \"выправлено\", \"выправлены\", \"выпровожен\", \"выпровожена\", \"выпровожено\", \"выпровожены\", \"выпростан\", \"выпростана\", \"выпростано\", \"выпростаны\", \"выпрошен\", \"выпрошена\", \"выпрошено\", \"выпрошены\", \"выпрямлен\", \"выпрямлена\", \"выпрямлено\", \"выпрямлены\", \"выпучен\", \"выпучена\", \"выпучено\", \"выпучены\", \"выпущен\", \"выпущена\", \"выпущено\", \"выпущены\", \"выпытан\", \"выпытана\", \"выпытано\", \"выпытаны\", \"выпячен\", \"выпячена\", \"выпячено\", \"выпячены\", \"выработан\", \"выработана\", \"выработано\", \"выработаны\", \"выражен\", \"выражена\", \"выражено\", \"выражены\", \"выращен\", \"выращена\", \"выращено\", \"выращены\", \"вырван\", \"вырвана\", \"вырвано\", \"вырваны\", \"вырезан\", \"вырезана\", \"вырезано\", \"вырезаны\", \"выровнян\", \"выровняна\", \"выровняно\", \"выровняны\", \"выронен\", \"выронена\", \"выронено\", \"выронены\", \"вырублен\", \"вырублена\", \"вырублено\", \"вырублены\", \"выруган\", \"выругана\", \"выругано\", \"выруганы\", \"выручен\", \"выручена\", \"выручено\", \"выручены\", \"вырыт\", \"вырыта\", \"вырыто\", \"вырыты\", \"высажен\", \"высажена\", \"высажено\", \"высажены\", \"высвечен\", \"высвечена\", \"высвечено\", \"высвечены\", \"высвобожден\", \"высвобождена\", \"высвобождено\", \"высвобождены\", \"выселен\", \"выселена\", \"выселено\", \"выселены\", \"высечен\", \"высечена\", \"высечено\", \"высечены\", \"высеян\", \"высеяна\", \"высеяно\", \"высеяны\", \"высижен\", \"высижена\", \"высижено\", \"высижены\", \"высказан\", \"высказана\", \"высказано\", \"высказаны\", \"выскоблен\", \"выскоблена\", \"выскоблено\", \"выскоблены\", \"выскребен\", \"выскребена\", \"выскребено\", \"выскребены\", \"выслан\", \"выслана\", \"выслано\", \"высланы\", \"выслежен\", \"выслежена\", \"выслежено\", \"выслежены\", \"выслужен\", \"выслужена\", \"выслужено\", \"выслужены\", \"выслушан\", \"выслушана\", \"выслушано\", \"выслушаны\", \"высмеян\", \"высмеяна\", \"высмеяно\", \"высмеяны\", \"высмотрен\", \"высмотрена\", \"высмотрено\", \"высмотрены\", \"высосан\", \"высосана\", \"высосано\", \"высосаны\", \"выспрошен\", \"выспрошена\", \"выспрошено\", \"выспрошены\", \"выставлен\", \"выставлена\", \"выставлено\", \"выставлены\", \"выстиран\", \"выстирана\", \"выстирано\", \"выстираны\", \"выстлан\", \"выстлана\", \"выстлано\", \"выстланы\", \"выстоян\", \"выстояна\", \"выстояно\", \"выстояны\", \"выстрадан\", \"выстрадана\", \"выстрадано\", \"выстраданы\", \"выстрелен\", \"выстрелена\", \"выстрелено\", \"выстрелены\", \"выстрижен\", \"выстрижена\", \"выстрижено\", \"выстрижены\", \"выстроен\", \"выстроена\", \"выстроено\", \"выстроены\", \"выструган\", \"выстругана\", \"выстругано\", \"выструганы\", \"выстужен\", \"выстужена\", \"выстужено\", \"выстужены\", \"высунут\", \"высунута\", \"высунуто\", \"высунуты\", \"высушен\", \"высушена\", \"высушено\", \"высушены\", \"высчитан\", \"высчитана\", \"высчитано\", \"высчитаны\", \"вытаращен\", \"вытаращена\", \"вытаращено\", \"вытаращены\", \"вытащен\", \"вытащена\", \"вытащено\", \"вытащены\", \"вытерплен\", \"вытерплена\", \"вытерплено\", \"вытерплены\", \"вытерт\", \"вытерта\", \"вытерто\", \"вытерты\", \"вытесан\", \"вытесана\", \"вытесано\", \"вытесаны\", \"вытеснен\", \"вытеснена\", \"вытеснено\", \"вытеснены\", \"выткан\", \"выткана\", \"выткано\", \"вытканы\", \"вытолкнут\", \"вытолкнута\", \"вытолкнуто\", \"вытолкнуты\", \"вытоптан\", \"вытоптана\", \"вытоптано\", \"вытоптаны\", \"выторгован\", \"выторгована\", \"выторговано\", \"выторгованы\", \"выточен\", \"выточена\", \"выточено\", \"выточены\", \"вытравлен\", \"вытравлена\", \"вытравлено\", \"вытравлены\", \"вытребован\", \"вытребована\", \"вытребовано\", \"вытребованы\", \"вытрясен\", \"вытрясена\", \"вытрясено\", \"вытрясены\", \"вытряхнут\", \"вытряхнута\", \"вытряхнуто\", \"вытряхнуты\", \"вытурен\", \"вытурена\", \"вытурено\", \"вытурены\", \"вытянут\", \"вытянута\", \"вытянуто\", \"вытянуты\", \"выужен\", \"выужена\", \"выужено\", \"выужены\", \"выучен\", \"выучена\", \"выучено\", \"выучены\", \"выхвачен\", \"выхвачена\", \"выхвачено\", \"выхвачены\", \"выхлебан\", \"выхлебана\", \"выхлебано\", \"выхлебаны\", \"выхлопотан\", \"выхлопотана\", \"выхлопотано\", \"выхлопотаны\", \"выхожен\", \"выхожена\", \"выхожено\", \"выхожены\", \"выхолощен\", \"выхолощена\", \"выхолощено\", \"выхолощены\", \"выцарапан\", \"выцарапана\", \"выцарапано\", \"выцарапаны\", \"вычеркнут\", \"вычеркнута\", \"вычеркнуто\", \"вычеркнуты\", \"вычерпан\", \"вычерпана\", \"вычерпано\", \"вычерпаны\", \"вычерчен\", \"вычерчена\", \"вычерчено\", \"вычерчены\", \"вычислен\", \"вычислена\", \"вычислено\", \"вычислены\", \"вычитан\", \"вычитана\", \"вычитано\", \"вычитаны\", \"вычищен\", \"вычищена\", \"вычищено\", \"вычищены\", \"вычленен\", \"вычленена\", \"вычленено\", \"вычленены\", \"вычтен\", \"вычтена\", \"вычтено\", \"вычтены\", \"вышвырнут\", \"вышвырнута\", \"вышвырнуто\", \"вышвырнуты\", \"вышит\", \"вышита\", \"вышито\", \"вышиты\", \"вышколен\", \"вышколена\", \"вышколено\", \"вышколены\", \"выщерблен\", \"выщерблена\", \"выщерблено\", \"выщерблены\", \"выщипан\", \"выщипана\", \"выщипано\", \"выщипаны\", \"выявлен\", \"выявлена\", \"выявлено\", \"выявлены\", \"выяснен\", \"выяснена\", \"выяснено\", \"выяснены\", \"газирована\", \"газировано\", \"газированы\", \"гарантирован\", \"гарантирована\", \"гарантировано\", \"гарантированы\", \"гаркнут\", \"гаркнута\", \"гаркнуто\", \"гаркнуты\", \"гармонизирован\", \"гармонизирована\", \"гармонизировано\", \"гармонизированы\", \"герметизирован\", \"герметизирована\", \"герметизировано\", \"герметизированы\", \"глазирован\", \"глазирована\", \"глазировано\", \"глазированы\", \"госпитализирован\", \"госпитализирована\", \"госпитализировано\", \"госпитализированы\", \"грохнут\", \"грохнута\", \"грохнуто\", \"грохнуты\", \"дарован\", \"дарована\", \"даровано\", \"дарованы\", \"датирован\", \"датирована\", \"датировано\", \"датированы\", \"двинут\", \"двинута\", \"двинуто\", \"двинуты\", \"девальвирован\", \"девальвирована\", \"девальвировано\", \"девальвированы\", \"дегустирован\", \"дегустирована\", \"дегустировано\", \"дегустированы\", \"дезавуирован\", \"дезавуирована\", \"дезавуировано\", \"дезавуированы\", \"дезинфицирован\", \"дезинфицирована\", \"дезинфицировано\", \"дезинфицированы\", \"дезинформирован\", \"дезинформирована\", \"дезинформировано\", \"дезинформированы\", \"дезорганизован\", \"дезорганизована\", \"дезорганизовано\", \"дезорганизованы\", \"дезориентирован\", \"дезориентирована\", \"дезориентировано\", \"дезориентированы\", \"декларирован\", \"декларирована\", \"декларировано\", \"декларированы\", \"декорирован\", \"декорирована\", \"декорировано\", \"декорированы\", \"делегирован\", \"делегирована\", \"делегировано\", \"делегированы\", \"демаскирован\", \"демаскирована\", \"демаскировано\", \"демаскированы\", \"демобилизован\", \"демобилизована\", \"демобилизовано\", \"демобилизованы\", \"демонтирован\", \"демонтирована\", \"демонтировано\", \"демонтированы\", \"деморализован\", \"деморализована\", \"деморализовано\", \"деморализованы\", \"депонирован\", \"депонирована\", \"депонировано\", \"депонированы\", \"детализирован\", \"детализирована\", \"детализировано\", \"детализированы\", \"детерминирован\", \"детерминирована\", \"детерминировано\", \"детерминированы\", \"деформирован\", \"деформирована\", \"деформировано\", \"деформированы\", \"диагностирован\", \"диагностирована\", \"диагностировано\", \"диагностированы\", \"дисквалифицирован\", \"дисквалифицирована\", \"дисквалифицировано\", \"дисквалифицированы\", \"дискредитирован\", \"дискредитирована\", \"дискредитировано\", \"дискредитированы\", \"дискриминирован\", \"дискриминирована\", \"дискриминировано\", \"дискриминированы\", \"дислоцирован\", \"дислоцирована\", \"дислоцировано\", \"дислоцированы\", \"дисциплинирован\", \"дисциплинирована\", \"дисциплинировано\", \"дисциплинированы\", \"дифференцирован\", \"дифференцирована\", \"дифференцировано\", \"дифференцированы\", \"добавлен\", \"добавлена\", \"добавлено\", \"добавлены\", \"добит\", \"добита\", \"добито\", \"добиты\", \"доведен\", \"доведена\", \"доведено\", \"доведены\", \"довезен\", \"довезена\", \"довезено\", \"довезены\", \"доверен\", \"доверена\", \"доверено\", \"доверены\", \"довершен\", \"довершена\", \"довершено\", \"довершены\", \"довожен\", \"довожена\", \"довожено\", \"довожены\", \"догляжен\", \"догляжена\", \"догляжено\", \"догляжены\", \"догнан\", \"догнана\", \"догнано\", \"догнаны\", \"договорен\", \"договорена\", \"договорено\", \"договорены\", \"догонян\", \"догоняна\", \"догоняно\", \"догоняны\", \"доделан\", \"доделана\", \"доделано\", \"доделаны\", \"додуман\", \"додумана\", \"додумано\", \"додуманы\", \"дожат\", \"дожата\", \"дожато\", \"дожаты\", \"дожеван\", \"дожевана\", \"дожевано\", \"дожеваны\", \"дожит\", \"дожита\", \"дожито\", \"дожиты\", \"дозволен\", \"дозволена\", \"дозволено\", \"дозволены\", \"дозирован\", \"дозирована\", \"дозировано\", \"дозированы\", \"доигран\", \"доиграна\", \"доиграно\", \"доиграны\", \"доказан\", \"доказана\", \"доказано\", \"доказаны\", \"докончен\", \"докончена\", \"докончено\", \"докончены\", \"документирован\", \"документирована\", \"документировано\", \"документированы\", \"докурен\", \"докурена\", \"докурено\", \"докурены\", \"долбанут\", \"долбанута\", \"долбануто\", \"долбануты\", \"долит\", \"долита\", \"долито\", \"долиты\", \"доложен\", \"доложена\", \"доложено\", \"доложены\", \"домчан\", \"домчана\", \"домчано\", \"домчаны\", \"домыслен\", \"домыслена\", \"домыслено\", \"домыслены\", \"донесен\", \"донесена\", \"донесено\", \"донесены\", \"доношена\", \"доношено\", \"доношены\", \"допет\", \"допета\", \"допето\", \"допеты\", \"допечен\", \"допечена\", \"допечено\", \"допечены\", \"дописан\", \"дописана\", \"дописано\", \"дописаны\", \"допит\", \"допита\", \"допито\", \"допиты\", \"доплачен\", \"доплачена\", \"доплачено\", \"доплачены\", \"дополнен\", \"дополнена\", \"дополнено\", \"дополнены\", \"допрошен\", \"допрошена\", \"допрошено\", \"допрошены\", \"допущен\", \"допущена\", \"допущено\", \"допущены\", \"доработан\", \"доработана\", \"доработано\", \"доработаны\", \"дорисован\", \"дорисована\", \"дорисовано\", \"дорисованы\", \"досажен\", \"досажена\", \"досажено\", \"досажены\", \"досказан\", \"досказана\", \"досказано\", \"досказаны\", \"дослушан\", \"дослушана\", \"дослушано\", \"дослушаны\", \"досмотрен\", \"досмотрена\", \"досмотрено\", \"досмотрены\", \"доставлен\", \"доставлена\", \"доставлено\", \"доставлены\", \"достроен\", \"достроена\", \"достроено\", \"достроены\", \"досчитан\", \"досчитана\", \"досчитано\", \"досчитаны\", \"дотащен\", \"дотащена\", \"дотащено\", \"дотащены\", \"дотянут\", \"дотянута\", \"дотянуто\", \"дотянуты\", \"дочитан\", \"дочитана\", \"дочитано\", \"дочитаны\", \"драматизирован\", \"драматизирована\", \"драматизировано\", \"драматизированы\", \"дренирован\", \"дренирована\", \"дренировано\", \"дренированы\", \"дублирован\", \"дублирована\", \"дублировано\", \"дублированы\", \"жахнут\", \"жахнута\", \"жахнуто\", \"жахнуты\", \"заасфальтирован\", \"заасфальтирована\", \"заасфальтировано\", \"заасфальтированы\", \"забаррикадирован\", \"забаррикадирована\", \"забаррикадировано\", \"забаррикадированы\", \"забинтован\", \"забинтована\", \"забинтовано\", \"забинтованы\", \"забит\", \"забита\", \"забито\", \"забиты\", \"заблеван\", \"заблевана\", \"заблевано\", \"заблеваны\", \"заблокирован\", \"заблокирована\", \"заблокировано\", \"заблокированы\", \"заболочена\", \"заболочено\", \"заболочены\", \"заболтан\", \"заболтана\", \"заболтано\", \"заболтаны\", \"забракован\", \"забракована\", \"забраковано\", \"забракованы\", \"забран\", \"забрана\", \"забрано\", \"забраны\", \"забронирован\", \"забронирована\", \"забронировано\", \"забронированы\", \"забросан\", \"забросана\", \"забросано\", \"забросаны\", \"заброшен\", \"заброшена\", \"заброшено\", \"заброшены\", \"забрызган\", \"забрызгана\", \"забрызгано\", \"забрызганы\", \"завален\", \"завалена\", \"завалено\", \"завалены\", \"заварен\", \"заварена\", \"заварено\", \"заварены\", \"заведен\", \"заведена\", \"заведено\", \"заведены\", \"завезен\", \"завезена\", \"завезено\", \"завезены\", \"завербован\", \"завербована\", \"завербовано\", \"завербованы\", \"заверен\", \"заверена\", \"заверено\", \"заверены\", \"завернут\", \"завернута\", \"завернуто\", \"завернуты\", \"заверчен\", \"заверчена\", \"заверчено\", \"заверчены\", \"завершен\", \"завершена\", \"завершено\", \"завершены\", \"завешан\", \"завешана\", \"завешано\", \"завешаны\", \"завещан\", \"завещана\", \"завещано\", \"завещаны\", \"завиден\", \"завидена\", \"завидено\", \"завидены\", \"завизирован\", \"завизирована\", \"завизировано\", \"завизированы\", \"завинчен\", \"завинчена\", \"завинчено\", \"завинчены\", \"завит\", \"завита\", \"завито\", \"завиты\", \"завлечен\", \"завлечена\", \"завлечено\", \"завлечены\", \"завоеван\", \"завоевана\", \"завоевано\", \"завоеваны\", \"заворожен\", \"заворожена\", \"заворожено\", \"заворожены\", \"завуалирован\", \"завуалирована\", \"завуалировано\", \"завуалированы\", \"завышен\", \"завышена\", \"завышено\", \"завышены\", \"завязан\", \"завязана\", \"завязано\", \"завязаны\", \"загадан\", \"загадана\", \"загадано\", \"загаданы\", \"загажен\", \"загажена\", \"загажено\", \"загажены\", \"загашен\", \"загашена\", \"загашено\", \"загашены\", \"загипнотизирован\", \"загипнотизирована\", \"загипнотизировано\", \"загипнотизированы\", \"загипсован\", \"загипсована\", \"загипсовано\", \"загипсованы\", \"заглажен\", \"заглажена\", \"заглажено\", \"заглажены\", \"заглушен\", \"заглушена\", \"заглушено\", \"заглушены\", \"загнан\", \"загнана\", \"загнано\", \"загнаны\", \"загнут\", \"загнута\", \"загнуто\", \"загнуты\", \"заговорен\", \"заговорена\", \"заговорено\", \"заговорены\", \"загорожен\", \"загорожена\", \"загорожено\", \"загорожены\", \"заготовлен\", \"заготовлена\", \"заготовлено\", \"заготовлены\", \"заграбастан\", \"заграбастана\", \"заграбастано\", \"заграбастаны\", \"загребен\", \"загребена\", \"загребено\", \"загребены\", \"загримирован\", \"загримирована\", \"загримировано\", \"загримированы\", \"загромозжден\", \"загромозждена\", \"загромозждено\", \"загромозждены\", \"загружен\", \"загружена\", \"загружено\", \"загружены\", \"загрызен\", \"загрызена\", \"загрызено\", \"загрызены\", \"загрязнен\", \"загрязнена\", \"загрязнено\", \"загрязнены\", \"загублен\", \"загублена\", \"загублено\", \"загублены\", \"задавлен\", \"задавлена\", \"задавлено\", \"задавлены\", \"задвинут\", \"задвинута\", \"задвинуто\", \"задвинуты\", \"задействован\", \"задействована\", \"задействовано\", \"задействованы\", \"заделан\", \"заделана\", \"заделано\", \"заделаны\", \"задерган\", \"задергана\", \"задергано\", \"задерганы\", \"задержан\", \"задержана\", \"задержано\", \"задержаны\", \"задернут\", \"задернута\", \"задернуто\", \"задернуты\", \"задет\", \"задета\", \"задето\", \"задеты\", \"задобрен\", \"задобрена\", \"задобрено\", \"задобрены\", \"задолбан\", \"задолбана\", \"задолбано\", \"задолбаны\", \"задраен\", \"задраена\", \"задраено\", \"задраены\", \"задран\", \"задрана\", \"задрано\", \"задраны\", \"задрапирован\", \"задрапирована\", \"задрапировано\", \"задрапированы\", \"задуман\", \"задумана\", \"задумано\", \"задуманы\", \"задурен\", \"задурена\", \"задурено\", \"задурены\", \"задут\", \"задута\", \"задуто\", \"задуты\", \"задушен\", \"задушена\", \"задушено\", \"задушены\", \"задымлен\", \"задымлена\", \"задымлено\", \"задымлены\", \"заезжен\", \"заезжена\", \"заезжено\", \"заезжены\", \"зажарен\", \"зажарена\", \"зажарено\", \"зажарены\", \"зажат\", \"зажата\", \"зажато\", \"зажаты\", \"зажеван\", \"зажевана\", \"зажевано\", \"зажеваны\", \"зажит\", \"зажита\", \"зажито\", \"зажиты\", \"зажмурен\", \"зажмурена\", \"зажмурено\", \"зажмурены\", \"зазван\", \"зазвана\", \"зазвано\", \"зазваны\", \"заземлен\", \"заземлена\", \"заземлено\", \"заземлены\", \"зазубрен\", \"зазубрена\", \"зазубрено\", \"зазубрены\", \"заигран\", \"заиграна\", \"заиграно\", \"заиграны\", \"заимствован\", \"заимствована\", \"заимствовано\", \"заимствованы\", \"заинтересована\", \"заинтересовано\", \"заинтересованы\", \"заинтригована\", \"заинтриговано\", \"заинтригованы\", \"заказан\", \"заказана\", \"заказано\", \"заказаны\", \"закалена\", \"закалено\", \"закалены\", \"закамуфлирован\", \"закамуфлирована\", \"закамуфлировано\", \"закамуфлированы\", \"закапан\", \"закапана\", \"закапано\", \"закапаны\", \"закатан\", \"закатана\", \"закатано\", \"закатаны\", \"закачан\", \"закачана\", \"закачано\", \"закачаны\", \"закачен\", \"закачена\", \"закачено\", \"закачены\", \"закидан\", \"закидана\", \"закидано\", \"закиданы\", \"закинут\", \"закинута\", \"закинуто\", \"закинуты\", \"заклеван\", \"заклевана\", \"заклевано\", \"заклеваны\", \"заклеен\", \"заклеена\", \"заклеено\", \"заклеены\", \"заклеймен\", \"заклеймена\", \"заклеймено\", \"заклеймены\", \"заклинен\", \"заклинена\", \"заклинено\", \"заклинены\", \"заключен\", \"заключена\", \"заключено\", \"заключены\", \"закован\", \"закована\", \"заковано\", \"закованы\", \"закодирован\", \"закодирована\", \"закодировано\", \"закодированы\", \"заколдован\", \"заколдована\", \"заколдовано\", \"заколдованы\", \"заколот\", \"заколота\", \"заколото\", \"заколоты\", \"заколочен\", \"заколочена\", \"заколочено\", \"заколочены\", \"закольцеван\", \"закольцевана\", \"закольцевано\", \"закольцеваны\", \"законсервирован\", \"законсервирована\", \"законсервировано\", \"законсервированы\", \"законспирирован\", \"законспирирована\", \"законспирировано\", \"законспирированы\", \"закончен\", \"закончена\", \"закончено\", \"закончены\", \"закопан\", \"закопана\", \"закопано\", \"закопаны\", \"закопчен\", \"закопчена\", \"закопчено\", \"закопчены\", \"закошен\", \"закошена\", \"закошено\", \"закошены\", \"закрашен\", \"закрашена\", \"закрашено\", \"закрашены\", \"закреплен\", \"закреплена\", \"закреплено\", \"закреплены\", \"закроен\", \"закроена\", \"закроено\", \"закроены\", \"закруглен\", \"закруглена\", \"закруглено\", \"закруглены\", \"закручен\", \"закручена\", \"закручено\", \"закручены\", \"закрыт\", \"закрыта\", \"закрыто\", \"закрыты\", \"закуплен\", \"закуплена\", \"закуплено\", \"закуплены\", \"закупорен\", \"закупорена\", \"закупорено\", \"закупорены\", \"закурен\", \"закурена\", \"закурено\", \"закурены\", \"закутан\", \"закутана\", \"закутано\", \"закутаны\", \"залажен\", \"залажена\", \"залажено\", \"залажены\", \"залатан\", \"залатана\", \"залатано\", \"залатаны\", \"залеплен\", \"залеплена\", \"залеплено\", \"залеплены\", \"залечен\", \"залечена\", \"залечено\", \"залечены\", \"зализан\", \"зализана\", \"зализано\", \"зализаны\", \"залит\", \"залита\", \"залито\", \"залиты\", \"заложен\", \"заложена\", \"заложено\", \"заложены\", \"заломлен\", \"заломлена\", \"заломлено\", \"заломлены\", \"заляпан\", \"заляпана\", \"заляпано\", \"заляпаны\", \"замазан\", \"замазана\", \"замазано\", \"замазаны\", \"заманен\", \"заманена\", \"заманено\", \"заманены\", \"замаран\", \"замарана\", \"замарано\", \"замараны\", \"замаскирован\", \"замаскирована\", \"замаскировано\", \"замаскированы\", \"замаслен\", \"замаслена\", \"замаслено\", \"замаслены\", \"замедлен\", \"замедлена\", \"замедлено\", \"замедлены\", \"заменен\", \"заменена\", \"заменено\", \"заменены\", \"замерен\", \"замерена\", \"замерено\", \"замерены\", \"замерян\", \"замеряна\", \"замеряно\", \"замеряны\", \"заметан\", \"заметана\", \"заметано\", \"заметаны\", \"заметен\", \"заметена\", \"заметено\", \"заметены\", \"замечен\", \"замечена\", \"замечено\", \"замечены\", \"замешан\", \"замешана\", \"замешано\", \"замешаны\", \"замешен\", \"замешена\", \"замешено\", \"замешены\", \"замещен\", \"замещена\", \"замещено\", \"замещены\", \"заминирован\", \"заминирована\", \"заминировано\", \"заминированы\", \"замкнут\", \"замкнута\", \"замкнуто\", \"замкнуты\", \"замолвлен\", \"замолвлена\", \"замолвлено\", \"замолвлены\", \"замолчан\", \"замолчана\", \"замолчано\", \"замолчаны\", \"замордован\", \"замордована\", \"замордовано\", \"замордованы\", \"заморен\", \"заморена\", \"заморено\", \"заморены\", \"заморожен\", \"заморожена\", \"заморожено\", \"заморожены\", \"заморочен\", \"заморочена\", \"заморочено\", \"заморочены\", \"замотан\", \"замотана\", \"замотано\", \"замотаны\", \"замочен\", \"замочена\", \"замочено\", \"замочены\", \"замурован\", \"замурована\", \"замуровано\", \"замурованы\", \"замусолен\", \"замусолена\", \"замусолено\", \"замусолены\", \"замутнен\", \"замутнена\", \"замутнено\", \"замутнены\", \"замучан\", \"замучана\", \"замучано\", \"замучаны\", \"замучен\", \"замучена\", \"замучено\", \"замучены\", \"замыкан\", \"замыкана\", \"замыкано\", \"замыканы\", \"замыт\", \"замыта\", \"замыто\", \"замыты\", \"замыщлен\", \"замыщлена\", \"замыщлено\", \"замыщлены\", \"замят\", \"замята\", \"замято\", \"замяты\", \"занавешен\", \"занавешена\", \"занавешено\", \"занавешены\", \"занесен\", \"занесена\", \"занесено\", \"занесены\", \"занижен\", \"занижена\", \"занижено\", \"занижены\", \"заношен\", \"заношена\", \"заношено\", \"заношены\", \"занят\", \"занята\", \"занято\", \"заняты\", \"заострен\", \"заострена\", \"заострено\", \"заострены\", \"запакован\", \"запакована\", \"запаковано\", \"запакованы\", \"запален\", \"запалена\", \"запалено\", \"запалены\", \"запасен\", \"запасена\", \"запасено\", \"запасены\", \"запатентован\", \"запатентована\", \"запатентовано\", \"запатентованы\", \"запахнут\", \"запахнута\", \"запахнуто\", \"запахнуты\", \"запачкан\", \"запачкана\", \"запачкано\", \"запачканы\", \"запаян\", \"запаяна\", \"запаяно\", \"запаяны\", \"запеленан\", \"запеленана\", \"запеленано\", \"запеленаны\", \"запеленгован\", \"запеленгована\", \"запеленговано\", \"запеленгованы\", \"заперт\", \"заперта\", \"заперто\", \"заперты\", \"запечатан\", \"запечатана\", \"запечатано\", \"запечатаны\", \"запечатлен\", \"запечатлена\", \"запечатлено\", \"запечатлены\", \"запечен\", \"запечена\", \"запечено\", \"запечены\", \"записан\", \"записана\", \"записано\", \"записаны\", \"запит\", \"запита\", \"запито\", \"запиты\", \"запихан\", \"запихана\", \"запихано\", \"запиханы\", \"запихнут\", \"запихнута\", \"запихнуто\", \"запихнуты\", \"запланирован\", \"запланирована\", \"запланировано\", \"запланированы\", \"заплатан\", \"заплатана\", \"заплатано\", \"заплатаны\", \"заплачен\", \"заплачена\", \"заплачено\", \"заплачены\", \"заплеван\", \"заплевана\", \"заплевано\", \"заплеваны\", \"заплетен\", \"заплетена\", \"заплетено\", \"заплетены\", \"запломбирован\", \"запломбирована\", \"запломбировано\", \"запломбированы\", \"заподозрен\", \"заподозрена\", \"заподозрено\", \"заподозрены\", \"заполнен\", \"заполнена\", \"заполнено\", \"заполнены\", \"заполонен\", \"заполонена\", \"заполонено\", \"заполонены\", \"заполучен\", \"заполучена\", \"заполучено\", \"заполучены\", \"запомнен\", \"запомнена\", \"запомнено\", \"запомнены\", \"запорот\", \"запорота\", \"запорото\", \"запороты\", \"запорошен\", \"запорошена\", \"запорошено\", \"запорошены\", \"заправлен\", \"заправлена\", \"заправлено\", \"заправлены\", \"запрещен\", \"запрещена\", \"запрещено\", \"запрещены\", \"запримечен\", \"запримечена\", \"запримечено\", \"запримечены\", \"запрограммирован\", \"запрограммирована\", \"запрограммировано\", \"запрограммированы\", \"запроектирован\", \"запроектирована\", \"запроектировано\", \"запроектированы\", \"запрокинут\", \"запрокинута\", \"запрокинуто\", \"запрокинуты\", \"запротоколирован\", \"запротоколирована\", \"запротоколировано\", \"запротоколированы\", \"запрошен\", \"запрошена\", \"запрошено\", \"запрошены\", \"запружен\", \"запружена\", \"запружено\", \"запружены\", \"запряжен\", \"запряжена\", \"запряжено\", \"запряжены\", \"запрятан\", \"запрятана\", \"запрятано\", \"запрятаны\", \"запуган\", \"запугана\", \"запугано\", \"запуганы\", \"запудрен\", \"запудрена\", \"запудрено\", \"запудрены\", \"запутан\", \"запутана\", \"запутано\", \"запутаны\", \"запущен\", \"запущена\", \"запущено\", \"запущены\", \"запылен\", \"запылена\", \"запылено\", \"запылены\", \"запятнан\", \"запятнана\", \"запятнано\", \"запятнаны\", \"заработан\", \"заработана\", \"заработано\", \"заработаны\", \"заражен\", \"заражена\", \"заражено\", \"заражены\", \"зарегистрирован\", \"зарегистрирована\", \"зарегистрировано\", \"зарегистрированы\", \"зарезан\", \"зарезана\", \"зарезано\", \"зарезаны\", \"зарезервирован\", \"зарезервирована\", \"зарезервировано\", \"зарезервированы\", \"зарекомендован\", \"зарекомендована\", \"зарекомендовано\", \"зарекомендованы\", \"зарешечен\", \"зарешечена\", \"зарешечено\", \"зарешечены\", \"зарисован\", \"зарисована\", \"зарисовано\", \"зарисованы\", \"зарифмован\", \"зарифмована\", \"зарифмовано\", \"зарифмованы\", \"зарублен\", \"зарублена\", \"зарублено\", \"зарублены\", \"зарыт\", \"зарыта\", \"зарыто\", \"зарыты\", \"заряжен\", \"заряжена\", \"заряжено\", \"заряжены\", \"засажен\", \"засажена\", \"засажено\", \"засажены\", \"засахарен\", \"засахарена\", \"засахарено\", \"засахарены\", \"засвечен\", \"засвечена\", \"засвечено\", \"засвечены\", \"засвидетельствован\", \"засвидетельствована\", \"засвидетельствовано\", \"засвидетельствованы\", \"засекречен\", \"засекречена\", \"засекречено\", \"засекречены\", \"заселен\", \"заселена\", \"заселено\", \"заселены\", \"засечен\", \"засечена\", \"засечено\", \"засечены\", \"засеян\", \"засеяна\", \"засеяно\", \"засеяны\", \"засижен\", \"засижена\", \"засижено\", \"засижены\", \"заскребен\", \"заскребена\", \"заскребено\", \"заскребены\", \"заслан\", \"заслана\", \"заслано\", \"засланы\", \"заслонен\", \"заслонена\", \"заслонено\", \"заслонены\", \"заслужен\", \"заслужена\", \"заслужено\", \"заслужены\", \"заслушан\", \"заслушана\", \"заслушано\", \"заслушаны\", \"заслышан\", \"заслышана\", \"заслышано\", \"заслышаны\", \"засмеян\", \"засмеяна\", \"засмеяно\", \"засмеяны\", \"заснят\", \"заснята\", \"заснято\", \"засняты\", \"засолен\", \"засолена\", \"засолено\", \"засолены\", \"засорен\", \"засорена\", \"засорено\", \"засорены\", \"засосан\", \"засосана\", \"засосано\", \"засосаны\", \"заспиртован\", \"заспиртована\", \"заспиртовано\", \"заспиртованы\", \"заставлен\", \"заставлена\", \"заставлено\", \"заставлены\", \"застазастат\", \"застазастата\", \"застазастато\", \"застазастаты\", \"застегнут\", \"застегнута\", \"застегнуто\", \"застегнуты\", \"застелен\", \"застелена\", \"застелено\", \"застелены\", \"застигнут\", \"застигнута\", \"застигнуто\", \"застигнуты\", \"застиран\", \"застирана\", \"застирано\", \"застираны\", \"застолблен\", \"застолблена\", \"застолблено\", \"застолблены\", \"застопорен\", \"застопорена\", \"застопорено\", \"застопорены\", \"застрахован\", \"застрахована\", \"застраховано\", \"застрахованы\", \"застрелен\", \"застрелена\", \"застрелено\", \"застрелены\", \"застроен\", \"застроена\", \"застроено\", \"застроены\", \"застрочен\", \"застрочена\", \"застрочено\", \"застрочены\", \"застужен\", \"застужена\", \"застужено\", \"застужены\", \"застукан\", \"застукана\", \"застукано\", \"застуканы\", \"заступлен\", \"заступлена\", \"заступлено\", \"заступлены\", \"засужен\", \"засужена\", \"засужено\", \"засужены\", \"засунут\", \"засунута\", \"засунуто\", \"засунуты\", \"засучен\", \"засучена\", \"засучено\", \"засучены\", \"засушен\", \"засушена\", \"засушено\", \"засушены\", \"засчитан\", \"засчитана\", \"засчитано\", \"засчитаны\", \"затаен\", \"затаена\", \"затаено\", \"затаены\", \"затаскан\", \"затаскана\", \"затаскано\", \"затасканы\", \"затащен\", \"затащена\", \"затащено\", \"затащены\", \"затворен\", \"затворена\", \"затворено\", \"затворены\", \"затемнен\", \"затемнена\", \"затемнено\", \"затемнены\", \"затенен\", \"затенена\", \"затенено\", \"затенены\", \"затерт\", \"затерта\", \"затерто\", \"затерты\", \"затерян\", \"затеряна\", \"затеряно\", \"затеряны\", \"затеян\", \"затеяна\", \"затеяно\", \"затеяны\", \"заткнут\", \"заткнута\", \"заткнуто\", \"заткнуты\", \"затмлен\", \"затмлена\", \"затмлено\", \"затмлены\", \"затолкан\", \"затолкана\", \"затолкано\", \"затолканы\", \"затоплен\", \"затоплена\", \"затоплено\", \"затоплены\", \"затоптан\", \"затоптана\", \"затоптано\", \"затоптаны\", \"заторможен\", \"заторможена\", \"заторможено\", \"заторможены\", \"затороплен\", \"затороплена\", \"затороплено\", \"затороплены\", \"заточен\", \"заточена\", \"заточено\", \"заточены\", \"затошнен\", \"затошнена\", \"затошнено\", \"затошнены\", \"затравлен\", \"затравлена\", \"затравлено\", \"затравлены\", \"затрачен\", \"затрачена\", \"затрачено\", \"затрачены\", \"затребован\", \"затребована\", \"затребовано\", \"затребованы\", \"затронут\", \"затронута\", \"затронуто\", \"затронуты\", \"затруднен\", \"затруднена\", \"затруднено\", \"затруднены\", \"затуманен\", \"затуманена\", \"затуманено\", \"затуманены\", \"затушеван\", \"затушевана\", \"затушевано\", \"затушеваны\", \"затушен\", \"затушена\", \"затушено\", \"затушены\", \"затыкан\", \"затыкана\", \"затыкано\", \"затыканы\", \"затянут\", \"затянута\", \"затянуто\", \"затянуты\", \"заужен\", \"заужена\", \"заужено\", \"заужены\", \"заучен\", \"заучена\", \"заучено\", \"заучены\", \"зафиксирован\", \"зафиксирована\", \"зафиксировано\", \"зафиксированы\", \"зафрахтован\", \"зафрахтована\", \"зафрахтовано\", \"зафрахтованы\", \"захвачен\", \"захвачена\", \"захвачено\", \"захвачены\", \"захламлен\", \"захламлена\", \"захламлено\", \"захламлены\", \"захлестнут\", \"захлестнута\", \"захлестнуто\", \"захлестнуты\", \"захлопнут\", \"захлопнута\", \"захлопнуто\", \"захлопнуты\", \"захожен\", \"захожена\", \"захожено\", \"захожены\", \"захоронен\", \"захоронена\", \"захоронено\", \"захоронены\", \"зацеплен\", \"зацеплена\", \"зацеплено\", \"зацеплены\", \"зачарована\", \"зачаровано\", \"зачарованы\", \"зачат\", \"зачата\", \"зачато\", \"зачаты\", \"зачеркнут\", \"зачеркнута\", \"зачеркнуто\", \"зачеркнуты\", \"зачерпнут\", \"зачерпнута\", \"зачерпнуто\", \"зачерпнуты\", \"зачесан\", \"зачесана\", \"зачесано\", \"зачесаны\", \"зачехлен\", \"зачехлена\", \"зачехлено\", \"зачехлены\", \"зачислен\", \"зачислена\", \"зачислено\", \"зачислены\", \"зачитан\", \"зачитана\", \"зачитано\", \"зачитаны\", \"зачищен\", \"зачищена\", \"зачищено\", \"зачищены\", \"зачтен\", \"зачтена\", \"зачтено\", \"зачтены\", \"зашаркан\", \"зашаркана\", \"зашаркано\", \"зашарканы\", \"зашвырнут\", \"зашвырнута\", \"зашвырнуто\", \"зашвырнуты\", \"зашевелен\", \"зашевелена\", \"зашевелено\", \"зашевелены\", \"зашептан\", \"зашептана\", \"зашептано\", \"зашептаны\", \"зашит\", \"зашита\", \"зашито\", \"зашиты\", \"зашифрована\", \"зашифровано\", \"зашифрованы\", \"зашнурован\", \"зашнурована\", \"зашнуровано\", \"зашнурованы\", \"заштопан\", \"заштопана\", \"заштопано\", \"заштопаны\", \"зашторен\", \"зашторена\", \"зашторено\", \"зашторены\", \"заштрихован\", \"заштрихована\", \"заштриховано\", \"заштрихованы\", \"защелкнут\", \"защелкнута\", \"защелкнуто\", \"защелкнуты\", \"защемлен\", \"защемлена\", \"защемлено\", \"защемлены\", \"защипан\", \"защипана\", \"защипано\", \"защипаны\", \"защищен\", \"защищена\", \"защищено\", \"защищены\", \"заявлен\", \"заявлена\", \"заявлено\", \"заявлены\", \"звезданут\", \"звезданута\", \"звездануто\", \"звездануты\", \"идеализирован\", \"идеализирована\", \"идеализировано\", \"идеализированы\", \"идентифицирован\", \"идентифицирована\", \"идентифицировано\", \"идентифицированы\", \"избавлен\", \"избавлена\", \"избавлено\", \"избавлены\", \"избалован\", \"избалована\", \"избаловано\", \"избалованы\", \"избит\", \"избита\", \"избито\", \"избиты\", \"изборозжден\", \"изборозждена\", \"изборозждено\", \"изборозждены\", \"избран\", \"избрана\", \"избрано\", \"избраны\", \"изваян\", \"изваяна\", \"изваяно\", \"изваяны\", \"изведан\", \"изведана\", \"изведано\", \"изведаны\", \"извергнут\", \"извергнута\", \"извергнуто\", \"извергнуты\", \"извещен\", \"извещена\", \"извещено\", \"извещены\", \"извинен\", \"извинена\", \"извинено\", \"извинены\", \"извлечен\", \"извлечена\", \"извлечено\", \"извлечены\", \"извращен\", \"извращена\", \"извращено\", \"извращены\", \"изгажен\", \"изгажена\", \"изгажено\", \"изгажены\", \"изгнан\", \"изгнана\", \"изгнано\", \"изгнаны\", \"изготовлен\", \"изготовлена\", \"изготовлено\", \"изготовлены\", \"изгрызен\", \"изгрызена\", \"изгрызено\", \"изгрызены\", \"издерган\", \"издергана\", \"издергано\", \"издерганы\", \"изжарен\", \"изжарена\", \"изжарено\", \"изжарены\", \"изжит\", \"изжита\", \"изжито\", \"изжиты\", \"излажен\", \"излажена\", \"излажено\", \"излажены\", \"излечен\", \"излечена\", \"излечено\", \"излечены\", \"излит\", \"излита\", \"излито\", \"излиты\", \"изловлен\", \"изловлена\", \"изловлено\", \"изловлены\", \"изложен\", \"изложена\", \"изложено\", \"изложены\", \"изломан\", \"изломана\", \"изломано\", \"изломаны\", \"измазан\", \"измазана\", \"измазано\", \"измазаны\", \"измельчен\", \"измельчена\", \"измельчено\", \"измельчены\", \"изменен\", \"изменена\", \"изменено\", \"изменены\", \"измерен\", \"измерена\", \"измерено\", \"измерены\", \"измерян\", \"измеряна\", \"измеряно\", \"измеряны\", \"измотан\", \"измотана\", \"измотано\", \"измотаны\", \"измочален\", \"измочалена\", \"измочалено\", \"измочалены\", \"измучен\", \"измучена\", \"измучено\", \"измучены\", \"измышлен\", \"измышлена\", \"измышлено\", \"измышлены\", \"измят\", \"измята\", \"измято\", \"измяты\", \"изнасилован\", \"изнасилована\", \"изнасиловано\", \"изнасилованы\", \"изничтожен\", \"изничтожена\", \"изничтожено\", \"изничтожены\", \"изношен\", \"изношена\", \"изношено\", \"изношены\", \"изнурен\", \"изнурена\", \"изнурено\", \"изнурены\", \"изобличен\", \"изобличена\", \"изобличено\", \"изобличены\", \"изображен\", \"изображена\", \"изображено\", \"изображены\", \"изобретен\", \"изобретена\", \"изобретено\", \"изобретены\", \"изодран\", \"изодрана\", \"изодрано\", \"изодраны\", \"изолирован\", \"изолирована\", \"изолировано\", \"изолированы\", \"изорван\", \"изорвана\", \"изорвано\", \"изорваны\", \"изранен\", \"изранена\", \"изранено\", \"изранены\", \"израсходован\", \"израсходована\", \"израсходовано\", \"израсходованы\", \"изрезан\", \"изрезана\", \"изрезано\", \"изрезаны\", \"изречен\", \"изречена\", \"изречено\", \"изречены\", \"изрешечен\", \"изрешечена\", \"изрешечено\", \"изрешечены\", \"изрисован\", \"изрисована\", \"изрисовано\", \"изрисованы\", \"изрублен\", \"изрублена\", \"изрублено\", \"изрублены\", \"изрыт\", \"изрыта\", \"изрыто\", \"изрыты\", \"изувечен\", \"изувечена\", \"изувечено\", \"изувечены\", \"изукрашен\", \"изукрашена\", \"изукрашено\", \"изукрашены\", \"изумлен\", \"изумлена\", \"изумлено\", \"изумлены\", \"изуродован\", \"изуродована\", \"изуродовано\", \"изуродованы\", \"изучен\", \"изучена\", \"изучено\", \"изучены\", \"изъезжен\", \"изъезжена\", \"изъезжено\", \"изъезжены\", \"изъявлен\", \"изъявлена\", \"изъявлено\", \"изъявлены\", \"изъят\", \"изъята\", \"изъято\", \"изъяты\", \"изыскан\", \"изыскана\", \"изыскано\", \"изысканы\", \"иллюстрирован\", \"иллюстрирована\", \"иллюстрировано\", \"иллюстрированы\", \"иммобилизован\", \"иммобилизована\", \"иммобилизовано\", \"иммобилизованы\", \"иммунизирован\", \"иммунизирована\", \"иммунизировано\", \"иммунизированы\", \"импортирован\", \"импортирована\", \"импортировано\", \"импортированы\", \"инвестирован\", \"инвестирована\", \"инвестировано\", \"инвестированы\", \"индивидуализирован\", \"индивидуализирована\", \"индивидуализировано\", \"индивидуализированы\", \"индуцирован\", \"индуцирована\", \"индуцировано\", \"индуцированы\", \"инкорпорирован\", \"инкорпорирована\", \"инкорпорировано\", \"инкорпорированы\", \"инкриминирован\", \"инкриминирована\", \"инкриминировано\", \"инкриминированы\", \"инкрустирован\", \"инкрустирована\", \"инкрустировано\", \"инкрустированы\", \"инкубирован\", \"инкубирована\", \"инкубировано\", \"инкубированы\", \"инспирирован\", \"инспирирована\", \"инспирировано\", \"инспирированы\", \"инсценирован\", \"инсценирована\", \"инсценировано\", \"инсценированы\", \"интегрирован\", \"интегрирована\", \"интегрировано\", \"интегрированы\", \"интенсифицирован\", \"интенсифицирована\", \"интенсифицировано\", \"интенсифицированы\", \"интервьюирован\", \"интервьюирована\", \"интервьюировано\", \"интервьюированы\", \"интернирован\", \"интернирована\", \"интернировано\", \"интернированы\", \"интерпретирован\", \"интерпретирована\", \"интерпретировано\", \"интерпретированы\", \"интонирован\", \"интонирована\", \"интонировано\", \"интонированы\", \"инфицирован\", \"инфицирована\", \"инфицировано\", \"инфицированы\", \"информирован\", \"информирована\", \"информировано\", \"информированы\", \"искажен\", \"искажена\", \"искажено\", \"искажены\", \"искалечен\", \"искалечена\", \"искалечено\", \"искалечены\", \"исключен\", \"исключена\", \"исключено\", \"исключены\", \"исковеркан\", \"исковеркана\", \"исковеркано\", \"исковерканы\", \"исколот\", \"исколота\", \"исколото\", \"исколоты\", \"искорежен\", \"искорежена\", \"искорежено\", \"искорежены\", \"искоренен\", \"искоренена\", \"искоренено\", \"искоренены\", \"искривлен\", \"искривлена\", \"искривлено\", \"искривлены\", \"искромсан\", \"искромсана\", \"искромсано\", \"искромсаны\", \"искрошен\", \"искрошена\", \"искрошено\", \"искрошены\", \"искупан\", \"искупана\", \"искупано\", \"искупаны\", \"искуплен\", \"искуплена\", \"искуплено\", \"искуплены\", \"искусан\", \"искусана\", \"искусано\", \"искусаны\", \"искушен\", \"искушена\", \"искушено\", \"искушены\", \"испачкан\", \"испачкана\", \"испачкано\", \"испачканы\", \"испепелен\", \"испепелена\", \"испепелено\", \"испепелены\", \"испечен\", \"испечена\", \"испечено\", \"испечены\", \"испещрен\", \"испещрена\", \"испещрено\", \"испещрены\", \"исписан\", \"исписана\", \"исписано\", \"исписаны\", \"испит\", \"испита\", \"испито\", \"испиты\", \"исповедан\", \"исповедана\", \"исповедано\", \"исповеданы\", \"исповедован\", \"исповедована\", \"исповедовано\", \"исповедованы\", \"испоганен\", \"испоганена\", \"испоганено\", \"испоганены\", \"исполнен\", \"исполнена\", \"исполнено\", \"исполнены\", \"исполосован\", \"исполосована\", \"исполосовано\", \"исполосованы\", \"использован\", \"использована\", \"использовано\", \"использованы\", \"испорчен\", \"испорчена\", \"испорчено\", \"испорчены\", \"исправлен\", \"исправлена\", \"исправлено\", \"исправлены\", \"испробован\", \"испробована\", \"испробовано\", \"испробованы\", \"испрошен\", \"испрошена\", \"испрошено\", \"испрошены\", \"испуган\", \"испугана\", \"испугано\", \"испуганы\", \"испущен\", \"испущена\", \"испущено\", \"испущены\", \"испытан\", \"испытана\", \"испытано\", \"испытаны\", \"иссечен\", \"иссечена\", \"иссечено\", \"иссечены\", \"исследован\", \"исследована\", \"исследовано\", \"исследованы\", \"иссушен\", \"иссушена\", \"иссушено\", \"иссушены\", \"истерзан\", \"истерзана\", \"истерзано\", \"истерзаны\", \"истерт\", \"истерта\", \"истерто\", \"истерты\", \"истолкован\", \"истолкована\", \"истолковано\", \"истолкованы\", \"истончен\", \"истончена\", \"истончено\", \"истончены\", \"истоплен\", \"истоплена\", \"истоплено\", \"истоплены\", \"истоптан\", \"истоптана\", \"истоптано\", \"истоптаны\", \"исторгнут\", \"исторгнута\", \"исторгнуто\", \"исторгнуты\", \"источен\", \"источена\", \"источено\", \"источены\", \"истощен\", \"истощена\", \"истощено\", \"истощены\", \"истрачен\", \"истрачена\", \"истрачено\", \"истрачены\", \"истреблен\", \"истреблена\", \"истреблено\", \"истреблены\", \"истребован\", \"истребована\", \"истребовано\", \"истребованы\", \"истрепан\", \"истрепана\", \"истрепано\", \"истрепаны\", \"исхожен\", \"исхожена\", \"исхожено\", \"исхожены\", \"исцарапан\", \"исцарапана\", \"исцарапано\", \"исцарапаны\", \"исцелен\", \"исцелена\", \"исцелено\", \"исцелены\", \"исчеркан\", \"исчеркана\", \"исчеркано\", \"исчерканы\", \"исчерпан\", \"исчерпана\", \"исчерпано\", \"исчерпаны\", \"исчислен\", \"исчислена\", \"исчислено\", \"исчислены\", \"казнен\", \"казнена\", \"казнено\", \"казнены\", \"канонизирован\", \"канонизирована\", \"канонизировано\", \"канонизированы\", \"капитализирован\", \"капитализирована\", \"капитализировано\", \"капитализированы\", \"кастрирован\", \"кастрирована\", \"кастрировано\", \"кастрированы\", \"катализирован\", \"катализирована\", \"катализировано\", \"катализированы\", \"катапультирован\", \"катапультирована\", \"катапультировано\", \"катапультированы\", \"квалифицирован\", \"квалифицирована\", \"квалифицировано\", \"квалифицированы\", \"кинут\", \"кинута\", \"кинуто\", \"кинуты\", \"классифицирован\", \"классифицирована\", \"классифицировано\", \"классифицированы\", \"кликнут\", \"кликнута\", \"кликнуто\", \"кликнуты\", \"клюнут\", \"клюнута\", \"клюнуто\", \"клюнуты\", \"ковырнут\", \"ковырнута\", \"ковырнуто\", \"ковырнуты\", \"кодирован\", \"кодирована\", \"кодировано\", \"кодированы\", \"кокнут\", \"кокнута\", \"кокнуто\", \"кокнуты\", \"командирован\", \"командирована\", \"командировано\", \"командированы\", \"комиссован\", \"комиссована\", \"комиссовано\", \"комиссованы\", \"компенсирован\", \"компенсирована\", \"компенсировано\", \"компенсированы\", \"конвертирован\", \"конвертирована\", \"конвертировано\", \"конвертированы\", \"конденсирован\", \"конденсирована\", \"конденсировано\", \"конденсированы\", \"кондиционирован\", \"кондиционирована\", \"кондиционировано\", \"кондиционированы\", \"конкретизирован\", \"конкретизирована\", \"конкретизировано\", \"конкретизированы\", \"консолидирован\", \"консолидирована\", \"консолидировано\", \"консолидированы\", \"констатирован\", \"констатирована\", \"констатировано\", \"констатированы\", \"конституирован\", \"конституирована\", \"конституировано\", \"конституированы\", \"контратакован\", \"контратакована\", \"контратаковано\", \"контратакованы\", \"контужен\", \"контужена\", \"контужено\", \"контужены\", \"конфискован\", \"конфискована\", \"конфисковано\", \"конфискованы\", \"кончен\", \"кончена\", \"кончено\", \"кончены\", \"координирован\", \"координирована\", \"координировано\", \"координированы\", \"коронован\", \"коронована\", \"короновано\", \"коронованы\", \"коррумпирована\", \"коррумпировано\", \"коррумпированы\", \"кредитован\", \"кредитована\", \"кредитовано\", \"кредитованы\", \"кремирован\", \"кремирована\", \"кремировано\", \"кремированы\", \"крещен\", \"крещена\", \"крещено\", \"крещены\", \"куплен\", \"куплена\", \"куплено\", \"куплены\", \"курнут\", \"курнута\", \"курнуто\", \"курнуты\", \"куснут\", \"куснута\", \"куснуто\", \"куснуты\", \"легализован\", \"легализована\", \"легализовано\", \"легализованы\", \"легирован\", \"легирована\", \"легировано\", \"легированы\", \"ликвидирован\", \"ликвидирована\", \"ликвидировано\", \"ликвидированы\", \"лимитирован\", \"лимитирована\", \"лимитировано\", \"лимитированы\", \"лишен\", \"лишена\", \"лишено\", \"лишены\", \"лоббирован\", \"лоббирована\", \"лоббировано\", \"лоббированы\", \"локализован\", \"локализована\", \"локализовано\", \"локализованы\", \"лягнут\", \"лягнута\", \"лягнуто\", \"лягнуты\", \"маркирован\", \"маркирована\", \"маркировано\", \"маркированы\", \"массирован\", \"массирована\", \"массировано\", \"массированы\", \"материализован\", \"материализована\", \"материализовано\", \"материализованы\", \"механизирован\", \"механизирована\", \"механизировано\", \"механизированы\", \"минимизирован\", \"минимизирована\", \"минимизировано\", \"минимизированы\", \"минирован\", \"минирована\", \"минировано\", \"минированы\", \"минован\", \"минована\", \"миновано\", \"минованы\", \"мистифицирован\", \"мистифицирована\", \"мистифицировано\", \"мистифицированы\", \"мобилизован\", \"мобилизована\", \"мобилизовано\", \"мобилизованы\", \"моделирован\", \"моделирована\", \"моделировано\", \"моделированы\", \"модернизирован\", \"модернизирована\", \"модернизировано\", \"модернизированы\", \"модифицирован\", \"модифицирована\", \"модифицировано\", \"модифицированы\", \"монополизирован\", \"монополизирована\", \"монополизировано\", \"монополизированы\", \"мотивирована\", \"мотивировано\", \"мотивированы\", \"мотнут\", \"мотнута\", \"мотнуто\", \"мотнуты\", \"набеган\", \"набегана\", \"набегано\", \"набеганы\", \"набит\", \"набита\", \"набито\", \"набиты\", \"наболтан\", \"наболтана\", \"наболтано\", \"наболтаны\", \"набран\", \"набрана\", \"набрано\", \"набраны\", \"набросан\", \"набросана\", \"набросано\", \"набросаны\", \"наброшен\", \"наброшена\", \"наброшено\", \"наброшены\", \"навален\", \"навалена\", \"навалено\", \"навалены\", \"наварен\", \"наварена\", \"наварено\", \"наварены\", \"наведен\", \"наведена\", \"наведено\", \"наведены\", \"навезен\", \"навезена\", \"навезено\", \"навезены\", \"навернут\", \"навернута\", \"навернуто\", \"навернуты\", \"наверстан\", \"наверстана\", \"наверстано\", \"наверстаны\", \"навешан\", \"навешана\", \"навешано\", \"навешаны\", \"навешен\", \"навешена\", \"навешено\", \"навешены\", \"навещен\", \"навещена\", \"навещено\", \"навещены\", \"навеян\", \"навеяна\", \"навеяно\", \"навеяны\", \"навлечен\", \"навлечена\", \"навлечено\", \"навлечены\", \"наводнен\", \"наводнена\", \"наводнено\", \"наводнены\", \"наворован\", \"наворована\", \"наворовано\", \"наворованы\", \"наворочен\", \"наворочена\", \"наворочено\", \"наворочены\", \"навострен\", \"навострена\", \"навострено\", \"навострены\", \"навьючен\", \"навьючена\", \"навьючено\", \"навьючены\", \"навязан\", \"навязана\", \"навязано\", \"навязаны\", \"нагадан\", \"нагадана\", \"нагадано\", \"нагаданы\", \"нагажен\", \"нагажена\", \"нагажено\", \"нагажены\", \"нагнан\", \"нагнана\", \"нагнано\", \"нагнаны\", \"нагнут\", \"нагнута\", \"нагнуто\", \"нагнуты\", \"наговорен\", \"наговорена\", \"наговорено\", \"наговорены\", \"нагонян\", \"нагоняна\", \"нагоняно\", \"нагоняны\", \"наготовлен\", \"наготовлена\", \"наготовлено\", \"наготовлены\", \"награблен\", \"награблена\", \"награблено\", \"награблены\", \"награжден\", \"награждена\", \"награждено\", \"награждены\", \"нагрет\", \"нагрета\", \"нагрето\", \"нагреты\", \"нагромозжден\", \"нагромозждена\", \"нагромозждено\", \"нагромозждены\", \"нагружен\", \"нагружена\", \"нагружено\", \"нагружены\", \"нагулян\", \"нагуляна\", \"нагуляно\", \"нагуляны\", \"надавлен\", \"надавлена\", \"надавлено\", \"надавлены\", \"надвинут\", \"надвинута\", \"надвинуто\", \"надвинуты\", \"наделан\", \"наделана\", \"наделано\", \"наделаны\", \"надерган\", \"надергана\", \"надергано\", \"надерганы\", \"надет\", \"надета\", \"надето\", \"надеты\", \"надкушен\", \"надкушена\", \"надкушено\", \"надкушены\", \"надломлен\", \"надломлена\", \"надломлено\", \"надломлены\", \"надоен\", \"надоена\", \"надоено\", \"надоены\", \"надорван\", \"надорвана\", \"надорвано\", \"надорваны\", \"надоумлен\", \"надоумлена\", \"надоумлено\", \"надоумлены\", \"надписан\", \"надписана\", \"надписано\", \"надписаны\", \"надраен\", \"надраена\", \"надраено\", \"надраены\", \"надран\", \"надрана\", \"надрано\", \"надраны\", \"надрезан\", \"надрезана\", \"надрезано\", \"надрезаны\", \"надстроен\", \"надстроена\", \"надстроено\", \"надстроены\", \"надуман\", \"надумана\", \"надумано\", \"надуманы\", \"надут\", \"надута\", \"надуто\", \"надуты\", \"надушен\", \"надушена\", \"надушено\", \"надушены\", \"нажарен\", \"нажарена\", \"нажарено\", \"нажарены\", \"нажат\", \"нажата\", \"нажато\", \"нажаты\", \"нажит\", \"нажита\", \"нажито\", \"нажиты\", \"назван\", \"названа\", \"названо\", \"названы\", \"назначен\", \"назначена\", \"назначено\", \"назначены\", \"наигран\", \"наиграна\", \"наиграно\", \"наиграны\", \"наказан\", \"наказана\", \"наказано\", \"наказаны\", \"накален\", \"накалена\", \"накалено\", \"накалены\", \"накапан\", \"накапана\", \"накапано\", \"накапаны\", \"накаркан\", \"накаркана\", \"накаркано\", \"накарканы\", \"накатан\", \"накатана\", \"накатано\", \"накатаны\", \"накачан\", \"накачана\", \"накачано\", \"накачаны\", \"накачен\", \"накачена\", \"накачено\", \"накачены\", \"накидан\", \"накидана\", \"накидано\", \"накиданы\", \"накинут\", \"накинута\", \"накинуто\", \"накинуты\", \"наклеен\", \"наклеена\", \"наклеено\", \"наклеены\", \"накликан\", \"накликана\", \"накликано\", \"накликаны\", \"наклонен\", \"наклонена\", \"наклонено\", \"наклонены\", \"наковырян\", \"наковыряна\", \"наковыряно\", \"наковыряны\", \"наколот\", \"наколота\", \"наколото\", \"наколоты\", \"накопан\", \"накопана\", \"накопано\", \"накопаны\", \"накоплен\", \"накоплена\", \"накоплено\", \"накоплены\", \"накормлен\", \"накормлена\", \"накормлено\", \"накормлены\", \"накостылян\", \"накостыляна\", \"накостыляно\", \"накостыляны\", \"накошен\", \"накошена\", \"накошено\", \"накошены\", \"накрахмален\", \"накрахмалена\", \"накрахмалено\", \"накрахмалены\", \"накрашен\", \"накрашена\", \"накрашено\", \"накрашены\", \"накрошен\", \"накрошена\", \"накрошено\", \"накрошены\", \"накручен\", \"накручена\", \"накручено\", \"накручены\", \"накрыт\", \"накрыта\", \"накрыто\", \"накрыты\", \"накуплен\", \"накуплена\", \"накуплено\", \"накуплены\", \"накурен\", \"накурена\", \"накурено\", \"накурены\", \"налажен\", \"налажена\", \"налажено\", \"налажены\", \"налеплен\", \"налеплена\", \"налеплено\", \"налеплены\", \"налетан\", \"налетана\", \"налетано\", \"налетаны\", \"налит\", \"налита\", \"налито\", \"налиты\", \"наловлен\", \"наловлена\", \"наловлено\", \"наловлены\", \"наложен\", \"наложена\", \"наложено\", \"наложены\", \"наломан\", \"наломана\", \"наломано\", \"наломаны\", \"намагничен\", \"намагничена\", \"намагничено\", \"намагничены\", \"намазан\", \"намазана\", \"намазано\", \"намазаны\", \"намалеван\", \"намалевана\", \"намалевано\", \"намалеваны\", \"наметан\", \"наметана\", \"наметано\", \"наметаны\", \"наметен\", \"наметена\", \"наметено\", \"наметены\", \"намечен\", \"намечена\", \"намечено\", \"намечены\", \"намешан\", \"намешана\", \"намешано\", \"намешаны\", \"намозолен\", \"намозолена\", \"намозолено\", \"намозолены\", \"наморщен\", \"наморщена\", \"наморщено\", \"наморщены\", \"намотан\", \"намотана\", \"намотано\", \"намотаны\", \"намочен\", \"намочена\", \"намочено\", \"намочены\", \"намылен\", \"намылена\", \"намылено\", \"намылены\", \"намыт\", \"намыта\", \"намыто\", \"намыты\", \"намят\", \"намята\", \"намято\", \"намяты\", \"нанесен\", \"нанесена\", \"нанесено\", \"нанесены\", \"нанизан\", \"нанизана\", \"нанизано\", \"нанизаны\", \"наношен\", \"наношена\", \"наношено\", \"наношены\", \"нанят\", \"нанята\", \"нанято\", \"наняты\", \"напет\", \"напета\", \"напето\", \"напеты\", \"напечатан\", \"напечатана\", \"напечатано\", \"напечатаны\", \"напечен\", \"напечена\", \"напечено\", \"напечены\", \"напилен\", \"напилена\", \"напилено\", \"напилены\", \"написан\", \"написана\", \"написано\", \"написаны\", \"напитан\", \"напитана\", \"напитано\", \"напитаны\", \"напихан\", \"напихана\", \"напихано\", \"напиханы\", \"напичкан\", \"напичкана\", \"напичкано\", \"напичканы\", \"наплакан\", \"наплакана\", \"наплакано\", \"наплаканы\", \"наплеван\", \"наплевана\", \"наплевано\", \"наплеваны\", \"наплетен\", \"наплетена\", \"наплетено\", \"наплетены\", \"напложен\", \"напложена\", \"напложено\", \"напложены\", \"напоен\", \"напоена\", \"напоено\", \"напоены\", \"наползан\", \"наползана\", \"наползано\", \"наползаны\", \"наполнен\", \"наполнена\", \"наполнено\", \"наполнены\", \"напомажен\", \"напомажена\", \"напомажено\", \"напомажены\", \"напомнен\", \"напомнена\", \"напомнено\", \"напомнены\", \"напорчен\", \"напорчена\", \"напорчено\", \"напорчены\", \"направлен\", \"направлена\", \"направлено\", \"направлены\", \"напророчен\", \"напророчена\", \"напророчено\", \"напророчены\", \"напряжен\", \"напряжена\", \"напряжено\", \"напряжены\", \"напуган\", \"напугана\", \"напугано\", \"напуганы\", \"напудрен\", \"напудрена\", \"напудрено\", \"напудрены\", \"напутан\", \"напутана\", \"напутано\", \"напутаны\", \"напутствован\", \"напутствована\", \"напутствовано\", \"напутствованы\", \"напущен\", \"напущена\", \"напущено\", \"напущены\", \"напялен\", \"напялена\", \"напялено\", \"напялены\", \"наработан\", \"наработана\", \"наработано\", \"наработаны\", \"наращен\", \"наращена\", \"наращено\", \"наращены\", \"нарезан\", \"нарезана\", \"нарезано\", \"нарезаны\", \"наречен\", \"наречена\", \"наречено\", \"наречены\", \"нарисован\", \"нарисована\", \"нарисовано\", \"нарисованы\", \"нарожден\", \"нарождена\", \"нарождено\", \"нарождены\", \"нарублен\", \"нарублена\", \"нарублено\", \"нарублены\", \"нарушен\", \"нарушена\", \"нарушено\", \"нарушены\", \"нарыт\", \"нарыта\", \"нарыто\", \"нарыты\", \"наряжен\", \"наряжена\", \"наряжено\", \"наряжены\", \"насажден\", \"насаждена\", \"насаждено\", \"насаждены\", \"насажен\", \"насажена\", \"насажено\", \"насажены\", \"населен\", \"населена\", \"населено\", \"населены\", \"насижен\", \"насижена\", \"насижено\", \"насижены\", \"наскребен\", \"наскребена\", \"наскребено\", \"наскребены\", \"наслан\", \"наслана\", \"наслано\", \"насланы\", \"наследован\", \"наследована\", \"наследовано\", \"наследованы\", \"насмешен\", \"насмешена\", \"насмешено\", \"насмешены\", \"насобиран\", \"насобирана\", \"насобирано\", \"насобираны\", \"насован\", \"насована\", \"насовано\", \"насованы\", \"насолен\", \"насолена\", \"насолено\", \"насолены\", \"наставлен\", \"наставлена\", \"наставлено\", \"наставлены\", \"настелен\", \"настелена\", \"настелено\", \"настелены\", \"настигнут\", \"настигнута\", \"настигнуто\", \"настигнуты\", \"настоян\", \"настояна\", \"настояно\", \"настояны\", \"настроен\", \"настроена\", \"настроено\", \"настроены\", \"настрочен\", \"настрочена\", \"настрочено\", \"настрочены\", \"насуплен\", \"насуплена\", \"насуплено\", \"насуплены\", \"насчитан\", \"насчитана\", \"насчитано\", \"насчитаны\", \"насыщен\", \"насыщена\", \"насыщено\", \"насыщены\", \"натаскан\", \"натаскана\", \"натаскано\", \"натасканы\", \"натерт\", \"натерта\", \"натерто\", \"натерты\", \"натолкнут\", \"натолкнута\", \"натолкнуто\", \"натолкнуты\", \"натоплен\", \"натоплена\", \"натоплено\", \"натоплены\", \"натоптан\", \"натоптана\", \"натоптано\", \"натоптаны\", \"наточен\", \"наточена\", \"наточено\", \"наточены\", \"натравлен\", \"натравлена\", \"натравлено\", \"натравлены\", \"натренирован\", \"натренирована\", \"натренировано\", \"натренированы\", \"натружен\", \"натружена\", \"натружено\", \"натружены\", \"натыкан\", \"натыкана\", \"натыкано\", \"натыканы\", \"натянут\", \"натянута\", \"натянуто\", \"натянуты\", \"научен\", \"научена\", \"научено\", \"научены\", \"нафарширован\", \"нафарширована\", \"нафаршировано\", \"нафаршированы\", \"нахлобучен\", \"нахлобучена\", \"нахлобучено\", \"нахлобучены\", \"нахмурен\", \"нахмурена\", \"нахмурено\", \"нахмурены\", \"нахожен\", \"нахожена\", \"нахожено\", \"нахожены\", \"нахохлен\", \"нахохлена\", \"нахохлено\", \"нахохлены\", \"нацарапан\", \"нацарапана\", \"нацарапано\", \"нацарапаны\", \"нацежен\", \"нацежена\", \"нацежено\", \"нацежены\", \"нацелен\", \"нацелена\", \"нацелено\", \"нацелены\", \"нацеплен\", \"нацеплена\", \"нацеплено\", \"нацеплены\", \"национализирован\", \"национализирована\", \"национализировано\", \"национализированы\", \"начат\", \"начата\", \"начато\", \"начаты\", \"начертан\", \"начертана\", \"начертано\", \"начертаны\", \"начерчен\", \"начерчена\", \"начерчено\", \"начерчены\", \"начинен\", \"начинена\", \"начинено\", \"начинены\", \"начислен\", \"начислена\", \"начислено\", \"начислены\", \"начищен\", \"начищена\", \"начищено\", \"начищены\", \"нашарен\", \"нашарена\", \"нашарено\", \"нашарены\", \"нашептан\", \"нашептана\", \"нашептано\", \"нашептаны\", \"нашинкован\", \"нашинкована\", \"нашинковано\", \"нашинкованы\", \"нашит\", \"нашита\", \"нашито\", \"нашиты\", \"нашпигован\", \"нашпигована\", \"нашпиговано\", \"нашпигованы\", \"нащупан\", \"нащупана\", \"нащупано\", \"нащупаны\", \"наэлектризован\", \"наэлектризована\", \"наэлектризовано\", \"наэлектризованы\", \"невзлюблен\", \"невзлюблена\", \"невзлюблено\", \"невзлюблены\", \"недогляжен\", \"недогляжена\", \"недогляжено\", \"недогляжены\", \"недоговорен\", \"недоговорена\", \"недоговорено\", \"недоговорены\", \"недоделан\", \"недоделана\", \"недоделано\", \"недоделаны\", \"недооценен\", \"недооценена\", \"недооценено\", \"недооценены\", \"недопит\", \"недопита\", \"недопито\", \"недопиты\", \"недоплачен\", \"недоплачена\", \"недоплачено\", \"недоплачены\", \"недополучен\", \"недополучена\", \"недополучено\", \"недополучены\", \"недопонят\", \"недопонята\", \"недопонято\", \"недопоняты\", \"недосказан\", \"недосказана\", \"недосказано\", \"недосказаны\", \"недослышан\", \"недослышана\", \"недослышано\", \"недослышаны\", \"недосмотрен\", \"недосмотрена\", \"недосмотрено\", \"недосмотрены\", \"опосредован\", \"опосредована\", \"опосредовано\", \"опосредованы\", \"оптимизирован\", \"оптимизирована\", \"оптимизировано\", \"оптимизированы\", \"отслежен\", \"отслежена\", \"отслежено\", \"отслежены\", \"перечеркнут\", \"перечеркнута\", \"перечеркнуто\", \"перечеркнуты\", \"перечислен\", \"перечислена\", \"перечислено\", \"перечислены\", \"перечитан\", \"перечитана\", \"перечитано\", \"перечитаны\", \"перечтен\", \"перечтена\", \"перечтено\", \"перечтены\", \"перешит\", \"перешита\", \"перешито\", \"перешиты\", \"персонифицирован\", \"персонифицирована\", \"персонифицировано\", \"персонифицированы\", \"пикирован\", \"пикирована\", \"пикировано\", \"пикированы\", \"пленен\", \"пленена\", \"пленено\", \"пленены\", \"плеснут\", \"плеснута\", \"плеснуто\", \"плеснуты\", \"пнут\", \"пнута\", \"пнуто\", \"пнуты\", \"побалован\", \"побалована\", \"побаловано\", \"побалованы\", \"побежден\", \"побеждена\", \"побеждено\", \"побеждены\", \"побелен\", \"побелена\", \"побелено\", \"побелены\", \"побережен\", \"побережена\", \"побережено\", \"побережены\", \"побеспокоен\", \"побеспокоена\", \"побеспокоено\", \"побеспокоены\", \"побит\", \"побита\", \"побито\", \"побиты\", \"поблагодарен\", \"поблагодарена\", \"поблагодарено\", \"поблагодарены\", \"побрит\", \"побрита\", \"побрито\", \"побриты\", \"побросан\", \"побросана\", \"побросано\", \"побросаны\", \"побужден\", \"побуждена\", \"побуждено\", \"побуждены\", \"побужен\", \"побужена\", \"побужено\", \"побужены\", \"повален\", \"повалена\", \"повалено\", \"повалены\", \"поведан\", \"поведана\", \"поведано\", \"поведаны\", \"поведен\", \"поведена\", \"поведено\", \"поведены\", \"повезен\", \"повезена\", \"повезено\", \"повезены\", \"повенчан\", \"повенчана\", \"повенчано\", \"повенчаны\", \"повергнут\", \"повергнута\", \"повергнуто\", \"повергнуты\", \"поверен\", \"поверена\", \"поверено\", \"поверены\", \"повернут\", \"повернута\", \"повернуто\", \"повернуты\", \"поверчен\", \"поверчена\", \"поверчено\", \"поверчены\", \"повешен\", \"повешена\", \"повешено\", \"повешены\", \"повеян\", \"повеяна\", \"повеяно\", \"повеяны\", \"повидан\", \"повидана\", \"повидано\", \"повиданы\", \"поврежден\", \"повреждена\", \"повреждено\", \"повреждены\", \"повторен\", \"повторена\", \"повторено\", \"повторены\", \"повышен\", \"повышена\", \"повышено\", \"повышены\", \"повязан\", \"повязана\", \"повязано\", \"повязаны\", \"погашен\", \"погашена\", \"погашено\", \"погашены\", \"поглажен\", \"поглажена\", \"поглажено\", \"поглажены\", \"поглощен\", \"поглощена\", \"поглощено\", \"поглощены\", \"погнут\", \"погнута\", \"погнуто\", \"погнуты\", \"пограблен\", \"пограблена\", \"пограблено\", \"пограблены\", \"погребен\", \"погребена\", \"погребено\", \"погребены\", \"погрет\", \"погрета\", \"погрето\", \"погреты\", \"погружен\", \"погружена\", \"погружено\", \"погружены\", \"погрызен\", \"погрызена\", \"погрызено\", \"погрызены\", \"погублен\", \"погублена\", \"погублено\", \"погублены\", \"подавлен\", \"подавлена\", \"подавлено\", \"подавлены\", \"подарен\", \"подарена\", \"подарено\", \"подарены\", \"подбит\", \"подбита\", \"подбито\", \"подбиты\", \"подбодрен\", \"подбодрена\", \"подбодрено\", \"подбодрены\", \"подброшен\", \"подброшена\", \"подброшено\", \"подброшены\", \"подвален\", \"подвалена\", \"подвалено\", \"подвалены\", \"подведен\", \"подведена\", \"подведено\", \"подведены\", \"подвезен\", \"подвезена\", \"подвезено\", \"подвезены\", \"подвергнут\", \"подвергнута\", \"подвергнуто\", \"подвергнуты\", \"подвернут\", \"подвернута\", \"подвернуто\", \"подвернуты\", \"подвешен\", \"подвешена\", \"подвешено\", \"подвешены\", \"подвигнут\", \"подвигнута\", \"подвигнуто\", \"подвигнуты\", \"подвинут\", \"подвинута\", \"подвинуто\", \"подвинуты\", \"подвязан\", \"подвязана\", \"подвязано\", \"подвязаны\", \"подгляжен\", \"подгляжена\", \"подгляжено\", \"подгляжены\", \"подговорен\", \"подговорена\", \"подговорено\", \"подговорены\", \"подготовлен\", \"подготовлена\", \"подготовлено\", \"подготовлены\", \"подделан\", \"подделана\", \"подделано\", \"подделаны\", \"поддержан\", \"поддержана\", \"поддержано\", \"поддержаны\", \"поддернут\", \"поддернута\", \"поддернуто\", \"поддернуты\", \"поддет\", \"поддета\", \"поддето\", \"поддеты\", \"поделен\", \"поделена\", \"поделено\", \"поделены\", \"подерган\", \"подергана\", \"подергано\", \"подерганы\", \"подержан\", \"подержана\", \"подержано\", \"подержаны\", \"подернут\", \"подернута\", \"подернуто\", \"подернуты\", \"поджарен\", \"поджарена\", \"поджарено\", \"поджарены\", \"поджат\", \"поджата\", \"поджато\", \"поджаты\", \"подзаработан\", \"подзаработана\", \"подзаработано\", \"подзаработаны\", \"подкараулен\", \"подкараулена\", \"подкараулено\", \"подкараулены\", \"подкачан\", \"подкачана\", \"подкачано\", \"подкачаны\", \"подкачен\", \"подкачена\", \"подкачено\", \"подкачены\", \"подкинут\", \"подкинута\", \"подкинуто\", \"подкинуты\", \"подклеен\", \"подклеена\", \"подклеено\", \"подклеены\", \"подключен\", \"подключена\", \"подключено\", \"подключены\", \"подкован\", \"подкована\", \"подковано\", \"подкованы\", \"подколот\", \"подколота\", \"подколото\", \"подколоты\", \"подкоплен\", \"подкоплена\", \"подкоплено\", \"подкоплены\", \"подкормлен\", \"подкормлена\", \"подкормлено\", \"подкормлены\", \"подкошен\", \"подкошена\", \"подкошено\", \"подкошены\", \"подкрашен\", \"подкрашена\", \"подкрашено\", \"подкрашены\", \"подкреплен\", \"подкреплена\", \"подкреплено\", \"подкреплены\", \"подкручен\", \"подкручена\", \"подкручено\", \"подкручены\", \"подкуплен\", \"подкуплена\", \"подкуплено\", \"подкуплены\", \"подлатан\", \"подлатана\", \"подлатано\", \"подлатаны\", \"подлечен\", \"подлечена\", \"подлечено\", \"подлечены\", \"подлит\", \"подлита\", \"подлито\", \"подлиты\", \"подловлен\", \"подловлена\", \"подловлено\", \"подловлены\", \"подложен\", \"подложена\", \"подложено\", \"подложены\", \"подмазан\", \"подмазана\", \"подмазано\", \"подмазаны\", \"подменен\", \"подменена\", \"подменено\", \"подменены\", \"подметан\", \"подметана\", \"подметано\", \"подметаны\", \"подметен\", \"подметена\", \"подметено\", \"подметены\", \"подмечен\", \"подмечена\", \"подмечено\", \"подмечены\", \"подмешан\", \"подмешана\", \"подмешано\", \"подмешаны\", \"подморожен\", \"подморожена\", \"подморожено\", \"подморожены\", \"подмочен\", \"подмочена\", \"подмочено\", \"подмочены\", \"подмыт\", \"подмыта\", \"подмыто\", \"подмыты\", \"подмят\", \"подмята\", \"подмято\", \"подмяты\", \"поднажат\", \"поднажата\", \"поднажато\", \"поднажаты\", \"поднесен\", \"поднесена\", \"поднесено\", \"поднесены\", \"подновлен\", \"подновлена\", \"подновлено\", \"подновлены\", \"подношен\", \"подношена\", \"подношено\", \"подношены\", \"поднят\", \"поднята\", \"поднято\", \"подняты\", \"подобран\", \"подобрана\", \"подобрано\", \"подобраны\", \"подогнан\", \"подогнана\", \"подогнано\", \"подогнаны\", \"подогнут\", \"подогнута\", \"подогнуто\", \"подогнуты\", \"подогрет\", \"подогрета\", \"подогрето\", \"подогреты\", \"пододвинут\", \"пододвинута\", \"пододвинуто\", \"пододвинуты\", \"подоен\", \"подоена\", \"подоено\", \"подоены\", \"подожжен\", \"подожжена\", \"подожжено\", \"подожжены\", \"подозван\", \"подозвана\", \"подозвано\", \"подозваны\", \"подорван\", \"подорвана\", \"подорвано\", \"подорваны\", \"подослан\", \"подослана\", \"подослано\", \"подосланы\", \"подоткнут\", \"подоткнута\", \"подоткнуто\", \"подоткнуты\", \"подпален\", \"подпалена\", \"подпалено\", \"подпалены\", \"подперт\", \"подперта\", \"подперто\", \"подперты\", \"подпилен\", \"подпилена\", \"подпилено\", \"подпилены\", \"подписан\", \"подписана\", \"подписано\", \"подписаны\", \"подпорчен\", \"подпорчена\", \"подпорчено\", \"подпорчены\", \"подпоясан\", \"подпоясана\", \"подпоясано\", \"подпоясаны\", \"подправлен\", \"подправлена\", \"подправлено\", \"подправлены\", \"подпущен\", \"подпущена\", \"подпущено\", \"подпущены\", \"подразделен\", \"подразделена\", \"подразделено\", \"подразделены\", \"подран\", \"подрана\", \"подрано\", \"подраны\", \"подрезан\", \"подрезана\", \"подрезано\", \"подрезаны\", \"подровнян\", \"подровняна\", \"подровняно\", \"подровняны\", \"подрублен\", \"подрублена\", \"подрублено\", \"подрублены\", \"подрулен\", \"подрулена\", \"подрулено\", \"подрулены\", \"подрумянен\", \"подрумянена\", \"подрумянено\", \"подрумянены\", \"подсажен\", \"подсажена\", \"подсажено\", \"подсажены\", \"подсвечен\", \"подсвечена\", \"подсвечено\", \"подсвечены\", \"подселен\", \"подселена\", \"подселено\", \"подселены\", \"подсечен\", \"подсечена\", \"подсечено\", \"подсечены\", \"подсказан\", \"подсказана\", \"подсказано\", \"подсказаны\", \"подслащен\", \"подслащена\", \"подслащено\", \"подслащены\", \"подслушан\", \"подслушана\", \"подслушано\", \"подслушаны\", \"подсмотрен\", \"подсмотрена\", \"подсмотрено\", \"подсмотрены\", \"подсоединен\", \"подсоединена\", \"подсоединено\", \"подсоединены\", \"подсолен\", \"подсолена\", \"подсолено\", \"подсолены\", \"подставлен\", \"подставлена\", \"подставлено\", \"подставлены\", \"подстегнут\", \"подстегнута\", \"подстегнуто\", \"подстегнуты\", \"подстелен\", \"подстелена\", \"подстелено\", \"подстелены\", \"подстережен\", \"подстережена\", \"подстережено\", \"подстережены\", \"подстрелен\", \"подстрелена\", \"подстрелено\", \"подстрелены\", \"подстрижен\", \"подстрижена\", \"подстрижено\", \"подстрижены\", \"подстроен\", \"подстроена\", \"подстроено\", \"подстроены\", \"подсунут\", \"подсунута\", \"подсунуто\", \"подсунуты\", \"подсушен\", \"подсушена\", \"подсушено\", \"подсушены\", \"подсчитан\", \"подсчитана\", \"подсчитано\", \"подсчитаны\", \"подтащен\", \"подтащена\", \"подтащено\", \"подтащены\", \"подтвержден\", \"подтверждена\", \"подтверждено\", \"подтверждены\", \"подтолкнут\", \"подтолкнута\", \"подтолкнуто\", \"подтолкнуты\", \"подточен\", \"подточена\", \"подточено\", \"подточены\", \"подтыкан\", \"подтыкана\", \"подтыкано\", \"подтыканы\", \"подтянут\", \"подтянута\", \"подтянуто\", \"подтянуты\", \"подучен\", \"подучена\", \"подучено\", \"подучены\", \"подхвачен\", \"подхвачена\", \"подхвачено\", \"подхвачены\", \"подцеплен\", \"подцеплена\", \"подцеплено\", \"подцеплены\", \"подчеркнут\", \"подчеркнута\", \"подчеркнуто\", \"подчеркнуты\", \"подчинен\", \"подчинена\", \"подчинено\", \"подчинены\", \"подчищен\", \"подчищена\", \"подчищено\", \"подчищены\", \"подшит\", \"подшита\", \"подшито\", \"подшиты\", \"подыгран\", \"подыграна\", \"подыграно\", \"подыграны\", \"подытожен\", \"подытожена\", \"подытожено\", \"подытожены\", \"пожалован\", \"пожалована\", \"пожаловано\", \"пожалованы\", \"пожарен\", \"пожарена\", \"пожарено\", \"пожарены\", \"пожат\", \"пожата\", \"пожато\", \"пожаты\", \"пожеван\", \"пожевана\", \"пожевано\", \"пожеваны\", \"пожертвован\", \"пожертвована\", \"пожертвовано\", \"пожертвованы\", \"пожран\", \"пожрана\", \"пожрано\", \"пожраны\", \"пожурен\", \"пожурена\", \"пожурено\", \"пожурены\", \"позабавлен\", \"позабавлена\", \"позабавлено\", \"позабавлены\", \"позаимствован\", \"позаимствована\", \"позаимствовано\", \"позаимствованы\", \"позван\", \"позвана\", \"позвано\", \"позваны\", \"позволен\", \"позволена\", \"позволено\", \"позволены\", \"поздравлен\", \"поздравлена\", \"поздравлено\", \"поздравлены\", \"позиционирован\", \"позиционирована\", \"позиционировано\", \"позиционированы\", \"познакомлен\", \"познакомлена\", \"познакомлено\", \"познакомлены\", \"познан\", \"познана\", \"познано\", \"познаны\", \"позолочен\", \"позолочена\", \"позолочено\", \"позолочены\", \"поигран\", \"поиграна\", \"поиграно\", \"поиграны\", \"поименован\", \"поименована\", \"поименовано\", \"поименованы\", \"пойман\", \"поймана\", \"поймано\", \"пойманы\", \"показан\", \"показана\", \"показано\", \"показаны\", \"покалечен\", \"покалечена\", \"покалечено\", \"покалечены\", \"покатан\", \"покатана\", \"покатано\", \"покатаны\", \"покачан\", \"покачана\", \"покачано\", \"покачаны\", \"покачен\", \"покачена\", \"покачено\", \"покачены\", \"покидан\", \"покидана\", \"покидано\", \"покиданы\", \"покинут\", \"покинута\", \"покинуто\", \"покинуты\", \"поклеван\", \"поклевана\", \"поклевано\", \"поклеваны\", \"поколебан\", \"поколебана\", \"поколебано\", \"поколебаны\", \"поколочен\", \"поколочена\", \"поколочено\", \"поколочены\", \"покончен\", \"покончена\", \"покончено\", \"покончены\", \"покорежен\", \"покорежена\", \"покорежено\", \"покорежены\", \"покорен\", \"покорена\", \"покорено\", \"покорены\", \"покормлен\", \"покормлена\", \"покормлено\", \"покормлены\", \"покороблен\", \"покороблена\", \"покороблено\", \"покороблены\", \"покошен\", \"покошена\", \"покошено\", \"покошены\", \"покрашен\", \"покрашена\", \"покрашено\", \"покрашены\", \"покривлен\", \"покривлена\", \"покривлено\", \"покривлены\", \"покритикован\", \"покритикована\", \"покритиковано\", \"покритикованы\", \"покрошен\", \"покрошена\", \"покрошено\", \"покрошены\", \"покружен\", \"покружена\", \"покружено\", \"покружены\", \"покручен\", \"покручена\", \"покручено\", \"покручены\", \"покрыт\", \"покрыта\", \"покрыто\", \"покрыты\", \"покупан\", \"покупана\", \"покупано\", \"покупаны\", \"покурен\", \"покурена\", \"покурено\", \"покурены\", \"покусан\", \"покусана\", \"покусано\", \"покусаны\", \"покушан\", \"покушана\", \"покушано\", \"покушаны\", \"полажен\", \"полажена\", \"полажено\", \"полажены\", \"полечен\", \"полечена\", \"полечено\", \"полечены\", \"полит\", \"полита\", \"полито\", \"политы\", \"половлен\", \"половлена\", \"половлено\", \"половлены\", \"положен\", \"положена\", \"положено\", \"положены\", \"поломан\", \"поломана\", \"поломано\", \"поломаны\", \"полоснут\", \"полоснута\", \"полоснуто\", \"полоснуты\", \"получен\", \"получена\", \"получено\", \"получены\", \"поляризован\", \"поляризована\", \"поляризовано\", \"поляризованы\", \"помазан\", \"помазана\", \"помазано\", \"помазаны\", \"помассирован\", \"помассирована\", \"помассировано\", \"помассированы\", \"поменян\", \"поменяна\", \"поменяно\", \"поменяны\", \"померен\", \"померена\", \"померено\", \"померены\", \"помечен\", \"помечена\", \"помечено\", \"помечены\", \"помешан\", \"помешана\", \"помешано\", \"помешаны\", \"помещен\", \"помещена\", \"помещено\", \"помещены\", \"помилован\", \"помилована\", \"помиловано\", \"помилованы\", \"помножен\", \"помножена\", \"помножено\", \"помножены\", \"помолвлен\", \"помолвлена\", \"помолвлено\", \"помолвлены\", \"помотан\", \"помотана\", \"помотано\", \"помотаны\", \"помрачен\", \"помрачена\", \"помрачено\", \"помрачены\", \"помыт\", \"помыта\", \"помыто\", \"помыты\", \"помянут\", \"помянута\", \"помянуто\", \"помянуты\", \"понаделан\", \"понаделана\", \"понаделано\", \"понаделаны\", \"понастроен\", \"понастроена\", \"понастроено\", \"понастроены\", \"понесен\", \"понесена\", \"понесено\", \"понесены\", \"понижен\", \"понижена\", \"понижено\", \"понижены\", \"поношена\", \"поношено\", \"поношены\", \"понят\", \"понята\", \"понято\", \"поняты\", \"пообещан\", \"пообещана\", \"пообещано\", \"пообещаны\", \"поощрен\", \"поощрена\", \"поощрено\", \"поощрены\", \"поперчен\", \"поперчена\", \"поперчено\", \"поперчены\", \"попет\", \"попета\", \"попето\", \"попеты\", \"пописан\", \"пописана\", \"пописано\", \"пописаны\", \"попит\", \"попита\", \"попито\", \"попиты\", \"пополнен\", \"пополнена\", \"пополнено\", \"пополнены\", \"попорчен\", \"попорчена\", \"попорчено\", \"попорчены\", \"поправлен\", \"поправлена\", \"поправлено\", \"поправлены\", \"попран\", \"попрана\", \"попрано\", \"попраны\", \"попрекнут\", \"попрекнута\", \"попрекнуто\", \"попрекнуты\", \"поприветствован\", \"поприветствована\", \"поприветствовано\", \"поприветствованы\", \"попробован\", \"попробована\", \"попробовано\", \"попробованы\", \"попрошен\", \"попрошена\", \"попрошено\", \"попрошены\", \"попуган\", \"попугана\", \"попугано\", \"попуганы\", \"популяризирован\", \"популяризирована\", \"популяризировано\", \"популяризированы\", \"попутан\", \"попутана\", \"попутано\", \"попутаны\", \"порабощен\", \"порабощена\", \"порабощено\", \"порабощены\", \"порадован\", \"порадована\", \"порадовано\", \"порадованы\", \"поражен\", \"поражена\", \"поражено\", \"поражены\", \"поранен\", \"поранена\", \"поранено\", \"поранены\", \"пораскинут\", \"пораскинута\", \"пораскинуто\", \"пораскинуты\", \"порассказан\", \"порассказана\", \"порассказано\", \"порассказаны\", \"порасспрошен\", \"порасспрошена\", \"порасспрошено\", \"порасспрошены\", \"порван\", \"порвана\", \"порвано\", \"порваны\", \"порезан\", \"порезана\", \"порезано\", \"порезаны\", \"порекомендован\", \"порекомендована\", \"порекомендовано\", \"порекомендованы\", \"порешен\", \"порешена\", \"порешено\", \"порешены\", \"порожден\", \"порождена\", \"порождено\", \"порождены\", \"порубан\", \"порубана\", \"порубано\", \"порубаны\", \"порублен\", \"порублена\", \"порублено\", \"порублены\", \"поруган\", \"поругана\", \"поругано\", \"поруганы\", \"поручен\", \"поручена\", \"поручено\", \"поручены\", \"порушен\", \"порушена\", \"порушено\", \"порушены\", \"посажен\", \"посажена\", \"посажено\", \"посажены\", \"посвящен\", \"посвящена\", \"посвящено\", \"посвящены\", \"поселен\", \"поселена\", \"поселено\", \"поселены\", \"посеребрен\", \"посеребрена\", \"посеребрено\", \"посеребрены\", \"посещен\", \"посещена\", \"посещено\", \"посещены\", \"посеян\", \"посеяна\", \"посеяно\", \"посеяны\", \"поскребен\", \"поскребена\", \"поскребено\", \"поскребены\", \"послан\", \"послана\", \"послано\", \"посланы\", \"послушан\", \"послушана\", \"послушано\", \"послушаны\", \"посмотрен\", \"посмотрена\", \"посмотрено\", \"посмотрены\", \"посниман\", \"поснимана\", \"поснимано\", \"посниманы\", \"посолен\", \"посолена\", \"посолено\", \"посолены\", \"пососан\", \"пососана\", \"пососано\", \"пососаны\", \"посрамлен\", \"посрамлена\", \"посрамлено\", \"посрамлены\", \"поставлен\", \"поставлена\", \"поставлено\", \"поставлены\", \"постановлен\", \"постановлена\", \"постановлено\", \"постановлены\", \"постелен\", \"постелена\", \"постелено\", \"постелены\", \"постигнут\", \"постигнута\", \"постигнуто\", \"постигнуты\", \"постиран\", \"постирана\", \"постирано\", \"постираны\", \"пострелян\", \"постреляна\", \"постреляно\", \"постреляны\", \"пострижен\", \"пострижена\", \"пострижено\", \"пострижены\", \"построен\", \"построена\", \"построено\", \"построены\", \"постулирован\", \"постулирована\", \"постулировано\", \"постулированы\", \"посчитан\", \"посчитана\", \"посчитано\", \"посчитаны\", \"потереблен\", \"потереблена\", \"потереблено\", \"потереблены\", \"потерплен\", \"потерплена\", \"потерплено\", \"потерплены\", \"потерт\", \"потерта\", \"потерто\", \"потерты\", \"потерян\", \"потеряна\", \"потеряно\", \"потеряны\", \"потеснен\", \"потеснена\", \"потеснено\", \"потеснены\", \"потешен\", \"потешена\", \"потешено\", \"потешены\", \"потискан\", \"потискана\", \"потискано\", \"потисканы\", \"потоплен\", \"потоплена\", \"потоплено\", \"потоплены\", \"потоптан\", \"потоптана\", \"потоптано\", \"потоптаны\", \"потороплен\", \"потороплена\", \"потороплено\", \"потороплены\", \"потравлен\", \"потравлена\", \"потравлено\", \"потравлены\", \"потрачен\", \"потрачена\", \"потрачено\", \"потрачены\", \"потреблен\", \"потреблена\", \"потреблено\", \"потреблены\", \"потребован\", \"потребована\", \"потребовано\", \"потребованы\", \"потревожен\", \"потревожена\", \"потревожено\", \"потревожены\", \"потрепан\", \"потрепана\", \"потрепано\", \"потрепаны\", \"потроган\", \"потрогана\", \"потрогано\", \"потроганы\", \"потрушен\", \"потрушена\", \"потрушено\", \"потрушены\", \"потрясен\", \"потрясена\", \"потрясено\", \"потрясены\", \"потуплен\", \"потуплена\", \"потуплено\", \"потуплены\", \"потушен\", \"потушена\", \"потушено\", \"потушены\", \"потыкан\", \"потыкана\", \"потыкано\", \"потыканы\", \"потянут\", \"потянута\", \"потянуто\", \"потянуты\", \"поубавлен\", \"поубавлена\", \"поубавлено\", \"поубавлены\", \"поучен\", \"поучена\", \"поучено\", \"поучены\", \"похвален\", \"похвалена\", \"похвалено\", \"похвалены\", \"похерен\", \"похерена\", \"похерено\", \"похерены\", \"похищен\", \"похищена\", \"похищено\", \"похищены\", \"похлебан\", \"похлебана\", \"похлебано\", \"похлебаны\", \"похлопан\", \"похлопана\", \"похлопано\", \"похлопаны\", \"похоронен\", \"похоронена\", \"похоронено\", \"похоронены\", \"поцарапан\", \"поцарапана\", \"поцарапано\", \"поцарапаны\", \"поцелован\", \"поцелована\", \"поцеловано\", \"поцелованы\", \"почат\", \"почата\", \"почато\", \"початы\", \"почерпнут\", \"почерпнута\", \"почерпнуто\", \"почерпнуты\", \"почесан\", \"почесана\", \"почесано\", \"почесаны\", \"починен\", \"починена\", \"починено\", \"починены\", \"почитан\", \"почитана\", \"почитано\", \"почитаны\", \"почищен\", \"почищена\", \"почищено\", \"почищены\", \"почтен\", \"почтена\", \"почтено\", \"почтены\", \"почувствован\", \"почувствована\", \"почувствовано\", \"почувствованы\", \"пошатнут\", \"пошатнута\", \"пошатнуто\", \"пошатнуты\", \"пошевелен\", \"пошевелена\", \"пошевелено\", \"пошевелены\", \"пошит\", \"пошита\", \"пошито\", \"пошиты\", \"пощелкан\", \"пощелкана\", \"пощелкано\", \"пощелканы\", \"пощипан\", \"пощипана\", \"пощипано\", \"пощипаны\", \"пощупан\", \"пощупана\", \"пощупано\", \"пощупаны\", \"пояснен\", \"пояснена\", \"пояснено\", \"пояснены\", \"превозможен\", \"превозможена\", \"превозможено\", \"превозможены\", \"превращен\", \"превращена\", \"превращено\", \"превращены\", \"превышен\", \"превышена\", \"превышено\", \"превышены\", \"прегражен\", \"прегражена\", \"прегражено\", \"прегражены\", \"предварен\", \"предварена\", \"предварено\", \"предварены\", \"предвосхищен\", \"предвосхищена\", \"предвосхищено\", \"предвосхищены\", \"предложен\", \"предложена\", \"предложено\", \"предложены\", \"предназначен\", \"предназначена\", \"предназначено\", \"предназначены\", \"предначертан\", \"предначертана\", \"предначертано\", \"предначертаны\", \"предопределен\", \"предопределена\", \"предопределено\", \"предопределены\", \"предоставлен\", \"предоставлена\", \"предоставлено\", \"предоставлены\", \"предостережен\", \"предостережена\", \"предостережено\", \"предостережены\", \"предотвращен\", \"предотвращена\", \"предотвращено\", \"предотвращены\", \"предохранен\", \"предохранена\", \"предохранено\", \"предохранены\", \"предписан\", \"предписана\", \"предписано\", \"предписаны\", \"предположен\", \"предположена\", \"предположено\", \"предположены\", \"предпослан\", \"предпослана\", \"предпослано\", \"предпосланы\", \"предпочтен\", \"предпочтена\", \"предпочтено\", \"предпочтены\", \"предпринят\", \"предпринята\", \"предпринято\", \"предприняты\", \"предрасположен\", \"предрасположена\", \"предрасположено\", \"предрасположены\", \"предречен\", \"предречена\", \"предречено\", \"предречены\", \"предрешен\", \"предрешена\", \"предрешено\", \"предрешены\", \"предсказан\", \"предсказана\", \"предсказано\", \"предсказаны\", \"представлен\", \"представлена\", \"представлено\", \"представлены\", \"предугадан\", \"предугадана\", \"предугадано\", \"предугаданы\", \"предубежден\", \"предубеждена\", \"предубеждено\", \"предубеждены\", \"предусмотрен\", \"предусмотрена\", \"предусмотрено\", \"предусмотрены\", \"предъявлен\", \"предъявлена\", \"предъявлено\", \"предъявлены\", \"презентован\", \"презентована\", \"презентовано\", \"презентованы\", \"преисполнен\", \"преисполнена\", \"преисполнено\", \"преисполнены\", \"преклонен\", \"преклонена\", \"преклонено\", \"преклонены\", \"прекращен\", \"прекращена\", \"прекращено\", \"прекращены\", \"преломлен\", \"преломлена\", \"преломлено\", \"преломлены\", \"прельщен\", \"прельщена\", \"прельщено\", \"прельщены\", \"премирован\", \"премирована\", \"премировано\", \"премированы\", \"преображен\", \"преображена\", \"преображено\", \"преображены\", \"преодолен\", \"преодолена\", \"преодолено\", \"преодолены\", \"препарирован\", \"препарирована\", \"препарировано\", \"препарированы\", \"преподнесен\", \"преподнесена\", \"преподнесено\", \"преподнесены\", \"препровожен\", \"препровожена\", \"препровожено\", \"препровожены\", \"прерван\", \"прервана\", \"прервано\", \"прерваны\", \"пресечен\", \"пресечена\", \"пресечено\", \"пресечены\", \"преступлен\", \"преступлена\", \"преступлено\", \"преступлены\", \"претворен\", \"претворена\", \"претворено\", \"претворены\", \"претерплен\", \"претерплена\", \"претерплено\", \"претерплены\", \"преувеличен\", \"преувеличена\", \"преувеличено\", \"преувеличены\", \"прибавлен\", \"прибавлена\", \"прибавлено\", \"прибавлены\", \"прибережен\", \"прибережена\", \"прибережено\", \"прибережены\", \"прибит\", \"прибита\", \"прибито\", \"прибиты\", \"приближен\", \"приближена\", \"приближено\", \"приближены\", \"прибран\", \"прибрана\", \"прибрано\", \"прибраны\", \"привален\", \"привалена\", \"привалено\", \"привалены\", \"приварен\", \"приварена\", \"приварено\", \"приварены\", \"приведен\", \"приведена\", \"приведено\", \"приведены\", \"привезен\", \"привезена\", \"привезено\", \"привезены\", \"привешен\", \"привешена\", \"привешено\", \"привешены\", \"привинчен\", \"привинчена\", \"привинчено\", \"привинчены\", \"привит\", \"привита\", \"привито\", \"привиты\", \"привлечен\", \"привлечена\", \"привлечено\", \"привлечены\", \"привнесен\", \"привнесена\", \"привнесено\", \"привнесены\", \"приворожен\", \"приворожена\", \"приворожено\", \"приворожены\", \"привязан\", \"привязана\", \"привязано\", \"привязаны\", \"пригвозжен\", \"пригвозжена\", \"пригвозжено\", \"пригвозжены\", \"приглажен\", \"приглажена\", \"приглажено\", \"приглажены\", \"приглашен\", \"приглашена\", \"приглашено\", \"приглашены\", \"приглушен\", \"приглушена\", \"приглушено\", \"приглушены\", \"пригнан\", \"пригнана\", \"пригнано\", \"пригнаны\", \"пригнут\", \"пригнута\", \"пригнуто\", \"пригнуты\", \"приговорен\", \"приговорена\", \"приговорено\", \"приговорены\", \"приголублен\", \"приголублена\", \"приголублено\", \"приголублены\", \"приготовлен\", \"приготовлена\", \"приготовлено\", \"приготовлены\", \"пригрет\", \"пригрета\", \"пригрето\", \"пригреты\", \"пригублен\", \"пригублена\", \"пригублено\", \"пригублены\", \"придавлен\", \"придавлена\", \"придавлено\", \"придавлены\", \"придвинут\", \"придвинута\", \"придвинуто\", \"придвинуты\", \"приделан\", \"приделана\", \"приделано\", \"приделаны\", \"придержан\", \"придержана\", \"придержано\", \"придержаны\", \"придуман\", \"придумана\", \"придумано\", \"придуманы\", \"придушен\", \"придушена\", \"придушено\", \"придушены\", \"прижат\", \"прижата\", \"прижато\", \"прижаты\", \"прижит\", \"прижита\", \"прижито\", \"прижиты\", \"призван\", \"призвана\", \"призвано\", \"призваны\", \"приземлен\", \"приземлена\", \"приземлено\", \"приземлены\", \"признан\", \"признана\", \"признано\", \"признаны\", \"приказан\", \"приказана\", \"приказано\", \"приказаны\", \"прикарманен\", \"прикарманена\", \"прикарманено\", \"прикарманены\", \"прикачен\", \"прикачена\", \"прикачено\", \"прикачены\", \"прикинут\", \"прикинута\", \"прикинуто\", \"прикинуты\", \"приклеен\", \"приклеена\", \"приклеено\", \"приклеены\", \"приклонен\", \"приклонена\", \"приклонено\", \"приклонены\", \"прикован\", \"прикована\", \"приковано\", \"прикованы\", \"приколот\", \"приколота\", \"приколото\", \"приколоты\", \"приколочен\", \"приколочена\", \"приколочено\", \"приколочены\", \"прикомандирован\", \"прикомандирована\", \"прикомандировано\", \"прикомандированы\", \"прикончен\", \"прикончена\", \"прикончено\", \"прикончены\", \"прикормлен\", \"прикормлена\", \"прикормлено\", \"прикормлены\", \"прикреплен\", \"прикреплена\", \"прикреплено\", \"прикреплены\", \"прикручен\", \"прикручена\", \"прикручено\", \"прикручены\", \"прикрыт\", \"прикрыта\", \"прикрыто\", \"прикрыты\", \"прикуплен\", \"прикуплена\", \"прикуплено\", \"прикуплены\", \"прикушен\", \"прикушена\", \"прикушено\", \"прикушены\", \"прилажен\", \"прилажена\", \"прилажено\", \"прилажены\", \"приласкан\", \"приласкана\", \"приласкано\", \"приласканы\", \"прилеплен\", \"прилеплена\", \"прилеплено\", \"прилеплены\", \"прилит\", \"прилита\", \"прилито\", \"прилиты\", \"приложен\", \"приложена\", \"приложено\", \"приложены\", \"приманен\", \"приманена\", \"приманено\", \"приманены\", \"применен\", \"применена\", \"применено\", \"применены\", \"примерен\", \"примерена\", \"примерено\", \"примерены\", \"примерян\", \"примеряна\", \"примеряно\", \"примеряны\", \"примечен\", \"примечена\", \"примечено\", \"примечены\", \"примирен\", \"примирена\", \"примирено\", \"примирены\", \"приморожен\", \"приморожена\", \"приморожено\", \"приморожены\", \"примотан\", \"примотана\", \"примотано\", \"примотаны\", \"примят\", \"примята\", \"примято\", \"примяты\", \"принаряжен\", \"принаряжена\", \"принаряжено\", \"принаряжены\", \"принесен\", \"принесена\", \"принесено\", \"принесены\", \"принижен\", \"принижена\", \"принижено\", \"принижены\", \"принужден\", \"принуждена\", \"принуждено\", \"принуждены\", \"принят\", \"принята\", \"принято\", \"приняты\", \"приободрен\", \"приободрена\", \"приободрено\", \"приободрены\", \"приобретен\", \"приобретена\", \"приобретено\", \"приобретены\", \"приобщен\", \"приобщена\", \"приобщено\", \"приобщены\", \"приодет\", \"приодета\", \"приодето\", \"приодеты\", \"приостановлен\", \"приостановлена\", \"приостановлено\", \"приостановлены\", \"приотворен\", \"приотворена\", \"приотворено\", \"приотворены\", \"приоткрыт\", \"приоткрыта\", \"приоткрыто\", \"приоткрыты\", \"припаркован\", \"припаркована\", \"припарковано\", \"припаркованы\", \"припасен\", \"припасена\", \"припасено\", \"припасены\", \"припаян\", \"припаяна\", \"припаяно\", \"припаяны\", \"приперт\", \"приперта\", \"приперто\", \"приперты\", \"припечатан\", \"припечатана\", \"припечатано\", \"припечатаны\", \"припечен\", \"припечена\", \"припечено\", \"припечены\", \"приписан\", \"приписана\", \"приписано\", \"приписаны\", \"приплетен\", \"приплетена\", \"приплетено\", \"приплетены\", \"приплюснут\", \"приплюснута\", \"приплюснуто\", \"приплюснуты\", \"приплюсован\", \"приплюсована\", \"приплюсовано\", \"приплюсованы\", \"приподнят\", \"приподнята\", \"приподнято\", \"приподняты\", \"припомнен\", \"припомнена\", \"припомнено\", \"припомнены\", \"припорошен\", \"припорошена\", \"припорошено\", \"припорошены\", \"приправлен\", \"приправлена\", \"приправлено\", \"приправлены\", \"припрятан\", \"припрятана\", \"припрятано\", \"припрятаны\", \"припудрен\", \"припудрена\", \"припудрено\", \"припудрены\", \"припущен\", \"припущена\", \"припущено\", \"припущены\", \"приравнян\", \"приравняна\", \"приравняно\", \"приравняны\", \"приревнован\", \"приревнована\", \"приревновано\", \"приревнованы\", \"прирезан\", \"прирезана\", \"прирезано\", \"прирезаны\", \"пририсован\", \"пририсована\", \"пририсовано\", \"пририсованы\", \"приручен\", \"приручена\", \"приручено\", \"приручены\", \"присвоен\", \"присвоена\", \"присвоено\", \"присвоены\", \"прислан\", \"прислана\", \"прислано\", \"присланы\", \"прислонен\", \"прислонена\", \"прислонено\", \"прислонены\", \"присмотрен\", \"присмотрена\", \"присмотрено\", \"присмотрены\", \"присобачен\", \"присобачена\", \"присобачено\", \"присобачены\", \"присовокуплен\", \"присовокуплена\", \"присовокуплено\", \"присовокуплены\", \"присоединен\", \"присоединена\", \"присоединено\", \"присоединены\", \"присочинен\", \"присочинена\", \"присочинено\", \"присочинены\", \"приспособлен\", \"приспособлена\", \"приспособлено\", \"приспособлены\", \"приспущен\", \"приспущена\", \"приспущено\", \"приспущены\", \"приставлен\", \"приставлена\", \"приставлено\", \"приставлены\", \"пристегнут\", \"пристегнута\", \"пристегнуто\", \"пристегнуты\", \"пристрелен\", \"пристрелена\", \"пристрелено\", \"пристрелены\", \"пристрелян\", \"пристреляна\", \"пристреляно\", \"пристреляны\", \"пристроен\", \"пристроена\", \"пристроено\", \"пристроены\", \"приструнен\", \"приструнена\", \"приструнено\", \"приструнены\", \"пристукнут\", \"пристукнута\", \"пристукнуто\", \"пристукнуты\", \"пристыжен\", \"пристыжена\", \"пристыжено\", \"пристыжены\", \"присужден\", \"присуждена\", \"присуждено\", \"присуждены\", \"притащен\", \"притащена\", \"притащено\", \"притащены\", \"притворен\", \"притворена\", \"притворено\", \"притворены\", \"притерт\", \"притерта\", \"притерто\", \"притерты\", \"притиснут\", \"притиснута\", \"притиснуто\", \"притиснуты\", \"приткнут\", \"приткнута\", \"приткнуто\", \"приткнуты\", \"притоптан\", \"притоптана\", \"притоптано\", \"притоптаны\", \"приторможен\", \"приторможена\", \"приторможено\", \"приторможены\", \"притуплен\", \"притуплена\", \"притуплено\", \"притуплены\", \"притянут\", \"притянута\", \"притянуто\", \"притянуты\", \"приукрашен\", \"приукрашена\", \"приукрашено\", \"приукрашены\", \"приумножен\", \"приумножена\", \"приумножено\", \"приумножены\", \"приурочен\", \"приурочена\", \"приурочено\", \"приурочены\", \"приучен\", \"приучена\", \"приучено\", \"приучены\", \"прихвастнут\", \"прихвастнута\", \"прихвастнуто\", \"прихвастнуты\", \"прихвачен\", \"прихвачена\", \"прихвачено\", \"прихвачены\", \"прихлопнут\", \"прихлопнута\", \"прихлопнуто\", \"прихлопнуты\", \"прицеплен\", \"прицеплена\", \"прицеплено\", \"прицеплены\", \"причален\", \"причалена\", \"причалено\", \"причалены\", \"причащен\", \"причащена\", \"причащено\", \"причащены\", \"причесан\", \"причесана\", \"причесано\", \"причесаны\", \"причинен\", \"причинена\", \"причинено\", \"причинены\", \"причислен\", \"причислена\", \"причислено\", \"причислены\", \"пришит\", \"пришита\", \"пришито\", \"пришиты\", \"пришпилен\", \"пришпилена\", \"пришпилено\", \"пришпилены\", \"пришпорен\", \"пришпорена\", \"пришпорено\", \"пришпорены\", \"прищелкнут\", \"прищелкнута\", \"прищелкнуто\", \"прищелкнуты\", \"прищемлен\", \"прищемлена\", \"прищемлено\", \"прищемлены\", \"прищурен\", \"прищурена\", \"прищурено\", \"прищурены\", \"прищучен\", \"прищучена\", \"прищучено\", \"прищучены\", \"проанализирован\", \"проанализирована\", \"проанализировано\", \"проанализированы\", \"пробит\", \"пробита\", \"пробито\", \"пробиты\", \"проварен\", \"проварена\", \"проварено\", \"проварены\", \"проведан\", \"проведана\", \"проведано\", \"проведаны\", \"проведен\", \"проведена\", \"проведено\", \"проведены\", \"провезен\", \"провезена\", \"провезено\", \"провезены\", \"проверен\", \"проверена\", \"проверено\", \"проверены\", \"провернут\", \"провернута\", \"провернуто\", \"провернуты\", \"проветрен\", \"проветрена\", \"проветрено\", \"проветрены\", \"провозглашен\", \"провозглашена\", \"провозглашено\", \"провозглашены\", \"проглочен\", \"проглочена\", \"проглочено\", \"проглочены\", \"прогнан\", \"прогнана\", \"прогнано\", \"прогнаны\", \"прогнусавлен\", \"прогнусавлена\", \"прогнусавлено\", \"прогнусавлены\", \"проговорен\", \"проговорена\", \"проговорено\", \"проговорены\", \"прогрет\", \"прогрета\", \"прогрето\", \"прогреты\", \"прогрызен\", \"прогрызена\", \"прогрызено\", \"прогрызены\", \"прогулян\", \"прогуляна\", \"прогуляно\", \"прогуляны\", \"продавлен\", \"продавлена\", \"продавлено\", \"продавлены\", \"продвинут\", \"продвинута\", \"продвинуто\", \"продвинуты\", \"продезинфицирован\", \"продезинфицирована\", \"продезинфицировано\", \"продезинфицированы\", \"продекламирован\", \"продекламирована\", \"продекламировано\", \"продекламированы\", \"проделан\", \"проделана\", \"проделано\", \"проделаны\", \"продемонстрирован\", \"продемонстрирована\", \"продемонстрировано\", \"продемонстрированы\", \"продержан\", \"продержана\", \"продержано\", \"продержаны\", \"продернут\", \"продернута\", \"продернуто\", \"продернуты\", \"продет\", \"продета\", \"продето\", \"продеты\", \"продешевлен\", \"продешевлена\", \"продешевлено\", \"продешевлены\", \"продиктован\", \"продиктована\", \"продиктовано\", \"продиктованы\", \"продлен\", \"продлена\", \"продлено\", \"продлены\", \"продолжен\", \"продолжена\", \"продолжено\", \"продолжены\", \"продран\", \"продрана\", \"продрано\", \"продраны\", \"продублирован\", \"продублирована\", \"продублировано\", \"продублированы\", \"продуман\", \"продумана\", \"продумано\", \"продуманы\", \"продут\", \"продута\", \"продуто\", \"продуты\", \"продырявлен\", \"продырявлена\", \"продырявлено\", \"продырявлены\", \"прожарен\", \"прожарена\", \"прожарено\", \"прожарены\", \"прожеван\", \"прожевана\", \"прожевано\", \"прожеваны\", \"прожит\", \"прожита\", \"прожито\", \"прожиты\", \"прозван\", \"прозвана\", \"прозвано\", \"прозваны\", \"прозвонен\", \"прозвонена\", \"прозвонено\", \"прозвонены\", \"прознан\", \"прознана\", \"прознано\", \"прознаны\", \"проигран\", \"проиграна\", \"проиграно\", \"проиграны\", \"произведен\", \"произведена\", \"произведено\", \"произведены\", \"произнесен\", \"произнесена\", \"произнесено\", \"произнесены\", \"проиллюстрирован\", \"проиллюстрирована\", \"проиллюстрировано\", \"проиллюстрированы\", \"проинструктирован\", \"проинструктирована\", \"проинструктировано\", \"проинструктированы\", \"проинформирован\", \"проинформирована\", \"проинформировано\", \"проинформированы\", \"прокален\", \"прокалена\", \"прокалено\", \"прокалены\", \"прокатан\", \"прокатана\", \"прокатано\", \"прокатаны\", \"прокачан\", \"прокачана\", \"прокачано\", \"прокачаны\", \"прокачен\", \"прокачена\", \"прокачено\", \"прокачены\", \"прокипячен\", \"прокипячена\", \"прокипячено\", \"прокипячены\", \"проколот\", \"проколота\", \"проколото\", \"проколоты\", \"прокомментирован\", \"прокомментирована\", \"прокомментировано\", \"прокомментированы\", \"проконсультирован\", \"проконсультирована\", \"проконсультировано\", \"проконсультированы\", \"проконтролирован\", \"проконтролирована\", \"проконтролировано\", \"проконтролированы\", \"прокопан\", \"прокопана\", \"прокопано\", \"прокопаны\", \"прокопчен\", \"прокопчена\", \"прокопчено\", \"прокопчены\", \"прокручен\", \"прокручена\", \"прокручено\", \"прокручены\", \"прокурен\", \"прокурена\", \"прокурено\", \"прокурены\", \"прокушен\", \"прокушена\", \"прокушено\", \"прокушены\", \"пролечен\", \"пролечена\", \"пролечено\", \"пролечены\", \"пролистан\", \"пролистана\", \"пролистано\", \"пролистаны\", \"пролит\", \"пролита\", \"пролито\", \"пролиты\", \"проложен\", \"проложена\", \"проложено\", \"проложены\", \"проломлен\", \"проломлена\", \"проломлено\", \"проломлены\", \"пролонгирован\", \"пролонгирована\", \"пролонгировано\", \"пролонгированы\", \"промазан\", \"промазана\", \"промазано\", \"промазаны\", \"променян\", \"променяна\", \"променяно\", \"променяны\", \"промокнут\", \"промокнута\", \"промокнуто\", \"промокнуты\", \"промолвлен\", \"промолвлена\", \"промолвлено\", \"промолвлены\", \"проморожен\", \"проморожена\", \"проморожено\", \"проморожены\", \"промотан\", \"промотана\", \"промотано\", \"промотаны\", \"промочен\", \"промочена\", \"промочено\", \"промочены\", \"промыт\", \"промыта\", \"промыто\", \"промыты\", \"промямлен\", \"промямлена\", \"промямлено\", \"промямлены\", \"пронесен\", \"пронесена\", \"пронесено\", \"пронесены\", \"пронзен\", \"пронзена\", \"пронзено\", \"пронзены\", \"пронизан\", \"пронизана\", \"пронизано\", \"пронизаны\", \"проношен\", \"проношена\", \"проношено\", \"проношены\", \"пронумерован\", \"пронумерована\", \"пронумеровано\", \"пронумерованы\", \"пронюхан\", \"пронюхана\", \"пронюхано\", \"пронюханы\", \"пропахан\", \"пропахана\", \"пропахано\", \"пропаханы\", \"пропет\", \"пропета\", \"пропето\", \"пропеты\", \"пропечатан\", \"пропечатана\", \"пропечатано\", \"пропечатаны\", \"прописан\", \"прописана\", \"прописано\", \"прописаны\", \"пропит\", \"пропита\", \"пропито\", \"пропиты\", \"пропитан\", \"пропитана\", \"пропитано\", \"пропитаны\", \"пропихнут\", \"пропихнута\", \"пропихнуто\", \"пропихнуты\", \"проплакан\", \"проплакана\", \"проплакано\", \"проплаканы\", \"проплыт\", \"проплыта\", \"проплыто\", \"проплыты\", \"прополоскан\", \"прополоскана\", \"прополоскано\", \"прополосканы\", \"прополот\", \"прополота\", \"прополото\", \"прополоты\", \"пропорот\", \"пропорота\", \"пропорото\", \"пропороты\", \"пропущен\", \"пропущена\", \"пропущено\", \"пропущены\", \"пропылен\", \"пропылена\", \"пропылено\", \"пропылены\", \"проработан\", \"проработана\", \"проработано\", \"проработаны\", \"прорван\", \"прорвана\", \"прорвано\", \"прорваны\", \"прорежен\", \"прорежена\", \"прорежено\", \"прорежены\", \"прорезан\", \"прорезана\", \"прорезано\", \"прорезаны\", \"прорисован\", \"прорисована\", \"прорисовано\", \"прорисованы\", \"проронен\", \"проронена\", \"проронено\", \"проронены\", \"прорублен\", \"прорублена\", \"прорублено\", \"прорублены\", \"прорыт\", \"прорыта\", \"прорыто\", \"прорыты\", \"просажен\", \"просажена\", \"просажено\", \"просажены\", \"просверлен\", \"просверлена\", \"просверлено\", \"просверлены\", \"просветлен\", \"просветлена\", \"просветлено\", \"просветлены\", \"просвечен\", \"просвечена\", \"просвечено\", \"просвечены\", \"просвещен\", \"просвещена\", \"просвещено\", \"просвещены\", \"просвищен\", \"просвищена\", \"просвищено\", \"просвищены\", \"просечен\", \"просечена\", \"просечено\", \"просечены\", \"просеян\", \"просеяна\", \"просеяно\", \"просеяны\", \"просигнален\", \"просигналена\", \"просигналено\", \"просигналены\", \"просижен\", \"просижена\", \"просижено\", \"просижены\", \"просиплен\", \"просиплена\", \"просиплено\", \"просиплены\", \"прославлен\", \"прославлена\", \"прославлено\", \"прославлены\", \"прослежен\", \"прослежена\", \"прослежено\", \"прослежены\", \"прослушан\", \"прослушана\", \"прослушано\", \"прослушаны\", \"прослышан\", \"прослышана\", \"прослышано\", \"прослышаны\", \"просмолен\", \"просмолена\", \"просмолено\", \"просмолены\", \"просмотрен\", \"просмотрена\", \"просмотрено\", \"просмотрены\", \"просолен\", \"просолена\", \"просолено\", \"просолены\", \"просрочен\", \"просрочена\", \"просрочено\", \"просрочены\", \"проставлен\", \"проставлена\", \"проставлено\", \"проставлены\", \"простерт\", \"простерта\", \"простерто\", \"простерты\", \"простиран\", \"простирана\", \"простирано\", \"простираны\", \"прострелен\", \"прострелена\", \"прострелено\", \"прострелены\", \"прострочен\", \"прострочена\", \"прострочено\", \"прострочены\", \"простужен\", \"простужена\", \"простужено\", \"простужены\", \"простучан\", \"простучана\", \"простучано\", \"простучаны\", \"просунут\", \"просунута\", \"просунуто\", \"просунуты\", \"просушен\", \"просушена\", \"просушено\", \"просушены\", \"просчитан\", \"просчитана\", \"просчитано\", \"просчитаны\", \"протаранен\", \"протаранена\", \"протаранено\", \"протаранены\", \"протащен\", \"протащена\", \"протащено\", \"протащены\", \"протерт\", \"протерта\", \"протерто\", \"протерты\", \"противопоставлен\", \"противопоставлена\", \"противопоставлено\", \"противопоставлены\", \"проткнут\", \"проткнута\", \"проткнуто\", \"проткнуты\", \"протолкнут\", \"протолкнута\", \"протолкнуто\", \"протолкнуты\", \"протоплен\", \"протоплена\", \"протоплено\", \"протоплены\", \"протоптан\", \"протоптана\", \"протоптано\", \"протоптаны\", \"проторен\", \"проторена\", \"проторено\", \"проторены\", \"протыкан\", \"протыкана\", \"протыкано\", \"протыканы\", \"протянут\", \"протянута\", \"протянуто\", \"протянуты\", \"проучен\", \"проучена\", \"проучено\", \"проучены\", \"профильтрован\", \"профильтрована\", \"профильтровано\", \"профильтрованы\", \"профинансирован\", \"профинансирована\", \"профинансировано\", \"профинансированы\", \"профукан\", \"профукана\", \"профукано\", \"профуканы\", \"прохвачен\", \"прохвачена\", \"прохвачено\", \"прохвачены\", \"прохриплен\", \"прохриплена\", \"прохриплено\", \"прохриплены\", \"процарапан\", \"процарапана\", \"процарапано\", \"процарапаны\", \"процежен\", \"процежена\", \"процежено\", \"процежены\", \"процитирован\", \"процитирована\", \"процитировано\", \"процитированы\", \"прочерчен\", \"прочерчена\", \"прочерчено\", \"прочерчены\", \"прочесан\", \"прочесана\", \"прочесано\", \"прочесаны\", \"прочитан\", \"прочитана\", \"прочитано\", \"прочитаны\", \"прочищен\", \"прочищена\", \"прочищено\", \"прочищены\", \"прочтен\", \"прочтена\", \"прочтено\", \"прочтены\", \"прочувствован\", \"прочувствована\", \"прочувствовано\", \"прочувствованы\", \"прошаган\", \"прошагана\", \"прошагано\", \"прошаганы\", \"прошамкан\", \"прошамкана\", \"прошамкано\", \"прошамканы\", \"прошептан\", \"прошептана\", \"прошептано\", \"прошептаны\", \"прошиплен\", \"прошиплена\", \"прошиплено\", \"прошиплены\", \"прошит\", \"прошита\", \"прошито\", \"прошиты\", \"прошляплен\", \"прошляплена\", \"прошляплено\", \"прошляплены\", \"проштудирован\", \"проштудирована\", \"проштудировано\", \"проштудированы\", \"прощен\", \"прощена\", \"прощено\", \"прощены\", \"прощупан\", \"прощупана\", \"прощупано\", \"прощупаны\", \"проявлен\", \"проявлена\", \"проявлено\", \"проявлены\", \"прояснен\", \"прояснена\", \"прояснено\", \"прояснены\", \"пущен\", \"пущена\", \"пущено\", \"пущены\", \"пырнут\", \"пырнута\", \"пырнуто\", \"пырнуты\", \"радирован\", \"радирована\", \"радировано\", \"радированы\", \"разбавлен\", \"разбавлена\", \"разбавлено\", \"разбавлены\", \"разбазарен\", \"разбазарена\", \"разбазарено\", \"разбазарены\", \"разбережен\", \"разбережена\", \"разбережено\", \"разбережены\", \"разбит\", \"разбита\", \"разбито\", \"разбиты\", \"разболтан\", \"разболтана\", \"разболтано\", \"разболтаны\", \"разбомблен\", \"разбомблена\", \"разбомблено\", \"разбомблены\", \"разбросан\", \"разбросана\", \"разбросано\", \"разбросаны\", \"разбужен\", \"разбужена\", \"разбужено\", \"разбужены\", \"развален\", \"развалена\", \"развалено\", \"развалены\", \"разварен\", \"разварена\", \"разварено\", \"разварены\", \"разведан\", \"разведана\", \"разведано\", \"разведаны\", \"разведен\", \"разведена\", \"разведено\", \"разведены\", \"развезен\", \"развезена\", \"развезено\", \"развезены\", \"развенчан\", \"развенчана\", \"развенчано\", \"развенчаны\", \"развернут\", \"развернута\", \"развернуто\", \"развернуты\", \"развеселен\", \"развеселена\", \"развеселено\", \"развеселены\", \"развешан\", \"развешана\", \"развешано\", \"развешаны\", \"развешен\", \"развешена\", \"развешено\", \"развешены\", \"развеян\", \"развеяна\", \"развеяно\", \"развеяны\", \"развинчен\", \"развинчена\", \"развинчено\", \"развинчены\", \"развит\", \"развита\", \"развито\", \"развиты\", \"развлечен\", \"развлечена\", \"развлечено\", \"развлечены\", \"разворован\", \"разворована\", \"разворовано\", \"разворованы\", \"разворочен\", \"разворочена\", \"разворочено\", \"разворочены\", \"разворошен\", \"разворошена\", \"разворошено\", \"разворошены\", \"развращен\", \"развращена\", \"развращено\", \"развращены\", \"развязан\", \"развязана\", \"развязано\", \"развязаны\", \"разгадан\", \"разгадана\", \"разгадано\", \"разгаданы\", \"разглажен\", \"разглажена\", \"разглажено\", \"разглажены\", \"разглашен\", \"разглашена\", \"разглашено\", \"разглашены\", \"разгневан\", \"разгневана\", \"разгневано\", \"разгневаны\", \"разговорен\", \"разговорена\", \"разговорено\", \"разговорены\", \"разгорожен\", \"разгорожена\", \"разгорожено\", \"разгорожены\", \"разгорячен\", \"разгорячена\", \"разгорячено\", \"разгорячены\", \"разграблен\", \"разграблена\", \"разграблено\", \"разграблены\", \"разграничен\", \"разграничена\", \"разграничено\", \"разграничены\", \"разграфлен\", \"разграфлена\", \"разграфлено\", \"разграфлены\", \"разгребен\", \"разгребена\", \"разгребено\", \"разгребены\", \"разгромлен\", \"разгромлена\", \"разгромлено\", \"разгромлены\", \"разгружен\", \"разгружена\", \"разгружено\", \"разгружены\", \"разгрызен\", \"разгрызена\", \"разгрызено\", \"разгрызены\", \"раздавлен\", \"раздавлена\", \"раздавлено\", \"раздавлены\", \"раздарен\", \"раздарена\", \"раздарено\", \"раздарены\", \"раздвинут\", \"раздвинута\", \"раздвинуто\", \"раздвинуты\", \"раздвоен\", \"раздвоена\", \"раздвоено\", \"раздвоены\", \"разделан\", \"разделана\", \"разделано\", \"разделаны\", \"разделен\", \"разделена\", \"разделено\", \"разделены\", \"раздернут\", \"раздернута\", \"раздернуто\", \"раздернуты\", \"раздет\", \"раздета\", \"раздето\", \"раздеты\", \"раздолбан\", \"раздолбана\", \"раздолбано\", \"раздолбаны\", \"раздосадован\", \"раздосадована\", \"раздосадовано\", \"раздосадованы\", \"раздражен\", \"раздражена\", \"раздражено\", \"раздражены\", \"раздроблен\", \"раздроблена\", \"раздроблено\", \"раздроблены\", \"раздут\", \"раздута\", \"раздуто\", \"раздуты\", \"разжалоблен\", \"разжалоблена\", \"разжалоблено\", \"разжалоблены\", \"разжалован\", \"разжалована\", \"разжаловано\", \"разжалованы\", \"разжат\", \"разжата\", \"разжато\", \"разжаты\", \"разжеван\", \"разжевана\", \"разжевано\", \"разжеваны\", \"раззадорен\", \"раззадорена\", \"раззадорено\", \"раззадорены\", \"раззявлен\", \"раззявлена\", \"раззявлено\", \"раззявлены\", \"разинут\", \"разинута\", \"разинуто\", \"разинуты\", \"разлеплен\", \"разлеплена\", \"разлеплено\", \"разлеплены\", \"разлинован\", \"разлинована\", \"разлиновано\", \"разлинованы\", \"разлит\", \"разлита\", \"разлито\", \"разлиты\", \"различен\", \"различена\", \"различено\", \"различены\", \"разложен\", \"разложена\", \"разложено\", \"разложены\", \"разломан\", \"разломана\", \"разломано\", \"разломаны\", \"разломлен\", \"разломлена\", \"разломлено\", \"разломлены\", \"разлохмачен\", \"разлохмачена\", \"разлохмачено\", \"разлохмачены\", \"разлучен\", \"разлучена\", \"разлучено\", \"разлучены\", \"размазан\", \"размазана\", \"размазано\", \"размазаны\", \"размалеван\", \"размалевана\", \"размалевано\", \"размалеваны\", \"разменян\", \"разменяна\", \"разменяно\", \"разменяны\", \"разметан\", \"разметана\", \"разметано\", \"разметаны\", \"размечен\", \"размечена\", \"размечено\", \"размечены\", \"размешан\", \"размешана\", \"размешано\", \"размешаны\", \"размещен\", \"размещена\", \"размещено\", \"размещены\", \"разминирован\", \"разминирована\", \"разминировано\", \"разминированы\", \"размножен\", \"размножена\", \"размножено\", \"размножены\", \"размозжен\", \"размозжена\", \"размозжено\", \"размозжены\", \"размолот\", \"размолота\", \"размолото\", \"размолоты\", \"разморожен\", \"разморожена\", \"разморожено\", \"разморожены\", \"размотан\", \"размотана\", \"размотано\", \"размотаны\", \"размочен\", \"размочена\", \"размочено\", \"размочены\", \"размыкан\", \"размыкана\", \"размыкано\", \"размыканы\", \"размыт\", \"размыта\", \"размыто\", \"размыты\", \"размягчен\", \"размягчена\", \"размягчено\", \"размягчены\", \"размят\", \"размята\", \"размято\", \"размяты\", \"разнесен\", \"разнесена\", \"разнесено\", \"разнесены\", \"разношен\", \"разношена\", \"разношено\", \"разношены\", \"разнюхан\", \"разнюхана\", \"разнюхано\", \"разнюханы\", \"разнят\", \"разнята\", \"разнято\", \"разняты\", \"разоблачен\", \"разоблачена\", \"разоблачено\", \"разоблачены\", \"разобран\", \"разобрана\", \"разобрано\", \"разобраны\", \"разобщен\", \"разобщена\", \"разобщено\", \"разобщены\", \"разогнан\", \"разогнана\", \"разогнано\", \"разогнаны\", \"разогнут\", \"разогнута\", \"разогнуто\", \"разогнуты\", \"разогрет\", \"разогрета\", \"разогрето\", \"разогреты\", \"разодет\", \"разодета\", \"разодето\", \"разодеты\", \"разодран\", \"разодрана\", \"разодрано\", \"разодраны\", \"разожжен\", \"разожжена\", \"разожжено\", \"разожжены\", \"разозлен\", \"разозлена\", \"разозлено\", \"разозлены\", \"разомкнут\", \"разомкнута\", \"разомкнуто\", \"разомкнуты\", \"разорван\", \"разорвана\", \"разорвано\", \"разорваны\", \"разорен\", \"разорена\", \"разорено\", \"разорены\", \"разоружен\", \"разоружена\", \"разоружено\", \"разоружены\", \"разослан\", \"разослана\", \"разослано\", \"разосланы\", \"разостлан\", \"разостлана\", \"разостлано\", \"разостланы\", \"разочарован\", \"разочарована\", \"разочаровано\", \"разочарованы\", \"разработан\", \"разработана\", \"разработано\", \"разработаны\", \"разрежен\", \"разрежена\", \"разрежено\", \"разрежены\", \"разрезан\", \"разрезана\", \"разрезано\", \"разрезаны\", \"разрекламирован\", \"разрекламирована\", \"разрекламировано\", \"разрекламированы\", \"разрешен\", \"разрешена\", \"разрешено\", \"разрешены\", \"разрисован\", \"разрисована\", \"разрисовано\", \"разрисованы\", \"разрознен\", \"разрознена\", \"разрознено\", \"разрознены\", \"разрублен\", \"разрублена\", \"разрублено\", \"разрублены\", \"разрушен\", \"разрушена\", \"разрушено\", \"разрушены\", \"разрыт\", \"разрыта\", \"разрыто\", \"разрыты\", \"разряжен\", \"разряжена\", \"разряжено\", \"разряжены\", \"разубежден\", \"разубеждена\", \"разубеждено\", \"разубеждены\", \"разузнан\", \"разузнана\", \"разузнано\", \"разузнаны\", \"разукрашен\", \"разукрашена\", \"разукрашено\", \"разукрашены\", \"разут\", \"разута\", \"разуто\", \"разуты\", \"разучен\", \"разучена\", \"разучено\", \"разучены\", \"разъединен\", \"разъединена\", \"разъединено\", \"разъединены\", \"разъярен\", \"разъярена\", \"разъярено\", \"разъярены\", \"разъяснен\", \"разъяснена\", \"разъяснено\", \"разъяснены\", \"разъят\", \"разъята\", \"разъято\", \"разъяты\", \"разыгран\", \"разыграна\", \"разыграно\", \"разыграны\", \"разыскан\", \"разыскана\", \"разыскано\", \"разысканы\", \"ранен\", \"ранена\", \"ранено\", \"ранены\", \"ранжирован\", \"ранжирована\", \"ранжировано\", \"ранжированы\", \"раскален\", \"раскалена\", \"раскалено\", \"раскалены\", \"раскатан\", \"раскатана\", \"раскатано\", \"раскатаны\", \"раскачан\", \"раскачана\", \"раскачано\", \"раскачаны\", \"расквартирован\", \"расквартирована\", \"расквартировано\", \"расквартированы\", \"расквашен\", \"расквашена\", \"расквашено\", \"расквашены\", \"раскидан\", \"раскидана\", \"раскидано\", \"раскиданы\", \"раскинут\", \"раскинута\", \"раскинуто\", \"раскинуты\", \"расклеван\", \"расклевана\", \"расклевано\", \"расклеваны\", \"расклеен\", \"расклеена\", \"расклеено\", \"расклеены\", \"раскован\", \"раскована\", \"расковано\", \"раскованы\", \"расковырян\", \"расковыряна\", \"расковыряно\", \"расковыряны\", \"расколдован\", \"расколдована\", \"расколдовано\", \"расколдованы\", \"расколот\", \"расколота\", \"расколото\", \"расколоты\", \"расколочен\", \"расколочена\", \"расколочено\", \"расколочены\", \"раскопан\", \"раскопана\", \"раскопано\", \"раскопаны\", \"раскрашен\", \"раскрашена\", \"раскрашено\", \"раскрашены\", \"раскрепощен\", \"раскрепощена\", \"раскрепощено\", \"раскрепощены\", \"раскритикован\", \"раскритикована\", \"раскритиковано\", \"раскритикованы\", \"раскроен\", \"раскроена\", \"раскроено\", \"раскроены\", \"раскрошен\", \"раскрошена\", \"раскрошено\", \"раскрошены\", \"раскручен\", \"раскручена\", \"раскручено\", \"раскручены\", \"раскрыт\", \"раскрыта\", \"раскрыто\", \"раскрыты\", \"раскулачен\", \"раскулачена\", \"раскулачено\", \"раскулачены\", \"раскуплен\", \"раскуплена\", \"раскуплено\", \"раскуплены\", \"раскупорен\", \"раскупорена\", \"раскупорено\", \"раскупорены\", \"раскурен\", \"раскурена\", \"раскурено\", \"раскурены\", \"раскушен\", \"раскушена\", \"раскушено\", \"раскушены\", \"распакован\", \"распакована\", \"распаковано\", \"распакованы\", \"распален\", \"распалена\", \"распалено\", \"распалены\", \"распарен\", \"распарена\", \"распарено\", \"распарены\", \"распахан\", \"распахана\", \"распахано\", \"распаханы\", \"распахнут\", \"распахнута\", \"распахнуто\", \"распахнуты\", \"распечатан\", \"распечатана\", \"распечатано\", \"распечатаны\", \"распилен\", \"распилена\", \"распилено\", \"распилены\", \"расписан\", \"расписана\", \"расписано\", \"расписаны\", \"распит\", \"распита\", \"распито\", \"распиты\", \"расплавлен\", \"расплавлена\", \"расплавлено\", \"расплавлены\", \"распланирован\", \"распланирована\", \"распланировано\", \"распланированы\", \"распластан\", \"распластана\", \"распластано\", \"распластаны\", \"расплескан\", \"расплескана\", \"расплескано\", \"расплесканы\", \"расплющен\", \"расплющена\", \"расплющено\", \"расплющены\", \"распознан\", \"распознана\", \"распознано\", \"распознаны\", \"расположен\", \"расположена\", \"расположено\", \"расположены\", \"располосован\", \"располосована\", \"располосовано\", \"располосованы\", \"распорот\", \"распорота\", \"распорото\", \"распороты\", \"распотрошен\", \"распотрошена\", \"распотрошено\", \"распотрошены\", \"расправлен\", \"расправлена\", \"расправлено\", \"расправлены\", \"распределен\", \"распределена\", \"распределено\", \"распределены\", \"распробован\", \"распробована\", \"распробовано\", \"распробованы\", \"распростерт\", \"распростерта\", \"распростерто\", \"распростерты\", \"распространен\", \"распространена\", \"распространено\", \"распространены\", \"распряжен\", \"распряжена\", \"распряжено\", \"распряжены\", \"распрямлен\", \"распрямлена\", \"распрямлено\", \"распрямлены\", \"распуган\", \"распугана\", \"распугано\", \"распуганы\", \"распушен\", \"распушена\", \"распушено\", \"распушены\", \"распущен\", \"распущена\", \"распущено\", \"распущены\", \"распылен\", \"распылена\", \"распылено\", \"распылены\", \"распялен\", \"распялена\", \"распялено\", \"распялены\", \"распят\", \"распята\", \"распято\", \"распяты\", \"рассажен\", \"рассажена\", \"рассажено\", \"рассажены\", \"рассекречен\", \"рассекречена\", \"рассекречено\", \"рассекречены\", \"расселен\", \"расселена\", \"расселено\", \"расселены\", \"рассержен\", \"рассержена\", \"рассержено\", \"рассержены\", \"рассечен\", \"рассечена\", \"рассечено\", \"рассечены\", \"рассеян\", \"рассеяна\", \"рассеяно\", \"рассеяны\", \"рассказан\", \"рассказана\", \"рассказано\", \"рассказаны\", \"расследован\", \"расследована\", \"расследовано\", \"расследованы\", \"расслышан\", \"расслышана\", \"расслышано\", \"расслышаны\", \"рассмешен\", \"рассмешена\", \"рассмешено\", \"рассмешены\", \"рассмотрен\", \"рассмотрена\", \"рассмотрено\", \"рассмотрены\", \"рассортирован\", \"рассортирована\", \"рассортировано\", \"рассортированы\", \"расспрошен\", \"расспрошена\", \"расспрошено\", \"расспрошены\", \"рассредоточен\", \"рассредоточена\", \"рассредоточено\", \"рассредоточены\", \"расставлен\", \"расставлена\", \"расставлено\", \"расставлены\", \"расстегнут\", \"расстегнута\", \"расстегнуто\", \"расстегнуты\", \"расстелен\", \"расстелена\", \"расстелено\", \"расстелены\", \"расстрелян\", \"расстреляна\", \"расстреляно\", \"расстреляны\", \"расстроен\", \"расстроена\", \"расстроено\", \"расстроены\", \"рассчитан\", \"рассчитана\", \"рассчитано\", \"рассчитаны\", \"растащен\", \"растащена\", \"растащено\", \"растащены\", \"растворен\", \"растворена\", \"растворено\", \"растворены\", \"растерзан\", \"растерзана\", \"растерзано\", \"растерзаны\", \"растерт\", \"растерта\", \"растерто\", \"растерты\", \"растерян\", \"растеряна\", \"растеряно\", \"растеряны\", \"растлен\", \"растлена\", \"растлено\", \"растлены\", \"растолкан\", \"растолкана\", \"растолкано\", \"растолканы\", \"растолкован\", \"растолкована\", \"растолковано\", \"растолкованы\", \"растоплен\", \"растоплена\", \"растоплено\", \"растоплены\", \"растоптан\", \"растоптана\", \"растоптано\", \"растоптаны\", \"растопырен\", \"растопырена\", \"растопырено\", \"растопырены\", \"расторгнут\", \"расторгнута\", \"расторгнуто\", \"расторгнуты\", \"растормошен\", \"растормошена\", \"растормошено\", \"растормошены\", \"растравлен\", \"растравлена\", \"растравлено\", \"растравлены\", \"растрачен\", \"растрачена\", \"растрачено\", \"растрачены\", \"растревожен\", \"растревожена\", \"растревожено\", \"растревожены\", \"растрепан\", \"растрепана\", \"растрепано\", \"растрепаны\", \"растроган\", \"растрогана\", \"растрогано\", \"растроганы\", \"растрясен\", \"растрясена\", \"растрясено\", \"растрясены\", \"растянут\", \"растянута\", \"растянуто\", \"растянуты\", \"расфасован\", \"расфасована\", \"расфасовано\", \"расфасованы\", \"расформирован\", \"расформирована\", \"расформировано\", \"расформированы\", \"расхвален\", \"расхвалена\", \"расхвалено\", \"расхвалены\", \"расхлебан\", \"расхлебана\", \"расхлебано\", \"расхлебаны\", \"расцарапан\", \"расцарапана\", \"расцарапано\", \"расцарапаны\", \"расцвечен\", \"расцвечена\", \"расцвечено\", \"расцвечены\", \"расцелован\", \"расцелована\", \"расцеловано\", \"расцелованы\", \"расценен\", \"расценена\", \"расценено\", \"расценены\", \"расцеплен\", \"расцеплена\", \"расцеплено\", \"расцеплены\", \"расчерчен\", \"расчерчена\", \"расчерчено\", \"расчерчены\", \"расчесан\", \"расчесана\", \"расчесано\", \"расчесаны\", \"расчищен\", \"расчищена\", \"расчищено\", \"расчищены\", \"расчленен\", \"расчленена\", \"расчленено\", \"расчленены\", \"расшатан\", \"расшатана\", \"расшатано\", \"расшатаны\", \"расшвырян\", \"расшвыряна\", \"расшвыряно\", \"расшвыряны\", \"расшевелен\", \"расшевелена\", \"расшевелено\", \"расшевелены\", \"расширен\", \"расширена\", \"расширено\", \"расширены\", \"расшит\", \"расшита\", \"расшито\", \"расшиты\", \"расшифрован\", \"расшифрована\", \"расшифровано\", \"расшифрованы\", \"расщеплен\", \"расщеплена\", \"расщеплено\", \"расщеплены\", \"ратифицирован\", \"ратифицирована\", \"ратифицировано\", \"ратифицированы\", \"рационализирован\", \"рационализирована\", \"рационализировано\", \"рационализированы\", \"реабилитирован\", \"реабилитирована\", \"реабилитировано\", \"реабилитированы\", \"реализован\", \"реализована\", \"реализовано\", \"реализованы\", \"ревизован\", \"ревизована\", \"ревизовано\", \"ревизованы\", \"регенерирован\", \"регенерирована\", \"регенерировано\", \"регенерированы\", \"регламентирован\", \"регламентирована\", \"регламентировано\", \"регламентированы\", \"редуцирован\", \"редуцирована\", \"редуцировано\", \"редуцированы\", \"резервирован\", \"резервирована\", \"резервировано\", \"резервированы\", \"резюмирован\", \"резюмирована\", \"резюмировано\", \"резюмированы\", \"реквизирован\", \"реквизирована\", \"реквизировано\", \"реквизированы\", \"рекомендован\", \"рекомендована\", \"рекомендовано\", \"рекомендованы\", \"реконструирован\", \"реконструирована\", \"реконструировано\", \"реконструированы\", \"рекрутирован\", \"рекрутирована\", \"рекрутировано\", \"рекрутированы\", \"ремонтирован\", \"ремонтирована\", \"ремонтировано\", \"ремонтированы\", \"репрессирован\", \"репрессирована\", \"репрессировано\", \"репрессированы\", \"реставрирован\", \"реставрирована\", \"реставрировано\", \"реставрированы\", \"реформирован\", \"реформирована\", \"реформировано\", \"реформированы\", \"решен\", \"решена\", \"решено\", \"решены\", \"рожден\", \"рождена\", \"рождено\", \"рождены\", \"романтизирован\", \"романтизирована\", \"романтизировано\", \"романтизированы\", \"рукоположен\", \"рукоположена\", \"рукоположено\", \"рукоположены\", \"русифицирован\", \"русифицирована\", \"русифицировано\", \"русифицированы\", \"саботирован\", \"саботирована\", \"саботировано\", \"саботированы\", \"сагитирован\", \"сагитирована\", \"сагитировано\", \"сагитированы\", \"санкционирован\", \"санкционирована\", \"санкционировано\", \"санкционированы\", \"сбалансирован\", \"сбалансирована\", \"сбалансировано\", \"сбалансированы\", \"сбережен\", \"сбережена\", \"сбережено\", \"сбережены\", \"сбит\", \"сбита\", \"сбито\", \"сбиты\", \"сближен\", \"сближена\", \"сближено\", \"сближены\", \"сбрит\", \"сбрита\", \"сбрито\", \"сбриты\", \"сброшен\", \"сброшена\", \"сброшено\", \"сброшены\", \"сбрызнут\", \"сбрызнута\", \"сбрызнуто\", \"сбрызнуты\", \"свален\", \"свалена\", \"свалено\", \"свалены\", \"сварганен\", \"сварганена\", \"сварганено\", \"сварганены\", \"сварен\", \"сварена\", \"сварено\", \"сварены\", \"сведен\", \"сведена\", \"сведено\", \"сведены\", \"свезен\", \"свезена\", \"свезено\", \"свезены\", \"свергнут\", \"свергнута\", \"свергнуто\", \"свергнуты\", \"сверен\", \"сверена\", \"сверено\", \"сверены\", \"свернут\", \"свернута\", \"свернуто\", \"свернуты\", \"сверстан\", \"сверстана\", \"сверстано\", \"сверстаны\", \"свершен\", \"свершена\", \"свершено\", \"свершены\", \"свешен\", \"свешена\", \"свешено\", \"свешены\", \"свинчен\", \"свинчена\", \"свинчено\", \"свинчены\", \"свистнут\", \"свистнута\", \"свистнуто\", \"свистнуты\", \"свит\", \"свита\", \"свито\", \"свиты\", \"сворован\", \"сворована\", \"своровано\", \"сворованы\", \"сворочен\", \"сворочена\", \"сворочено\", \"сворочены\", \"связан\", \"связана\", \"связано\", \"связаны\", \"сглажен\", \"сглажена\", \"сглажено\", \"сглажены\", \"сгноен\", \"сгноена\", \"сгноено\", \"сгноены\", \"сгорблена\", \"сгорблено\", \"сгорблены\", \"сготовлен\", \"сготовлена\", \"сготовлено\", \"сготовлены\", \"сгруппирован\", \"сгруппирована\", \"сгруппировано\", \"сгруппированы\", \"сгрызен\", \"сгрызена\", \"сгрызено\", \"сгрызены\", \"сгублен\", \"сгублена\", \"сгублено\", \"сгублены\", \"сгущен\", \"сгущена\", \"сгущено\", \"сгущены\", \"сдавлен\", \"сдавлена\", \"сдавлено\", \"сдавлены\", \"сдвинут\", \"сдвинута\", \"сдвинуто\", \"сдвинуты\", \"сдвоен\", \"сдвоена\", \"сдвоено\", \"сдвоены\", \"сделан\", \"сделана\", \"сделано\", \"сделаны\", \"сдержан\", \"сдержана\", \"сдержано\", \"сдержаны\", \"сдернут\", \"сдернута\", \"сдернуто\", \"сдернуты\", \"сдобрен\", \"сдобрена\", \"сдобрено\", \"сдобрены\", \"сдут\", \"сдута\", \"сдуто\", \"сдуты\", \"секуляризован\", \"секуляризована\", \"секуляризовано\", \"секуляризованы\", \"сенсибилизирован\", \"сенсибилизирована\", \"сенсибилизировано\", \"сенсибилизированы\", \"сервирован\", \"сервирована\", \"сервировано\", \"сервированы\", \"сжат\", \"сжата\", \"сжато\", \"сжаты\", \"сжеван\", \"сжевана\", \"сжевано\", \"сжеваны\", \"сжит\", \"сжита\", \"сжито\", \"сжиты\", \"сигнализирован\", \"сигнализирована\", \"сигнализировано\", \"сигнализированы\", \"симулирован\", \"симулирована\", \"симулировано\", \"симулированы\", \"синдицирован\", \"синдицирована\", \"синдицировано\", \"синдицированы\", \"синтезирован\", \"синтезирована\", \"синтезировано\", \"синтезированы\", \"синхронизирован\", \"синхронизирована\", \"синхронизировано\", \"синхронизированы\", \"систематизирован\", \"систематизирована\", \"систематизировано\", \"систематизированы\", \"сказан\", \"сказана\", \"сказано\", \"сказаны\", \"сказанут\", \"сказанута\", \"сказануто\", \"сказануты\", \"скачан\", \"скачана\", \"скачано\", \"скачаны\", \"скинут\", \"скинута\", \"скинуто\", \"скинуты\", \"складирован\", \"складирована\", \"складировано\", \"складированы\", \"склеван\", \"склевана\", \"склевано\", \"склеваны\", \"склеен\", \"склеена\", \"склеено\", \"склеены\", \"склонен\", \"склонена\", \"склонено\", \"склонены\", \"скован\", \"скована\", \"сковано\", \"скованы\", \"сколот\", \"сколота\", \"сколото\", \"сколоты\", \"сколочен\", \"сколочена\", \"сколочено\", \"сколочены\", \"скомандован\", \"скомандована\", \"скомандовано\", \"скомандованы\", \"скомкан\", \"скомкана\", \"скомкано\", \"скомканы\", \"скомпенсирован\", \"скомпенсирована\", \"скомпенсировано\", \"скомпенсированы\", \"скомпонован\", \"скомпонована\", \"скомпоновано\", \"скомпонованы\", \"скомпрометирован\", \"скомпрометирована\", \"скомпрометировано\", \"скомпрометированы\", \"сконструирован\", \"сконструирована\", \"сконструировано\", \"сконструированы\", \"сконцентрирован\", \"сконцентрирована\", \"сконцентрировано\", \"сконцентрированы\", \"скоординирован\", \"скоординирована\", \"скоординировано\", \"скоординированы\", \"скопирован\", \"скопирована\", \"скопировано\", \"скопированы\", \"скормлен\", \"скормлена\", \"скормлено\", \"скормлены\", \"скорректирован\", \"скорректирована\", \"скорректировано\", \"скорректированы\", \"скособочен\", \"скособочена\", \"скособочено\", \"скособочены\", \"скошен\", \"скошена\", \"скошено\", \"скошены\", \"скрашен\", \"скрашена\", \"скрашено\", \"скрашены\", \"скреплен\", \"скреплена\", \"скреплено\", \"скреплены\", \"скрещен\", \"скрещена\", \"скрещено\", \"скрещены\", \"скривлен\", \"скривлена\", \"скривлено\", \"скривлены\", \"скроен\", \"скроена\", \"скроено\", \"скроены\", \"скручен\", \"скручена\", \"скручено\", \"скручены\", \"скрыт\", \"скрыта\", \"скрыто\", \"скрыты\", \"скрючен\", \"скрючена\", \"скрючено\", \"скрючены\", \"скуплен\", \"скуплена\", \"скуплено\", \"скуплены\", \"скушан\", \"скушана\", \"скушано\", \"скушаны\", \"слажен\", \"слажена\", \"слажено\", \"слажены\", \"слеплен\", \"слеплена\", \"слеплено\", \"слеплены\", \"слизан\", \"слизана\", \"слизано\", \"слизаны\", \"слизнут\", \"слизнута\", \"слизнуто\", \"слизнуты\", \"слит\", \"слита\", \"слито\", \"слиты\", \"сличен\", \"сличена\", \"сличено\", \"сличены\", \"словлен\", \"словлена\", \"словлено\", \"словлены\", \"сложен\", \"сложена\", \"сложено\", \"сложены\", \"сломан\", \"сломана\", \"сломано\", \"сломаны\", \"сломлен\", \"сломлена\", \"сломлено\", \"сломлены\", \"слопан\", \"слопана\", \"слопано\", \"слопаны\", \"слуплен\", \"слуплена\", \"слуплено\", \"слуплены\", \"смазана\", \"смазано\", \"смазаны\", \"смастерен\", \"смастерена\", \"смастерено\", \"смастерены\", \"сменен\", \"сменена\", \"сменено\", \"сменены\", \"сменян\", \"сменяна\", \"сменяно\", \"сменяны\", \"смерен\", \"смерена\", \"смерено\", \"смерены\", \"сметен\", \"сметена\", \"сметено\", \"сметены\", \"смешан\", \"смешана\", \"смешано\", \"смешаны\", \"смещен\", \"смещена\", \"смещено\", \"смещены\", \"смирен\", \"смирена\", \"смирено\", \"смирены\", \"смоделирован\", \"смоделирована\", \"смоделировано\", \"смоделированы\", \"смонтирован\", \"смонтирована\", \"смонтировано\", \"смонтированы\", \"сморен\", \"сморена\", \"сморено\", \"сморены\", \"сморожен\", \"сморожена\", \"сморожено\", \"сморожены\", \"сморщен\", \"сморщена\", \"сморщено\", \"сморщены\", \"смотан\", \"смотана\", \"смотано\", \"смотаны\", \"смочен\", \"смочена\", \"смочено\", \"смочены\", \"смыт\", \"смыта\", \"смыто\", \"смыты\", \"смягчен\", \"смягчена\", \"смягчено\", \"смягчены\", \"смят\", \"смята\", \"смято\", \"смяты\", \"снабжен\", \"снабжена\", \"снабжено\", \"снабжены\", \"снаряжен\", \"снаряжена\", \"снаряжено\", \"снаряжены\", \"снесен\", \"снесена\", \"снесено\", \"снесены\", \"снижен\", \"снижена\", \"снижено\", \"снижены\", \"снискан\", \"снискана\", \"снискано\", \"снисканы\", \"сношен\", \"сношена\", \"сношено\", \"сношены\", \"снят\", \"снята\", \"снято\", \"сняты\", \"соблазнен\", \"соблазнена\", \"соблазнено\", \"соблазнены\", \"соблюден\", \"соблюдена\", \"соблюдено\", \"соблюдены\", \"собран\", \"собрана\", \"собрано\", \"собраны\", \"совершен\", \"совершена\", \"совершено\", \"совершены\", \"совмещен\", \"совмещена\", \"совмещено\", \"совмещены\", \"совращен\", \"совращена\", \"совращено\", \"совращены\", \"согласован\", \"согласована\", \"согласовано\", \"согласованы\", \"согнан\", \"согнана\", \"согнано\", \"согнаны\", \"согнут\", \"согнута\", \"согнуто\", \"согнуты\", \"согрет\", \"согрета\", \"согрето\", \"согреты\", \"содеян\", \"содеяна\", \"содеяно\", \"содеяны\", \"содран\", \"содрана\", \"содрано\", \"содраны\", \"соединен\", \"соединена\", \"соединено\", \"соединены\", \"сожжен\", \"сожжена\", \"сожжено\", \"сожжены\", \"сожран\", \"сожрана\", \"сожрано\", \"сожраны\", \"созван\", \"созвана\", \"созвано\", \"созваны\", \"сокращен\", \"сокращена\", \"сокращено\", \"сокращены\", \"сокрушен\", \"сокрушена\", \"сокрушено\", \"сокрушены\", \"сокрыт\", \"сокрыта\", \"сокрыто\", \"сокрыты\", \"соображен\", \"соображена\", \"соображено\", \"соображены\", \"сообщен\", \"сообщена\", \"сообщено\", \"сообщены\", \"сооружен\", \"сооружена\", \"сооружено\", \"сооружены\", \"соотнесен\", \"соотнесена\", \"соотнесено\", \"соотнесены\", \"сопоставлен\", \"сопоставлена\", \"сопоставлено\", \"сопоставлены\", \"сопровожден\", \"сопровождена\", \"сопровождено\", \"сопровождены\", \"сопряжен\", \"сопряжена\", \"сопряжено\", \"сопряжены\", \"сорван\", \"сорвана\", \"сорвано\", \"сорваны\", \"сориентирован\", \"сориентирована\", \"сориентировано\", \"сориентированы\", \"сосватан\", \"сосватана\", \"сосватано\", \"сосватаны\", \"соскребен\", \"соскребена\", \"соскребено\", \"соскребены\", \"сослан\", \"сослана\", \"сослано\", \"сосланы\", \"сослужен\", \"сослужена\", \"сослужено\", \"сослужены\", \"сосредоточен\", \"сосредоточена\", \"сосредоточено\", \"сосредоточены\", \"составлен\", \"составлена\", \"составлено\", \"составлены\", \"состарен\", \"состарена\", \"состарено\", \"состарены\", \"сострижен\", \"сострижена\", \"сострижено\", \"сострижены\", \"состроен\", \"состроена\", \"состроено\", \"состроены\", \"состряпан\", \"состряпана\", \"состряпано\", \"состряпаны\", \"состыкован\", \"состыкована\", \"состыковано\", \"состыкованы\", \"сосчитан\", \"сосчитана\", \"сосчитано\", \"сосчитаны\", \"сотворен\", \"сотворена\", \"сотворено\", \"сотворены\", \"соткан\", \"соткана\", \"соткано\", \"сотканы\", \"сотрясен\", \"сотрясена\", \"сотрясено\", \"сотрясены\", \"сохранен\", \"сохранена\", \"сохранено\", \"сохранены\", \"сочинен\", \"сочинена\", \"сочинено\", \"сочинены\", \"сочтен\", \"сочтена\", \"сочтено\", \"сочтены\", \"спалена\", \"спалено\", \"спалены\", \"спасен\", \"спасена\", \"спасено\", \"спасены\", \"спаян\", \"спаяна\", \"спаяно\", \"спаяны\", \"спеленан\", \"спеленана\", \"спеленано\", \"спеленаны\", \"сперт\", \"сперта\", \"сперто\", \"сперты\", \"спет\", \"спета\", \"спето\", \"спеты\", \"специализирован\", \"специализирована\", \"специализировано\", \"специализированы\", \"спешен\", \"спешена\", \"спешено\", \"спешены\", \"спилен\", \"спилена\", \"спилено\", \"спилены\", \"списан\", \"списана\", \"списано\", \"списаны\", \"спихнут\", \"спихнута\", \"спихнуто\", \"спихнуты\", \"сплавлен\", \"сплавлена\", \"сплавлено\", \"сплавлены\", \"спланирован\", \"спланирована\", \"спланировано\", \"спланированы\", \"сплетен\", \"сплетена\", \"сплетено\", \"сплетены\", \"сплочен\", \"сплочена\", \"сплочено\", \"сплочены\", \"сплюнут\", \"сплюнута\", \"сплюнуто\", \"сплюнуты\", \"сплющен\", \"сплющена\", \"сплющено\", \"сплющены\", \"сподоблен\", \"сподоблена\", \"сподоблено\", \"сподоблены\", \"сполоснут\", \"сполоснута\", \"сполоснуто\", \"сполоснуты\", \"спорот\", \"спорота\", \"спорото\", \"спороты\", \"справлен\", \"справлена\", \"справлено\", \"справлены\", \"спрессован\", \"спрессована\", \"спрессовано\", \"спрессованы\", \"спроважен\", \"спроважена\", \"спроважено\", \"спроважены\", \"спровоцирован\", \"спровоцирована\", \"спровоцировано\", \"спровоцированы\", \"спроектирован\", \"спроектирована\", \"спроектировано\", \"спроектированы\", \"спроецирован\", \"спроецирована\", \"спроецировано\", \"спроецированы\", \"спрошен\", \"спрошена\", \"спрошено\", \"спрошены\", \"спрятан\", \"спрятана\", \"спрятано\", \"спрятаны\", \"спущен\", \"спущена\", \"спущено\", \"спущены\", \"сработан\", \"сработана\", \"сработано\", \"сработаны\", \"сравнен\", \"сравнена\", \"сравнено\", \"сравнены\", \"сражен\", \"сражена\", \"сражено\", \"сражены\", \"сращен\", \"сращена\", \"сращено\", \"сращены\", \"срезан\", \"срезана\", \"срезано\", \"срезаны\", \"срисован\", \"срисована\", \"срисовано\", \"срисованы\", \"сровнян\", \"сровняна\", \"сровняно\", \"сровняны\", \"срубан\", \"срубана\", \"срубано\", \"срубаны\", \"срублен\", \"срублена\", \"срублено\", \"срублены\", \"ссажен\", \"ссажена\", \"ссажено\", \"ссажены\", \"ссужен\", \"ссужена\", \"ссужено\", \"ссужены\", \"стабилизирован\", \"стабилизирована\", \"стабилизировано\", \"стабилизированы\", \"станцеван\", \"станцевана\", \"станцевано\", \"станцеваны\", \"стащен\", \"стащена\", \"стащено\", \"стащены\", \"стерилизован\", \"стерилизована\", \"стерилизовано\", \"стерилизованы\", \"стерт\", \"стерта\", \"стерто\", \"стерты\", \"стесан\", \"стесана\", \"стесано\", \"стесаны\", \"стеснен\", \"стеснена\", \"стеснено\", \"стеснены\", \"стилизован\", \"стилизована\", \"стилизовано\", \"стилизованы\", \"стимулирован\", \"стимулирована\", \"стимулировано\", \"стимулированы\", \"стиснут\", \"стиснута\", \"стиснуто\", \"стиснуты\", \"столкнут\", \"столкнута\", \"столкнуто\", \"столкнуты\", \"стоптан\", \"стоптана\", \"стоптано\", \"стоптаны\", \"сточен\", \"сточена\", \"сточено\", \"сточены\", \"стравлен\", \"стравлена\", \"стравлено\", \"стравлены\", \"стрельнут\", \"стрельнута\", \"стрельнуто\", \"стрельнуты\", \"стреножен\", \"стреножена\", \"стреножено\", \"стреножены\", \"структурирован\", \"структурирована\", \"структурировано\", \"структурированы\", \"стряхнут\", \"стряхнута\", \"стряхнуто\", \"стряхнуты\", \"стукнут\", \"стукнута\", \"стукнуто\", \"стукнуты\", \"стырен\", \"стырена\", \"стырено\", \"стырены\", \"стянут\", \"стянута\", \"стянуто\", \"стянуты\", \"сублимирован\", \"сублимирована\", \"сублимировано\", \"сублимированы\", \"субсидирован\", \"субсидирована\", \"субсидировано\", \"субсидированы\", \"суммирован\", \"суммирована\", \"суммировано\", \"суммированы\", \"сунут\", \"сунута\", \"сунуто\", \"сунуты\", \"сфабрикован\", \"сфабрикована\", \"сфабриковано\", \"сфабрикованы\", \"сфокусирован\", \"сфокусирована\", \"сфокусировано\", \"сфокусированы\", \"сформирован\", \"сформирована\", \"сформировано\", \"сформированы\", \"сформулирован\", \"сформулирована\", \"сформулировано\", \"сформулированы\", \"сфотографирован\", \"сфотографирована\", \"сфотографировано\", \"сфотографированы\", \"схвачен\", \"схвачена\", \"схвачено\", \"схвачены\", \"схлопотан\", \"схлопотана\", \"схлопотано\", \"схлопотаны\", \"схоронен\", \"схоронена\", \"схоронено\", \"схоронены\", \"сцапан\", \"сцапана\", \"сцапано\", \"сцапаны\", \"сцементирован\", \"сцементирована\", \"сцементировано\", \"сцементированы\", \"сцеплен\", \"сцеплена\", \"сцеплено\", \"сцеплены\", \"сшит\", \"сшита\", \"сшито\", \"сшиты\", \"сыгран\", \"сыграна\", \"сыграно\", \"сыграны\", \"сэкономлен\", \"сэкономлена\", \"сэкономлено\", \"сэкономлены\", \"таранен\", \"таранена\", \"таранено\", \"таранены\", \"татуирован\", \"татуирована\", \"татуировано\", \"татуированы\", \"телеграфирован\", \"телеграфирована\", \"телеграфировано\", \"телеграфированы\", \"терроризирован\", \"терроризирована\", \"терроризировано\", \"терроризированы\", \"тиражирован\", \"тиражирована\", \"тиражировано\", \"тиражированы\", \"титулована\", \"титуловано\", \"титулованы\", \"ткнут\", \"ткнута\", \"ткнуто\", \"ткнуты\", \"толкнут\", \"толкнута\", \"толкнуто\", \"толкнуты\", \"тонизирован\", \"тонизирована\", \"тонизировано\", \"тонизированы\", \"тонирован\", \"тонирована\", \"тонировано\", \"тонированы\", \"торпедирован\", \"торпедирована\", \"торпедировано\", \"торпедированы\", \"травмирован\", \"травмирована\", \"травмировано\", \"травмированы\", \"транслирован\", \"транслирована\", \"транслировано\", \"транслированы\", \"транспортирован\", \"транспортирована\", \"транспортировано\", \"транспортированы\", \"трансформирован\", \"трансформирована\", \"трансформировано\", \"трансформированы\", \"трассирован\", \"трассирована\", \"трассировано\", \"трассированы\", \"трахнут\", \"трахнута\", \"трахнуто\", \"трахнуты\", \"треснут\", \"треснута\", \"треснуто\", \"треснуты\", \"тронут\", \"тронута\", \"тронуто\", \"тронуты\", \"трудоустроен\", \"трудоустроена\", \"трудоустроено\", \"трудоустроены\", \"турнут\", \"турнута\", \"турнуто\", \"турнуты\", \"тюкнут\", \"тюкнута\", \"тюкнуто\", \"тюкнуты\", \"тяпнут\", \"тяпнута\", \"тяпнуто\", \"тяпнуты\", \"убавлен\", \"убавлена\", \"убавлено\", \"убавлены\", \"убаюкан\", \"убаюкана\", \"убаюкано\", \"убаюканы\", \"убежден\", \"убеждена\", \"убеждено\", \"убеждены\", \"убелен\", \"убелена\", \"убелено\", \"убелены\", \"убережен\", \"убережена\", \"убережено\", \"убережены\", \"убит\", \"убита\", \"убито\", \"убиты\", \"ублажен\", \"ублажена\", \"ублажено\", \"ублажены\", \"убран\", \"убрана\", \"убрано\", \"убраны\", \"убыстрен\", \"убыстрена\", \"убыстрено\", \"убыстрены\", \"уважен\", \"уважена\", \"уважено\", \"уважены\", \"уварен\", \"уварена\", \"уварено\", \"уварены\", \"уведен\", \"уведена\", \"уведено\", \"уведены\", \"уведомлен\", \"уведомлена\", \"уведомлено\", \"уведомлены\", \"увезен\", \"увезена\", \"увезено\", \"увезены\", \"увековечен\", \"увековечена\", \"увековечено\", \"увековечены\", \"увеличен\", \"увеличена\", \"увеличено\", \"увеличены\", \"увенчан\", \"увенчана\", \"увенчано\", \"увенчаны\", \"уверен\", \"уверена\", \"уверено\", \"уверены\", \"увешан\", \"увешана\", \"увешано\", \"увешаны\", \"увешен\", \"увешена\", \"увешено\", \"увешены\", \"увидан\", \"увидана\", \"увидано\", \"увиданы\", \"увиден\", \"увидена\", \"увидено\", \"увидены\", \"увит\", \"увита\", \"увито\", \"увиты\", \"увлажнен\", \"увлажнена\", \"увлажнено\", \"увлажнены\", \"увлечен\", \"увлечена\", \"увлечено\", \"увлечены\", \"увожен\", \"увожена\", \"увожено\", \"увожены\", \"уволен\", \"уволена\", \"уволено\", \"уволены\", \"уворован\", \"уворована\", \"уворовано\", \"уворованы\", \"увязан\", \"увязана\", \"увязано\", \"увязаны\", \"угадан\", \"угадана\", \"угадано\", \"угаданы\", \"углублен\", \"углублена\", \"углублено\", \"углублены\", \"угляжен\", \"угляжена\", \"угляжено\", \"угляжены\", \"угнан\", \"угнана\", \"угнано\", \"угнаны\", \"угнетен\", \"угнетена\", \"угнетено\", \"угнетены\", \"уговорен\", \"уговорена\", \"уговорено\", \"уговорены\", \"угомонен\", \"угомонена\", \"угомонено\", \"угомонены\", \"угонян\", \"угоняна\", \"угоняно\", \"угоняны\", \"угоразжен\", \"угоразжена\", \"угоразжено\", \"угоразжены\", \"уготован\", \"уготована\", \"уготовано\", \"уготованы\", \"уготовлен\", \"уготовлена\", \"уготовлено\", \"уготовлены\", \"угощен\", \"угощена\", \"угощено\", \"угощены\", \"угроблен\", \"угроблена\", \"угроблено\", \"угроблены\", \"угрохан\", \"угрохана\", \"угрохано\", \"угроханы\", \"удавлен\", \"удавлена\", \"удавлено\", \"удавлены\", \"удален\", \"удалена\", \"удалено\", \"удалены\", \"ударен\", \"ударена\", \"ударено\", \"ударены\", \"удвоен\", \"удвоена\", \"удвоено\", \"удвоены\", \"уделан\", \"уделана\", \"уделано\", \"уделаны\", \"уделен\", \"уделена\", \"уделено\", \"уделены\", \"удержан\", \"удержана\", \"удержано\", \"удержаны\", \"удесятерен\", \"удесятерена\", \"удесятерено\", \"удесятерены\", \"удешевлен\", \"удешевлена\", \"удешевлено\", \"удешевлены\", \"удивлен\", \"удивлена\", \"удивлено\", \"удивлены\", \"удлинен\", \"удлинена\", \"удлинено\", \"удлинены\", \"удобрен\", \"удобрена\", \"удобрено\", \"удобрены\", \"удовлетворен\", \"удовлетворена\", \"удовлетворено\", \"удовлетворены\", \"удостоверен\", \"удостоверена\", \"удостоверено\", \"удостоверены\", \"удостоен\", \"удостоена\", \"удостоено\", \"удостоены\", \"удочерен\", \"удочерена\", \"удочерено\", \"удочерены\", \"удружен\", \"удружена\", \"удружено\", \"удружены\", \"удручен\", \"удручена\", \"удручено\", \"удручены\", \"удуман\", \"удумана\", \"удумано\", \"удуманы\", \"удушен\", \"удушена\", \"удушено\", \"удушены\", \"ужален\", \"ужалена\", \"ужалено\", \"ужалены\", \"ужаснут\", \"ужаснута\", \"ужаснуто\", \"ужаснуты\", \"ужат\", \"ужата\", \"ужато\", \"ужаты\", \"узаконен\", \"узаконена\", \"узаконено\", \"узаконены\", \"узнан\", \"узнана\", \"узнано\", \"узнаны\", \"узурпирован\", \"узурпирована\", \"узурпировано\", \"узурпированы\", \"указан\", \"указана\", \"указано\", \"указаны\", \"укатан\", \"укатана\", \"укатано\", \"укатаны\", \"укачан\", \"укачана\", \"укачано\", \"укачаны\", \"укачен\", \"укачена\", \"укачено\", \"укачены\", \"укокошен\", \"укокошена\", \"укокошено\", \"укокошены\", \"уколот\", \"уколота\", \"уколото\", \"уколоты\", \"укомплектован\", \"укомплектована\", \"укомплектовано\", \"укомплектованы\", \"укорен\", \"укорена\", \"укорено\", \"укорены\", \"укоренен\", \"укоренена\", \"укоренено\", \"укоренены\", \"укорочен\", \"укорочена\", \"укорочено\", \"укорочены\", \"украден\", \"украдена\", \"украдено\", \"украдены\", \"украшен\", \"украшена\", \"украшено\", \"украшены\", \"укреплен\", \"укреплена\", \"укреплено\", \"укреплены\", \"укрощен\", \"укрощена\", \"укрощено\", \"укрощены\", \"укрупнен\", \"укрупнена\", \"укрупнено\", \"укрупнены\", \"укрыт\", \"укрыта\", \"укрыто\", \"укрыты\", \"укупорен\", \"укупорена\", \"укупорено\", \"укупорены\", \"укутан\", \"укутана\", \"укутано\", \"укутаны\", \"укушен\", \"укушена\", \"укушено\", \"укушены\", \"улажен\", \"улажена\", \"улажено\", \"улажены\", \"уличен\", \"уличена\", \"уличено\", \"уличены\", \"уловлен\", \"уловлена\", \"уловлено\", \"уловлены\", \"уложен\", \"уложена\", \"уложено\", \"уложены\", \"уломан\", \"уломана\", \"уломано\", \"уломаны\", \"улучен\", \"улучена\", \"улучено\", \"улучены\", \"улучшен\", \"улучшена\", \"улучшено\", \"улучшены\", \"умален\", \"умалена\", \"умалено\", \"умалены\", \"уменьшен\", \"уменьшена\", \"уменьшено\", \"уменьшены\", \"умерен\", \"умерена\", \"умерено\", \"умерены\", \"умерщвлен\", \"умерщвлена\", \"умерщвлено\", \"умерщвлены\", \"умещен\", \"умещена\", \"умещено\", \"умещены\", \"умилен\", \"умилена\", \"умилено\", \"умилены\", \"умиротворен\", \"умиротворена\", \"умиротворено\", \"умиротворены\", \"умножен\", \"умножена\", \"умножено\", \"умножены\", \"умолен\", \"умолена\", \"умолено\", \"умолены\", \"уморен\", \"уморена\", \"уморено\", \"уморены\", \"умотан\", \"умотана\", \"умотано\", \"умотаны\", \"умудрен\", \"умудрена\", \"умудрено\", \"умудрены\", \"умыкнут\", \"умыкнута\", \"умыкнуто\", \"умыкнуты\", \"умыт\", \"умыта\", \"умыто\", \"умыты\", \"умят\", \"умята\", \"умято\", \"умяты\", \"унаследован\", \"унаследована\", \"унаследовано\", \"унаследованы\", \"унесен\", \"унесена\", \"унесено\", \"унесены\", \"унижен\", \"унижена\", \"унижено\", \"унижены\", \"унизан\", \"унизана\", \"унизано\", \"унизаны\", \"унифицирован\", \"унифицирована\", \"унифицировано\", \"унифицированы\", \"уничтожен\", \"уничтожена\", \"уничтожено\", \"уничтожены\", \"унюхан\", \"унюхана\", \"унюхано\", \"унюханы\", \"унят\", \"унята\", \"унято\", \"уняты\", \"упакован\", \"упакована\", \"упаковано\", \"упакованы\", \"упасен\", \"упасена\", \"упасено\", \"упасены\", \"упечен\", \"упечена\", \"упечено\", \"упечены\", \"уплачен\", \"уплачена\", \"уплачено\", \"уплачены\", \"уплотнен\", \"уплотнена\", \"уплотнено\", \"уплотнены\", \"уподоблен\", \"уподоблена\", \"уподоблено\", \"уподоблены\", \"упоен\", \"упоена\", \"упоено\", \"упоены\", \"упокоен\", \"упокоена\", \"упокоено\", \"упокоены\", \"уполномочен\", \"уполномочена\", \"уполномочено\", \"уполномочены\", \"упомнен\", \"упомнена\", \"упомнено\", \"упомнены\", \"упомянут\", \"упомянута\", \"упомянуто\", \"упомянуты\", \"упорядочен\", \"упорядочена\", \"упорядочено\", \"упорядочены\", \"употреблен\", \"употреблена\", \"употреблено\", \"употреблены\", \"упразднен\", \"упразднена\", \"упразднено\", \"упразднены\", \"упрежден\", \"упреждена\", \"упреждено\", \"упреждены\", \"упрекнут\", \"упрекнута\", \"упрекнуто\", \"упрекнуты\", \"упрочен\", \"упрочена\", \"упрочено\", \"упрочены\", \"упрошен\", \"упрошена\", \"упрошено\", \"упрошены\", \"упрощен\", \"упрощена\", \"упрощено\", \"упрощены\", \"упрятан\", \"упрятана\", \"упрятано\", \"упрятаны\", \"упущен\", \"упущена\", \"упущено\", \"упущены\", \"уравновешен\", \"уравновешена\", \"уравновешено\", \"уравновешены\", \"уравнян\", \"уравняна\", \"уравняно\", \"уравняны\", \"урегулирован\", \"урегулирована\", \"урегулировано\", \"урегулированы\", \"урезан\", \"урезана\", \"урезано\", \"урезаны\", \"урезонен\", \"урезонена\", \"урезонено\", \"урезонены\", \"уронен\", \"уронена\", \"уронено\", \"уронены\", \"усажен\", \"усажена\", \"усажено\", \"усажены\", \"усвоен\", \"усвоена\", \"усвоено\", \"усвоены\", \"усечен\", \"усечена\", \"усечено\", \"усечены\", \"усеян\", \"усеяна\", \"усеяно\", \"усеяны\", \"усижен\", \"усижена\", \"усижено\", \"усижены\", \"усилен\", \"усилена\", \"усилено\", \"усилены\", \"ускорен\", \"ускорена\", \"ускорено\", \"ускорены\", \"услан\", \"услана\", \"услано\", \"усланы\", \"усложнен\", \"усложнена\", \"усложнено\", \"усложнены\", \"услыхан\", \"услыхана\", \"услыхано\", \"услыханы\", \"услышан\", \"услышана\", \"услышано\", \"услышаны\", \"усмирен\", \"усмирена\", \"усмирено\", \"усмирены\", \"усмотрен\", \"усмотрена\", \"усмотрено\", \"усмотрены\", \"усовершенствован\", \"усовершенствована\", \"усовершенствовано\", \"усовершенствованы\", \"успокоен\", \"успокоена\", \"успокоено\", \"успокоены\", \"усреднен\", \"усреднена\", \"усреднено\", \"усреднены\", \"уставлен\", \"уставлена\", \"уставлено\", \"уставлены\", \"установлен\", \"установлена\", \"установлено\", \"установлены\", \"устлан\", \"устлана\", \"устлано\", \"устланы\", \"устранен\", \"устранена\", \"устранено\", \"устранены\", \"устрашен\", \"устрашена\", \"устрашено\", \"устрашены\", \"устремлен\", \"устремлена\", \"устремлено\", \"устремлены\", \"устроен\", \"устроена\", \"устроено\", \"устроены\", \"уступлен\", \"уступлена\", \"уступлено\", \"уступлены\", \"усугублен\", \"усугублена\", \"усугублено\", \"усугублены\", \"усыновлен\", \"усыновлена\", \"усыновлено\", \"усыновлены\", \"усыплен\", \"усыплена\", \"усыплено\", \"усыплены\", \"утаен\", \"утаена\", \"утаено\", \"утаены\", \"утащен\", \"утащена\", \"утащено\", \"утащены\", \"утвержден\", \"утверждена\", \"утверждено\", \"утверждены\", \"утеплен\", \"утеплена\", \"утеплено\", \"утеплены\", \"утерт\", \"утерта\", \"утерто\", \"утерты\", \"утерян\", \"утеряна\", \"утеряно\", \"утеряны\", \"утешен\", \"утешена\", \"утешено\", \"утешены\", \"утилизирован\", \"утилизирована\", \"утилизировано\", \"утилизированы\", \"утихомирен\", \"утихомирена\", \"утихомирено\", \"утихомирены\", \"утолен\", \"утолена\", \"утолено\", \"утолены\", \"утопан\", \"утопана\", \"утопано\", \"утопаны\", \"утоплен\", \"утоплена\", \"утоплено\", \"утоплены\", \"утоптан\", \"утоптана\", \"утоптано\", \"утоптаны\", \"уточнен\", \"уточнена\", \"уточнено\", \"уточнены\", \"утрамбован\", \"утрамбована\", \"утрамбовано\", \"утрамбованы\", \"утрачен\", \"утрачена\", \"утрачено\", \"утрачены\", \"утрирован\", \"утрирована\", \"утрировано\", \"утрированы\", \"утроен\", \"утроена\", \"утроено\", \"утроены\", \"утрясен\", \"утрясена\", \"утрясено\", \"утрясены\", \"утыкан\", \"утыкана\", \"утыкано\", \"утыканы\", \"утяжелен\", \"утяжелена\", \"утяжелено\", \"утяжелены\", \"утянут\", \"утянута\", \"утянуто\", \"утянуты\", \"ухвачен\", \"ухвачена\", \"ухвачено\", \"ухвачены\", \"ухлопан\", \"ухлопана\", \"ухлопано\", \"ухлопаны\", \"ухожен\", \"ухожена\", \"ухожено\", \"ухожены\", \"ухудшен\", \"ухудшена\", \"ухудшено\", \"ухудшены\", \"уценен\", \"уценена\", \"уценено\", \"уценены\", \"учинен\", \"учинена\", \"учинено\", \"учинены\", \"учрежден\", \"учреждена\", \"учреждено\", \"учреждены\", \"учтен\", \"учтена\", \"учтено\", \"учтены\", \"учуян\", \"учуяна\", \"учуяно\", \"учуяны\", \"ушит\", \"ушита\", \"ушито\", \"ушиты\", \"ущемлен\", \"ущемлена\", \"ущемлено\", \"ущемлены\", \"ущипнут\", \"ущипнута\", \"ущипнуто\", \"ущипнуты\", \"уязвлен\", \"уязвлена\", \"уязвлено\", \"уязвлены\", \"уяснен\", \"уяснена\", \"уяснено\", \"уяснены\", \"фальсифицирован\", \"фальсифицирована\", \"фальсифицировано\", \"фальсифицированы\", \"фиксирован\", \"фиксирована\", \"фиксировано\", \"фиксированы\", \"финансирован\", \"финансирована\", \"финансировано\", \"финансированы\", \"фланкирован\", \"фланкирована\", \"фланкировано\", \"фланкированы\", \"форсирован\", \"форсирована\", \"форсировано\", \"форсированы\", \"характеризован\", \"характеризована\", \"характеризовано\", \"характеризованы\", \"хлестнут\", \"хлестнута\", \"хлестнуто\", \"хлестнуты\", \"хлопнут\", \"хлопнута\", \"хлопнуто\", \"хлопнуты\", \"цапнут\", \"цапнута\", \"цапнуто\", \"цапнуты\", \"царапнут\", \"царапнута\", \"царапнуто\", \"царапнуты\", \"централизован\", \"централизована\", \"централизовано\", \"централизованы\", \"центрифугирован\", \"центрифугирована\", \"центрифугировано\", \"центрифугированы\", \"цивилизован\", \"цивилизована\", \"цивилизовано\", \"цивилизованы\", \"черкнут\", \"черкнута\", \"черкнуто\", \"черкнуты\", \"четвертован\", \"четвертована\", \"четвертовано\", \"четвертованы\", \"чмокнут\", \"чмокнута\", \"чмокнуто\", \"чмокнуты\", \"шарахнут\", \"шарахнута\", \"шарахнуто\", \"шарахнуты\", \"швырнут\", \"швырнута\", \"швырнуто\", \"швырнуты\", \"шлепнут\", \"шлепнута\", \"шлепнуто\", \"шлепнуты\", \"шмякнут\", \"шмякнута\", \"шмякнуто\", \"шмякнуты\", \"шокирован\", \"шокирована\", \"шокировано\", \"шокированы\", \"щелкнут\", \"щелкнута\", \"щелкнуто\", \"щелкнуты\", \"эвакуирован\", \"эвакуирована\", \"эвакуировано\", \"эвакуированы\", \"экипирован\", \"экипирована\", \"экипировано\", \"экипированы\", \"экранизирован\", \"экранизирована\", \"экранизировано\", \"экранизированы\", \"экранирован\", \"экранирована\", \"экранировано\", \"экранированы\", \"экспонирован\", \"экспонирована\", \"экспонировано\", \"экспонированы\", \"экспортирован\", \"экспортирована\", \"экспортировано\", \"экспортированы\", \"экспроприирован\", \"экспроприирована\", \"экспроприировано\", \"экспроприированы\", \"экстрагирован\", \"экстрагирована\", \"экстрагировано\", \"экстрагированы\", \"экстраполирован\", \"экстраполирована\", \"экстраполировано\", \"экстраполированы\", \"эмитирован\", \"эмитирована\", \"эмитировано\", \"эмитированы\", \"эпатирован\", \"эпатирована\", \"эпатировано\", \"эпатированы\", \"этапирован\", \"этапирована\", \"этапировано\", \"этапированы\", \"эшелонирован\", \"эшелонирована\", \"эшелонировано\", \"эшелонированы\", \"явлен\", \"явлена\", \"явлено\", \"явлены\"];\n// Participles that can take a \"ё\"-form. This and the following verb groups should be taken away as soon as Ё-functionality\n// Is implemented\nvar orthographicFormsPassiveVerbs = [\"благословлён\", \"введён\", \"ввезён\", \"вдохновлён\", \"вживлён\", \"взбешён\", \"взбодрён\", \"взведён\", \"взвихрён\", \"взгромозждён\", \"взращён\", \"взрыхлён\", \"видоизменён\", \"включён\", \"вколочён\", \"вкраплён\", \"вкушён\", \"вменён\", \"вмещён\", \"внедрён\", \"внесён\", \"внушён\", \"вовлечён\", \"водворён\", \"водружён\", \"возблагодарён\", \"возбуждён\", \"возведён\", \"возвещён\", \"возвращён\", \"возглашён\", \"возлюблён\", \"возмещён\", \"возмущён\", \"вознаграждён\", \"вознесён\", \"возобновлён\", \"возомнён\", \"возрождён\", \"вонждён\", \"воображён\", \"воодушевлён\", \"вооружён\", \"воплощён\", \"вопрошён\", \"ворочён\", \"воскрешён\", \"воспалён\", \"воспламенён\", \"воспрещён\", \"воспроизведён\", \"восстановлён\", \"восхищён\", \"вперён\", \"впечатлён\", \"вплетён\", \"впряжён\", \"вразумлён\", \"врублён\", \"вручён\", \"вселён\", \"вскипячён\", \"вскормлён\", \"вскружён\", \"всполошён\", \"выведён\", \"доведён\", \"довезён\", \"довершён\", \"догляжён\", \"договорён\", \"дозволён\", \"донесён\", \"допечён\", \"дотерплён\", \"завезён\", \"завершён\", \"завлечён\", \"завожён\", \"заворожён\", \"загашён\", \"заглублён\", \"заглушён\", \"заговорён\", \"загорожён\", \"загромозждён\", \"загружён\", \"загрязнён\", \"задурён\", \"задушён\", \"задымлён\", \"заземлён\", \"зазубрён\", \"закалён\", \"заклеймён\", \"заключён\", \"закопчё\", \"закреплён\", \"закруглён\", \"замедлён\", \"заменён\", \"заметён\", \"замещён\", \"заморён\", \"занесён\", \"заострён\", \"запалён\", \"запасён\", \"запечатлён\", \"запечён\", \"заплетён\", \"заполонён\", \"запорошён\", \"запрещён\", \"запримечён\", \"запрошён\", \"запряжён\", \"запылён\", \"заражён\", \"заряжён\", \"заселён\", \"заслонён\", \"засолён\", \"застолблён\", \"застопорён\", \"затаён\", \"затворён\", \"затемнён\", \"затенён\", \"затмлён\", \"затруднён\", \"захламлён\", \"зацеплён\", \"зачехлён\", \"зачищён\", \"зачтён\", \"зашевелён\", \"защемлён\", \"защищён\", \"избавлён\", \"изборозждён\", \"изведён\", \"извещён\", \"извинён\", \"извлечён\", \"извращён\", \"измельчён\", \"изменён\", \"измышлён\", \"изнурён\", \"изобличён\", \"изображён\", \"изобретён\", \"изречён\", \"изумлён\", \"изъявлён\", \"искажён\", \"исключён\", \"искоренён\", \"искривлён\", \"искуплён\", \"испепелён\", \"испечён\", \"испещрён\", \"иссечён\", \"иссушён\", \"истончён\", \"истощён\", \"истреблён\", \"казнён\", \"крещён\", \"лишён\", \"наводнён\", \"навострён\", \"наговорён\", \"награждён\", \"нагромозждён\", \"наделён\", \"накалён\", \"наклонён\", \"наметён\", \"нанесён\", \"напечён\", \"наплетён\", \"напоён\", \"напряжён\", \"наречён\", \"нарождён\", \"насаждён\", \"населён\", \"насмешён\", \"насторожён\", \"натравлён\", \"невзлюблён\", \"недогляжён\", \"недоговорён\", \"недооценён\", \"перечтён\", \"пленён\", \"побеждён\", \"побелён\", \"побережён\", \"погашён\", \"поглощён\", \"погребён\", \"погружён\", \"подведён\", \"подвезён\", \"подговорён\", \"подгребён\", \"подключён\", \"подкреплён\", \"подкручён\", \"подменён\", \"поднесён\", \"подожжён\", \"подпалён\", \"подразделён\", \"подрублён\", \"подрулён\", \"подселён\", \"подсечён\", \"подслащён\", \"подсоединён\", \"подстелён\", \"подстережён\", \"подтверждён\", \"подцеплён\", \"подчинён\", \"подчищён\", \"поздравлён\", \"позолочён\", \"покорён\", \"покривлён\", \"помещён\", \"понесён\", \"поощрён\", \"порабощён\", \"поражён\", \"порешён\", \"порождён\", \"посвящён\", \"посеребрён\", \"посмотрён\", \"посрамлён\", \"постановлён\", \"потереблён\", \"похоронён\", \"почтён\", \"пошевелён\", \"пощажён\", \"пояснён\", \"превращён\", \"прегражён\", \"предварён\", \"предвосхищён\", \"предопределён\", \"предостережён\", \"предотвращён\", \"предохранён\", \"предпочтён\", \"предречён\", \"предрешён\", \"предупреждён\", \"презрён\", \"преклонён\", \"прекращён\", \"преломлён\", \"прельщён\", \"преображён\", \"преодолён\", \"преподнесён\", \"пресечён\", \"преступлён\", \"претворён\", \"претерплён\", \"прибережён\", \"приближён\", \"приведён\", \"привезён\", \"привлечён\", \"привнесён\", \"приворожён\", \"пригвозжён\", \"приглашён\", \"приглушён\", \"приговорён\", \"приголублён\", \"приземлён\", \"приклонён\", \"прикреплён\", \"применён\", \"принаряжён\", \"принесён\", \"принуждён\", \"приободрён\", \"приобретён\", \"приобщён\", \"приостановлён\", \"приотворён\", \"припасён\", \"припечён\", \"приплетён\", \"приручён\", \"прислонён\", \"присмотрён\", \"присовокуплён\", \"присоединён\", \"присочинён\", \"приспособлён\", \"приструнён\", \"присуждён\", \"притворён\", \"провезён\", \"проговорён\", \"продешевлён\", \"продлён\", \"прозвонён\", \"произведён\", \"произнесён\", \"прокалён\", \"прокипячён\", \"прокопчён\", \"пронзён\", \"пропылён\", \"просверлён\", \"просветлён\", \"просвещён\", \"просечён\", \"просквожён\", \"проторён\", \"прочтён\", \"прощён\", \"проявлён\", \"прояснён\", \"разбережён\", \"разбомблён\", \"разведён\", \"развезён\", \"развеселён\", \"разворошён\", \"развращён\", \"разглашён\", \"разговорён\", \"разгорожён\", \"разгорячён\", \"разграфлён\", \"разгребён\", \"разгромлён\", \"разделён\", \"раздражён\", \"раздразнён\", \"раздроблён\", \"разлеплён\", \"разлучён\", \"размещён\", \"размозжён\", \"разморён\", \"размягчён\", \"разнесён\", \"разоблачён\", \"разобщён\", \"разожжён\", \"разозлён\", \"разорён\", \"разоружён\", \"разрежён\", \"разрешён\", \"разубеждён\", \"разъединён\", \"разъярён\", \"разъяснён\", \"раскалён\", \"расклешён\", \"раскрепощён\", \"раскроён\", \"распалён\", \"распотрошён\", \"распределён\", \"распространён\", \"распряжён\", \"распрямлён\", \"рассмешён\", \"растворён\", \"растлён\", \"растормошён\", \"растрясён\", \"расценён\", \"расцеплён\", \"расчленён\", \"расшевелён\", \"расщеплён\", \"сбережён\", \"свершён\", \"сгноён\", \"сгущён\", \"сожжён\", \"склонён\", \"скреплён\", \"скрещён\", \"скривлён\", \"скручён\", \"сличён\", \"словлён\", \"сметён\", \"смещён\", \"смущён\", \"смягчён\", \"снабжён\", \"снаряжён\", \"снесён\", \"соблазнён\", \"соблюдён\", \"совершён\", \"совмещён\", \"совращён\", \"соединён\", \"сокращён\", \"сокрушён\", \"соображён\", \"сообщён\", \"сооружён\", \"соотнесён\", \"сопоставлён\", \"сопровождён\", \"сопряжён\", \"сотворён\", \"сотрясён\", \"сохранён\", \"сочинён\", \"сочтён\", \"спалён\", \"сплетён\", \"сравнён\", \"сражён\", \"стеснён\", \"съязвлён\", \"убеждён\", \"убелён\", \"убережён\", \"ублажён\", \"убыстрён\", \"уведён\", \"увезён\", \"увлажнён\", \"увлечён\", \"углублён\", \"угнетён\", \"уговорён\", \"угомонён\", \"угощён\", \"удесятерён\", \"удешевлён\", \"удлинён\", \"удобрён\", \"удовлетворён\", \"удочерён\", \"удручён\", \"укоренён\", \"укреплён\", \"укрощён\", \"укрупнён\", \"уличён\", \"улучён\", \"умалён\", \"умерщвлён\", \"умещён\", \"умилён\", \"умиротворён\", \"умолён\", \"уморён\", \"умудрён\", \"унесён\", \"упасён\", \"упечён\", \"уплотнён\", \"упоён\", \"употреблён\", \"упразднён\", \"упреждён\", \"упрощён\", \"усечён\", \"усложнён\", \"усреднён\", \"устранён\", \"устрашён\", \"устремлён\", \"усыновлён\", \"усыплён\", \"утаён\", \"утверждён\", \"утеплён\", \"утолён\", \"утомлён\", \"уточнён\", \"утрясён\", \"утяжелён\", \"учреждён\", \"учтён\", \"ущемлён\", \"уязвлён\", \"уяснён\", \"явлён\"];\n// Participles that have ё in the middle of the word. This and the previous verb groups should be taken away as soon as\n// Ё-functionality is implemented.\nvar alternativeVerbForms = [\"ввёрнут\", \"ввёрнута\", \"ввёрнуто\", \"ввёрнуты\", \"вздёрнут\", \"вздёрнута\", \"вздёрнуто\", \"вздёрнуты\", \"втёрт\", \"втёрта\", \"втёрто\", \"втёрты\", \"завёрнут\", \"завёрнута\", \"завёрнуто\", \"завёрнуты\", \"задёрнут\", \"задёрнута\", \"задёрнуто\", \"задёрнуты\", \"замётан\", \"замётана\", \"замётано\", \"замётаны\", \"запелёнан\", \"запелёнана\", \"запелёнано\", \"запелёнаны\", \"заплёван\", \"заплёвана\", \"заплёвано\", \"заплёваны\", \"затёрт\", \"затёрта\", \"затёрто\", \"затёрты\", \"зачёркнут\", \"зачёркнута\", \"зачёркнуто\", \"зачёркнуты\", \"зачёрпнут\", \"зачёрпнута\", \"зачёрпнуто\", \"зачёрпнуты\", \"зачёсан\", \"зачёсана\", \"зачёсано\", \"зачёсаны\", \"зашёптан\", \"зашёптана\", \"зашёптано\", \"зашёптаны\", \"защёлкнут\", \"защёлкнута\", \"защёлкнуто\", \"защёлкнуты\", \"искорёжен\", \"искорёжена\", \"искорёжено\", \"искорёжены\", \"истёрт\", \"истёрта\", \"истёрто\", \"истёрты\", \"исчёркан\", \"исчёркана\", \"исчёркано\", \"исчёрканы\", \"исчёрпан\", \"исчёрпана\", \"исчёрпано\", \"исчёрпаны\", \"навёрнут\", \"навёрнута\", \"навёрнуто\", \"навёрнуты\", \"намётан\", \"намётана\", \"намётано\", \"намётаны\", \"наплёван\", \"наплёвана\", \"наплёвано\", \"наплёваны\", \"натёрт\", \"натёрта\", \"натёрто\", \"натёрты\", \"начёртан\", \"начёртана\", \"начёртано\", \"начёртаны\", \"начёрчен\", \"начёрчена\", \"начёрчено\", \"начёрчены\", \"нашёптан\", \"нашёптана\", \"нашёптано\", \"нашёптаны\", \"перечёркнут\", \"перечёркнута\", \"перечёркнуто\", \"перечёркнуты\", \"повёрнут\", \"повёрнута\", \"повёрнуто\", \"повёрнуты\", \"подвёрнут\", \"подвёрнута\", \"подвёрнуто\", \"подвёрнуты\", \"подёрнут\", \"подёрнута\", \"подёрнуто\", \"подёрнуты\", \"поддёрнут\", \"поддёрнута\", \"поддёрнуто\", \"поддёрнуты\", \"подмётан\", \"подмётана\", \"подмётано\", \"подмётаны\", \"подпёрт\", \"подпёрта\", \"подпёрто\", \"подпёрты\", \"подчёркнут\", \"подчёркнута\", \"подчёркнуто\", \"подчёркнуты\", \"пожёван\", \"пожёвана\", \"пожёвано\", \"пожёваны\", \"покорёжен\", \"покорёжена\", \"покорёжено\", \"покорёжены\", \"потёрт\", \"потёрта\", \"потёрто\", \"потёрты\", \"пощёлкан\", \"пощёлкана\", \"пощёлкано\", \"пощёлканы\", \"почёрпнут\", \"почёрпнута\", \"почёрпнуто\", \"почёрпнуты\", \"почёсан\", \"почёсана\", \"почёсано\", \"почёсаны\", \"притёрт\", \"притёрта\", \"притёрто\", \"притёрты\", \"причёсан\", \"причёсана\", \"причёсано\", \"причёсаны\", \"прищёлкнут\", \"прищёлкнута\", \"прищёлкнуто\", \"прищёлкнуты\", \"провёрнут\", \"провёрнута\", \"провёрнуто\", \"провёрнуты\", \"продёрнут\", \"продёрнута\", \"продёрнуто\", \"продёрнуты\", \"прожёван\", \"прожёвана\", \"прожёвано\", \"прожёваны\", \"простёрт\", \"простёрта\", \"простёрто\", \"простёрты\", \"протёрт\", \"протёрта\", \"протёрто\", \"протёрты\", \"прочёсан\", \"прочёсана\", \"прочёсано\", \"прочёсаны\", \"прошёптан\", \"прошёптана\", \"прошёптано\", \"прошёптаны\", \"развёрнут\", \"развёрнута\", \"развёрнуто\", \"развёрнуты\", \"раздёрнут\", \"раздёрнута\", \"раздёрнуто\", \"раздёрнуты\", \"разжёван\", \"разжёвана\", \"разжёвано\", \"разжёваны\", \"размётан\", \"размётана\", \"размётано\", \"размётаны\", \"распростёрт\", \"распростёрта\", \"распростёрто\", \"распростёрты\", \"растёрт\", \"растёрта\", \"растёрто\", \"растёрты\", \"расчёсан\", \"расчёсана\", \"расчёсано\", \"расчёсаны\", \"свёрнут\", \"свёрнута\", \"свёрнуто\", \"свёрнуты\", \"свёрстан\", \"свёрстана\", \"свёрстано\", \"свёрстаны\", \"сдёрнут\", \"сдёрнута\", \"сдёрнуто\", \"сдёрнуты\", \"сжёван\", \"сжёвана\", \"сжёвано\", \"сжёваны\", \"склёван\", \"склёвана\", \"склёвано\", \"склёваны\", \"спелёнан\", \"спелёнана\", \"спелёнано\", \"спелёнаны\", \"стёрт\", \"стёрта\", \"стёрто\", \"стёрты\", \"стёсан\", \"стёсана\", \"стёсано\", \"стёсаны\", \"утёрт\", \"утёрта\", \"утёрто\", \"утёрты\", \"утомлён\", \"утомлёна\", \"утомлёно\", \"утомлёны\", \"чёркнут\", \"чёркнута\", \"чёркнуто\", \"чёркнуты\", \"щёлкнут\", \"щёлкнута\", \"щёлкнуто\", \"щёлкнуты\"];\n// These participles can also be adjectives, so we need to be careful. If they cause a lot of trouble, can be easily\n// Removed from analysis, if not they can also be merged with the big list.\nvar adjectiveParticiples = [\"взбудоражен\", \"взволнован\", \"возбужден\", \"возмущен\", \"воспитан\", \"востребован\", \"выдрессирован\", \"газирован\", \"доношен\", \"заболочен\", \"заинтересован\", \"заинтригован\", \"закален\", \"зачарован\", \"зашифрован\", \"изогнут\", \"изогнута\", \"изогнуто\", \"изогнуты\", \"коррумпирован\", \"мотивирован\", \"помят\", \"помята\", \"помято\", \"помяты\", \"поношен\", \"потаскан\", \"потаскана\", \"потаскано\", \"потасканы\", \"сгорблен\", \"сконфужен\", \"сконфужена\", \"сконфужено\", \"сконфужены\", \"смазан\", \"титулован\", \"утомлен\", \"утомлена\", \"утомлено\", \"утомлены\"];\n/**\n * Returns lists with passive verb-forms to be used by the passive voice assessment.\n * @returns {Object} The object with passive verb-form lists.\n */\nmodule.exports = function () {\n  return {\n    all: passiveVerbs.concat(orthographicFormsPassiveVerbs, alternativeVerbForms, adjectiveParticiples)\n  };\n};\n//# sourceMappingURL=participlesShortenedList.js.map\n//# sourceMappingURL=participlesShortenedList.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/passiveVoice/participlesShortenedList.js\n// module id = 1506\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/passiveVoice/participlesShortenedList.js?");

/***/ }),
/* 1507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar indices = __webpack_require__(1114);\nvar getIndicesOfList = indices.getIndicesByWordList;\nvar filterIndices = indices.filterIndices;\nvar sortIndices = indices.sortIndices;\nvar stripSpaces = __webpack_require__(84);\nvar normalizeSingleQuotes = __webpack_require__(328).normalizeSingle;\nvar arrayToRegex = __webpack_require__(391);\nvar getWordIndices = __webpack_require__(1108);\nvar includesIndex = __webpack_require__(1253);\nvar followsIndex = __webpack_require__(1508);\nvar filter = __webpack_require__(112);\nvar isUndefined = __webpack_require__(66);\nvar includes = __webpack_require__(147);\nvar map = __webpack_require__(63);\nvar forEach = __webpack_require__(32);\n// English-specific variables and imports.\nvar SentencePartEnglish = __webpack_require__(1509);\nvar auxiliariesEnglish = __webpack_require__(1111)().all;\nvar stopwordsEnglish = __webpack_require__(1510)();\nvar stopCharacterRegexEnglish = /([:,]|('ll)|('ve))(?=[ \\n\\r\\t'\"+\\-»«‹›<>])/ig;\nvar verbEndingInIngRegex = /\\w+ing(?=$|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig;\nvar ingExclusionArray = [\"king\", \"cling\", \"ring\", \"being\", \"thing\", \"something\", \"anything\"];\n// French-specific variables and imports.\nvar SentencePartFrench = __webpack_require__(1511);\nvar auxiliariesFrench = __webpack_require__(1512)();\nvar stopwordsFrench = __webpack_require__(1513)();\nvar stopCharacterRegexFrench = /(,)(?=[ \\n\\r\\t'\"+\\-»«‹›<>])/ig;\nvar followingAuxiliaryExceptionWordsFrench = [\"le\", \"la\", \"les\", \"une\", \"l'un\", \"l'une\"];\nvar reflexivePronounsFrench = [\"se\", \"me\", \"te\", \"s'y\", \"m'y\", \"t'y\", \"nous nous\", \"vous vous\"];\nvar directPrecedenceExceptionRegexFrench = arrayToRegex(reflexivePronounsFrench);\nvar elisionAuxiliaryExceptionWords = [\"c'\", \"s'\", \"peut-\"];\nvar elisionAuxiliaryExceptionRegex = arrayToRegex(elisionAuxiliaryExceptionWords, true);\n// Spanish-specific variables and imports.\nvar SentencePartSpanish = __webpack_require__(1514);\nvar auxiliariesSpanish = __webpack_require__(1515)();\nvar stopwordsSpanish = __webpack_require__(1516)();\nvar followingAuxiliaryExceptionWordsSpanish = [\"el\", \"la\", \"los\", \"las\", \"una\"];\n// Italian-specific variables and imports.\nvar SentencePartItalian = __webpack_require__(1517);\nvar auxiliariesItalian = __webpack_require__(1518)();\nvar stopwordsItalian = __webpack_require__(1519)();\nvar followingAuxiliaryExceptionWordsItalian = [\"il\", \"i\", \"la\", \"le\", \"lo\", \"gli\", \"uno\", \"una\"];\nvar reflexivePronounsItalian = [\"mi\", \"ti\", \"si\", \"ci\", \"vi\"];\nvar directPrecedenceExceptionRegexItalian = arrayToRegex(reflexivePronounsItalian);\n/*\n * Variables applying to multiple languages\n * This regex applies to Spanish and Italian\n */\nvar stopCharacterRegexOthers = /([:,])(?=[ \\n\\r\\t'\"+\\-»«‹›<>])/ig;\n// The language-specific variables used to split sentences into sentence parts.\nvar languageVariables = {\n    en: {\n        stopwords: stopwordsEnglish,\n        auxiliaryRegex: arrayToRegex(auxiliariesEnglish),\n        SentencePart: SentencePartEnglish,\n        auxiliaries: auxiliariesEnglish,\n        stopCharacterRegex: stopCharacterRegexEnglish\n    },\n    fr: {\n        stopwords: stopwordsFrench,\n        auxiliaryRegex: arrayToRegex(auxiliariesFrench),\n        SentencePart: SentencePartFrench,\n        auxiliaries: auxiliariesFrench,\n        stopCharacterRegex: stopCharacterRegexFrench,\n        followingAuxiliaryExceptionRegex: arrayToRegex(followingAuxiliaryExceptionWordsFrench),\n        directPrecedenceExceptionRegex: directPrecedenceExceptionRegexFrench\n    },\n    es: {\n        stopwords: stopwordsSpanish,\n        auxiliaryRegex: arrayToRegex(auxiliariesSpanish),\n        SentencePart: SentencePartSpanish,\n        auxiliaries: auxiliariesSpanish,\n        stopCharacterRegex: stopCharacterRegexOthers,\n        followingAuxiliaryExceptionRegex: arrayToRegex(followingAuxiliaryExceptionWordsSpanish)\n    },\n    it: {\n        stopwords: stopwordsItalian,\n        auxiliaryRegex: arrayToRegex(auxiliariesItalian),\n        SentencePart: SentencePartItalian,\n        auxiliaries: auxiliariesItalian,\n        stopCharacterRegex: stopCharacterRegexOthers,\n        followingAuxiliaryExceptionRegex: arrayToRegex(followingAuxiliaryExceptionWordsItalian),\n        directPrecedenceExceptionRegex: directPrecedenceExceptionRegexItalian\n    }\n};\n/**\n * Gets active verbs (ending in ing) to determine sentence breakers in English.\n *\n * @param {string} sentence The sentence to get the active verbs from.\n * @returns {Array} The array with valid matches.\n */\nvar getVerbsEndingInIng = function getVerbsEndingInIng(sentence) {\n    // Matches the sentences with words ending in ing.\n    var matches = sentence.match(verbEndingInIngRegex) || [];\n    // Filters out words ending in -ing that aren't verbs.\n    return filter(matches, function (match) {\n        return !includes(ingExclusionArray, stripSpaces(match));\n    });\n};\n/**\n * Gets stop characters to determine sentence breakers.\n *\n * @param {string} sentence The sentence to get the stop characters from.\n * @param {string} language The language for which to get the stop characters.\n * @returns {Array} The array with stop characters.\n */\nvar getStopCharacters = function getStopCharacters(sentence, language) {\n    var stopCharacterRegex = languageVariables[language].stopCharacterRegex;\n    var match = void 0;\n    var matches = [];\n    stopCharacterRegex.lastIndex = 0;\n    while ((match = stopCharacterRegex.exec(sentence)) !== null) {\n        matches.push({\n            index: match.index,\n            match: match[0]\n        });\n    }\n    return matches;\n};\n/**\n * Filters auxiliaries preceded by a reflexive pronoun.\n *\n * @param {string} text The text part in which to check.\n * @param {Array} auxiliaryMatches The auxiliary matches for which to check.\n * @param {string} language The language for which to check auxiliary precedence exceptions.\n *\n * @returns {Array} The filtered list of auxiliary indices.\n */\nvar auxiliaryPrecedenceExceptionFilter = function auxiliaryPrecedenceExceptionFilter(text, auxiliaryMatches, language) {\n    var directPrecedenceExceptionMatches = getWordIndices(text, languageVariables[language].directPrecedenceExceptionRegex);\n    forEach(auxiliaryMatches, function (auxiliaryMatch) {\n        if (includesIndex(directPrecedenceExceptionMatches, auxiliaryMatch.index)) {\n            auxiliaryMatches = auxiliaryMatches.filter(function (auxiliaryObject) {\n                return auxiliaryObject.index !== auxiliaryMatch.index;\n            });\n        }\n    });\n    return auxiliaryMatches;\n};\n/**\n * Filters auxiliaries followed by a word on the followingAuxiliaryExceptionWords list.\n *\n * @param {string} text The text part in which to check.\n * @param {Array} auxiliaryMatches The auxiliary matches for which to check.\n * @param {string} language The language for which to filter the auxiliaries.\n * @returns {Array} The filtered list of auxiliary indices.\n */\nvar followingAuxiliaryExceptionFilter = function followingAuxiliaryExceptionFilter(text, auxiliaryMatches, language) {\n    var followingAuxiliaryExceptionRegex = languageVariables[language].followingAuxiliaryExceptionRegex;\n    var followingAuxiliaryExceptionMatches = getWordIndices(text, followingAuxiliaryExceptionRegex);\n    forEach(auxiliaryMatches, function (auxiliaryMatch) {\n        if (followsIndex(followingAuxiliaryExceptionMatches, auxiliaryMatch)) {\n            auxiliaryMatches = auxiliaryMatches.filter(function (auxiliaryObject) {\n                return auxiliaryObject.index !== auxiliaryMatch.index;\n            });\n        }\n    });\n    return auxiliaryMatches;\n};\n/**\n * Filters auxiliaries preceded by an elided word (e.g., s') on the elisionAuxiliaryExceptionWords list.\n *\n * @param {string} text The text part in which to check.\n * @param {Array} auxiliaryMatches The auxiliary matches for which to check.\n * @returns {Array} The filtered list of auxiliary indices.\n */\nvar elisionAuxiliaryExceptionFilter = function elisionAuxiliaryExceptionFilter(text, auxiliaryMatches) {\n    var elisionAuxiliaryExceptionMatches = getWordIndices(text, elisionAuxiliaryExceptionRegex);\n    forEach(auxiliaryMatches, function (auxiliaryMatch) {\n        if (includesIndex(elisionAuxiliaryExceptionMatches, auxiliaryMatch.index, false)) {\n            auxiliaryMatches = auxiliaryMatches.filter(function (auxiliaryObject) {\n                return auxiliaryObject.index !== auxiliaryMatch.index;\n            });\n        }\n    });\n    return auxiliaryMatches;\n};\n/**\n * Gets the indexes of sentence breakers (auxiliaries, stopwords and stop characters;\n * in English also active verbs) to determine sentence parts.\n * Indices are filtered because there could be duplicate matches, like \"even though\" and \"though\".\n * In addition, 'having' will be matched both as a -ing verb as well as an auxiliary.\n *\n * @param {string} sentence The sentence to check for indices of sentence breakers.\n * @param {string} language The language for which to match the sentence breakers.\n * @returns {Array} The array with valid indices to use for determining sentence parts.\n */\nvar getSentenceBreakers = function getSentenceBreakers(sentence, language) {\n    sentence = sentence.toLocaleLowerCase();\n    var stopwords = languageVariables[language].stopwords;\n    var auxiliaries = languageVariables[language].auxiliaries;\n    var auxiliaryIndices = getIndicesOfList(auxiliaries, sentence);\n    var stopwordIndices = getIndicesOfList(stopwords, sentence);\n    var stopCharacterIndices = getStopCharacters(sentence, language);\n    var indices = void 0;\n    // Concat all indices arrays, filter them and sort them.\n    switch (language) {\n        case \"fr\":\n            // Filters auxiliaries matched in the sentence based on a precedence exception filter.\n            auxiliaryIndices = auxiliaryPrecedenceExceptionFilter(sentence, auxiliaryIndices, \"fr\");\n            // Filters auxiliaries matched in the sentence based on a elision exception filter.\n            auxiliaryIndices = elisionAuxiliaryExceptionFilter(sentence, auxiliaryIndices);\n            indices = [].concat(auxiliaryIndices, stopwordIndices, stopCharacterIndices);\n            break;\n        case \"es\":\n            indices = [].concat(auxiliaryIndices, stopwordIndices, stopCharacterIndices);\n            break;\n        case \"it\":\n            // Filters auxiliaries matched in the sentence based on a precedence exception filter.\n            auxiliaryIndices = auxiliaryPrecedenceExceptionFilter(sentence, auxiliaryIndices, \"it\");\n            indices = [].concat(auxiliaryIndices, stopwordIndices, stopCharacterIndices);\n            break;\n        case \"en\":\n        default:\n            var ingVerbs = getVerbsEndingInIng(sentence);\n            var ingVerbsIndices = getIndicesOfList(ingVerbs, sentence);\n            indices = [].concat(auxiliaryIndices, stopwordIndices, ingVerbsIndices, stopCharacterIndices);\n            break;\n    }\n    indices = filterIndices(indices);\n    return sortIndices(indices);\n};\n/**\n * Gets the auxiliaries from a sentence.\n *\n * @param {string} sentencePart The part of the sentence to match for auxiliaries.\n * @param {string} language The language for which to match the auxiliaries.\n * @returns {Array} All formatted matches from the sentence part.\n */\nvar getAuxiliaryMatches = function getAuxiliaryMatches(sentencePart, language) {\n    var auxiliaryRegex = languageVariables[language].auxiliaryRegex;\n    var auxiliaryMatches = sentencePart.match(auxiliaryRegex) || [];\n    switch (language) {\n        case \"fr\":\n        case \"es\":\n        case \"it\":\n            // An array with the matched auxiliaries and their indices.\n            var auxiliaryMatchIndices = getIndicesOfList(auxiliaryMatches, sentencePart);\n            if (language === \"fr\" || language === \"it\") {\n                // Filters auxiliaries matched in the sentence part based on a precedence exception filter.\n                auxiliaryMatchIndices = auxiliaryPrecedenceExceptionFilter(sentencePart, auxiliaryMatchIndices, language);\n            }\n            // Filters auxiliaries matched in the sentence part based on a exception filter for words following the auxiliary.\n            auxiliaryMatchIndices = followingAuxiliaryExceptionFilter(sentencePart, auxiliaryMatchIndices, language);\n            // An array with the matched auxiliary verbs (without indices).\n            var auxiliaryMatchWords = [];\n            forEach(auxiliaryMatchIndices, function (auxiliaryMatchIndex) {\n                auxiliaryMatchWords.push(auxiliaryMatchIndex.match);\n            });\n            return map(auxiliaryMatchWords, function (auxiliaryMatch) {\n                return stripSpaces(auxiliaryMatch);\n            });\n        case \"en\":\n        default:\n            return map(auxiliaryMatches, function (auxiliaryMatch) {\n                return stripSpaces(auxiliaryMatch);\n            });\n    }\n};\n/**\n * Gets the sentence parts from a sentence by determining sentence breakers.\n *\n * @param {string} sentence The sentence to split up in sentence parts.\n * @param {string} language The language for which to get the sentence parts.\n * @returns {Array} The array with all parts of a sentence that have an auxiliary.\n */\nvar getSentenceParts = function getSentenceParts(sentence, language) {\n    var sentenceParts = [];\n    var auxiliaryRegex = languageVariables[language].auxiliaryRegex;\n    var SentencePart = languageVariables[language].SentencePart;\n    sentence = normalizeSingleQuotes(sentence);\n    // First check if there is an auxiliary in the sentence.\n    if (sentence.match(auxiliaryRegex) === null) {\n        return sentenceParts;\n    }\n    var indices = getSentenceBreakers(sentence, language);\n    // Get the words after the found auxiliary.\n    for (var i = 0; i < indices.length; i++) {\n        var endIndex = sentence.length;\n        if (!isUndefined(indices[i + 1])) {\n            endIndex = indices[i + 1].index;\n        }\n        // Cut the sentence from the current index to the endIndex (start of next breaker, of end of sentence).\n        var sentencePart = stripSpaces(sentence.substr(indices[i].index, endIndex - indices[i].index));\n        var auxiliaryMatches = getAuxiliaryMatches(sentencePart, language);\n        // If a sentence part doesn't have an auxiliary, we don't need it, so it can be filtered out.\n        if (auxiliaryMatches.length !== 0) {\n            sentenceParts.push(new SentencePart(sentencePart, auxiliaryMatches));\n        }\n    }\n    return sentenceParts;\n};\n/**\n * Split the sentence in sentence parts based on auxiliaries.\n *\n * @param {string} sentence The sentence to split in parts.\n * @param {string} language The language for which to get the sentence parts.\n * @returns {Array} A list with sentence parts.\n */\nmodule.exports = function (sentence, language) {\n    return getSentenceParts(sentence, language);\n};\n//# sourceMappingURL=getSentenceParts.js.map\n//# sourceMappingURL=getSentenceParts.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getSentenceParts.js\n// module id = 1507\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getSentenceParts.js?");

/***/ }),
/* 1508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isEmpty = __webpack_require__(97);\nvar forEach = __webpack_require__(32);\nvar includes = __webpack_require__(147);\n/**\n * Checks whether a given word is followed by any word from a given list.\n *\n * @param {Array} followingWords The array of objects with matches and indices.\n * @param {Object} match The object with the match and index to test the following words for.\n *\n * @returns {boolean} Returns true if the match is followed by a given word, otherwise returns false.\n */\nmodule.exports = function (followingWords, match) {\n    if (isEmpty(followingWords)) {\n        return false;\n    }\n    // The followingWordIndices include the preceding space.\n    var wordAfterMatchIndex = match.index + match.match.length;\n    var followingWordsIndices = [];\n    forEach(followingWords, function (followingWord) {\n        followingWordsIndices.push(followingWord.index);\n    });\n    return includes(followingWordsIndices, wordAfterMatchIndex);\n};\n//# sourceMappingURL=followsIndex.js.map\n//# sourceMappingURL=followsIndex.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/followsIndex.js\n// module id = 1508\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/followsIndex.js?");

/***/ }),
/* 1509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar SentencePart = __webpack_require__(394);\nvar getParticiples = __webpack_require__(392);\n/**\n * Creates a English specific sentence part.\n *\n * @param {string} sentencePartText The text from the sentence part.\n * @param {Array} auxiliaries The list of auxiliaries from the sentence part.\n * @param {string} locale The locale used for this sentence part.\n * @constructor\n */\nvar EnglishSentencePart = function EnglishSentencePart(sentencePartText, auxiliaries, locale) {\n  SentencePart.call(this, sentencePartText, auxiliaries, locale);\n};\n__webpack_require__(79).inherits(EnglishSentencePart, SentencePart);\n/**\n * Returns the participle objects for the participles found in the sentence part.\n * @returns {Array} The list of participle objects.\n */\nEnglishSentencePart.prototype.getParticiples = function () {\n  return getParticiples(this.getSentencePartText(), this.getAuxiliaries(), \"en\");\n};\nmodule.exports = EnglishSentencePart;\n//# sourceMappingURL=SentencePart.js.map\n//# sourceMappingURL=SentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/SentencePart.js\n// module id = 1509\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/SentencePart.js?");

/***/ }),
/* 1510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with stopwords for the English passive voice assessment.\n * @returns {Array} The list with stopwords.\n */\n\nmodule.exports = function () {\n  return [\"to\", \"which\", \"who\", \"whom\", \"that\", \"whose\", \"after\", \"although\", \"as\", \"because\", \"before\", \"even if\", \"even though\", \"how\", \"if\", \"in order that\", \"inasmuch\", \"lest\", \"once\", \"provided\", \"since\", \"so that\", \"than\", \"though\", \"till\", \"unless\", \"until\", \"when\", \"whenever\", \"where\", \"whereas\", \"wherever\", \"whether\", \"while\", \"why\", \"by the time\", \"supposing\", \"no matter\", \"how\", \"what\", \"won't\", \"do\", \"does\", \"–\", \"and\", \"but\", \"or\"];\n};\n//# sourceMappingURL=stopwords.js.map\n//# sourceMappingURL=stopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/stopwords.js\n// module id = 1510\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/passiveVoice/stopwords.js?");

/***/ }),
/* 1511 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar SentencePart = __webpack_require__(394);\nvar getParticiples = __webpack_require__(392);\n/**\n * Creates a French-specific sentence part.\n *\n * @param {string} sentencePartText The text from the sentence part.\n * @param {Array} auxiliaries The list with auxiliaries.\n * @constructor\n */\nvar FrenchSentencePart = function FrenchSentencePart(sentencePartText, auxiliaries) {\n  SentencePart.call(this, sentencePartText, auxiliaries, \"fr_FR\");\n};\n__webpack_require__(79).inherits(FrenchSentencePart, SentencePart);\n/**\n * Returns the participles found in the sentence part.\n *\n * @returns {Array} The array of Participle Objects.\n */\nFrenchSentencePart.prototype.getParticiples = function () {\n  return getParticiples(this.getSentencePartText(), this.getAuxiliaries(), \"fr\");\n};\nmodule.exports = FrenchSentencePart;\n//# sourceMappingURL=SentencePart.js.map\n//# sourceMappingURL=SentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/SentencePart.js\n// module id = 1511\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/SentencePart.js?");

/***/ }),
/* 1512 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with auxiliaries for the French passive voice assessment.\n * @returns {Array} The list with auxiliaries.\n */\n\nmodule.exports = function () {\n  return [\"être\", \"d'être\", \"suis\", \"es\", \"est\", \"sommes\", \"êtes\", \"sont\", \"n'est\", \"n'es\", \"n'êtes\", \"été\", \"j'étais\", \"étais\", \"était\", \"étions\", \"étiez\", \"étaient\", \"c'était\", \"n'étais\", \"n'était\", \"n'étions\", \"n'étiez\", \"n'étaient\", \"serai\", \"seras\", \"sera\", \"serons\", \"serez\", \"seront\", \"sois\", \"soit\", \"soyons\", \"soyez\", \"soient\", \"fusse\", \"fusses\", \"fût\", \"fussions\", \"fussiez\", \"fussent\", \"serais\", \"serait\", \"serions\", \"seriez\", \"seraient\", \"fus\", \"fut\", \"fûmes\", \"fûtes\", \"furent\", \"suis-je\", \"es-tu\", \"est-il\", \"est-elle\", \"est-on\", \"sommes-nous\", \"êtes-vous\", \"sont-ils\", \"sont-elles\", \"est-ce\", \"étais-je\", \"étais-tu\", \"était-il\", \"était-elle\", \"était-on\", \"était-ce\", \"étions-nous\", \"étiez-vous\", \"étaient-ils\", \"étaient-elles\", \"serai-je\", \"seras-tu\", \"sera-t-il\", \"sera-t-elle\", \"sera-t-on\", \"sera-ce\", \"serons-nous\", \"serez-vous\", \"seront-ils\", \"seront-elles\", \"serais-je\", \"serais-tu\", \"serait-il\", \"serait-elle\", \"serait-on\", \"serait-ce\", \"serions-nous\", \"seriez-vous\", \"seraient-ils\", \"seraient-elles\", \"fus-je\", \"fus-tu\", \"fut-il\", \"fut-elle\", \"fut-on\", \"fut-ce\", \"fûmes-nous\", \"fûtes-vous\", \"furent-ils\", \"furent-elles\"];\n};\n//# sourceMappingURL=auxiliaries.js.map\n//# sourceMappingURL=auxiliaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/auxiliaries.js\n// module id = 1512\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/auxiliaries.js?");

/***/ }),
/* 1513 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with stopwords for the French passive voice assessment.\n * @returns {Array} The list with stopwords.\n */\n\nmodule.exports = function () {\n  return [\"et\", \"ou\", \"car\", \"or\", \"puisque\", \"puisqu'il\", \"puisqu'ils\", \"puisqu'elle\", \"puisqu'elles\", \"puisqu'un\", \"puisqu'une\", \"puisqu'on\", \"quand\", \"lorsque\", \"lorsqu'il\", \"lorsqu'elle\", \"lorsqu'ils\", \"lorsqu'elles\", \"lorsqu'on\", \"lorsqu'un\", \"lorsqu'une\", \"quoique\", \"quoiqu'il\", \"quoiqu'ils\", \"quoiqu'elle\", \"quoiqu'elles\", \"quoiqu'on\", \"quoiqu'un\", \"quoiqu'une\", \"qu'elle\", \"qu'il\", \"qu'ils\", \"qu'elles\", \"qu'on\", \"qu'un\", \"qu'une\", \"si\", \"s'ils\", \"s'il\", \"quand bien même\", \"pourquoi\", \"après\", \"avant\", \"afin de\", \"compte tenu de\", \"pour ne pas dire\", \"sinon\", \"une fois\", \"sitôt\", \"dont\", \"lequel\", \"laquelle\", \"lesquels\", \"lesquelles\", \"auquel\", \"auxquels\", \"auxquelles\", \"duquel\", \"desquels\", \"desquelles\", \"qui\", \"où\", \"d'où\", \":\", \"allé\", \"entré\", \"resté\", \"retombé\", \"apparu\", \"réapparu\", \"devenu\", \"redevenu\", \"intervenu\", \"provenu\", \"resurvenu\", \"survenu\", \"allés\", \"entrés\", \"restés\", \"retombés\", \"apparus\", \"réapparus\", \"devenus\", \"redevenus\", \"intervenus\", \"provenus\", \"resurvenus\", \"survenus\", \"allée\", \"entrée\", \"restée\", \"retombée\", \"apparue\", \"réapparue\", \"devenue\", \"redevenue\", \"intervenue\", \"provenue\", \"resurvenue\", \"survenue\", \"allées\", \"entrées\", \"restées\", \"retombées\", \"apparues\", \"réapparues\", \"devenues\", \"redevenues\", \"intervenues\", \"provenues\", \"resurvenues\", \"survenues\"];\n};\n//# sourceMappingURL=stopwords.js.map\n//# sourceMappingURL=stopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/stopwords.js\n// module id = 1513\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/passiveVoice/stopwords.js?");

/***/ }),
/* 1514 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar SentencePart = __webpack_require__(394);\nvar getParticiples = __webpack_require__(392);\n/**\n * Creates a Spanish-specific sentence part.\n *\n * @param {string} sentencePartText The text from the sentence part.\n * @param {Array} auxiliaries The list with auxiliaries.\n * @constructor\n */\nvar SpanishSentencePart = function SpanishSentencePart(sentencePartText, auxiliaries) {\n  SentencePart.call(this, sentencePartText, auxiliaries, \"es_ES\");\n};\n__webpack_require__(79).inherits(SpanishSentencePart, SentencePart);\n/**\n * Returns the participles found in the sentence part.\n *\n * @returns {Array} The array of Participle Objects.\n */\nSpanishSentencePart.prototype.getParticiples = function () {\n  return getParticiples(this.getSentencePartText(), this.getAuxiliaries(), \"es\");\n};\nmodule.exports = SpanishSentencePart;\n//# sourceMappingURL=SentencePart.js.map\n//# sourceMappingURL=SentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/SentencePart.js\n// module id = 1514\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/SentencePart.js?");

/***/ }),
/* 1515 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with auxiliaries for the Spanish passive voice assessment.\n * @returns {Array} The list with auxiliaries.\n */\n\nmodule.exports = function () {\n  return [\"ser\", \"soy\", \"eres\", \"es\", \"somos\", \"sois\", \"son\", \"fui\", \"fuiste\", \"fue\", \"fuimos\", \"fuisteis\", \"fueron\", \"era\", \"eras\", \"era\", \"éramos\", \"erais\", \"eran\", \"sería\", \"serías\", \"seríamos\", \"seríais\", \"serían\", \"seré\", \"serás\", \"será\", \"seremos\", \"seréis\", \"serán\", \"seas\", \"sea\", \"seamos\", \"seáis\", \"sean\", \"fuera\", \"fueras\", \"fuéramos\", \"fuerais\", \"fueran\", \"fuese\", \"fueses\", \"fuésemos\", \"fueseis\", \"fuesen\", \"fuere\", \"fueres\", \"fuéremos\", \"fuereis\", \"fueren\", \"sé\", \"sed\", \"siendo\", \"sido\"];\n};\n//# sourceMappingURL=auxiliaries.js.map\n//# sourceMappingURL=auxiliaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/auxiliaries.js\n// module id = 1515\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/auxiliaries.js?");

/***/ }),
/* 1516 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with stopwords for the Spanish passive voice assessment.\n * @returns {Array} The list with stopwords.\n */\n\nmodule.exports = function () {\n  return [\"pero\", \"ora\", \"aunque\", \"aun\", \"mientras\", \"porque\", \"apenas\", \"si\", \"antes\", \"después\", \"cómo\", \"como\", \"empero\", \"que\", \"cuanto\", \"cuando\", \"cual\", \"cuales\", \"quién\", \"quien\", \"quienes\", \"dónde\", \"adónde\", \"cuyo\", \"cuyos\", \"cuya\", \"cuyas\"];\n};\n//# sourceMappingURL=stopwords.js.map\n//# sourceMappingURL=stopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/stopwords.js\n// module id = 1516\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/passiveVoice/stopwords.js?");

/***/ }),
/* 1517 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar SentencePart = __webpack_require__(394);\nvar getParticiples = __webpack_require__(392);\n/**\n * Creates an Italian-specific sentence part.\n *\n * @param {string} sentencePartText The text from the sentence part.\n * @param {Array} auxiliaries The list with auxiliaries.\n * @constructor\n */\nvar ItalianSentencePart = function ItalianSentencePart(sentencePartText, auxiliaries) {\n  SentencePart.call(this, sentencePartText, auxiliaries, \"it_IT\");\n};\n__webpack_require__(79).inherits(ItalianSentencePart, SentencePart);\n/**\n * Returns the participles found in the sentence part.\n *\n * @returns {Array} The array of Participle Objects.\n */\nItalianSentencePart.prototype.getParticiples = function () {\n  return getParticiples(this.getSentencePartText(), this.getAuxiliaries(), \"it\");\n};\nmodule.exports = ItalianSentencePart;\n//# sourceMappingURL=SentencePart.js.map\n//# sourceMappingURL=SentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/SentencePart.js\n// module id = 1517\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/SentencePart.js?");

/***/ }),
/* 1518 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with auxiliaries for the Italian passive voice assessment.\n * @returns {Array} The list with auxiliaries.\n */\n\nmodule.exports = function () {\n  return [\"fui\", \"fu\", \"fosti\", \"fummo\", \"foste\", \"furono\", \"stato\", \"stati\", \"stata\", \"state\", \"venire\", \"vengo\", \"vieni\", \"viene\", \"veniamo\", \"venite\", \"vengono\", \"venivo\", \"venivi\", \"veniva\", \"venivamo\", \"venivate\", \"venivano\", \"verrò\", \"verrai\", \"verrà\", \"verremo\", \"verrete\", \"verranno\", \"venni\", \"venisti\", \"venne\", \"venimmo\", \"veniste\", \"vennero\", \"verrei\", \"verresti\", \"verrebbe\", \"verremmo\", \"verreste\", \"verrebbero\", \"venga\", \"veniamo\", \"venite\", \"vengano\", \"veniate\", \"venissi\", \"venisse\", \"venissimo\", \"veniste\", \"venissero\", \"andare\", \"vado\", \"vai\", \"va\", \"andiamo\", \"andate\", \"vanno\", \"andavo\", \"andavi\", \"andava\", \"andavamo\", \"andavate\", \"andavano\", \"vada\", \"andiate\", \"andante\", \"andato\", \"andassi\", \"andasse\", \"andassimo\", \"andaste\", \"andassero\", \"andai\", \"andasti\", \"andò\", \"andammo\", \"andarono\", \"andrò\", \"andrai\", \"andrà\", \"andremo\", \"andrete\", \"andranno\", \"andrei\", \"andresti\", \"andrebbe\", \"andremmo\", \"andreste\", \"andrebbero\", \"vadano\", \"andando\"];\n};\n//# sourceMappingURL=auxiliaries.js.map\n//# sourceMappingURL=auxiliaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/auxiliaries.js\n// module id = 1518\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/auxiliaries.js?");

/***/ }),
/* 1519 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n  * Returns a list with stopwords for the Italian passive voice assessment.\n  * @returns {Array} The list with stopwords.\n  */\n\nmodule.exports = function () {\n  return [\"a condizione che\", \"a meno che non\", \"a patto che\", \"a seconda che\", \"acché\", \"affinché\", \"al fine di\", \"allorché\", \"allorquando\", \"anche se\", \"anziché\", \"avvegnaché\", \"basta que\", \"benché\", \"beninteso que\", \"chi\", \"cui\", \"dal momento che\", \"dopo che\", \"dove\", \"finché non\", \"fintantoché\", \"i quali\", \"il quale\", \"in caso\", \"in modo che\", \"la quale\", \"le quali\", \"malgrado\", \"mentre\", \"nel caso in cui\", \"nel eventualità che\", \"nonostante che\", \"ogni volta che\", \"per il fatto che\", \"perché\", \"piuttosto che\", \"piuttosto di\", \"poiche\", \"prima che\", \"purché\", \"qualora\", \"quando\", \"quantunque\", \"quello che\", \"sebbene\", \"senza che\", \"siccome\", \"tranne che\", \"una volta che\"];\n};\n//# sourceMappingURL=stopwords.js.map\n//# sourceMappingURL=stopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/stopwords.js\n// module id = 1519\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/passiveVoice/stopwords.js?");

/***/ }),
/* 1520 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar forEach = __webpack_require__(32);\nvar isEmpty = __webpack_require__(97);\nvar map = __webpack_require__(63);\nvar arrayToRegex = __webpack_require__(391);\nvar stripSpaces = __webpack_require__(84);\n// German-specific imports.\nvar SentencePartGerman = __webpack_require__(1521);\nvar auxiliariesGerman = __webpack_require__(570)().allAuxiliaries;\nvar stopwordsGerman = __webpack_require__(1522)();\n// Dutch-specific imports.\nvar SentencePartDutch = __webpack_require__(1523);\nvar stopwordsDutch = __webpack_require__(1524)();\nvar auxiliariesDutch = __webpack_require__(1257)();\n// The language-specific variables.\nvar languageVariables = {\n    de: {\n        SentencePart: SentencePartGerman,\n        stopwordRegex: arrayToRegex(stopwordsGerman),\n        auxiliaryRegex: arrayToRegex(auxiliariesGerman),\n        locale: \"de_DE\"\n    },\n    nl: {\n        SentencePart: SentencePartDutch,\n        stopwordRegex: arrayToRegex(stopwordsDutch),\n        auxiliaryRegex: arrayToRegex(auxiliariesDutch),\n        locale: \"nl_NL\"\n    }\n};\n/**\n * Strips spaces from the auxiliary matches.\n *\n * @param {Array} matches A list with matches of auxiliaries.\n * @returns {Array} A list with matches with spaces removed.\n */\nfunction sanitizeMatches(matches) {\n    return map(matches, function (match) {\n        return stripSpaces(match);\n    });\n}\n/**\n * Splits sentences into sentence parts based on stopwords.\n *\n * @param {string} sentence The sentence to split.\n * @param {Array} stopwords The array with matched stopwords.\n * @returns {Array} The array with sentence parts.\n */\nfunction splitOnWords(sentence, stopwords) {\n    var splitSentences = [];\n    // Split the sentence on each found stopword and push this part in an array.\n    forEach(stopwords, function (stopword) {\n        var splitSentence = sentence.split(stopword);\n        if (!isEmpty(splitSentence[0])) {\n            splitSentences.push(splitSentence[0]);\n        }\n        var startIndex = sentence.indexOf(stopword);\n        var endIndex = sentence.length;\n        sentence = stripSpaces(sentence.substr(startIndex, endIndex));\n    });\n    // Push the remainder of the sentence in the sentence parts array.\n    splitSentences.push(sentence);\n    return splitSentences;\n}\n/**\n * Creates sentence parts based on split sentences.\n\n * @param {Array}   sentences   The array with split sentences.\n * @param {string}  language    The language for which to create sentence parts.\n *\n * @returns {Array} The array with sentence parts.\n */\nfunction createSentenceParts(sentences, language) {\n    var auxiliaryRegex = languageVariables[language].auxiliaryRegex;\n    var SentencePart = languageVariables[language].SentencePart;\n    var sentenceParts = [];\n    forEach(sentences, function (part) {\n        var foundAuxiliaries = sanitizeMatches(part.match(auxiliaryRegex || []));\n        sentenceParts.push(new SentencePart(part, foundAuxiliaries, languageVariables[language].locale));\n    });\n    return sentenceParts;\n}\n/**\n * Splits the sentence into sentence parts based on stopwords.\n *\n * @param {string} sentence The text to split into sentence parts.\n * @param {string} language The language for which to split sentences.\n *\n * @returns {Array} The array with sentence parts.\n */\nfunction splitSentence(sentence, language) {\n    var stopwordRegex = languageVariables[language].stopwordRegex;\n    var stopwords = sentence.match(stopwordRegex) || [];\n    var splitSentences = splitOnWords(sentence, stopwords);\n    return createSentenceParts(splitSentences, language);\n}\nmodule.exports = splitSentence;\n//# sourceMappingURL=getSentencePartsSplitOnStopwords.js.map\n//# sourceMappingURL=getSentencePartsSplitOnStopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getSentencePartsSplitOnStopwords.js\n// module id = 1520\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/passiveVoice/periphrastic/getSentencePartsSplitOnStopwords.js?");

/***/ }),
/* 1521 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar SentencePart = __webpack_require__(394);\nvar getParticiples = __webpack_require__(1256);\n/**\n * Creates a German-specific sentence part.\n *\n * @param {string} sentencePartText The text from the sentence part.\n * @param {Array} auxiliaries The list with auxiliaries.\n * @constructor\n */\nvar GermanSentencePart = function GermanSentencePart(sentencePartText, auxiliaries) {\n  SentencePart.call(this, sentencePartText, auxiliaries, \"de_DE\");\n};\n__webpack_require__(79).inherits(GermanSentencePart, SentencePart);\n/**\n * Returns the participles found in the sentence part.\n *\n * @returns {Array} The array of Participle Objects.\n */\nGermanSentencePart.prototype.getParticiples = function () {\n  return getParticiples(this.getSentencePartText(), this.getAuxiliaries());\n};\nmodule.exports = GermanSentencePart;\n//# sourceMappingURL=SentencePart.js.map\n//# sourceMappingURL=SentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/SentencePart.js\n// module id = 1521\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/SentencePart.js?");

/***/ }),
/* 1522 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with stopwords for the German passive voice assessment.\n * @returns {Array} The list with stopwords.\n */\n\nmodule.exports = function () {\n  return [\":\", \"aber\", \"als\", \"bevor\", \"bis\", \"da\", \"damit\", \"daß\", \"dass\", \"denn\", \"doch\", \"ehe\", \"falls\", \"gleichwohl\", \"indem\", \"indes\", \"indessen\", \"insofern\", \"insoweit\", \"nachdem\", \"nun\", \"ob\", \"obgleich\", \"obschon\", \"obwohl\", \"obzwar\", \"oder\", \"seitdem\", \"sobald\", \"sodass\", \"sofern\", \"solange\", \"sondern\", \"sooft\", \"soviel\", \"soweit\", \"sowie\", \"trotz\", \"und\", \"ungeachtet\", \"waehrend\", \"während\", \"weil\", \"welche\", \"welchem\", \"welchen\", \"welcher\", \"welches\", \"wem\", \"wen\", \"wenn\", \"wenngleich\", \"wennschon\", \"wer\", \"wes\", \"wessen\", \"wie\", \"wiewohl\", \"wohingegen\", \"zumal\"];\n};\n//# sourceMappingURL=stopwords.js.map\n//# sourceMappingURL=stopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/stopwords.js\n// module id = 1522\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/passiveVoice/stopwords.js?");

/***/ }),
/* 1523 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar SentencePart = __webpack_require__(394);\nvar getParticiples = __webpack_require__(392);\n/**\n * Creates a Dutch-specific sentence part.\n *\n * @param {string} sentencePartText The text from the sentence part.\n * @param {Array} auxiliaries The list with auxiliaries.\n * @constructor\n */\nvar DutchSentencePart = function DutchSentencePart(sentencePartText, auxiliaries) {\n  SentencePart.call(this, sentencePartText, auxiliaries, \"nl_NL\");\n};\n__webpack_require__(79).inherits(DutchSentencePart, SentencePart);\n/**\n * Returns the participles found in the sentence part.\n *\n * @returns {Array} The array of Participle Objects.\n */\nDutchSentencePart.prototype.getParticiples = function () {\n  return getParticiples(this.getSentencePartText(), this.getAuxiliaries(), \"nl\");\n};\nmodule.exports = DutchSentencePart;\n//# sourceMappingURL=SentencePart.js.map\n//# sourceMappingURL=SentencePart.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/SentencePart.js\n// module id = 1523\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/SentencePart.js?");

/***/ }),
/* 1524 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns a list with stopwords for the Dutch passive voice assessment.\n * @returns {Array} The list with stopwords.\n */\n\nmodule.exports = function () {\n  return [\"alhoewel\", \"als\", \"dan\", \"doordat\", \"hoewel\", \"hoezeer\", \"indien\", \"mits\", \"naargelang\", \"naarmate\", \"nadat\", \"ofschoon\", \"omdat\", \"opdat\", \"tenzij\", \"toen\", \"voordat\", \"voorzover\", \"wanneer\", \"zoals\", \"zodat\", \"zodra\", \"zolang\", \"wie\", \"wiens\", \"wier\", \"welke\", \"welk\"];\n};\n//# sourceMappingURL=stopwords.js.map\n//# sourceMappingURL=stopwords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/stopwords.js\n// module id = 1524\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/passiveVoice/stopwords.js?");

/***/ }),
/* 1525 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getWords = __webpack_require__(229);\nvar stripSpaces = __webpack_require__(84);\nvar stripTags = __webpack_require__(167).stripFullTags;\nvar getFirstWordExceptions = __webpack_require__(1526);\nvar isEmpty = __webpack_require__(97);\nvar forEach = __webpack_require__(32);\nvar filter = __webpack_require__(112);\n/**\n * Compares the first word of each sentence with the first word of the following sentence.\n *\n * @param {string} currentSentenceBeginning The first word of the current sentence.\n * @param {string} nextSentenceBeginning The first word of the next sentence.\n * @returns {boolean} Returns true if sentence beginnings match.\n */\nvar startsWithSameWord = function startsWithSameWord(currentSentenceBeginning, nextSentenceBeginning) {\n    if (!isEmpty(currentSentenceBeginning) && currentSentenceBeginning === nextSentenceBeginning) {\n        return true;\n    }\n    return false;\n};\n/**\n * Counts the number of similar sentence beginnings.\n *\n * @param {Array} sentenceBeginnings The array containing the first word of each sentence.\n * @param {Array} sentences The array containing all sentences.\n * @returns {Array} The array containing the objects containing the first words and the corresponding counts.\n */\nvar compareFirstWords = function compareFirstWords(sentenceBeginnings, sentences) {\n    var consecutiveFirstWords = [];\n    var foundSentences = [];\n    var sameBeginnings = 1;\n    forEach(sentenceBeginnings, function (beginning, i) {\n        var currentSentenceBeginning = beginning;\n        var nextSentenceBeginning = sentenceBeginnings[i + 1];\n        foundSentences.push(sentences[i]);\n        if (startsWithSameWord(currentSentenceBeginning, nextSentenceBeginning)) {\n            sameBeginnings++;\n        } else {\n            consecutiveFirstWords.push({ word: currentSentenceBeginning, count: sameBeginnings, sentences: foundSentences });\n            sameBeginnings = 1;\n            foundSentences = [];\n        }\n    });\n    return consecutiveFirstWords;\n};\n/**\n * Sanitizes the sentence.\n *\n * @param {string} sentence The sentence to sanitize.\n * @returns {string} The sanitized sentence.\n */\nfunction sanitizeSentence(sentence) {\n    sentence = stripTags(sentence);\n    sentence = sentence.replace(/^[^A-Za-zА-Яа-я0-9]/, \"\");\n    return sentence;\n}\n/**\n * Retrieves the first word from the sentence.\n *\n * @param {string} sentence The sentence to retrieve the first word from.\n * @param {Array} firstWordExceptions Exceptions to match against.\n * @returns {string} The first word of the sentence.\n */\nfunction getSentenceBeginning(sentence, firstWordExceptions) {\n    sentence = sanitizeSentence(sentence);\n    var words = getWords(stripSpaces(sentence));\n    if (words.length === 0) {\n        return \"\";\n    }\n    var firstWord = words[0].toLocaleLowerCase();\n    if (firstWordExceptions.indexOf(firstWord) > -1 && words.length > 1) {\n        firstWord += \" \" + words[1];\n    }\n    return firstWord;\n}\n/**\n * Gets the first word of each sentence from the text, and returns an object containing the first word of each sentence and the corresponding counts.\n *\n * @param {Paper} paper The Paper object to get the text from.\n * @param {Researcher} researcher The researcher this research is a part of.\n * @returns {Object} The object containing the first word of each sentence and the corresponding counts.\n */\nmodule.exports = function (paper, researcher) {\n    var sentences = researcher.getResearch(\"sentences\");\n    var firstWordExceptions = getFirstWordExceptions(paper.getLocale())();\n    var sentenceBeginnings = sentences.map(function (sentence) {\n        return getSentenceBeginning(sentence, firstWordExceptions);\n    });\n    sentences = sentences.filter(function (sentence) {\n        return getWords(stripSpaces(sentence)).length > 0;\n    });\n    sentenceBeginnings = filter(sentenceBeginnings);\n    return compareFirstWords(sentenceBeginnings, sentences);\n};\n//# sourceMappingURL=getSentenceBeginnings.js.map\n//# sourceMappingURL=getSentenceBeginnings.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getSentenceBeginnings.js\n// module id = 1525\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getSentenceBeginnings.js?");

/***/ }),
/* 1526 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar firstWordExceptionsEnglish = __webpack_require__(1527);\nvar firstWordExceptionsGerman = __webpack_require__(1528);\nvar firstWordExceptionsSpanish = __webpack_require__(1529);\nvar firstWordExceptionsFrench = __webpack_require__(1530);\nvar firstWordExceptionsDutch = __webpack_require__(1531);\nvar firstWordExceptionsItalian = __webpack_require__(1532);\nvar firstWordExceptionsRussian = __webpack_require__(1533);\nvar getLanguage = __webpack_require__(186);\nmodule.exports = function (locale) {\n    switch (getLanguage(locale)) {\n        case \"de\":\n            return firstWordExceptionsGerman;\n        case \"fr\":\n            return firstWordExceptionsFrench;\n        case \"es\":\n            return firstWordExceptionsSpanish;\n        case \"nl\":\n            return firstWordExceptionsDutch;\n        case \"it\":\n            return firstWordExceptionsItalian;\n        case \"ru\":\n            return firstWordExceptionsRussian;\n        default:\n        case \"en\":\n            return firstWordExceptionsEnglish;\n    }\n};\n//# sourceMappingURL=getFirstWordExceptions.js.map\n//# sourceMappingURL=getFirstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getFirstWordExceptions.js\n// module id = 1526\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getFirstWordExceptions.js?");

/***/ }),
/* 1527 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with exceptions for the sentence beginning researcher.\n * @returns {Array} The array filled with exceptions.\n */\n\nmodule.exports = function () {\n    return [\n    // Definite articles:\n    \"the\",\n    // Indefinite articles:\n    \"a\", \"an\",\n    // Numbers 1-10:\n    \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n    // Demonstrative pronouns:\n    \"this\", \"that\", \"these\", \"those\"];\n};\n//# sourceMappingURL=firstWordExceptions.js.map\n//# sourceMappingURL=firstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/firstWordExceptions.js\n// module id = 1527\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/english/firstWordExceptions.js?");

/***/ }),
/* 1528 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with exceptions for the sentence beginning researcher.\n * @returns {Array} The array filled with exceptions.\n */\n\nmodule.exports = function () {\n    return [\n    // Definite articles:\n    \"das\", \"dem\", \"den\", \"der\", \"des\", \"die\",\n    // Indefinite articles:\n    \"ein\", \"eine\", \"einem\", \"einen\", \"einer\", \"eines\",\n    // Numbers 1-10:\n    \"eins\", \"zwei\", \"drei\", \"vier\", \"fünf\", \"sechs\", \"sieben\", \"acht\", \"neun\", \"zehn\",\n    // Demonstrative pronouns:\n    \"denen\", \"deren\", \"derer\", \"dessen\", \"diese\", \"diesem\", \"diesen\", \"dieser\", \"dieses\", \"jene\", \"jenem\", \"jenen\", \"jener\", \"jenes\", \"welch\", \"welcher\", \"welches\"];\n};\n//# sourceMappingURL=firstWordExceptions.js.map\n//# sourceMappingURL=firstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/firstWordExceptions.js\n// module id = 1528\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/firstWordExceptions.js?");

/***/ }),
/* 1529 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with exceptions for the sentence beginning researcher.\n * @returns {Array} The array filled with exceptions.\n */\n\nmodule.exports = function () {\n    return [\n    // Definite articles:\n    \"el\", \"los\", \"la\", \"las\",\n    // Indefinite articles:\n    \"un\", \"una\", \"unas\", \"unos\",\n    // Numbers 1-10:\n    \"uno\", \"dos\", \"tres\", \"cuatro\", \"cinco\", \"seis\", \"siete\", \"ocho\", \"nueve\", \"diez\",\n    // Demonstrative pronouns:\n    \"este\", \"estos\", \"esta\", \"estas\", \"ese\", \"esos\", \"esa\", \"esas\", \"aquel\", \"aquellos\", \"aquella\", \"aquellas\", \"esto\", \"eso\", \"aquello\"];\n};\n//# sourceMappingURL=firstWordExceptions.js.map\n//# sourceMappingURL=firstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/firstWordExceptions.js\n// module id = 1529\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/spanish/firstWordExceptions.js?");

/***/ }),
/* 1530 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with exceptions for the sentence beginning researcher.\n * @returns {Array} The array filled with exceptions.\n */\n\nmodule.exports = function () {\n    return [\n    // Definite articles:\n    \"le\", \"la\", \"les\",\n    // Indefinite articles:\n    \"un\", \"une\",\n    // Numbers 2-10 ('une' is already included in the indefinite articles):\n    \"deux\", \"trois\", \"quatre\", \"cinq\", \"six\", \"sept\", \"huit\", \"neuf\", \"dix\",\n    // Demonstrative pronouns:\n    \"celui\", \"celle\", \"ceux\", \"celles\", \"celui-ci\", \"celle-là\", \"celui-là\", \"celle-ci\"];\n};\n//# sourceMappingURL=firstWordExceptions.js.map\n//# sourceMappingURL=firstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/firstWordExceptions.js\n// module id = 1530\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/french/firstWordExceptions.js?");

/***/ }),
/* 1531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with exceptions for the sentence beginning researcher.\n * @returns {Array} The array filled with exceptions.\n */\n\nmodule.exports = function () {\n    return [\n    // Definite articles:\n    \"de\", \"het\",\n    // Indefinite articles:\n    \"een\",\n    // Numbers 1-10:\n    \"één\", \"eén\", \"twee\", \"drie\", \"vier\", \"vijf\", \"zes\", \"zeven\", \"acht\", \"negen\", \"tien\",\n    // Demonstrative pronouns:\n    \"dit\", \"dat\", \"die\", \"deze\"];\n};\n//# sourceMappingURL=firstWordExceptions.js.map\n//# sourceMappingURL=firstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/firstWordExceptions.js\n// module id = 1531\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/dutch/firstWordExceptions.js?");

/***/ }),
/* 1532 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns an array with exceptions for the sentence beginning researcher.\n * @returns {Array} The array filled with exceptions.\n */\n\nmodule.exports = function () {\n    return [\n    // Definite articles:\n    \"il\", \"lo\", \"la\", \"i\", \"gli\", \"le\",\n    // Indefinite articles:\n    \"uno\", \"un\", \"una\",\n    // Numbers 1-10 ('uno' is already included above):\n    \"due\", \"tre\", \"quattro\", \"cinque\", \"sei\", \"sette\", \"otto\", \"nove\", \"dieci\",\n    // Demonstrative pronouns:\n    \"questo\", \"questa\", \"quello\", \"quella\", \"questi\", \"queste\", \"quelli\", \"quelle\", \"codesto\", \"codesti\", \"codesta\", \"codeste\"];\n};\n//# sourceMappingURL=firstWordExceptions.js.map\n//# sourceMappingURL=firstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/firstWordExceptions.js\n// module id = 1532\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/italian/firstWordExceptions.js?");

/***/ }),
/* 1533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n *  Returns an array with exceptions for the sentence beginning researcher.\n *  @returns {Array} The array filled with exceptions.\n *  */\n\nmodule.exports = function () {\n    return [\n    // Numbers 1-10:\n    \"один\", \"одна\", \"одно\", \"два\", \"две\", \"три\", \"четыре\", \"пять\", \"шесть\", \"семь\", \"восемь\", \"девять\", \"десять\",\n    // Demonstrative pronouns: тот, этот, такой, таков, столько\n    \"этот\", \"этого\", \"этому\", \"этим\", \"этом\", \"эта\", \"этой\", \"эту\", \"это\", \"этого\", \"этому\", \"эти\", \"этих\", \"этим\", \"этими\", \"тот\", \"того\", \"тому\", \"тем\", \"том\", \"та\", \"той\", \"ту\", \"те\", \"тех\", \"тем\", \"теми\", \"тех\", \"такой\", \"такого\", \"такому\", \"таким\", \"такая\", \"такую\", \"такое\", \"такие\", \"таких\", \"таким\", \"такими\", \"стольких\", \"стольким\", \"столько\", \"столькими\", \"вот\"];\n};\n//# sourceMappingURL=firstWordExceptions.js.map\n//# sourceMappingURL=firstWordExceptions.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/firstWordExceptions.js\n// module id = 1533\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/firstWordExceptions.js?");

/***/ }),
/* 1534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getRelevantWords = __webpack_require__(1535).getRelevantWords;\n/**\n * Retrieves the relevant words from the given paper.\n *\n * @param {Paper} paper The paper to determine the relevant words of.\n * @returns {WordCombination[]} Relevant words for this paper, filtered and sorted.\n */\nfunction relevantWords(paper) {\n  return getRelevantWords(paper.getText(), paper.getLocale());\n}\nmodule.exports = relevantWords;\n//# sourceMappingURL=relevantWords.js.map\n//# sourceMappingURL=relevantWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/relevantWords.js\n// module id = 1534\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/relevantWords.js?");

/***/ }),
/* 1535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar getWords = __webpack_require__(229);\nvar getSentences = __webpack_require__(215);\nvar WordCombination = __webpack_require__(1536);\nvar normalizeQuotes = __webpack_require__(328).normalize;\nvar functionWordLists = __webpack_require__(1538)();\nvar getLanguage = __webpack_require__(186);\nvar filter = __webpack_require__(112);\nvar map = __webpack_require__(63);\nvar forEach = __webpack_require__(32);\nvar has = __webpack_require__(1258);\nvar flatMap = __webpack_require__(586);\nvar values = __webpack_require__(1251);\nvar take = __webpack_require__(1542);\nvar includes = __webpack_require__(147);\nvar intersection = __webpack_require__(1255);\nvar isEmpty = __webpack_require__(97);\nvar densityLowerLimit = 0;\nvar densityUpperLimit = 0.03;\nvar relevantWordLimit = 100;\nvar wordCountLowerLimit = 200;\n// First four characters: en dash, em dash, hyphen-minus, and copyright sign.\nvar specialCharacters = [\"–\", \"—\", \"-\", \"\\xA9\", \"#\", \"%\", \"/\", \"\\\\\", \"$\", \"€\", \"£\", \"*\", \"•\", \"|\", \"→\", \"←\", \"}\", \"{\", \"//\", \"||\", \"\\u200B\"];\n/**\n * Returns the word combinations for the given text based on the combination size.\n *\n * @param {string} text The text to retrieve combinations for.\n * @param {number} combinationSize The size of the combinations to retrieve.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {WordCombination[]} All word combinations for the given text.\n */\nfunction getWordCombinations(text, combinationSize, functionWords) {\n    var sentences = getSentences(text);\n    var words = void 0,\n        combination = void 0;\n    return flatMap(sentences, function (sentence) {\n        sentence = sentence.toLocaleLowerCase();\n        sentence = normalizeQuotes(sentence);\n        words = getWords(sentence);\n        return filter(map(words, function (word, i) {\n            // If there are still enough words in the sentence to slice of.\n            if (i + combinationSize - 1 < words.length) {\n                combination = words.slice(i, i + combinationSize);\n                return new WordCombination(combination, 0, functionWords);\n            }\n            return false;\n        }));\n    });\n}\n/**\n * Calculates occurrences for a list of word combinations.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to calculate occurrences for.\n * @returns {WordCombination[]} Word combinations with their respective occurrences.\n */\nfunction calculateOccurrences(wordCombinations) {\n    var occurrences = {};\n    forEach(wordCombinations, function (wordCombination) {\n        var combination = wordCombination.getCombination();\n        if (!has(occurrences, combination)) {\n            occurrences[combination] = wordCombination;\n        }\n        occurrences[combination].incrementOccurrences();\n    });\n    return values(occurrences);\n}\n/**\n * Returns only the relevant combinations from a list of word combinations. Assumes\n * occurrences have already been calculated.\n *\n * @param {WordCombination[]} wordCombinations A list of word combinations.\n * @returns {WordCombination[]} Only relevant word combinations.\n */\nfunction getRelevantCombinations(wordCombinations) {\n    wordCombinations = wordCombinations.filter(function (combination) {\n        return combination.getOccurrences() !== 1 && combination.getRelevance() !== 0;\n    });\n    return wordCombinations;\n}\n/**\n * Sorts combinations based on their relevance and length.\n *\n * @param {WordCombination[]} wordCombinations The combinations to sort.\n * @returns {void}\n */\nfunction sortCombinations(wordCombinations) {\n    wordCombinations.sort(function (combinationA, combinationB) {\n        var difference = combinationB.getRelevance() - combinationA.getRelevance();\n        // The combination with the highest relevance comes first.\n        if (difference !== 0) {\n            return difference;\n        }\n        // In case of a tie on relevance, the longest combination comes first.\n        return combinationB.getLength() - combinationA.getLength();\n    });\n}\n/**\n * Filters word combinations that consist of a single one-character word.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterOneCharacterWordCombinations(wordCombinations) {\n    return wordCombinations.filter(function (combination) {\n        return !(combination.getLength() === 1 && combination.getWords()[0].length <= 1);\n    });\n}\n/**\n * Filters word combinations containing certain function words at any position.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAnywhere(wordCombinations, functionWords) {\n    return wordCombinations.filter(function (combination) {\n        return isEmpty(intersection(functionWords, combination.getWords()));\n    });\n}\n/**\n * Filters word combinations beginning with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtBeginning(wordCombinations, functionWords) {\n    return wordCombinations.filter(function (combination) {\n        return !includes(functionWords, combination.getWords()[0]);\n    });\n}\n/**\n * Filters word combinations ending with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtEnding(wordCombinations, functionWords) {\n    return wordCombinations.filter(function (combination) {\n        var words = combination.getWords();\n        var lastWordIndex = words.length - 1;\n        return !includes(functionWords, words[lastWordIndex]);\n    });\n}\n/**\n * Filters word combinations beginning and ending with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {Array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtBeginningAndEnding(wordCombinations, functionWords) {\n    wordCombinations = filterFunctionWordsAtBeginning(wordCombinations, functionWords);\n    wordCombinations = filterFunctionWordsAtEnding(wordCombinations, functionWords);\n    return wordCombinations;\n}\n/**\n * Filters word combinations based on keyword density if the word count is 200 or over.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {number} wordCount The number of words in the total text.\n * @param {number} densityLowerLimit The lower limit of keyword density.\n * @param {number} densityUpperLimit The upper limit of keyword density.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterOnDensity(wordCombinations, wordCount, densityLowerLimit, densityUpperLimit) {\n    return wordCombinations.filter(function (combination) {\n        return combination.getDensity(wordCount) >= densityLowerLimit && combination.getDensity(wordCount) < densityUpperLimit;\n    });\n}\n/**\n * Filters combinations based on whether they end with a specified string or not.\n *\n * @param {WordCombination[]} wordCombinations The array of WordCombinations to filter.\n * @param {string} str The string the WordCombinations that need to be filtered out end with.\n * @param {string[]} exceptions The array of strings containing exceptions to not filter.\n * @returns {WordCombination[]} The filtered array of WordCombinations.\n */\nfunction filterEndingWith(wordCombinations, str, exceptions) {\n    wordCombinations = wordCombinations.filter(function (combination) {\n        var combinationstr = combination.getCombination();\n        for (var i = 0; i < exceptions.length; i++) {\n            if (combinationstr.endsWith(exceptions[i])) {\n                return true;\n            }\n        }\n        return !combinationstr.endsWith(str);\n    });\n    return wordCombinations;\n}\n/**\n * Filters the list of word combination objects based on the language-specific function word filters.\n * Word combinations with specific parts of speech are removed.\n *\n * @param {Array} combinations The list of word combination objects.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {Array} The filtered list of word combination objects.\n */\nfunction filterFunctionWords(combinations, functionWords) {\n    combinations = filterFunctionWordsAnywhere(combinations, functionWords.filteredAnywhere);\n    combinations = filterFunctionWordsAtBeginningAndEnding(combinations, functionWords.filteredAtBeginningAndEnding);\n    combinations = filterFunctionWordsAtEnding(combinations, functionWords.filteredAtEnding);\n    combinations = filterFunctionWordsAtBeginning(combinations, functionWords.filteredAtBeginning);\n    return combinations;\n}\n/**\n * Filters the list of word combination objects based on function word filters, a special character filter and\n * a one-character filter.\n *\n * @param {Array} combinations The list of word combination objects.\n * @param {Function} functionWords The function containing the lists of function words.\n * @param {string} language The language for which specific filters should be applied.\n * @returns {Array} The filtered list of word combination objects.\n */\nfunction filterCombinations(combinations, functionWords, language) {\n    combinations = filterFunctionWordsAnywhere(combinations, specialCharacters);\n    combinations = filterOneCharacterWordCombinations(combinations);\n    combinations = filterFunctionWords(combinations, functionWords);\n    if (language === \"en\") {\n        combinations = filterEndingWith(combinations, \"'s\", []);\n    }\n    return combinations;\n}\n/**\n * Returns the relevant words in a given text.\n *\n * @param {string} text The text to retrieve the relevant words of.\n * @param {string} locale The paper's locale.\n * @returns {WordCombination[]} All relevant words sorted and filtered for this text.\n */\nfunction getRelevantWords(text, locale) {\n    var language = getLanguage(locale);\n    if (!functionWordLists.hasOwnProperty(language)) {\n        language = \"en\";\n    }\n    var functionWords = functionWordLists[language];\n    var words = getWordCombinations(text, 1, functionWords.all);\n    var wordCount = words.length;\n    var oneWordCombinations = getRelevantCombinations(calculateOccurrences(words));\n    sortCombinations(oneWordCombinations);\n    oneWordCombinations = take(oneWordCombinations, 100);\n    var oneWordRelevanceMap = {};\n    forEach(oneWordCombinations, function (combination) {\n        oneWordRelevanceMap[combination.getCombination()] = combination.getRelevance(functionWords);\n    });\n    var twoWordCombinations = calculateOccurrences(getWordCombinations(text, 2, functionWords.all));\n    var threeWordCombinations = calculateOccurrences(getWordCombinations(text, 3, functionWords.all));\n    var fourWordCombinations = calculateOccurrences(getWordCombinations(text, 4, functionWords.all));\n    var fiveWordCombinations = calculateOccurrences(getWordCombinations(text, 5, functionWords.all));\n    var combinations = oneWordCombinations.concat(twoWordCombinations, threeWordCombinations, fourWordCombinations, fiveWordCombinations);\n    combinations = filterCombinations(combinations, functionWords, language);\n    forEach(combinations, function (combination) {\n        combination.setRelevantWords(oneWordRelevanceMap);\n    });\n    combinations = getRelevantCombinations(combinations);\n    sortCombinations(combinations);\n    if (wordCount >= wordCountLowerLimit) {\n        combinations = filterOnDensity(combinations, wordCount, densityLowerLimit, densityUpperLimit);\n    }\n    return take(combinations, relevantWordLimit);\n}\nmodule.exports = {\n    getWordCombinations: getWordCombinations,\n    getRelevantWords: getRelevantWords,\n    calculateOccurrences: calculateOccurrences,\n    getRelevantCombinations: getRelevantCombinations,\n    sortCombinations: sortCombinations,\n    filterFunctionWordsAtEnding: filterFunctionWordsAtEnding,\n    filterFunctionWordsAtBeginning: filterFunctionWordsAtBeginning,\n    filterFunctionWords: filterFunctionWordsAtBeginningAndEnding,\n    filterFunctionWordsAnywhere: filterFunctionWordsAnywhere,\n    filterOnDensity: filterOnDensity,\n    filterOneCharacterWordCombinations: filterOneCharacterWordCombinations,\n    filterEndingWith: filterEndingWith\n};\n//# sourceMappingURL=relevantWords.js.map\n//# sourceMappingURL=relevantWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/relevantWords.js\n// module id = 1535\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/relevantWords.js?");

/***/ }),
/* 1536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar forEach = __webpack_require__(32);\nvar has = __webpack_require__(1258);\n/**\n * Returns whether or not the given word is a function word.\n *\n * @param {string} word The word to check.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {boolean} Whether or not the word is a function word.\n */\nfunction isFunctionWord(word, functionWords) {\n    return -1 !== functionWords.indexOf(word.toLocaleLowerCase());\n}\n/**\n * Represents a word combination in the context of relevant words.\n *\n * @constructor\n *\n * @param {string[]} words The list of words that this combination consists of.\n * @param {number} [occurrences] The number of occurrences, defaults to 0.\n * @param {Function} functionWords The function containing the lists of function words.\n */\nfunction WordCombination(words, occurrences, functionWords) {\n    this._words = words;\n    this._length = words.length;\n    this._occurrences = occurrences || 0;\n    this._functionWords = functionWords;\n}\nWordCombination.lengthBonus = {\n    2: 3,\n    3: 7,\n    4: 12,\n    5: 18\n};\n/**\n * Returns the base relevance based on the length of this combination.\n *\n * @returns {number} The base relevance based on the length.\n */\nWordCombination.prototype.getLengthBonus = function () {\n    if (has(WordCombination.lengthBonus, this._length)) {\n        return WordCombination.lengthBonus[this._length];\n    }\n    return 0;\n};\n/**\n * Returns the list with words.\n *\n * @returns {array} The list with words.\n */\nWordCombination.prototype.getWords = function () {\n    return this._words;\n};\n/**\n * Returns the word combination length.\n *\n * @returns {number} The word combination length.\n */\nWordCombination.prototype.getLength = function () {\n    return this._length;\n};\n/**\n * Returns the combination as it occurs in the text.\n *\n * @returns {string} The combination.\n */\nWordCombination.prototype.getCombination = function () {\n    return this._words.join(\" \");\n};\n/**\n * Returns the amount of occurrences of this word combination.\n *\n * @returns {number} The amount of occurrences.\n */\nWordCombination.prototype.getOccurrences = function () {\n    return this._occurrences;\n};\n/**\n * Increments the occurrences.\n *\n * @returns {void}\n */\nWordCombination.prototype.incrementOccurrences = function () {\n    this._occurrences += 1;\n};\n/**\n * Returns the relevance of the length.\n *\n * @param {number} relevantWordPercentage The relevance of the words within the combination.\n * @returns {number} The relevance based on the length and the word relevance.\n */\nWordCombination.prototype.getMultiplier = function (relevantWordPercentage) {\n    var lengthBonus = this.getLengthBonus();\n    // The relevance scales linearly from the relevance of one word to the maximum.\n    return 1 + relevantWordPercentage * lengthBonus;\n};\n/**\n * Returns if the given word is a relevant word based on the given word relevance.\n *\n * @param {string} word The word to check if it is relevant.\n * @returns {boolean} Whether or not it is relevant.\n */\nWordCombination.prototype.isRelevantWord = function (word) {\n    return has(this._relevantWords, word);\n};\n/**\n * Returns the relevance of the words within this combination.\n *\n * @returns {number} The percentage of relevant words inside this combination.\n */\nWordCombination.prototype.getRelevantWordPercentage = function () {\n    var relevantWordCount = 0,\n        wordRelevance = 1;\n    if (this._length > 1) {\n        forEach(this._words, function (word) {\n            if (this.isRelevantWord(word)) {\n                relevantWordCount += 1;\n            }\n        }.bind(this));\n        wordRelevance = relevantWordCount / this._length;\n    }\n    return wordRelevance;\n};\n/**\n * Returns the relevance for this word combination.\n *\n * @returns {number} The relevance of this word combination.\n */\nWordCombination.prototype.getRelevance = function () {\n    if (this._words.length === 1 && isFunctionWord(this._words[0], this._functionWords)) {\n        return 0;\n    }\n    var wordRelevance = this.getRelevantWordPercentage();\n    if (wordRelevance === 0) {\n        return 0;\n    }\n    return this.getMultiplier(wordRelevance) * this._occurrences;\n};\n/**\n * Sets the relevance of single words\n *\n * @param {Object} relevantWords A mapping from a word to a relevance.\n * @returns {void}\n */\nWordCombination.prototype.setRelevantWords = function (relevantWords) {\n    this._relevantWords = relevantWords;\n};\n/**\n * Returns the density of this combination within the text.\n *\n * @param {number} wordCount The word count of the text this combination was found in.\n * @returns {number} The density of this combination.\n */\nWordCombination.prototype.getDensity = function (wordCount) {\n    return this._occurrences / wordCount;\n};\nmodule.exports = WordCombination;\n//# sourceMappingURL=WordCombination.js.map\n//# sourceMappingURL=WordCombination.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/WordCombination.js\n// module id = 1536\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/WordCombination.js?");

/***/ }),
/* 1537 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nmodule.exports = baseHas;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseHas.js\n// module id = 1537\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseHas.js?");

/***/ }),
/* 1538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * The script collects all the lists of function words per language and returns this collection to a Researcher or a\n * stringProcessing script\n */\n\nvar germanFunctionWords = __webpack_require__(1539)();\nvar englishFunctionWords = __webpack_require__(1110)();\nvar dutchFunctionWords = __webpack_require__(1254)();\nvar spanishFunctionWords = __webpack_require__(1112)();\nvar italianFunctionWords = __webpack_require__(1113)();\nvar frenchFunctionWords = __webpack_require__(1109)();\nvar portugueseFunctionWords = __webpack_require__(1540)();\nvar russianFunctionWords = __webpack_require__(1541)();\nmodule.exports = function () {\n    return {\n        en: englishFunctionWords,\n        de: germanFunctionWords,\n        nl: dutchFunctionWords,\n        fr: frenchFunctionWords,\n        es: spanishFunctionWords,\n        it: italianFunctionWords,\n        pt: portugueseFunctionWords,\n        ru: russianFunctionWords\n    };\n};\n//# sourceMappingURL=getFunctionWords.js.map\n//# sourceMappingURL=getFunctionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getFunctionWords.js\n// module id = 1538\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/getFunctionWords.js?");

/***/ }),
/* 1539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar filteredPassiveAuxiliaries = __webpack_require__(570)().filteredAuxiliaries;\nvar passiveAuxiliariesInfinitive = __webpack_require__(570)().infinitiveAuxiliaries;\nvar transitionWords = __webpack_require__(1243)().singleWords;\n/**\n * Returns an object with exceptions for the prominent words researcher\n * @returns {Object} The object filled with exception arrays.\n */\nvar articles = [\"das\", \"dem\", \"den\", \"der\", \"des\", \"die\", \"ein\", \"eine\", \"einem\", \"einen\", \"einer\", \"eines\"];\nvar cardinalNumerals = [\"eins\", \"zwei\", \"drei\", \"vier\", \"fünf\", \"sechs\", \"sieben\", \"acht\", \"neun\", \"zehn\", \"elf\", \"zwölf\", \"zwoelf\", \"dreizehn\", \"vierzehn\", \"fünfzehn\", \"fuenfzehn\", \"sechzehn\", \"siebzehn\", \"achtzehn\", \"neunzehn\", \"zwanzig\", \"hundert\", \"einhundert\", \"zweihundert\", \"dreihundert\", \"vierhundert\", \"fünfhundert\", \"fuenfhundert\", \"sechshundert\", \"siebenhundert\", \"achthundert\", \"neunhundert\", \"tausend\", \"million\", \"milliarde\", \"billion\", \"billiarde\"];\nvar ordinalNumerals = [\"erste\", \"erster\", \"ersten\", \"erstem\", \"erstes\", \"zweite\", \"zweites\", \"zweiter\", \"zweitem\", \"zweiten\", \"dritte\", \"dritter\", \"drittes\", \"dritten\", \"drittem\", \"vierter\", \"vierten\", \"viertem\", \"viertes\", \"vierte\", \"fünfte\", \"fünfter\", \"fünftes\", \"fünften\", \"fünftem\", \"fuenfte\", \"fuenfter\", \"fuenftem\", \"fuenften\", \"fuenftes\", \"sechste\", \"sechster\", \"sechstes\", \"sechsten\", \"sechstem\", \"siebte\", \"siebter\", \"siebten\", \"siebtem\", \"siebtes\", \"achte\", \"achter\", \"achten\", \"achtem\", \"achtes\", \"neunte\", \"neunter\", \"neuntes\", \"neunten\", \"neuntem\", \"zehnte\", \"zehnter\", \"zehnten\", \"zehntem\", \"zehntes\", \"elfte\", \"elfter\", \"elftes\", \"elften\", \"elftem\", \"zwölfte\", \"zwölfter\", \"zwölften\", \"zwölftem\", \"zwölftes\", \"zwoelfte\", \"zwoelfter\", \"zwoelften\", \"zwoelftem\", \"zwoelftes\", \"dreizehnte\", \"dreizehnter\", \"dreizehntes\", \"dreizehnten\", \"dreizehntem\", \"vierzehnte\", \"vierzehnter\", \"vierzehntes\", \"vierzehnten\", \"vierzehntem\", \"fünfzehnte\", \"fünfzehnten\", \"fünfzehntem\", \"fünfzehnter\", \"fünfzehntes\", \"fuenfzehnte\", \"fuenfzehnten\", \"fuenfzehntem\", \"fuenfzehnter\", \"fuenfzehntes\", \"sechzehnte\", \"sechzehnter\", \"sechzehnten\", \"sechzehntes\", \"sechzehntem\", \"siebzehnte\", \"siebzehnter\", \"siebzehntes\", \"siebzehntem\", \"siebzehnten\", \"achtzehnter\", \"achtzehnten\", \"achtzehntem\", \"achtzehntes\", \"achtzehnte\", \"nehnzehnte\", \"nehnzehnter\", \"nehnzehntem\", \"nehnzehnten\", \"nehnzehntes\", \"zwanzigste\", \"zwanzigster\", \"zwanzigstem\", \"zwanzigsten\", \"zwanzigstes\"];\nvar personalPronounsNominative = [\"ich\", \"du\", \"er\", \"sie\", \"es\", \"wir\", \"ihr\"];\nvar personalPronounsAccusative = [\"mich\", \"dich\", \"ihn\", \"uns\", \"euch\"];\nvar personalPronounsDative = [\"mir\", \"dir\", \"ihm\", \"ihnen\"];\nvar demonstrativePronouns = [\"denen\", \"deren\", \"derer\", \"dessen\", \"diese\", \"diesem\", \"diesen\", \"dieser\", \"dieses\", \"jene\", \"jenem\", \"jenen\", \"jener\", \"jenes\", \"welch\", \"welcher\", \"welches\", \"derjenige\", \"desjenigen\", \"demjenigen\", \"denjenigen\", \"diejenige\", \"derjenigen\", \"dasjenige\", \"diejenigen\"];\nvar possessivePronouns = [\"mein\", \"meine\", \"meinem\", \"meiner\", \"meines\", \"meinen\", \"dein\", \"deine\", \"deinem\", \"deiner\", \"deines\", \"deinen\", \"sein\", \"seine\", \"seinem\", \"seiner\", \"seines\", \"ihre\", \"ihrem\", \"ihren\", \"ihrer\", \"ihres\", \"unser\", \"unsere\", \"unserem\", \"unseren\", \"unserer\", \"unseres\", \"euer\", \"eure\", \"eurem\", \"euren\", \"eurer\", \"eures\", \"einanders\"];\nvar quantifiers = [\"manche\", \"manch\", \"viele\", \"viel\", \"vieler\", \"vielen\", \"vielem\", \"all\", \"alle\", \"aller\", \"alles\", \"allen\", \"allem\", \"allerlei\", \"solcherlei\", \"einige\", \"etliche\", \"wenige\", \"weniger\", \"wenigen\", \"wenigem\", \"weniges\", \"wenig\", \"wenigerer\", \"wenigeren\", \"wenigerem\", \"wenigere\", \"wenigeres\", \"wenig\", \"bisschen\", \"paar\", \"kein\", \"keines\", \"keinem\", \"keinen\", \"keine\", \"mehr\", \"genug\", \"mehrere\", \"mehrerer\", \"mehreren\", \"mehrerem\", \"mehreres\", \"verschiedene\", \"verschiedener\", \"verschiedenen\", \"verschiedenem\", \"verschiedenes\", \"verschiedne\", \"verschiedner\", \"verschiednen\", \"verschiednem\", \"verschiednes\", \"art\", \"arten\", \"sorte\", \"sorten\"];\nvar reflexivePronouns = [\"sich\"];\nvar reciprocalPronouns = [\"einander\"];\n// \"Welch\", \"welcher\", and \"welches\" are already included in the demonstrativePronouns.\nvar indefinitePronouns = [\"andere\", \"anderer\", \"anderem\", \"anderen\", \"anderes\", \"andren\", \"andern\", \"andrem\", \"anderm\", \"andre\", \"andrer\", \"andres\", \"beide\", \"beides\", \"beidem\", \"beider\", \"beiden\", \"etwas\", \"irgendetwas\", \"irgendein\", \"irgendeinen\", \"irgendeinem\", \"irgendeines\", \"irgendeine\", \"irgendeiner\", \"irgendwas\", \"irgendwessen\", \"irgendwer\", \"irgendwen\", \"irgendwem\", \"irgendwelche\", \"irgendwelcher\", \"irgendwelchem\", \"irgendwelchen\", \"irgendwelches\", \"irgendjemand\", \"irgendjemanden\", \"irgendjemandem\", \"irgendjemandes\", \"irgendwie\", \"wer\", \"wen\", \"wem\", \"wessen\", \"was\", \"welchen\", \"welchem\", \"welche\", \"jeder\", \"jedes\", \"jedem\", \"jeden\", \"jede\", \"jedweder\", \"jedweden\", \"jedwedem\", \"jedwedes\", \"jedwede\", \"jeglicher\", \"jeglichen\", \"jeglichem\", \"jegliches\", \"jegliche\", \"jedermann\", \"jedermanns\", \"jemand\", \"jemanden\", \"jemandem\", \"jemands\", \"jemandes\", \"man\", \"meinesgleichen\", \"sämtlich\", \"saemtlich\", \"sämtlicher\", \"saemtlicher\", \"sämtlichen\", \"saemtlichen\", \"sämtlichem\", \"saemtlichem\", \"sämtliches\", \"saemtliches\", \"sämtliche\", \"saemtliche\", \"solche\", \"solcher\", \"solchen\", \"solchem\", \"solches\", \"niemand\", \"niemanden\", \"niemandem\", \"niemandes\", \"niemands\", \"nichts\", \"zweiter\"];\nvar interrogativeProAdverbs = [\"warum\", \"wie\", \"wo\", \"woher\", \"wohin\", \"wann\"];\nvar pronominalAdverbs = [\"dahinter\", \"damit\", \"daneben\", \"daran\", \"daraus\", \"darin\", \"darunter\", \"darüber\", \"darueber\", \"davon\", \"dazwischen\", \"hieran\", \"hierauf\", \"hieraus\", \"hierbei\", \"hierfuer\", \"hierfür\", \"hiergegen\", \"hierhinter\", \"hierin\", \"hiermit\", \"hiernach\", \"hierum\", \"hierunter\", \"hierueber\", \"hierüber\", \"hiervor\", \"hierzwischen\", \"hierneben\", \"hiervon\", \"wodurch\", \"wofür\", \"wofuer\", \"wogegen\", \"wohinter\", \"womit\", \"wonach\", \"woneben\", \"woran\", \"worauf\", \"woraus\", \"worin\", \"worum\", \"worunter\", \"worüber\", \"worueber\", \"wovon\", \"wovor\", \"wozu\", \"wozwischen\"];\nvar locativeAdverbs = [\"hier\", \"dorthin\", \"hierher\", \"dorther\"];\nvar adverbialGenitives = [\"allenfalls\", \"keinesfalls\", \"anderenfalls\", \"andernfalls\", \"andrenfalls\", \"äußerstenfalls\", \"bejahendenfalls\", \"bestenfalls\", \"eintretendenfalls\", \"entgegengesetztenfalls\", \"erforderlichenfalls\", \"gegebenenfalls\", \"geringstenfalls\", \"gleichfalls\", \"günstigenfalls\", \"günstigstenfalls\", \"höchstenfalls\", \"möglichenfalls\", \"notfalls\", \"nötigenfalls\", \"notwendigenfalls\", \"schlimmstenfalls\", \"vorkommendenfalls\", \"zutreffendenfalls\", \"keineswegs\", \"durchwegs\", \"geradenwegs\", \"geradeswegs\", \"geradewegs\", \"gradenwegs\", \"halbwegs\", \"mittwegs\", \"unterwegs\"];\nvar otherAuxiliaries = [\"habe\", \"hast\", \"hat\", \"habt\", \"habest\", \"habet\", \"hatte\", \"hattest\", \"hatten\", \"hätte\", \"haette\", \"hättest\", \"haettest\", \"hätten\", \"haetten\", \"haettet\", \"hättet\", \"hab\", \"bin\", \"bist\", \"ist\", \"sind\", \"sei\", \"seiest\", \"seien\", \"seiet\", \"war\", \"warst\", \"waren\", \"wart\", \"wäre\", \"waere\", \"wärest\", \"waerest\", \"wärst\", \"waerst\", \"wären\", \"waeren\", \"wäret\", \"waeret\", \"wärt\", \"waert\", \"seid\", \"darf\", \"darfst\", \"dürft\", \"duerft\", \"dürfe\", \"duerfe\", \"dürfest\", \"duerfest\", \"dürfet\", \"duerfet\", \"durfte\", \"durftest\", \"durften\", \"durftet\", \"dürfte\", \"duerfte\", \"dürftest\", \"duerftest\", \"dürften\", \"duerften\", \"dürftet\", \"duerftet\", \"kann\", \"kannst\", \"könnt\", \"koennt\", \"könne\", \"koenne\", \"könnest\", \"koennest\", \"könnet\", \"koennet\", \"konnte\", \"konntest\", \"konnten\", \"konntet\", \"könnte\", \"koennte\", \"könntest\", \"koenntest\", \"könnten\", \"koennten\", \"könntet\", \"koenntet\", \"mag\", \"magst\", \"mögt\", \"moegt\", \"möge\", \"moege\", \"mögest\", \"moegest\", \"möget\", \"moeget\", \"mochte\", \"mochtest\", \"mochten\", \"mochtet\", \"möchte\", \"moechte\", \"möchtest\", \"moechtest\", \"möchten\", \"moechten\", \"möchtet\", \"moechtet\", \"muss\", \"muß\", \"musst\", \"mußt\", \"müsst\", \"muesst\", \"müßt\", \"mueßt\", \"müsse\", \"muesse\", \"müssest\", \"muessest\", \"müsset\", \"muesset\", \"musste\", \"mußte\", \"musstest\", \"mußtest\", \"mussten\", \"mußten\", \"musstet\", \"mußtet\", \"müsste\", \"muesste\", \"müßte\", \"mueßte\", \"müsstest\", \"muesstest\", \"müßtest\", \"mueßtest\", \"müssten\", \"muessten\", \"müßten\", \"mueßten\", \"müsstet\", \"muesstet\", \"müßtet\", \"mueßtet\", \"soll\", \"sollst\", \"sollt\", \"solle\", \"sollest\", \"sollet\", \"sollte\", \"solltest\", \"sollten\", \"solltet\", \"will\", \"willst\", \"wollt\", \"wolle\", \"wollest\", \"wollet\", \"wollte\", \"wolltest\", \"wollten\", \"wolltet\", \"lasse\", \"lässt\", \"laesst\", \"läßt\", \"laeßt\", \"lasst\", \"laßt\", \"lassest\", \"lasset\", \"ließ\", \"ließest\", \"ließt\", \"ließen\", \"ließe\", \"ließet\", \"liess\", \"liessest\", \"liesst\", \"liessen\", \"liesse\", \"liesset\"];\nvar otherAuxiliariesInfinitive = [\"haben\", \"dürfen\", \"duerfen\", \"können\", \"koennen\", \"mögen\", \"moegen\", \"müssen\", \"muessen\", \"sollen\", \"wollen\", \"lassen\"];\n// Forms from 'aussehen' with two parts, like 'sehe aus', are not included, because we remove words on an single word basis.\nvar copula = [\"bleibe\", \"bleibst\", \"bleibt\", \"bleibest\", \"bleibet\", \"blieb\", \"bliebst\", \"bliebt\", \"blieben\", \"bliebe\", \"bliebest\", \"bliebet\", \"heiße\", \"heißt\", \"heißest\", \"heißet\", \"heisse\", \"heisst\", \"heissest\", \"heisset\", \"hieß\", \"hießest\", \"hießt\", \"hießen\", \"hieße\", \"hießet\", \"hiess\", \"hiessest\", \"hiesst\", \"hiessen\", \"hiesse\", \"hiesset\", \"giltst\", \"gilt\", \"geltet\", \"gelte\", \"geltest\", \"galt\", \"galtest\", \"galtst\", \"galten\", \"galtet\", \"gälte\", \"gaelte\", \"gölte\", \"goelte\", \"gältest\", \"gaeltest\", \"göltest\", \"goeltest\", \"gälten\", \"gaelten\", \"gölten\", \"goelten\", \"gältet\", \"gaeltet\", \"göltet\", \"goeltet\", \"aussehe\", \"aussiehst\", \"aussieht\", \"ausseht\", \"aussehest\", \"aussehet\", \"aussah\", \"aussahst\", \"aussahen\", \"aussaht\", \"aussähe\", \"aussaehe\", \"aussähest\", \"aussaehest\", \"aussähst\", \"aussaehst\", \"aussähet\", \"aussaehet\", \"aussäht\", \"aussaeht\", \"aussähen\", \"aussaehen\", \"scheine\", \"scheinst\", \"scheint\", \"scheinest\", \"scheinet\", \"schien\", \"schienst\", \"schienen\", \"schient\", \"schiene\", \"schienest\", \"schienet\", \"erscheine\", \"erscheinst\", \"erscheint\", \"erscheinest\", \"erscheinet\", \"erschien\", \"erschienst\", \"erschienen\", \"erschient\", \"erschiene\", \"erschienest\", \"erschienet\"];\nvar copulaInfinitive = [\"bleiben\", \"heißen\", \"heissen\", \"gelten\", \"aussehen\", \"scheinen\", \"erscheinen\"];\nvar prepositions = [\"a\", \"à\", \"ab\", \"abseits\", \"abzüglich\", \"abzueglich\", \"als\", \"am\", \"an\", \"angelegentlich\", \"angesichts\", \"anhand\", \"anlässlich\", \"anlaesslich\", \"ans\", \"anstatt\", \"anstelle\", \"auf\", \"aufs\", \"aufseiten\", \"aus\", \"ausgangs\", \"ausschließlich\", \"ausschliesslich\", \"außerhalb\", \"ausserhalb\", \"ausweislich\", \"bar\", \"behufs\", \"bei\", \"beidseits\", \"beiderseits\", \"beim\", \"betreffs\", \"bezüglich\", \"bezueglich\", \"binnen\", \"bis\", \"contra\", \"dank\", \"diesseits\", \"durch\", \"einbezüglich\", \"einbezueglich\", \"eingangs\", \"eingedenk\", \"einschließlich\", \"einschliesslich\", \"entgegen\", \"entlang\", \"exklusive\", \"fern\", \"fernab\", \"fuer\", \"für\", \"fuers\", \"fürs\", \"gegen\", \"gegenüber\", \"gegenueber\", \"gelegentlich\", \"gemäß\", \"gemaeß\", \"gen\", \"getreu\", \"gleich\", \"halber\", \"hinsichtlich\", \"hinter\", \"hinterm\", \"hinters\", \"im\", \"in\", \"inklusive\", \"inmitten\", \"innerhalb\", \"innert\", \"ins\", \"je\", \"jenseits\", \"kontra\", \"kraft\", \"längs\", \"laengs\", \"längsseits\", \"laengsseits\", \"laut\", \"links\", \"mangels\", \"minus\", \"mit\", \"mithilfe\", \"mitsamt\", \"mittels\", \"nach\", \"nächst\", \"naechst\", \"nah\", \"namens\", \"neben\", \"nebst\", \"nördlich\", \"noerdlich\", \"nordöstlich\", \"nordoestlich\", \"nordwestlich\", \"oberhalb\", \"ohne\", \"östlich\", \"oestlich\", \"per\", \"plus\", \"pro\", \"quer\", \"rechts\", \"rücksichtlich\", \"ruecksichtlich\", \"samt\", \"seitens\", \"seitlich\", \"seitwärts\", \"seitwaerts\", \"südlich\", \"suedlich\", \"südöstlich\", \"suedoestlich\", \"südwestlich\", \"suedwestlich\", \"über\", \"ueber\", \"überm\", \"ueberm\", \"übern\", \"uebern\", \"übers\", \"uebers\", \"um\", \"ums\", \"unbeschadet\", \"unerachtet\", \"unfern\", \"unter\", \"unterhalb\", \"unterm\", \"untern\", \"unters\", \"unweit\", \"vermittels\", \"vermittelst\", \"vermöge\", \"vermoege\", \"via\", \"vom\", \"von\", \"vonseiten\", \"vor\", \"vorbehaltlich\", \"wegen\", \"wider\", \"zeit\", \"zu\", \"zugunsten\", \"zulieb\", \"zuliebe\", \"zum\", \"zur\", \"zusätzlich\", \"zusaetzlich\", \"zuungunsten\", \"zuwider\", \"zuzüglich\", \"zuzueglich\", \"zwecks\", \"zwischen\"];\n// Many coordinating conjunctions are already included in the transition words list.\nvar coordinatingConjunctions = [\"und\", \"oder\", \"umso\"];\n// 'noch' is part of 'weder...noch', 'nur' is part of 'nicht nur...sondern auch'.\nvar correlativeConjunctions = [\"auch\", \"noch\", \"nur\"];\n// Many subordinating conjunctions are already included in the prepositions list, transition words list or pronominal adverbs list.\nvar subordinatingConjunctions = [\"nun\", \"so\", \"gleichwohl\"];\n/*\nThese verbs are frequently used in interviews to indicate questions and answers. 'Frage' and 'fragen' are not included,\nbecause those words are also nouns.\n */\nvar interviewVerbs = [\"sage\", \"sagst\", \"sagt\", \"sagest\", \"saget\", \"sagte\", \"sagtest\", \"sagten\", \"sagtet\", \"gesagt\", \"fragst\", \"fragt\", \"fragest\", \"fraget\", \"fragte\", \"fragtest\", \"fragten\", \"fragtet\", \"gefragt\", \"erkläre\", \"erklärst\", \"erklärt\", \"erklaere\", \"erklaerst\", \"erklaert\", \"erklärte\", \"erklärtest\", \"erklärtet\", \"erklärten\", \"erklaerte\", \"erklaertest\", \"erklaertet\", \"erklaerten\", \"denke\", \"denkst\", \"denkt\", \"denkest\", \"denket\", \"dachte\", \"dachtest\", \"dachten\", \"dachtet\", \"dächte\", \"dächtest\", \"dächten\", \"dächtet\", \"daechte\", \"daechtest\", \"daechten\", \"daechtet\", \"finde\", \"findest\", \"findet\", \"gefunden\"];\nvar interviewVerbsInfinitive = [\"sagen\", \"erklären\", \"erklaeren\", \"denken\", \"finden\"];\n// These transition words were not included in the list for the transition word assessment for various reasons.\nvar additionalTransitionWords = [\"etwa\", \"absolut\", \"unbedingt\", \"wieder\", \"definitiv\", \"bestimmt\", \"immer\", \"äußerst\", \"aeußerst\", \"höchst\", \"hoechst\", \"sofort\", \"augenblicklich\", \"umgehend\", \"direkt\", \"unmittelbar\", \"nämlich\", \"naemlich\", \"natürlich\", \"natuerlich\", \"besonders\", \"hauptsächlich\", \"hauptsaechlich\", \"jetzt\", \"eben\", \"heutzutage\", \"eindeutig\", \"wirklich\", \"echt\", \"wahrhaft\", \"ehrlich\", \"aufrichtig\", \"wahrheitsgemäß\", \"letztlich\", \"einmalig\", \"unübertrefflich\", \"normalerweise\", \"gewöhnlich\", \"gewoehnlich\", \"üblicherweise\", \"ueblicherweise\", \"sonst\", \"fast\", \"nahezu\", \"beinahe\", \"knapp\", \"annähernd\", \"annaehernd\", \"geradezu\", \"bald\", \"vielleicht\", \"wahrscheinlich\", \"wohl\", \"voraussichtlich\", \"zugegeben\", \"ursprünglich\", \"insgesamt\", \"tatsächlich\", \"eigentlich\", \"wahrhaftig\", \"bereits\", \"schon\", \"oft\", \"häufig\", \"haeufig\", \"regelmäßig\", \"regelmaeßig\", \"gleichmäßig\", \"gleichmaeßig\", \"einfach\", \"lediglich\", \"bloß\", \"bloss\", \"halt\", \"wahlweise\", \"eventuell\", \"manchmal\", \"teilweise\", \"nie\", \"niemals\", \"nimmer\", \"jemals\", \"allzeit\", \"irgendeinmal\", \"anders\", \"momentan\", \"gegenwärtig\", \"gegenwaertig\", \"nebenbei\", \"anderswo\", \"woanders\", \"anderswohin\", \"anderorts\", \"insbesondere\", \"namentlich\", \"sonderlich\", \"ausdrücklich\", \"ausdruecklich\", \"vollends\", \"kürzlich\", \"kuerzlich\", \"jüngst\", \"juengst\", \"unlängst\", \"unlaengst\", \"neuerdings\", \"neulich\", \"letztens\", \"neuerlich\", \"verhältnismäßig\", \"verhaeltnismaessig\", \"deutlich\", \"klar\", \"offenbar\", \"anscheinend\", \"genau\", \"u.a\", \"damals\", \"zumindest\"];\nvar intensifiers = [\"sehr\", \"recht\", \"überaus\", \"ueberaus\", \"ungemein\", \"weitaus\", \"einigermaßen\", \"einigermassen\", \"ganz\", \"schwer\", \"tierisch\", \"ungleich\", \"ziemlich\", \"übelst\", \"uebelst\", \"stark\", \"volkommen\", \"durchaus\", \"gar\"];\n// These verbs convey little meaning.\nvar delexicalizedVerbs = [\"geschienen\", \"meinst\", \"meint\", \"meinest\", \"meinet\", \"meinte\", \"meintest\", \"meinten\", \"meintet\", \"gemeint\", \"stehe\", \"stehst\", \"steht\", \"gehe\", \"gehst\", \"geht\", \"gegangen\", \"ging\", \"gingst\", \"gingen\", \"gingt\"];\nvar delexicalizedVerbsInfinitive = [\"tun\", \"machen\", \"stehen\", \"wissen\", \"gehen\", \"kommen\"];\n// These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.\n// Keyword combinations containing these adjectives/adverbs are fine.\nvar generalAdjectivesAdverbs = [\"einerlei\", \"egal\", \"neu\", \"neue\", \"neuer\", \"neuen\", \"neues\", \"neuem\", \"neuerer\", \"neueren\", \"neuerem\", \"neueres\", \"neuere\", \"neuester\", \"neuster\", \"neuesten\", \"neusten\", \"neuestem\", \"neustem\", \"neuestes\", \"neustes\", \"neueste\", \"neuste\", \"alt\", \"alter\", \"alten\", \"altem\", \"altes\", \"alte\", \"ältere\", \"älteren\", \"älterer\", \"älteres\", \"ältester\", \"ältesten\", \"ältestem\", \"ältestes\", \"älteste\", \"aeltere\", \"aelteren\", \"aelterer\", \"aelteres\", \"aeltester\", \"aeltesten\", \"aeltestem\", \"aeltestes\", \"aelteste\", \"gut\", \"guter\", \"gutem\", \"guten\", \"gutes\", \"gute\", \"besser\", \"besserer\", \"besseren\", \"besserem\", \"besseres\", \"bester\", \"besten\", \"bestem\", \"bestes\", \"beste\", \"größte\", \"grösste\", \"groß\", \"großer\", \"großen\", \"großem\", \"großes\", \"große\", \"großerer\", \"großerem\", \"großeren\", \"großeres\", \"großere\", \"großter\", \"großten\", \"großtem\", \"großtes\", \"großte\", \"gross\", \"grosser\", \"grossen\", \"grossem\", \"grosses\", \"grosse\", \"grosserer\", \"grosserem\", \"grosseren\", \"grosseres\", \"grossere\", \"grosster\", \"grossten\", \"grosstem\", \"grosstes\", \"grosste\", \"einfacher\", \"einfachen\", \"einfachem\", \"einfaches\", \"einfache\", \"einfacherer\", \"einfacheren\", \"einfacherem\", \"einfacheres\", \"einfachere\", \"einfachste\", \"einfachster\", \"einfachsten\", \"einfachstes\", \"einfachstem\", \"schnell\", \"schneller\", \"schnellen\", \"schnellem\", \"schnelles\", \"schnelle\", \"schnellere\", \"schnellerer\", \"schnelleren\", \"schnelleres\", \"schnellerem\", \"schnellster\", \"schnellste\", \"schnellsten\", \"schnellstem\", \"schnellstes\", \"weit\", \"weiten\", \"weitem\", \"weites\", \"weiterer\", \"weiteren\", \"weiterem\", \"weiteres\", \"weitere\", \"weitester\", \"weitesten\", \"weitestem\", \"weitestes\", \"weiteste\", \"eigen\", \"eigener\", \"eigenen\", \"eigenes\", \"eigenem\", \"eigene\", \"eigenerer\", \"eignerer\", \"eigeneren\", \"eigneren\", \"eigenerem\", \"eignerem\", \"eigeneres\", \"eigneres\", \"eigenere\", \"eignere\", \"eigenster\", \"eigensten\", \"eigenstem\", \"eigenstes\", \"eigenste\", \"wenigster\", \"wenigsten\", \"wenigstem\", \"wenigstes\", \"wenigste\", \"minderer\", \"minderen\", \"minderem\", \"mindere\", \"minderes\", \"mindester\", \"mindesten\", \"mindestes\", \"mindestem\", \"mindeste\", \"lang\", \"langer\", \"langen\", \"langem\", \"langes\", \"längerer\", \"längeren\", \"längerem\", \"längeres\", \"längere\", \"längster\", \"längsten\", \"längstem\", \"längstes\", \"längste\", \"laengerer\", \"laengeren\", \"laengerem\", \"laengeres\", \"laengere\", \"laengster\", \"laengsten\", \"laengstem\", \"laengstes\", \"laengste\", \"tief\", \"tiefer\", \"tiefen\", \"tiefem\", \"tiefes\", \"tiefe\", \"tieferer\", \"tieferen\", \"tieferem\", \"tieferes\", \"tiefere\", \"tiefster\", \"tiefsten\", \"tiefstem\", \"tiefste\", \"tiefstes\", \"hoch\", \"hoher\", \"hohen\", \"hohem\", \"hohes\", \"hohe\", \"höherer\", \"höhere\", \"höheren\", \"höherem\", \"höheres\", \"hoeherer\", \"hoehere\", \"hoeheren\", \"hoeherem\", \"hoeheres\", \"höchster\", \"höchste\", \"höchsten\", \"höchstem\", \"höchstes\", \"hoechster\", \"hoechste\", \"hoechsten\", \"hoechstem\", \"hoechstes\", \"regulär\", \"regulärer\", \"regulären\", \"regulärem\", \"reguläres\", \"reguläre\", \"regulaer\", \"regulaerer\", \"regulaeren\", \"regulaerem\", \"regulaeres\", \"regulaere\", \"regulärerer\", \"reguläreren\", \"regulärerem\", \"reguläreres\", \"regulärere\", \"regulaererer\", \"regulaereren\", \"regulaererem\", \"regulaereres\", \"regulaerere\", \"regulärster\", \"regulärsten\", \"regulärstem\", \"regulärstes\", \"regulärste\", \"regulaerster\", \"regulaersten\", \"regulaerstem\", \"regulaerstes\", \"regulaerste\", \"normal\", \"normaler\", \"normalen\", \"normalem\", \"normales\", \"normale\", \"normalerer\", \"normaleren\", \"normalerem\", \"normaleres\", \"normalere\", \"normalster\", \"normalsten\", \"normalstem\", \"normalstes\", \"normalste\", \"klein\", \"kleiner\", \"kleinen\", \"kleinem\", \"kleines\", \"kleine\", \"kleinerer\", \"kleineres\", \"kleineren\", \"kleinerem\", \"kleinere\", \"kleinster\", \"kleinsten\", \"kleinstem\", \"kleinstes\", \"kleinste\", \"winzig\", \"winziger\", \"winzigen\", \"winzigem\", \"winziges\", \"winzigerer\", \"winzigeren\", \"winzigerem\", \"winzigeres\", \"winzigere\", \"winzigster\", \"winzigsten\", \"winzigstem\", \"winzigste\", \"winzigstes\", \"sogenannt\", \"sogenannter\", \"sogenannten\", \"sogenanntem\", \"sogenanntes\", \"sogenannte\", \"kurz\", \"kurzer\", \"kurzen\", \"kurzem\", \"kurzes\", \"kurze\", \"kürzerer\", \"kürzeres\", \"kürzeren\", \"kürzerem\", \"kürzere\", \"kuerzerer\", \"kuerzeres\", \"kuerzeren\", \"kuerzerem\", \"kuerzere\", \"kürzester\", \"kürzesten\", \"kürzestem\", \"kürzestes\", \"kürzeste\", \"kuerzester\", \"kuerzesten\", \"kuerzestem\", \"kuerzestes\", \"kuerzeste\", \"wirklicher\", \"wirklichen\", \"wirklichem\", \"wirkliches\", \"wirkliche\", \"wirklicherer\", \"wirklicheren\", \"wirklicherem\", \"wirklicheres\", \"wirklichere\", \"wirklichster\", \"wirklichsten\", \"wirklichstes\", \"wirklichstem\", \"wirklichste\", \"eigentlicher\", \"eigentlichen\", \"eigentlichem\", \"eigentliches\", \"eigentliche\", \"schön\", \"schöner\", \"schönen\", \"schönem\", \"schönes\", \"schöne\", \"schönerer\", \"schöneren\", \"schönerem\", \"schöneres\", \"schönere\", \"schönster\", \"schönsten\", \"schönstem\", \"schönstes\", \"schönste\", \"real\", \"realer\", \"realen\", \"realem\", \"reales\", \"realerer\", \"realeren\", \"realerem\", \"realeres\", \"realere\", \"realster\", \"realsten\", \"realstem\", \"realstes\", \"realste\", \"derselbe\", \"denselben\", \"demselben\", \"desselben\", \"dasselbe\", \"dieselbe\", \"derselben\", \"dieselben\", \"gleicher\", \"gleichen\", \"gleichem\", \"gleiches\", \"gleiche\", \"gleicherer\", \"gleicheren\", \"gleicherem\", \"gleicheres\", \"gleichere\", \"gleichster\", \"gleichsten\", \"gleichstem\", \"gleichstes\", \"gleichste\", \"bestimmter\", \"bestimmten\", \"bestimmtem\", \"bestimmtes\", \"bestimmte\", \"bestimmtere\", \"bestimmterer\", \"bestimmterem\", \"bestimmteren\", \"bestimmteres\", \"bestimmtester\", \"bestimmtesten\", \"bestimmtestem\", \"bestimmtestes\", \"bestimmteste\", \"überwiegend\", \"ueberwiegend\", \"zumeist\", \"meistens\", \"meisten\", \"großenteils\", \"grossenteils\", \"meistenteils\", \"weithin\", \"ständig\", \"staendig\", \"laufend\", \"dauernd\", \"andauernd\", \"immerfort\", \"irgendwo\", \"irgendwann\", \"ähnlicher\", \"ähnlichen\", \"ähnlichem\", \"ähnliches\", \"ähnliche\", \"ähnlich\", \"ähnlicherer\", \"ähnlicheren\", \"ähnlicherem\", \"ähnlicheres\", \"ähnlichere\", \"ähnlichster\", \"ähnlichsten\", \"ähnlichstem\", \"ähnlichstes\", \"ähnlichste\", \"schlecht\", \"schlechter\", \"schlechten\", \"schlechtem\", \"schlechtes\", \"schlechte\", \"schlechterer\", \"schlechteren\", \"schlechterem\", \"schlechteres\", \"schlechtere\", \"schlechtester\", \"schlechtesten\", \"schlechtestem\", \"schlechtestes\", \"schlechteste\", \"schlimm\", \"schlimmer\", \"schlimmen\", \"schlimmem\", \"schlimmes\", \"schlimme\", \"schlimmerer\", \"schlimmeren\", \"schlimmerem\", \"schlimmeres\", \"schlimmere\", \"schlimmster\", \"schlimmsten\", \"schlimmstem\", \"schlimmstes\", \"schlimmste\", \"toll\", \"toller\", \"tollen\", \"tollem\", \"tolles\", \"tolle\", \"tollerer\", \"tolleren\", \"tollerem\", \"tollere\", \"tolleres\", \"tollster\", \"tollsten\", \"tollstem\", \"tollstes\", \"tollste\", \"super\", \"mögliche\", \"möglicher\", \"mögliches\", \"möglichen\", \"möglichem\", \"möglich\", \"moegliche\", \"moeglicher\", \"moegliches\", \"moeglichen\", \"moeglichem\", \"moeglich\", \"nächsten\", \"naechsten\", \"voll\", \"voller\", \"vollen\", \"vollem\", \"volle\", \"volles\", \"vollerer\", \"volleren\", \"vollerem\", \"vollere\", \"volleres\", \"vollster\", \"vollsten\", \"vollstem\", \"vollste\", \"vollstes\", \"außen\", \"ganzer\", \"ganzen\", \"ganzem\", \"ganze\", \"ganzes\", \"gerne\", \"oben\", \"unten\", \"zurück\", \"zurueck\", \"nicht\"];\nvar interjections = [\"ach\", \"aha\", \"oh\", \"au\", \"bäh\", \"baeh\", \"igitt\", \"huch\", \"hurra\", \"hoppla\", \"nanu\", \"oha\", \"olala\", \"pfui\", \"tja\", \"uups\", \"wow\", \"grr\", \"äh\", \"aeh\", \"ähm\", \"aehm\", \"öhm\", \"oehm\", \"hm\", \"mei\", \"mhm\", \"okay\", \"richtig\", \"eijeijeijei\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"g\", \"el\", \"tl\", \"wg\", \"be\", \"bd\", \"cl\", \"dl\", \"dag\", \"do\", \"gl\", \"gr\", \"kg\", \"kl\", \"cb\", \"ccm\", \"l\", \"ms\", \"mg\", \"ml\", \"mi\", \"pk\", \"pr\", \"pp\", \"sc\", \"sp\", \"st\", \"sk\", \"ta\", \"tr\", \"cm\", \"mass\"];\nvar timeWords = [\"sekunde\", \"sekunden\", \"minute\", \"minuten\", \"stunde\", \"stunden\", \"uhr\", \"tag\", \"tages\", \"tags\", \"tage\", \"tagen\", \"woche\", \"wochen\", \"monat\", \"monate\", \"monates\", \"monats\", \"monaten\", \"jahr\", \"jahres\", \"jahrs\", \"jahre\", \"jahren\", \"morgens\", \"mittags\", \"abends\", \"nachts\", \"heute\", \"gestern\", \"morgen\", \"vorgestern\", \"übermorgen\", \"uebermorgen\"];\nvar vagueNouns = [\"ding\", \"dinge\", \"dinges\", \"dinger\", \"dingern\", \"dingen\", \"sache\", \"sachen\", \"weise\", \"weisen\", \"wahrscheinlichkeit\", \"zeug\", \"zeuge\", \"zeuges\", \"zeugen\", \"mal\", \"einmal\", \"teil\", \"teile\", \"teiles\", \"teilen\", \"prozent\", \"prozents\", \"prozentes\", \"prozente\", \"prozenten\", \"beispiel\", \"beispiele\", \"beispieles\", \"beispiels\", \"beispielen\", \"aspekt\", \"aspekte\", \"aspektes\", \"aspekts\", \"aspekten\", \"idee\", \"ideen\", \"ahnung\", \"ahnungen\", \"thema\", \"themas\", \"themata\", \"themen\", \"fall\", \"falle\", \"falles\", \"fälle\", \"fällen\", \"faelle\", \"faellen\", \"mensch\", \"menschen\", \"leute\"];\nvar miscellaneous = [\"nix\", \"nixe\", \"nixes\", \"nixen\", \"usw.\", \"amen\", \"ja\", \"nein\", \"euro\"];\nvar titlesPreceding = [\"fr\", \"hr\", \"dr\", \"prof\"];\nvar titlesFollowing = [\"jr\", \"jun\", \"sen\", \"sr\"];\nmodule.exports = function () {\n    return {\n        // These word categories are filtered at the beginning of word combinations.\n        filteredAtBeginning: [].concat(otherAuxiliariesInfinitive, passiveAuxiliariesInfinitive, delexicalizedVerbsInfinitive, copulaInfinitive, interviewVerbsInfinitive),\n        // These word categories are filtered at the ending of word combinations.\n        filteredAtEnding: [].concat(ordinalNumerals, generalAdjectivesAdverbs),\n        // These word categories are filtered at the beginning and ending of word combinations.\n        filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers),\n        // These word categories are filtered everywhere within word combinations.\n        filteredAnywhere: [].concat(transitionWords, adverbialGenitives, personalPronounsNominative, personalPronounsAccusative, personalPronounsDative, reflexivePronouns, interjections, cardinalNumerals, copula, interviewVerbs, otherAuxiliaries, filteredPassiveAuxiliaries, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeProAdverbs, locativeAdverbs, miscellaneous, pronominalAdverbs, recipeWords, timeWords, vagueNouns, reciprocalPronouns, possessivePronouns),\n        // This export contains all of the above words.\n        all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, reciprocalPronouns, personalPronounsNominative, personalPronounsAccusative, quantifiers, indefinitePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, adverbialGenitives, filteredPassiveAuxiliaries, passiveAuxiliariesInfinitive, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, interviewVerbsInfinitive, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, timeWords, titlesPreceding, titlesFollowing)\n    };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/functionWords.js\n// module id = 1539\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/german/functionWords.js?");

/***/ }),
/* 1540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transitionWords = __webpack_require__(1248)().singleWords;\n/**\n * Returns an array with exceptions for the prominent words researcher.\n *\n * @returns {Array} The array filled with exceptions.\n */\nvar articles = [\"o\", \"a\", \"os\", \"as\", \"um\", \"uns\", \"uma\", \"umas\"];\n// \"um\" is already included in the articles.\nvar cardinalNumerals = [\"uma\", \"duas\", \"dois\", \"três\", \"cuatro\", \"cinco\", \"seis\", \"sete\", \"oito\", \"nove\", \"dez\", \"onze\", \"doze\", \"treze\", \"quatorze\", \"catorze\", \"quinze\", \"dezesseis\", \"dezessete\", \"dezasseis\", \"dezassete\", \"dezoito\", \"dezenove\", \"dezanove\", \"vinte\", \"cem\", \"cento\", \"mil\", \"milhão\", \"milhões\", \"bilhão\", \"bilhões\"];\nvar ordinalNumerals = [\"primeiro\", \"primeiros\", \"primeira\", \"primeiras\", \"segundo\", \"segunda\", \"segundos\", \"segundas\", \"terceiro\", \"terceira\", \"terceiros\", \"terceiras\", \"quarto\", \"quartos\", \"quarta\", \"quartas\", \"quinto\", \"quintos\", \"quinta\", \"quintas\", \"sexto\", \"sextos\", \"sexta\", \"sextas\", \"sétimo\", \"sétimos\", \"sétima\", \"sétimas\", \"oitavo\", \"oitavos\", \"oitava\", \"oitavas\", \"nono\", \"nonos\", \"nona\", \"nonas\", \"décimo\", \"décimos\", \"décima\", \"décimas\", \"vigésimo\", \"vigésimos\", \"vigésima\", \"vigésimas\"];\nvar personalPronounsNominative = [\"eu\", \"tu\", \"ele\", \"ela\", \"nós\", \"vós\", \"você\", \"vocês\", \"eles\", \"elas\"];\n// \"o\", \"a\", \"os\", \"as\" are already included in the articles.\nvar personalPronounsAccusative = [\"me\", \"te\", \"lhe\", \"nos\", \"vos\", \"lhes\"];\nvar personalPronounsPrepositional = [\"dele\", \"dela\", \"deles\", \"delas\", \"nele\", \"nela\", \"neles\", \"nelas\", \"mim\", \"ti\", \"si\"];\nvar personalPronounsComitative = [\"conmigo\", \"contigo\", \"consigo\", \"convosco\", \"conosco\", \"connosco\"];\nvar reflexivePronouns = [\"se\"];\nvar demonstrativePronouns = [\"aquilo\", \"àquele\", \"àquela\", \"àqueles\", \"àquelas\", \"àquilo\", \"este\", \"estes\", \"esta\", \"estas\", \"àqueles\", \"aqueles\", \"aquele\", \"aquela\", \"aquelas\", \"aquilo\", \"esse\", \"esses\", \"essa\", \"essas\", \"isto\", \"isso\"];\nvar possessivePronouns = [\"minhas\", \"tuas\", \"suas\", \"minha\", \"tua\", \"sua\", \"minhas\", \"tuas\", \"suas\", \"vossa\", \"vossas\", \"meu\", \"meus\", \"teu\", \"teus\", \"seu\", \"seus\", \"nosso\", \"nossos\", \"nossa\", \"nossas\"];\nvar quantifiers = [\"apenas\", \"vário\", \"vários\", \"vária\", \"várias\", \"mais\", \"muito\", \"muitos\", \"muita\", \"muitas\", \"puoco\", \"puocos\", \"puoca\", \"puocas\", \"bastante\", \"todo\", \"todos\", \"toda\", \"todas\"];\nvar indefinitePronouns = [\"alguma\", \"algumas\", \"nenhuns\", \"nenhumas\", \"todo\", \"toda\", \"todas\", \"outro\", \"outra\", \"outros\", \"outras\", \"qualquer\", \"quaisquer\", \"outrem\", \"tudo\", \"nada\", \"algo\", \"tanto\", \"tanta\", \"tantos\", \"tantas\", \"quanto\", \"quanta\", \"quantos\", \"quantas\", \"ninguém\", \"cada\"];\nvar interrogativePronouns = [\"quais\", \"qual\", \"quem\", \"cujo\", \"cuja\", \"cujos\", \"cujas\"];\nvar interrogativeProAdverbs = [\"como\", \"porque\", \"quanto\", \"quanta\", \"onde\", \"quando\", \"quão\", \"quantos\", \"quantas\", \"donde\", \"aonde\", \"que\"];\nvar locativeAdverbs = [\"cá\", \"além\", \"aqui\", \"ali\", \"lá\", \"acolá\", \"aí\"];\nvar otherAuxiliaries = [\"tenho\", \"tens\", \"tem\", \"temos\", \"tendes\", \"têm\", \"tive\", \"tiveste\", \"teve\", \"tivemos\", \"tivestes\", \"tiveram\", \"tínhamos\", \"tínheis\", \"tinham\", \"tivera\", \"tiveras\", \"tivéramos\", \"tivéreis\", \"tiveram\", \"terei\", \"terás\", \"terá\", \"teremos\", \"tereis\", \"terão\", \"teria\", \"terias\", \"teríamos\", \"teríeis\", \"teriam\", \"tenha\", \"tenhas\", \"tenhamos\", \"tenhais\", \"tenham\", \"tivesse\", \"tivesses\", \"tivéssemos\", \"tivésseis\", \"tivessem\", \"tiver\", \"tiveres\", \"tivermos\", \"tiverdes\", \"tiverem\", \"tende\", \"teres\", \"termos\", \"terdes\", \"terem\", \"tido\", \"hei\", \"hás\", \"há\", \"havemos\", \"hemos\", \"haveis\", \"heis\", \"hão\", \"houve\", \"houveste\", \"houvemos\", \"houvestes\", \"houveram\", \"havia\", \"havias\", \"havíamos\", \"havíeis\", \"haviam\", \"houvera\", \"houveras\", \"houvéramos\", \"houvéreis\", \"houveram\", \"haverei\", \"haverás\", \"haverá\", \"haveremos\", \"havereis\", \"haverão\", \"haveria\", \"haverias\", \"haveríamos\", \"haveríeis\", \"haveriam\", \"haja\", \"hajas\", \"hajamos\", \"hajais\", \"hajam\", \"houvesse\", \"houvesses\", \"houvéssemos\", \"houvésseis\", \"houvessem\", \"houver\", \"houveres\", \"houvermos\", \"houverdes\", \"houverem\", \"havei\", \"hajais\", \"haveres\", \"havermos\", \"haverdes\", \"haverem\", \"havido\", \"poder\", \"posso\", \"podes\", \"pode\", \"podemos\", \"podeis\", \"podem\", \"pude\", \"pudeste\", \"pôde\", \"pudemos\", \"pudestes\", \"puderam\", \"podia\", \"podias\", \"podia\", \"podíamos\", \"podíeis\", \"podiam\", \"pudera\", \"puderas\", \"pudéramos\", \"pudéreis\", \"puderam\", \"poderei\", \"poderás\", \"poderá\", \"poderemos\", \"podereis\", \"poderão\", \"poderia\", \"poderias\", \"poderíamos\", \"poderíeis\", \"poderiam\", \"possa\", \"possas\", \"possamos\", \"possais\", \"possam\", \"pudesse\", \"pudesses\", \"pudéssemos\", \"pudésseis\", \"pudessem\", \"puder\", \"puderes\", \"pudermos\", \"puderdes\", \"puderem\"];\nvar otherAuxiliariesInfinitive = [\"ter\", \"haver\"];\nvar copula = [\"sou\", \"és\", \"é\", \"somos\", \"sois\", \"são\", \"fui\", \"foste\", \"foi\", \"fomos\", \"fostes\", \"foram\", \"era\", \"eras\", \"éramos\", \"éreis\", \"eram\", \"fôramos\", \"fôreis\", \"fora\", \"foras\", \"foram\", \"serei\", \"serás\", \"será\", \"seremos\", \"sereis\", \"serão\", \"seria\", \"serias\", \"seríamos\", \"seríeis\", \"seriam\", \"seja\", \"sejas\", \"seja\", \"sejamos\", \"sejais\", \"sejam\", \"fosse\", \"fosses\", \"fôssemos\", \"fôsseis\", \"fossem\", \"for\", \"fores\", \"formos\", \"fordes\", \"forem\", \"sê\", \"sede\", \"sermos\", \"serdes\", \"serem\", \"seres\", \"sido\", \"estou\", \"está\", \"estamos\", \"estás\", \"estás\", \"estais\", \"estão\", \"estive\", \"estiveste\", \"esteve\", \"estivemos\", \"estivestes\", \"estiveram\", \"estava\", \"estavas\", \"estávamos\", \"estáveis\", \"estavam\", \"estivera\", \"estiveras\", \"estivéramos\", \"estivéreis\", \"estiveram\", \"estarei\", \"estarás\", \"estará\", \"estaremos\", \"estareis\", \"estarão\", \"estaria\", \"estarias\", \"estaríamos\", \"estaríeis\", \"estariam\", \"esteja\", \"estejas\", \"estejamos\", \"estejais\", \"estejam\", \"estivesse\", \"estivesses\", \"estivéssemos\", \"estivésseis\", \"estivessem\", \"estiver\", \"estiveres\", \"estivermos\", \"estiverdes\", \"estiverem\", \"estai\", \"estejas\", \"estejais\", \"estares\", \"estarmos\", \"estardes\", \"estarem\", \"estado\"];\nvar copulaInfinitive = [\"estar\", \"ser\"];\nvar prepositions = [\"a\", \"ante\", \"antes\", \"após\", \"até\", \"através\", \"com\", \"contra\", \"depois\", \"desde\", \"sem\", \"entre\", \"para\", \"pra\", \"perante\", \"sob\", \"sobre\", \"trás\", \"de\", \"por\", \"em\", \"ao\", \"à\", \"aos\", \"às\", \"do\", \"da\", \"dos\", \"das\", \"dum\", \"duma\", \"duns\", \"dumas\", \"no\", \"na\", \"nos\", \"nas\", \"num\", \"numa\", \"nuns\", \"numas\", \"pelo\", \"pela\", \"pelos\", \"pelas\", \"deste\", \"desse\", \"daquele\", \"desta\", \"dessa\", \"daquela\", \"destes\", \"desses\", \"daqueles\", \"destas\", \"dessas\", \"daquelas\", \"neste\", \"nesse\", \"naquele\", \"nesta\", \"nessa\", \"naquela\", \"nestes\", \"nesses\", \"naqueles\", \"nestas\", \"nessas\", \"naquelas\", \"disto\", \"disso\", \"daquilo\", \"nisto\", \"nisso\", \"naquilo\", \"durante\"];\nvar coordinatingConjunctions = [\"também\", \"e\", \"ou\", \"nem\"];\nvar subordinatingConjunctions = [\"agora\", \"conforme\", \"conquanto\", \"contanto\", \"embora\", \"enquanto\", \"então\", \"entretanto\", \"malgrado\", \"mas\", \"pois\", \"porém\", \"porquanto\", \"porque\", \"senão\", \"contudo\"];\n// These verbs are frequently used in interviews to indicate questions and answers.\nvar interviewVerbs = [\"diz\", \"dizem\", \"disse\", \"disseram\", \"dizia\", \"diziam\", \"reivindica\", \"reivindicam\", \"reivindicou\", \"reivindicaram\", \"reivindicava\", \"reivindicavam\", \"requer\", \"requerem\", \"requereu\", \"requereram\", \"requeria\", \"requeriam\", \"afirma\", \"afirmam\", \"afirmou\", \"afirmaram\", \"afirmava\", \"afirmavam\", \"reivindica\", \"reivindicam\", \"reivindicou\", \"reivindicaram\", \"reivindicava\", \"reivindicavam\", \"perguntam\", \"perguntou\", \"perguntaram\", \"perguntava\", \"perguntavam\", \"explica\", \"explicam\", \"explicou\", \"explicaram\", \"explicava\", \"explicavam\", \"relata\", \"relatam\", \"relatou\", \"relataram\"];\n// These transition words were not included in the list for the transition word assessment for various reasons.\nvar additionalTransitionWords = [\"provavelmente\", \"imediatamente\", \"ocasionalmente\", \"indubitavelmente\", \"para\", \"possivelmente\", \"logo\", \"simultaneamente\", \"exceto\", \"inquestionavelmente\"];\nvar intensifiers = [\"extremamente\", \"bem\", \"completamente\", \"totalmente\", \"grandemente\", \"seriamente\", \"absolutamente\", \"bastante\", \"sobremodo\", \"sobremaneira\", \"tão\"];\n// These verbs convey little meaning.\nvar delexicalizedVerbs = [\"dou\", \"dás\", \"dá\", \"damos\", \"dais\", \"dão\", \"dei\", \"deu\", \"demos\", \"deram\", \"dava\", \"davas\", \"dávamos\", \"dáveis\", \"davam\", \"dera\", \"deras\", \"déramos\", \"déreis\", \"deram\", \"darei\", \"darás\", \"dará\", \"daremos\", \"dareis\", \"darão\", \"daria\", \"darias\", \"daríamos\", \"daríeis\", \"dariam\", \"dê\", \"dês\", \"dêmos\", \"deis\", \"deem\", \"déssemos\", \"désseis\", \"dessem\", \"der\", \"deres\", \"dermos\", \"derdes\", \"derem\", \"dai\", \"deis\", \"dares\", \"darmos\", \"dardes\", \"darem\", \"fazendo\", \"faço\", \"fazes\", \"faz\", \"fazemos\", \"fazeis\", \"fazem\", \"fiz\", \"fizeste\", \"fez\", \"fizemos\", \"fizestes\", \"fizeram\", \"fazia\", \"fazias\", \"fazíamos\", \"fazíeis\", \"faziam\", \"fizera\", \"fizeras\", \"fizéramos\", \"fizéreis\", \"farei\", \"farás\", \"fará\", \"faremos\", \"fareis\", \"faria\", \"farias\", \"faríamos\", \"faríeis\", \"fariam\", \"faça\", \"faças\", \"façamos\", \"façais\", \"façam\", \"fizesse\", \"fizesses\", \"fizéssemos\", \"fizésseis\", \"fizessem\", \"fizer\", \"fizeres\", \"fizermos\", \"fizerdes\", \"fizerem\", \"fazei\", \"fazeres\", \"fazermos\", \"fazerdes\", \"fazerem\"];\nvar delexicalizedVerbsInfinitive = [\"dar\", \"fazer\"];\n/*\n * These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.\n * Keyword combinations containing these adjectives/adverbs are fine.\n */\nvar generalAdjectivesAdverbs = [\"devagar\", \"rapidamente\", \"grande\", \"grandes\", \"depressa\", \"claramente\", \"effectivamente\", \"realmente\", \"exclusivamente\", \"simplesemente\", \"somente\", \"unicamente\", \"lentamente\", \"raramente\", \"certamente\", \"talvez\", \"actualmente\", \"dificilmente\", \"principalmente\", \"gerlamente\", \"enorme\", \"enormes\", \"pequeno\", \"pequena\", \"pequenos\", \"pequenas\", \"minúsculo\", \"minúsculos\", \"minúscula\", \"minúsculas\", \"velho\", \"velhos\", \"velha\", \"velhas\", \"lindo\", \"linda\", \"lindos\", \"lindas\", \"alto\", \"alta\", \"altos\", \"altas\", \"baixo\", \"baixa\", \"baixos\", \"baixas\", \"longo\", \"longa\", \"longos\", \"longas\", \"curto\", \"curta\", \"curtos\", \"curtas\", \"fácil\", \"fáceis\", \"difícil\", \"difíceis\", \"simples\", \"mesmo\", \"mesma\", \"mesmos\", \"mesmas\", \"mêsmo\", \"mêsmos\", \"mêsma\", \"mêsmas\", \"cedo\", \"tarde\", \"importante\", \"importantes\", \"capaz\", \"capazes\", \"certo\", \"certa\", \"certos\", \"certas\", \"usual\", \"usuals\", \"ultimamente\", \"possível\", \"possíveis\", \"comum\", \"comuns\", \"freqüentemente\", \"constantemente\", \"continuamente\", \"diretamente\", \"levemente\", \"algures\", \"semelhante\", \"semelhantes\", \"similar\", \"similares\", \"sempre\", \"ainda\", \"já\", \"atrás\", \"depois\"];\n// \"grande\", \"velho\" and \"pequeno\" can appear both before and after nouns and are therefore on both lists.\nvar generalAdjectivesPreceding = [\"pior\", \"melhor\", \"melhores\", \"bom\", \"boa\", \"bons\", \"boas\", \"bonito\", \"bonita\", \"bonitos\", \"bonitas\", \"grande\", \"grandes\", \"pequeno\", \"pequena\", \"pequenos\", \"pequenas\", \"velho\", \"velhos\", \"velha\", \"velhas\", \"mau\", \"má\", \"maus\", \"más\"];\nvar interjections = [\"ai\", \"ah\", \"ih\", \"alô\", \"oi\", \"olá\", \"ui\", \"uf\", \"psiu\", \"mau\", \"olha\", \"viva\", \"uau\", \"wow\", \"oh\", \"shi\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"kg\", \"mg\", \"gr\", \"g\", \"km\", \"m\", \"l\", \"ml\", \"cl\"];\n// \"segundo\" is already included in cardinal numbers.\nvar timeWords = [\"segundos\", \"minuto\", \"minutos\", \"hora\", \"horas\", \"dia\", \"dias\", \"semana\", \"semanas\", \"mes\", \"meses\", \"ano\", \"anos\", \"hoje\", \"amanhã\", \"ontem\"];\nvar vagueNouns = [\"caso\", \"casos\", \"coisa\", \"coisas\", \"detalhe\", \"detalhes\", \"forma\", \"formas\", \"jeito\", \"jeitos\", \"maneira\", \"maneiras\", \"modo\", \"modos\", \"suijeto\", \"sujeitos\", \"tópico\", \"tópicos\", \"vez\", \"vezes\"];\nvar miscellaneous = [\"sim\", \"não\", \"ok\", \"amém\", \"etc\", \"euro\", \"euros\", \"adeus\", \"jeitos\"];\nvar titles = [\"sr\", \"sra\", \"sras\", \"dr\", \"dra\", \"prof\"];\nmodule.exports = function () {\n    return {\n        // These word categories are filtered at the beginning of word combinations.\n        filteredAtBeginning: generalAdjectivesAdverbs,\n        // These word categories are filtered at the ending of word combinations.\n        filteredAtEnding: [].concat(ordinalNumerals, otherAuxiliariesInfinitive, copulaInfinitive, delexicalizedVerbsInfinitive, generalAdjectivesPreceding),\n        // These word categories are filtered at the beginning and ending of word combinations.\n        filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),\n        // These word categories are filtered everywhere within word combinations.\n        filteredAnywhere: [].concat(transitionWords, cardinalNumerals, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, personalPronounsComitative, reflexivePronouns, indefinitePronouns, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, otherAuxiliaries, copula, subordinatingConjunctions, interviewVerbs, additionalTransitionWords, delexicalizedVerbs, interjections, recipeWords, timeWords, vagueNouns, miscellaneous, titles),\n        // This export contains all of the above words.\n        all: [].concat(articles, cardinalNumerals, ordinalNumerals, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, personalPronounsComitative, reflexivePronouns, demonstrativePronouns, possessivePronouns, quantifiers, indefinitePronouns, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, subordinatingConjunctions, interviewVerbs, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, generalAdjectivesAdverbs, generalAdjectivesPreceding, interjections, recipeWords, timeWords, vagueNouns, miscellaneous, titles)\n    };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/portuguese/functionWords.js\n// module id = 1540\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/portuguese/functionWords.js?");

/***/ }),
/* 1541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar transitionWords = __webpack_require__(1249)().allWords;\n/**\n * Returns an object with exceptions for the prominent words researcher\n * @returns {Object} The object filled with exception arrays.\n */\n// Verbs\nvar filteredPassiveAuxiliaries = [\"быть\", \"был\", \"была\", \"было\", \"были\", \"будет\", \"будут\"];\nvar otherAuxiliaries = [\"мочь\", \"мог\", \"могла\", \"могли\", \"могу\", \"можешь\", \"может\", \"можем\", \"можете\", \"могут\", \"смочь\", \"смогу\", \"сможешь\", \"сможет\", \"сможем\", \"сможете\", \"смогут\", \"решиться\", \"решился\", \"решилась\", \"решились\", \"решусь\", \"решишься\", \"решится\", \"решимся\", \"решитесь\", \"решатся\", \"делать\", \"делал\", \"делала\", \"делало\", \"делали\", \"делали\", \"делаю\", \"делаешь\", \"делает\", \"делаем\", \"делаете\", \"делают\", \"сделать\", \"сделал\", \"сделала\", \"сделало\", \"сделали\", \"сделали\", \"сделаю\", \"сделаешь\", \"сделает\", \"сделаем\", \"сделаете\", \"сделают\", \"иметь\", \"имел\", \"имела\", \"имело\", \"имели\", \"имею\", \"имеешь\", \"имеет\", \"имеем\", \"имеете\", \"имеют\", \"следует\", \"следовало\", \"необходимо\", \"необходим\", \"необходима\", \"необходимы\", \"нужно\", \"нужен\", \"нужна\", \"обязан\", \"обязана\", \"обязано\", \"обязаны\", \"должен\", \"должна\", \"должно\", \"должны\", \"требуется\", \"требуются\", \"имеется\", \"имеются\", \"есть\", \"можно\"];\nvar copula = [\"появиться\", \"появился\", \"появилась\", \"появилось\", \"появились\", \"появлюсь\", \"появишься\", \"появится\", \"появимся\", \"появитесь\", \"появимся\", \"появляться\", \"появлялся\", \"появлялась\", \"появлялось\", \"появлялись\", \"появляюсь\", \"появляешься\", \"появляется\", \"появляемся\", \"появляются\", \"появляетесь\", \"стал\", \"стала\", \"стало\", \"стану\", \"станешь\", \"станет\", \"станем\", \"станете\", \"станут\", \"становиться\", \"становился\", \"становилось\", \"становилась\", \"становились\", \"становлюсь\", \"становишься\", \"становится\", \"становимся\", \"становитесь\", \"становятся\", \"прийти\", \"пришел\", \"пришёл\", \"пришла\", \"пришло\", \"пришли\", \"приду\", \"придешь\", \"придёшь\", \"придет\", \"придёт\", \"придем\", \"придём\", \"придете\", \"придёте\", \"придут\", \"приходить\", \"приходил\", \"приходила\", \"приходило\", \"приходили\", \"прихожу\", \"приходишь\", \"приходит\", \"приходим\", \"приходите\", \"происходить\", \"происходил\", \"происходила\", \"происходило\", \"происходили\", \"происходит\", \"происходят\", \"держать\", \"держал\", \"держала\", \"держало\", \"держали\", \"держу\", \"держишь\", \"держит\", \"держим\", \"держите\", \"держут\", \"содержать\", \"содержал\", \"содержала\", \"содержало\", \"содержали\", \"содержу\", \"содержишь\", \"содержит\", \"содержим\", \"содержите\", \"содержут\", \"остаться\", \"остался\", \"осталась\", \"осталось\", \"остались\", \"останусь\", \"останешься\", \"останется\", \"останутся\", \"останетесь\", \"останемся\", \"оставаться\", \"оставался\", \"оставалась\", \"оставалось\", \"оставались\", \"остаюсь\", \"остаешься\", \"остаёшься\", \"остается\", \"остаётся\", \"остаемся\", \"остаёмся\", \"остаетесь\", \"остаётесь\", \"остаются\", \"изменяться\", \"изменялся\", \"изменялась\", \"изменялось\", \"изменялись\", \"изменюсь\", \"изменишься\", \"изменится\", \"изменимся\", \"изменитесь\", \"изменятся\", \"успеть\", \"успел\", \"успела\", \"успело\", \"успели\", \"успею\", \"успеешь\", \"успеет\", \"успеем\", \"успеете\", \"успеют\", \"заниматься\", \"занимался\", \"занималась\", \"занимаюсь\", \"занимаешься\", \"занимается\", \"занимаемся\", \"занимаетесь\", \"занимаемся\", \"заняться\", \"занялся\", \"занялась\", \"занялись\", \"займусь\", \"займешься\", \"займется\", \"займемся\", \"займетесь\", \"займутся\", \"займёшься\", \"займётся\", \"займёмся\", \"займётесь\"];\n// These verbs are frequently used in interviews to indicate questions and answers.\nvar interviewVerbs = [\"сказать\", \"сказал\", \"сказала\", \"сказали\", \"говорить\", \"говорил\", \"говорила\", \"говорили\", \"говорит\", \"говорю\", \"говорим\", \"говоришь\", \"говорят\", \"говорите\", \"объявить\", \"объявил\", \"объявила\", \"объявили\", \"заявить\", \"заявил\", \"заявила\", \"заявили\", \"спросить\", \"спросил\", \"спросила\", \"спросили\", \"указать\", \"указал\", \"указала\", \"указали\", \"объяснить\", \"объяснил\", \"объяснила\", \"объяснили\", \"подумать\", \"подумал\", \"подумала\", \"подумали\", \"думать\", \"думал\", \"думала\", \"думали\", \"думаю\", \"думает\", \"думаешь\", \"думаем\", \"думаете\", \"думают\", \"рассказывать\", \"рассказывал\", \"рассказывала\", \"рассказывали\", \"рассказывают\", \"рассказывает\", \"рассказать\", \"рассказал\", \"рассказала\", \"рассказали\", \"обсудить\", \"обсудил\", \"обсудила\", \"обсудили\", \"предложить\", \"предложил\", \"предложила\", \"предложили\", \"понимать\", \"понимал\", \"понимала\", \"понимали\", \"понимаю\", \"понимаешь\", \"понимает\", \"понимаем\", \"понимаете\", \"понимают\", \"добавить\", \"добавил\", \"добавила\", \"добавили\", \"добавлю\", \"добавишь\", \"добавит\", \"добавим\", \"добавите\", \"добавят\"];\nvar delexicalizedVerbs = [\"казаться\", \"кажется\", \"казалось\", \"казалась\", \"казался\", \"казались\", \"кажутся\", \"давайте\", \"давай\", \"хотеть\", \"хочу\", \"хочешь\", \"хочет\", \"хотим\", \"хотите\", \"хотят\", \"хотел\", \"хотела\", \"хотело\", \"хотели\", \"показать\", \"показал\", \"показала\", \"показало\", \"показали\", \"покажу\", \"покажешь\", \"покажет\", \"покажем\", \"покажете\", \"покажут\", \"показывать\", \"показывал\", \"показывала\", \"показывало\", \"показывали\", \"показываю\", \"показываешь\", \"показывает\", \"показываем\", \"показываете\", \"показывают\", \"идти\", \"шел\", \"шёл\", \"шла\", \"шло\", \"шли\", \"иду\", \"идешь\", \"идёшь\", \"идет\", \"идёт\", \"идем\", \"идём\", \"идете\", \"идёте\", \"идут\", \"брать\", \"брал\", \"брала\", \"брало\", \"брали\", \"беру\", \"берешь\", \"берёшь\", \"берёт\", \"берем\", \"берём\", \"берёте\", \"берут\", \"взять\", \"взял\", \"взяла\", \"взяло\", \"взяли\", \"возьму\", \"возьмешь\", \"возьмет\", \"возьмем\", \"возьмете\", \"возьмут\", \"класть\", \"кладу\", \"кладешь\", \"кладет\", \"кладёшь\", \"кладёт\", \"кладем\", \"кладете\", \"кладём\", \"кладёте\", \"кладут\", \"положить\", \"положил\", \"положила\", \"положило\", \"положили\", \"положу\", \"положишь\", \"положит\", \"положим\", \"положите\", \"положат\", \"использовать\", \"использовал\", \"использовала\", \"использовало\", \"использовали\", \"использую\", \"используешь\", \"используем\", \"используете\", \"используют\", \"пробовать\", \"пробовал\", \"пробовала\", \"пробовало\", \"пробовали\", \"пробую\", \"пробуешь\", \"пробует\", \"пробуем\", \"пробуете\", \"пробуют\", \"попробовать\", \"попробовал\", \"попробовала\", \"попробовало\", \"попробовали\", \"попробую\", \"попробуешь\", \"попробует\", \"попробуем\", \"попробуете\", \"попробуют\", \"иметь\", \"имел\", \"имела\", \"имело\", \"имели\", \"имею\", \"имеешь\", \"имеет\", \"имеем\", \"имеете\", \"имеют\", \"означать\", \"означал\", \"означала\", \"означало\", \"означали\", \"означает\", \"означают\", \"добавлять\", \"добавлял\", \"добавляла\", \"добавляло\", \"добавляли\", \"добавляю\", \"добавляешь\", \"добавляет\", \"добавляем\", \"добавляете\", \"добавляют\", \"состоять\", \"состоял\", \"состояла\", \"состояло\", \"состояли\", \"состою\", \"состоишь\", \"состоит\", \"состоим\", \"состоите\", \"состоят\", \"убеждаться\", \"убедился\", \"убедилась\", \"убедилось\", \"убедишься\", \"убедится\", \"убедимся\", \"убедитесь\", \"убедятся\", \"убеждать\", \"убедил\", \"убедила\", \"убедили\", \"убедишь\", \"убедит\", \"убедим\", \"убедите\", \"убедят\", \"являться\", \"являлся\", \"являлась\", \"являлось\", \"являлись\", \"являюсь\", \"являешься\", \"является\", \"являемся\", \"являетесь\", \"являются\"];\n// Numerals\nvar cardinalNumerals = [\"один\", \"одна\", \"одно\", \"одни\", \"два\", \"две\", \"двое\", \"двух\", \"двоих\", \"двум\", \"двоим\", \"двумя\", \"двоими\", \"три\", \"трое\", \"трех\", \"трёх\", \"троих\", \"трем\", \"трём\", \"троим\", \"тремя\", \"четыре\", \"пять\", \"шесть\", \"семь\", \"восемь\", \"девять\", \"десять\", \"одиннадцать\", \"двенадцать\", \"тринадцать\", \"четырнадцать\", \"пятнадцать\", \"шестнадцать\", \"семнадцать\", \"восемнадцать\", \"девятнадцать\", \"двадцать\", \"тридцать\", \"сорок\", \"пятьдесят\", \"шестьдесят\", \"семьдесят\", \"восемьдесят\", \"девяносто\", \"сто\", \"сотни\", \"двести\", \"триста\", \"четыреста\", \"пятьсот\", \"шестьсот\", \"семьсот\", \"восемьсот\", \"девятьсот\", \"тысяча\", \"тысячи\", \"тысяче\", \"тысячей\", \"тысячам\", \"тысячами\", \"тысячах\", \"тыс\", \"миллион\", \"миллиона\", \"миллиону\", \"миллионом\", \"миллионе\", \"миллионы\", \"миллионов\", \"миллионам\", \"миллионами\", \"миллионах\", \"миллиард\", \"миллиарда\", \"миллиарду\", \"миллиардом\", \"миллиарде\", \"миллиарды\", \"миллиардов\", \"миллиардам\", \"миллиардами\", \"миллиардах\"];\nvar ordinalNumerals = [\"первый\", \"первого\", \"первому\", \"первом\", \"первым\", \"первая\", \"первой\", \"первое\", \"первые\", \"первых\", \"первыми\", \"второй\", \"второго\", \"второму\", \"втором\", \"вторым\", \"вторая\", \"второй\", \"второе\", \"вторые\", \"вторых\", \"вторыми\", \"третий\", \"третьего\", \"третьему\", \"третьим\", \"третьем\", \"третья\", \"третьей\", \"третье\", \"третьи\", \"третьих\", \"третьими\", \"четвертый\", \"четвертого\", \"четвертому\", \"четвертым\", \"четвертом\", \"четвертая\", \"четвертой\", \"четвертое\", \"четвертые\", \"четвертых\", \"четвертыми\", \"пятый\", \"пятого\", \"пятому\", \"пятом\", \"пятым\", \"пятая\", \"пятое\", \"пятые\", \"пятых\", \"пятыми\", \"шестой\", \"шестого\", \"шестому\", \"шестым\", \"шестая\", \"шестое\", \"шестые\", \"шестых\", \"шестыми\", \"седьмой\", \"седьмого\", \"седьмому\", \"седьмым\", \"седьмая\", \"седьмое\", \"седьмые\", \"седьмых\", \"седьмыми\", \"восьмой\", \"восьмого\", \"восьмому\", \"восьмым\", \"восьмая\", \"восьмое\", \"восьмые\", \"восьмых\", \"восьмыми\", \"девятый\", \"девятого\", \"девятому\", \"девятым\", \"девятая\", \"девятое\", \"девятые\", \"девятых\", \"девятыми\", \"десятый\", \"десятого\", \"десятому\", \"десятым\", \"десятая\", \"десятое\", \"десятые\", \"десятых\", \"десятыми\", \"одиннадцатый\", \"одиннадцатого\", \"одиннадцатому\", \"одиннадцатым\", \"одиннадцатая\", \"одиннадцатое\", \"одиннадцатые\", \"одиннадцатых\", \"одиннадцатыми\", \"двенадцатый\", \"двенадцатого\", \"двенадцатому\", \"двенадцатым\", \"двенадцатая\", \"двенадцатое\", \"двенадцатые\", \"двенадцатых\", \"двенадцатыми\", \"тринадцатый\", \"тринадцатого\", \"тринадцатому\", \"тринадцатым\", \"тринадцатая\", \"тринадцатое\", \"тринадцатые\", \"тринадцатых\", \"тринадцатыми\", \"четырнадцатый\", \"четырнадцатого\", \"четырнадцатому\", \"четырнадцатым\", \"четырнадцатая\", \"четырнадцатое\", \"четырнадцатые\", \"четырнадцатых\", \"четырнадцатыми\", \"пятнадцатый\", \"пятнадцатого\", \"пятнадцатому\", \"пятнадцатым\", \"пятнадцатая\", \"пятнадцатое\", \"пятнадцатые\", \"пятнадцатых\", \"пятнадцатыми\", \"шестнадцатый\", \"шестнадцатого\", \"шестнадцатому\", \"шестнадцатым\", \"шестнадцатая\", \"шестнадцатое\", \"шестнадцатые\", \"шестнадцатых\", \"шестнадцатыми\", \"семнадцатый\", \"семнадцатого\", \"семнадцатому\", \"семнадцатым\", \"семнадцатая\", \"семнадцатое\", \"семнадцатые\", \"семнадцатых\", \"семнадцатыми\", \"восемнадцатый\", \"восемнадцатого\", \"восемнадцатому\", \"восемнадцатым\", \"восемнадцатая\", \"восемнадцатое\", \"восемнадцатые\", \"восемнадцатых\", \"восемнадцатыми\", \"девятнадцатый\", \"девятнадцатого\", \"девятнадцатому\", \"девятнадцатым\", \"девятнадцатая\", \"девятнадцатое\", \"девятнадцатые\", \"девятнадцатых\", \"девятнадцатыми\", \"двадцатый\", \"двадцатого\", \"двадцатому\", \"двадцатым\", \"двадцатая\", \"двадцатое\", \"двадцатые\", \"двадцатых\", \"двадцатыми\", \"тридцатый\", \"тридцатого\", \"тридцатому\", \"тридцатым\", \"тридцатая\", \"тридцатое\", \"тридцатые\", \"тридцатых\", \"тридцатыми\", \"сороковой\", \"сорокового\", \"сороковому\", \"сороковым\", \"сороковая\", \"сороковое\", \"сороковые\", \"сороковых\", \"сороковыми\", \"пятидесятый\", \"пятидесятого\", \"пятидесятому\", \"пятидесятым\", \"пятидесятая\", \"пятидесятое\", \"пятидесятые\", \"пятидесятых\", \"пятидесятыми\", \"шестидесятый\", \"шестидесятого\", \"шестидесятому\", \"шестидесятым\", \"шестидесятая\", \"шестидесятое\", \"шестидесятые\", \"шестидесятых\", \"шестидесятыми\", \"семидесятый\", \"семидесятого\", \"семидесятому\", \"семидесятым\", \"семидесятая\", \"семидесятое\", \"семидесятые\", \"семидесятых\", \"семидесятыми\", \"восьмидесятый\", \"восьмидесятого\", \"восьмидесятому\", \"восьмидесятым\", \"восьмидесятая\", \"восьмидесятое\", \"восьмидесятые\", \"восьмидесятых\", \"восьмидесятыми\", \"девяностый\", \"девяностого\", \"девяностому\", \"девяностым\", \"девяностая\", \"девяностое\", \"девяностые\", \"девяностых\", \"девяностыми\", \"сотый\", \"сотого\", \"сотому\", \"сотым\", \"сотая\", \"сотое\", \"сотые\", \"сотых\", \"сотыми\", \"двухсотый\", \"двухсотого\", \"двухсотому\", \"двухсотым\", \"двухсотая\", \"двухсотое\", \"двухсотые\", \"двухсотых\", \"двухсотыми\", \"трехсотый\", \"трехсотого\", \"трехсотому\", \"трехсотым\", \"трехсотая\", \"трехсотое\", \"трехсотые\", \"трехсотых\", \"трехсотыми\", \"трёхсотый\", \"трёхсотого\", \"трёхсотому\", \"трёхсотым\", \"трёхсотая\", \"трёхсотое\", \"трёхсотые\", \"трёхсотых\", \"трёхсотыми\", \"четырехсотый\", \"четырехсотого\", \"четырехсотому\", \"четырехсотым\", \"четырехсотая\", \"четырехсотое\", \"четырехсотые\", \"четырехсотых\", \"четырехсотыми\", \"четырёхсотый\", \"четырёхсотого\", \"четырёхсотому\", \"четырёхсотым\", \"четырёхсотая\", \"четырёхсотое\", \"четырёхсотые\", \"четырёхсотых\", \"четырёхсотыми\", \"пятисотый\", \"пятисотого\", \"пятисотому\", \"пятисотым\", \"пятисотая\", \"пятисотое\", \"пятисотые\", \"пятисотых\", \"пятисотыми\", \"шестисотый\", \"шестисотого\", \"шестисотому\", \"шестисотым\", \"шестисотая\", \"шестисотое\", \"шестисотые\", \"шестисотых\", \"шестисотыми\", \"семисотый\", \"семисотого\", \"семисотому\", \"семисотым\", \"семисотая\", \"семисотое\", \"семисотые\", \"семисотых\", \"семисотыми\", \"восьмисотый\", \"восьмисотого\", \"восьмисотому\", \"восьмисотым\", \"восьмисотая\", \"восьмисотое\", \"восьмисотые\", \"восьмисотых\", \"восьмисотыми\", \"девятисотый\", \"девятисотого\", \"девятисотому\", \"девятисотым\", \"девятисотая\", \"девятисотое\", \"девятисотые\", \"девятисотых\", \"девятисотыми\", \"тысячный\", \"тысячного\", \"тысячному\", \"тысячным\", \"тысячная\", \"тысячное\", \"тысячные\", \"тысячных\", \"тысячными\", \"миллионный\", \"миллионного\", \"миллионному\", \"миллионным\", \"миллионная\", \"миллионное\", \"миллионные\", \"миллионных\", \"миллионными\", \"миллиардный\", \"миллиардного\", \"миллиардному\", \"миллиардным\", \"миллиардная\", \"миллиардное\", \"миллиардные\", \"миллиардных\", \"миллиардными\"];\n// Pronouns (in all cases)\nvar personalPronouns = [\"я\", \"меня\", \"мне\", \"мной\", \"мною\", \"ты\", \"тебя\", \"тебе\", \"тобой\", \"он\", \"его\", \"него\", \"ему\", \"нему\", \"нем\", \"нём\", \"им\", \"ним\", \"она\", \"ее\", \"нее\", \"неё\", \"её\", \"ей\", \"ею\", \"ней\", \"нею\", \"оно\", \"мы\", \"нам\", \"нас\", \"нами\", \"вы\", \"вас\", \"вам\", \"вами\", \"они\", \"них\", \"ими\", \"ними\", \"их\"];\nvar demonstrativePronouns = [\"тот\", \"тому\", \"том\", \"тем\", \"того\", \"та\", \"той\", \"ту\", \"то\", \"те\", \"тех\", \"теми\", \"этот\", \"этому\", \"этом\", \"этим\", \"этого\", \"эта\", \"этой\", \"эту\", \"это\", \"эти\", \"этих\", \"этими\", \"такой\", \"такого\", \"такому\", \"таким\", \"таком\", \"такая\", \"такую\", \"такое\", \"такие\", \"таких\", \"такими\", \"этакий\", \"этакого\", \"этакому\", \"этаким\", \"этаком\", \"этакая\", \"этакую\", \"этакое\", \"этакие\", \"этаких\", \"этакими\"];\nvar possessivePronouns = [\"мой\", \"моего\", \"моему\", \"моём\", \"моим\", \"моя\", \"моей\", \"мое\", \"моё\", \"мои\", \"моих\", \"моим\", \"твой\", \"твоего\", \"твоему\", \"твоём\", \"твоем\", \"твоим\", \"твоя\", \"твоей\", \"твою\", \"твое\", \"твоё\", \"твои\", \"твоих\", \"твоим\", \"свой\", \"своего\", \"своему\", \"своём\", \"своем\", \"своим\", \"своя\", \"своей\", \"свою\", \"свое\", \"своё\", \"свои\", \"своих\", \"своим\",\n// Words \"его\", \"ее\", \"их\" already included in personalPronouns\n\"наш\", \"нашего\", \"нашему\", \"нашем\", \"наша\", \"нашей\", \"наше\", \"наши\", \"нашим\", \"наших\", \"ваш\", \"вашего\", \"вашему\", \"вашем\", \"ваша\", \"вашей\", \"ваше\", \"ваши\", \"вашим\", \"ваших\"];\nvar quantifiers = [\"некоторый\", \"некоторого\", \"некоторому\", \"некоторым\", \"некотором\", \"некоторая\", \"некоторую\", \"некоторое\", \"некоторые\", \"некоторых\", \"некоторыми\", \"многие\", \"многого\", \"многому\", \"многим\", \"многом\", \"многая\", \"многую\", \"многое\", \"многие\", \"многих\", \"многими\", \"много\", \"множество\", \"каждый\", \"каждого\", \"каждому\", \"каждым\", \"каждом\", \"каждая\", \"каждую\", \"каждое\", \"каждые\", \"каждых\", \"каждыми\", \"достаточно\", \"мало\", \"более\", \"больше\", \"большинство\", \"большинства\", \"большинству\", \"большинстве\", \"несколько\", \"нескольких\", \"менее\", \"меньше\", \"наиболее\", \"наименее\",\n// For expressions like \"что угодно\", \"кто угодно\", \"зачем угодно\"\n\"угодно\", \"же\"];\nvar reflexivePronouns = [\"себя\", \"себе\"];\nvar indefinitePronouns = [\"ничто\", \"ничего\", \"ничему\", \"ничем\", \"ни о чем\", \"ни о чём\", \"никто\", \"никого\", \"никому\", \"никем\", \"ни о ком\", \"весь\", \"всего\", \"всему\", \"всем\", \"всём\", \"все\", \"всё\", \"всех\", \"всеми\", \"всякий\", \"всякого\", \"всякому\", \"всяким\", \"всяком\", \"всякая\", \"всякой\", \"всякую\", \"всякое\", \"всякие\", \"всяких\", \"всякими\", \"кто-то\", \"кого-то\", \"кому-то\", \"кем-то\", \"ком-то\", \"что-то\", \"чего-то\", \"чему-то\", \"чем-то\", \"чём-то\", \"кто-либо\", \"кого-либо\", \"кому-либо\", \"кем-либо\", \"ком-либо\", \"что-либо\", \"чего-либо\", \"чему-либо\", \"чем-либо\", \"чём-либо\", \"кое-кто\", \"кое-кого\", \"кое-кому\", \"кое-кем\", \"кое-ком\", \"кое-что\", \"кое-чего\", \"кое-чему\", \"кое-чем\", \"кое-чём\", \"любой\", \"любого\", \"любому\", \"любым\", \"любом\", \"любая\", \"любую\", \"любое\", \"любые\", \"любых\", \"любыми\", \"какой\", \"какого\", \"какому\", \"каким\", \"каком\", \"какая\", \"какую\", \"какое\", \"какие\", \"каких\", \"какими\", \"какой-то\", \"какого-то\", \"какому-то\", \"каким-то\", \"каком-то\", \"какая-то\", \"какую-то\", \"какое-то\", \"какие-то\", \"каких-то\", \"какими-то\"];\nvar indefinitePronounsPossessive = [\"чей-то\", \"чьего-то\", \"чьему-то\", \"чьим-то\", \"чьем-то\", \"чьём-то\", \"чья-то\", \"чьей-то\", \"чье-то\", \"чьё-то\", \"чьи-то\", \"чьих-то\", \"чьими-то\", \"ничей\", \"чьего\", \"чьему\", \"чьим\", \"чьем\", \"чьём\", \"чья\", \"чьей\", \"чье\", \"чьё\", \"чьи\", \"чьих\", \"чьими\", \"ничейный\", \"ничейного\", \"ничейному\", \"ничейным\", \"ничейном\", \"ничейная\", \"ничейной\", \"ничейную\", \"ничейное\", \"ничейные\", \"ничейных\", \"ничейными\"];\n// Interrogatives, adverbs, intensifiers, adjectives\nvar interrogativeDeterminers = [\"который\", \"которого\", \"которому\", \"которым\", \"котором\", \"которая\", \"которую\", \"которое\", \"которые\", \"которых\", \"которыми\", \"чей\", \"чьего\", \"чьему\", \"чьим\", \"чьем\", \"чьём\", \"чья\", \"чьей\", \"чье\", \"чьё\", \"чьи\", \"чьих\", \"чьими\"];\nvar interrogativePronouns = [\"кто\", \"кого\", \"кому\", \"кем\", \"что\", \"чего\", \"чему\", \"чем\", \"чём\"];\nvar interrogativeProAdverbs = [\"где\", \"куда\", \"откуда\", \"как\", \"почему\", \"зачем\", \"сколько\", \"ли\", \"когда\"];\nvar locativeAdverbs = [\"везде\", \"нигде\", \"там\", \"здесь\", \"повсюду\"];\nvar adverbialGenitives = [\"никогда\", \"всегда\", \"однажды\", \"единожды\", \"дважды\", \"трижды\", \"четырежды\", \"уже\"];\nvar intensifiers = [\"чрезвычайно\", \"очень\", \"крайне\", \"абсолютно\", \"полностью\", \"совершенно\", \"часто\", \"чаще\", \"довольно\", \"несколько\", \"значительно\", \"немного\", \"немножко\", \"частично\", \"просто\"];\nvar generalAdjectivesAdverbs = [\"базовый\", \"базового\", \"базовому\", \"базовым\", \"базовом\", \"базовая\", \"базовой\", \"базовое\", \"базовые\", \"базовых\", \"базовым\", \"базовыми\", \"быстрый\", \"быстрого\", \"быстрому\", \"быстрым\", \"быстром\", \"быстрая\", \"быстрой\", \"быстрое\", \"быстрые\", \"быстрых\", \"быстрым\", \"быстрыми\", \"быстрейший\", \"быстрейшего\", \"быстрейшему\", \"быстрейшим\", \"быстрейшем\", \"быстрейшая\", \"быстрейшей\", \"быстрейшее\", \"быстрейшие\", \"быстрейших\", \"быстрейшим\", \"быстрейшими\", \"большой\", \"большого\", \"большому\", \"большим\", \"большом\", \"большая\", \"большое\", \"большие\", \"больших\", \"большим\", \"большими\", \"быстрее\", \"быстро\", \"важный\", \"важного\", \"важному\", \"важным\", \"важном\", \"важная\", \"важной\", \"важное\", \"важные\", \"важных\", \"важным\", \"важными\", \"важнее\", \"важно\", \"возможный\", \"возможного\", \"возможному\", \"возможным\", \"возможном\", \"возможная\", \"возможной\", \"возможное\", \"возможные\", \"возможных\", \"возможным\", \"возможными\", \"высокий\", \"высокого\", \"высокому\", \"высоким\", \"высоком\", \"высокая\", \"высокой\", \"высокое\", \"высокие\", \"высоких\", \"высоким\", \"высокими\", \"выше\", \"высоко\", \"главный\", \"главного\", \"главному\", \"главным\", \"главном\", \"главная\", \"главной\", \"главное\", \"главные\", \"главных\", \"главным\", \"главными\", \"далекий\", \"далекого\", \"далекому\", \"далеким\", \"далеком\", \"далекая\", \"далекой\", \"далекое\", \"далекие\", \"далеких\", \"далеким\", \"далекими\", \"далёкий\", \"далёкого\", \"далёкому\", \"далёким\", \"далёком\", \"далёкая\", \"далёкой\", \"далёкое\", \"далёкие\", \"далёких\", \"далёким\", \"далёкими\", \"длиннее\", \"длинный\", \"длинного\", \"длинному\", \"длинным\", \"длинном\", \"длинная\", \"длинной\", \"длинное\", \"длинные\", \"длинных\", \"длинным\", \"длинными\", \"доступный\", \"доступного\", \"доступному\", \"доступным\", \"доступном\", \"доступная\", \"доступной\", \"доступное\", \"доступные\", \"доступных\", \"доступным\", \"доступными\", \"жуткий\", \"жуткого\", \"жуткому\", \"жутким\", \"жутком\", \"жуткая\", \"жуткой\", \"жуткое\", \"жуткие\", \"жутких\", \"жутким\", \"жуткими\", \"законченный\", \"законченного\", \"законченному\", \"законченным\", \"законченном\", \"законченная\", \"законченной\", \"законченное\", \"законченные\", \"законченных\", \"законченным\", \"законченными\", \"занят\", \"занята\", \"заняты\", \"занятой\", \"занятого\", \"занятому\", \"занятым\", \"занятом\", \"занятая\", \"занятое\", \"занятые\", \"занятых\", \"занятым\", \"занятыми\", \"короткий\", \"короткого\", \"короткому\", \"коротким\", \"коротком\", \"короткая\", \"короткой\", \"короткое\", \"короткие\", \"коротких\", \"коротким\", \"короткими\", \"короче\", \"кошмарный\", \"кошмарного\", \"кошмарному\", \"кошмарным\", \"кошмарном\", \"кошмарная\", \"кошмарной\", \"кошмарное\", \"кошмарные\", \"кошмарных\", \"кошмарным\", \"кошмарными\", \"красивый\", \"красивого\", \"красивому\", \"красивым\", \"красивом\", \"красивая\", \"красивой\", \"красивое\", \"красивые\", \"красивых\", \"красивым\", \"красивыми\", \"лёгкий\", \"лёгкого\", \"лёгкому\", \"лёгким\", \"лёгком\", \"лёгкая\", \"лёгкой\", \"лёгкое\", \"лёгкие\", \"лёгких\", \"лёгким\", \"лёгкими\", \"легкий\", \"легкого\", \"легкому\", \"легким\", \"легком\", \"легкая\", \"легкой\", \"легкое\", \"легкие\", \"легких\", \"легким\", \"легкими\", \"легко\", \"легче\", \"лучше\", \"лучший\", \"лучшего\", \"лучшему\", \"лучшим\", \"лучшем\", \"лучшая\", \"лучшей\", \"лучшее\", \"лучшие\", \"лучших\", \"лучшим\", \"лучшими\", \"маленький\", \"маленького\", \"маленькому\", \"маленьким\", \"маленьком\", \"маленькая\", \"маленькой\", \"маленькое\", \"маленькие\", \"маленьких\", \"маленьким\", \"маленькими\", \"малюсенький\", \"малюсенького\", \"малюсенькому\", \"малюсеньким\", \"малюсеньком\", \"малюсенькая\", \"малюсенькой\", \"малюсенькое\", \"малюсенькие\", \"малюсеньких\", \"малюсеньким\", \"малюсенькими\", \"меньший\", \"меньшего\", \"меньшему\", \"меньшим\", \"меньшем\", \"меньшая\", \"меньшей\", \"меньшее\", \"меньшие\", \"меньших\", \"меньшим\", \"меньшими\", \"многочисленный\", \"многочисленного\", \"многочисленному\", \"многочисленным\", \"многочисленном\", \"многочисленная\", \"многочисленной\", \"многочисленное\", \"многочисленные\", \"многочисленных\", \"многочисленным\", \"многочисленными\", \"молодой\", \"молодого\", \"молодому\", \"молодым\", \"молодом\", \"молодая\", \"молодое\", \"называемый\", \"называемого\", \"называемому\", \"называемым\", \"называемом\", \"называемая\", \"называемой\", \"называемое\", \"называемые\", \"называемых\", \"называемым\", \"называемыми\", \"больший\", \"большего\", \"большему\", \"большим\", \"большем\", \"большая\", \"большей\", \"большее\", \"большие\", \"больших\", \"большим\", \"большими\", \"наибольший\", \"наибольшего\", \"наибольшему\", \"наибольшим\", \"наибольшем\", \"наибольшая\", \"наибольшей\", \"наибольшее\", \"наибольшие\", \"наибольших\", \"наибольшим\", \"наибольшими\", \"меньший\", \"меньшего\", \"меньшему\", \"меньшим\", \"меньшем\", \"меньшая\", \"меньшей\", \"меньшее\", \"меньшие\", \"меньших\", \"меньшим\", \"меньшими\", \"наименьший\", \"наименьшего\", \"наименьшему\", \"наименьшим\", \"наименьшем\", \"наименьшая\", \"наименьшей\", \"наименьшее\", \"наименьшие\", \"наименьших\", \"наименьшим\", \"наименьшими\", \"наихудший\", \"наихудшего\", \"наихудшему\", \"наихудшим\", \"наихудшем\", \"наихудшая\", \"наихудшей\", \"наихудшее\", \"наихудшие\", \"наихудших\", \"наихудшим\", \"наихудшими\", \"напрямую\", \"настоящий\", \"настоящего\", \"настоящему\", \"настоящим\", \"настоящем\", \"настоящая\", \"настоящей\", \"настоящее\", \"настоящие\", \"настоящих\", \"настоящим\", \"настоящими\", \"недавний\", \"недавнего\", \"недавнему\", \"недавним\", \"недавнем\", \"недавняя\", \"недавней\", \"недавнее\", \"недавние\", \"недавних\", \"недавним\", \"недавними\", \"необходимый\", \"необходимого\", \"необходимому\", \"необходимым\", \"необходимом\", \"необходимая\", \"необходимой\", \"необходимое\", \"необходимые\", \"необходимых\", \"необходимым\", \"необходимыми\", \"ниже\", \"низкий\", \"низкого\", \"низкому\", \"низким\", \"низком\", \"низкая\", \"низкой\", \"низкое\", \"низкие\", \"низких\", \"низким\", \"низкими\", \"новейший\", \"новейшего\", \"новейшему\", \"новейшим\", \"новейшем\", \"новейшая\", \"новейшей\", \"новейшее\", \"новейшие\", \"новейших\", \"новейшим\", \"новейшими\", \"новый\", \"нового\", \"новому\", \"новым\", \"новом\", \"новая\", \"новое\", \"новые\", \"новых\", \"новым\", \"новыми\", \"нормальный\", \"нормального\", \"нормальному\", \"нормальным\", \"нормальном\", \"нормальная\", \"нормальное\", \"нормальные\", \"нормальных\", \"нормальным\", \"нормальными\", \"обыкновенный\", \"обыкновенного\", \"обыкновенному\", \"обыкновенным\", \"обыкновенном\", \"обыкновенная\", \"обыкновенное\", \"обыкновенные\", \"обыкновенных\", \"обыкновенным\", \"обыкновенными\", \"обычный\", \"обычного\", \"обычному\", \"обычным\", \"обычном\", \"обычная\", \"обычное\", \"обычные\", \"обычных\", \"обычным\", \"обычными\", \"основной\", \"основного\", \"основному\", \"основным\", \"основном\", \"основная\", \"основное\", \"основные\", \"основных\", \"основным\", \"основными\", \"особенный\", \"особенного\", \"особенному\", \"особенным\", \"особенном\", \"особенная\", \"особенное\", \"особенные\", \"особенных\", \"особенным\", \"особенными\", \"отличный\", \"отличного\", \"отличному\", \"отличным\", \"отличном\", \"отличная\", \"отличное\", \"отличные\", \"отличных\", \"отличным\", \"отличными\", \"очевидный\", \"очевидного\", \"очевидному\", \"очевидным\", \"очевидном\", \"очевидная\", \"очевидное\", \"очевидные\", \"очевидных\", \"очевидным\", \"очевидными\", \"плохой\", \"плохого\", \"плохому\", \"плохим\", \"плохом\", \"плохая\", \"плохое\", \"плохие\", \"плохих\", \"плохим\", \"плохими\", \"последний\", \"последнего\", \"последнему\", \"последним\", \"последнем\", \"последняя\", \"последней\", \"последнее\", \"последние\", \"последних\", \"последним\", \"последними\", \"постоянно\", \"постоянный\", \"постоянного\", \"постоянному\", \"постоянным\", \"постоянном\", \"постоянная\", \"постоянное\", \"постоянные\", \"постоянных\", \"постоянным\", \"постоянными\", \"похожий\", \"похожего\", \"похожему\", \"похожим\", \"похожем\", \"похожая\", \"похожей\", \"похожее\", \"похожие\", \"похожих\", \"похожим\", \"похожими\", \"почти\", \"предыдущий\", \"предыдущего\", \"предыдущему\", \"предыдущим\", \"предыдущем\", \"предыдущая\", \"предыдущей\", \"предыдущее\", \"предыдущие\", \"предыдущих\", \"предыдущим\", \"предыдущими\", \"простейший\", \"простейшая\", \"простейшей\", \"простой\", \"простого\", \"простому\", \"простым\", \"простом\", \"простая\", \"простое\", \"простые\", \"простых\", \"простым\", \"простыми\", \"проще\", \"ранний\", \"раннего\", \"раннему\", \"ранним\", \"раннем\", \"ранняя\", \"ранней\", \"раннее\", \"ранние\", \"ранних\", \"ранним\", \"ранними\", \"разный\", \"разного\", \"разному\", \"разным\", \"разном\", \"разная\", \"разной\", \"разное\", \"разные\", \"разных\", \"разным\", \"разными\", \"самый\", \"самого\", \"самому\", \"самым\", \"самом\", \"самая\", \"самой\", \"самое\", \"самые\", \"самых\", \"самым\", \"самыми\", \"собственный\", \"собственного\", \"собственному\", \"собственным\", \"собственном\", \"собственная\", \"собственное\", \"собственные\", \"собственных\", \"собственным\", \"собственными\", \"специальный\", \"специального\", \"специальному\", \"специальным\", \"специальном\", \"специальная\", \"специальное\", \"специальные\", \"специальных\", \"специальным\", \"специальными\", \"специфичный\", \"специфичного\", \"специфичному\", \"специфичным\", \"специфичном\", \"специфичная\", \"специфичное\", \"специфичные\", \"специфичных\", \"специфичным\", \"специфичными\", \"средний\", \"среднего\", \"среднему\", \"средним\", \"среднем\", \"средняя\", \"средней\", \"среднее\", \"средние\", \"средних\", \"средним\", \"средними\", \"старейший\", \"старейшего\", \"старейшему\", \"старейшим\", \"старейшем\", \"старейшая\", \"старейшей\", \"старейшее\", \"старейшие\", \"старейших\", \"старейшим\", \"старейшими\", \"старый\", \"старого\", \"старому\", \"старым\", \"старом\", \"старая\", \"старой\", \"старое\", \"старые\", \"старых\", \"старым\", \"старыми\", \"текущий\", \"текущего\", \"текущему\", \"текущим\", \"текущем\", \"текущая\", \"текущей\", \"текущее\", \"текущие\", \"текущих\", \"текущим\", \"текущими\", \"тяжелее\", \"тяжёлый\", \"тяжёлого\", \"тяжёлому\", \"тяжёлым\", \"тяжёлом\", \"тяжёлая\", \"тяжёлое\", \"тяжёлые\", \"тяжёлых\", \"тяжёлым\", \"тяжёлыми\", \"тяжелый\", \"тяжелого\", \"тяжелому\", \"тяжелым\", \"тяжелом\", \"тяжелая\", \"тяжелое\", \"тяжелые\", \"тяжелых\", \"тяжелым\", \"тяжелыми\", \"хороший\", \"хорошего\", \"хорошему\", \"хорошим\", \"хорошем\", \"хорошая\", \"хорошей\", \"хорошее\", \"хорошие\", \"хороших\", \"хорошим\", \"хорошими\", \"хорошо\", \"худший\", \"худшего\", \"худшему\", \"худшим\", \"худшем\", \"худшая\", \"худшей\", \"худшее\", \"худшие\", \"худших\", \"худшим\", \"худшими\", \"хуже\", \"целый\", \"целого\", \"целому\", \"целым\", \"целом\", \"целая\", \"целой\", \"целое\", \"целые\", \"целых\", \"целым\", \"целыми\", \"именно\", \"обязательно\", \"действительно\"];\n// Prepositions, taken from https://github.com/sshra/database-russian-morphology/blob/master/words-russian-prepositions-morf.sql.gz\nvar prepositions = [\"а-ля\", \"без\", \"безо\", \"без ведома\", \"благодаря\", \"близ\", \"в\", \"во\", \"в адрес\", \"в аспекте\", \"в виде\", \"в глазах\", \"в глубь\", \"в деле\", \"в дополнение к\", \"в духе\", \"в завершение\", \"в зависимости от\", \"в заключение\", \"в знак\", \"в интересах\", \"в качестве\", \"в лице\", \"в меру\", \"в направлении\", \"в направлении к\", \"в направлении ко\", \"в нарушение\", \"в области\", \"в обмен на\", \"в обстановке\", \"в обход\", \"в ответ на\", \"в отдалении от\", \"в отличие от\", \"в отношении\", \"в память\", \"в плане\", \"в пользу\", \"в порядке\", \"в предвидении\", \"в предвкушении\", \"в преддверии\", \"в присутствии\", \"в продолжение\", \"в противность\", \"в противовес\", \"в противоположность\", \"в процессе\", \"в разрезе\", \"в районе\", \"в рамках\", \"в рассуждении\", \"в расчете на\", \"в результате\", \"в роли\", \"в ряду\", \"в свете\", \"в связи с\", \"в связи со\", \"в силу\", \"в случае\", \"в смысле\", \"в согласии с\", \"в сообществе с\", \"в соответствии с\", \"в соответствии со\", \"в сопоставлении с\", \"в сопровождении\", \"в составе\", \"в сравнении с\", \"в сравнении со\", \"в стороне от\", \"в сторону\", \"в сфере\", \"в счет\", \"в течение\", \"в угоду\", \"в унисон с\", \"в условиях\", \"в ущерб\", \"в форме\", \"в ходе\", \"в целях\", \"в честь\", \"в числе\", \"в число\", \"вблизи\", \"вблизи от\", \"вверху\", \"ввиду\", \"вглубь\", \"вдалеке от\", \"вдали\", \"вдали от\", \"вдобавок к\", \"вдобавок ко\", \"вдогон\", \"вдогонку\", \"вдоль\", \"вдоль по\", \"взамен\", \"включая\", \"вкось\", \"вкруг\", \"вместе с\", \"вместе со\", \"вместо\", \"вне\", \"вне зависимости от\", \"внизу\", \"внутри\", \"внутрь\", \"вовнутрь\", \"во время\", \"во главе\", \"во главе с\", \"во главе со\", \"во избежание\", \"во изменение\", \"во имя\", \"во исполнение\", \"во славу\", \"возле\", \"вокруг\", \"волею\", \"вопреки\", \"вперед\", \"впереди\", \"вплоть до\", \"впредь до\", \"вразрез\", \"времен\", \"вроде\", \"вслед\", \"вослед\", \"вслед за\", \"вследствие\", \"выше\", \"для\", \"до\", \"за\", \"за исключением\", \"за счет\", \"заботами\", \"из\", \"изо\", \"из числа\", \"из-за\", \"из-под\", \"из-подо\", \"изнутри\", \"именем\", \"имени\", \"исключая\", \"исходя из\", \"к\", \"ко\", \"к числу\", \"касаемо\", \"касательно\", \"кончая\", \"кроме\", \"кругом\", \"между\", \"меж\", \"промеж\", \"промежду\", \"на\", \"мимо\", \"минуя\", \"на\", \"на базе\", \"на благо\", \"на глазах у\", \"на грани\", \"на имя\", \"на манер\", \"на основании\", \"на основе\", \"на почве\", \"на правах\", \"на предмет\", \"на протяжении\", \"на пути\", \"на пути к\", \"на пути ко\", \"на путях\", \"на путях к\", \"на путях ко\", \"на радость\", \"на случай\", \"на смену\", \"на стороне\", \"на сторону\", \"на уровне\", \"на фоне\", \"наверху\", \"навстречу\", \"над\", \"надо\", \"назади\", \"накануне\", \"наперекор\", \"наперерез\", \"наперехват\", \"наподобие\", \"напротив\", \"наравне с\", \"наравне со\", \"наряду с\", \"наряду со\", \"насупротив\", \"насчет\", \"начиная\", \"начиная от\", \"начиная с\", \"начиная со\", \"не без\", \"не в пример\", \"не говоря о\", \"не говоря об\", \"не говоря обо\", \"не до\", \"не считая\", \"невдалеке от\", \"невзирая на\", \"недалеко\", \"недалеко от\", \"независимо\", \"независимо от\", \"неподалеку от\", \"несмотря на\", \"ниже\", \"о\", \"об\", \"обо\", \"около\", \"окрест\", \"от\", \"ото\", \"от имени\", \"от лица\", \"относительно\", \"памяти\", \"перед\", \"передо\", \"пред\", \"предо\", \"перед\", \"передо\", \"пред\", \"предо\", \"перед лицом\", \"плюс к\", \"плюс ко\", \"по\", \"по адресу\", \"по аналогии с\", \"по аналогии со\", \"по вине\", \"по истечении\", \"по линии\", \"по мере\", \"по направлению\", \"по направлению к\", \"по направлению ко\", \"по отношению к\", \"по отношению ко\", \"по поводу\", \"по праву\", \"по примеру\", \"по причине\", \"по прошествии\", \"по пути\", \"по случаю\", \"по сравнению с\", \"по сравнению со\", \"по стопам\", \"по части\", \"по-за\", \"по-над\", \"по-под\", \"поблизости\", \"поблизости от\", \"поверх\", \"погодя\", \"под\", \"подо\", \"под видом\", \"под знаком\", \"под предлогом\", \"под председательством\", \"под эгидой\", \"подле\", \"подобно\", \"позади\", \"позднее\", \"поздней\", \"позже\", \"помимо\", \"поодаль от\", \"поперед\", \"поперек\", \"порядка\", \"посереди\", \"посередине\", \"посередке\", \"посередь\", \"после\", \"посреди\", \"посредине\", \"посредством\", \"превыше\", \"прежде\", \"при\", \"при всей\", \"при всем\", \"при всех\", \"при помощи\", \"при посредстве\", \"при условии\", \"применительно к\", \"применительно ко\", \"про\", \"против\", \"противно\", \"путем\", \"ради\", \"раньше\", \"рядом с\", \"рядом со\", \"с\", \"со\", \"с ведома\", \"с помощью\", \"с учетом\", \"с целью\", \"сбоку\", \"сбоку от\", \"сверх\", \"сверху\", \"свыше\", \"сзади\", \"силами\", \"сквозь\", \"следом за\", \"смотря по\", \"снаружи\", \"снизу\", \"со стороны\", \"совместно с\", \"совместно со\", \"совокупно с\", \"согласно\", \"согласно с\", \"согласно со\", \"сообразно\", \"сообразно с\", \"сообразно со\", \"сообща с\", \"сообща со\", \"соответственно\", \"соответственно с\", \"соответственно со\", \"соразмерно\", \"соразмерно с\", \"соразмерно со\", \"спереди\", \"спустя\", \"сравнительно с\", \"сравнительно со\", \"среди\", \"средь\", \"сродни\", \"судя по\", \"супротив\", \"считая\", \"типа\", \"у\", \"ценой\", \"ценою\", \"через\", \"что до\"];\n// Conjunctions (also covered by transition words\nvar coordinatingConjunctions = [\"и\", \"или\", \"и/или\", \"еще\", \"ещё\", \"а\"];\nvar subordinatingConjunctions = [\"если\", \"даже\"];\nvar interjections = [\"ох\", \"вау\", \"тю-тю\", \"ох-ох-ох\", \"эх\", \"фуф\", \"ага\", \"угу\", \"упс\", \"ой\", \"бее\", \"ну\", \"вот\"];\n// These words and abbreviations are frequently used in recipes in lists of ingredients.\nvar recipeWords = [\"ст\", \"ч\", \"л\", \"кг\", \"полкило\", \"г\", \"гр\", \"мл\", \"дл\", \"пол-литра\", \"мг\", \"см\", \"м\", \"км\"];\n// \"век\" and all its forms were not added because of conflict with \"веко\"\nvar timeWords = [\"секунд\", \"секунда\", \"минут\", \"минута\", \"час\", \"часа\", \"часов\", \"день\", \"дня\", \"дней\", \"неделя\", \"недели\", \"недель\", \"месяц\", \"месяца\", \"месяцев\", \"год\", \"года\", \"году\", \"годы\", \"лет\", \"гг\", \"сегодня\", \"завтра\", \"послезавтра\", \"вчера\", \"позавчера\", \"тыс до н э\", \"н э\", \"до н э\", \"тыс до н\"];\n// 'People' should only be removed in combination with 'some', 'many' and 'few' (and is therefore not yet included in the list below).\nvar vagueNouns = [\"вещь\", \"вещи\", \"вещью\", \"вещей\", \"вещам\", \"вещами\", \"вещах\", \"метод\", \"метода\", \"методом\", \"методу\", \"методе\", \"методы\", \"методам\", \"методами\", \"методах\", \"способ\", \"способа\", \"способом\", \"способу\", \"способе\", \"способы\", \"способам\", \"способами\", \"способах\", \"свойство\", \"свойства\", \"свойстве\", \"свойств\", \"свойствам\", \"свойствах\", \"свойствами\", \"случай\", \"случая\", \"случаем\", \"случаю\", \"случае\", \"случаи\", \"случаям\", \"случаями\", \"случаях\", \"дело\", \"дела\", \"делом\", \"делу\", \"деле\", \"делам\", \"делами\", \"делах\", \"сходство\", \"сходства\", \"сходстве\", \"сходств\", \"сходствам\", \"сходствах\", \"сходствами\", \"часть\", \"части\", \"частью\", \"частей\", \"частям\", \"частями\", \"частях\", \"штука\", \"штуки\", \"штуке\", \"штуку\", \"штук\", \"штукам\", \"штуками\", \"штуках\", \"раз\", \"раза\", \"разом\", \"разу\", \"разе\", \"разы\", \"разам\", \"разами\", \"разах\", \"вид\", \"вида\", \"видом\", \"виду\", \"виде\", \"виды\", \"видам\", \"видами\", \"видах\", \"процент\", \"процента\", \"процентом\", \"проценту\", \"проценте\", \"проценты\", \"процентам\", \"процентами\", \"процентах\", \"аспект\", \"аспекта\", \"аспектом\", \"аспекту\", \"аспекте\", \"аспекты\", \"аспектам\", \"аспектами\", \"аспектах\", \"пункт\", \"пункта\", \"пунктом\", \"пункту\", \"пункте\", \"пункты\", \"пунктам\", \"пунктами\", \"пунктах\", \"идея\", \"идеи\", \"идее\", \"идеей\", \"идеям\", \"идеями\", \"идеях\", \"тема\", \"темы\", \"теме\", \"тему\", \"темой\", \"темам\", \"темами\", \"темах\", \"человек\", \"человека\", \"человеком\", \"человеку\", \"человеке\", \"деталь\", \"детали\", \"деталью\", \"деталей\", \"деталям\", \"деталями\", \"деталях\", \"подробность\", \"подробности\", \"подробностью\", \"подробностей\", \"подробностям\", \"подробностями\", \"подробностях\", \"фактор\", \"фактора\", \"фактором\", \"фактору\", \"факторе\", \"факторы\", \"факторам\", \"факторами\", \"факторах\", \"разница\", \"разницы\", \"разнице\", \"разницу\", \"разницей\", \"различие\", \"различия\", \"различию\", \"различий\", \"различиям\", \"различиями\", \"различиях\", \"отличие\", \"отличия\", \"отличию\", \"отличий\", \"отличиям\", \"отличиями\", \"отличиях\", \"ситуация\", \"ситуации\", \"ситуацией\", \"ситуаций\", \"ситуациям\", \"ситуациями\", \"ситуациях\", \"сфера\", \"сферы\", \"сфере\", \"сферу\", \"сферой\", \"сферам\", \"сферами\", \"сферах\"];\n// 'No' is already included in the quantifier list.\nvar miscellaneous = [\"нет\", \"да\", \"конечно\", \"отлично\", \"верх\", \"низ\", \"ок\", \"окей\", \"аминь\", \"и т д\", \"и т. д.\", \"и так далее\", \"и тому подобное\", \"прости\", \"простите\", \"пожалуйста\", \"тут\", \"так\", \"не\", \"вдруг\", \"теперь\", \"точно\", \"бы\", \"сам\", \"сама\", \"само\", \"сами\", \"иногда\", \"сейчас\", \"тоже\", \"также\", \"пока\", \"ведь\", \"потом\", \"поэтому\", \"явно\", \"ни\", \"не\", \"будто\", \"напрочь\", \"причем\", \"причём\", \"зато\", \"вперед\", \"вперёд\", \"назад\", \"сразу\", \"пусть\", \"пускай\"];\nvar titlesPreceding = [\"г-н\", \"г-жа\", \"тов\", \"гр-н\", \"гр-а\", \"гр\", \"проф\"];\n// \"ст\" is already included in recipe words\nvar titlesFollowing = [\"мл\"];\nmodule.exports = function () {\n    return {\n        // These word categories are filtered at the ending of word combinations.\n        filteredAtEnding: [].concat(ordinalNumerals, generalAdjectivesAdverbs),\n        // These word categories are filtered at the beginning and ending of word combinations.\n        filteredAtBeginningAndEnding: [].concat(prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),\n        // These word categories are filtered everywhere within word combinations.\n        filteredAnywhere: [].concat(transitionWords, adverbialGenitives, personalPronouns, reflexivePronouns, interjections, cardinalNumerals, filteredPassiveAuxiliaries, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, subordinatingConjunctions, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, miscellaneous, recipeWords, timeWords, vagueNouns),\n        // This export contains all of the above words.\n        all: [].concat(cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, personalPronouns, quantifiers, indefinitePronouns, indefinitePronounsPossessive, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, adverbialGenitives, filteredPassiveAuxiliaries, otherAuxiliaries, copula, prepositions, coordinatingConjunctions, subordinatingConjunctions, interviewVerbs, transitionWords, intensifiers, delexicalizedVerbs, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, titlesPreceding, titlesFollowing)\n    };\n};\n//# sourceMappingURL=functionWords.js.map\n//# sourceMappingURL=functionWords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/functionWords.js\n// module id = 1541\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/russian/functionWords.js?");

/***/ }),
/* 1542 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseSlice = __webpack_require__(1543),\n    toInteger = __webpack_require__(692);\n\n/**\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.take([1, 2, 3]);\n * // => [1]\n *\n * _.take([1, 2, 3], 2);\n * // => [1, 2]\n *\n * _.take([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.take([1, 2, 3], 0);\n * // => []\n */\nfunction take(array, n, guard) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nmodule.exports = take;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/take.js\n// module id = 1542\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/take.js?");

/***/ }),
/* 1543 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSlice.js\n// module id = 1543\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSlice.js?");

/***/ }),
/* 1544 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar wordCountInText = __webpack_require__(1212);\nvar imageCount = __webpack_require__(1238);\n/**\n * Calculates the expected reading time of a text.\n *\n * @param {Paper} paper The paper to calculate the reading time for.\n * @returns {number} The expected reading time in minutes.\n */\nmodule.exports = function (paper) {\n  // These numbers are based on research into average reading times.\n  var wordsPerMinute = 200;\n  var minutesPerImage = 0.2;\n  var numberOfWords = wordCountInText(paper);\n  var numberOfImages = imageCount(paper);\n  /*\n   * This formula is based on the average number of words a person is expected to read per minute,\n   * plus extra time for each image in the text. It returns the expected reading time in whole minutes,\n   * rounded up to the nearest minute.\n   */\n  return Math.ceil(numberOfWords / wordsPerMinute + numberOfImages * minutesPerImage);\n};\n//# sourceMappingURL=readingTime.js.map\n//# sourceMappingURL=readingTime.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/readingTime.js\n// module id = 1544\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/readingTime.js?");

/***/ }),
/* 1545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module analyses/getTopicDensity */\n\nvar countWords = __webpack_require__(185);\nvar topicCount = __webpack_require__(589);\n/**\n * Calculates the topic density .\n *\n * @param {Object} paper The paper containing keyword, (synonyms) and text.\n * @returns {number} The topic density.\n */\nmodule.exports = function (paper) {\n    var wordCount = countWords(paper.getText());\n    if (wordCount === 0) {\n        return 0;\n    }\n    var topicCountResult = topicCount(paper).count;\n    return topicCountResult / wordCount * 100;\n};\n//# sourceMappingURL=getTopicDensity.js.map\n//# sourceMappingURL=getTopicDensity.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getTopicDensity.js\n// module id = 1545\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/getTopicDensity.js?");

/***/ }),
/* 1546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/matchTextWithArray */\n\nvar stripSpaces = __webpack_require__(84);\nvar removePunctuation = __webpack_require__(689);\nvar matchTextWithWord = __webpack_require__(268);\nvar unique = __webpack_require__(1103);\n/**\n * Matches strings from an array against a given text.\n *\n * @param {String} text The text to match\n * @param {Array} array The array with strings to match\n * @param {String} [locale = \"en_EN\"] The locale of the text to get transliterations\n *\n * @returns {Array} array An array with all matches of the text.\n */\nmodule.exports = function (text, array) {\n    var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"en_EN\";\n\n    var count = 0;\n    var matches = [];\n    unique(array).forEach(function (wordToMatch) {\n        var occurrence = matchTextWithWord(text, wordToMatch, locale);\n        count += occurrence.count;\n        matches = matches.concat(occurrence.matches);\n    });\n    if (matches === null) {\n        matches = [];\n    }\n    matches = matches.map(function (string) {\n        return stripSpaces(removePunctuation(string));\n    });\n    return {\n        count: count,\n        matches: matches\n    };\n};\n//# sourceMappingURL=matchTextWithArray.js.map\n//# sourceMappingURL=matchTextWithArray.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchTextWithArray.js\n// module id = 1546\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/matchTextWithArray.js?");

/***/ }),
/* 1547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/** @module stringProcessing/parseSynonyms */\n\nvar stripSpaces = __webpack_require__(84);\nvar removePunctuation = __webpack_require__(689);\n/**\n * Matches strings from an array against a given text.\n *\n * @param {String} synonyms The text to match\n *\n * @returns {Array} An array with all synonyms.\n */\nmodule.exports = function (synonyms) {\n    var synonymsSplit = synonyms.split(\",\");\n    synonymsSplit = synonymsSplit.map(function (synonym) {\n        return removePunctuation(stripSpaces(synonym));\n    }).filter(function (synonym) {\n        return synonym;\n    });\n    return synonymsSplit;\n};\n//# sourceMappingURL=parseSynonyms.js.map\n//# sourceMappingURL=parseSynonyms.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/parseSynonyms.js\n// module id = 1547\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/parseSynonyms.js?");

/***/ }),
/* 1548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(1549),\n    stripWordBoundariesStart = _require.stripWordBoundariesStart,\n    stripWordBoundariesEnd = _require.stripWordBoundariesEnd;\n/**\n * Marks a text with HTML tags, deals with word boundaries that were matched by regexes, but which should not be marked.\n *\n * @param {string} text The unmarked text.\n *\n * @returns {string} The marked text.\n */\n\nmodule.exports = function (text) {\n    // Strip the word boundaries at the start of the text.\n    var strippedTextStart = stripWordBoundariesStart(text);\n    var wordBoundaryStart = \"\";\n    var wordBoundaryEnd = \"\";\n    // Get the actual word boundaries from the start of the text.\n    if (strippedTextStart !== text) {\n        var wordBoundaryStartIndex = text.search(strippedTextStart);\n        wordBoundaryStart = text.substr(0, wordBoundaryStartIndex);\n    }\n    // Strip word boundaries at the end of the text.\n    var strippedTextEnd = stripWordBoundariesEnd(strippedTextStart);\n    // Get the actual word boundaries from the end of the text.\n    if (strippedTextEnd !== strippedTextStart) {\n        var wordBoundaryEndIndex = strippedTextStart.search(strippedTextEnd) + strippedTextEnd.length;\n        wordBoundaryEnd = strippedTextStart.substr(wordBoundaryEndIndex);\n    }\n    return wordBoundaryStart + \"<yoastmark class='yoast-text-mark'>\" + strippedTextEnd + \"</yoastmark>\" + wordBoundaryEnd;\n};\n//# sourceMappingURL=addMarkSingleWord.js.map\n//# sourceMappingURL=addMarkSingleWord.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/addMarkSingleWord.js\n// module id = 1548\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/addMarkSingleWord.js?");

/***/ }),
/* 1549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar wordBoundary = \"[ \\\\u00a0\\xA0\\\\n\\\\r\\\\t.,'()\\\"+-;!?:/\\xBB\\xAB\\u2039\\u203A<>]\";\nvar wordBoundaryStart = new RegExp(\"^(\" + wordBoundary + \"+)\", \"ig\");\nvar wordBoundaryEnd = new RegExp(\"(\" + wordBoundary + \"+$)\", \"ig\");\n/**\n * Strip word boundary markers from text in the beginning\n *\n * @param {String} text The text to strip word boundary markers from.\n *\n * @returns {String} The text without double word boundary markers.\n */\nvar stripWordBoundariesStart = function stripWordBoundariesStart(text) {\n    // Remove first character if word boundary\n    text = text.replace(wordBoundaryStart, \"\");\n    return text;\n};\n/**\n * Strip word boundary markers from text in the end\n *\n * @param {String} text The text to strip word boundary markers from.\n *\n * @returns {String} The text without double word boundary markers.\n */\nvar stripWordBoundariesEnd = function stripWordBoundariesEnd(text) {\n    // Remove last character if word boundary\n    text = text.replace(wordBoundaryEnd, \"\");\n    return text;\n};\n/**\n * Strip word boundary markers from text in the beginning and in the end\n *\n * @param {String} text The text to strip word boundary markers from.\n *\n * @returns {String} The text without word boundary markers.\n */\nvar stripWordBoundariesEverywhere = function stripWordBoundariesEverywhere(text) {\n    // Remove first/last character if word boundary\n    text = text.replace(wordBoundaryStart, \"\");\n    text = text.replace(wordBoundaryEnd, \"\");\n    return text;\n};\nmodule.exports = {\n    stripWordBoundariesStart: stripWordBoundariesStart,\n    stripWordBoundariesEnd: stripWordBoundariesEnd,\n    stripWordBoundariesEverywhere: stripWordBoundariesEverywhere\n};\n//# sourceMappingURL=stripWordBoundaries.js.map\n//# sourceMappingURL=stripWordBoundaries.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripWordBoundaries.js\n// module id = 1549\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/stripWordBoundaries.js?");

/***/ }),
/* 1550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar sortBy = __webpack_require__(1284);\nvar topicCount = __webpack_require__(589);\n/**\n * Gets the distance (in terms of characters) between two keywords, between the beginning\n * of the text and the first keyword, or the last keyword and the end of the text.\n *\n * @param {number}  keywordIndex     The index of the keyword.\n * @param {Array}   keywordIndices   All keyword indices.\n * @param {number}  textLength       The length of the text in characters.\n *\n * @returns {Array} The distances for a given keyword in characters.\n */\nvar getKeywordDistances = function getKeywordDistances(keywordIndex, keywordIndices, textLength) {\n  var currentIndexWithinArray = keywordIndices.indexOf(keywordIndex);\n  var indexOfPreviousKeyword = void 0;\n  var distances = [];\n  /*\n   * If there's only one keyword, return the distance from the beginning\n   * of the text to the keyword and from the keyword to the end of the text.\n   */\n  if (currentIndexWithinArray === 0 && keywordIndices.length === 1) {\n    distances.push(keywordIndex.index);\n    distances.push(textLength - keywordIndex.index);\n    return distances;\n  }\n  /*\n   * For the first instance of the keyword calculate the distance between\n   * the beginning of the text and that keyword.\n   */\n  if (currentIndexWithinArray === 0) {\n    distances.push(keywordIndex.index);\n    return distances;\n  }\n  /*\n   * For the last instance of the keyword, calculate the distance between that keyword\n   * and the previous keyword and also the distance between that keyword and the end\n   * of the text.\n   */\n  if (currentIndexWithinArray === keywordIndices.length - 1) {\n    indexOfPreviousKeyword = keywordIndices[currentIndexWithinArray - 1].index;\n    distances.push(keywordIndex.index - indexOfPreviousKeyword);\n    distances.push(textLength - keywordIndex.index);\n    return distances;\n  }\n  /*\n   * For all instances in between first and last, calculate the distance between\n   * that keyword and the preceding keyword.\n   */\n  indexOfPreviousKeyword = keywordIndices[currentIndexWithinArray - 1].index;\n  distances.push(keywordIndex.index - indexOfPreviousKeyword);\n  return distances;\n};\n/**\n * Gets the largest keyword distance (in characters) from the array of all keyword distances.\n *\n * @param {Array} keywordDistances All keyword distances in characters.\n *\n * @returns {number} The largest keyword distance in characters.\n */\nvar getLargestDistanceInCharacters = function getLargestDistanceInCharacters(keywordDistances) {\n  keywordDistances = sortBy(keywordDistances);\n  keywordDistances = keywordDistances.reverse();\n  return keywordDistances[0];\n};\n/**\n * Calculates the largest percentage of the text without a keyword.\n *\n * @param {Paper} paper The paper to check the keyword distance for.\n *\n * @returns {number} Returns the largest percentage of the text between two keyword occurrences\n *                   or a keyword occurrence and the start/end of the text.\n */\nmodule.exports = function (paper) {\n  var keywordIndices = topicCount(paper).matchesIndices;\n  var textLength = paper.getText().length;\n  var keywordDistances = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = keywordIndices[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var keywordIndex = _step.value;\n\n      var currentDistances = getKeywordDistances(keywordIndex, keywordIndices, textLength);\n      keywordDistances = keywordDistances.concat(currentDistances);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var largestKeywordDistanceInCharacters = getLargestDistanceInCharacters(keywordDistances);\n  return largestKeywordDistanceInCharacters / textLength * 100;\n};\n//# sourceMappingURL=largestKeywordDistance.js.map\n//# sourceMappingURL=largestKeywordDistance.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/largestKeywordDistance.js\n// module id = 1550\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/researches/largestKeywordDistance.js?");

/***/ }),
/* 1551 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayMap = __webpack_require__(327),\n    baseIteratee = __webpack_require__(267),\n    baseMap = __webpack_require__(1201),\n    baseSortBy = __webpack_require__(1552),\n    baseUnary = __webpack_require__(401),\n    compareMultiple = __webpack_require__(1553),\n    identity = __webpack_require__(325);\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseOrderBy.js\n// module id = 1551\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseOrderBy.js?");

/***/ }),
/* 1552 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSortBy.js\n// module id = 1552\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseSortBy.js?");

/***/ }),
/* 1553 */
/***/ (function(module, exports, __webpack_require__) {

eval("var compareAscending = __webpack_require__(1554);\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_compareMultiple.js\n// module id = 1553\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_compareMultiple.js?");

/***/ }),
/* 1554 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isSymbol = __webpack_require__(563);\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_compareAscending.js\n// module id = 1554\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_compareAscending.js?");

/***/ }),
/* 1555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar uniqBy = __webpack_require__(1556);\n/**\n * Removes duplicate marks from an array\n *\n * @param {Array} marks The marks to remove duplications from\n * @returns {Array} A list of de-duplicated marks.\n */\nfunction removeDuplicateMarks(marks) {\n    return uniqBy(marks, function (mark) {\n        return mark.getOriginal();\n    });\n}\nmodule.exports = removeDuplicateMarks;\n//# sourceMappingURL=removeDuplicateMarks.js.map\n//# sourceMappingURL=removeDuplicateMarks.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/removeDuplicateMarks.js\n// module id = 1555\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/removeDuplicateMarks.js?");

/***/ }),
/* 1556 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIteratee = __webpack_require__(267),\n    baseUniq = __webpack_require__(1229);\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/uniqBy.js\n// module id = 1556\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/uniqBy.js?");

/***/ }),
/* 1557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isUndefined = __webpack_require__(66);\n/**\n * Shows and error trace of the error message in the console if the console is available.\n *\n * @param {string} [errorMessage=\"\"] The error message.\n * @returns {void}\n */\nfunction showTrace(errorMessage) {\n    if (isUndefined(errorMessage)) {\n        errorMessage = \"\";\n    }\n    if (!isUndefined(console) && !isUndefined(console.trace)) {\n        console.trace(errorMessage);\n    }\n}\nmodule.exports = {\n    showTrace: showTrace\n};\n//# sourceMappingURL=errors.js.map\n//# sourceMappingURL=errors.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/errors.js\n// module id = 1557\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/errors.js?");

/***/ }),
/* 1558 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIndexOf = __webpack_require__(1104),\n    toInteger = __webpack_require__(692);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nmodule.exports = indexOf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/indexOf.js\n// module id = 1558\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/indexOf.js?");

/***/ }),
/* 1559 */
/***/ (function(module, exports, __webpack_require__) {

eval("var escapeHtmlChar = __webpack_require__(1560),\n    toString = __webpack_require__(1090);\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"']/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nmodule.exports = escape;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/escape.js\n// module id = 1559\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/escape.js?");

/***/ }),
/* 1560 */
/***/ (function(module, exports, __webpack_require__) {

eval("var basePropertyOf = __webpack_require__(1561);\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\nmodule.exports = escapeHtmlChar;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_escapeHtmlChar.js\n// module id = 1560\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_escapeHtmlChar.js?");

/***/ }),
/* 1561 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = basePropertyOf;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePropertyOf.js\n// module id = 1561\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_basePropertyOf.js?");

/***/ }),
/* 1562 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar inRange = __webpack_require__(1265);\nvar recommendedMinimum = 150;\n/**\n * Calculate the score based on the current word count.\n * @param {number} wordCount The amount of words to be checked against.\n * @param {object} i18n The locale object.\n * @returns {object} The resulting score object.\n */\nvar calculateWordCountResult = function calculateWordCountResult(wordCount, i18n) {\n    var url = \"<a href='https://yoa.st/2pk' target='_blank'>\";\n    if (wordCount >= 150) {\n        return {\n            score: 9,\n            text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n            /* Translators: %1$d expands to the number of words in the text. */\n            \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n            /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n            %3$s expands to the anchor end tag,\t%4$s expands to the recommended minimum of words. */\n            \"This is more than or equal to the %2$srecommended minimum%3$s of %4$d word.\", \"This is more than or equal to the %2$srecommended minimum%3$s of %4$d words.\", recommendedMinimum), wordCount, url, \"</a>\", recommendedMinimum)\n        };\n    }\n    if (inRange(wordCount, 125, 150)) {\n        return {\n            score: 7,\n            text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n            /* Translators: %1$d expands to the number of words in the text. */\n            \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n            /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n            %3$s expands to the anchor end tag, %4$s expands to the recommended minimum of words. */\n            \"This is slightly below the %2$srecommended minimum%3$s of %4$d word. Add a bit more copy.\", \"This is slightly below the %2$srecommended minimum%3$s of %4$d words. Add a bit more copy.\", recommendedMinimum), wordCount, url, \"</a>\", recommendedMinimum)\n        };\n    }\n    if (inRange(wordCount, 100, 125)) {\n        return {\n            score: 5,\n            text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n            /* Translators: %1$d expands to the number of words in the text. */\n            \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n            /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n            %3$s expands to the anchor end tag, %4$s expands to the recommended minimum of words. */\n            \"This is below the %2$srecommended minimum%3$s of %4$d word. Add more content that is relevant for the topic.\", \"This is below the %2$srecommended minimum%3$s of %4$d words. Add more content that is relevant for the topic.\", recommendedMinimum), wordCount, url, \"</a>\", recommendedMinimum)\n        };\n    }\n    if (inRange(wordCount, 50, 100)) {\n        return {\n            score: -10,\n            text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n            /* Translators: %1$d expands to the number of words in the text. */\n            \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n            /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n            %3$s expands to the anchor end tag, %4$s expands to the recommended minimum of words. */\n            \"This is below the %2$srecommended minimum%3$s of %4$d word. Add more content that is relevant for the topic.\", \"This is below the %2$srecommended minimum%3$s of %4$d words. Add more content that is relevant for the topic.\", recommendedMinimum), wordCount, url, \"</a>\", recommendedMinimum)\n        };\n    }\n    if (inRange(wordCount, 0, 50)) {\n        return {\n            score: -20,\n            text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n            /* Translators: %1$d expands to the number of words in the text. */\n            \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n            /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n            %3$s expands to the anchor end tag,  %4$s expands to the recommended minimum of words. */\n            \"This is far below the %2$srecommended minimum%3$s of %4$d word. Add more content that is relevant for the topic.\", \"This is far below the %2$srecommended minimum%3$s of %4$d words. Add more content that is relevant for the topic.\", recommendedMinimum), wordCount, url, \"</a>\", recommendedMinimum)\n        };\n    }\n};\n/**\n * Execute the Assessment and return a result.\n *\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @param {Jed} i18n The locale object.\n *\n * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n */\nvar taxonomyTextLengthAssessment = function taxonomyTextLengthAssessment(paper, researcher, i18n) {\n    var wordCount = researcher.getResearch(\"wordCountInText\");\n    var wordCountResult = calculateWordCountResult(wordCount, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(wordCountResult.score);\n    assessmentResult.setText(i18n.sprintf(wordCountResult.text, wordCount, recommendedMinimum));\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"taxonomyTextLength\",\n    getResult: taxonomyTextLengthAssessment\n};\n//# sourceMappingURL=taxonomyTextLengthAssessment.js.map\n//# sourceMappingURL=taxonomyTextLengthAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/taxonomyTextLengthAssessment.js\n// module id = 1562\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/taxonomyTextLengthAssessment.js?");

/***/ }),
/* 1563 */
/***/ (function(module, exports) {

eval("/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.inRange` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nfunction baseInRange(number, start, end) {\n  return number >= nativeMin(start, end) && number < nativeMax(start, end);\n}\n\nmodule.exports = baseInRange;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseInRange.js\n// module id = 1563\n// module chunks = 0 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseInRange.js?");

/***/ }),
/* 1564 */,
/* 1565 */,
/* 1566 */,
/* 1567 */,
/* 1568 */,
/* 1569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\nvar inRange = __webpack_require__(1265);\nvar getLanguageAvailability = __webpack_require__(695);\nvar availableLanguages = [\"en\", \"nl\", \"de\", \"it\", \"ru\", \"fr\", \"es\"];\n\nvar FleschReadingEaseAssessment = function (_Assessment) {\n    _inherits(FleschReadingEaseAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} config The configuration to use.\n     * @returns {void}\n     */\n    function FleschReadingEaseAssessment(config) {\n        _classCallCheck(this, FleschReadingEaseAssessment);\n\n        var _this = _possibleConstructorReturn(this, (FleschReadingEaseAssessment.__proto__ || Object.getPrototypeOf(FleschReadingEaseAssessment)).call(this));\n\n        _this.identifier = \"fleschReadingEase\";\n        _this._config = config;\n        return _this;\n    }\n    /**\n     * The assessment that runs the FleschReading on the paper.\n     *\n     * @param {Object} paper The paper to run this assessment on.\n     * @param {Object} researcher The researcher used for the assessment.\n     * @param {Object} i18n The i18n-object used for parsing translations.\n     *\n     * @returns {Object} An assessmentResult with the score and formatted text.\n     */\n\n    _createClass(FleschReadingEaseAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this.fleschReadingResult = researcher.getResearch(\"calculateFleschReading\");\n            if (this.isApplicable(paper)) {\n                var assessmentResult = new AssessmentResult(i18n);\n                var calculatedResult = this.calculateResult(i18n);\n                assessmentResult.setScore(calculatedResult.score);\n                assessmentResult.setText(calculatedResult.resultText);\n                return assessmentResult;\n            }\n            return null;\n        }\n        /**\n         * Calculates the assessment result based on the fleschReadingScore.\n         *\n         * @param {Object} i18n The i18n-object used for parsing translations.\n         *\n         * @returns {Object} Object with score and resultText.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            // Results must be between 0 and 100;\n            if (this.fleschReadingResult < 0) {\n                this.fleschReadingResult = 0;\n            }\n            if (this.fleschReadingResult > 100) {\n                this.fleschReadingResult = 100;\n            }\n            /* Translators: %1$s expands to the numeric Flesch reading ease score,\n            %2$s to a link to a Yoast.com article about Flesch reading ease score,\n            %3$s to the easyness of reading,\n            %4$s expands to a note about the flesch reading score. */\n            var text = i18n.dgettext(\"js-text-analysis\", \"The copy scores %1$s in the %2$s test, which is considered %3$s to read. %4$s\");\n            var url = \"<a href='https://yoa.st/flesch-reading' target='_blank'>Flesch Reading Ease</a>\";\n            if (this.fleschReadingResult > this._config.borders.veryEasy) {\n                var _feedback = i18n.dgettext(\"js-text-analysis\", \"very easy\");\n                return {\n                    score: this._config.scores.veryEasy,\n                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback, \"\")\n                };\n            }\n            if (inRange(this.fleschReadingResult, this._config.borders.easy, this._config.borders.veryEasy)) {\n                var _feedback2 = i18n.dgettext(\"js-text-analysis\", \"easy\");\n                return {\n                    score: this._config.scores.easy,\n                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback2, \"\")\n                };\n            }\n            if (inRange(this.fleschReadingResult, this._config.borders.fairlyEasy, this._config.borders.easy)) {\n                var _feedback3 = i18n.dgettext(\"js-text-analysis\", \"fairly easy\");\n                return {\n                    score: this._config.scores.fairlyEasy,\n                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback3, \"\")\n                };\n            }\n            if (inRange(this.fleschReadingResult, this._config.borders.okay, this._config.borders.fairlyEasy)) {\n                var _feedback4 = i18n.dgettext(\"js-text-analysis\", \"ok\");\n                return {\n                    score: this._config.scores.okay,\n                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback4, \"\")\n                };\n            }\n            if (inRange(this.fleschReadingResult, this._config.borders.fairlyDifficult, this._config.borders.okay)) {\n                var _feedback5 = i18n.dgettext(\"js-text-analysis\", \"fairly difficult\");\n                var _note = i18n.dgettext(\"js-text-analysis\", \"Try to make shorter sentences to improve readability.\");\n                return {\n                    score: this._config.scores.fairlyDifficult,\n                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback5, _note)\n                };\n            }\n            if (inRange(this.fleschReadingResult, this._config.borders.difficult, this._config.borders.fairlyDifficult)) {\n                var _feedback6 = i18n.dgettext(\"js-text-analysis\", \"difficult\");\n                var _note2 = i18n.dgettext(\"js-text-analysis\", \"Try to make shorter sentences, using less difficult words to improve readability.\");\n                return {\n                    score: this._config.scores.difficult,\n                    resultText: i18n.sprintf(text, this.fleschReadingResult, url, _feedback6, _note2)\n                };\n            }\n            var feedback = i18n.dgettext(\"js-text-analysis\", \"very difficult\");\n            var note = i18n.dgettext(\"js-text-analysis\", \"Try to make shorter sentences, using less difficult words to improve readability.\");\n            return {\n                score: this._config.scores.veryDifficult,\n                resultText: i18n.sprintf(text, this.fleschReadingResult, url, feedback, note)\n            };\n        }\n        /**\n         * Checks if Flesch reading analysis is available for the language of the paper.\n         *\n         * @param {Object} paper The paper to have the Flesch score to be calculated for.\n         * @returns {boolean} Returns true if the language is available and the paper is not empty.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            var isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n            return isLanguageAvailable && paper.hasText();\n        }\n    }]);\n\n    return FleschReadingEaseAssessment;\n}(Assessment);\n\nmodule.exports = FleschReadingEaseAssessment;\n//# sourceMappingURL=fleschReadingEaseAssessment.js.map\n//# sourceMappingURL=fleschReadingEaseAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/fleschReadingEaseAssessment.js\n// module id = 1569\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/fleschReadingEaseAssessment.js?");

/***/ }),
/* 1570 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar stripHTMLTags = __webpack_require__(167).stripBlockTagsAtStartEnd;\nvar isParagraphTooLong = __webpack_require__(1571);\nvar Mark = __webpack_require__(571);\nvar marker = __webpack_require__(712);\nvar inRange = __webpack_require__(395).inRangeEndInclusive;\nvar filter = __webpack_require__(112);\nvar map = __webpack_require__(63);\n// 150 is the recommendedValue for the maximum paragraph length.\nvar recommendedValue = 150;\n/**\n * Returns an array containing only the paragraphs longer than the recommended length.\n * @param {array} paragraphsLength The array containing the lengths of individual paragraphs.\n * @returns {number} The number of too long paragraphs.\n */\nvar getTooLongParagraphs = function getTooLongParagraphs(paragraphsLength) {\n    return filter(paragraphsLength, function (paragraph) {\n        return isParagraphTooLong(recommendedValue, paragraph.wordCount);\n    });\n};\n/**\n * Returns the scores and text for the ParagraphTooLongAssessment\n * @param {array} paragraphsLength The array containing the lengths of individual paragraphs.\n * @param {number} tooLongParagraphs The number of too long paragraphs.\n * @param {object} i18n The i18n object used for translations.\n * @returns {{score: number, text: string }} the assessmentResult.\n */\nvar calculateParagraphLengthResult = function calculateParagraphLengthResult(paragraphsLength, tooLongParagraphs, i18n) {\n    var score;\n    if (paragraphsLength.length === 0) {\n        return {};\n    }\n    var longestParagraphLength = paragraphsLength[0].wordCount;\n    if (longestParagraphLength <= 150) {\n        // Green indicator.\n        score = 9;\n    }\n    if (inRange(longestParagraphLength, 150, 200)) {\n        // Orange indicator.\n        score = 6;\n    }\n    if (longestParagraphLength > 200) {\n        // Red indicator.\n        score = 3;\n    }\n    if (score >= 7) {\n        return {\n            score: score,\n            hasMarks: false,\n            text: i18n.dgettext(\"js-text-analysis\", \"None of the paragraphs are too long, which is great.\")\n        };\n    }\n    return {\n        score: score,\n        hasMarks: true,\n        // Translators: %1$d expands to the number of paragraphs, %2$d expands to the recommended value\n        text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\", \"%1$d of the paragraphs contains more than the recommended maximum \" + \"of %2$d words. Are you sure all information is about the same topic, and therefore belongs in one single paragraph?\", \"%1$d of the paragraphs contain more than the recommended maximum of %2$d words. Are you sure all information within each of\" + \" these paragraphs is about the same topic, and therefore belongs in a single paragraph?\", tooLongParagraphs.length), tooLongParagraphs.length, recommendedValue)\n    };\n};\n/**\n * Sort the paragraphs based on word count.\n *\n * @param {Array} paragraphs The array with paragraphs.\n * @returns {Array} The array sorted on word counts.\n */\nvar sortParagraphs = function sortParagraphs(paragraphs) {\n    return paragraphs.sort(function (a, b) {\n        return b.wordCount - a.wordCount;\n    });\n};\n/**\n * Creates a marker for the paragraphs.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {Array} An array with marked paragraphs.\n */\nvar paragraphLengthMarker = function paragraphLengthMarker(paper, researcher) {\n    var paragraphsLength = researcher.getResearch(\"getParagraphLength\");\n    var tooLongParagraphs = getTooLongParagraphs(paragraphsLength);\n    return map(tooLongParagraphs, function (paragraph) {\n        var paragraphText = stripHTMLTags(paragraph.text);\n        var marked = marker(paragraphText);\n        return new Mark({\n            original: paragraphText,\n            marked: marked\n        });\n    });\n};\n/**\n * Runs the getParagraphLength module, based on this returns an assessment result with score and text.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} the Assessmentresult\n */\nvar paragraphLengthAssessment = function paragraphLengthAssessment(paper, researcher, i18n) {\n    var paragraphsLength = researcher.getResearch(\"getParagraphLength\");\n    paragraphsLength = sortParagraphs(paragraphsLength);\n    var tooLongParagraphs = getTooLongParagraphs(paragraphsLength);\n    var paragraphLengthResult = calculateParagraphLengthResult(paragraphsLength, tooLongParagraphs, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(paragraphLengthResult.score);\n    assessmentResult.setText(paragraphLengthResult.text);\n    assessmentResult.setHasMarks(paragraphLengthResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"textParagraphTooLong\",\n    getResult: paragraphLengthAssessment,\n    isApplicable: function isApplicable(paper) {\n        return paper.hasText();\n    },\n    getMarks: paragraphLengthMarker\n};\n//# sourceMappingURL=paragraphTooLongAssessment.js.map\n//# sourceMappingURL=paragraphTooLongAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/paragraphTooLongAssessment.js\n// module id = 1570\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/paragraphTooLongAssessment.js?");

/***/ }),
/* 1571 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns true or false, based on the length of the value text and the recommended value.\n *\n * @param {number} recommendedValue The recommended value.\n * @param {number} valueLength      The length of the value to check.\n * @returns {boolean} True if the length is greater than the recommendedValue, false if it is smaller.\n */\n\nmodule.exports = function (recommendedValue, valueLength) {\n  return valueLength > recommendedValue;\n};\n//# sourceMappingURL=isValueTooLong.js.map\n//# sourceMappingURL=isValueTooLong.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/isValueTooLong.js\n// module id = 1571\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/isValueTooLong.js?");

/***/ }),
/* 1572 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar formatNumber = __webpack_require__(588);\nvar inRange = __webpack_require__(395).inRangeEndInclusive;\nvar stripTags = __webpack_require__(167).stripIncompleteTags;\nvar Mark = __webpack_require__(571);\nvar marker = __webpack_require__(712);\nvar map = __webpack_require__(63);\nvar getLanguageAvailability = __webpack_require__(695);\nvar availableLanguages = [\"en\", \"de\", \"fr\", \"es\", \"ru\", \"it\", \"nl\"];\n/**\n * Calculates the result based on the number of sentences and passives.\n * @param {object} passiveVoice The object containing the number of sentences and passives\n * @param {object} i18n The object used for translations.\n * @returns {{score: number, text}} resultobject with score and text.\n */\nvar calculatePassiveVoiceResult = function calculatePassiveVoiceResult(passiveVoice, i18n) {\n    var score = void 0;\n    var percentage = 0;\n    var recommendedValue = 10;\n    var passiveVoiceURL = \"<a href='https://yoa.st/passive-voice' target='_blank'>\";\n    var hasMarks = void 0;\n    // Prevent division by zero errors.\n    if (passiveVoice.total !== 0) {\n        percentage = formatNumber(passiveVoice.passives.length / passiveVoice.total * 100);\n    }\n    hasMarks = percentage > 0;\n    if (percentage <= 10) {\n        // Green indicator.\n        score = 9;\n    }\n    if (inRange(percentage, 10, 15)) {\n        // Orange indicator.\n        score = 6;\n    }\n    if (percentage > 15) {\n        // Red indicator.\n        score = 3;\n    }\n    if (score >= 7) {\n        return {\n            score: score,\n            hasMarks: hasMarks,\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n            // Translators: %1$s expands to the number of sentences in passive voice, %2$s expands to a link on yoast.com,\n            // %3$s expands to the anchor end tag, %4$s expands to the recommended value.\n            \"%1$s of the sentences contain %2$spassive voice%3$s, \" + \"which is less than or equal to the recommended maximum of %4$s.\"), percentage + \"%\", passiveVoiceURL, \"</a>\", recommendedValue + \"%\")\n        };\n    }\n    return {\n        score: score,\n        hasMarks: hasMarks,\n        text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n        // Translators: %1$s expands to the number of sentences in passive voice, %2$s expands to a link on yoast.com,\n        // %3$s expands to the anchor end tag, %4$s expands to the recommended value.\n        \"%1$s of the sentences contain %2$spassive voice%3$s, \" + \"which is more than the recommended maximum of %4$s. Try to use their active counterparts.\"), percentage + \"%\", passiveVoiceURL, \"</a>\", recommendedValue + \"%\")\n    };\n};\n/**\n * Marks all sentences that have the passive voice.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {object} All marked sentences.\n */\nvar passiveVoiceMarker = function passiveVoiceMarker(paper, researcher) {\n    var passiveVoice = researcher.getResearch(\"passiveVoice\");\n    return map(passiveVoice.passives, function (sentence) {\n        sentence = stripTags(sentence);\n        var marked = marker(sentence);\n        return new Mark({\n            original: sentence,\n            marked: marked\n        });\n    });\n};\n/**\n * Runs the passiveVoice module, based on this returns an assessment result with score and text.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} the Assessmentresult\n */\nvar passiveVoiceAssessment = function passiveVoiceAssessment(paper, researcher, i18n) {\n    var passiveVoice = researcher.getResearch(\"passiveVoice\");\n    var passiveVoiceResult = calculatePassiveVoiceResult(passiveVoice, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(passiveVoiceResult.score);\n    assessmentResult.setText(passiveVoiceResult.text);\n    assessmentResult.setHasMarks(passiveVoiceResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"passiveVoice\",\n    getResult: passiveVoiceAssessment,\n    isApplicable: function isApplicable(paper) {\n        var isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n        return isLanguageAvailable && paper.hasText();\n    },\n    getMarks: passiveVoiceMarker\n};\n//# sourceMappingURL=passiveVoiceAssessment.js.map\n//# sourceMappingURL=passiveVoiceAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/passiveVoiceAssessment.js\n// module id = 1572\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/passiveVoiceAssessment.js?");

/***/ }),
/* 1573 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar stripTags = __webpack_require__(167).stripIncompleteTags;\nvar partition = __webpack_require__(1792);\nvar sortBy = __webpack_require__(1284);\nvar map = __webpack_require__(63);\nvar filter = __webpack_require__(112);\nvar flatten = __webpack_require__(1237);\nvar Mark = __webpack_require__(571);\nvar marker = __webpack_require__(712);\nvar maximumConsecutiveDuplicates = 2;\nvar getLanguageAvailability = __webpack_require__(695);\nvar availableLanguages = [\"en\", \"de\", \"es\", \"fr\", \"nl\", \"it\", \"ru\"];\n/**\n * Counts and groups the number too often used sentence beginnings and determines the lowest count within that group.\n * @param {array} sentenceBeginnings The array containing the objects containing the beginning words and counts.\n * @returns {object} The object containing the total number of too often used beginnings and the lowest count within those.\n */\nvar groupSentenceBeginnings = function groupSentenceBeginnings(sentenceBeginnings) {\n    var tooOften = partition(sentenceBeginnings, function (word) {\n        return word.count > maximumConsecutiveDuplicates;\n    });\n    if (tooOften[0].length === 0) {\n        return { total: 0 };\n    }\n    var sortedCounts = sortBy(tooOften[0], function (word) {\n        return word.count;\n    });\n    return { total: tooOften[0].length, lowestCount: sortedCounts[0].count };\n};\n/**\n * Calculates the score based on sentence beginnings.\n * @param {object} groupedSentenceBeginnings The object with grouped sentence beginnings.\n * @param {object} i18n The object used for translations.\n * @returns {{score: number, text: string, hasMarks: boolean}} resultobject with score and text.\n */\nvar calculateSentenceBeginningsResult = function calculateSentenceBeginningsResult(groupedSentenceBeginnings, i18n) {\n    if (groupedSentenceBeginnings.total > 0) {\n        return {\n            score: 3,\n            hasMarks: true,\n            text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n            // Translators: %1$d expands to the number of instances where 3 or more consecutive sentences start with the same word.\n            // %2$d expands to the number of consecutive sentences starting with the same word.\n            \"The text contains %2$d consecutive sentences starting with the same word. Try to mix things up!\", \"The text contains %1$d instances where %2$d or more consecutive sentences start with the same word. \" + \"Try to mix things up!\", groupedSentenceBeginnings.total), groupedSentenceBeginnings.total, groupedSentenceBeginnings.lowestCount)\n        };\n    }\n    return {};\n};\n/**\n * Marks all consecutive sentences with the same beginnings.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {object} All marked sentences.\n */\nvar sentenceBeginningMarker = function sentenceBeginningMarker(paper, researcher) {\n    var sentenceBeginnings = researcher.getResearch(\"getSentenceBeginnings\");\n    sentenceBeginnings = filter(sentenceBeginnings, function (sentenceBeginning) {\n        return sentenceBeginning.count > maximumConsecutiveDuplicates;\n    });\n    var sentences = map(sentenceBeginnings, function (begin) {\n        return begin.sentences;\n    });\n    return map(flatten(sentences), function (sentence) {\n        sentence = stripTags(sentence);\n        var marked = marker(sentence);\n        return new Mark({\n            original: sentence,\n            marked: marked\n        });\n    });\n};\n/**\n * Scores the repetition of sentence beginnings in consecutive sentences.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} The Assessment result\n */\nvar sentenceBeginningsAssessment = function sentenceBeginningsAssessment(paper, researcher, i18n) {\n    var sentenceBeginnings = researcher.getResearch(\"getSentenceBeginnings\");\n    var groupedSentenceBeginnings = groupSentenceBeginnings(sentenceBeginnings);\n    var sentenceBeginningsResult = calculateSentenceBeginningsResult(groupedSentenceBeginnings, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(sentenceBeginningsResult.score);\n    assessmentResult.setText(sentenceBeginningsResult.text);\n    assessmentResult.setHasMarks(sentenceBeginningsResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"sentenceBeginnings\",\n    getResult: sentenceBeginningsAssessment,\n    isApplicable: function isApplicable(paper) {\n        var isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n        return isLanguageAvailable && paper.hasText();\n    },\n    getMarks: sentenceBeginningMarker\n};\n//# sourceMappingURL=sentenceBeginningsAssessment.js.map\n//# sourceMappingURL=sentenceBeginningsAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/sentenceBeginningsAssessment.js\n// module id = 1573\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/sentenceBeginningsAssessment.js?");

/***/ }),
/* 1574 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\nvar countTooLongSentences = __webpack_require__(1613);\nvar formatNumber = __webpack_require__(588);\nvar inRange = __webpack_require__(395).inRangeEndInclusive;\nvar stripTags = __webpack_require__(167).stripIncompleteTags;\nvar Mark = __webpack_require__(571);\nvar addMark = __webpack_require__(712);\nvar map = __webpack_require__(63);\nvar merge = __webpack_require__(98);\n/**\n * Represents the assessment that will calculate the length of sentences in the text.\n */\n\nvar SentenceLengthInTextAssessment = function (_Assessment) {\n    _inherits(SentenceLengthInTextAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {object} config The configuration to use.\n     * @returns {void}\n     */\n    function SentenceLengthInTextAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, SentenceLengthInTextAssessment);\n\n        var _this = _possibleConstructorReturn(this, (SentenceLengthInTextAssessment.__proto__ || Object.getPrototypeOf(SentenceLengthInTextAssessment)).call(this));\n\n        var defaultConfig = {\n            recommendedWordCount: 20,\n            slightlyTooMany: 25,\n            farTooMany: 30\n        };\n        _this.identifier = \"textSentenceLength\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Scores the percentage of sentences including more than the recommended number of words.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {object} i18n The object used for translations.\n     * @returns {AssessmentResult} The Assessment result.\n     */\n\n    _createClass(SentenceLengthInTextAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var sentences = researcher.getResearch(\"countSentencesFromText\");\n            var percentage = this.calculatePercentage(sentences);\n            var score = this.calculateScore(percentage);\n            var assessmentResult = new AssessmentResult();\n            assessmentResult.setScore(score);\n            assessmentResult.setText(this.translateScore(score, percentage, i18n));\n            assessmentResult.setHasMarks(percentage > 0);\n            return assessmentResult;\n        }\n        /**\n         * Checks whether the paper has text.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is text.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText();\n        }\n        /**\n         * Mark the sentences.\n         *\n         * @param {Paper} paper The paper to use for the marking.\n         * @param {Researcher} researcher The researcher to use.\n         *\n         * @returns {Array} Array with all the marked sentences.\n         */\n\n    }, {\n        key: \"getMarks\",\n        value: function getMarks(paper, researcher) {\n            var sentenceCount = researcher.getResearch(\"countSentencesFromText\");\n            var sentenceObjects = this.getTooLongSentences(sentenceCount);\n            return map(sentenceObjects, function (sentenceObject) {\n                var sentence = stripTags(sentenceObject.sentence);\n                return new Mark({\n                    original: sentence,\n                    marked: addMark(sentence)\n                });\n            });\n        }\n        /**\n         * Translates the score to a message the user can understand.\n         *\n         * @param {number} score The score.\n         * @param {number} percentage The percentage.\n         * @param {object} i18n The object used for translations.\n         *\n         * @returns {string} A string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(score, percentage, i18n) {\n            var sentenceLengthURL = \"<a href='https://yoa.st/short-sentences' target='_blank'>\";\n            if (score >= 7) {\n                return i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n                // Translators: %1$d expands to percentage of sentences, %2$s expands to a link on yoast.com,\n                // %3$s expands to the recommended maximum sentence length, %4$s expands to the anchor end tag,\n                // %5$s expands to the recommended maximum percentage.\n                \"%1$s of the sentences contain %2$smore than %3$s words%4$s, which is less than or equal to the recommended maximum of %5$s.\"), percentage + \"%\", sentenceLengthURL, this._config.recommendedWordCount, \"</a>\", this._config.slightlyTooMany + \"%\");\n            }\n            return i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n            // Translators: %1$d expands to percentage of sentences, %2$s expands to a link on yoast.com,\n            // %3$s expands to the recommended maximum sentence length, %4$s expands to the anchor end tag,\n            // %5$s expands to the recommended maximum percentage.\n            \"%1$s of the sentences contain %2$smore than %3$s words%4$s, which is more than the recommended maximum of %5$s. \" + \"Try to shorten the sentences.\"), percentage + \"%\", sentenceLengthURL, this._config.recommendedWordCount, \"</a>\", this._config.slightlyTooMany + \"%\");\n        }\n        /**\n         * Calculates the percentage of sentences that are too long.\n         *\n         * @param {Array} sentences The sentences to calculate the percentage for.\n         * @returns {number} The calculates percentage of too long sentences.\n         */\n\n    }, {\n        key: \"calculatePercentage\",\n        value: function calculatePercentage(sentences) {\n            var percentage = 0;\n            if (sentences.length !== 0) {\n                var tooLongTotal = this.countTooLongSentences(sentences);\n                percentage = formatNumber(tooLongTotal / sentences.length * 100);\n            }\n            return percentage;\n        }\n        /**\n         * Calculates the score for the given percentage.\n         *\n         * @param {number} percentage The percentage to calculate the score for.\n         * @returns {number} The calculated score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(percentage) {\n            var score = void 0;\n            // Green indicator.\n            if (percentage <= this._config.slightlyTooMany) {\n                score = 9;\n            }\n            // Orange indicator.\n            if (inRange(percentage, this._config.slightlyTooMany, this._config.farTooMany)) {\n                score = 6;\n            }\n            // Red indicator.\n            if (percentage > this._config.farTooMany) {\n                score = 3;\n            }\n            return score;\n        }\n        /**\n         * Gets the sentences that are qualified as being too long.\n         *\n         * @param {array} sentences The sentences to filter through.\n         * @returns {array} Array with all the sentences considered to be too long.\n         */\n\n    }, {\n        key: \"getTooLongSentences\",\n        value: function getTooLongSentences(sentences) {\n            return countTooLongSentences(sentences, this._config.recommendedWordCount);\n        }\n        /**\n         * Get the total amount of sentences that are qualified as being too long.\n         *\n         * @param {Array} sentences The sentences to filter through.\n         * @returns {Number} The amount of sentences that are considered too long.\n         */\n\n    }, {\n        key: \"countTooLongSentences\",\n        value: function countTooLongSentences(sentences) {\n            return this.getTooLongSentences(sentences).length;\n        }\n    }]);\n\n    return SentenceLengthInTextAssessment;\n}(Assessment);\n\nmodule.exports = SentenceLengthInTextAssessment;\n//# sourceMappingURL=sentenceLengthInTextAssessment.js.map\n//# sourceMappingURL=sentenceLengthInTextAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/sentenceLengthInTextAssessment.js\n// module id = 1574\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/sentenceLengthInTextAssessment.js?");

/***/ }),
/* 1575 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\nvar isTextTooLong = __webpack_require__(1571);\nvar getSubheadings = __webpack_require__(1281).getSubheadings;\nvar getWords = __webpack_require__(229);\nvar filter = __webpack_require__(112);\nvar map = __webpack_require__(63);\nvar merge = __webpack_require__(98);\nvar Mark = __webpack_require__(571);\nvar marker = __webpack_require__(712);\nvar inRange = __webpack_require__(395).inRangeEndInclusive;\n/**\n * Represents the assessment for calculating the text after each subheading.\n */\n\nvar SubheadingsDistributionTooLong = function (_Assessment) {\n    _inherits(SubheadingsDistributionTooLong, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} config The configuration to use.\n     * @returns {void}\n     */\n    function SubheadingsDistributionTooLong() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, SubheadingsDistributionTooLong);\n\n        var _this = _possibleConstructorReturn(this, (SubheadingsDistributionTooLong.__proto__ || Object.getPrototypeOf(SubheadingsDistributionTooLong)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                // The maximum recommended value of the subheading text.\n                recommendedMaximumWordCount: 300,\n                slightlyTooMany: 300,\n                farTooMany: 350\n            },\n            url: \"<a href='https://yoa.st/headings' target='_blank'>\",\n            scores: {\n                goodShortTextNoSubheadings: 9,\n                goodSubheadings: 9,\n                okSubheadings: 6,\n                badSubheadings: 3,\n                badLongTextNoSubheadings: 2\n            }\n        };\n        _this.identifier = \"subheadingsTooLong\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the getSubheadingTextLength research and checks scores based on length.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Object} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The assessment result.\n     */\n\n    _createClass(SubheadingsDistributionTooLong, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this._subheadingTextsLength = researcher.getResearch(\"getSubheadingTextLengths\");\n            this._subheadingTextsLength = this._subheadingTextsLength.sort(function (a, b) {\n                return b.wordCount - a.wordCount;\n            });\n            this._tooLongTexts = this.getTooLongSubheadingTexts();\n            this._tooLongTextsNumber = this.getTooLongSubheadingTexts().length;\n            var assessmentResult = new AssessmentResult();\n            assessmentResult.setIdentifier(this.identifier);\n            this._hasSubheadings = this.hasSubheadings(paper);\n            this._textLength = getWords(paper.getText()).length;\n            var calculatedResult = this.calculateResult(i18n);\n            calculatedResult.resultTextPlural = calculatedResult.resultTextPlural || \"\";\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            if (calculatedResult.score > 2 && calculatedResult.score < 7) {\n                assessmentResult.setHasMarks(true);\n                assessmentResult.setMarker(this.getMarks());\n            }\n            return assessmentResult;\n        }\n        /**\n         * Checks whether the paper has text.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is text.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText();\n        }\n        /**\n         * Checks whether the paper has subheadings.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is at least one subheading.\n         */\n\n    }, {\n        key: \"hasSubheadings\",\n        value: function hasSubheadings(paper) {\n            var subheadings = getSubheadings(paper.getText());\n            return subheadings.length > 0;\n        }\n        /**\n         * Creates a marker for each text following a subheading that is too long.\n         * @returns {Array} All markers for the current text.\n         */\n\n    }, {\n        key: \"getMarks\",\n        value: function getMarks() {\n            return map(this._tooLongTexts, function (tooLongText) {\n                var marked = marker(tooLongText.text);\n                return new Mark({\n                    original: tooLongText.text,\n                    marked: marked\n                });\n            });\n        }\n        /**\n         * Counts the number of subheading texts that are too long.\n         *\n         * @returns {number} The number of subheading texts that are too long.\n         */\n\n    }, {\n        key: \"getTooLongSubheadingTexts\",\n        value: function getTooLongSubheadingTexts() {\n            return filter(this._subheadingTextsLength, function (subheading) {\n                return isTextTooLong(this._config.parameters.recommendedMaximumWordCount, subheading.wordCount);\n            }.bind(this));\n        }\n        /**\n         * Calculates the score and creates a feedback string based on the subheading texts length.\n         *\n         * @param {Object} i18n The object used for translations.\n         *\n         * @returns {Object} The calculated result.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this._textLength > 300) {\n                if (this._hasSubheadings) {\n                    var longestSubheadingTextLength = this._subheadingTextsLength[0].wordCount;\n                    if (longestSubheadingTextLength <= this._config.parameters.slightlyTooMany) {\n                        // Green indicator.\n                        return {\n                            score: this._config.scores.goodSubheadings,\n                            resultText: i18n.sprintf(\n                            // Translators: %1$s expands to a link to https://yoa.st/headings, %2$s expands to the link closing tag.\n                            i18n.dgettext(\"js-text-analysis\", \"Great job with using %1$ssubheadings%2$s!\"), this._config.url, \"</a>\")\n                        };\n                    }\n                    if (inRange(longestSubheadingTextLength, this._config.parameters.slightlyTooMany, this._config.parameters.farTooMany)) {\n                        // Orange indicator.\n                        return {\n                            score: this._config.scores.okSubheadings,\n                            resultText: i18n.sprintf(\n                            /*\n                             * Translators: %1$d expands to the number of subheadings, %2$d expands to the recommended number\n                             * of words following a subheading, %3$s expands to a link to https://yoa.st/headings,\n                             * %4$s expands to the link closing tag.\n                             */\n                            i18n.dngettext(\"js-text-analysis\", \"%1$d section of your text is longer than %2$d words and is not separated by any subheadings. \" + \"Add %3$ssubheadings%4$s to improve readability.\", \"%1$d sections of your text are longer than %2$d words and are not separated by any subheadings. \" + \"Add %3$ssubheadings%4$s to improve readability.\", this._tooLongTextsNumber), this._tooLongTextsNumber, this._config.parameters.recommendedMaximumWordCount, this._config.url, \"</a>\")\n                        };\n                    }\n                    // Red indicator.\n                    return {\n                        score: this._config.scores.badSubheadings,\n                        resultText: i18n.sprintf(\n                        /*\n                         * Translators: %1$d expands to the number of subheadings, %2$d expands to the recommended number\n                         * of words following a subheading, %3$s expands to a link to https://yoa.st/headings,\n                         * %4$s expands to the link closing tag.\n                         */\n                        i18n.dngettext(\"js-text-analysis\", \"%1$d section of your text is longer than %2$d words and is not separated by any subheadings. \" + \"Add %3$ssubheadings%4$s to improve readability.\", \"%1$d sections of your text are longer than %2$d words and are not separated by any subheadings. \" + \"Add %3$ssubheadings%4$s to improve readability.\", this._tooLongTextsNumber), this._tooLongTextsNumber, this._config.parameters.recommendedMaximumWordCount, this._config.url, \"</a>\")\n                    };\n                }\n                // Red indicator, use '2' so we can differentiate in external analysis.\n                return {\n                    score: this._config.scores.badLongTextNoSubheadings,\n                    resultText: i18n.sprintf(\n                    // Translators: %1$s expands to a link to https://yoa.st/headings, %2$s expands to the link closing tag.\n                    i18n.dgettext(\"js-text-analysis\", \"You are not using any subheadings, although your text is rather long. \" + \"Try and add  some %1$ssubheadings%2$s.\"), this._config.url, \"</a>\")\n                };\n            }\n            if (this._hasSubheadings) {\n                // Green indicator.\n                return {\n                    score: this._config.scores.goodSubheadings,\n                    resultText: i18n.sprintf(\n                    // Translators: %1$s expands to a link to https://yoa.st/headings, %2$s expands to the link closing tag.\n                    i18n.dgettext(\"js-text-analysis\", \"Great job with using %1$ssubheadings%2$s!\"), this._config.url, \"</a>\")\n                };\n            }\n            // Green indicator.\n            return {\n                score: this._config.scores.goodShortTextNoSubheadings,\n                resultText: i18n.sprintf(\n                // Translators: %1$s expands to a link to https://yoa.st/headings, %2$s expands to the link closing tag.\n                i18n.dgettext(\"js-text-analysis\", \"You are not using any %1$ssubheadings%2$s, but your text is short enough and probably doesn't need them.\"), this._config.url, \"</a>\")\n            };\n        }\n    }]);\n\n    return SubheadingsDistributionTooLong;\n}(Assessment);\n\nmodule.exports = SubheadingsDistributionTooLong;\n//# sourceMappingURL=subheadingDistributionTooLongAssessment.js.map\n//# sourceMappingURL=subheadingDistributionTooLongAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/subheadingDistributionTooLongAssessment.js\n// module id = 1575\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/subheadingDistributionTooLongAssessment.js?");

/***/ }),
/* 1576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar stripHTMLTags = __webpack_require__(167).stripFullTags;\nvar AssessmentResult = __webpack_require__(51);\n/**\n * Assesses that the paper has at least a little bit of content.\n *\n * @param {Paper} paper The paper to assess.\n * @param {Researcher} researcher The researcher.\n * @param {Jed} i18n The translations object.\n * @returns {AssessmentResult} The result of this assessment.\n */\nfunction textPresenceAssessment(paper, researcher, i18n) {\n    var text = stripHTMLTags(paper.getText());\n    if (text.length < 50) {\n        var result = new AssessmentResult();\n        result.setText(i18n.dgettext(\"js-text-analysis\", \"You have far too little content, please add some content to enable a good analysis.\"));\n        result.setScore(3);\n        return result;\n    }\n    return new AssessmentResult();\n}\nmodule.exports = {\n    identifier: \"textPresence\",\n    getResult: textPresenceAssessment\n};\n//# sourceMappingURL=textPresenceAssessment.js.map\n//# sourceMappingURL=textPresenceAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/textPresenceAssessment.js\n// module id = 1576\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/textPresenceAssessment.js?");

/***/ }),
/* 1577 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar formatNumber = __webpack_require__(588);\nvar map = __webpack_require__(63);\nvar inRange = __webpack_require__(395).inRangeStartInclusive;\nvar stripTags = __webpack_require__(167).stripIncompleteTags;\nvar Mark = __webpack_require__(571);\nvar marker = __webpack_require__(712);\nvar getLanguageAvailability = __webpack_require__(695);\nvar availableLanguages = [\"en\", \"de\", \"es\", \"fr\", \"nl\", \"it\", \"pt\", \"ru\", \"ca\"];\n/**\n * Calculates the actual percentage of transition words in the sentences.\n *\n * @param {object} sentences The object containing the total number of sentences and the number of sentences containing\n * a transition word.\n * @returns {number} The percentage of sentences containing a transition word.\n */\nvar calculateTransitionWordPercentage = function calculateTransitionWordPercentage(sentences) {\n    if (sentences.transitionWordSentences === 0 || sentences.totalSentences === 0) {\n        return 0;\n    }\n    return formatNumber(sentences.transitionWordSentences / sentences.totalSentences * 100);\n};\n/**\n * Calculates transition word result\n * @param {object} transitionWordSentences The object containing the total number of sentences and the number of sentences containing\n * a transition word.\n * @param {object} i18n The object used for translations.\n * @returns {object} Object containing score and text.\n */\nvar calculateTransitionWordResult = function calculateTransitionWordResult(transitionWordSentences, i18n) {\n    var score = void 0;\n    var percentage = calculateTransitionWordPercentage(transitionWordSentences);\n    var hasMarks = percentage > 0;\n    var transitionWordsURL = \"<a href='https://yoa.st/transition-words' target='_blank'>\";\n    if (percentage < 20) {\n        // Red indicator.\n        score = 3;\n    }\n    if (inRange(percentage, 20, 30)) {\n        // Orange indicator.\n        score = 6;\n    }\n    if (percentage >= 30) {\n        // Green indicator.\n        score = 9;\n    }\n    if (score < 7) {\n        var recommendedMinimum = 30;\n        return {\n            score: formatNumber(score),\n            hasMarks: hasMarks,\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n            // Translators: %1$s expands to the number of sentences containing transition words, %2$s expands to a link on yoast.com,\n            // %3$s expands to the anchor end tag, %4$s expands to the recommended value.\n            \"%1$s of the sentences contain a %2$stransition word%3$s or phrase, \" + \"which is less than the recommended minimum of %4$s.\"), percentage + \"%\", transitionWordsURL, \"</a>\", recommendedMinimum + \"%\")\n        };\n    }\n    return {\n        score: formatNumber(score),\n        hasMarks: hasMarks,\n        text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n        // Translators: %1$s expands to the number of sentences containing transition words, %2$s expands to a link on yoast.com,\n        // %3$s expands to the anchor end tag.\n        \"%1$s of the sentences contain a %2$stransition word%3$s or phrase, \" + \"which is great.\"), percentage + \"%\", transitionWordsURL, \"</a>\")\n    };\n};\n/**\n * Scores the percentage of sentences including one or more transition words.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} The Assessment result.\n */\nvar transitionWordsAssessment = function transitionWordsAssessment(paper, researcher, i18n) {\n    var transitionWordSentences = researcher.getResearch(\"findTransitionWords\");\n    var transitionWordResult = calculateTransitionWordResult(transitionWordSentences, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(transitionWordResult.score);\n    assessmentResult.setText(transitionWordResult.text);\n    assessmentResult.setHasMarks(transitionWordResult.hasMarks);\n    return assessmentResult;\n};\n/**\n * Marks text for the transition words assessment.\n * @param {Paper} paper The paper to use for the marking.\n * @param {Researcher} researcher The researcher containing the necessary research.\n * @returns {Array<Mark>} A list of marks that should be applied.\n */\nvar transitionWordsMarker = function transitionWordsMarker(paper, researcher) {\n    var transitionWordSentences = researcher.getResearch(\"findTransitionWords\");\n    return map(transitionWordSentences.sentenceResults, function (sentenceResult) {\n        var sentence = sentenceResult.sentence;\n        sentence = stripTags(sentence);\n        return new Mark({\n            original: sentence,\n            marked: marker(sentence)\n        });\n    });\n};\nmodule.exports = {\n    identifier: \"textTransitionWords\",\n    getResult: transitionWordsAssessment,\n    isApplicable: function isApplicable(paper) {\n        var isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n        return isLanguageAvailable && paper.hasText();\n    },\n    getMarks: transitionWordsMarker\n};\n//# sourceMappingURL=transitionWordsAssessment.js.map\n//# sourceMappingURL=transitionWordsAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/transitionWordsAssessment.js\n// module id = 1577\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/transitionWordsAssessment.js?");

/***/ }),
/* 1578 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\n/**\n * Assessment to check whether the text has internal links and whether they are followed or no-followed.\n */\n\nvar InternalLinksAssessment = function (_Assessment) {\n    _inherits(InternalLinksAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.recommendedMinimum] The recommended minimum number of internal links in the text.\n     * @param {number} [config.scores.allInternalFollow] The score to return if all internal links are do-follow.\n     * @param {number} [config.scores.someInternalFollow] The score to return if some but not all internal links are do-follow.\n     * @param {number} [config.scores.noneInternalFollow] The score to return if all internal links are no-follow.\n     * @param {number} [config.scores.noInternal] The score to return if there are no internal links.\n     * @param {string} [config.url] The URL to the relevant KB article.\n     *\n     * @returns {void}\n     */\n    function InternalLinksAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, InternalLinksAssessment);\n\n        var _this = _possibleConstructorReturn(this, (InternalLinksAssessment.__proto__ || Object.getPrototypeOf(InternalLinksAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                recommendedMinimum: 1\n            },\n            scores: {\n                allInternalFollow: 9,\n                someInternalFollow: 8,\n                noneInternalFollow: 7,\n                noInternal: 3\n            },\n            url: \"<a href='https://yoa.st/2pm' target='_blank'>\"\n        };\n        _this.identifier = \"internalLinks\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the getLinkStatistics module, based on this returns an assessment result with score.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The result of the assessment.\n     */\n\n    _createClass(InternalLinksAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this.linkStatistics = researcher.getResearch(\"getLinkStatistics\");\n            var assessmentResult = new AssessmentResult();\n            var calculatedResult = this.calculateResult(i18n);\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            return assessmentResult;\n        }\n        /**\n         * Checks if assessment is applicable to the paper.\n         *\n         * @param {Paper} paper The paper to be analyzed.\n         *\n         * @returns {boolean} Whether the paper has text.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText();\n        }\n        /**\n         * Returns a score and text based on the linkStatistics object.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} ResultObject with score and text\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this.linkStatistics.internalTotal === 0) {\n                return {\n                    score: this._config.scores.noInternal,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                    i18n.dgettext(\"js-text-analysis\", \"No %1$sinternal links%2$s appear in this page, consider adding some as appropriate.\"), this._config.url, \"</a>\")\n                };\n            }\n            if (this.linkStatistics.internalNofollow === this.linkStatistics.internalTotal) {\n                return {\n                    score: this._config.scores.noneInternalFollow,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands the number of internal links, %2$s expands to a link on yoast.com,\n                    %3$s expands to the anchor end tag */\n                    i18n.dgettext(\"js-text-analysis\", \"This page has %1$s %2$sinternal link(s)%3$s, all nofollowed.\"), this.linkStatistics.internalNofollow, this._config.url, \"</a>\")\n                };\n            }\n            if (this.linkStatistics.internalDofollow === this.linkStatistics.internalTotal) {\n                return {\n                    score: this._config.scores.allInternalFollow,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to the number of internal links, %2$s expands to a link on yoast.com,\n                    %3$s expands to the anchor end tag */\n                    i18n.dgettext(\"js-text-analysis\", \"This page has %1$s %2$sinternal link(s)%3$s.\"), this.linkStatistics.internalTotal, this._config.url, \"</a>\")\n                };\n            }\n            return {\n                score: this._config.scores.someInternalFollow,\n                resultText: i18n.sprintf(\n                /* Translators: %1$s expands to the number of nofollow links, %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag, %4$s to the number of internal links */\n                i18n.dgettext(\"js-text-analysis\", \"This page has %1$s nofollowed %2$sinternal link(s)%3$s and %4$s normal internal link(s).\"), this.linkStatistics.internalNofollow, this._config.url, \"</a>\", this.linkStatistics.internalDofollow)\n            };\n        }\n    }]);\n\n    return InternalLinksAssessment;\n}(Assessment);\n\nexports.default = InternalLinksAssessment;\n//# sourceMappingURL=InternalLinksAssessment.js.map\n//# sourceMappingURL=InternalLinksAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/InternalLinksAssessment.js\n// module id = 1578\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/InternalLinksAssessment.js?");

/***/ }),
/* 1579 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\n/**\n * Assessment to check whether the keyphrase is encountered in the first paragraph of the article.\n */\n\nvar IntroductionKeywordAssessment = function (_Assessment) {\n    _inherits(IntroductionKeywordAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.recommendedMinimum] The recommended minimum of keyword occurrences in the first paragraph.\n     * @param {number} [config.scores.good] The score to return if there are enough keyword occurrences in the first paragraph.\n     * @param {number} [config.scores.bad] The score to return if there aren't enough keyword occurrences in the first paragraph.\n     * @param {string} [config.url] The URL to the relevant article on Yoast.com.\n     *\n     * @returns {void}\n     */\n    function IntroductionKeywordAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, IntroductionKeywordAssessment);\n\n        var _this = _possibleConstructorReturn(this, (IntroductionKeywordAssessment.__proto__ || Object.getPrototypeOf(IntroductionKeywordAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                recommendedMinimum: 1\n            },\n            scores: {\n                good: 9,\n                bad: 3\n            },\n            url: \"<a href='https://yoa.st/2pc' target='_blank'>\"\n        };\n        _this.identifier = \"introductionKeyword\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Assesses the presence of keyphrase in the first paragraph.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The result of this assessment.\n     */\n\n    _createClass(IntroductionKeywordAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var assessmentResult = new AssessmentResult();\n            this._firstParagraphMatches = researcher.getResearch(\"firstParagraph\");\n            var calculatedResult = this.calculateResult(i18n);\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            return assessmentResult;\n        }\n        /**\n         * Checks if the paper has both keyword and text.\n         *\n         * @param {Paper} paper The paper to be analyzed.\n         *\n         * @returns {boolean} Whether the assessment is applicable or not.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasKeyword() && paper.hasText();\n        }\n        /**\n         * Returns a result based on the number of occurrences of keyphrase in the first paragraph.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} result object with a score and translation text.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this._firstParagraphMatches >= this._config.parameters.recommendedMinimum) {\n                return {\n                    score: this._config.scores.good,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n                    i18n.dgettext(\"js-text-analysis\", \"The focus keyword appears in the %1$sfirst paragraph%2$s of the copy.\"), this._config.url, \"</a>\")\n                };\n            }\n            return {\n                score: this._config.scores.bad,\n                resultText: i18n.sprintf(\n                /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n                i18n.dgettext(\"js-text-analysis\", \"The focus keyword doesn't appear in the %1$sfirst paragraph%2$s of the copy. \" + \"Make sure the topic is clear immediately.\"), this._config.url, \"</a>\")\n            };\n        }\n    }]);\n\n    return IntroductionKeywordAssessment;\n}(Assessment);\n\nexports.default = IntroductionKeywordAssessment;\n//# sourceMappingURL=IntroductionKeywordAssessment.js.map\n//# sourceMappingURL=IntroductionKeywordAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/IntroductionKeywordAssessment.js\n// module id = 1579\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/IntroductionKeywordAssessment.js?");

/***/ }),
/* 1580 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isUndefined = __webpack_require__(66);\nvar merge = __webpack_require__(98);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\n/**\n * Assessment to check whether the keyphrase has a good length.\n */\n\nvar KeyphraseLengthAssessment = function (_Assessment) {\n    _inherits(KeyphraseLengthAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.recommendedMinimum] The recommended minimum length of the keyphrase (in words).\n     * @param {number} [config.parameters.acceptableMaximum] The acceptable maximum length of the keyphrase (in words).\n     * @param {number} [config.scores.veryBad] The score to return if the length of the keyphrase is below recommended minimum.\n     * @param {number} [config.scores.consideration] The score to return if the length of the keyphrase is above acceptable maximum.\n     *\n     * @returns {void}\n     */\n    function KeyphraseLengthAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, KeyphraseLengthAssessment);\n\n        var _this = _possibleConstructorReturn(this, (KeyphraseLengthAssessment.__proto__ || Object.getPrototypeOf(KeyphraseLengthAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                recommendedMinimum: 1,\n                acceptableMaximum: 10\n            },\n            scores: {\n                veryBad: -999,\n                consideration: 0\n            },\n            urlNoOrGoodKeyword: \"<a href='https://yoa.st/2pdd' target='_blank'>\",\n            urlKeyphraseTooLong: \"<a href='https://yoa.st/2pd' target='_blank'>\"\n        };\n        _this.identifier = \"keyphraseLength\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Assesses the keyphrase presence and length.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The result of this assessment.\n     */\n\n    _createClass(KeyphraseLengthAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this._keyphraseLength = researcher.getResearch(\"keyphraseLength\");\n            var assessmentResult = new AssessmentResult();\n            var calculatedResult = this.calculateResult(i18n);\n            if (!isUndefined(calculatedResult)) {\n                assessmentResult.setScore(calculatedResult.score);\n                assessmentResult.setText(calculatedResult.resultText);\n            }\n            return assessmentResult;\n        }\n        /**\n         * Calculates the result based on the keyphraseLength research.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} Object with score and text.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this._keyphraseLength < this._config.parameters.recommendedMinimum) {\n                return {\n                    score: this._config.scores.veryBad,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n                    i18n.dgettext(\"js-text-analysis\", \"No %1$sfocus keyword%2$s was set for this page. If you do not set a focus keyword, no score can be calculated.\"), this._config.urlNoOrGoodKeyword, \"</a>\")\n                };\n            }\n            if (this._keyphraseLength > this._config.parameters.acceptableMaximum) {\n                return {\n                    score: this._config.scores.consideration,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                    i18n.dgettext(\"js-text-analysis\", \"The %1$skeyphrase%2$s is over 10 words, a keyphrase should be shorter.\"), this._config.urlKeyphraseTooLong, \"</a>\")\n                };\n            }\n        }\n    }]);\n\n    return KeyphraseLengthAssessment;\n}(Assessment);\n\nexports.default = KeyphraseLengthAssessment;\n//# sourceMappingURL=KeyphraseLengthAssessment.js.map\n//# sourceMappingURL=KeyphraseLengthAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/KeyphraseLengthAssessment.js\n// module id = 1580\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/KeyphraseLengthAssessment.js?");

/***/ }),
/* 1581 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\nvar countWords = __webpack_require__(185);\nvar inRange = __webpack_require__(395);\nvar formatNumber = __webpack_require__(588);\nvar topicCount = __webpack_require__(589);\nvar inRangeEndInclusive = inRange.inRangeEndInclusive;\nvar inRangeStartInclusive = inRange.inRangeStartInclusive;\nvar inRangeStartEndInclusive = inRange.inRangeStartEndInclusive;\n/**\n * Represents the assessment that will look if the keyword density is within the recommended range.\n */\n\nvar KeywordDensityAssessment = function (_Assessment) {\n    _inherits(KeywordDensityAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.overMaximum] The percentage of keyword instances in the text that is way over the maximum.\n     * @param {number} [config.parameters.maximum] The maximum percentage of keyword instances in the text.\n     * @param {number} [config.parameters.minimum] The minimum percentage of keyword instances in the text.\n     * @param {number} [config.scores.wayOverMaximum] The score to return if there are way too many instances of keyword in the text.\n     * @param {number} [config.scores.overMaximum] The score to return if there are too many instances of keyword in the text.\n     * @param {number} [config.scores.correctDensity] The score to return if there is a good number of keyword instances in the text.\n     * @param {number} [config.scores.underMinimum] The score to return if there is not enough keyword instances in the text.\n     * @param {string} [config.url] The URL to the relevant KB article.\n     *\n     * @returns {void}\n     */\n    function KeywordDensityAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, KeywordDensityAssessment);\n\n        var _this = _possibleConstructorReturn(this, (KeywordDensityAssessment.__proto__ || Object.getPrototypeOf(KeywordDensityAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                overMaximum: 3.5,\n                maximum: 2.5,\n                minimum: 0.5\n            },\n            scores: {\n                wayOverMaximum: -50,\n                overMaximum: -10,\n                correctDensity: 9,\n                underMinimum: 4\n            },\n            url: \"<a href='https://yoa.st/2pe' target='_blank'>\"\n        };\n        _this.identifier = \"keywordDensity\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the keyword density module, based on this returns an assessment\n     * result with score.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling the\n     *                                research.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The result of the assessment.\n     */\n\n    _createClass(KeywordDensityAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var assessmentResult = new AssessmentResult();\n            this._keywordCount = researcher.getResearch(\"keywordCount\").count;\n            this._keywordDensity = researcher.getResearch(\"getKeywordDensity\");\n            var calculatedScore = this.calculateResult(i18n);\n            assessmentResult.setScore(calculatedScore.score);\n            assessmentResult.setText(calculatedScore.resultText);\n            assessmentResult.setHasMarks(this._keywordCount > 0);\n            return assessmentResult;\n        }\n        /**\n         * Checks whether there are no keyword matches in the text.\n         *\n         * @returns {boolean} Returns true if the keyword count is 0.\n         */\n\n    }, {\n        key: \"hasNoMatches\",\n        value: function hasNoMatches() {\n            return this._keywordCount === 0;\n        }\n        /**\n         * Checks whether there are too few keyword matches in the text.\n         *\n         * @returns {boolean} Returns true if the rounded keyword density is between\n         *                    0 and the recommended minimum.\n         */\n\n    }, {\n        key: \"hasTooFewMatches\",\n        value: function hasTooFewMatches() {\n            return inRangeStartInclusive(this._keywordDensity, 0, this._config.parameters.minimum);\n        }\n        /**\n         * Checks whether there is a good number of keyword matches in the text.\n         *\n         * @returns {boolean} Returns true if the rounded keyword density is between\n         *                    the recommended minimum and the recommended maximum.\n         */\n\n    }, {\n        key: \"hasGoodNumberOfMatches\",\n        value: function hasGoodNumberOfMatches() {\n            return inRangeStartEndInclusive(this._keywordDensity, this._config.parameters.minimum, this._config.parameters.maximum);\n        }\n        /**\n         * Checks whether the number of keyword matches in the text is between the\n         * recommended maximum and the specified overMaximum value.\n         *\n         * @returns {boolean} Returns true if the rounded keyword density is between\n         *                    the recommended maximum and the specified overMaximum\n         *                    value.\n         */\n\n    }, {\n        key: \"hasTooManyMatches\",\n        value: function hasTooManyMatches() {\n            return inRangeEndInclusive(this._keywordDensity, this._config.parameters.maximum, this._config.parameters.overMaximum);\n        }\n        /**\n         * Returns the score for the keyword density.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} The object with calculated score and resultText.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            var max = this._config.parameters.maximum + \"%\";\n            var roundedKeywordDensity = formatNumber(this._keywordDensity);\n            var keywordDensityPercentage = roundedKeywordDensity + \"%\";\n            if (this.hasNoMatches()) {\n                return {\n                    score: this._config.scores.underMinimum,\n                    resultText: i18n.sprintf(\n                    /* Translators:\n                    %1$s expands to the keyword density percentage,\n                    %2$d expands to the keyword count,\n                    %3$s expands to a link to a Yoast.com article about keyword density,\n                    %4$s expands to the anchor end tag. */\n                    i18n.dgettext(\"js-text-analysis\", \"The exact-match %3$skeyword density%4$s is %1$s,\" + \" which is too low; the focus keyword was found %2$d times.\", this._keywordCount), keywordDensityPercentage, this._keywordCount, this._config.url, \"</a>\")\n                };\n            }\n            if (this.hasTooFewMatches()) {\n                return {\n                    score: this._config.scores.underMinimum,\n                    resultText: i18n.sprintf(\n                    /* Translators:\n                    %1$s expands to the keyword density percentage,\n                    %2$d expands to the keyword count,\n                    %3$s expands to a link to a Yoast.com article about keyword density,\n                    %4$s expands to the anchor end tag. */\n                    i18n.dngettext(\"js-text-analysis\", \"The exact-match %3$skeyword density%4$s is %1$s,\" + \" which is too low; the focus keyword was found %2$d time.\", \"The exact-match %3$skeyword density%4$s is %1$s,\" + \" which is too low; the focus keyword was found %2$d times.\", this._keywordCount), keywordDensityPercentage, this._keywordCount, this._config.url, \"</a>\")\n                };\n            }\n            if (this.hasGoodNumberOfMatches()) {\n                return {\n                    score: this._config.scores.correctDensity,\n                    resultText: i18n.sprintf(\n                    /* Translators:\n                    %1$s expands to the keyword density percentage,\n                    %2$d expands to the keyword count,\n                    %3$s expands to a link to a Yoast.com article about keyword density,\n                    %4$s expands to the anchor end tag. */\n                    i18n.dngettext(\"js-text-analysis\", \"The exact-match %3$skeyword density%4$s is %1$s,\" + \" which is great; the focus keyword was found %2$d time.\", \"The exact-match %3$skeyword density%4$s is %1$s,\" + \" which is great; the focus keyword was found %2$d times.\", this._keywordCount), keywordDensityPercentage, this._keywordCount, this._config.url, \"</a>\")\n                };\n            }\n            if (this.hasTooManyMatches()) {\n                return {\n                    score: this._config.scores.overMaximum,\n                    resultText: i18n.sprintf(\n                    /* Translators:\n                    %1$s expands to the keyword density percentage,\n                    %2$d expands to the keyword count,\n                    %3$s expands to the maximum keyword density percentage,\n                    %4$s expands to a link to a Yoast.com article about keyword density,\n                    %5$s expands to the anchor end tag. */\n                    i18n.dngettext(\"js-text-analysis\", \"The exact-match %4$skeyword density%5$s is %1$s,\" + \" which is over the advised %3$s maximum; the focus keyword was found %2$d time.\", \"The exact-match %4$skeyword density%5$s is %1$s,\" + \" which is over the advised %3$s maximum; the focus keyword was found %2$d times.\", this._keywordCount), keywordDensityPercentage, this._keywordCount, max, this._config.url, \"</a>\")\n                };\n            }\n            // Implicitly returns this if the rounded keyword density is higher than overMaximum.\n            return {\n                score: this._config.scores.wayOverMaximum,\n                resultText: i18n.sprintf(\n                /* Translators:\n                %1$s expands to the keyword density percentage,\n                %2$d expands to the keyword count,\n                %3$s expands to the maximum keyword density percentage,\n                %4$s expands to a link to a Yoast.com article about keyword density,\n                %5$s expands to the anchor end tag. */\n                i18n.dngettext(\"js-text-analysis\", \"The exact-match %4$skeyword density%5$s is %1$s,\" + \" which is way over the advised %3$s maximum; the focus keyword was found %2$d time.\", \"The exact-match %4$skeyword density%5$s is %1$s,\" + \" which is way over the advised %3$s maximum; the focus keyword was found %2$d times.\", this._keywordCount), keywordDensityPercentage, this._keywordCount, max, this._config.url, \"</a>\")\n            };\n        }\n        /**\n         * Marks keywords in the text for the keyword density assessment.\n         *\n         * @param {Object} paper The paper to use for the assessment.\n         *\n         * @returns {Array<Mark>} Marks that should be applied.\n         */\n\n    }, {\n        key: \"getMarks\",\n        value: function getMarks(paper) {\n            return topicCount(paper, true).markings;\n        }\n        /**\n         * Checks whether the paper has a text with at least 100 words and a keyword\n         * is set.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True if applicable.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText() && paper.hasKeyword() && countWords(paper.getText()) >= 100;\n        }\n    }]);\n\n    return KeywordDensityAssessment;\n}(Assessment);\n\nexports.default = KeywordDensityAssessment;\n//# sourceMappingURL=KeywordDensityAssessment.js.map\n//# sourceMappingURL=KeywordDensityAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/KeywordDensityAssessment.js\n// module id = 1581\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/KeywordDensityAssessment.js?");

/***/ }),
/* 1582 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\n/**\n * Assessment for checking the keyword matches in the meta description.\n */\n\nvar MetaDescriptionKeywordAssessment = function (_Assessment) {\n    _inherits(MetaDescriptionKeywordAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.recommendedMinimum] The recommended minimum of keyword occurrences in the meta description.\n     * @param {number} [config.scores.good] The score to return if there are enough keyword occurrences in the meta description.\n     * @param {number} [config.scores.bad] The score to return if there aren't enough keyword occurrences in the meta description.\n     * @param {string} [config.url] The URL to the relevant article on Yoast.com.\n     *\n     * @returns {void}\n     */\n    function MetaDescriptionKeywordAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, MetaDescriptionKeywordAssessment);\n\n        var _this = _possibleConstructorReturn(this, (MetaDescriptionKeywordAssessment.__proto__ || Object.getPrototypeOf(MetaDescriptionKeywordAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                recommendedMinimum: 1\n            },\n            scores: {\n                good: 9,\n                bad: 3\n            },\n            url: \"<a href='https://yoa.st/2pf' target='_blank'>\"\n        };\n        _this.identifier = \"metaDescriptionKeyword\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the metaDescriptionKeyword researcher and based on this, returns an assessment result with score.\n     *\n     * @param {Paper}      paper      The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed}        i18n       The object used for translations.\n     *\n     * @returns {AssessmentResult} The assessment result.\n     */\n\n    _createClass(MetaDescriptionKeywordAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this._keywordMatches = researcher.getResearch(\"metaDescriptionKeyword\");\n            var assessmentResult = new AssessmentResult();\n            var calculatedResult = this.calculateResult(i18n);\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            return assessmentResult;\n        }\n        /**\n         * Returns the result object based on the number of keyword matches in the meta description.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} Result object with score and text.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this._keywordMatches >= this._config.parameters.recommendedMinimum) {\n                return {\n                    score: this._config.scores.good,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n                    i18n.dngettext(\"js-text-analysis\", \"The meta description %1$scontains the focus keyword%2$s.\"), this._config.url, \"</a>\")\n                };\n            }\n            return {\n                score: this._config.scores.bad,\n                resultText: i18n.sprintf(\n                /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n                i18n.dgettext(\"js-text-analysis\", \"A meta description has been specified, but it %1$sdoes not contain the focus keyword%2$s.\"), this._config.url, \"</a>\")\n            };\n        }\n        /**\n         * Checks whether the paper has a keyword and a meta description.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True if the paper has a keyword and a meta description.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasKeyword() && paper.hasDescription();\n        }\n    }]);\n\n    return MetaDescriptionKeywordAssessment;\n}(Assessment);\n\nexports.default = MetaDescriptionKeywordAssessment;\n//# sourceMappingURL=MetaDescriptionKeywordAssessment.js.map\n//# sourceMappingURL=MetaDescriptionKeywordAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/MetaDescriptionKeywordAssessment.js\n// module id = 1582\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/MetaDescriptionKeywordAssessment.js?");

/***/ }),
/* 1583 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar isEmpty = __webpack_require__(97);\nvar merge = __webpack_require__(98);\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\n/**\n * Assessment for calculating the outbound links in the text.\n */\n\nvar OutboundLinksAssessment = function (_Assessment) {\n    _inherits(OutboundLinksAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     *\n     * @returns {void}\n     */\n    function OutboundLinksAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, OutboundLinksAssessment);\n\n        var _this = _possibleConstructorReturn(this, (OutboundLinksAssessment.__proto__ || Object.getPrototypeOf(OutboundLinksAssessment)).call(this));\n\n        var defaultConfig = {\n            scores: {\n                noLinks: 6,\n                allNofollowed: 7,\n                moreNoFollowed: 8,\n                allFollowed: 9\n            }\n        };\n        _this.identifier = \"externalLinks\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the getLinkStatistics module, based on this returns an assessment result with score.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed} i18n The object used for translations\n     *\n     * @returns {AssessmentResult} The assessment result.\n     */\n\n    _createClass(OutboundLinksAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var linkStatistics = researcher.getResearch(\"getLinkStatistics\");\n            var assessmentResult = new AssessmentResult();\n            if (!isEmpty(linkStatistics)) {\n                assessmentResult.setScore(this.calculateScore(linkStatistics));\n                assessmentResult.setText(this.translateScore(linkStatistics, i18n));\n            }\n            return assessmentResult;\n        }\n        /**\n         * Checks whether paper has text.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is text.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText();\n        }\n        /**\n         * Returns a score based on the linkStatistics object.\n         *\n         * @param {object} linkStatistics The object with all link statistics.\n         *\n         * @returns {number|null} The calculated score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(linkStatistics) {\n            if (linkStatistics.externalTotal === 0) {\n                return this._config.scores.noLinks;\n            }\n            if (linkStatistics.externalNofollow === linkStatistics.total) {\n                return this._config.scores.allNofollowed;\n            }\n            if (linkStatistics.externalNofollow < linkStatistics.externalTotal) {\n                return this._config.scores.moreNoFollowed;\n            }\n            if (linkStatistics.externalDofollow === linkStatistics.total) {\n                return this._config.scores.allFollowed;\n            }\n            return null;\n        }\n        /**\n         * Translates the score to a message the user can understand.\n         *\n         * @param {Object} linkStatistics The object with all link statistics.\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {string} The translated string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(linkStatistics, i18n) {\n            var url = \"<a href='https://yoa.st/2pl' target='_blank'>\";\n            if (linkStatistics.externalTotal === 0) {\n                return i18n.sprintf(\n                /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"No %1$soutbound links%2$s appear in this page, consider adding some as appropriate.\"), url, \"</a>\");\n            }\n            if (linkStatistics.externalNofollow === linkStatistics.total) {\n                return i18n.sprintf(\n                /* Translators: %1$s expands the number of outbound links, %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"This page has %1$s %2$soutbound link(s)%3$s, all nofollowed.\"), linkStatistics.externalNofollow, url, \"</a>\");\n            }\n            if (linkStatistics.externalNofollow < linkStatistics.externalTotal) {\n                return i18n.sprintf(\n                /* Translators: %1$s expands to the number of nofollow links, %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag, %4$s to the number of outbound links */\n                i18n.dgettext(\"js-text-analysis\", \"This page has %1$s nofollowed %2$soutbound link(s)%3$s and %4$s normal outbound link(s).\"), linkStatistics.externalNofollow, url, \"</a>\", linkStatistics.externalDofollow);\n            }\n            if (linkStatistics.externalDofollow === linkStatistics.total) {\n                return i18n.sprintf(\n                /* Translators: %1$s expands to the number of outbound links, %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"This page has %1$s %2$soutbound link(s)%3$s.\"), linkStatistics.externalTotal);\n            }\n            return \"\";\n        }\n    }]);\n\n    return OutboundLinksAssessment;\n}(Assessment);\n\nmodule.exports = OutboundLinksAssessment;\n//# sourceMappingURL=outboundLinksAssessment.js.map\n//# sourceMappingURL=outboundLinksAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/outboundLinksAssessment.js\n// module id = 1583\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/outboundLinksAssessment.js?");

/***/ }),
/* 1584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar merge = __webpack_require__(98);\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\n/**\n * Represents the assessment that checks if the keyword is present in one of the subheadings.\n */\n\nvar SubHeadingsKeywordAssessment = function (_Assessment) {\n    _inherits(SubHeadingsKeywordAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     *\n     * @returns {void}\n     */\n    function SubHeadingsKeywordAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, SubHeadingsKeywordAssessment);\n\n        var _this = _possibleConstructorReturn(this, (SubHeadingsKeywordAssessment.__proto__ || Object.getPrototypeOf(SubHeadingsKeywordAssessment)).call(this));\n\n        var defaultConfig = {\n            scores: {\n                noMatches: 6,\n                oneMatch: 9,\n                multipleMatches: 9\n            }\n        };\n        _this.identifier = \"subheadingsKeyword\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the match keyword in subheadings module, based on this returns an assessment result with score.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The assessment result.\n     */\n\n    _createClass(SubHeadingsKeywordAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var subHeadings = researcher.getResearch(\"matchKeywordInSubheadings\");\n            var assessmentResult = new AssessmentResult();\n            var score = this.calculateScore(subHeadings);\n            assessmentResult.setScore(score);\n            assessmentResult.setText(this.translateScore(score, subHeadings, i18n));\n            return assessmentResult;\n        }\n        /**\n         * Checks whether the paper has a text and a keyword.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is text and a keyword.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText() && paper.hasKeyword();\n        }\n        /**\n         * Returns the score for the subheadings.\n         *\n         * @param {Object} subHeadings The object with all subHeadings matches.\n         *\n         * @returns {number|null} The calculated score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(subHeadings) {\n            if (subHeadings.matches === 0) {\n                return this._config.scores.noMatches;\n            }\n            if (subHeadings.matches === 1) {\n                return this._config.scores.oneMatch;\n            }\n            if (subHeadings.matches > 1) {\n                return this._config.scores.multipleMatches;\n            }\n            return null;\n        }\n        /**\n         * Translates the score to a message the user can understand.\n         *\n         * @param {number} score The score for this assessment.\n         * @param {Object} subHeadings The object with all subHeadings matches.\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {string} The translated string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(score, subHeadings, i18n) {\n            var url = \"<a href='https://yoa.st/2ph' target='_blank'>\";\n            if (score === this._config.scores.multipleMatches || score === this._config.scores.oneMatch) {\n                return i18n.sprintf(\n                /* Translators: %1$d expands to the number of subheadings containing the keyword, %2$d expands to the\n                total number of subheadings, %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"The focus keyword appears in %1$d (out of %2$d) %3$ssubheadings%4$s in your copy.\"), subHeadings.matches, subHeadings.count, url, \"</a>\");\n            }\n            if (score === this._config.scores.noMatches) {\n                return i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"You have not used the focus keyword in any %1$ssubheading%2$s (such as an H2) in your copy.\"), url, \"</a>\");\n            }\n            return \"\";\n        }\n    }]);\n\n    return SubHeadingsKeywordAssessment;\n}(Assessment);\n\nmodule.exports = SubHeadingsKeywordAssessment;\n//# sourceMappingURL=subheadingsKeywordAssessment.js.map\n//# sourceMappingURL=subheadingsKeywordAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/subheadingsKeywordAssessment.js\n// module id = 1584\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/subheadingsKeywordAssessment.js?");

/***/ }),
/* 1585 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar map = __webpack_require__(63);\nvar merge = __webpack_require__(98);\nvar isUndefined = __webpack_require__(66);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\nvar Mark = __webpack_require__(571);\nvar addMark = __webpack_require__(712);\n/**\n * Assessment to check whether you're linking to a different page with the focus keyword from this page.\n */\n\nvar TextCompetingLinksAssessment = function (_Assessment) {\n    _inherits(TextCompetingLinksAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.recommendedMaximum] The recommended maximum number of links using the same keyword as this paper.\n     * @param {string} [config.scores.bad] The score to return if there are more links with the same keyword than the recommended maximum.\n     * @param {string} [config.url] The URL to the relevant article on Yoast.com.\n     *\n     * @returns {void}\n     */\n    function TextCompetingLinksAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, TextCompetingLinksAssessment);\n\n        var _this = _possibleConstructorReturn(this, (TextCompetingLinksAssessment.__proto__ || Object.getPrototypeOf(TextCompetingLinksAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                recommendedMaximum: 0\n            },\n            scores: {\n                bad: 2\n            },\n            url: \"<a href='https://yoa.st/2pi' target='_blank'>\"\n        };\n        _this.identifier = \"textCompetingLinks\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the linkCount module, based on this returns an assessment result with score.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {Object} The AssessmentResult.\n     */\n\n    _createClass(TextCompetingLinksAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var assessmentResult = new AssessmentResult();\n            this.linkCount = researcher.getResearch(\"getLinkStatistics\");\n            var calculatedResult = this.calculateResult(i18n);\n            if (isUndefined(calculatedResult)) {\n                return assessmentResult;\n            }\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            assessmentResult.setHasMarks(true);\n            assessmentResult.setMarker(this.getMarks());\n            return assessmentResult;\n        }\n        /**\n         * Determines if the assessment is applicable to the paper.\n         *\n         * @param {Paper} paper The paper to check\n         *\n         * @returns {boolean} Whether the paper has text and a keyword\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText() && paper.hasKeyword();\n        }\n        /**\n         * Returns a result based on the number of links.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} ResultObject with score and text.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this.linkCount.keyword.totalKeyword > this._config.parameters.recommendedMaximum) {\n                return {\n                    score: this._config.scores.bad,\n                    resultText: i18n.sprintf(\n                    /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                    i18n.dgettext(\"js-text-analysis\", \"You're %1$slinking to another page with the focus keyword%2$s you want this page to rank for. \" + \"Consider changing that if you truly want this page to rank.\"), this._config.url, \"</a>\")\n                };\n            }\n        }\n        /**\n         * Mark the anchors.\n         *\n         * @returns {Array} Array with all the marked anchors.\n         */\n\n    }, {\n        key: \"getMarks\",\n        value: function getMarks() {\n            return map(this.linkCount.keyword.matchedAnchors, function (matchedAnchor) {\n                return new Mark({\n                    original: matchedAnchor,\n                    marked: addMark(matchedAnchor)\n                });\n            });\n        }\n    }]);\n\n    return TextCompetingLinksAssessment;\n}(Assessment);\n\nexports.default = TextCompetingLinksAssessment;\n//# sourceMappingURL=TextCompetingLinksAssessment.js.map\n//# sourceMappingURL=TextCompetingLinksAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/TextCompetingLinksAssessment.js\n// module id = 1585\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/TextCompetingLinksAssessment.js?");

/***/ }),
/* 1586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar merge = __webpack_require__(98);\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\n/**\n * Represents the assessment that will look if the images have alt-tags and checks if the keyword is present in one of them.\n */\n\nvar TextImagesAssessment = function (_Assessment) {\n    _inherits(TextImagesAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {object} config The configuration to use.\n     *\n     * @returns {void}\n     */\n    function TextImagesAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, TextImagesAssessment);\n\n        var _this = _possibleConstructorReturn(this, (TextImagesAssessment.__proto__ || Object.getPrototypeOf(TextImagesAssessment)).call(this));\n\n        var defaultConfig = {\n            scores: {\n                noImages: 3,\n                withAltKeyword: 9,\n                withAltNonKeyword: 6,\n                withAlt: 6,\n                noAlt: 6\n            }\n        };\n        _this.identifier = \"textImages\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Execute the Assessment and return a result.\n     *\n     * @param {Paper} paper The Paper object to assess.\n     * @param {Researcher} researcher The Researcher object containing all available researches.\n     * @param {Jed} i18n The locale object.\n     *\n     * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n     */\n\n    _createClass(TextImagesAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var assessmentResult = new AssessmentResult();\n            var imageCount = researcher.getResearch(\"imageCount\");\n            var altProperties = researcher.getResearch(\"altTagCount\");\n            assessmentResult.setScore(this.calculateScore(imageCount, altProperties));\n            assessmentResult.setText(this.translateScore(imageCount, altProperties, i18n));\n            return assessmentResult;\n        }\n        /**\n         * Checks whether the paper has text.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is text.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText();\n        }\n        /**\n         * Calculate the score based on the current image count and current image alt-tag count.\n         *\n         * @param {number} imageCount The amount of images to be checked against.\n         * @param {Object} altProperties An object containing the various alt-tags.\n         *\n         * @returns {number} The calculated score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(imageCount, altProperties) {\n            if (imageCount === 0) {\n                return this._config.scores.noImages;\n            }\n            // Has alt-tag and keywords\n            if (altProperties.withAltKeyword > 0) {\n                return this._config.scores.withAltKeyword;\n            }\n            // Has alt-tag, but no keywords and it's not okay\n            if (altProperties.withAltNonKeyword > 0) {\n                return this._config.scores.withAltNonKeyword;\n            }\n            // Has alt-tag, but no keyword is set\n            if (altProperties.withAlt > 0) {\n                return this._config.scores.withAlt;\n            }\n            // Has no alt-tag\n            if (altProperties.noAlt > 0) {\n                return this._config.scores.noAlt;\n            }\n            return null;\n        }\n        /**\n         * Translates the score to a message the user can understand.\n         *\n         * @param {number} imageCount The amount of images to be checked against.\n         * @param {Object} altProperties An object containing the various alt-tags.\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {string} The translated string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(imageCount, altProperties, i18n) {\n            var url = \"<a href='https://yoa.st/2pj' target='_blank'>\";\n            if (imageCount === 0) {\n                return i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"No %1$simages%2$s appear in this page, consider adding some as appropriate.\"), url, \"</a>\");\n            }\n            // Has alt-tag and keywords\n            if (altProperties.withAltKeyword > 0) {\n                return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"The %1$simages%2$s on this page contain alt attributes with the focus keyword.\"), url, \"</a>\");\n            }\n            // Has alt-tag, but no keywords and it's not okay\n            if (altProperties.withAltNonKeyword > 0) {\n                return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"The %1$simages%2$s on this page do not have alt attributes containing the focus keyword.\"), url, \"</a>\");\n            }\n            // Has alt-tag, but no keyword is set\n            if (altProperties.withAlt > 0) {\n                return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"The %1$simages%2$s on this page contain alt attributes.\"), url, \"</a>\");\n            }\n            // Has no alt-tag\n            if (altProperties.noAlt > 0) {\n                return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"The %1$simages%2$s on this page are missing alt attributes.\"), url, \"</a>\");\n            }\n            return \"\";\n        }\n    }]);\n\n    return TextImagesAssessment;\n}(Assessment);\n\nmodule.exports = TextImagesAssessment;\n//# sourceMappingURL=textImagesAssessment.js.map\n//# sourceMappingURL=textImagesAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/textImagesAssessment.js\n// module id = 1586\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/textImagesAssessment.js?");

/***/ }),
/* 1587 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar inRange = __webpack_require__(1265);\nvar merge = __webpack_require__(98);\nvar AssessmentResult = __webpack_require__(51);\nvar Assessment = __webpack_require__(107);\n/**\n * Assessment that will test if the text is long enough.\n */\n\nvar TextLengthAssessment = function (_Assessment) {\n    _inherits(TextLengthAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     *\n     * @returns {void}\n     */\n    function TextLengthAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, TextLengthAssessment);\n\n        var _this = _possibleConstructorReturn(this, (TextLengthAssessment.__proto__ || Object.getPrototypeOf(TextLengthAssessment)).call(this));\n\n        var defaultConfig = {\n            recommendedMinimum: 300,\n            slightlyBelowMinimum: 250,\n            belowMinimum: 200,\n            veryFarBelowMinimum: 100,\n            scores: {\n                recommendedMinimum: 9,\n                slightlyBelowMinimum: 6,\n                belowMinimum: 3,\n                farBelowMinimum: -10,\n                veryFarBelowMinimum: -20\n            }\n        };\n        _this.identifier = \"textLength\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Execute the Assessment and return a result.\n     *\n     * @param {Paper} paper The Paper object to assess.\n     * @param {Researcher} researcher The Researcher object containing all available researches.\n     * @param {Jed} i18n The locale object.\n     *\n     * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n     */\n\n    _createClass(TextLengthAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            var wordCount = researcher.getResearch(\"wordCountInText\");\n            var assessmentResult = new AssessmentResult();\n            assessmentResult.setScore(this.calculateScore(wordCount));\n            assessmentResult.setText(i18n.sprintf(this.translateScore(assessmentResult.getScore(), wordCount, i18n), wordCount, this._config.recommendedMinimum));\n            return assessmentResult;\n        }\n        /**\n         * Calculates the score based on the current word count.\n         *\n         * @param {number} wordCount The amount of words to be checked against.\n          * @returns {number|null} The score.\n         */\n\n    }, {\n        key: \"calculateScore\",\n        value: function calculateScore(wordCount) {\n            if (wordCount >= this._config.recommendedMinimum) {\n                return this._config.scores.recommendedMinimum;\n            }\n            if (inRange(wordCount, this._config.slightlyBelowMinimum, this._config.recommendedMinimum)) {\n                return this._config.scores.slightlyBelowMinimum;\n            }\n            if (inRange(wordCount, this._config.belowMinimum, this._config.slightlyBelowMinimum)) {\n                return this._config.scores.belowMinimum;\n            }\n            if (inRange(wordCount, this._config.veryFarBelowMinimum, this._config.belowMinimum)) {\n                return this._config.scores.farBelowMinimum;\n            }\n            if (inRange(wordCount, 0, this._config.veryFarBelowMinimum)) {\n                return this._config.scores.veryFarBelowMinimum;\n            }\n            return null;\n        }\n        /**\n         * Translates the score to a message the user can understand.\n         *\n         * @param {number} score The amount of words to be checked against.\n         * @param {number} wordCount The amount of words.\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {string} The translated string.\n         */\n\n    }, {\n        key: \"translateScore\",\n        value: function translateScore(score, wordCount, i18n) {\n            var url = \"<a href='https://yoa.st/2pk' target='_blank'>\";\n            if (score === this._config.scores.recommendedMinimum) {\n                return i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n                /* Translators: %1$d expands to the number of words in the text */\n                \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n                /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag,\t%4$s expands to the recommended minimum of words. */\n                \"This is more than or equal to the %2$srecommended minimum%3$s of %4$d word.\", \"This is more than or equal to the %2$srecommended minimum%3$s of %4$d words.\", this._config.recommendedMinimum), wordCount, url, \"</a>\", this._config.recommendedMinimum);\n            }\n            if (score === this._config.scores.slightlyBelowMinimum) {\n                return i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n                /* Translators: %1$d expands to the number of words in the text */\n                \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n                /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag, %4$s expands to the recommended minimum of words. */\n                \"This is slightly below the %2$srecommended minimum%3$s of %4$d word. Add a bit more copy.\", \"This is slightly below the %2$srecommended minimum%3$s of %4$d words. Add a bit more copy.\", this._config.recommendedMinimum), wordCount, url, \"</a>\", this._config.recommendedMinimum);\n            }\n            if (score === this._config.scores.belowMinimum) {\n                return i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n                /* Translators: %1$d expands to the number of words in the text */\n                \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n                /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag, %4$s expands to the recommended minimum of words. */\n                \"This is below the %2$srecommended minimum%3$s of %4$d word. Add more content that is relevant for the topic.\", \"This is below the %2$srecommended minimum%3$s of %4$d words. Add more content that is relevant for the topic.\", this._config.recommendedMinimum), wordCount, url, \"</a>\", this._config.recommendedMinimum);\n            }\n            if (score === this._config.scores.farBelowMinimum || score === this._config.scores.veryFarBelowMinimum) {\n                return i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n                /* Translators: %1$d expands to the number of words in the text */\n                \"The text contains %1$d word.\", \"The text contains %1$d words.\", wordCount) + \" \" + i18n.dngettext(\"js-text-analysis\",\n                /* Translators: The preceding sentence is \"The text contains x words.\", %2$s expands to a link on yoast.com,\n                %3$s expands to the anchor end tag,  %4$s expands to the recommended minimum of words. */\n                \"This is far below the %2$srecommended minimum%3$s of %4$d word. Add more content that is relevant for the topic.\", \"This is far below the %2$srecommended minimum%3$s of %4$d words. Add more content that is relevant for the topic.\", this._config.recommendedMinimum), wordCount, url, \"</a>\", this._config.recommendedMinimum);\n            }\n            return \"\";\n        }\n    }]);\n\n    return TextLengthAssessment;\n}(Assessment);\n\nmodule.exports = TextLengthAssessment;\n//# sourceMappingURL=textLengthAssessment.js.map\n//# sourceMappingURL=textLengthAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/textLengthAssessment.js\n// module id = 1587\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/textLengthAssessment.js?");

/***/ }),
/* 1588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar escape = __webpack_require__(1559);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\n/**\n * Assessment to check whether the keyword is included in (the beginning of) the SEO title.\n */\n\nvar TitleKeywordAssessment = function (_Assessment) {\n    _inherits(TitleKeywordAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.recommendedMinimum] The recommended minimum of keyword occurrences in the title.\n     * @param {number} [config.parameters.recommendedPosition] The recommended position of the keyword within the title.\n     * @param {number} [config.scores.good] The score to return if the keyword is found at the recommended position.\n     * @param {number} [config.scores.okay] The score to return if the keyword is found, but not at the recommended position.\n     * @param {number} [config.scores.bad] The score to return if there are fewer keyword occurrences than the recommended minimum.\n     * @param {string} [config.url] The URL to the relevant article on Yoast.com.\n     *\n     * @returns {void}\n     */\n    function TitleKeywordAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, TitleKeywordAssessment);\n\n        var _this = _possibleConstructorReturn(this, (TitleKeywordAssessment.__proto__ || Object.getPrototypeOf(TitleKeywordAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                recommendedMinimum: 1,\n                recommendedPosition: 0\n            },\n            scores: {\n                good: 9,\n                okay: 6,\n                bad: 2\n            },\n            url: \"<a href='https://yoa.st/2pn' target='_blank'>\"\n        };\n        _this.identifier = \"titleKeyword\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Executes the pagetitle keyword assessment and returns an assessment result.\n     *\n     * @param {Paper} paper The Paper object to assess.\n     * @param {Researcher} researcher The Researcher object containing all available researches.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The result of the assessment with text and score.\n     */\n\n    _createClass(TitleKeywordAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this._keywordMatches = researcher.getResearch(\"findKeywordInPageTitle\");\n            this._keyword = escape(paper.getKeyword());\n            var assessmentResult = new AssessmentResult();\n            var calculatedResult = this.calculateResult(i18n);\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            return assessmentResult;\n        }\n        /**\n         * Checks whether the assessment is applicable to the paper\n         *\n         * @param {Paper} paper The Paper object to assess.\n         *\n         * @returns {boolean} Whether the paper has a keyword and a title.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasKeyword() && paper.hasTitle();\n        }\n        /**\n         * Calculates the result based on the keyphraseLength research.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} Object with score and text.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            var matches = this._keywordMatches.matches;\n            var position = this._keywordMatches.position;\n            if (matches < this._config.parameters.recommendedMinimum) {\n                return {\n                    score: this._config.scores.bad,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to the keyphrase, %2$s expands to a link on yoast.com,\n                    %3$s expands to the anchor end tag. */\n                    i18n.dgettext(\"js-text-analysis\", \"The focus keyword '%1$s' does not appear in the %2$sSEO title%3$s.\"), this._keyword, this._config.url, \"</a>\")\n                };\n            }\n            if (matches >= this._config.parameters.recommendedMinimum && position === this._config.parameters.recommendedPosition) {\n                return {\n                    score: this._config.scores.good,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n                    i18n.dgettext(\"js-text-analysis\", \"The %1$sSEO title%2$s contains the focus keyword, at the beginning which is considered to improve rankings.\"), this._config.url, \"</a>\")\n                };\n            }\n            return {\n                score: this._config.scores.okay,\n                resultText: i18n.sprintf(\n                /* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */\n                i18n.dgettext(\"js-text-analysis\", \"The %1$sSEO title%2$s contains the focus keyword, but it does not appear at the beginning; \" + \"try and move it to the beginning.\"), this._config.url, \"</a>\")\n            };\n        }\n    }]);\n\n    return TitleKeywordAssessment;\n}(Assessment);\n\nexports.default = TitleKeywordAssessment;\n//# sourceMappingURL=TitleKeywordAssessment.js.map\n//# sourceMappingURL=TitleKeywordAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/TitleKeywordAssessment.js\n// module id = 1588\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/TitleKeywordAssessment.js?");

/***/ }),
/* 1589 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\n/**\n * Represents the URL keyword assessments. This assessments will check if the keyword is present in the url.\n */\n\nvar UrlKeywordAssessment = function (_Assessment) {\n    _inherits(UrlKeywordAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} config The configuration to use.\n     * @param {number} [config.scores.noKeywordInUrl] The score to return if the keyword is not in the URL.\n     * @param {number} [config.scores.good] The score to return if the keyword is in the URL.\n     * @param {string} [config.url] The URL to the relevant KB article.\n     *\n     * @returns {void}\n     */\n    function UrlKeywordAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, UrlKeywordAssessment);\n\n        var _this = _possibleConstructorReturn(this, (UrlKeywordAssessment.__proto__ || Object.getPrototypeOf(UrlKeywordAssessment)).call(this));\n\n        var defaultConfig = {\n            scores: {\n                noKeywordInUrl: 6,\n                good: 9\n            },\n            url: \"<a href='https://yoa.st/2pp' target='_blank'>\"\n        };\n        _this.identifier = \"urlKeyword\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Executes the Assessment and returns a result.\n     *\n     * @param {Paper} paper The Paper object to assess.\n     * @param {Researcher} researcher The Researcher object containing all available researches.\n     * @param {Jed} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n     */\n\n    _createClass(UrlKeywordAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this._totalKeywords = researcher.getResearch(\"keywordCountInUrl\");\n            var assessmentResult = new AssessmentResult();\n            var calculatedResult = this.calculateResult(i18n);\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            return assessmentResult;\n        }\n        /**\n         * Checks whether the paper has a keyword and a url.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is a keyword and an url.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasKeyword() && paper.hasUrl();\n        }\n        /**\n         * Determines the score and the result text based on whether or not there's a keyword in the url.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} The object with calculated score and resultText.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this._totalKeywords === 0) {\n                return {\n                    score: this._config.scores.noKeywordInUrl,\n                    resultText: i18n.sprintf(\n                    /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                    i18n.dgettext(\"js-text-analysis\", \"The focus keyword does not appear in the %1$sURL%2$s for this page. \" + \"If you decide to rename the URL be sure to check the old URL 301 redirects to the new one!\"), this._config.url, \"</a>\")\n                };\n            }\n            return {\n                score: this._config.scores.good,\n                resultText: i18n.sprintf(\n                /* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n                i18n.dgettext(\"js-text-analysis\", \"The focus keyword appears in the %1$sURL%2$s for this page.\"), this._config.url, \"</a>\")\n            };\n        }\n    }]);\n\n    return UrlKeywordAssessment;\n}(Assessment);\n\nexports.default = UrlKeywordAssessment;\n//# sourceMappingURL=UrlKeywordAssessment.js.map\n//# sourceMappingURL=UrlKeywordAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/UrlKeywordAssessment.js\n// module id = 1589\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/UrlKeywordAssessment.js?");

/***/ }),
/* 1590 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = __webpack_require__(79);\nvar IntroductionKeywordAssessment_1 = __webpack_require__(1579);\nvar KeyphraseLengthAssessment_1 = __webpack_require__(1580);\nvar KeywordDensityAssessment_1 = __webpack_require__(1581);\nvar MetaDescriptionKeywordAssessment_1 = __webpack_require__(1582);\nvar TextCompetingLinksAssessment_1 = __webpack_require__(1585);\nvar InternalLinksAssessment_1 = __webpack_require__(1578);\nvar TitleKeywordAssessment_1 = __webpack_require__(1588);\nvar UrlKeywordAssessment_1 = __webpack_require__(1589);\nvar Assessor = __webpack_require__(1086);\nvar keywordStopWords = __webpack_require__(1259);\nvar MetaDescriptionLength = __webpack_require__(1260);\nvar SubheadingsKeyword = __webpack_require__(1584);\nvar TextImages = __webpack_require__(1586);\nvar TextLength = __webpack_require__(1587);\nvar OutboundLinks = __webpack_require__(1583);\nvar TitleWidth = __webpack_require__(1262);\nvar UrlLength = __webpack_require__(1263);\nvar urlStopWords = __webpack_require__(1264);\n/**\n * Creates the Assessor\n *\n * @param {object} i18n The i18n object used for translations.\n * @param {Object} options The options for this assessor.\n * @param {Object} options.marker The marker to pass the list of marks to.\n *\n * @constructor\n */\nvar SEOAssessor = function SEOAssessor(i18n, options) {\n  Assessor.call(this, i18n, options);\n  this._assessments = [new IntroductionKeywordAssessment_1.default(), new KeyphraseLengthAssessment_1.default(), new KeywordDensityAssessment_1.default(), keywordStopWords, new MetaDescriptionKeywordAssessment_1.default(), new MetaDescriptionLength(), new SubheadingsKeyword(), new TextCompetingLinksAssessment_1.default(), new TextImages(), new TextLength(), new OutboundLinks(), new TitleKeywordAssessment_1.default(), new InternalLinksAssessment_1.default(), new TitleWidth(), new UrlKeywordAssessment_1.default(), new UrlLength(), urlStopWords];\n};\nutil_1.inherits(SEOAssessor, Assessor);\nmodule.exports = SEOAssessor;\n//# sourceMappingURL=seoAssessor.js.map\n//# sourceMappingURL=seoAssessor.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/seoAssessor.js\n// module id = 1590\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/seoAssessor.js?");

/***/ }),
/* 1591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Assessor = __webpack_require__(1086);\nvar FleschReadingEase = __webpack_require__(1569);\nvar paragraphTooLong = __webpack_require__(1570);\nvar SentenceLengthInText = __webpack_require__(1574);\nvar SubheadingDistributionTooLong = __webpack_require__(1575);\nvar transitionWords = __webpack_require__(1577);\nvar passiveVoice = __webpack_require__(1572);\nvar sentenceBeginnings = __webpack_require__(1573);\nvar textPresence = __webpack_require__(1576);\nvar contentConfiguration = __webpack_require__(1615);\n/*\n    Temporarily disabled:\n\n    var wordComplexity = require( \"./assessments/wordComplexityAssessment.js\" );\n    var sentenceLengthInDescription = require( \"./assessments/sentenceLengthInDescriptionAssessment.js\" );\n */\nvar scoreToRating = __webpack_require__(1073);\nvar map = __webpack_require__(63);\nvar sum = __webpack_require__(1283);\n/**\n * Creates the Assessor\n *\n * @param {object} i18n The i18n object used for translations.\n * @param {Object} options The options for this assessor.\n * @param {Object} options.marker The marker to pass the list of marks to.\n * @param {string} options.locale The locale.\n *\n * @constructor\n */\nvar ContentAssessor = function ContentAssessor(i18n) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    Assessor.call(this, i18n, options);\n    var locale = options.hasOwnProperty(\"locale\") ? options.locale : \"en_US\";\n    this._assessments = [new FleschReadingEase(contentConfiguration(locale).fleschReading), new SubheadingDistributionTooLong(), paragraphTooLong, new SentenceLengthInText(contentConfiguration(locale).sentenceLength), transitionWords, passiveVoice, textPresence, sentenceBeginnings];\n};\n__webpack_require__(79).inherits(ContentAssessor, Assessor);\n/**\n * Calculates the weighted rating for languages that have all assessments based on a given rating.\n *\n * @param {number} rating The rating to be weighted.\n * @returns {number} The weighted rating.\n */\nContentAssessor.prototype.calculatePenaltyPointsFullSupport = function (rating) {\n    switch (rating) {\n        case \"bad\":\n            return 3;\n        case \"ok\":\n            return 2;\n        default:\n        case \"good\":\n            return 0;\n    }\n};\n/**\n * Calculates the weighted rating for languages that don't have all assessments based on a given rating.\n *\n * @param {number} rating The rating to be weighted.\n * @returns {number} The weighted rating.\n */\nContentAssessor.prototype.calculatePenaltyPointsPartialSupport = function (rating) {\n    switch (rating) {\n        case \"bad\":\n            return 4;\n        case \"ok\":\n            return 2;\n        default:\n        case \"good\":\n            return 0;\n    }\n};\n/**\n * Determines whether a language is fully supported. If a language supports 8 content assessments\n * it is fully supported\n *\n * @returns {boolean} True if fully supported.\n */\nContentAssessor.prototype._allAssessmentsSupported = function () {\n    var numberOfAssessments = 8;\n    var applicableAssessments = this.getApplicableAssessments();\n    return applicableAssessments.length === numberOfAssessments;\n};\n/**\n * Calculates the penalty points based on the assessment results.\n *\n * @returns {number} The total penalty points for the results.\n */\nContentAssessor.prototype.calculatePenaltyPoints = function () {\n    var results = this.getValidResults();\n    var penaltyPoints = map(results, function (result) {\n        var rating = scoreToRating(result.getScore());\n        if (this._allAssessmentsSupported()) {\n            return this.calculatePenaltyPointsFullSupport(rating);\n        }\n        return this.calculatePenaltyPointsPartialSupport(rating);\n    }.bind(this));\n    return sum(penaltyPoints);\n};\n/**\n * Rates the penalty points\n *\n * @param {number} totalPenaltyPoints The amount of penalty points.\n * @returns {number} The score based on the amount of penalty points.\n *\n * @private\n */\nContentAssessor.prototype._ratePenaltyPoints = function (totalPenaltyPoints) {\n    if (this.getValidResults().length === 1) {\n        // If we have only 1 result, we only have a \"no content\" result\n        return 30;\n    }\n    if (this._allAssessmentsSupported()) {\n        // Determine the total score based on the total penalty points.\n        if (totalPenaltyPoints > 6) {\n            // A red indicator.\n            return 30;\n        }\n        if (totalPenaltyPoints > 4) {\n            // An orange indicator.\n            return 60;\n        }\n    } else {\n        if (totalPenaltyPoints > 4) {\n            // A red indicator.\n            return 30;\n        }\n        if (totalPenaltyPoints > 2) {\n            // An orange indicator.\n            return 60;\n        }\n    }\n    // A green indicator.\n    return 90;\n};\n/**\n * Calculates the overall score based on the assessment results.\n *\n * @returns {number} The overall score.\n */\nContentAssessor.prototype.calculateOverallScore = function () {\n    var results = this.getValidResults();\n    // If you have no content, you have a red indicator.\n    if (results.length === 0) {\n        return 30;\n    }\n    var totalPenaltyPoints = this.calculatePenaltyPoints();\n    return this._ratePenaltyPoints(totalPenaltyPoints);\n};\nmodule.exports = ContentAssessor;\n//# sourceMappingURL=contentAssessor.js.map\n//# sourceMappingURL=contentAssessor.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/contentAssessor.js\n// module id = 1591\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/contentAssessor.js?");

/***/ }),
/* 1592 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = __webpack_require__(1279),\n    baseRest = __webpack_require__(402),\n    customDefaultsMerge = __webpack_require__(1806),\n    mergeWith = __webpack_require__(1807);\n\n/**\n * This method is like `_.defaults` except that it recursively assigns\n * default properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaults\n * @example\n *\n * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n * // => { 'a': { 'b': 2, 'c': 3 } }\n */\nvar defaultsDeep = baseRest(function(args) {\n  args.push(undefined, customDefaultsMerge);\n  return apply(mergeWith, undefined, args);\n});\n\nmodule.exports = defaultsDeep;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/defaultsDeep.js\n// module id = 1592\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/defaultsDeep.js?");

/***/ }),
/* 1593 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(96),\n    now = __webpack_require__(1829),\n    toNumber = __webpack_require__(1127);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/debounce.js\n// module id = 1593\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/debounce.js?");

/***/ }),
/* 1594 */,
/* 1595 */,
/* 1596 */,
/* 1597 */,
/* 1598 */,
/* 1599 */,
/* 1600 */,
/* 1601 */,
/* 1602 */,
/* 1603 */,
/* 1604 */,
/* 1605 */,
/* 1606 */,
/* 1607 */,
/* 1608 */,
/* 1609 */,
/* 1610 */,
/* 1611 */,
/* 1612 */,
/* 1613 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar filter = __webpack_require__(112);\nvar isSentenceTooLong = __webpack_require__(1571);\n/**\n * Checks for too long sentences.\n * @param {array} sentences The array with objects containing sentences and their lengths.\n * @param {number} recommendedValue The recommended maximum length of sentence.\n * @returns {array} The array with objects containing too long sentences and their lengths.\n */\nmodule.exports = function (sentences, recommendedValue) {\n    var tooLongSentences = filter(sentences, function (sentence) {\n        return isSentenceTooLong(recommendedValue, sentence.sentenceLength);\n    });\n    return tooLongSentences;\n};\n//# sourceMappingURL=checkForTooLongSentences.js.map\n//# sourceMappingURL=checkForTooLongSentences.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessmentHelpers/checkForTooLongSentences.js\n// module id = 1613\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessmentHelpers/checkForTooLongSentences.js?");

/***/ }),
/* 1614 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar merge = __webpack_require__(98);\nvar Assessment = __webpack_require__(107);\nvar AssessmentResult = __webpack_require__(51);\nvar countWords = __webpack_require__(185);\nvar topicCount = __webpack_require__(589);\nvar inRangeStartEndInclusive = __webpack_require__(395).inRangeStartEndInclusive;\n/**\n * Returns a score based on the largest percentage of text in\n * which no keyword occurs.\n */\n\nvar LargestKeywordDistanceAssessment = function (_Assessment) {\n    _inherits(LargestKeywordDistanceAssessment, _Assessment);\n\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {Object} [config] The configuration to use.\n     * @param {number} [config.parameters.overRecommendedMaximumKeywordDistance]\n     *      The percentage of the text that is already way too high to be allowed to be in between two keyword occurrences.\n     * @param {number} [config.parameters.recommendedMaximumKeywordDistance]\n     *      The percentage of the text that is maximally allowed to be in between two keyword occurrences.\n     * @param {number} [config.scores.good] The score to return if there is not too much text between keyword occurrences.\n     * @param {number} [config.scores.okay] The score to return if there is somewhat much text between keyword occurrences.\n     * @param {number} [config.scores.bad] The score to return if there is way too much text between keyword occurrences.\n     * @param {string} [config.url] The URL to the relevant KB article.\n     *\n     * @returns {void}\n     */\n    function LargestKeywordDistanceAssessment() {\n        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, LargestKeywordDistanceAssessment);\n\n        var _this = _possibleConstructorReturn(this, (LargestKeywordDistanceAssessment.__proto__ || Object.getPrototypeOf(LargestKeywordDistanceAssessment)).call(this));\n\n        var defaultConfig = {\n            parameters: {\n                overRecommendedMaximumKeywordDistance: 50,\n                recommendedMaximumKeywordDistance: 40\n            },\n            scores: {\n                good: 9,\n                okay: 6,\n                bad: 1,\n                consideration: 0\n            },\n            url: \"<a href='https://yoa.st/2w7' target='_blank'>\"\n        };\n        _this.identifier = \"largestKeywordDistance\";\n        _this._config = merge(defaultConfig, config);\n        return _this;\n    }\n    /**\n     * Runs the largestKeywordDistance research and based on this returns an assessment result.\n     *\n     * @param {Paper}      paper      The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {Jed}        i18n       The object used for translations.\n     *\n     * @returns {AssessmentResult} The assessment result.\n     */\n\n    _createClass(LargestKeywordDistanceAssessment, [{\n        key: \"getResult\",\n        value: function getResult(paper, researcher, i18n) {\n            this._largestKeywordDistance = researcher.getResearch(\"largestKeywordDistance\");\n            this._hasSynonyms = paper.hasSynonyms();\n            this._topicUsed = topicCount(paper).count;\n            var assessmentResult = new AssessmentResult();\n            var calculatedResult = this.calculateResult(i18n);\n            assessmentResult.setScore(calculatedResult.score);\n            assessmentResult.setText(calculatedResult.resultText);\n            assessmentResult.setHasMarks(calculatedResult.score > 0);\n            return assessmentResult;\n        }\n        /**\n         * Calculates the result based on the largestKeywordDistance research.\n         *\n         * @param {Jed} i18n The object used for translations.\n         *\n         * @returns {Object} Object with score and feedback text.\n         */\n\n    }, {\n        key: \"calculateResult\",\n        value: function calculateResult(i18n) {\n            if (this._topicUsed < 2) {\n                return {\n                    score: this._config.scores.consideration,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link to a Yoast.com article about keyword and topic distribution,\n                    %2$s expands to the anchor end tag */\n                    i18n.dgettext(\"js-text-analysis\", \"Use your keyword or synonyms more often in your text so that we can check %1$skeyword distribution%2$s.\"), this._config.url, \"</a>\")\n                };\n            }\n            if (this._largestKeywordDistance > this._config.parameters.overRecommendedMaximumKeywordDistance) {\n                return {\n                    score: this._config.scores.bad,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link to a Yoast.com article about keyword and topic distribution,\n                    %2$s expands to the anchor end tag */\n                    i18n.dngettext(\"js-text-analysis\", \"Large parts of your text do not contain the keyword. Try to %1$sdistribute%2$s the keyword more evenly.\", \"Large parts of your text do not contain the keyword or its synonyms. Try to %1$sdistribute%2$s them more evenly.\", this._hasSynonyms + 1), this._config.url, \"</a>\")\n                };\n            }\n            if (inRangeStartEndInclusive(this._largestKeywordDistance, this._config.parameters.recommendedMaximumKeywordDistance, this._config.parameters.overRecommendedMaximumKeywordDistance)) {\n                return {\n                    score: this._config.scores.okay,\n                    resultText: i18n.sprintf(\n                    /* Translators: %1$s expands to a link to a Yoast.com article about keyword and topic distribution,\n                    %2$s expands to the anchor end tag */\n                    i18n.dngettext(\"js-text-analysis\", \"Some parts of your text do not contain the keyword. Try to %1$sdistribute%2$s the keyword more evenly.\", \"Some parts of your text do not contain the keyword or its synonyms. Try to %1$sdistribute%2$s them more evenly.\", this._hasSynonyms + 1), this._config.url, \"</a>\")\n                };\n            }\n            return {\n                score: this._config.scores.good,\n                resultText: i18n.sprintf(\n                /* Translators: %1$s expands to a link to a Yoast.com article about keyword and topic distribution,\n                %2$s expands to the anchor end tag */\n                i18n.dngettext(\"js-text-analysis\", \"Your keyword is %1$sdistributed%2$s evenly throughout the text. That's great.\", \"Your keyword and its synonyms are %1$sdistributed%2$s evenly throughout the text. That's great.\", this._hasSynonyms + 1), this._config.url, \"</a>\")\n            };\n        }\n        /**\n         * Creates a marker for the keyword.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {Array} All markers for the current text.\n         */\n\n    }, {\n        key: \"getMarks\",\n        value: function getMarks(paper) {\n            return topicCount(paper).markings;\n        }\n        /**\n         * Checks whether the paper has a text with at least 200 words and a keyword.\n         *\n         * @param {Paper} paper The paper to use for the assessment.\n         *\n         * @returns {boolean} True when there is a keyword and a text with 200 words or more.\n         */\n\n    }, {\n        key: \"isApplicable\",\n        value: function isApplicable(paper) {\n            return paper.hasText() && paper.hasKeyword() && countWords(paper.getText()) >= 200;\n        }\n    }]);\n\n    return LargestKeywordDistanceAssessment;\n}(Assessment);\n\nexports.default = LargestKeywordDistanceAssessment;\n//# sourceMappingURL=LargestKeywordDistanceAssessment.js.map\n//# sourceMappingURL=LargestKeywordDistanceAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/LargestKeywordDistanceAssessment.js\n// module id = 1614\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/seo/LargestKeywordDistanceAssessment.js?");

/***/ }),
/* 1615 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaultsDeep = __webpack_require__(1592);\nvar getLanguage = __webpack_require__(186);\nvar defaultConfig = __webpack_require__(1808);\nvar it = __webpack_require__(1809);\nvar ru = __webpack_require__(1810);\nvar configurations = {\n    it: it,\n    ru: ru\n};\nmodule.exports = function (locale) {\n    var language = getLanguage(locale);\n    if (configurations.hasOwnProperty(language)) {\n        return defaultsDeep(configurations[language], defaultConfig);\n    }\n    return defaultConfig;\n};\n//# sourceMappingURL=combinedConfig.js.map\n//# sourceMappingURL=combinedConfig.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/combinedConfig.js\n// module id = 1615\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/combinedConfig.js?");

/***/ }),
/* 1616 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isEmpty = __webpack_require__(97);\nvar isElement = __webpack_require__(1812);\nvar isUndefined = __webpack_require__(66);\nvar clone = __webpack_require__(1813);\nvar defaultsDeep = __webpack_require__(1592);\nvar forEach = __webpack_require__(32);\nvar debounce = __webpack_require__(1593);\nvar createWordRegex = __webpack_require__(1282);\nvar stripHTMLTags = __webpack_require__(167).stripFullTags;\nvar stripSpaces = __webpack_require__(84);\nvar replaceDiacritics = __webpack_require__(1232);\nvar transliterate = __webpack_require__(1215);\nvar templates = __webpack_require__(1618);\nvar snippetEditorTemplate = templates.snippetEditor;\nvar hiddenElement = templates.hiddenSpan;\nvar SnippetPreviewToggler = __webpack_require__(1830);\nvar domManipulation = __webpack_require__(1619);\nvar config_1 = __webpack_require__(1261);\nvar defaults = {\n    data: {\n        title: \"\",\n        metaDesc: \"\",\n        urlPath: \"\",\n        titleWidth: 0,\n        metaHeight: 0\n    },\n    placeholder: {\n        title: \"This is an example title - edit by clicking here\",\n        metaDesc: \"Modify your meta description by editing it right here\",\n        urlPath: \"example-post/\"\n    },\n    defaultValue: {\n        title: \"\",\n        metaDesc: \"\"\n    },\n    baseURL: \"http://example.com/\",\n    callbacks: {\n        saveSnippetData: function saveSnippetData() {}\n    },\n    addTrailingSlash: true,\n    metaDescriptionDate: \"\",\n    previewMode: \"desktop\"\n};\nvar titleMaxLength = 600;\nvar maximumMetaDescriptionLength = config_1.default.maxMeta;\nvar inputPreviewBindings = [{\n    preview: \"title_container\",\n    inputField: \"title\"\n}, {\n    preview: \"url_container\",\n    inputField: \"urlPath\"\n}, {\n    preview: \"meta_container\",\n    inputField: \"metaDesc\"\n}];\n/**\n * Get's the base URL for this instance of the Snippet Preview.\n *\n * @private\n * @this SnippetPreview\n *\n * @returns {string} The base URL.\n */\nvar getBaseURL = function getBaseURL() {\n    var baseURL = this.opts.baseURL;\n    /*\n     * For backwards compatibility, if no URL was passed to the snippet editor we try to retrieve the base URL from the\n     * rawData in the App. This is because the scrapers used to be responsible for retrieving the baseURL, but the base\n     * URL is static so we can just pass it to the snippet editor.\n     */\n    if (this.hasApp() && !isEmpty(this.refObj.rawData.baseUrl) && this.opts.baseURL === defaults.baseURL) {\n        baseURL = this.refObj.rawData.baseUrl;\n    }\n    return baseURL;\n};\n/**\n * Retrieves unformatted text from the data object\n *\n * @private\n * @this SnippetPreview\n *\n * @param {string} key The key to retrieve.\n *\n * @returns {string} The unformatted text.\n */\nfunction retrieveUnformattedText(key) {\n    return this.data[key];\n}\n/**\n * Update data and DOM objects when the unformatted text is updated, here for backwards compatibility\n *\n * @private\n * @this SnippetPreview\n *\n * @param {string} key The data key to update.\n * @param {string} value The value to update.\n *\n * @returns {void}\n */\nfunction updateUnformattedText(key, value) {\n    this.element.input[key].value = value;\n    this.data[key] = value;\n}\n/**\n * Returns if a url has a trailing slash or not.\n *\n * @param {string} url The url to check for a trailing slash.\n *\n * @returns {boolean} Whether or not the url contains a trailing slash.\n */\nfunction hasTrailingSlash(url) {\n    return url.indexOf(\"/\") === url.length - 1;\n}\n/**\n * Detects if this browser has <progress> support. Also serves as a poor man's HTML5shiv.\n *\n * @private\n *\n * @returns {boolean} Whether or not the browser supports a <progress> element\n */\nfunction hasProgressSupport() {\n    var progressElement = document.createElement(\"progress\");\n    return !isUndefined(progressElement.max);\n}\n/**\n * Returns a rating based on the length of the title\n *\n * @param {number} titleLength the length of the title.\n *\n * @returns {string} The rating given based on the title length.\n */\nfunction rateTitleLength(titleLength) {\n    var rating;\n    switch (true) {\n        case titleLength > 0 && titleLength <= 399:\n        case titleLength > 600:\n            rating = \"ok\";\n            break;\n        case titleLength >= 400 && titleLength <= 600:\n            rating = \"good\";\n            break;\n        default:\n            rating = \"bad\";\n            break;\n    }\n    return rating;\n}\n/**\n * Returns a rating based on the length of the meta description\n *\n * @param {number} metaDescLength the length of the meta description.\n *\n * @returns {string} The rating given based on the description length.\n */\nfunction rateMetaDescLength(metaDescLength) {\n    var rating;\n    switch (true) {\n        case metaDescLength > 0 && metaDescLength < 120:\n        case metaDescLength > maximumMetaDescriptionLength:\n            rating = \"ok\";\n            break;\n        case metaDescLength >= 120 && metaDescLength <= maximumMetaDescriptionLength:\n            rating = \"good\";\n            break;\n        default:\n            rating = \"bad\";\n            break;\n    }\n    return rating;\n}\n/**\n * Updates a progress bar\n *\n * @private\n * @this SnippetPreview\n *\n * @param {HTMLElement} element The progress element that's rendered.\n * @param {number} value The current value.\n * @param {number} maximum The maximum allowed value.\n * @param {string} rating The SEO score rating for this value.\n *\n * @returns {void}\n */\nfunction updateProgressBar(element, value, maximum, rating) {\n    var barElement,\n        progress,\n        allClasses = [\"snippet-editor__progress--bad\", \"snippet-editor__progress--ok\", \"snippet-editor__progress--good\"];\n    element.value = value;\n    domManipulation.removeClasses(element, allClasses);\n    domManipulation.addClass(element, \"snippet-editor__progress--\" + rating);\n    if (!this.hasProgressSupport) {\n        barElement = element.getElementsByClassName(\"snippet-editor__progress-bar\")[0];\n        progress = value / maximum * 100;\n        barElement.style.width = progress + \"%\";\n    }\n}\n/**\n * @module snippetPreview\n */\n/**\n * Defines the config and outputTarget for the SnippetPreview\n *\n * @param {Object}         opts                           - Snippet preview options.\n * @param {App}            opts.analyzerApp               - The app object the Snippet Preview is part of.\n * @param {Object}         opts.placeholder               - The placeholder values for the fields, will be shown as\n * actual placeholders in the inputs and as a fallback for the preview.\n * @param {string}         opts.placeholder.title         - The placeholder title.\n * @param {string}         opts.placeholder.metaDesc      - The placeholder meta description.\n * @param {string}         opts.placeholder.urlPath       - The placeholder url.\n *\n * @param {Object}         opts.defaultValue              - The default value for the fields, if the user has not\n * changed a field, this value will be used for the analyzer, preview and the progress bars.\n * @param {string}         opts.defaultValue.title        - The default title.\n * @param {string}         opts.defaultValue.metaDesc     - The default meta description.\n * it.\n *\n * @param {string}         opts.baseURL                   - The basic URL as it will be displayed in google.\n * @param {HTMLElement}    opts.targetElement             - The target element that contains this snippet editor.\n *\n * @param {Object}         opts.callbacks                 - Functions that are called on specific instances.\n * @param {Function}       opts.callbacks.saveSnippetData - Function called when the snippet data is changed.\n *\n * @param {boolean}        opts.addTrailingSlash          - Whether or not to add a trailing slash to the URL.\n * @param {string}         opts.metaDescriptionDate       - The date to display before the meta description.\n *\n * @param {Jed}            opts.i18n                      - The translation object.\n *\n * @param {string}         opts.previewMode               - The current preview mode.\n *\n * @property {App}         refObj                         - The connected app object.\n * @property {Jed}         i18n                           - The translation object.\n *\n * @property {HTMLElement} targetElement                  - The target element that contains this snippet editor.\n *\n * @property {Object}      element                        - The elements for this snippet editor.\n * @property {Object}      element.rendered               - The rendered elements.\n * @property {HTMLElement} element.rendered.title         - The rendered title element.\n * @property {HTMLElement} element.rendered.urlPath       - The rendered url path element.\n * @property {HTMLElement} element.rendered.urlBase       - The rendered url base element.\n * @property {HTMLElement} element.rendered.metaDesc      - The rendered meta description element.\n *\n * @property {HTMLElement} element.measurers.titleWidth   - The rendered title width element.\n * @property {HTMLElement} element.measurers.metaHeight   - The rendered meta height element.\n *\n * @property {Object}      element.input                  - The input elements.\n * @property {HTMLElement} element.input.title            - The title input element.\n * @property {HTMLElement} element.input.urlPath          - The url path input element.\n * @property {HTMLElement} element.input.metaDesc         - The meta description input element.\n *\n * @property {HTMLElement} element.container              - The main container element.\n * @property {HTMLElement} element.formContainer          - The form container element.\n * @property {HTMLElement} element.editToggle             - The button that toggles the editor form.\n *\n * @property {Object}      data                           - The data for this snippet editor.\n * @property {string}      data.title                     - The title.\n * @property {string}      data.urlPath                   - The url path.\n * @property {string}      data.metaDesc                  - The meta description.\n * @property {int}         data.titleWidth                - The width of the title in pixels.\n * @property {int}         data.metaHeight                - The height of the meta description in pixels.\n *\n * @property {string}      baseURL                        - The basic URL as it will be displayed in google.\n *\n * @property {boolean}     hasProgressSupport             - Whether this browser supports the <progress> element.\n *\n * @constructor\n */\nvar SnippetPreview = function SnippetPreview(opts) {\n    defaultsDeep(opts, defaults);\n    this.data = opts.data;\n    if (!isUndefined(opts.analyzerApp)) {\n        this.refObj = opts.analyzerApp;\n        this.i18n = this.refObj.i18n;\n        this.data = {\n            title: this.refObj.rawData.snippetTitle || \"\",\n            urlPath: this.refObj.rawData.snippetCite || \"\",\n            metaDesc: this.refObj.rawData.snippetMeta || \"\"\n        };\n        // For backwards compatibility set the metaTitle as placeholder.\n        if (!isEmpty(this.refObj.rawData.metaTitle)) {\n            opts.placeholder.title = this.refObj.rawData.metaTitle;\n        }\n    }\n    if (!isUndefined(opts.i18n)) {\n        this.i18n = opts.i18n;\n    }\n    if (!isElement(opts.targetElement)) {\n        throw new Error(\"The snippet preview requires a valid target element\");\n    }\n    this.opts = opts;\n    this._currentFocus = null;\n    this._currentHover = null;\n    // For backwards compatibility monitor the unformatted text for changes and reflect them in the preview\n    this.unformattedText = {};\n    Object.defineProperty(this.unformattedText, \"snippet_cite\", {\n        get: retrieveUnformattedText.bind(this, \"urlPath\"),\n        set: updateUnformattedText.bind(this, \"urlPath\")\n    });\n    Object.defineProperty(this.unformattedText, \"snippet_meta\", {\n        get: retrieveUnformattedText.bind(this, \"metaDesc\"),\n        set: updateUnformattedText.bind(this, \"metaDesc\")\n    });\n    Object.defineProperty(this.unformattedText, \"snippet_title\", {\n        get: retrieveUnformattedText.bind(this, \"title\"),\n        set: updateUnformattedText.bind(this, \"title\")\n    });\n};\n/**\n * Renders snippet editor and adds it to the targetElement\n * @returns {void}\n */\nSnippetPreview.prototype.renderTemplate = function () {\n    var targetElement = this.opts.targetElement;\n    targetElement.innerHTML = snippetEditorTemplate({\n        raw: {\n            title: this.data.title,\n            snippetCite: this.data.urlPath,\n            meta: this.data.metaDesc\n        },\n        rendered: {\n            title: this.formatTitle(),\n            baseUrl: this.formatUrl(),\n            snippetCite: this.formatCite(),\n            meta: this.formatMeta()\n        },\n        metaDescriptionDate: this.opts.metaDescriptionDate,\n        placeholder: this.opts.placeholder,\n        i18n: {\n            edit: this.i18n.dgettext(\"js-text-analysis\", \"Edit snippet\"),\n            title: this.i18n.dgettext(\"js-text-analysis\", \"SEO title\"),\n            slug: this.i18n.dgettext(\"js-text-analysis\", \"Slug\"),\n            metaDescription: this.i18n.dgettext(\"js-text-analysis\", \"Meta description\"),\n            save: this.i18n.dgettext(\"js-text-analysis\", \"Close snippet editor\"),\n            snippetPreview: this.i18n.dgettext(\"js-text-analysis\", \"Snippet preview\"),\n            titleLabel: this.i18n.dgettext(\"js-text-analysis\", \"SEO title preview:\"),\n            slugLabel: this.i18n.dgettext(\"js-text-analysis\", \"Slug preview:\"),\n            metaDescriptionLabel: this.i18n.dgettext(\"js-text-analysis\", \"Meta description preview:\"),\n            snippetPreviewDescription: this.i18n.dgettext(\"js-text-analysis\", \"You can click on each element in the preview to jump to the Snippet Editor.\"),\n            desktopPreviewMode: this.i18n.dgettext(\"js-text-analysis\", \"Desktop preview\"),\n            mobilePreviewMode: this.i18n.dgettext(\"js-text-analysis\", \"Mobile preview\"),\n            isScrollableHint: this.i18n.dgettext(\"js-text-analysis\", \"Scroll to see the preview content.\")\n        }\n    });\n    this.element = {\n        measurers: {\n            metaHeight: null\n        },\n        rendered: {\n            title: document.getElementById(\"snippet_title\"),\n            urlBase: document.getElementById(\"snippet_citeBase\"),\n            urlPath: document.getElementById(\"snippet_cite\"),\n            metaDesc: document.getElementById(\"snippet_meta\")\n        },\n        input: {\n            title: targetElement.getElementsByClassName(\"js-snippet-editor-title\")[0],\n            urlPath: targetElement.getElementsByClassName(\"js-snippet-editor-slug\")[0],\n            metaDesc: targetElement.getElementsByClassName(\"js-snippet-editor-meta-description\")[0]\n        },\n        progress: {\n            title: targetElement.getElementsByClassName(\"snippet-editor__progress-title\")[0],\n            metaDesc: targetElement.getElementsByClassName(\"snippet-editor__progress-meta-description\")[0]\n        },\n        container: document.getElementById(\"snippet_preview\"),\n        formContainer: targetElement.getElementsByClassName(\"snippet-editor__form\")[0],\n        editToggle: targetElement.getElementsByClassName(\"snippet-editor__edit-button\")[0],\n        closeEditor: targetElement.getElementsByClassName(\"snippet-editor__submit\")[0],\n        formFields: targetElement.getElementsByClassName(\"snippet-editor__form-field\")\n    };\n    this.element.label = {\n        title: this.element.input.title.parentNode,\n        urlPath: this.element.input.urlPath.parentNode,\n        metaDesc: this.element.input.metaDesc.parentNode\n    };\n    this.element.preview = {\n        title: this.element.rendered.title.parentNode,\n        urlPath: this.element.rendered.urlPath.parentNode,\n        metaDesc: this.element.rendered.metaDesc.parentNode\n    };\n    this.hasProgressSupport = hasProgressSupport();\n    if (this.hasProgressSupport) {\n        this.element.progress.title.max = titleMaxLength;\n        this.element.progress.metaDesc.max = maximumMetaDescriptionLength;\n    } else {\n        forEach(this.element.progress, function (progressElement) {\n            domManipulation.addClass(progressElement, \"snippet-editor__progress--fallback\");\n        });\n    }\n    this.initPreviewToggler();\n    this.setInitialView();\n    this.opened = false;\n    this.createMeasurementElements();\n    this.updateProgressBars();\n};\n/**\n * Initializes the Snippet Preview Toggler.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.initPreviewToggler = function () {\n    this.snippetPreviewToggle = new SnippetPreviewToggler(this.opts.previewMode, this.opts.targetElement.getElementsByClassName(\"snippet-editor__view-icon\"));\n    this.snippetPreviewToggle.initialize();\n    this.snippetPreviewToggle.bindEvents();\n};\n/**\n * Refreshes the snippet editor rendered HTML\n * @returns {void}\n */\nSnippetPreview.prototype.refresh = function () {\n    this.output = this.htmlOutput();\n    this.renderOutput();\n    this.renderSnippetStyle();\n    this.measureTitle();\n    this.measureMetaDescription();\n    this.updateProgressBars();\n};\n/**\n * Returns the title as meant for the analyzer\n *\n * @private\n * @this SnippetPreview\n *\n * @returns {string} The title that is meant for the analyzer.\n */\nfunction getAnalyzerTitle() {\n    var title = this.data.title;\n    if (isEmpty(title)) {\n        title = this.opts.defaultValue.title;\n    }\n    if (this.hasPluggable()) {\n        title = this.refObj.pluggable._applyModifications(\"data_page_title\", title);\n    }\n    return stripSpaces(title);\n}\n/**\n * Returns the metaDescription, includes the date if it is set.\n *\n * @private\n * @this SnippetPreview\n *\n * @returns {string} The meta data for the analyzer.\n */\nvar getAnalyzerMetaDesc = function getAnalyzerMetaDesc() {\n    var metaDesc = this.data.metaDesc;\n    if (isEmpty(metaDesc)) {\n        metaDesc = this.opts.defaultValue.metaDesc;\n    }\n    if (this.hasPluggable()) {\n        metaDesc = this.refObj.pluggable._applyModifications(\"data_meta_desc\", metaDesc);\n    }\n    if (!isEmpty(this.opts.metaDescriptionDate) && !isEmpty(metaDesc)) {\n        metaDesc = this.opts.metaDescriptionDate + \" - \" + this.data.metaDesc;\n    }\n    return stripSpaces(metaDesc);\n};\n/**\n * Returns the data from the Snippet Preview.\n *\n * @returns {Object} The collected data for the analyzer.\n */\nSnippetPreview.prototype.getAnalyzerData = function () {\n    return {\n        title: getAnalyzerTitle.call(this),\n        url: this.data.urlPath,\n        metaDesc: getAnalyzerMetaDesc.call(this)\n    };\n};\n/**\n * Calls the event binder that has been registered using the callbacks option in the arguments of the App.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.callRegisteredEventBinder = function () {\n    if (this.hasApp()) {\n        this.refObj.callbacks.bindElementEvents(this.refObj);\n    }\n};\n/**\n *  Checks if title and url are set so they can be rendered in the Snippet Preview.\n *\n *  @returns {void}\n */\nSnippetPreview.prototype.init = function () {\n    if (this.hasApp() && this.refObj.rawData.metaTitle !== null && this.refObj.rawData.cite !== null) {\n        this.refresh();\n    }\n};\n/**\n * Creates html object to contain the strings for the Snippet Preview.\n *\n * @returns {Object} The HTML output of the collected data.\n */\nSnippetPreview.prototype.htmlOutput = function () {\n    var html = {};\n    html.title = this.formatTitle();\n    html.cite = this.formatCite();\n    html.meta = this.formatMeta();\n    html.url = this.formatUrl();\n    return html;\n};\n/**\n * Formats the title for the Snippet Preview. If title and pageTitle are empty, sampletext is used.\n *\n * @returns {string} The correctly formatted title.\n */\nSnippetPreview.prototype.formatTitle = function () {\n    var title = this.data.title;\n    // Fallback to the default if the title is empty.\n    if (isEmpty(title)) {\n        title = this.opts.defaultValue.title;\n    }\n    // For rendering we can fallback to the placeholder as well.\n    if (isEmpty(title)) {\n        title = this.opts.placeholder.title;\n    }\n    // Apply modification to the title before showing it.\n    if (this.hasPluggable() && this.refObj.pluggable.loaded) {\n        title = this.refObj.pluggable._applyModifications(\"data_page_title\", title);\n    }\n    title = stripHTMLTags(title);\n    // As an ultimate fallback provide the user with a helpful message.\n    if (isEmpty(title)) {\n        title = this.i18n.dgettext(\"js-text-analysis\", \"Please provide an SEO title by editing the snippet below.\");\n    }\n    return title;\n};\n/**\n * Formats the base url for the Snippet Preview. Removes the protocol name from the URL.\n *\n * @returns {string} Formatted base url for the Snippet Preview.\n */\nSnippetPreview.prototype.formatUrl = function () {\n    var url = getBaseURL.call(this);\n    // Removes the http part of the url, google displays https:// if the website supports it.\n    return url.replace(/http:\\/\\//ig, \"\");\n};\n/**\n * Formats the url for the Snippet Preview.\n *\n * @returns {string} Formatted URL for the Snippet Preview.\n */\nSnippetPreview.prototype.formatCite = function () {\n    var cite = this.data.urlPath;\n    cite = replaceDiacritics(stripHTMLTags(cite));\n    // Fallback to the default if the cite is empty.\n    if (isEmpty(cite)) {\n        cite = this.opts.placeholder.urlPath;\n    }\n    if (this.hasApp() && !isEmpty(this.refObj.rawData.keyword)) {\n        cite = this.formatKeywordUrl(cite);\n    }\n    if (this.opts.addTrailingSlash && !hasTrailingSlash(cite)) {\n        cite = cite + \"/\";\n    }\n    // URL's cannot contain whitespace so replace it by dashes.\n    cite = cite.replace(/\\s/g, \"-\");\n    // Strip out question mark and hash characters from the raw URL.\n    cite = cite.replace(/\\?|#/g, \"\");\n    return cite;\n};\n/**\n * Formats the meta description for the Snippet Preview, if it's empty retrieves it using getMetaText.\n *\n * @returns {string} Formatted meta description.\n */\nSnippetPreview.prototype.formatMeta = function () {\n    var meta = this.data.metaDesc;\n    // If no meta has been set, generate one.\n    if (isEmpty(meta)) {\n        meta = this.getMetaText();\n    }\n    // Apply modification to the desc before showing it.\n    if (this.hasPluggable() && this.refObj.pluggable.loaded) {\n        meta = this.refObj.pluggable._applyModifications(\"data_meta_desc\", meta);\n    }\n    meta = stripHTMLTags(meta);\n    // Cut-off the meta description according to the maximum length\n    meta = meta.substring(0, maximumMetaDescriptionLength);\n    if (this.hasApp() && !isEmpty(this.refObj.rawData.keyword)) {\n        meta = this.formatKeyword(meta);\n    }\n    // As an ultimate fallback provide the user with a helpful message.\n    if (isEmpty(meta)) {\n        meta = this.i18n.dgettext(\"js-text-analysis\", \"Please provide a meta description by editing the snippet below.\");\n    }\n    return meta;\n};\n/**\n * Generates a meta description with an educated guess based on the passed text and excerpt.\n * It uses the keyword to select an appropriate part of the text. If the keyword isn't present it takes the maximum\n * meta description length of the text. If both the keyword, text and excerpt are empty this function returns the\n * sample text.\n *\n * @returns {string} A generated meta description.\n */\nSnippetPreview.prototype.getMetaText = function () {\n    var metaText = this.opts.defaultValue.metaDesc;\n    if (this.hasApp() && !isUndefined(this.refObj.rawData.excerpt) && isEmpty(metaText)) {\n        metaText = this.refObj.rawData.excerpt;\n    }\n    if (this.hasApp() && !isUndefined(this.refObj.rawData.text) && isEmpty(metaText)) {\n        metaText = this.refObj.rawData.text;\n        if (this.hasPluggable() && this.refObj.pluggable.loaded) {\n            metaText = this.refObj.pluggable._applyModifications(\"content\", metaText);\n        }\n    }\n    metaText = stripHTMLTags(metaText);\n    return metaText.substring(0, maximumMetaDescriptionLength);\n};\n/**\n * Builds an array with all indexes of the keyword.\n *\n * @returns {Array} Array with matches\n */\nSnippetPreview.prototype.getIndexMatches = function () {\n    var indexMatches = [];\n    var i = 0;\n    // Starts at 0, locates first match of the keyword.\n    var match = this.refObj.rawData.text.indexOf(this.refObj.rawData.keyword, i);\n    // Runs the loop untill no more indexes are found, and match returns -1.\n    while (match > -1) {\n        indexMatches.push(match);\n        // Pushes location to indexMatches and increase i with the length of keyword.\n        i = match + this.refObj.rawData.keyword.length;\n        match = this.refObj.rawData.text.indexOf(this.refObj.rawData.keyword, i);\n    }\n    return indexMatches;\n};\n/**\n * Builds an array with indexes of all sentence ends (select on .).\n *\n * @returns {Array} Array with sentences.\n */\nSnippetPreview.prototype.getPeriodMatches = function () {\n    var periodMatches = [0];\n    var match;\n    var i = 0;\n    while ((match = this.refObj.rawData.text.indexOf(\".\", i)) > -1) {\n        periodMatches.push(match);\n        i = match + 1;\n    }\n    return periodMatches;\n};\n/**\n * Formats the keyword for use in the snippetPreview by adding <strong>-tags\n * strips unwanted characters that could break the regex or give unwanted results.\n *\n * @param {string} textString The keyword string that needs to be formatted.\n *\n * @returns {string} The formatted keyword.\n */\nSnippetPreview.prototype.formatKeyword = function (textString) {\n    // Removes characters from the keyword that could break the regex, or give unwanted results.\n    var keyword = this.refObj.rawData.keyword;\n    // Match keyword case-insensitively.\n    var keywordRegex = createWordRegex(keyword, \"\", false);\n    textString = textString.replace(keywordRegex, function (str) {\n        return \"<strong>\" + str + \"</strong>\";\n    });\n    // Transliterate the keyword for highlighting\n    var transliterateKeyword = transliterate(keyword, this.refObj.rawData.locale);\n    if (transliterateKeyword !== keyword) {\n        keywordRegex = createWordRegex(transliterateKeyword, \"\", false);\n        textString = textString.replace(keywordRegex, function (str) {\n            return \"<strong>\" + str + \"</strong>\";\n        });\n    }\n    return textString;\n};\n/**\n * Formats the keyword for use in the URL by accepting - and _ instead of spaces and by adding <strong>-tags.\n * Strips unwanted characters that could break the regex or give unwanted results.\n *\n * @param {string} textString The keyword string that needs to be formatted.\n *\n * @returns {XML|string|void} The formatted keyword string to be used in the URL.\n */\nSnippetPreview.prototype.formatKeywordUrl = function (textString) {\n    var keyword = this.refObj.rawData.keyword;\n    keyword = transliterate(keyword, this.refObj.rawData.locale);\n    keyword = keyword.replace(/'/, \"\");\n    var dashedKeyword = keyword.replace(/\\s/g, \"-\");\n    // Match keyword case-insensitively.\n    var keywordRegex = createWordRegex(dashedKeyword, \"\\\\-\");\n    // Make the keyword bold in the textString.\n    return textString.replace(keywordRegex, function (str) {\n        return \"<strong>\" + str + \"</strong>\";\n    });\n};\n/**\n * Renders the outputs to the elements on the page.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.renderOutput = function () {\n    this.element.rendered.title.innerHTML = this.output.title;\n    this.element.rendered.urlPath.innerHTML = this.output.cite;\n    this.element.rendered.urlBase.innerHTML = this.output.url;\n    this.element.rendered.metaDesc.innerHTML = this.output.meta;\n};\n/**\n * Makes the rendered meta description gray if no meta description has been set by the user.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.renderSnippetStyle = function () {\n    var metaDescElement = this.element.rendered.metaDesc;\n    var metaDesc = getAnalyzerMetaDesc.call(this);\n    if (isEmpty(metaDesc)) {\n        domManipulation.addClass(metaDescElement, \"desc-render\");\n        domManipulation.removeClass(metaDescElement, \"desc-default\");\n    } else {\n        domManipulation.addClass(metaDescElement, \"desc-default\");\n        domManipulation.removeClass(metaDescElement, \"desc-render\");\n    }\n};\n/**\n * Function to call init, to rerender the Snippet Preview.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.reRender = function () {\n    this.init();\n};\n/**\n * Checks text length of the snippetmeta and snippet title, shortens it if it is too long.\n * @param {Object} event The event to check the text length from.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.checkTextLength = function (event) {\n    var text = event.currentTarget.textContent;\n    switch (event.currentTarget.id) {\n        case \"snippet_meta\":\n            event.currentTarget.className = \"desc\";\n            if (text.length > maximumMetaDescriptionLength) {\n                /* eslint-disable */\n                YoastSEO.app.snippetPreview.unformattedText.snippet_meta = event.currentTarget.textContent;\n                /* eslint-enable */\n                event.currentTarget.textContent = text.substring(0, maximumMetaDescriptionLength);\n            }\n            break;\n        case \"snippet_title\":\n            event.currentTarget.className = \"title\";\n            if (text.length > titleMaxLength) {\n                /* eslint-disable */\n                YoastSEO.app.snippetPreview.unformattedText.snippet_title = event.currentTarget.textContent;\n                /* eslint-enable */\n                event.currentTarget.textContent = text.substring(0, titleMaxLength);\n            }\n            break;\n        default:\n            break;\n    }\n};\n/**\n * Get the unformatted text.\n *\n * When clicking on an element in the Snippet Preview, this checks and fills the textContent with the data from the\n * unformatted text. This removes the keyword highlighting and modified data so the original content can be editted.\n *\n * @param {Object} event The event to get the unformatted text from.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.getUnformattedText = function (event) {\n    var currentElement = event.currentTarget.id;\n    if (typeof this.unformattedText[currentElement] !== \"undefined\") {\n        event.currentTarget.textContent = this.unformattedText[currentElement];\n    }\n};\n/**\n * Sets the unformatted text.\n *\n * When text is entered into the snippetPreview elements, the text is set in the unformattedText object.\n * This allows the visible data to be editted in the snippetPreview.\n *\n * @param {Object} event The event to set the unformatted text from.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setUnformattedText = function (event) {\n    var elem = event.currentTarget.id;\n    this.unformattedText[elem] = document.getElementById(elem).textContent;\n};\n/**\n * Validates all fields and highlights errors.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.validateFields = function () {\n    var metaDescription = getAnalyzerMetaDesc.call(this);\n    var title = getAnalyzerTitle.call(this);\n    if (metaDescription.length > maximumMetaDescriptionLength) {\n        domManipulation.addClass(this.element.input.metaDesc, \"snippet-editor__field--invalid\");\n    } else {\n        domManipulation.removeClass(this.element.input.metaDesc, \"snippet-editor__field--invalid\");\n    }\n    if (title.length > titleMaxLength) {\n        domManipulation.addClass(this.element.input.title, \"snippet-editor__field--invalid\");\n    } else {\n        domManipulation.removeClass(this.element.input.title, \"snippet-editor__field--invalid\");\n    }\n};\n/**\n * Updates progress bars based on the available data.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.updateProgressBars = function () {\n    var metaDescriptionRating, titleRating, metaDescription;\n    metaDescription = getAnalyzerMetaDesc.call(this);\n    titleRating = rateTitleLength(this.data.titleWidth);\n    metaDescriptionRating = rateMetaDescLength(metaDescription.length);\n    updateProgressBar.call(this, this.element.progress.title, this.data.titleWidth, titleMaxLength, titleRating);\n    updateProgressBar.call(this, this.element.progress.metaDesc, metaDescription.length, maximumMetaDescriptionLength, metaDescriptionRating);\n};\n/**\n * Gets the width of the Snippet Preview to set its initial view to desktop or mobile.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setInitialView = function () {\n    var previewWidth = document.getElementById(\"snippet_preview\").getBoundingClientRect().width;\n    this.snippetPreviewToggle.setVisibility(previewWidth);\n};\n/**\n * When the window is resized, gets the width of the Snippet Preview to set the Scroll Hint visibility.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.handleWindowResizing = debounce(function () {\n    var previewWidth = document.getElementById(\"snippet_preview\").getBoundingClientRect().width;\n    this.snippetPreviewToggle.setScrollHintVisibility(previewWidth);\n}, 25);\n/**\n * Binds the reloadSnippetText function to the blur of the snippet inputs.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.bindEvents = function () {\n    var targetElement,\n        elems = [\"title\", \"slug\", \"meta-description\"];\n    forEach(elems, function (elem) {\n        targetElement = document.getElementsByClassName(\"js-snippet-editor-\" + elem)[0];\n        targetElement.addEventListener(\"keydown\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"keyup\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"input\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"focus\", this.changedInput.bind(this));\n        targetElement.addEventListener(\"blur\", this.changedInput.bind(this));\n    }.bind(this));\n    this.element.editToggle.addEventListener(\"click\", this.toggleEditor.bind(this));\n    this.element.closeEditor.addEventListener(\"click\", this.closeEditor.bind(this));\n    // Note: `handleWindowResizing` is called also in Yoast SEO when the WP admin menu state changes.\n    window.addEventListener(\"resize\", this.handleWindowResizing.bind(this));\n    // Loop through the bindings and bind a click handler to the click to focus the focus element.\n    forEach(inputPreviewBindings, function (binding) {\n        var previewElement = document.getElementById(binding.preview);\n        var inputElement = this.element.input[binding.inputField];\n        // Make the preview element click open the editor and focus the correct input.\n        previewElement.addEventListener(\"click\", function () {\n            this.openEditor();\n            inputElement.focus();\n        }.bind(this));\n        // Make focusing an input, update the carets.\n        inputElement.addEventListener(\"focus\", function () {\n            this._currentFocus = binding.inputField;\n            this._updateFocusCarets();\n        }.bind(this));\n        // Make removing focus from an element, update the carets.\n        inputElement.addEventListener(\"blur\", function () {\n            this._currentFocus = null;\n            this._updateFocusCarets();\n        }.bind(this));\n        previewElement.addEventListener(\"mouseover\", function () {\n            this._currentHover = binding.inputField;\n            this._updateHoverCarets();\n        }.bind(this));\n        previewElement.addEventListener(\"mouseout\", function () {\n            this._currentHover = null;\n            this._updateHoverCarets();\n        }.bind(this));\n    }.bind(this));\n};\n/**\n * Updates Snippet Preview on changed input. It's debounced so that we can call this function as much as we want.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.changedInput = debounce(function () {\n    this.updateDataFromDOM();\n    this.validateFields();\n    this.updateProgressBars();\n    this.refresh();\n    if (this.hasApp()) {\n        this.refObj.refresh();\n    }\n}, 25);\n/**\n * Updates our data object from the DOM.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.updateDataFromDOM = function () {\n    this.data.title = this.element.input.title.value;\n    this.data.urlPath = this.element.input.urlPath.value;\n    this.data.metaDesc = this.element.input.metaDesc.value;\n    // Clone so the data isn't changeable.\n    this.opts.callbacks.saveSnippetData(clone(this.data));\n};\n/**\n * Opens the snippet editor.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.openEditor = function () {\n    this.element.editToggle.setAttribute(\"aria-expanded\", \"true\");\n    // Show these elements.\n    domManipulation.removeClass(this.element.formContainer, \"snippet-editor--hidden\");\n    this.opened = true;\n};\n/**\n * Closes the snippet editor.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.closeEditor = function () {\n    // Hide these elements.\n    domManipulation.addClass(this.element.formContainer, \"snippet-editor--hidden\");\n    this.element.editToggle.setAttribute(\"aria-expanded\", \"false\");\n    this.element.editToggle.focus();\n    this.opened = false;\n};\n/**\n * Toggles the snippet editor.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.toggleEditor = function () {\n    if (this.opened) {\n        this.closeEditor();\n    } else {\n        this.openEditor();\n    }\n};\n/**\n * Updates carets before the preview and input fields.\n *\n * @private\n *\n * @returns {void}\n */\nSnippetPreview.prototype._updateFocusCarets = function () {\n    var focusedLabel, focusedPreview;\n    // Disable all carets on the labels.\n    forEach(this.element.label, function (element) {\n        domManipulation.removeClass(element, \"snippet-editor__label--focus\");\n    });\n    // Disable all carets on the previews.\n    forEach(this.element.preview, function (element) {\n        domManipulation.removeClass(element, \"snippet-editor__container--focus\");\n    });\n    if (null !== this._currentFocus) {\n        focusedLabel = this.element.label[this._currentFocus];\n        focusedPreview = this.element.preview[this._currentFocus];\n        domManipulation.addClass(focusedLabel, \"snippet-editor__label--focus\");\n        domManipulation.addClass(focusedPreview, \"snippet-editor__container--focus\");\n    }\n};\n/**\n * Updates hover carets before the input fields.\n *\n * @private\n *\n * @returns {void}\n */\nSnippetPreview.prototype._updateHoverCarets = function () {\n    var hoveredLabel;\n    forEach(this.element.label, function (element) {\n        domManipulation.removeClass(element, \"snippet-editor__label--hover\");\n    });\n    if (null !== this._currentHover) {\n        hoveredLabel = this.element.label[this._currentHover];\n        domManipulation.addClass(hoveredLabel, \"snippet-editor__label--hover\");\n    }\n};\n/**\n * Updates the title data and the title input field. This also means the snippet editor view is updated.\n *\n * @param {string} title The title to use in the input field.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setTitle = function (title) {\n    this.element.input.title.value = title;\n    this.changedInput();\n};\n/**\n * Updates the url path data and the url path input field. This also means the snippet editor view is updated.\n *\n * @param {string} urlPath the URL path to use in the input field.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setUrlPath = function (urlPath) {\n    this.element.input.urlPath.value = urlPath;\n    this.changedInput();\n};\n/**\n * Updates the meta description data and the meta description input field. This also means the snippet editor view is updated.\n *\n * @param {string} metaDesc the meta description to use in the input field.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setMetaDescription = function (metaDesc) {\n    this.element.input.metaDesc.value = metaDesc;\n    this.changedInput();\n};\n/**\n * Creates elements with the purpose to calculate the sizes of elements and puts these elements to the body.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.createMeasurementElements = function () {\n    var metaDescriptionElement, spanHolder;\n    metaDescriptionElement = hiddenElement({\n        width: document.getElementById(\"meta_container\").offsetWidth + \"px\",\n        whiteSpace: \"\"\n    });\n    spanHolder = document.createElement(\"div\");\n    spanHolder.className = \"yoast-measurement-elements-holder\";\n    spanHolder.innerHTML = metaDescriptionElement;\n    document.body.appendChild(spanHolder);\n    this.element.measurers.metaHeight = spanHolder.childNodes[0];\n};\n/**\n * Copies the title text to the title measure element to calculate the width in pixels.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.measureTitle = function () {\n    if (this.element.rendered.title.offsetWidth !== 0 || this.element.rendered.title.textContent === \"\") {\n        this.data.titleWidth = this.element.rendered.title.offsetWidth;\n    }\n};\n/**\n * Copies the metadescription text to the metadescription measure element to calculate the height in pixels.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.measureMetaDescription = function () {\n    var metaHeightElement = this.element.measurers.metaHeight;\n    metaHeightElement.innerHTML = this.element.rendered.metaDesc.innerHTML;\n    this.data.metaHeight = metaHeightElement.offsetHeight;\n};\n/**\n * Returns the width of the title in pixels.\n *\n * @returns {Number} The width of the title in pixels.\n */\nSnippetPreview.prototype.getTitleWidth = function () {\n    return this.data.titleWidth;\n};\n/**\n * Allows to manually set the title width.\n *\n * This may be useful in setups where the title field will not always be rendered.\n *\n * @param {Number} titleWidth The width of the title in pixels.\n *\n * @returns {void}\n */\nSnippetPreview.prototype.setTitleWidth = function (titleWidth) {\n    this.data.titleWidth = titleWidth;\n};\n/**\n * Returns whether or not an app object is present.\n *\n * @returns {boolean} Whether or not there is an App object present.\n */\nSnippetPreview.prototype.hasApp = function () {\n    return !isUndefined(this.refObj);\n};\n/**\n * Returns whether or not a pluggable object is present.\n *\n * @returns {boolean} Whether or not there is a Pluggable object present.\n */\nSnippetPreview.prototype.hasPluggable = function () {\n    return !isUndefined(this.refObj) && !isUndefined(this.refObj.pluggable);\n};\n/* eslint-disable */\n/**\n * Disables Enter as input.\n *\n * Used to disable enter as input. Returns false to prevent enter, and preventDefault and\n * cancelBubble to prevent other elements from capturing this event.\n *\n * @deprecated\n *\n * @param {KeyboardEvent} ev The keyboard event.\n */\nSnippetPreview.prototype.disableEnter = function (ev) {};\n/**\n * Adds and removes the tooLong class when a text is too long.\n *\n * @deprecated\n * @param ev The event.\n */\nSnippetPreview.prototype.textFeedback = function (ev) {};\n/**\n * Shows the edit icon corresponding to the hovered element.\n *\n * @deprecated\n *\n * @param ev The event.\n */\nSnippetPreview.prototype.showEditIcon = function (ev) {};\n/**\n * Removes all editIcon-classes, sets to snippet_container.\n *\n * @deprecated\n */\nSnippetPreview.prototype.hideEditIcon = function () {};\n/**\n * Sets focus on child element of the snippet_container that is clicked. Hides the editicon.\n *\n * @deprecated\n *\n * @param ev The event.\n */\nSnippetPreview.prototype.setFocus = function (ev) {};\n/* eslint-disable */\nmodule.exports = SnippetPreview;\n//# sourceMappingURL=snippetPreview.js.map\n//# sourceMappingURL=snippetPreview.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/snippetPreview.js\n// module id = 1616\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/snippetPreview.js?");

/***/ }),
/* 1617 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayPush = __webpack_require__(1121),\n    getPrototype = __webpack_require__(1123),\n    getSymbols = __webpack_require__(1195),\n    stubArray = __webpack_require__(1271);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getSymbolsIn.js\n// module id = 1617\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getSymbolsIn.js?");

/***/ }),
/* 1618 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, module) {\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\n/* eslint-disable */\n;(function () {\n  var undefined;\n\n  var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;\n\n  var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;\n\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;\n\n  var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.4';\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0;\n\n  /** `Object#toString` result references. */\n  var nullTag = '[object Null]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]';\n\n  /** Used to match HTML entities and HTML characters. */\n  var reUnescapedHtml = /[&<>\"']/g,\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function (key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /*--------------------------------------------------------------------------*/\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString = objectProto.toString;\n\n  /** Built-in value references. */\n  var _Symbol = root.Symbol,\n      symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n  /** Used to lookup unminified function names. */\n  var realNames = {};\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = _Symbol ? _Symbol.prototype : undefined,\n      symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag),\n        tag = value[symToStringTag];\n\n    try {\n      value[symToStringTag] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag] = tag;\n      } else {\n        delete value[symToStringTag];\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n\n  /*------------------------------------------------------------------------*/\n\n  /**\n   * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n   * corresponding HTML entities.\n   *\n   * **Note:** No other characters are escaped. To escape additional\n   * characters use a third-party library like [_he_](https://mths.be/he).\n   *\n   * Though the \">\" character is escaped for symmetry, characters like\n   * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n   * unless they're part of a tag or unquoted attribute value. See\n   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n   * (under \"semi-related fun fact\") for more details.\n   *\n   * When working with HTML you should always\n   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n   * XSS vectors.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category String\n   * @param {string} [string=''] The string to escape.\n   * @returns {string} Returns the escaped string.\n   * @example\n   *\n   * _.escape('fred, barney, & pebbles');\n   * // => 'fred, barney, &amp; pebbles'\n   */\n  function escape(string) {\n    string = toString(string);\n    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n  }\n\n  var _ = { 'escape': escape };\n\n  /*----------------------------------------------------------------------------*/\n\n  var templates = {\n    'assessmentPresenterResult': {},\n    'hiddenSpan': {},\n    'relevantWords': {},\n    'snippetEditor': {}\n  };\n\n  templates['assessmentPresenterResult'] = function (obj) {\n    obj || (obj = {});\n    var _obj = obj,\n        scores = _obj.scores,\n        markerButtonsDisabled = _obj.markerButtonsDisabled,\n        i18n = _obj.i18n,\n        activeMarker = _obj.activeMarker;\n\n    var __t,\n        __p = '',\n        __e = _.escape,\n        __j = Array.prototype.join;\n    function print() {\n      __p += __j.call(arguments, '');\n    }\n    __p += '<ul class=\"wpseoanalysis assessment-results\">\\n    ';\n    for (var i in scores) {\n      __p += '\\n        <li class=\"score\">\\n            <span class=\"assessment-results__mark-container\">\\n                ';\n      if (scores[i].marker) {\n        __p += '\\n                    <button type=\"button\" ';\n        if (markerButtonsDisabled) {\n          __p += ' disabled=\"disabled\" ';\n        }\n        __p += '\\n                        aria-label=\"';\n        if (markerButtonsDisabled) {\n          __p += (__t = i18n.disabledMarkText) == null ? '' : __t;\n        } else if (scores[i].identifier === activeMarker) {\n          __p += (__t = i18n.removeMarksInText) == null ? '' : __t;\n        } else {\n          __p += (__t = i18n.markInText) == null ? '' : __t;\n        }\n        __p += '\"\\n                        class=\"assessment-results__mark ';\n\n        if (markerButtonsDisabled) {\n          __p += ' icon-eye-disabled ';\n        } else if (scores[i].identifier === activeMarker) {\n          __p += '\\n                            icon-eye-active\\n                        ';\n        } else {\n          __p += '\\n                            icon-eye-inactive\\n                        ';\n        }\n        __p += '\\n                        js-assessment-results__mark-' + ((__t = scores[i].identifier) == null ? '' : __t) + ' yoast-tooltip yoast-tooltip-s\">\\n                        <span class=\"screen-reader-text\">';\n        if (markerButtonsDisabled) {\n          __p += (__t = i18n.disabledMarkText) == null ? '' : __t;\n        } else if (scores[i].identifier === activeMarker) {\n          __p += (__t = i18n.removeMarksInText) == null ? '' : __t;\n        } else {\n          __p += (__t = i18n.markInText) == null ? '' : __t;\n        }\n        __p += '\\n                        </span></button>\\n                ';\n      }\n      __p += '\\n            </span>\\n            <span class=\"wpseo-score-icon ' + __e(scores[i].className) + '\"></span>\\n            <span class=\"screen-reader-text\">' + ((__t = scores[i].screenReaderText) == null ? '' : __t) + '</span>\\n            <span class=\"wpseo-score-text\">' + ((__t = scores[i].text) == null ? '' : __t) + '</span>\\n        </li>\\n    ';\n    }\n    __p += '\\n</ul>\\n';\n    return __p;\n  };\n\n  templates['hiddenSpan'] = function (obj) {\n    obj || (obj = {});\n    var _obj2 = obj,\n        whiteSpace = _obj2.whiteSpace,\n        width = _obj2.width;\n\n    var __t,\n        __p = '',\n        __e = _.escape,\n        __j = Array.prototype.join;\n    function print() {\n      __p += __j.call(arguments, '');\n    }\n    __p += '<span aria-hidden=\"true\" style=\"width: ' + __e(width) + '; height: auto; position: absolute; visibility: hidden; ';\n    if (\"\" !== whiteSpace) {\n      __p += 'white-space: ' + __e(whiteSpace);\n    }\n    __p += '\">\\n\\n</span>\\n';\n    return __p;\n  };\n\n  templates['relevantWords'] = function (obj) {\n    obj || (obj = {});\n    var _obj3 = obj,\n        words = _obj3.words;\n\n    var __t,\n        __p = '',\n        __j = Array.prototype.join;\n    function print() {\n      __p += __j.call(arguments, '');\n    }\n    __p += '<table>\\n    <tr>\\n        <th>Word</th>\\n        <th>Density</th>\\n        <th>Occurrences</th>\\n        <th>Length</th>\\n        <th>Relevant word percentage</th>\\n        <th>Length bonus</th>\\n        <th>Multiplier</th>\\n        <th>Relevance</th>\\n    </tr>\\n    ';\n    for (var i in words) {\n      __p += '\\n        <tr>\\n            <td>' + ((__t = words[i].word) == null ? '' : __t) + '</td>\\n            <td>' + ((__t = words[i].density) == null ? '' : __t) + '</td>\\n            <td>' + ((__t = words[i].occurrences) == null ? '' : __t) + '</td>\\n            <td>' + ((__t = words[i].length) == null ? '' : __t) + '</td>\\n            <td>' + ((__t = words[i].relevantWordPercentage) == null ? '' : __t) + '</td>\\n            <td>' + ((__t = words[i].lengthBonus) == null ? '' : __t) + '</td>\\n            <td>' + ((__t = words[i].multiplier) == null ? '' : __t) + '</td>\\n            <td>' + ((__t = words[i].relevance) == null ? '' : __t) + '</td>\\n        </tr>\\n    ';\n    }\n    __p += '\\n</table>\\n';\n    return __p;\n  };\n\n  templates['snippetEditor'] = function (obj) {\n    obj || (obj = {});\n    var _obj4 = obj,\n        i18n = _obj4.i18n,\n        rendered = _obj4.rendered,\n        metaDescriptionDate = _obj4.metaDescriptionDate,\n        raw = _obj4.raw,\n        placeholder = _obj4.placeholder;\n\n    var __t,\n        __p = '',\n        __e = _.escape,\n        __j = Array.prototype.join;\n    function print() {\n      __p += __j.call(arguments, '');\n    }\n    __p += '<div id=\"snippet_preview\" class=\"yoast-section\">\\n\t<section class=\"snippet-editor__preview\">\\n\t\t<h3 class=\"snippet-editor__heading snippet-editor__heading-icon snippet-editor__heading-icon-eye\">' + __e(i18n.snippetPreview) + '</h3>\\n\t<p class=\"screen-reader-text\">' + __e(i18n.snippetPreviewDescription) + '</p>\\n\\n\t\t<div id=\"snippet-preview-view\" class=\"snippet-editor__view\">\\n\t\t\t<div class=\"snippet_container snippet_container__title snippet-editor__container\" id=\"title_container\">\\n\t\t\t\t<span class=\"screen-reader-text\">' + __e(i18n.titleLabel) + '</span>\\n\t\t\t\t<span class=\"title\" id=\"render_title_container\">\\n\t\t\t\t\t<span id=\"snippet_title\">\\n\t\t\t\t\t\t' + __e(rendered.title) + '\\n\t\t\t\t\t</span>\\n\t\t\t\t</span>\\n\t\t\t\t<span class=\"title\" id=\"snippet_sitename\"></span>\\n\t\t\t</div>\\n\t\t\t<div class=\"snippet_container snippet_container__url snippet-editor__container\" id=\"url_container\">\\n\t\t\t\t<span class=\"screen-reader-text\">' + __e(i18n.slugLabel) + '</span>\\n\t\t\t\t<span class=\"urlFull\">\\n\t\t\t\t\t<cite class=\"url urlBase\" id=\"snippet_citeBase\">\\n\t\t\t\t\t\t' + __e(rendered.baseUrl) + '\\n\t\t\t\t\t</cite><cite class=\"url\" id=\"snippet_cite\">\\n\t\t\t\t\t\t' + __e(rendered.snippetCite) + '\\n\t\t\t\t\t</cite>\\n\t\t\t\t</span><span class=\"down_arrow\"></span>\\n\t\t\t</div>\\n\t\t\t<div class=\"snippet_container snippet_container__meta snippet-editor__container\" id=\"meta_container\">\\n\t\t\t\t<span class=\"screen-reader-text\">' + __e(i18n.metaDescriptionLabel) + '</span>\\n\t\t\t\t';\n    if (\"\" !== metaDescriptionDate) {\n      __p += '\\n\t\t\t\t\t<span class=\"snippet-editor__date\">\\n\t\t\t\t\t\t' + __e(metaDescriptionDate) + ' -\\n\t\t\t\t\t</span>\\n\t\t\t\t';\n    }\n    __p += '\\n\t\t\t\t<span class=\"desc\" id=\"snippet_meta\">\\n\t\t\t\t\t' + __e(rendered.meta) + '\\n\t\t\t\t</span>\\n\t\t\t</div>\\n\t\t</div>\\n\\n\t\t<div class=\"snippet-editor__is-scrollable-hintwrapper\">\\n\t\t\t<span class=\\'snippet-editor__is-scrollable-hint\\' aria-hidden=\\'true\\'>' + __e(i18n.isScrollableHint) + '</span>\\n\t\t</div>\\n\\n\t\t<div class=\"snippet-editor__view-toggle\">\\n\t\t\t<button class=\"snippet-editor__view-icon snippet-editor__view-icon-mobile yoast-tooltip yoast-tooltip-se\" type=\"button\" data-type=\"mobile\" aria-label=\"' + __e(i18n.mobilePreviewMode) + '\" />\\n\t\t\t<button class=\"snippet-editor__view-icon snippet-editor__view-icon-desktop yoast-tooltip yoast-tooltip-se\" type=\"button\" data-type=\"desktop\" aria-label=\"' + __e(i18n.desktopPreviewMode) + '\" />\\n\t\t</div>\\n\t\t<button class=\"snippet-editor__button snippet-editor__edit-button\" type=\"button\" aria-expanded=\"false\">\\n\t\t\t' + __e(i18n.edit) + '\\n\t\t</button>\\n\t</section>\\n\\n\t<div class=\"snippet-editor__form snippet-editor--hidden\">\\n\t\t<label for=\"snippet-editor-title\" class=\"snippet-editor__label\">\\n\t\t\t' + __e(i18n.title) + '\\n\t\t\t<input type=\"text\" class=\"snippet-editor__input snippet-editor__title js-snippet-editor-title\" id=\"snippet-editor-title\" value=\"' + __e(raw.title) + '\" placeholder=\"' + __e(placeholder.title) + '\" />\\n\t\t</label>\\n\t\t<progress value=\"0.0\" class=\"snippet-editor__progress snippet-editor__progress-title\" aria-hidden=\"true\">\\n\t\t\t<div class=\"snippet-editor__progress-bar\"></div>\\n\t\t</progress>\\n\t\t<label for=\"snippet-editor-slug\" class=\"snippet-editor__label\">\\n\t\t\t' + __e(i18n.slug) + '\\n\t\t\t<input type=\"text\" class=\"snippet-editor__input snippet-editor__slug js-snippet-editor-slug\" id=\"snippet-editor-slug\" value=\"' + __e(raw.snippetCite) + '\" placeholder=\"' + __e(placeholder.urlPath) + '\" />\\n\t\t</label>\\n\t\t<label for=\"snippet-editor-meta-description\" class=\"snippet-editor__label\">\\n\t\t\t' + __e(i18n.metaDescription) + '\\n\t\t\t<textarea class=\"snippet-editor__input snippet-editor__meta-description js-snippet-editor-meta-description\" id=\"snippet-editor-meta-description\" placeholder=\"' + __e(placeholder.metaDesc) + '\">' + __e(raw.meta) + '</textarea>\\n\t\t</label>\\n\t\t<progress value=\"0.0\" class=\"snippet-editor__progress snippet-editor__progress-meta-description\" aria-hidden=\"true\">\\n\t\t\t<div class=\"snippet-editor__progress-bar\"></div>\\n\t\t</progress>\\n\\n\t\t<button class=\"snippet-editor__submit snippet-editor__button\" type=\"button\">' + __e(i18n.save) + '</button>\\n\t</div>\\n</div>\\n';\n    return __p;\n  };\n\n  /*----------------------------------------------------------------------------*/\n\n  if (freeModule) {\n    (freeModule.exports = templates).templates = templates;\n    freeExports.templates = templates;\n  } else {\n    root.templates = templates;\n  }\n}).call(undefined);\n//# sourceMappingURL=templates.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(30)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/templates.js\n// module id = 1618\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/templates.js?");

/***/ }),
/* 1619 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar forEach = __webpack_require__(32);\n/**\n * Adds a class to an element\n *\n * @param {HTMLElement} element The element to add the class to.\n * @param {string} className The class to add.\n * @returns {void}\n */\nvar addClass = function addClass(element, className) {\n    var classes = element.className.split(\" \");\n    if (-1 === classes.indexOf(className)) {\n        classes.push(className);\n    }\n    element.className = classes.join(\" \");\n};\n/**\n * Removes a class from an element\n *\n * @param {HTMLElement} element The element to remove the class from.\n * @param {string} className The class to remove.\n * @returns {void}\n */\nvar removeClass = function removeClass(element, className) {\n    var classes = element.className.split(\" \");\n    var foundClass = classes.indexOf(className);\n    if (-1 !== foundClass) {\n        classes.splice(foundClass, 1);\n    }\n    element.className = classes.join(\" \");\n};\n/**\n * Removes multiple classes from an element\n *\n * @param {HTMLElement} element The element to remove the classes from.\n * @param {Array} classes A list of classes to remove\n * @returns {void}\n */\nvar removeClasses = function removeClasses(element, classes) {\n    forEach(classes, this.removeClass.bind(null, element));\n};\n/**\n * Checks whether an element has a specific class.\n *\n * @param {HTMLElement} element The element to check for the class.\n * @param {string} className The class to look for.\n * @returns {boolean} Whether or not the class is present.\n */\nvar hasClass = function hasClass(element, className) {\n    return element.className.indexOf(className) > -1;\n};\nmodule.exports = {\n    hasClass: hasClass,\n    addClass: addClass,\n    removeClass: removeClass,\n    removeClasses: removeClasses\n};\n//# sourceMappingURL=domManipulation.js.map\n//# sourceMappingURL=domManipulation.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/domManipulation.js\n// module id = 1619\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/domManipulation.js?");

/***/ }),
/* 1620 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {\n    return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n} : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);\n};\n\nvar isUndefined = __webpack_require__(66);\nvar forEach = __webpack_require__(32);\nvar reduce = __webpack_require__(1838);\nvar isString = __webpack_require__(1250);\nvar isObject = __webpack_require__(96);\nvar InvalidTypeError = __webpack_require__(1280);\n/**\n * The plugins object takes care of plugin registrations, preloading and managing data modifications.\n *\n * A plugin for YoastSEO.js is basically a piece of JavaScript that hooks into YoastSEO.js by registering modifications.\n * In order to do so, it must first register itself as a plugin with YoastSEO.js. To keep our content analysis fast, we\n * don't allow asynchronous modifications. That's why we require plugins to preload all data they need in order to modify\n * the content. If plugins need to preload data, they can first register, then preload using AJAX and call `ready` once\n * preloaded.\n *\n * To minimize client side memory usage, we request plugins to preload as little data as possible. If you need to dynamically\n * fetch more data in the process of content creation, you can reload your data set and let YoastSEO.js know you've reloaded\n * by calling `reloaded`.\n *\n * @todo: add list of supported modifications and compare on registration of modification\n */\n/**\n * Setup Pluggable and set its default values.\n *\n * @constructor\n * @param       {App}       app                 The App object to attach to.\n * @property    {number}    preloadThreshold\tThe maximum time plugins are allowed to preload before we load our content analysis.\n * @property    {object}    plugins             The plugins that have been registered.\n * @property    {object}    modifications \t    The modifications that have been registered. Every modification contains an array with callables.\n * @property    {Array}     customTests         All tests added by plugins.\n */\nvar Pluggable = function Pluggable(app) {\n    this.app = app;\n    this.loaded = false;\n    this.preloadThreshold = 3000;\n    this.plugins = {};\n    this.modifications = {};\n    this.customTests = [];\n    // Allow plugins 1500 ms to register before we start polling their\n    setTimeout(this._pollLoadingPlugins.bind(this), 1500);\n};\n//  ***** DSL IMPLEMENTATION ***** //\n/**\n * Register a plugin with YoastSEO. A plugin can be declared \"ready\" right at registration or later using `this.ready`.\n *\n * @param {string}  pluginName      The name of the plugin to be registered.\n * @param {object}  options         The options passed by the plugin.\n * @param {string}  options.status  The status of the plugin being registered. Can either be \"loading\" or \"ready\".\n * @returns {boolean}               Whether or not the plugin was successfully registered.\n */\nPluggable.prototype._registerPlugin = function (pluginName, options) {\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to register plugin. Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    if (!isUndefined(options) && (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n        console.error(\"Failed to register plugin \" + pluginName + \". Expected parameters `options` to be a object.\");\n        return false;\n    }\n    if (this._validateUniqueness(pluginName) === false) {\n        console.error(\"Failed to register plugin. Plugin with name \" + pluginName + \" already exists\");\n        return false;\n    }\n    this.plugins[pluginName] = options;\n    return true;\n};\n/**\n * Declare a plugin \"ready\". Use this if you need to preload data with AJAX.\n *\n * @param {string} pluginName\tThe name of the plugin to be declared as ready.\n * @returns {boolean}           Whether or not the plugin was successfully declared ready.\n */\nPluggable.prototype._ready = function (pluginName) {\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to modify status for plugin \" + pluginName + \". Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    if (isUndefined(this.plugins[pluginName])) {\n        console.error(\"Failed to modify status for plugin \" + pluginName + \". The plugin was not properly registered.\");\n        return false;\n    }\n    this.plugins[pluginName].status = \"ready\";\n    return true;\n};\n/**\n * Used to declare a plugin has been reloaded. If an analysis is currently running. We will reset it to ensure running the latest modifications.\n *\n * @param {string} pluginName   The name of the plugin to be declared as reloaded.\n * @returns {boolean}           Whether or not the plugin was successfully declared as reloaded.\n */\nPluggable.prototype._reloaded = function (pluginName) {\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to reload Content Analysis for \" + pluginName + \". Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    if (isUndefined(this.plugins[pluginName])) {\n        console.error(\"Failed to reload Content Analysis for plugin \" + pluginName + \". The plugin was not properly registered.\");\n        return false;\n    }\n    this.app.refresh();\n    return true;\n};\n/**\n * Enables hooking a callable to a specific data filter supported by YoastSEO. Can only be performed for plugins that have finished loading.\n *\n * @param {string}      modification\tThe name of the filter\n * @param {function}    callable \t    The callable\n * @param {string}      pluginName \t    The plugin that is registering the modification.\n * @param {number}      priority\t    (optional) Used to specify the order in which the callables associated with a particular filter are called.\n * \t\t\t\t\t\t\t\t\t    Lower numbers correspond with earlier execution.\n * @returns {boolean}                   Whether or not applying the hook was successfull.\n */\nPluggable.prototype._registerModification = function (modification, callable, pluginName, priority) {\n    if (typeof modification !== \"string\") {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". Expected parameter `modification` to be a string.\");\n        return false;\n    }\n    if (typeof callable !== \"function\") {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". Expected parameter `callable` to be a function.\");\n        return false;\n    }\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    // Validate origin\n    if (this._validateOrigin(pluginName) === false) {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". The integration has not finished loading yet.\");\n        return false;\n    }\n    // Default priority to 10\n    var prio = typeof priority === \"number\" ? priority : 10;\n    var callableObject = {\n        callable: callable,\n        origin: pluginName,\n        priority: prio\n    };\n    // Make sure modification is defined on modifications object\n    if (isUndefined(this.modifications[modification])) {\n        this.modifications[modification] = [];\n    }\n    this.modifications[modification].push(callableObject);\n    return true;\n};\n/**\n * Register test for a specific plugin\n *\n * @returns {void}\n *\n * @deprecated\n */\nPluggable.prototype._registerTest = function () {\n    console.error(\"This function is deprecated, please use _registerAssessment\");\n};\n/**\n * Register an assessment for a specific plugin\n *\n * @param {object} assessor The assessor object where the assessments needs to be added.\n * @param {string} name The name of the assessment.\n * @param {function} assessment The function to run as an assessment.\n * @param {string} pluginName The name of the plugin associated with the assessment.\n * @returns {boolean} Whether registering the assessment was successful.\n * @private\n */\nPluggable.prototype._registerAssessment = function (assessor, name, assessment, pluginName) {\n    if (!isString(name)) {\n        throw new InvalidTypeError(\"Failed to register test for plugin \" + pluginName + \". Expected parameter `name` to be a string.\");\n    }\n    if (!isObject(assessment)) {\n        throw new InvalidTypeError(\"Failed to register assessment for plugin \" + pluginName + \". Expected parameter `assessment` to be a function.\");\n    }\n    if (!isString(pluginName)) {\n        throw new InvalidTypeError(\"Failed to register assessment for plugin \" + pluginName + \". Expected parameter `pluginName` to be a string.\");\n    }\n    // Prefix the name with the pluginName so the test name is always unique.\n    name = pluginName + \"-\" + name;\n    assessor.addAssessment(name, assessment);\n    return true;\n};\n// ***** PRIVATE HANDLERS *****//\n/**\n * Poller to handle loading of plugins. Plugins can register with our app to let us know they are going to hook into our Javascript. They are allowed\n * 5 seconds of pre-loading time to fetch all the data they need to be able to perform their data modifications. We will only apply data modifications\n * from plugins that have declared ready within the pre-loading time in order to safeguard UX and data integrity.\n *\n * @param   {number} pollTime (optional) The accumulated time to compare with the pre-load threshold.\n * @returns {void}\n * @private\n */\nPluggable.prototype._pollLoadingPlugins = function (pollTime) {\n    pollTime = isUndefined(pollTime) ? 0 : pollTime;\n    if (this._allReady() === true) {\n        this.loaded = true;\n        this.app.pluginsLoaded();\n    } else if (pollTime >= this.preloadThreshold) {\n        this._pollTimeExceeded();\n    } else {\n        pollTime += 50;\n        setTimeout(this._pollLoadingPlugins.bind(this, pollTime), 50);\n    }\n};\n/**\n * Checks if all registered plugins have finished loading\n *\n * @returns {boolean} Whether or not all registered plugins are loaded.\n * @private\n */\nPluggable.prototype._allReady = function () {\n    return reduce(this.plugins, function (allReady, plugin) {\n        return allReady && plugin.status === \"ready\";\n    }, true);\n};\n/**\n * Removes the plugins that were not loaded within time and calls `pluginsLoaded` on the app.\n *\n * @returns {void}\n * @private\n */\nPluggable.prototype._pollTimeExceeded = function () {\n    forEach(this.plugins, function (plugin, pluginName) {\n        if (!isUndefined(plugin.options) && plugin.options.status !== \"ready\") {\n            console.error(\"Error: Plugin \" + pluginName + \". did not finish loading in time.\");\n            delete this.plugins[pluginName];\n        }\n    });\n    this.loaded = true;\n    this.app.pluginsLoaded();\n};\n/**\n * Calls the callables added to a modification hook. See the YoastSEO.js Readme for a list of supported modification hooks.\n *\n * @param\t{string}    modification\tThe name of the filter\n * @param   {*}         data \t\t    The data to filter\n * @param   {*}         context\t\t    (optional) Object for passing context parameters to the callable.\n * @returns {*} \t\t                The filtered data\n * @private\n */\nPluggable.prototype._applyModifications = function (modification, data, context) {\n    var callChain = this.modifications[modification];\n    if (callChain instanceof Array && callChain.length > 0) {\n        callChain = this._stripIllegalModifications(callChain);\n        callChain.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        forEach(callChain, function (callableObject) {\n            var callable = callableObject.callable;\n            var newData = callable(data, context);\n            if ((typeof newData === \"undefined\" ? \"undefined\" : _typeof(newData)) === (typeof data === \"undefined\" ? \"undefined\" : _typeof(data))) {\n                data = newData;\n            } else {\n                console.error(\"Modification with name \" + modification + \" performed by plugin with name \" + callableObject.origin + \" was ignored because the data that was returned by it was of a different type than the data we had passed it.\");\n            }\n        });\n    }\n    return data;\n};\n/**\n * Adds new tests to the analyzer and it's scoring object.\n *\n * @param {YoastSEO.Analyzer} analyzer The analyzer object to add the tests to\n * @returns {void}\n * @private\n */\nPluggable.prototype._addPluginTests = function (analyzer) {\n    this.customTests.map(function (customTest) {\n        this._addPluginTest(analyzer, customTest);\n    }, this);\n};\n/**\n * Adds one new test to the analyzer and it's scoring object.\n *\n * @param {YoastSEO.Analyzer} analyzer              The analyzer that the test will be added to.\n * @param {Object}            pluginTest            The test to be added.\n * @param {string}            pluginTest.name       The name of the test.\n * @param {function}          pluginTest.callable   The function associated with the test.\n * @param {function}          pluginTest.analysis   The function associated with the analyzer.\n * @param {Object}            pluginTest.scoring    The scoring object to be used.\n * @returns {void}\n * @private\n */\nPluggable.prototype._addPluginTest = function (analyzer, pluginTest) {\n    analyzer.addAnalysis({\n        name: pluginTest.name,\n        callable: pluginTest.analysis\n    });\n    analyzer.analyzeScorer.addScoring({\n        name: pluginTest.name,\n        scoring: pluginTest.scoring\n    });\n};\n/**\n * Strips modifications from a callChain if they were not added with a valid origin.\n *\n * @param   {Array} callChain\t The callChain that contains items with possible invalid origins.\n * @returns {Array} callChain \t The stripped version of the callChain.\n * @private\n */\nPluggable.prototype._stripIllegalModifications = function (callChain) {\n    forEach(callChain, function (callableObject, index) {\n        if (this._validateOrigin(callableObject.origin) === false) {\n            delete callChain[index];\n        }\n    }.bind(this));\n    return callChain;\n};\n/**\n * Validates if origin of a modification has been registered and finished preloading.\n *\n * @param \t{string}    pluginName      The name of the plugin that needs to be validated.\n * @returns {boolean}                   Whether or not the origin is valid.\n * @private\n */\nPluggable.prototype._validateOrigin = function (pluginName) {\n    if (this.plugins[pluginName].status !== \"ready\") {\n        return false;\n    }\n    return true;\n};\n/**\n * Validates if registered plugin has a unique name.\n *\n * @param \t{string}    pluginName      The name of the plugin that needs to be validated for uniqueness.\n * @returns {boolean}                   Whether or not the plugin has a unique name.\n * @private\n */\nPluggable.prototype._validateUniqueness = function (pluginName) {\n    if (!isUndefined(this.plugins[pluginName])) {\n        return false;\n    }\n    return true;\n};\nmodule.exports = Pluggable;\n//# sourceMappingURL=pluggable.js.map\n//# sourceMappingURL=pluggable.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/pluggable.js\n// module id = 1620\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/pluggable.js?");

/***/ }),
/* 1621 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaults = __webpack_require__(1128);\nvar isEmpty = __webpack_require__(97);\n/**\n * Default attributes to be used by the Paper if they are left undefined.\n * @type {{keyword: string, synonyms: string, description: string, title: string, url: string}}\n */\nvar defaultAttributes = {\n    keyword: \"\",\n    synonyms: \"\",\n    description: \"\",\n    title: \"\",\n    titleWidth: 0,\n    url: \"\",\n    locale: \"en_US\",\n    permalink: \"\"\n};\n/**\n * Construct the Paper object and set the keyword property.\n * @param {string} text The text to use in the analysis.\n * @param {object} attributes The object containing all attributes.\n * @constructor\n */\nvar Paper = function Paper(text, attributes) {\n    this._text = text || \"\";\n    attributes = attributes || {};\n    defaults(attributes, defaultAttributes);\n    if (attributes.locale === \"\") {\n        attributes.locale = defaultAttributes.locale;\n    }\n    var onlyLetters = attributes.keyword.replace(/[‘’“”\"'.?!:;,¿¡«»&*@#±^%|~`[\\](){}⟨⟩<>/\\\\–\\-\\u2014\\u00d7\\u002b\\u0026\\s]/g, \"\");\n    if (isEmpty(onlyLetters)) {\n        attributes.keyword = defaultAttributes.keyword;\n    }\n    this._attributes = attributes;\n};\n/**\n * Check whether a keyword is available.\n * @returns {boolean} Returns true if the Paper has a keyword.\n */\nPaper.prototype.hasKeyword = function () {\n    return this._attributes.keyword !== \"\";\n};\n/**\n * Return the associated keyword or an empty string if no keyword is available.\n * @returns {string} Returns Keyword\n */\nPaper.prototype.getKeyword = function () {\n    return this._attributes.keyword;\n};\n/**\n * Check whether synonyms is available.\n * @returns {boolean} Returns true if the Paper has synonyms.\n */\nPaper.prototype.hasSynonyms = function () {\n    return this._attributes.synonyms !== \"\";\n};\n/**\n * Return the associated synonyms or an empty string if no synonyms is available.\n * @returns {string} Returns synonyms.\n */\nPaper.prototype.getSynonyms = function () {\n    return this._attributes.synonyms;\n};\n/**\n * Check whether the text is available.\n * @returns {boolean} Returns true if the paper has a text.\n */\nPaper.prototype.hasText = function () {\n    return this._text !== \"\";\n};\n/**\n * Return the associated text or am empty string if no text is available.\n * @returns {string} Returns text\n */\nPaper.prototype.getText = function () {\n    return this._text;\n};\n/**\n * Check whether a description is available.\n * @returns {boolean} Returns true if the paper has a description.\n */\nPaper.prototype.hasDescription = function () {\n    return this._attributes.description !== \"\";\n};\n/**\n * Return the description or an empty string if no description is available.\n * @returns {string} Returns the description.\n */\nPaper.prototype.getDescription = function () {\n    return this._attributes.description;\n};\n/**\n * Check whether an title is available\n * @returns {boolean} Returns true if the Paper has a title.\n */\nPaper.prototype.hasTitle = function () {\n    return this._attributes.title !== \"\";\n};\n/**\n * Return the title, or an empty string of no title is available.\n * @returns {string} Returns the title\n */\nPaper.prototype.getTitle = function () {\n    return this._attributes.title;\n};\n/**\n * Check whether an title width in pixels is available\n * @returns {boolean} Returns true if the Paper has a title.\n */\nPaper.prototype.hasTitleWidth = function () {\n    return this._attributes.titleWidth !== 0;\n};\n/**\n * Return the title width in pixels, or an empty string of no title width in pixels is available.\n * @returns {string} Returns the title\n */\nPaper.prototype.getTitleWidth = function () {\n    return this._attributes.titleWidth;\n};\n/**\n * Check whether an url is available\n * @returns {boolean} Returns true if the Paper has an Url.\n */\nPaper.prototype.hasUrl = function () {\n    return this._attributes.url !== \"\";\n};\n/**\n * Return the url, or an empty string of no url is available.\n * @returns {string} Returns the url\n */\nPaper.prototype.getUrl = function () {\n    return this._attributes.url;\n};\n/**\n * Check whether a locale is available\n * @returns {boolean} Returns true if the paper has a locale\n */\nPaper.prototype.hasLocale = function () {\n    return this._attributes.locale !== \"\";\n};\n/**\n * Return the locale or an empty string if no locale is available\n * @returns {string} Returns the locale\n */\nPaper.prototype.getLocale = function () {\n    return this._attributes.locale;\n};\n/**\n * Check whether a permalink is available\n * @returns {boolean} Returns true if the Paper has a permalink.\n */\nPaper.prototype.hasPermalink = function () {\n    return this._attributes.permalink !== \"\";\n};\n/**\n * Return the permalink, or an empty string of no permalink is available.\n * @returns {string} Returns the permalink.\n */\nPaper.prototype.getPermalink = function () {\n    return this._attributes.permalink;\n};\nmodule.exports = Paper;\n//# sourceMappingURL=Paper.js.map\n//# sourceMappingURL=Paper.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Paper.js\n// module id = 1621\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/values/Paper.js?");

/***/ }),
/* 1622 */,
/* 1623 */,
/* 1624 */,
/* 1625 */,
/* 1626 */,
/* 1627 */,
/* 1628 */,
/* 1629 */,
/* 1630 */,
/* 1631 */,
/* 1632 */,
/* 1633 */,
/* 1634 */,
/* 1635 */,
/* 1636 */,
/* 1637 */,
/* 1638 */,
/* 1639 */,
/* 1640 */,
/* 1641 */,
/* 1642 */,
/* 1643 */,
/* 1644 */,
/* 1645 */,
/* 1646 */,
/* 1647 */,
/* 1648 */,
/* 1649 */,
/* 1650 */,
/* 1651 */,
/* 1652 */,
/* 1653 */,
/* 1654 */,
/* 1655 */,
/* 1656 */,
/* 1657 */,
/* 1658 */,
/* 1659 */,
/* 1660 */,
/* 1661 */,
/* 1662 */,
/* 1663 */,
/* 1664 */,
/* 1665 */,
/* 1666 */,
/* 1667 */,
/* 1668 */,
/* 1669 */,
/* 1670 */,
/* 1671 */,
/* 1672 */,
/* 1673 */,
/* 1674 */,
/* 1675 */,
/* 1676 */,
/* 1677 */,
/* 1678 */,
/* 1679 */,
/* 1680 */,
/* 1681 */,
/* 1682 */,
/* 1683 */,
/* 1684 */,
/* 1685 */,
/* 1686 */,
/* 1687 */,
/* 1688 */,
/* 1689 */,
/* 1690 */,
/* 1691 */,
/* 1692 */,
/* 1693 */,
/* 1694 */,
/* 1695 */,
/* 1696 */,
/* 1697 */,
/* 1698 */,
/* 1699 */,
/* 1700 */,
/* 1701 */,
/* 1702 */,
/* 1703 */,
/* 1704 */,
/* 1705 */,
/* 1706 */,
/* 1707 */,
/* 1708 */,
/* 1709 */,
/* 1710 */,
/* 1711 */,
/* 1712 */,
/* 1713 */,
/* 1714 */,
/* 1715 */,
/* 1716 */,
/* 1717 */,
/* 1718 */,
/* 1719 */,
/* 1720 */,
/* 1721 */,
/* 1722 */,
/* 1723 */,
/* 1724 */,
/* 1725 */,
/* 1726 */,
/* 1727 */,
/* 1728 */,
/* 1729 */,
/* 1730 */,
/* 1731 */,
/* 1732 */,
/* 1733 */,
/* 1734 */,
/* 1735 */,
/* 1736 */,
/* 1737 */,
/* 1738 */,
/* 1739 */,
/* 1740 */,
/* 1741 */,
/* 1742 */,
/* 1743 */,
/* 1744 */,
/* 1745 */,
/* 1746 */,
/* 1747 */,
/* 1748 */,
/* 1749 */,
/* 1750 */,
/* 1751 */,
/* 1752 */,
/* 1753 */,
/* 1754 */,
/* 1755 */,
/* 1756 */,
/* 1757 */,
/* 1758 */,
/* 1759 */,
/* 1760 */,
/* 1761 */,
/* 1762 */,
/* 1763 */,
/* 1764 */,
/* 1765 */,
/* 1766 */,
/* 1767 */,
/* 1768 */,
/* 1769 */,
/* 1770 */,
/* 1771 */,
/* 1772 */,
/* 1773 */,
/* 1774 */,
/* 1775 */,
/* 1776 */,
/* 1777 */,
/* 1778 */,
/* 1779 */,
/* 1780 */,
/* 1781 */,
/* 1782 */,
/* 1783 */,
/* 1784 */,
/* 1785 */,
/* 1786 */,
/* 1787 */,
/* 1788 */,
/* 1789 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nwindow.yoast = window.yoast || {};\nwindow.yoast.analysis = __webpack_require__(1790);\n\n//////////////////\n// WEBPACK FOOTER\n// ./analysis.js\n// module id = 1789\n// module chunks = 4\n\n//# sourceURL=webpack:///./analysis.js?");

/***/ }),
/* 1790 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _assessments = __webpack_require__(1791);\n\nvar assessments = _interopRequireWildcard(_assessments);\n\nvar _bundledPlugins = __webpack_require__(1801);\n\nvar bundledPlugins = _interopRequireWildcard(_bundledPlugins);\n\nvar _helpers = __webpack_require__(1803);\n\nvar helpers = _interopRequireWildcard(_helpers);\n\nvar _markers = __webpack_require__(1804);\n\nvar markers = _interopRequireWildcard(_markers);\n\nvar _stringProcessing = __webpack_require__(1805);\n\nvar string = _interopRequireWildcard(_stringProcessing);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nmodule.exports = {\n\tAssessor: __webpack_require__(1086),\n\tSEOAssessor: __webpack_require__(1590),\n\tContentAssessor: __webpack_require__(1591),\n\tApp: __webpack_require__(1811),\n\tPluggable: __webpack_require__(1620),\n\tResearcher: __webpack_require__(1191),\n\tSnippetPreview: __webpack_require__(1616),\n\n\tPaper: __webpack_require__(1621),\n\tAssessmentResult: __webpack_require__(51),\n\n\tassessments: assessments,\n\tbundledPlugins: bundledPlugins,\n\thelpers: helpers,\n\tmarkers: markers,\n\tstring: string\n};\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/index.js\n// module id = 1790\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/index.js?");

/***/ }),
/* 1791 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FleschReadingEaseAssessment = __webpack_require__(1569);\nvar ParagraphTooLongAssessment = __webpack_require__(1570);\nvar PassiveVoiceAssessment = __webpack_require__(1572);\nvar SentenceBeginningsAssessment = __webpack_require__(1573);\nvar SentenceLengthInDescriptionAssessment = __webpack_require__(1796);\nvar SentenceLengthInTextAssessment = __webpack_require__(1574);\nvar SubheadingDistributionTooLongAssessment = __webpack_require__(1575);\nvar TextPresenceAssessment = __webpack_require__(1576);\nvar TransitionWordsAssessment = __webpack_require__(1577);\nvar WordComplexityAssessment = __webpack_require__(1797);\nvar InternalLinksAssessment_1 = __webpack_require__(1578);\nvar IntroductionKeywordAssessment_1 = __webpack_require__(1579);\nvar KeyphraseLengthAssessment_1 = __webpack_require__(1580);\nvar KeywordDensityAssessment_1 = __webpack_require__(1581);\nvar KeywordStopWordsAssessment = __webpack_require__(1259);\nvar LargestKeywordDistanceAssessment_1 = __webpack_require__(1614);\nvar MetaDescriptionKeywordAssessment_1 = __webpack_require__(1582);\nvar MetaDescriptionLengthAssessment = __webpack_require__(1260);\nvar OutboundLinksAssessment = __webpack_require__(1583);\nvar PageTitleWidthAssessment = __webpack_require__(1262);\nvar SubheadingsKeywordAssessment = __webpack_require__(1584);\nvar TaxonomyTextLengthAssessment = __webpack_require__(1562);\nvar TextCompetingLinksAssessment_1 = __webpack_require__(1585);\nvar TextImagesAssessment = __webpack_require__(1586);\nvar TextLengthAssessment = __webpack_require__(1587);\nvar TitleKeywordAssessment_1 = __webpack_require__(1588);\nvar UrlKeywordAssessment_1 = __webpack_require__(1589);\nvar UrlLengthAssessment = __webpack_require__(1263);\nvar UrlStopWordsAssessment = __webpack_require__(1264);\nvar readability = {\n    FleschReadingEaseAssessment: FleschReadingEaseAssessment,\n    ParagraphTooLongAssessment: ParagraphTooLongAssessment,\n    PassiveVoiceAssessment: PassiveVoiceAssessment,\n    SentenceBeginningsAssessment: SentenceBeginningsAssessment,\n    SentenceLengthInDescriptionAssessment: SentenceLengthInDescriptionAssessment,\n    SentenceLengthInTextAssessment: SentenceLengthInTextAssessment,\n    SubheadingDistributionTooLongAssessment: SubheadingDistributionTooLongAssessment,\n    TextPresenceAssessment: TextPresenceAssessment,\n    TransitionWordsAssessment: TransitionWordsAssessment,\n    WordComplexityAssessment: WordComplexityAssessment\n};\nexports.readability = readability;\nvar seo = {\n    InternalLinksAssessment: InternalLinksAssessment_1.default,\n    IntroductionKeywordAssessment: IntroductionKeywordAssessment_1.default,\n    KeyphraseLengthAssessment: KeyphraseLengthAssessment_1.default,\n    KeywordDensityAssessment: KeywordDensityAssessment_1.default,\n    KeywordStopWordsAssessment: KeywordStopWordsAssessment,\n    LargestKeywordDistanceAssessment: LargestKeywordDistanceAssessment_1.default,\n    MetaDescriptionKeywordAssessment: MetaDescriptionKeywordAssessment_1.default,\n    MetaDescriptionLengthAssessment: MetaDescriptionLengthAssessment,\n    OutboundLinksAssessment: OutboundLinksAssessment,\n    PageTitleWidthAssessment: PageTitleWidthAssessment,\n    SubheadingsKeywordAssessment: SubheadingsKeywordAssessment,\n    TaxonomyTextLengthAssessment: TaxonomyTextLengthAssessment,\n    TextCompetingLinksAssessment: TextCompetingLinksAssessment_1.default,\n    TextImagesAssessment: TextImagesAssessment,\n    TextLengthAssessment: TextLengthAssessment,\n    TitleKeywordAssessment: TitleKeywordAssessment_1.default,\n    UrlKeywordAssessment: UrlKeywordAssessment_1.default,\n    UrlLengthAssessment: UrlLengthAssessment,\n    UrlStopWordsAssessment: UrlStopWordsAssessment\n};\nexports.seo = seo;\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/index.js\n// module id = 1791\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/index.js?");

/***/ }),
/* 1792 */
/***/ (function(module, exports, __webpack_require__) {

eval("var createAggregator = __webpack_require__(1793);\n\n/**\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ];\n *\n * _.partition(users, function(o) { return o.active; });\n * // => objects for [['fred'], ['barney', 'pebbles']]\n *\n * // The `_.matches` iteratee shorthand.\n * _.partition(users, { 'age': 1, 'active': false });\n * // => objects for [['pebbles'], ['barney', 'fred']]\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.partition(users, ['active', false]);\n * // => objects for [['barney', 'pebbles'], ['fred']]\n *\n * // The `_.property` iteratee shorthand.\n * _.partition(users, 'active');\n * // => objects for [['fred'], ['barney', 'pebbles']]\n */\nvar partition = createAggregator(function(result, value, key) {\n  result[key ? 0 : 1].push(value);\n}, function() { return [[], []]; });\n\nmodule.exports = partition;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/partition.js\n// module id = 1792\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/partition.js?");

/***/ }),
/* 1793 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayAggregator = __webpack_require__(1794),\n    baseAggregator = __webpack_require__(1795),\n    baseIteratee = __webpack_require__(267),\n    isArray = __webpack_require__(64);\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createAggregator.js\n// module id = 1793\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_createAggregator.js?");

/***/ }),
/* 1794 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayAggregator.js\n// module id = 1794\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayAggregator.js?");

/***/ }),
/* 1795 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseEach = __webpack_require__(558);\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAggregator.js\n// module id = 1795\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAggregator.js?");

/***/ }),
/* 1796 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar formatNumber = __webpack_require__(588);\nvar countTooLongSentences = __webpack_require__(1613);\nvar inRange = __webpack_require__(395).inRangeEndInclusive;\n/**\n * Calculates sentence length score\n * @param {array} sentences The array containing sentences.\n * @param {object} i18n The object used for translations.\n * @returns {object} Object containing score and text.\n */\nvar calculateSentenceLengthResult = function calculateSentenceLengthResult(sentences, i18n) {\n    var score;\n    var percentage = 0;\n    var recommendedValue = 20;\n    var tooLongTotal = countTooLongSentences(sentences, recommendedValue).length;\n    var sentenceLengthURL = \"<a href='https://yoa.st/short-sentences' target='_blank'>\";\n    if (sentences.length !== 0) {\n        percentage = formatNumber(tooLongTotal / sentences.length * 100);\n    }\n    if (percentage <= 20) {\n        // Green indicator.\n        score = 9;\n    }\n    if (inRange(percentage, 20, 25)) {\n        // Orange indicator.\n        score = 6;\n    }\n    if (percentage > 25) {\n        // Red indicator.\n        score = 3;\n    }\n    if (score >= 7) {\n        return {\n            score: score,\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n            // Translators: %1$s expands to a link on yoast.com, %2$s expands to the recommended maximum sentence length,\n            // %3$s expands to the anchor end tag.\n            \"The meta description contains no sentences %1$sover %2$s words%3$s.\"), sentenceLengthURL, recommendedValue, \"</a>\")\n        };\n    }\n    return {\n        score: score,\n        text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\",\n        // Translators: %1$d expands to number of sentences, %2$s expands to a link on yoast.com,\n        // %3$s expands to the recommended maximum sentence length, %4$s expands to the anchor end tag.\n        \"The meta description contains %1$d sentence %2$sover %3$s words%4$s. Try to shorten this sentence.\", \"The meta description contains %1$d sentences %2$sover %3$s words%4$s. Try to shorten these sentences.\", tooLongTotal), tooLongTotal, sentenceLengthURL, recommendedValue, \"</a>\")\n    };\n};\n/**\n * Scores the percentage of sentences including more than the recommended number of words.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} The Assessmentresult\n */\nvar sentenceLengthInDescriptionAssessment = function sentenceLengthInDescriptionAssessment(paper, researcher, i18n) {\n    var sentenceCount = researcher.getResearch(\"countSentencesFromDescription\");\n    var sentenceResult = calculateSentenceLengthResult(sentenceCount, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(sentenceResult.score);\n    assessmentResult.setText(sentenceResult.text);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"metaDescriptionSentenceLength\",\n    getResult: sentenceLengthInDescriptionAssessment,\n    isApplicable: function isApplicable(paper) {\n        return paper.hasDescription();\n    }\n};\n//# sourceMappingURL=sentenceLengthInDescriptionAssessment.js.map\n//# sourceMappingURL=sentenceLengthInDescriptionAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/sentenceLengthInDescriptionAssessment.js\n// module id = 1796\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/sentenceLengthInDescriptionAssessment.js?");

/***/ }),
/* 1797 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar removeSentenceTerminators = __webpack_require__(1798);\nvar formatNumber = __webpack_require__(588);\nvar Mark = __webpack_require__(571);\nvar addMark = __webpack_require__(712);\nvar filter = __webpack_require__(112);\nvar flatMap = __webpack_require__(586);\nvar zip = __webpack_require__(1799);\nvar forEach = __webpack_require__(32);\nvar flatten = __webpack_require__(1237);\n// The maximum recommended value is 3 syllables. With more than 3 syllables a word is considered complex.\nvar recommendedValue = 3;\n/**\n * Filters the words that aren't too long.\n *\n * @param {Array} words The array with words to filter on complexity.\n * @returns {Array} The filtered list with complex words.\n */\nvar filterComplexity = function filterComplexity(words) {\n    return filter(words, function (word) {\n        return word.complexity > recommendedValue;\n    });\n};\n/**\n * Calculates the complexity of the text based on the syllables in words.\n * @param {number} wordCount The number of words used.\n * @param {Array} wordComplexity The list of words with their syllable count.\n * @param {Object} i18n The object used for translations.\n * @returns {{score: number, text}} resultobject with score and text.\n */\nvar calculateComplexity = function calculateComplexity(wordCount, wordComplexity, i18n) {\n    var percentage = 0;\n    var tooComplexWords = filterComplexity(wordComplexity).length;\n    // Prevent division by zero errors.\n    if (wordCount !== 0) {\n        percentage = tooComplexWords / wordCount * 100;\n    }\n    percentage = formatNumber(percentage);\n    var hasMarks = percentage > 0;\n    var recommendedMaximum = 5;\n    var wordComplexityURL = \"<a href='https://yoa.st/difficult-words' target='_blank'>\";\n    // 6 is the number of scorepoints between 3, minscore and 9, maxscore. For scoring we use 10 steps. each step is 0.6\n    // Up to 1.7 percent is for scoring a 9, higher percentages give lower scores.\n    var score = 9 - Math.max(Math.min(0.6 * (percentage - 1.7), 6), 0);\n    score = formatNumber(score);\n    if (score >= 7) {\n        return {\n            score: score,\n            hasMarks: hasMarks,\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n            // Translators: %1$s expands to the percentage of complex words, %2$s expands to a link on yoast.com,\n            // %3$d expands to the recommended maximum number of syllables,\n            // %4$s expands to the anchor end tag, %5$s expands to the recommended maximum number of syllables.\n            \"%1$s of the words contain %2$sover %3$s syllables%4$s, \" + \"which is less than or equal to the recommended maximum of %5$s.\"), percentage + \"%\", wordComplexityURL, recommendedValue, \"</a>\", recommendedMaximum + \"%\")\n        };\n    }\n    return {\n        score: score,\n        hasMarks: hasMarks,\n        text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\",\n        // Translators: %1$s expands to the percentage of complex words, %2$s expands to a link on yoast.com,\n        // %3$d expands to the recommended maximum number of syllables,\n        // %4$s expands to the anchor end tag, %5$s expands to the recommended maximum number of syllables.\n        \"%1$s of the words contain %2$sover %3$s syllables%4$s, \" + \"which is more than the recommended maximum of %5$s.\"), percentage + \"%\", wordComplexityURL, recommendedValue, \"</a>\", recommendedMaximum + \"%\")\n    };\n};\n/**\n * Marks complex words in a sentence.\n * @param {string} sentence The sentence to mark complex words in.\n * @param {Array} complexWords The array with complex words.\n * @returns {Array} All marked complex words.\n */\nvar markComplexWordsInSentence = function markComplexWordsInSentence(sentence, complexWords) {\n    var splitWords = sentence.split(/\\s+/);\n    forEach(complexWords, function (complexWord) {\n        var wordIndex = complexWord.wordIndex;\n        if (complexWord.word === splitWords[wordIndex] || complexWord.word === removeSentenceTerminators(splitWords[wordIndex])) {\n            splitWords[wordIndex] = splitWords[wordIndex].replace(complexWord.word, addMark(complexWord.word));\n        }\n    });\n    return splitWords;\n};\n/**\n * Splits sentence on whitespace\n * @param {string} sentence The sentence to split.\n * @returns {Array} All words from sentence. .\n */\nvar splitSentenceOnWhitespace = function splitSentenceOnWhitespace(sentence) {\n    var whitespace = sentence.split(/\\S+/);\n    // Drop first and last elements.\n    whitespace.pop();\n    whitespace.shift();\n    return whitespace;\n};\n/**\n * Creates markers of words that are complex.\n *\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @returns {Array} A list with markers\n */\nvar wordComplexityMarker = function wordComplexityMarker(paper, researcher) {\n    var wordComplexityResults = researcher.getResearch(\"wordComplexity\");\n    return flatMap(wordComplexityResults, function (result) {\n        var words = result.words;\n        var sentence = result.sentence;\n        var complexWords = filterComplexity(words);\n        if (complexWords.length === 0) {\n            return [];\n        }\n        var splitWords = markComplexWordsInSentence(sentence, complexWords);\n        var whitespace = splitSentenceOnWhitespace(sentence);\n        // Rebuild the sentence with the marked words.\n        var markedSentence = zip(splitWords, whitespace);\n        markedSentence = flatten(markedSentence);\n        markedSentence = markedSentence.join(\"\");\n        return new Mark({\n            original: sentence,\n            marked: markedSentence\n        });\n    });\n};\n/**\n * Execute the word complexity assessment and return a result based on the syllables in words\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @param {object} i18n The object used for translations\n * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n */\nvar wordComplexityAssessment = function wordComplexityAssessment(paper, researcher, i18n) {\n    var wordComplexity = researcher.getResearch(\"wordComplexity\");\n    wordComplexity = flatMap(wordComplexity, function (sentence) {\n        return sentence.words;\n    });\n    var wordCount = wordComplexity.length;\n    var complexityResult = calculateComplexity(wordCount, wordComplexity, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(complexityResult.score);\n    assessmentResult.setText(complexityResult.text);\n    assessmentResult.setHasMarks(complexityResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"wordComplexity\",\n    getResult: wordComplexityAssessment,\n    isApplicable: function isApplicable(paper) {\n        return paper.hasText();\n    },\n    getMarks: wordComplexityMarker\n};\n//# sourceMappingURL=wordComplexityAssessment.js.map\n//# sourceMappingURL=wordComplexityAssessment.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/wordComplexityAssessment.js\n// module id = 1797\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/assessments/readability/wordComplexityAssessment.js?");

/***/ }),
/* 1798 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// These are sentence terminators, that never should be in the middle of a word.\n\nvar sentenceTerminators = /[.?!:;,]/g;\n/**\n * Replaces sentence terminators from the text.\n *\n * @param {String} text The text to remove the terminators from.\n *\n * @returns {String} The sanitized text.\n */\nmodule.exports = function (text) {\n  return text.replace(sentenceTerminators, \"\");\n};\n//# sourceMappingURL=removeSentenceTerminators.js.map\n//# sourceMappingURL=removeSentenceTerminators.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/removeSentenceTerminators.js\n// module id = 1798\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/removeSentenceTerminators.js?");

/***/ }),
/* 1799 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseRest = __webpack_require__(402),\n    unzip = __webpack_require__(1800);\n\n/**\n * Creates an array of grouped elements, the first of which contains the\n * first elements of the given arrays, the second of which contains the\n * second elements of the given arrays, and so on.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @returns {Array} Returns the new array of grouped elements.\n * @example\n *\n * _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n */\nvar zip = baseRest(unzip);\n\nmodule.exports = zip;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/zip.js\n// module id = 1799\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/zip.js?");

/***/ }),
/* 1800 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayFilter = __webpack_require__(710),\n    arrayMap = __webpack_require__(327),\n    baseProperty = __webpack_require__(1272),\n    baseTimes = __webpack_require__(1119),\n    isArrayLikeObject = __webpack_require__(1092);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @static\n * @memberOf _\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n * // => [['a', 1, true], ['b', 2, false]]\n *\n * _.unzip(zipped);\n * // => [['a', 'b'], [1, 2], [true, false]]\n */\nfunction unzip(array) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  var length = 0;\n  array = arrayFilter(array, function(group) {\n    if (isArrayLikeObject(group)) {\n      length = nativeMax(group.length, length);\n      return true;\n    }\n  });\n  return baseTimes(length, function(index) {\n    return arrayMap(array, baseProperty(index));\n  });\n}\n\nmodule.exports = unzip;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/unzip.js\n// module id = 1800\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/unzip.js?");

/***/ }),
/* 1801 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar usedKeywords = __webpack_require__(1802);\nexports.usedKeywords = usedKeywords;\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/bundledPlugins/index.js\n// module id = 1801\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/bundledPlugins/index.js?");

/***/ }),
/* 1802 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar AssessmentResult = __webpack_require__(51);\nvar isUndefined = __webpack_require__(66);\nvar MissingArgument = __webpack_require__(1095);\n/**\n * @param {object} app The app\n * @param {object} args An arguments object with usedKeywords, searchUrl, postUrl,\n * @param {object} args.usedKeywords An object with keywords and ids where they are used.\n * @param {string} args.searchUrl The url used to link to a search page when multiple usages of the keyword are found.\n * @param {string} args.postUrl The url used to link to a post when 1 usage of the keyword is found.\n * @constructor\n */\nvar PreviouslyUsedKeyword = function PreviouslyUsedKeyword(app, args) {\n    if (isUndefined(app)) {\n        throw new MissingArgument(\"The previously keyword plugin requires the YoastSEO app\");\n    }\n    if (isUndefined(args)) {\n        args = {\n            usedKeywords: {},\n            searchUrl: \"\",\n            postUrl: \"\"\n        };\n    }\n    this.app = app;\n    this.usedKeywords = args.usedKeywords;\n    this.searchUrl = args.searchUrl;\n    this.postUrl = args.postUrl;\n};\n/**\n * Registers the assessment with the assessor.\n *\n * @returns {void}\n */\nPreviouslyUsedKeyword.prototype.registerPlugin = function () {\n    this.app.registerAssessment(\"usedKeywords\", {\n        getResult: this.assess.bind(this),\n        isApplicable: function isApplicable(paper) {\n            return paper.hasKeyword();\n        }\n    }, \"previouslyUsedKeywords\");\n};\n/**\n * Updates the usedKeywords.\n *\n * @param {object} usedKeywords An object with keywords and ids where they are used.\n * @returns {void}\n */\nPreviouslyUsedKeyword.prototype.updateKeywordUsage = function (usedKeywords) {\n    this.usedKeywords = usedKeywords;\n};\n/**\n * Scores the previously used keyword assessment based on the count.\n *\n * @param {object} previouslyUsedKeywords The result of the previously used keywords research\n * @param {Paper} paper The paper object to research.\n * @param {Jed} i18n The i18n object.\n * @returns {object} the scoreobject with text and score.\n */\nPreviouslyUsedKeyword.prototype.scoreAssessment = function (previouslyUsedKeywords, paper, i18n) {\n    var count = previouslyUsedKeywords.count;\n    var id = previouslyUsedKeywords.id;\n    if (count === 0) {\n        return {\n            text: i18n.sprintf(\n            /* Translators:\n            %1$s expands to a link to an article on yoast.com about why you should not use a keyword more than once,\n            %2$s expands to an anchor tag. */\n            i18n.dgettext(\"js-text-analysis\", \"You've %1$snever used this focus keyword before%2$s, very good.\"), \"<a href='https://yoa.st/20x' target='_blank' rel='noopener noreferrer'>\", \"</a>\"),\n            score: 9\n        };\n    }\n    if (count === 1) {\n        var url = \"<a href='\" + this.postUrl.replace(\"{id}\", id) + \"' target='_blank'>\";\n        return {\n            /* Translators: %1$s and %2$s expand to an admin link where the focus keyword is already used. %3$s and %4$s\n            expand to a link to an article on yoast.com about why you should not use a keyword more than once. */\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"You've used this focus keyword %1$sonce before%2$s. \" + \"It’s probably a good idea to read about %3$swhy you should not use your focus keyword more than once%4$s.\"), url, \"</a>\", \"<a href='https://yoa.st/20x' target='_blank' rel='noopener noreferrer'>\", \"</a>\"),\n            score: 6\n        };\n    }\n    if (count > 1) {\n        url = \"<a href='\" + this.searchUrl.replace(\"{keyword}\", encodeURIComponent(paper.getKeyword())) + \"' target='_blank'>\";\n        return {\n            /* Translators: %1$s and $3$s expand to the admin search page for the focus keyword, %2$d expands to the number\n            of times this focus keyword has been used before, %4$s and %5$s expand to a link to an article on yoast.com\n            about why you should not use a keyword more than once. */\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"You've used this focus keyword %1$s%2$d times before%3$s. \" + \"It’s probably a good idea to read about %4$swhy you should not use your focus keyword more than once%5$s.\"), url, count, \"</a>\", \"<a href='https://yoa.st/20x' target='_blank' rel='noopener noreferrer'>\", \"</a>\"),\n            score: 1\n        };\n    }\n};\n/**\n * Researches the previously used keywords, based on the used keywords and the keyword in the paper.\n *\n * @param {Paper} paper The paper object to research.\n * @returns {{id: number, count: number}} The object with the count and the id of the previously used keyword\n */\nPreviouslyUsedKeyword.prototype.researchPreviouslyUsedKeywords = function (paper) {\n    var keyword = paper.getKeyword();\n    var count = 0;\n    var id = 0;\n    if (!isUndefined(this.usedKeywords[keyword])) {\n        count = this.usedKeywords[keyword].length;\n        id = this.usedKeywords[keyword][0];\n    }\n    return {\n        id: id,\n        count: count\n    };\n};\n/**\n * The assessment for the previously used keywords.\n *\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @param {object} i18n The locale object.\n * @returns {AssessmentResult} The assessment result of the assessment\n */\nPreviouslyUsedKeyword.prototype.assess = function (paper, researcher, i18n) {\n    var previouslyUsedKeywords = this.researchPreviouslyUsedKeywords(paper);\n    var previouslyUsedKeywordsResult = this.scoreAssessment(previouslyUsedKeywords, paper, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(previouslyUsedKeywordsResult.score);\n    assessmentResult.setText(previouslyUsedKeywordsResult.text);\n    return assessmentResult;\n};\nmodule.exports = PreviouslyUsedKeyword;\n//# sourceMappingURL=previouslyUsedKeywords.js.map\n//# sourceMappingURL=previouslyUsedKeywords.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/bundledPlugins/previouslyUsedKeywords.js\n// module id = 1802\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/bundledPlugins/previouslyUsedKeywords.js?");

/***/ }),
/* 1803 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction __export(m) {\n    for (var p in m) {\n        if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar createMeasurementElement_1 = __webpack_require__(1120);\nexports.measureTextWidth = createMeasurementElement_1.measureTextWidth;\nvar scoreToRating = __webpack_require__(1073);\nexports.scoreToRating = scoreToRating;\n__export(__webpack_require__(395));\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/index.js\n// module id = 1803\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/helpers/index.js?");

/***/ }),
/* 1804 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar removeMarks = __webpack_require__(705);\nexports.removeMarks = removeMarks;\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/index.js\n// module id = 1804\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/markers/index.js?");

/***/ }),
/* 1805 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar stripHTMLTags = __webpack_require__(167).stripFullTags;\nexports.stripHTMLTags = stripHTMLTags;\nvar stripSpaces = __webpack_require__(84);\nexports.stripSpaces = stripSpaces;\nvar transliterate = __webpack_require__(1215);\nexports.transliterate = transliterate;\nvar replaceDiacritics = __webpack_require__(1232);\nexports.replaceDiacritics = replaceDiacritics;\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=index.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/index.js\n// module id = 1805\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/index.js?");

/***/ }),
/* 1806 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseMerge = __webpack_require__(1205),\n    isObject = __webpack_require__(96);\n\n/**\n * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n * objects into destination objects that are passed thru.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to merge.\n * @param {Object} object The parent object of `objValue`.\n * @param {Object} source The parent object of `srcValue`.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n * @returns {*} Returns the value to assign.\n */\nfunction customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n  if (isObject(objValue) && isObject(srcValue)) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, objValue);\n    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n    stack['delete'](srcValue);\n  }\n  return objValue;\n}\n\nmodule.exports = customDefaultsMerge;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_customDefaultsMerge.js\n// module id = 1806\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_customDefaultsMerge.js?");

/***/ }),
/* 1807 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseMerge = __webpack_require__(1205),\n    createAssigner = __webpack_require__(1278);\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\nmodule.exports = mergeWith;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/mergeWith.js\n// module id = 1807\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/mergeWith.js?");

/***/ }),
/* 1808 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    sentenceLength: {\n        recommendedWordCount: 20,\n        slightlyTooMany: 25,\n        farTooMany: 30\n    },\n    fleschReading: {\n        borders: {\n            veryEasy: 90,\n            easy: 80,\n            fairlyEasy: 70,\n            okay: 60,\n            fairlyDifficult: 50,\n            difficult: 30,\n            veryDifficult: 0\n        },\n        scores: {\n            veryEasy: 9,\n            easy: 9,\n            fairlyEasy: 9,\n            okay: 9,\n            fairlyDifficult: 6,\n            difficult: 3,\n            veryDifficult: 3\n        }\n    }\n};\n//# sourceMappingURL=default.js.map\n//# sourceMappingURL=default.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/default.js\n// module id = 1808\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/default.js?");

/***/ }),
/* 1809 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    sentenceLength: {\n        recommendedWordCount: 25\n    }\n};\n//# sourceMappingURL=it.js.map\n//# sourceMappingURL=it.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/it.js\n// module id = 1809\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/it.js?");

/***/ }),
/* 1810 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    sentenceLength: {\n        recommendedWordCount: 15\n    },\n    fleschReading: {\n        borders: {\n            veryEasy: 80,\n            easy: 70,\n            fairlyEasy: 60,\n            okay: 50,\n            fairlyDifficult: 40,\n            difficult: 20\n        }\n    }\n};\n//# sourceMappingURL=ru.js.map\n//# sourceMappingURL=ru.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/ru.js\n// module id = 1810\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/content/ru.js?");

/***/ }),
/* 1811 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(1261);\nvar SnippetPreview = __webpack_require__(1616);\nvar defaultsDeep = __webpack_require__(1592);\nvar isObject = __webpack_require__(96);\nvar isString = __webpack_require__(1250);\nvar MissingArgument = __webpack_require__(1095);\nvar isUndefined = __webpack_require__(66);\nvar isEmpty = __webpack_require__(97);\nvar isFunction = __webpack_require__(389);\nvar isArray = __webpack_require__(64);\nvar forEach = __webpack_require__(32);\nvar debounce = __webpack_require__(1593);\nvar throttle = __webpack_require__(1831);\nvar merge = __webpack_require__(98);\nvar Jed = __webpack_require__(170);\nvar SEOAssessor = __webpack_require__(1590);\nvar LargestKeywordDistanceAssessment_js_1 = __webpack_require__(1614);\nvar ContentAssessor = __webpack_require__(1591);\nvar CornerstoneSEOAssessor = __webpack_require__(1832);\nvar CornerstoneContentAssessor = __webpack_require__(1833);\nvar Researcher = __webpack_require__(1191);\nvar AssessorPresenter = __webpack_require__(1834);\nvar Pluggable = __webpack_require__(1620);\nvar Paper = __webpack_require__(1621);\nvar createMeasurementElement_js_1 = __webpack_require__(1120);\nvar removeHtmlBlocks = __webpack_require__(1841);\nvar largestKeywordDistance = new LargestKeywordDistanceAssessment_js_1.default();\nvar inputDebounceDelay = 400;\n/**\n * Default config for YoastSEO.js\n *\n * @type {Object}\n */\nvar defaults = {\n    callbacks: {\n        bindElementEvents: function bindElementEvents() {},\n        updateSnippetValues: function updateSnippetValues() {},\n        saveScores: function saveScores() {},\n        saveContentScore: function saveContentScore() {},\n        updatedContentResults: function updatedContentResults() {},\n        updatedKeywordsResults: function updatedKeywordsResults() {}\n    },\n    sampleText: {\n        baseUrl: \"example.org/\",\n        snippetCite: \"example-post/\",\n        title: \"This is an example title - edit by clicking here\",\n        keyword: \"Choose a focus keyword\",\n        meta: \"Modify your meta description by editing it right here\",\n        text: \"Start writing your text!\"\n    },\n    queue: [\"wordCount\", \"keywordDensity\", \"subHeadings\", \"stopwords\", \"fleschReading\", \"linkCount\", \"imageCount\", \"urlKeyword\", \"urlLength\", \"metaDescription\", \"pageTitleKeyword\", \"pageTitleWidth\", \"firstParagraph\", \"'keywordDoubles\"],\n    typeDelay: 3000,\n    typeDelayStep: 1500,\n    maxTypeDelay: 5000,\n    dynamicDelay: true,\n    locale: \"en_US\",\n    translations: {\n        domain: \"js-text-analysis\",\n        // eslint-disable-next-line camelcase\n        locale_data: {\n            \"js-text-analysis\": {\n                \"\": {}\n            }\n        }\n    },\n    replaceTarget: [],\n    resetTarget: [],\n    elementTarget: [],\n    marker: function marker() {},\n    keywordAnalysisActive: true,\n    contentAnalysisActive: true,\n    hasSnippetPreview: true\n};\n/**\n * Creates a default snippet preview, this can be used if no snippet preview has been passed.\n *\n * @private\n * @this App\n *\n * @returns {SnippetPreview} The SnippetPreview object.\n */\nfunction createDefaultSnippetPreview() {\n    var targetElement = document.getElementById(this.config.targets.snippet);\n    return new SnippetPreview({\n        analyzerApp: this,\n        targetElement: targetElement,\n        callbacks: {\n            saveSnippetData: this.config.callbacks.saveSnippetData\n        }\n    });\n}\n/**\n * Returns whether or not the given argument is a valid SnippetPreview object.\n *\n * @param   {*}         snippetPreview  The 'object' to check against.\n * @returns {boolean}                   Whether or not it's a valid SnippetPreview object.\n */\nfunction isValidSnippetPreview(snippetPreview) {\n    return !isUndefined(snippetPreview) && SnippetPreview.prototype.isPrototypeOf(snippetPreview);\n}\n/**\n * Check arguments passed to the App to check if all necessary arguments are set.\n *\n * @private\n * @param {Object}      args            The arguments object passed to the App.\n * @returns {void}\n */\nfunction verifyArguments(args) {\n    if (!isObject(args.callbacks.getData)) {\n        throw new MissingArgument(\"The app requires an object with a getdata callback.\");\n    }\n    if (!isObject(args.targets)) {\n        throw new MissingArgument(\"`targets` is a required App argument, `targets` is not an object.\");\n    }\n    // The args.targets.snippet argument is only required if not SnippetPreview object has been passed.\n    if (args.hasSnippetPreview && !isValidSnippetPreview(args.snippetPreview) && !isString(args.targets.snippet)) {\n        throw new MissingArgument(\"A snippet preview is required. When no SnippetPreview object isn't passed to \" + \"the App, the `targets.snippet` is a required App argument. `targets.snippet` is not a string.\");\n    }\n}\n/**\n * This should return an object with the given properties\n *\n * @callback YoastSEO.App~getData\n * @returns {Object} data\n * @returns {String} data.keyword The keyword that should be used\n * @returns {String} data.meta\n * @returns {String} data.text The text to analyze\n * @returns {String} data.metaTitle The text in the HTML title tag\n * @returns {String} data.title The title to analyze\n * @returns {String} data.url The URL for the given page\n * @returns {String} data.excerpt Excerpt for the pages\n */\n/**\n * @callback YoastSEO.App~getAnalyzerInput\n *\n * @returns {Array} An array containing the analyzer queue\n */\n/**\n * @callback YoastSEO.App~bindElementEvents\n *\n * @param {YoastSEO.App} app A reference to the YoastSEO.App from where this is called.\n */\n/**\n * @callback YoastSEO.App~updateSnippetValues\n *\n * @param {Object} ev The event emitted from the DOM\n */\n/**\n * @callback YoastSEO.App~saveScores\n *\n * @param {int} score The overall keyword score as determined by the assessor.\n * @param {AssessorPresenter} assessorPresenter The assessor presenter that will be used to render the keyword score.\n */\n/**\n * @callback YoastSEO.App~saveContentScore\n *\n * @param {int} score The overall content score as determined by the assessor.\n * @param {AssessorPresenter} assessorPresenter The assessor presenter that will be used to render the content score.\n */\n/**\n * @callback YoastSEO.App~updatedContentResults\n *\n * @param {Object[]} result The updated content analysis results.\n * @param {number} result[].score The SEO score.\n * @param {string} result[].rating String representation of the SEO score.\n * @param {string} result[].text Textual explanation of the score.\n * @param {number} overallContentScore The overall content SEO score.\n */\n/**\n * @callback YoastSEO.App~updatedKeywordsResults\n *\n * @param {Object[]} result The updated keywords analysis results.\n * @param {number} result[].score The SEO score.\n * @param {string} result[].rating String representation of the SEO score.\n * @param {string} result[].text Textual explanation of the score.\n * @param {number} overallContentScore The overall keywords SEO score.\n */\n/**\n * Loader for the analyzer, loads the eventbinder and the elementdefiner\n *\n * @param {Object} args The arguments passed to the loader.\n * @param {Object} args.translations Jed compatible translations.\n * @param {Object} args.targets Targets to retrieve or set on.\n * @param {String} args.targets.snippet ID for the snippet preview element.\n * @param {String} args.targets.output ID for the element to put the output of the analyzer in.\n * @param {int} args.typeDelay Number of milliseconds to wait between typing to refresh the analyzer output.\n * @param {boolean} args.dynamicDelay   Whether to enable dynamic delay, will ignore type delay if the analyzer takes a long time.\n *                                      Applicable on slow devices.\n * @param {int} args.maxTypeDelay The maximum amount of type delay even if dynamic delay is on.\n * @param {int} args.typeDelayStep The amount with which to increase the typeDelay on each step when dynamic delay is enabled.\n * @param {Object} args.callbacks The callbacks that the app requires.\n * @param {Object} args.assessor The Assessor to use instead of the default assessor.\n * @param {YoastSEO.App~getData} args.callbacks.getData Called to retrieve input data\n * @param {YoastSEO.App~getAnalyzerInput} args.callbacks.getAnalyzerInput Called to retrieve input for the analyzer.\n * @param {YoastSEO.App~bindElementEvents} args.callbacks.bindElementEvents Called to bind events to the DOM elements.\n * @param {YoastSEO.App~updateSnippetValues} args.callbacks.updateSnippetValues Called when the snippet values need to be updated.\n * @param {YoastSEO.App~saveScores} args.callbacks.saveScores Called when the score has been determined by the analyzer.\n * @param {YoastSEO.App~saveContentScore} args.callback.saveContentScore Called when the content score has been\n *                                                                       determined by the assessor.\n * @param {YoastSEO.App~updatedContentResults} args.callbacks.updatedContentResults Called when the score has been determined\n *                                                                                  by the analyzer.\n * @param {YoastSEO.App~updatedKeywordsResults} args.callback.updatedKeywordsResults Called when the content score has been\n *                                                                                   determined by the assessor.\n * @param {Function} args.callbacks.saveSnippetData Function called when the snippet data is changed.\n * @param {Function} args.marker The marker to use to apply the list of marks retrieved from an assessment.\n *\n * @param {SnippetPreview} args.snippetPreview The SnippetPreview object to be used.\n *\n * @constructor\n */\nvar App = function App(args) {\n    if (!isObject(args)) {\n        args = {};\n    }\n    defaultsDeep(args, defaults);\n    verifyArguments(args);\n    this.config = args;\n    this.refresh = debounce(this.refresh.bind(this), inputDebounceDelay);\n    this._pureRefresh = throttle(this._pureRefresh.bind(this), this.config.typeDelay);\n    this.callbacks = this.config.callbacks;\n    this.i18n = this.constructI18n(this.config.translations);\n    this.initializeAssessors(args);\n    this.pluggable = new Pluggable(this);\n    this.getData();\n    this.defaultOutputElement = this.getDefaultOutputElement(args);\n    if (this.defaultOutputElement !== \"\") {\n        this.showLoadingDialog();\n    }\n    if (isValidSnippetPreview(args.snippetPreview)) {\n        this.snippetPreview = args.snippetPreview;\n        /* Hack to make sure the snippet preview always has a reference to this App. This way we solve the circular\n        dependency issue. In the future this should be solved by the snippet preview not having a reference to the\n        app.*/\n        if (this.snippetPreview.refObj !== this) {\n            this.snippetPreview.refObj = this;\n            this.snippetPreview.i18n = this.i18n;\n        }\n    } else if (args.hasSnippetPreview) {\n        this.snippetPreview = createDefaultSnippetPreview.call(this);\n    }\n    this._assessorOptions = {\n        useCornerStone: false,\n        useKeywordDistribution: false\n    };\n    this.initSnippetPreview();\n    this.initAssessorPresenters();\n};\n/**\n * Returns the default output element based on which analyses are active.\n *\n * @param {Object} args The arguments passed to the App.\n * @returns {string} The ID of the target that is active.\n */\nApp.prototype.getDefaultOutputElement = function (args) {\n    if (args.keywordAnalysisActive) {\n        return args.targets.output;\n    }\n    if (args.contentAnalysisActive) {\n        return args.targets.contentOutput;\n    }\n    return \"\";\n};\n/**\n * Sets the assessors based on the assessor options and refreshes them.\n *\n * @param {Object} assessorOptions The specific options.\n * @returns {void}\n */\nApp.prototype.changeAssessorOptions = function (assessorOptions) {\n    this._assessorOptions = merge(this._assessorOptions, assessorOptions);\n    // Set the assessors based on the new assessor options.\n    this.seoAssessor = this.getSeoAssessor();\n    this.contentAssessor = this.getContentAssessor();\n    // Refresh everything so the user sees the changes.\n    this.initAssessorPresenters();\n    this.refresh();\n};\n/**\n * Returns an instance of the seo assessor to use.\n *\n * @returns {Assessor} The assessor instance.\n */\nApp.prototype.getSeoAssessor = function () {\n    var _assessorOptions = this._assessorOptions,\n        useCornerStone = _assessorOptions.useCornerStone,\n        useKeywordDistribution = _assessorOptions.useKeywordDistribution;\n\n    var assessor = useCornerStone ? this.cornerStoneSeoAssessor : this.defaultSeoAssessor;\n    if (useKeywordDistribution && isUndefined(assessor.getAssessment(\"largestKeywordDistance\"))) {\n        assessor.addAssessment(\"largestKeywordDistance\", largestKeywordDistance);\n    }\n    return assessor;\n};\n/**\n * Returns an instance of the content assessor to use.\n *\n * @returns {Assessor} The assessor instance.\n */\nApp.prototype.getContentAssessor = function () {\n    var useCornerStone = this._assessorOptions.useCornerStone;\n\n    if (useCornerStone) {\n        return this.cornerStoneContentAssessor;\n    }\n    return this.defaultContentAssessor;\n};\n/**\n * Initializes assessors based on if the respective analysis is active.\n *\n * @param {Object} args The arguments passed to the App.\n * @returns {void}\n */\nApp.prototype.initializeAssessors = function (args) {\n    this.initializeSEOAssessor(args);\n    this.initializeContentAssessor(args);\n};\n/**\n * Initializes the SEO assessor.\n *\n * @param {Object} args The arguments passed to the App.\n * @returns {void}\n */\nApp.prototype.initializeSEOAssessor = function (args) {\n    if (!args.keywordAnalysisActive) {\n        return;\n    }\n    this.defaultSeoAssessor = new SEOAssessor(this.i18n, { marker: this.config.marker });\n    this.cornerStoneSeoAssessor = new CornerstoneSEOAssessor(this.i18n, { marker: this.config.marker });\n    // Set the assessor\n    if (isUndefined(args.seoAssessor)) {\n        this.seoAssessor = this.defaultSeoAssessor;\n    } else {\n        this.seoAssessor = args.seoAssessor;\n    }\n};\n/**\n * Initializes the content assessor.\n *\n * @param {Object} args The arguments passed to the App.\n * @returns {void}\n */\nApp.prototype.initializeContentAssessor = function (args) {\n    if (!args.contentAnalysisActive) {\n        return;\n    }\n    this.defaultContentAssessor = new ContentAssessor(this.i18n, { marker: this.config.marker, locale: this.config.locale });\n    this.cornerStoneContentAssessor = new CornerstoneContentAssessor(this.i18n, { marker: this.config.marker, locale: this.config.locale });\n    // Set the content assessor\n    if (isUndefined(args.contentAssessor)) {\n        this.contentAssessor = this.defaultContentAssessor;\n    } else {\n        this.contentAssessor = args.contentAssessor;\n    }\n};\n/**\n * Extend the config with defaults.\n *\n * @param   {Object}    args    The arguments to be extended.\n * @returns {Object}    args    The extended arguments.\n */\nApp.prototype.extendConfig = function (args) {\n    args.sampleText = this.extendSampleText(args.sampleText);\n    args.locale = args.locale || \"en_US\";\n    return args;\n};\n/**\n * Extend sample text config with defaults.\n *\n * @param   {Object}    sampleText  The sample text to be extended.\n * @returns {Object}    sampleText  The extended sample text.\n */\nApp.prototype.extendSampleText = function (sampleText) {\n    var defaultSampleText = defaults.sampleText;\n    if (isUndefined(sampleText)) {\n        return defaultSampleText;\n    }\n    for (var key in sampleText) {\n        if (isUndefined(sampleText[key])) {\n            sampleText[key] = defaultSampleText[key];\n        }\n    }\n    return sampleText;\n};\n/**\n * Initializes i18n object based on passed configuration\n *\n * @param {Object}  translations    The translations to be used in the current instance.\n * @returns {void}\n */\nApp.prototype.constructI18n = function (translations) {\n    var defaultTranslations = {\n        domain: \"js-text-analysis\",\n        // eslint-disable-next-line camelcase\n        locale_data: {\n            \"js-text-analysis\": {\n                \"\": {}\n            }\n        }\n    };\n    // Use default object to prevent Jed from erroring out.\n    translations = translations || defaultTranslations;\n    return new Jed(translations);\n};\n/**\n * Registers a custom data callback.\n *\n * @param {Function} callback The callback to register.\n *\n * @returns {void}\n */\nApp.prototype.registerCustomDataCallback = function (callback) {\n    if (!this.callbacks.custom) {\n        this.callbacks.custom = [];\n    }\n    if (isFunction(callback)) {\n        this.callbacks.custom.push(callback);\n    }\n};\n/**\n * Retrieves data from the callbacks.getData and applies modification to store these in this.rawData.\n *\n * @returns {void}\n */\nApp.prototype.getData = function () {\n    var _this = this;\n\n    this.rawData = this.callbacks.getData();\n    // Add the custom data to the raw data.\n    if (isArray(this.callbacks.custom)) {\n        this.callbacks.custom.forEach(function (customCallback) {\n            var customData = customCallback();\n            _this.rawData = merge(_this.rawData, customData);\n        });\n    }\n    if (this.hasSnippetPreview()) {\n        // Gets the data FOR the analyzer\n        var data = this.snippetPreview.getAnalyzerData();\n        this.rawData.metaTitle = data.title;\n        this.rawData.url = data.url;\n        this.rawData.meta = data.metaDesc;\n    }\n    if (this.pluggable.loaded) {\n        this.rawData.metaTitle = this.pluggable._applyModifications(\"data_page_title\", this.rawData.metaTitle);\n        this.rawData.meta = this.pluggable._applyModifications(\"data_meta_desc\", this.rawData.meta);\n    }\n    this.rawData.titleWidth = createMeasurementElement_js_1.measureTextWidth(this.rawData.metaTitle);\n    this.rawData.locale = this.config.locale;\n};\n/**\n * Refreshes the analyzer and output of the analyzer, is debounced for a better experience.\n *\n * @returns {void}\n */\nApp.prototype.refresh = function () {\n    // Until all plugins are loaded, do not trigger a refresh.\n    if (!this.pluggable.loaded) {\n        return;\n    }\n    this._pureRefresh();\n};\n/**\n * Refreshes the analyzer and output of the analyzer, is throttled to prevent performance issues.\n *\n * @returns {void}\n *\n * @private\n */\nApp.prototype._pureRefresh = function () {\n    this.getData();\n    this.runAnalyzer();\n};\n/**\n * Determines whether or not this app has a snippet preview.\n *\n * @returns {boolean} Whether or not this app has a snippet preview.\n */\nApp.prototype.hasSnippetPreview = function () {\n    return this.snippetPreview !== null && !isUndefined(this.snippetPreview);\n};\n/**\n * Initializes the snippet preview for this App.\n *\n * @returns {void}\n */\nApp.prototype.initSnippetPreview = function () {\n    if (this.hasSnippetPreview()) {\n        this.snippetPreview.renderTemplate();\n        this.snippetPreview.callRegisteredEventBinder();\n        this.snippetPreview.bindEvents();\n        this.snippetPreview.init();\n    }\n};\n/**\n * Initializes the assessorpresenters for content and SEO.\n *\n * @returns {void}\n */\nApp.prototype.initAssessorPresenters = function () {\n    // Pass the assessor result through to the formatter\n    if (!isUndefined(this.config.targets.output)) {\n        this.seoAssessorPresenter = new AssessorPresenter({\n            targets: {\n                output: this.config.targets.output\n            },\n            assessor: this.seoAssessor,\n            i18n: this.i18n\n        });\n    }\n    if (!isUndefined(this.config.targets.contentOutput)) {\n        // Pass the assessor result through to the formatter\n        this.contentAssessorPresenter = new AssessorPresenter({\n            targets: {\n                output: this.config.targets.contentOutput\n            },\n            assessor: this.contentAssessor,\n            i18n: this.i18n\n        });\n    }\n};\n/**\n * Binds the refresh function to the input of the targetElement on the page.\n *\n * @returns {void}\n */\nApp.prototype.bindInputEvent = function () {\n    for (var i = 0; i < this.config.elementTarget.length; i++) {\n        var elem = document.getElementById(this.config.elementTarget[i]);\n        elem.addEventListener(\"input\", this.refresh.bind(this));\n    }\n};\n/**\n * Runs the rerender function of the snippetPreview if that object is defined.\n *\n * @returns {void}\n */\nApp.prototype.reloadSnippetText = function () {\n    if (this.hasSnippetPreview()) {\n        this.snippetPreview.reRender();\n    }\n};\n/**\n * Sets the startTime timestamp.\n *\n * @returns {void}\n */\nApp.prototype.startTime = function () {\n    this.startTimestamp = new Date().getTime();\n};\n/**\n * Sets the endTime timestamp and compares with startTime to determine typeDelayincrease.\n *\n * @returns {void}\n */\nApp.prototype.endTime = function () {\n    this.endTimestamp = new Date().getTime();\n    if (this.endTimestamp - this.startTimestamp > this.config.typeDelay) {\n        if (this.config.typeDelay < this.config.maxTypeDelay - this.config.typeDelayStep) {\n            this.config.typeDelay += this.config.typeDelayStep;\n        }\n    }\n};\n/**\n * Inits a new pageAnalyzer with the inputs from the getInput function and calls the scoreFormatter\n * to format outputs.\n *\n * @returns {void}\n */\nApp.prototype.runAnalyzer = function () {\n    if (this.pluggable.loaded === false) {\n        return;\n    }\n    if (this.config.dynamicDelay) {\n        this.startTime();\n    }\n    this.analyzerData = this.modifyData(this.rawData);\n    if (this.hasSnippetPreview()) {\n        this.snippetPreview.refresh();\n    }\n    var text = this.analyzerData.text;\n    // Insert HTML stripping code\n    text = removeHtmlBlocks(text);\n    var titleWidth = this.analyzerData.titleWidth;\n    if (this.hasSnippetPreview()) {\n        titleWidth = this.snippetPreview.getTitleWidth();\n    }\n    // Create a paper object for the Researcher\n    this.paper = new Paper(text, {\n        keyword: this.analyzerData.keyword,\n        synonyms: this.analyzerData.synonyms,\n        description: this.analyzerData.meta,\n        url: this.analyzerData.url,\n        title: this.analyzerData.metaTitle,\n        titleWidth: titleWidth,\n        locale: this.config.locale,\n        permalink: this.analyzerData.permalink\n    });\n    // The new researcher\n    if (isUndefined(this.researcher)) {\n        this.researcher = new Researcher(this.paper);\n    } else {\n        this.researcher.setPaper(this.paper);\n    }\n    this.runKeywordAnalysis();\n    this.runContentAnalysis();\n    this._renderAnalysisResults();\n    if (this.config.dynamicDelay) {\n        this.endTime();\n    }\n    if (this.hasSnippetPreview()) {\n        this.snippetPreview.reRender();\n    }\n};\n/**\n * Runs the keyword analysis and calls the appropriate callbacks.\n *\n * @returns {void}\n */\nApp.prototype.runKeywordAnalysis = function () {\n    if (this.config.keywordAnalysisActive) {\n        this.seoAssessor.assess(this.paper);\n        var overallSeoScore = this.seoAssessor.calculateOverallScore();\n        if (!isUndefined(this.callbacks.updatedKeywordsResults)) {\n            this.callbacks.updatedKeywordsResults(this.seoAssessor.results, overallSeoScore);\n        }\n        if (!isUndefined(this.callbacks.saveScores)) {\n            this.callbacks.saveScores(overallSeoScore, this.seoAssessorPresenter);\n        }\n    }\n};\n/**\n * Runs the content analysis and calls the appropriate callbacks.\n *\n * @returns {void}\n */\nApp.prototype.runContentAnalysis = function () {\n    if (this.config.contentAnalysisActive) {\n        this.contentAssessor.assess(this.paper);\n        var overallContentScore = this.contentAssessor.calculateOverallScore();\n        if (!isUndefined(this.callbacks.updatedContentResults)) {\n            this.callbacks.updatedContentResults(this.contentAssessor.results, overallContentScore);\n        }\n        if (!isUndefined(this.callbacks.saveContentScore)) {\n            this.callbacks.saveContentScore(overallContentScore, this.contentAssessorPresenter);\n        }\n    }\n};\n/**\n * Modifies the data with plugins before it is sent to the analyzer.\n *\n * @param   {Object}  data      The data to be modified.\n * @returns {Object}            The data with the applied modifications.\n */\nApp.prototype.modifyData = function (data) {\n    // Copy rawdata to lose object reference.\n    data = JSON.parse(JSON.stringify(data));\n    data.text = this.pluggable._applyModifications(\"content\", data.text);\n    data.metaTitle = this.pluggable._applyModifications(\"title\", data.metaTitle);\n    return data;\n};\n/**\n * Function to fire the analyzer when all plugins are loaded, removes the loading dialog.\n *\n * @returns {void}\n */\nApp.prototype.pluginsLoaded = function () {\n    this.removeLoadingDialog();\n    this.refresh();\n};\n/**\n * Shows the loading dialog which shows the loading of the plugins.\n *\n * @returns {void}\n */\nApp.prototype.showLoadingDialog = function () {\n    var outputElement = document.getElementById(this.defaultOutputElement);\n    if (this.defaultOutputElement !== \"\" && !isEmpty(outputElement)) {\n        var dialogDiv = document.createElement(\"div\");\n        dialogDiv.className = \"YoastSEO_msg\";\n        dialogDiv.id = \"YoastSEO-plugin-loading\";\n        document.getElementById(this.defaultOutputElement).appendChild(dialogDiv);\n    }\n};\n/**\n * Updates the loading plugins. Uses the plugins as arguments to show which plugins are loading.\n *\n * @param   {Object}  plugins   The plugins to be parsed into the dialog.\n * @returns {void}\n */\nApp.prototype.updateLoadingDialog = function (plugins) {\n    var outputElement = document.getElementById(this.defaultOutputElement);\n    if (this.defaultOutputElement === \"\" || isEmpty(outputElement)) {\n        return;\n    }\n    var dialog = document.getElementById(\"YoastSEO-plugin-loading\");\n    dialog.textContent = \"\";\n    forEach(plugins, function (plugin, pluginName) {\n        dialog.innerHTML += \"<span class=left>\" + pluginName + \"</span><span class=right \" + plugin.status + \">\" + plugin.status + \"</span><br />\";\n    });\n    dialog.innerHTML += \"<span class=bufferbar></span>\";\n};\n/**\n * Removes the pluging load dialog.\n *\n * @returns {void}\n */\nApp.prototype.removeLoadingDialog = function () {\n    var outputElement = document.getElementById(this.defaultOutputElement);\n    var loadingDialog = document.getElementById(\"YoastSEO-plugin-loading\");\n    if (this.defaultOutputElement !== \"\" && !isEmpty(outputElement) && !isEmpty(loadingDialog)) {\n        document.getElementById(this.defaultOutputElement).removeChild(document.getElementById(\"YoastSEO-plugin-loading\"));\n    }\n};\n// ***** PLUGGABLE PUBLIC DSL ***** //\n/**\n * Delegates to `YoastSEO.app.pluggable.registerPlugin`\n *\n * @param {string}  pluginName      The name of the plugin to be registered.\n * @param {object}  options         The options object.\n * @param {string}  options.status  The status of the plugin being registered. Can either be \"loading\" or \"ready\".\n * @returns {boolean}               Whether or not it was successfully registered.\n */\nApp.prototype.registerPlugin = function (pluginName, options) {\n    return this.pluggable._registerPlugin(pluginName, options);\n};\n/**\n * Delegates to `YoastSEO.app.pluggable.ready`\n *\n * @param {string}  pluginName  The name of the plugin to check.\n * @returns {boolean}           Whether or not the plugin is ready.\n */\nApp.prototype.pluginReady = function (pluginName) {\n    return this.pluggable._ready(pluginName);\n};\n/**\n * Delegates to `YoastSEO.app.pluggable.reloaded`\n *\n * @param {string} pluginName   The name of the plugin to reload\n * @returns {boolean}           Whether or not the plugin was reloaded.\n */\nApp.prototype.pluginReloaded = function (pluginName) {\n    return this.pluggable._reloaded(pluginName);\n};\n/**\n * Delegates to `YoastSEO.app.pluggable.registerModification`\n *\n * @param {string}      modification \t\tThe name of the filter\n * @param {function}    callable \t\t \tThe callable function\n * @param {string}      pluginName \t\t    The plugin that is registering the modification.\n * @param {number}      priority \t\t \t(optional) Used to specify the order in which the callables associated with a particular filter are\n                                            called.\n * \t\t\t\t\t\t\t\t\t        Lower numbers correspond with earlier execution.\n * @returns \t\t\t{boolean}           Whether or not the modification was successfully registered.\n */\nApp.prototype.registerModification = function (modification, callable, pluginName, priority) {\n    return this.pluggable._registerModification(modification, callable, pluginName, priority);\n};\n/**\n * Registers a custom assessment for use in the analyzer, this will result in a new line in the analyzer results.\n * The function needs to use the assessmentresult to return an result  based on the contents of the page/posts.\n *\n * Score 0 results in a grey circle if it is not explicitly set by using setscore\n * Scores 0, 1, 2, 3 and 4 result in a red circle\n * Scores 6 and 7 result in a yellow circle\n * Scores 8, 9 and 10 result in a green circle\n *\n * @param {string} name Name of the test.\n * @param {function} assessment The assessment to run\n * @param {string}   pluginName The plugin that is registering the test.\n * @returns {boolean} Whether or not the test was successfully registered.\n */\nApp.prototype.registerAssessment = function (name, assessment, pluginName) {\n    if (!isUndefined(this.seoAssessor)) {\n        return this.pluggable._registerAssessment(this.defaultSeoAssessor, name, assessment, pluginName) && this.pluggable._registerAssessment(this.cornerStoneSeoAssessor, name, assessment, pluginName);\n    }\n};\n/**\n * Disables markers visually in the UI.\n *\n * @returns {void}\n */\nApp.prototype.disableMarkers = function () {\n    if (!isUndefined(this.seoAssessorPresenter)) {\n        this.seoAssessorPresenter.disableMarker();\n    }\n    if (!isUndefined(this.contentAssessorPresenter)) {\n        this.contentAssessorPresenter.disableMarker();\n    }\n};\n/**\n * Renders the content and keyword analysis results.\n *\n * @returns {void}\n */\nApp.prototype._renderAnalysisResults = function () {\n    if (this.config.contentAnalysisActive && !isUndefined(this.contentAssessorPresenter)) {\n        this.contentAssessorPresenter.renderIndividualRatings();\n    }\n    if (this.config.keywordAnalysisActive && !isUndefined(this.seoAssessorPresenter)) {\n        this.seoAssessorPresenter.setKeyword(this.paper.getKeyword());\n        this.seoAssessorPresenter.render();\n    }\n};\n// Deprecated functions\n/**\n * The analyzeTimer calls the checkInputs function with a delay, so the function won't be executed\n * at every keystroke checks the reference object, so this function can be called from anywhere,\n * without problems with different scopes.\n *\n * @deprecated: 1.3 - Use this.refresh() instead.\n *\n * @returns {void}\n */\nApp.prototype.analyzeTimer = function () {\n    this.refresh();\n};\n/**\n * Registers a custom test for use in the analyzer, this will result in a new line in the analyzer results. The function\n * has to return a result based on the contents of the page/posts.\n *\n * The scoring object is a special object with definitions about how to translate a result from your analysis function\n * to a SEO score.\n *\n * Negative scores result in a red circle\n * Scores 1, 2, 3, 4 and 5 result in a orange circle\n * Scores 6 and 7 result in a yellow circle\n * Scores 8, 9 and 10 result in a red circle\n *\n * @returns {void}\n *\n * @deprecated since version 1.2\n */\nApp.prototype.registerTest = function () {\n    console.error(\"This function is deprecated, please use registerAssessment\");\n};\n/**\n * Creates the elements for the snippetPreview\n *\n * @deprecated Don't create a snippet preview using this method, create it directly using the prototype and pass it as\n * an argument instead.\n *\n * @returns {void}\n */\nApp.prototype.createSnippetPreview = function () {\n    this.snippetPreview = createDefaultSnippetPreview.call(this);\n    this.initSnippetPreview();\n};\n/**\n * Switches between the cornerstone and default assessors.\n *\n * @deprecated 1.35.0 - Use changeAssessorOption instead.\n *\n * @param {boolean} useCornerStone True when cornerstone should be used.\n *\n * @returns {void}\n */\nApp.prototype.switchAssessors = function (useCornerStone) {\n    this.changeAssessorOptions({\n        useCornerStone: useCornerStone\n    });\n};\nmodule.exports = App;\n//# sourceMappingURL=app.js.map\n//# sourceMappingURL=app.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/app.js\n// module id = 1811\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/app.js?");

/***/ }),
/* 1812 */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObjectLike = __webpack_require__(124),\n    isPlainObject = __webpack_require__(1277);\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nmodule.exports = isElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isElement.js\n// module id = 1812\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isElement.js?");

/***/ }),
/* 1813 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseClone = __webpack_require__(1814);\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = clone;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/clone.js\n// module id = 1813\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/clone.js?");

/***/ }),
/* 1814 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Stack = __webpack_require__(707),\n    arrayEach = __webpack_require__(1118),\n    assignValue = __webpack_require__(1124),\n    baseAssign = __webpack_require__(1815),\n    baseAssignIn = __webpack_require__(1816),\n    cloneBuffer = __webpack_require__(1273),\n    copyArray = __webpack_require__(1275),\n    copySymbols = __webpack_require__(1817),\n    copySymbolsIn = __webpack_require__(1818),\n    getAllKeys = __webpack_require__(1269),\n    getAllKeysIn = __webpack_require__(1819),\n    getTag = __webpack_require__(711),\n    initCloneArray = __webpack_require__(1820),\n    initCloneByTag = __webpack_require__(1821),\n    initCloneObject = __webpack_require__(1276),\n    isArray = __webpack_require__(64),\n    isBuffer = __webpack_require__(400),\n    isMap = __webpack_require__(1825),\n    isObject = __webpack_require__(96),\n    isSet = __webpack_require__(1827),\n    keys = __webpack_require__(323);\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n\n    return result;\n  }\n\n  if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n\n    return result;\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseClone.js\n// module id = 1814\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseClone.js?");

/***/ }),
/* 1815 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(1093),\n    keys = __webpack_require__(323);\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAssign.js\n// module id = 1815\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAssign.js?");

/***/ }),
/* 1816 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(1093),\n    keysIn = __webpack_require__(688);\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAssignIn.js\n// module id = 1816\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseAssignIn.js?");

/***/ }),
/* 1817 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(1093),\n    getSymbols = __webpack_require__(1195);\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copySymbols.js\n// module id = 1817\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copySymbols.js?");

/***/ }),
/* 1818 */
/***/ (function(module, exports, __webpack_require__) {

eval("var copyObject = __webpack_require__(1093),\n    getSymbolsIn = __webpack_require__(1617);\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copySymbolsIn.js\n// module id = 1818\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_copySymbolsIn.js?");

/***/ }),
/* 1819 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetAllKeys = __webpack_require__(1270),\n    getSymbolsIn = __webpack_require__(1617),\n    keysIn = __webpack_require__(688);\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getAllKeysIn.js\n// module id = 1819\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_getAllKeysIn.js?");

/***/ }),
/* 1820 */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_initCloneArray.js\n// module id = 1820\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_initCloneArray.js?");

/***/ }),
/* 1821 */
/***/ (function(module, exports, __webpack_require__) {

eval("var cloneArrayBuffer = __webpack_require__(1208),\n    cloneDataView = __webpack_require__(1822),\n    cloneRegExp = __webpack_require__(1823),\n    cloneSymbol = __webpack_require__(1824),\n    cloneTypedArray = __webpack_require__(1274);\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_initCloneByTag.js\n// module id = 1821\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_initCloneByTag.js?");

/***/ }),
/* 1822 */
/***/ (function(module, exports, __webpack_require__) {

eval("var cloneArrayBuffer = __webpack_require__(1208);\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneDataView.js\n// module id = 1822\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneDataView.js?");

/***/ }),
/* 1823 */
/***/ (function(module, exports) {

eval("/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneRegExp.js\n// module id = 1823\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneRegExp.js?");

/***/ }),
/* 1824 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(324);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneSymbol.js\n// module id = 1824\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_cloneSymbol.js?");

/***/ }),
/* 1825 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsMap = __webpack_require__(1826),\n    baseUnary = __webpack_require__(401),\n    nodeUtil = __webpack_require__(1080);\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isMap.js\n// module id = 1825\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isMap.js?");

/***/ }),
/* 1826 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getTag = __webpack_require__(711),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsMap.js\n// module id = 1826\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsMap.js?");

/***/ }),
/* 1827 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsSet = __webpack_require__(1828),\n    baseUnary = __webpack_require__(401),\n    nodeUtil = __webpack_require__(1080);\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isSet.js\n// module id = 1827\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/isSet.js?");

/***/ }),
/* 1828 */
/***/ (function(module, exports, __webpack_require__) {

eval("var getTag = __webpack_require__(711),\n    isObjectLike = __webpack_require__(124);\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsSet.js\n// module id = 1828\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseIsSet.js?");

/***/ }),
/* 1829 */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(121);\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/now.js\n// module id = 1829\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/now.js?");

/***/ }),
/* 1830 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar forEach = __webpack_require__(32);\nvar domManipulation = __webpack_require__(1619);\nvar previewModes = {\n    desktop: \"snippet-editor__view--desktop\",\n    mobile: \"snippet-editor__view--mobile\"\n};\nvar minimumDesktopWidth = 640;\n/**\n * Constructs the snippet preview toggle.\n *\n * @param {string}    previewMode    The default preview mode.\n * @param {Element[]} previewToggles Array with toggle elements.\n *\n * @property {string}    previewMode    The current preview mode.\n * @property {Element[]} previewToggles The array with toggle elements.\n * @property {Element}   viewElement    The target element.\n * @constructor\n */\nvar SnippetPreviewToggler = function SnippetPreviewToggler(previewMode, previewToggles) {\n    this.previewMode = previewMode;\n    this.previewToggles = previewToggles;\n    this.viewElement = document.getElementById(\"snippet-preview-view\");\n};\n/**\n * Initializes the object by setting the current previewMode as the active one.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.initialize = function () {\n    this._setPreviewMode(this.previewMode, this._findElementByMode(this.previewMode));\n};\n/**\n * Binds a function on the click event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the click event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindClickEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"click\", function () {\n        this._setPreviewMode(previewToggle.getAttribute(\"data-type\"), previewToggle);\n        this.removeTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Binds a function on the mouseleave event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the mouseleave event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindMouseleaveEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"mouseleave\", function () {\n        this.removeTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Binds a function on the blur event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the blur event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindBlurEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"blur\", function () {\n        this.restoreTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Binds a function on the mouseenter event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the mouseenter event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindMouseenterEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"mouseenter\", function () {\n        this.restoreTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Sets the events for the preview toggles to switch between the preview modes and handle the tooltips.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindEvents = function () {\n    forEach(this.previewToggles, function (previewToggle) {\n        this.bindClickEvent(previewToggle);\n        this.bindMouseleaveEvent(previewToggle);\n        this.bindBlurEvent(previewToggle);\n        this.bindMouseenterEvent(previewToggle);\n    }.bind(this));\n};\n/**\n * Returns the element by given mode.\n *\n * @param {string} previewMode The mode used to find the element.\n * @returns {Element} The found element.\n * @private\n */\nSnippetPreviewToggler.prototype._findElementByMode = function (previewMode) {\n    return document.getElementsByClassName(\"snippet-editor__view-icon-\" + previewMode)[0];\n};\n/**\n * Sets the preview mode.\n *\n * @param {string}  previewMode   The preview mode that has to be set.\n * @param {Element} toggleElement The element that has been triggered.\n *\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._setPreviewMode = function (previewMode, toggleElement) {\n    this._removeActiveStates();\n    this._setActiveState(toggleElement);\n    domManipulation.removeClass(this.viewElement, previewModes[this.previewMode]);\n    domManipulation.addClass(this.viewElement, previewModes[previewMode]);\n    this.previewMode = previewMode;\n};\n/**\n * Sets the Snippet Preview Toggler to desktop mode.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setDesktopMode = function () {\n    this._setPreviewMode(\"desktop\", this._findElementByMode(\"desktop\"));\n};\n/**\n * Sets the Snippet Preview Toggler to mobile mode.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setMobileMode = function () {\n    this._setPreviewMode(\"mobile\", this._findElementByMode(\"mobile\"));\n};\n/**\n * Sets the initial view to desktop or mobile based on the width of the Snippet Preview container.\n *\n * @param {number} previewWidth the width of the Snippet Preview container.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setVisibility = function (previewWidth) {\n    if (previewWidth < minimumDesktopWidth) {\n        this.setMobileMode();\n        // At this point the desktop view is scrollable: set a CSS class to show the Scroll Hint message.\n        domManipulation.addClass(this.viewElement, \"snippet-editor__view--desktop-has-scroll\");\n    } else {\n        this.setDesktopMode();\n    }\n};\n/**\n * When the window is resized, sets the visibility of the Scroll Hint message.\n *\n * @param {number} previewWidth the width of the Snippet Preview container.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setScrollHintVisibility = function (previewWidth) {\n    domManipulation.removeClass(this.viewElement, \"snippet-editor__view--desktop-has-scroll\");\n    if (previewWidth < minimumDesktopWidth) {\n        domManipulation.addClass(this.viewElement, \"snippet-editor__view--desktop-has-scroll\");\n    }\n};\n/**\n * Removes all active state for the preview toggles.\n *\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._removeActiveStates = function () {\n    forEach(this.previewToggles, this._removeActiveState.bind(this));\n};\n/**\n * Removes the active state for the given element.\n *\n * @param {Element} previewToggle The element to remove its state for.\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._removeActiveState = function (previewToggle) {\n    domManipulation.removeClass(previewToggle, \"snippet-editor__view-icon-\" + previewToggle.getAttribute(\"data-type\") + \"--active\");\n    domManipulation.removeClass(previewToggle, \"snippet-editor__view-icon--active\");\n    previewToggle.setAttribute(\"aria-pressed\", \"false\");\n};\n/**\n * Makes an element tooltip hidden.\n *\n * @param {Element} previewToggle The element on which the tooltip should be hidden.\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.removeTooltipAbility = function (previewToggle) {\n    domManipulation.addClass(previewToggle, \"yoast-tooltip-hidden\");\n};\n/**\n * Makes an element tooltip visible.\n *\n * @param {Element} previewToggle The element on which the tooltip should be visible.\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.restoreTooltipAbility = function (previewToggle) {\n    domManipulation.removeClass(previewToggle, \"yoast-tooltip-hidden\");\n};\n/**\n * Adds active state to the given element.\n *\n * @param {Element} elementToActivate The element that will be activated.\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._setActiveState = function (elementToActivate) {\n    domManipulation.addClass(elementToActivate, \"snippet-editor__view-icon-\" + elementToActivate.getAttribute(\"data-type\") + \"--active\");\n    domManipulation.addClass(elementToActivate, \"snippet-editor__view-icon--active\");\n    elementToActivate.setAttribute(\"aria-pressed\", \"true\");\n};\nmodule.exports = SnippetPreviewToggler;\n//# sourceMappingURL=snippetPreviewToggler.js.map\n//# sourceMappingURL=snippetPreviewToggler.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/snippetPreviewToggler.js\n// module id = 1830\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/snippetPreviewToggler.js?");

/***/ }),
/* 1831 */
/***/ (function(module, exports, __webpack_require__) {

eval("var debounce = __webpack_require__(1593),\n    isObject = __webpack_require__(96);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/throttle.js\n// module id = 1831\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/throttle.js?");

/***/ }),
/* 1832 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = __webpack_require__(79);\nvar IntroductionKeywordAssessment_1 = __webpack_require__(1579);\nvar KeyphraseLengthAssessment_1 = __webpack_require__(1580);\nvar KeywordDensityAssessment_1 = __webpack_require__(1581);\nvar MetaDescriptionKeywordAssessment_1 = __webpack_require__(1582);\nvar TextCompetingLinksAssessment_1 = __webpack_require__(1585);\nvar InternalLinksAssessment_1 = __webpack_require__(1578);\nvar TitleKeywordAssessment_1 = __webpack_require__(1588);\nvar UrlKeywordAssessment_1 = __webpack_require__(1589);\nvar Assessor = __webpack_require__(1086);\nvar SEOAssessor = __webpack_require__(1590);\nvar keywordStopWords = __webpack_require__(1259);\nvar MetaDescriptionLength = __webpack_require__(1260);\nvar SubheadingsKeyword = __webpack_require__(1584);\nvar TextImages = __webpack_require__(1586);\nvar TextLength = __webpack_require__(1587);\nvar OutboundLinks = __webpack_require__(1583);\nvar TitleWidth = __webpack_require__(1262);\nvar UrlLength = __webpack_require__(1263);\nvar urlStopWords = __webpack_require__(1264);\n/**\n * Creates the Assessor\n *\n * @param {Object} i18n The i18n object used for translations.\n * @param {Object} options The options for this assessor.\n * @param {Object} options.marker The marker to pass the list of marks to.\n *\n * @constructor\n */\nvar CornerstoneSEOAssessor = function CornerstoneSEOAssessor(i18n, options) {\n    Assessor.call(this, i18n, options);\n    this._assessments = [new IntroductionKeywordAssessment_1.default(), new KeyphraseLengthAssessment_1.default(), new KeywordDensityAssessment_1.default(), keywordStopWords, new MetaDescriptionKeywordAssessment_1.default(), new MetaDescriptionLength({\n        scores: {\n            tooLong: 3,\n            tooShort: 3\n        }\n    }), new SubheadingsKeyword({\n        scores: {\n            noMatches: 3,\n            oneMatch: 6,\n            multipleMatches: 9\n        }\n    }), new TextCompetingLinksAssessment_1.default(), new TextImages({\n        scores: {\n            noImages: 3,\n            withAltNonKeyword: 3,\n            withAlt: 3,\n            noAlt: 3\n        }\n    }), new TextLength({\n        recommendedMinimum: 900,\n        slightlyBelowMinimum: 400,\n        belowMinimum: 300,\n        farBelowMinimum: 0,\n        scores: {\n            belowMinimum: -20,\n            farBelowMinimum: -20\n        }\n    }), new OutboundLinks({\n        scores: {\n            noLinks: 3\n        }\n    }), new TitleKeywordAssessment_1.default(), new InternalLinksAssessment_1.default(), new TitleWidth({\n        scores: {\n            widthTooShort: 3,\n            widthTooLong: 3\n        }\n    }), new UrlKeywordAssessment_1.default({\n        scores: {\n            noKeywordInUrl: 3\n        }\n    }), new UrlLength({\n        scores: {\n            tooLong: 3\n        }\n    }), urlStopWords];\n};\nutil_1.inherits(CornerstoneSEOAssessor, SEOAssessor);\nmodule.exports = CornerstoneSEOAssessor;\n//# sourceMappingURL=seoAssessor.js.map\n//# sourceMappingURL=seoAssessor.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/cornerstone/seoAssessor.js\n// module id = 1832\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/cornerstone/seoAssessor.js?");

/***/ }),
/* 1833 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Assessor = __webpack_require__(1086);\nvar ContentAssessor = __webpack_require__(1591);\nvar FleschReadingEase = __webpack_require__(1569);\nvar paragraphTooLong = __webpack_require__(1570);\nvar SentenceLengthInText = __webpack_require__(1574);\nvar SubheadingDistributionTooLong = __webpack_require__(1575);\nvar transitionWords = __webpack_require__(1577);\nvar passiveVoice = __webpack_require__(1572);\nvar sentenceBeginnings = __webpack_require__(1573);\nvar textPresence = __webpack_require__(1576);\nvar contentConfiguration = __webpack_require__(1615);\n/*\n Temporarily disabled:\n\n var wordComplexity = require( \"./assessments/readability/wordComplexityAssessment.js\" );\n var sentenceLengthInDescription = require( \"./assessments/readability/sentenceLengthInDescriptionAssessment.js\" );\n */\n/**\n * Creates the Assessor\n *\n * @param {object} i18n The i18n object used for translations.\n * @param {Object} options The options for this assessor.\n * @param {Object} options.marker The marker to pass the list of marks to.\n * @param {string} options.locale The locale.\n *\n * @constructor\n */\nvar CornerStoneContentAssessor = function CornerStoneContentAssessor(i18n) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    Assessor.call(this, i18n, options);\n    var locale = options.hasOwnProperty(\"locale\") ? options.locale : \"en_US\";\n    this._assessments = [new FleschReadingEase(contentConfiguration(locale).fleschReading), new SubheadingDistributionTooLong({\n        slightlyTooMany: 250,\n        farTooMany: 300,\n        recommendedMaximumWordCount: 250\n    }), paragraphTooLong, new SentenceLengthInText({\n        recommendedWordCount: contentConfiguration(locale).sentenceLength.recommendedWordCount,\n        slightlyTooMany: 20,\n        farTooMany: 25\n    }), transitionWords, passiveVoice, textPresence, sentenceBeginnings];\n};\n__webpack_require__(79).inherits(CornerStoneContentAssessor, ContentAssessor);\nmodule.exports = CornerStoneContentAssessor;\n//# sourceMappingURL=contentAssessor.js.map\n//# sourceMappingURL=contentAssessor.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/cornerstone/contentAssessor.js\n// module id = 1833\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/cornerstone/contentAssessor.js?");

/***/ }),
/* 1834 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar forEach = __webpack_require__(32);\nvar isNumber = __webpack_require__(1122);\nvar isObject = __webpack_require__(96);\nvar isUndefined = __webpack_require__(66);\nvar difference = __webpack_require__(1835);\nvar template = __webpack_require__(1618).assessmentPresenterResult;\nvar scoreToRating = __webpack_require__(1073);\nvar createConfig = __webpack_require__(1837);\n/**\n * Constructs the AssessorPresenter.\n *\n * @param {Object} args A list of arguments to use in the presenter.\n * @param {object} args.targets The HTML elements to render the output to.\n * @param {string} args.targets.output The HTML element to render the individual ratings out to.\n * @param {string} args.targets.overall The HTML element to render the overall rating out to.\n * @param {string} args.keyword The keyword to use for checking, when calculating the overall rating.\n * @param {SEOAssessor} args.assessor The Assessor object to retrieve assessment results from.\n * @param {Jed} args.i18n The translation object.\n *\n * @constructor\n */\nvar AssessorPresenter = function AssessorPresenter(args) {\n    this.keyword = args.keyword;\n    this.assessor = args.assessor;\n    this.i18n = args.i18n;\n    this.output = args.targets.output;\n    this.overall = args.targets.overall || \"overallScore\";\n    this.presenterConfig = createConfig(args.i18n);\n    this._disableMarkerButtons = false;\n    this._activeMarker = false;\n};\n/**\n * Sets the keyword.\n *\n * @param {string} keyword The keyword to use.\n * @returns {void}\n */\nAssessorPresenter.prototype.setKeyword = function (keyword) {\n    this.keyword = keyword;\n};\n/**\n * Checks whether or not a specific property exists in the presenter configuration.\n *\n * @param {string} property The property name to search for.\n * @returns {boolean} Whether or not the property exists.\n */\nAssessorPresenter.prototype.configHasProperty = function (property) {\n    return this.presenterConfig.hasOwnProperty(property);\n};\n/**\n * Gets a fully formatted indicator object that can be used.\n *\n * @param {string} rating The rating to use.\n * @returns {Object} An object containing the class, the screen reader text, and the full text.\n */\nAssessorPresenter.prototype.getIndicator = function (rating) {\n    return {\n        className: this.getIndicatorColorClass(rating),\n        screenReaderText: this.getIndicatorScreenReaderText(rating),\n        fullText: this.getIndicatorFullText(rating),\n        screenReaderReadabilityText: this.getIndicatorScreenReaderReadabilityText(rating)\n    };\n};\n/**\n * Gets the indicator color class from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} String containing the CSS class to be used.\n */\nAssessorPresenter.prototype.getIndicatorColorClass = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].className;\n};\n/**\n * Get the indicator screen reader text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the screen reader text to be used.\n */\nAssessorPresenter.prototype.getIndicatorScreenReaderText = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].screenReaderText;\n};\n/**\n * Get the indicator screen reader readability text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the screen reader readability text to be used.\n */\nAssessorPresenter.prototype.getIndicatorScreenReaderReadabilityText = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].screenReaderReadabilityText;\n};\n/**\n * Get the indicator full text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the full text to be used.\n */\nAssessorPresenter.prototype.getIndicatorFullText = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].fullText;\n};\n/**\n * Adds a rating based on the numeric score.\n *\n * @param {Object} result Object based on the Assessment result. Requires a score property to work.\n * @returns {Object} The Assessment result object with the rating added.\n */\nAssessorPresenter.prototype.resultToRating = function (result) {\n    if (!isObject(result)) {\n        return \"\";\n    }\n    result.rating = scoreToRating(result.score);\n    return result;\n};\n/**\n * Takes the individual assessment results, sorts and rates them.\n *\n * @returns {Object} Object containing all the individual ratings.\n */\nAssessorPresenter.prototype.getIndividualRatings = function () {\n    var ratings = {};\n    var validResults = this.sort(this.assessor.getValidResults());\n    var mappedResults = validResults.map(this.resultToRating);\n    forEach(mappedResults, function (item, key) {\n        ratings[key] = this.addRating(item);\n    }.bind(this));\n    return ratings;\n};\n/**\n * Excludes items from the results that are present in the exclude array.\n *\n * @param {Array} results Array containing the items to filter through.\n * @param {Array} exclude Array of results to exclude.\n * @returns {Array} Array containing items that remain after exclusion.\n */\nAssessorPresenter.prototype.excludeFromResults = function (results, exclude) {\n    return difference(results, exclude);\n};\n/**\n * Sorts results based on their score property and always places items considered to be unsortable, at the top.\n *\n * @param {Array} results Array containing the results that need to be sorted.\n * @returns {Array} Array containing the sorted results.\n */\nAssessorPresenter.prototype.sort = function (results) {\n    var unsortables = this.getUndefinedScores(results);\n    var sortables = this.excludeFromResults(results, unsortables);\n    sortables.sort(function (a, b) {\n        return a.score - b.score;\n    });\n    return unsortables.concat(sortables);\n};\n/**\n * Returns a subset of results that have an undefined score or a score set to zero.\n *\n * @param {Array} results The results to filter through.\n * @returns {Array} A subset of results containing items with an undefined score or where the score is zero.\n */\nAssessorPresenter.prototype.getUndefinedScores = function (results) {\n    return results.filter(function (result) {\n        return isUndefined(result.score) || result.score === 0;\n    });\n};\n/**\n * Creates a rating object based on the item that is being passed.\n *\n * @param {AssessmentResult} item The item to check and create a rating object from.\n * @returns {Object} Object containing a parsed item, including a colored indicator.\n */\nAssessorPresenter.prototype.addRating = function (item) {\n    var indicator = this.getIndicator(item.rating);\n    indicator.text = item.text;\n    indicator.identifier = item.getIdentifier();\n    if (item.hasMarker()) {\n        indicator.marker = item.getMarker();\n    }\n    return indicator;\n};\n/**\n * Calculates the overall rating score based on the overall score.\n *\n * @param {Number} overallScore The overall score to use in the calculation.\n * @returns {Object} The rating based on the score.\n */\nAssessorPresenter.prototype.getOverallRating = function (overallScore) {\n    var rating = 0;\n    if (this.keyword === \"\") {\n        return this.resultToRating({ score: rating });\n    }\n    if (isNumber(overallScore)) {\n        rating = overallScore / 10;\n    }\n    return this.resultToRating({ score: rating });\n};\n/**\n * Mark with a given marker. This will set the active marker to the correct value.\n *\n * @param {string} identifier The identifier for the assessment/marker.\n * @param {Function} marker The marker function.\n * @returns {void}\n */\nAssessorPresenter.prototype.markAssessment = function (identifier, marker) {\n    if (this._activeMarker === identifier) {\n        this.removeAllMarks();\n        this._activeMarker = false;\n    } else {\n        marker();\n        this._activeMarker = identifier;\n    }\n    this.render();\n};\n/**\n * Disables the currently active marker in the UI.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.disableMarker = function () {\n    this._activeMarker = false;\n    this.render();\n};\n/**\n * Disables the marker buttons.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.disableMarkerButtons = function () {\n    this._disableMarkerButtons = true;\n    this.render();\n};\n/**\n * Enables the marker buttons.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.enableMarkerButtons = function () {\n    this._disableMarkerButtons = false;\n    this.render();\n};\n/**\n * Adds an event listener for the marker button\n *\n * @param {string} identifier The identifier for the assessment the marker belongs to.\n * @param {Function} marker The marker function that can mark the assessment in the text.\n * @returns {void}\n */\nAssessorPresenter.prototype.addMarkerEventHandler = function (identifier, marker) {\n    var container = document.getElementById(this.output);\n    var markButton = container.getElementsByClassName(\"js-assessment-results__mark-\" + identifier)[0];\n    markButton.addEventListener(\"click\", this.markAssessment.bind(this, identifier, marker));\n};\n/**\n * Renders out both the individual and the overall ratings.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.render = function () {\n    this.renderIndividualRatings();\n    this.renderOverallRating();\n};\n/**\n * Adds event handlers to the mark buttons\n *\n * @param {Array} scores The list of rendered scores.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.bindMarkButtons = function (scores) {\n    // Make sure the button works for every score with a marker.\n    forEach(scores, function (score) {\n        if (score.hasOwnProperty(\"marker\")) {\n            this.addMarkerEventHandler(score.identifier, score.marker);\n        }\n    }.bind(this));\n};\n/**\n * Removes all marks currently on the text\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.removeAllMarks = function () {\n    var marker = this.assessor.getSpecificMarker();\n    marker(this.assessor.getPaper(), []);\n};\n/**\n * Renders out the individual ratings.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.renderIndividualRatings = function () {\n    var outputTarget = document.getElementById(this.output);\n    var scores = this.getIndividualRatings();\n    outputTarget.innerHTML = template({\n        scores: scores,\n        i18n: {\n            disabledMarkText: this.i18n.dgettext(\"js-text-analysis\", \"Marks are disabled in current view\"),\n            markInText: this.i18n.dgettext(\"js-text-analysis\", \"Mark this result in the text\"),\n            removeMarksInText: this.i18n.dgettext(\"js-text-analysis\", \"Remove marks in the text\")\n        },\n        activeMarker: this._activeMarker,\n        markerButtonsDisabled: this._disableMarkerButtons\n    });\n    this.bindMarkButtons(scores);\n};\n/**\n * Renders out the overall rating.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.renderOverallRating = function () {\n    var overallRating = this.getOverallRating(this.assessor.calculateOverallScore());\n    var overallRatingElement = document.getElementById(this.overall);\n    if (!overallRatingElement) {\n        return;\n    }\n    overallRatingElement.className = \"overallScore \" + this.getIndicatorColorClass(overallRating.rating);\n};\nmodule.exports = AssessorPresenter;\n//# sourceMappingURL=AssessorPresenter.js.map\n//# sourceMappingURL=AssessorPresenter.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/renderers/AssessorPresenter.js\n// module id = 1834\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/renderers/AssessorPresenter.js?");

/***/ }),
/* 1835 */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseDifference = __webpack_require__(1836),\n    baseFlatten = __webpack_require__(587),\n    baseRest = __webpack_require__(402),\n    isArrayLikeObject = __webpack_require__(1092);\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nmodule.exports = difference;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/difference.js\n// module id = 1835\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/difference.js?");

/***/ }),
/* 1836 */
/***/ (function(module, exports, __webpack_require__) {

eval("var SetCache = __webpack_require__(708),\n    arrayIncludes = __webpack_require__(1125),\n    arrayIncludesWith = __webpack_require__(1126),\n    arrayMap = __webpack_require__(327),\n    baseUnary = __webpack_require__(401),\n    cacheHas = __webpack_require__(709);\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseDifference.js\n// module id = 1836\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseDifference.js?");

/***/ }),
/* 1837 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Returns the configuration used for score ratings and the AssessorPresenter.\n * @param {Jed} i18n The translator object.\n * @returns {Object} The config object.\n */\n\nmodule.exports = function (i18n) {\n    return {\n        feedback: {\n            className: \"na\",\n            screenReaderText: i18n.dgettext(\"js-text-analysis\", \"Feedback\"),\n            fullText: i18n.dgettext(\"js-text-analysis\", \"Content optimization: Has feedback\"),\n            screenReaderReadabilityText: ''\n        },\n        bad: {\n            className: \"bad\",\n            screenReaderText: i18n.dgettext(\"js-text-analysis\", \"Bad SEO score\"),\n            fullText: i18n.dgettext(\"js-text-analysis\", \"Content optimization: Bad SEO score\"),\n            screenReaderReadabilityText: i18n.dgettext(\"js-text-analysis\", \"Needs improvement\")\n        },\n        ok: {\n            className: \"ok\",\n            screenReaderText: i18n.dgettext(\"js-text-analysis\", \"OK SEO score\"),\n            fullText: i18n.dgettext(\"js-text-analysis\", \"Content optimization: OK SEO score\"),\n            screenReaderReadabilityText: i18n.dgettext(\"js-text-analysis\", \"OK\")\n        },\n        good: {\n            className: \"good\",\n            screenReaderText: i18n.dgettext(\"js-text-analysis\", \"Good SEO score\"),\n            fullText: i18n.dgettext(\"js-text-analysis\", \"Content optimization: Good SEO score\"),\n            screenReaderReadabilityText: i18n.dgettext(\"js-text-analysis\", \"Good\")\n        }\n    };\n};\n//# sourceMappingURL=presenter.js.map\n//# sourceMappingURL=presenter.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/presenter.js\n// module id = 1837\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/config/presenter.js?");

/***/ }),
/* 1838 */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayReduce = __webpack_require__(1839),\n    baseEach = __webpack_require__(558),\n    baseIteratee = __webpack_require__(267),\n    baseReduce = __webpack_require__(1840),\n    isArray = __webpack_require__(64);\n\n/**\n * Reduces `collection` to a value which is the accumulated result of running\n * each element in `collection` thru `iteratee`, where each successive\n * invocation is supplied the return value of the previous. If `accumulator`\n * is not given, the first element of `collection` is used as the initial\n * value. The iteratee is invoked with four arguments:\n * (accumulator, value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.reduce`, `_.reduceRight`, and `_.transform`.\n *\n * The guarded methods are:\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n * and `sortBy`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @returns {*} Returns the accumulated value.\n * @see _.reduceRight\n * @example\n *\n * _.reduce([1, 2], function(sum, n) {\n *   return sum + n;\n * }, 0);\n * // => 3\n *\n * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n *   return result;\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n */\nfunction reduce(collection, iteratee, accumulator) {\n  var func = isArray(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3;\n\n  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n}\n\nmodule.exports = reduce;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/reduce.js\n// module id = 1838\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/reduce.js?");

/***/ }),
/* 1839 */
/***/ (function(module, exports) {

eval("/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayReduce.js\n// module id = 1839\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_arrayReduce.js?");

/***/ }),
/* 1840 */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.reduce` and `_.reduceRight`, without support\n * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} accumulator The initial value.\n * @param {boolean} initAccum Specify using the first or last element of\n *  `collection` as the initial value.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @returns {*} Returns the accumulated value.\n */\nfunction baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n  eachFunc(collection, function(value, index, collection) {\n    accumulator = initAccum\n      ? (initAccum = false, value)\n      : iteratee(accumulator, value, index, collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseReduce;\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseReduce.js\n// module id = 1840\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/node_modules/lodash/_baseReduce.js?");

/***/ }),
/* 1841 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n// We use an external library, which can be found here: https://github.com/fb55/htmlparser2.\n\nvar htmlparser = __webpack_require__(403);\nvar includes = __webpack_require__(147);\n// The array containing the text parts without the blocks defined in inlineTags.\nvar textArray = void 0;\n// False when we are not in a block defined in inlineTags. True if we are.\nvar inScriptBlock = false;\n// The blocks we filter out of the text that needs to be parsed.\nvar inlineTags = [\"script\", \"style\", \"code\", \"pre\"];\n/**\n * Parses the text.\n */\nvar parser = new htmlparser.Parser({\n    /**\n     * Handles the opening tag. If the opening tag is included in the inlineTags array, set inScriptBlock to true.\n     * If the opening tag is not included in the inlineTags array, push the tag to the textArray.\n     *\n     * @param {string} tagName The tag name.\n     * @param {object} nodeValue The attribute with the keys and values of the tag.\n     * @returns {void}\n     */\n    onopentag: function onopentag(tagName, nodeValue) {\n        if (includes(inlineTags, tagName)) {\n            inScriptBlock = true;\n            return;\n        }\n        var nodeValueType = Object.keys(nodeValue);\n        var nodeValueString = \"\";\n        nodeValueType.forEach(function (node) {\n            // Build the tag again.\n            nodeValueString += \" \" + node + \"='\" + nodeValue[node] + \"'\";\n        });\n        textArray.push(\"<\" + tagName + nodeValueString + \">\");\n    },\n    /**\n     * Handles the text that doesn't contain opening or closing tags. If inScriptBlock is false, the text gets pushed to the textArray array.\n     *\n     * @param {string} text The text that doesn't contain opening or closing tags.\n     *\n     * @returns {void}\n     */\n    ontext: function ontext(text) {\n        if (!inScriptBlock) {\n            textArray.push(text);\n        }\n    },\n    /**\n     * Handles the closing tag. If the closing tag is included in the inlineTags array, set inScriptBlock to false.\n     * If the closing tag is not included in the inlineTags array, push the tag to the textArray.\n     *\n     * @param {string} tagName The tag name.\n     *\n     * @returns {void}\n     */\n    onclosetag: function onclosetag(tagName) {\n        if (includes(inlineTags, tagName)) {\n            inScriptBlock = false;\n            return;\n        }\n        textArray.push(\"</\" + tagName + \">\");\n    }\n}, { decodeEntities: true });\n/**\n * Calls the htmlparser and returns the text without the HTML blocks as defined in the inlineTags array.\n *\n * @param {string} text The text to parse.\n * @returns {string} The text without the HTML blocks as defined in the inlineTags array.\n */\nmodule.exports = function (text) {\n    textArray = [];\n    parser.write(text);\n    return textArray.join(\"\");\n};\n//# sourceMappingURL=htmlParser.js.map\n//# sourceMappingURL=htmlParser.js.map\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/htmlParser.js\n// module id = 1841\n// module chunks = 4\n\n//# sourceURL=webpack:////Users/jimmy/Yoast/Wiki/master2develop/repositories/wordpress-seo/node_modules/yoastseo/js/stringProcessing/htmlParser.js?");

/***/ })
],[1789]);