<?php
// phpcs:disable Yoast.NamingConventions.NamespaceName.TooLong -- Needed in the folder structure.
// phpcs:disable Yoast.NamingConventions.NamespaceName.MaxExceeded
namespace Yoast\WP\SEO\Tests\Unit\Llms_Txt\Application\Markdown_Builders\Intro_Builder;

use Mockery;
use Yoast\WP\SEO\Llms_Txt\Domain\Markdown\Items\Link;
use Yoast\WP\SEO\Llms_Txt\Domain\Markdown\Sections\Intro;

/**
 * Tests build_intro.
 *
 * @group llms.txt
 *
 * @covers Yoast\WP\SEO\Llms_Txt\Application\Markdown_Builders\Intro_Builder::build_intro
 * @covers Yoast\WP\SEO\Llms_Txt\Application\Markdown_Builders\Intro_Builder::get_generator_version
 */
final class Build_Intro_Test extends Abstract_Intro_Builder_Test {

	/**
	 * Tests the build_description method when a Yoast sitemap exists.
	 *
	 * @return void
	 */
	public function test_build_intro() {
		$built_link = Mockery::mock( Link::class );
		$links      = [ $built_link ];

		$this->sitemap_link_collector
			->expects( 'get_link' )
			->once()
			->andReturn( $built_link );

		$built_intro = new Intro(
			'Generated by Yoast SEO v1.0, this is an llms.txt file, meant for consumption by LLMs.' . \PHP_EOL . \PHP_EOL . 'This is the %s of this website.',
			$links
		);
		$this->assertEquals( $built_intro, $this->instance->build_intro() );
	}

	/**
	 * Tests the build_description method when a Yoast sitemap does not exist.
	 *
	 * @return void
	 */
	public function test_build_intro_no_sitemap_link() {
		$this->sitemap_link_collector
			->expects( 'get_link' )
			->once()
			->andReturnNull();

		$built_intro = new Intro(
			'Generated by Yoast SEO v1.0, this is an llms.txt file, meant for consumption by LLMs.',
			[]
		);
		$this->assertEquals( $built_intro, $this->instance->build_intro() );
	}
}
