<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	name="Yoast SEO Free"
	xsi:noNamespaceSchemaLocation="./vendor/squizlabs/php_codesniffer/phpcs.xsd">

	<description>Yoast SEO Free rules for PHP_CodeSniffer</description>

	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	#############################################################################
	-->

	<file>.</file>

	<!-- Exclude dependency related files and generated files from being scanned. -->
	<exclude-pattern type="relative">^artifact/*\.php$</exclude-pattern>
	<exclude-pattern type="relative">^config/php-scoper/*\.php$</exclude-pattern>
	<exclude-pattern type="relative">^src/generated/*\.php$</exclude-pattern>
	<exclude-pattern type="relative">^languages/*\.php$</exclude-pattern>

	<!-- Only check PHP files. -->
	<arg name="extensions" value="php"/>

	<!-- Show progress, show the error codes for each message (source). -->
	<arg value="sp"/>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="."/>

	<!-- Check up to 12 files simultaneously. -->
	<arg name="parallel" value="12"/>

	<!-- Cache the results between runs. -->
	<arg name="cache" value="./.cache/phpcs-free.cache"/>


	<!--
	#############################################################################
	USE THE YoastCS RULESET
	#############################################################################
	-->

	<rule ref="Yoast">
		<properties>
			<!-- Provide the plugin specific prefixes for all naming related sniffs. -->
			<property name="prefixes" type="array">
				<element value="Yoast\WP\SEO"/>
				<element value="yoast_seo"/>
			</property>

			<!-- Set the custom test class list for all sniffs which use it in one go.
				 Ref: https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#custom-unit-test-classes
			-->
			<property name="custom_test_classes" type="array">
				<element value="Yoast\WP\SEO\Tests\Unit\TestCase"/>
				<element value="Yoast\WP\SEO\Tests\WP\TestCase"/>
			</property>

			<property name="psr4_paths" type="array">
				<element key="Yoast\WP\SEO\Tests\\" value="tests/"/>
			</property>
		</properties>
	</rule>

	<!-- Enforce PSR1 compatible namespaces. -->
	<rule ref="PSR1.Classes.ClassDeclaration">
		<!-- YoastCS only applies this rule to test files. Overrule it to also apply to src files. -->
		<include-pattern>*/config/*\.php$</include-pattern>
		<include-pattern>*/src/*\.php$</include-pattern>

		<exclude-pattern>*/src/deprecated/*\.php$</exclude-pattern>
		<exclude-pattern>*/src/config/migrations/*\.php$</exclude-pattern>
	</rule>


	<!--
	#############################################################################
	SNIFF SPECIFIC CONFIGURATION
	#############################################################################
	-->

	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="wordpress-seo"/>
				<element value="default"/>
			</property>
		</properties>
	</rule>

	<rule ref="Yoast.Files.FileName">
		<properties>
			<property name="excluded_files_strict_check" type="array">
				<!-- Don't trigger on the main file(s) as renaming it would deactivate the plugin. -->
				<element value="wp-seo.php"/>
				<element value="wp-seo-main.php"/>
				<!-- Don't trigger on select view related files. -->
				<element value="admin/views/tool-bulk-editor.php"/>
			</property>

			<!-- Remove the following prefixes from the names of object structures. -->
			<property name="oo_prefixes" type="array">
				<element value="yoast_seo"/>

				<!-- Temporary: once all prefixes have been fixed, these two elements should be removed. -->
				<element value="wpseo"/>
				<element value="yoast"/>
			</property>
		</properties>

		<!-- Exclude the migrations directory from filename checks, as we do not have control over this format -->
		<exclude-pattern>/src/config/migrations/*\.php$</exclude-pattern>
	</rule>

	<rule ref="Yoast.NamingConventions.ObjectNameDepth">
		<properties>
			<property name="max_words" value="5" />
			<property name="recommended_max_words" value="5" />
		</properties>
	</rule>

	<rule ref="Yoast.NamingConventions.NamespaceName">
		<properties>
			<!-- Indicate which directories should be treated as project root directories for
				 path-to-namespace translations. -->
			<property name="src_directory" type="array">
				<element value="config"/>
				<element value="src"/>
				<element value="src/deprecated/src"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<!-- We discovered that WP_Filesystem can lead to unexpected behaviour.
				 See https://github.com/Yoast/wordpress-seo/pull/15713 -->
			<property name="exclude" type="array" extend="true">
				<element value="file_system_operations"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="maxColumn" value="70"/>
		</properties>
	</rule>

	<!-- Make sure custom capabilities are recognized. -->
	<rule ref="WordPress.WP.Capabilities">
		<properties>
			<property name="custom_capabilities" type="array">
				<element value="wpseo_manage_network_options"/>
				<element value="wpseo_manage_options"/>
			</property>
		</properties>
	</rule>

	<!-- Excluded in WPCS, but the exclusion does not work well with a code base using short arrays.
		 This may lead to some duplicate notices, but rather that, than these issues not being flagged.
		 Note: this change will be included in YoastCS 3.1.1 and this tweak can be removed after that.
	-->
	<rule ref="Universal.WhiteSpace.CommaSpacing.SpaceBeforeInFunctionCall">
		<severity>5</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterInFunctionCall">
		<severity>5</severity>
	</rule>
	<rule ref="Universal.WhiteSpace.CommaSpacing.NoSpaceAfterInFunctionCall">
		<severity>5</severity>
	</rule>


	<!--
	##########################################################################
	SELECTIVE EXCLUSIONS
	Exclude specific files for specific sniffs.
	#############################################################################
	-->

	<!-- For named parameter support, the parameters in the overloaded methods *must*
		 mirror the parameter name as used in Symfony itself.
		 These cannot be changed until Symfony itself changes the names. -->
	<rule ref="Universal.NamingConventions.NoReservedKeywordParameterNames.namespaceFound">
		<exclude-pattern>/config/dependency-injection/custom-loader\.php$</exclude-pattern>
	</rule>
	<rule ref="Universal.NamingConventions.NoReservedKeywordParameterNames.resourceFound">
		<exclude-pattern>/config/dependency-injection/custom-loader\.php$</exclude-pattern>
	</rule>

	<!-- Exclude the "lib" folder from select naming conventions.
		 The intention is to extract this to a separate package, so the names are
		 based on the "future" package. -->
	<rule ref="Yoast.NamingConventions.NamespaceName">
		<exclude-pattern type="relative">/lib/([a-z-]+/)?[^/]+\.php$</exclude-pattern>
	</rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedNamespaceFound">
		<exclude-pattern type="relative">/lib/([a-z-]+/)?[^/]+\.php$</exclude-pattern>
	</rule>

	<!-- Exclude select directories from the object depth naming convention check. -->
	<rule ref="Yoast.NamingConventions.ObjectNameDepth.MaxExceeded">
		<exclude-pattern>/src/config/migrations/*</exclude-pattern>
	</rule>

	<!-- Exclude third-party from being checked too roughly. -->
	<rule ref="Yoast.NamingConventions.NamespaceName.TooLong">
		<exclude-pattern>/src/generators/schema/third-party/*</exclude-pattern>
	</rule>

	<!-- DEPRECATED CODE -->

	<!-- Files which are excluded for code-coverage in the phpunit.xml.dist file should
		 also be excluded for this sniff.
		 Note: the lists in phpunit.xml.dist and here should be kept in sync! -->
	<rule ref="Yoast.Commenting.CodeCoverageIgnoreDeprecated">
		<exclude-pattern>/src/deprecated/*</exclude-pattern>
		<exclude-pattern>/inc/wpseo-functions-deprecated\.php$</exclude-pattern>
	</rule>

	<!-- Ignore unused function parameters in deprecated functionality. -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter">
		<exclude-pattern>/src/deprecated/*</exclude-pattern>
		<exclude-pattern>/inc/wpseo-functions-deprecated\.php$</exclude-pattern>
	</rule>

	<!-- Ignore unused variables in deprecated functionality. -->
	<rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable">
		<exclude-pattern>/src/deprecated/*</exclude-pattern>
		<exclude-pattern>/inc/wpseo-functions-deprecated\.php$</exclude-pattern>
	</rule>

	<!-- Exclude deprecated code from select sniffs regarding naming conventions.
		 These classes are still available to prevent BC-breaks and renaming them would
		 create a BC-break. -->
	<rule ref="Universal.NamingConventions.NoReservedKeywordParameterNames">
		<exclude-pattern>/src/deprecated/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<exclude-pattern>/src/deprecated/*</exclude-pattern>
	</rule>
	<rule ref="Yoast.Files.FileName">
		<exclude-pattern>/src/deprecated/*</exclude-pattern>
	</rule>


	<!-- TEST CODE -->

	<!-- Valid usage: For testing purposes, some non-prefixed globals are being created, which is fine. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<exclude-pattern>/tests/*/bootstrap\.php$</exclude-pattern>
	</rule>

	<!-- Direct DB queries to retrieve the comparison data for tests or to create a test case, is fine. -->
	<rule ref="WordPress.DB.DirectDatabaseQuery">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<!-- Valid usage: For setting up/tearing down a test situation, it is better to use the PHP native functions. -->
	<rule ref="WordPress.WP.AlternativeFunctions.unlink_unlink">
		<exclude-pattern>/tests/WP/Formatter/Metabox_Formatter_Test\.php$</exclude-pattern>
	</rule>

	<!-- Valid usage: Mocking the WP native wp_parse_url() function. -->
	<rule ref="WordPress.WP.AlternativeFunctions.parse_url_parse_url">
		<exclude-pattern>/tests/Unit/*\.php$</exclude-pattern>
	</rule>

	<!-- Test code does not go into production, so security is not an issue. -->
	<rule ref="WordPress.Security">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<!-- Changing the cron interval to test things, is fine. -->
	<rule ref="WordPress.WP.CronInterval">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<!-- For documentation of the double/mock classes, please refer to the _real_ classes. -->
	<rule ref="Squiz.Commenting.FunctionComment.Missing">
		<exclude-pattern>/tests/*/Doubles/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.MissingParamTag">
		<exclude-pattern>/tests/*/Doubles/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment.Missing">
		<exclude-pattern>/tests/*/Doubles/*</exclude-pattern>
	</rule>


	<!--
	#############################################################################
	TEMPORARY ADJUSTMENTS
	Adjustments which should be removed once the associated issue has been resolved.
	#############################################################################
	-->

	<!-- Temporary: Only enable the file name rules for the "new" code for now.
		 The "old" code has a lot of violations against this rule.
		 Fixing this should be a coordinated effort, which is why we will ignore
		 this rule for the "old" code for now.
	-->
	<rule ref="Yoast.Files.FileName">
		<include-pattern>/config/*\.php$</include-pattern>
		<include-pattern>/lib/*\.php$</include-pattern>
		<include-pattern>/src/*\.php$</include-pattern>
		<include-pattern>/tests/*\.php$</include-pattern>
	</rule>

	<!-- Only enable the prefix all globals rules for the "new" code for now.
		 The "old" code has a lot of violations against this rule, mostly inconsistent
		 prefixes. Fixing this should be a coordinated effort, which is why we will ignore
		 this rule for the "old" code for now.
	-->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<include-pattern>*/config/*\.php$</include-pattern>
		<include-pattern>*/lib/*\.php$</include-pattern>
		<include-pattern>*/src/*\.php$</include-pattern>
		<include-pattern>*/tests/*\.php$</include-pattern>

		<!-- Exclude hooks everywhere for the time being until the prefixes will be fixed. -->
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound"/>
	</rule>

</ruleset>
