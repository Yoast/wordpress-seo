(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

/* global YoastCustomFieldsPluginL10 */
/* global YoastSEO */
/* global _ */
(function () {
	/**
  * The Yoast Custom Fields Plugin adds the custom fields to the content that were defined in the titles and meta's
  * section of the Yoast SEO settings when those fields are available.
  *
  * @constructor
  * @property {Array} customFieldNames
  * @property {Object} customFields
  */
	var YoastCustomFieldsPlugin = function YoastCustomFieldsPlugin() {
		YoastSEO.app.registerPlugin("YoastCustomFieldsPlugin", { status: "loading" });

		this.customFields = {};

		this.updateCustomFields();
		this.declareReady();
	};

	/**
  * Declares ready with YoastSEO.
  *
  * @returns {void}
  */
	YoastCustomFieldsPlugin.prototype.declareReady = function () {
		YoastSEO.app.pluginReady("YoastCustomFieldsPlugin");
		YoastSEO.app.registerModification("content", this.addCustomFields.bind(this), "YoastCustomFieldsPlugin");
	};

	/**
  * Declares reloaded with YoastSEO.
  *
  * @returns {void}
  */
	YoastCustomFieldsPlugin.prototype.declareReloaded = function () {
		YoastSEO.app.pluginReloaded("YoastCustomFieldsPlugin");
	};

	/**
  * The callback used to add the custom fields to the content to be analyzed by YoastSEO.js.
  *
  * @param {String} content The content for adding the custom fields to.
  * @returns {String} The content.
  */
	YoastCustomFieldsPlugin.prototype.addCustomFields = function (content) {
		for (var fieldName in this.customFields) {
			content += " ";
			content += this.customFields[fieldName];
		}
		return content;
	};

	/**
  * Fetches the relevant custom fields from the form and saves them in a property.
  * Then declares reloaded and rebinds the custom fields form.
  *
  * @returns {void}
  */
	YoastCustomFieldsPlugin.prototype.updateCustomFields = function () {
		var customFields = {};
		jQuery("#the-list > tr:visible").each(function (i, el) {
			var customFieldName = jQuery("#" + el.id + "-key").val();
			if (YoastCustomFieldsPluginL10.custom_field_names.indexOf(customFieldName) !== -1) {
				customFields[customFieldName] = jQuery("#" + el.id + "-value").val();
			}
		});
		this.customFields = customFields;
		this.declareReloaded();
		this.bindCustomFields();
	};

	/**
  * Adds the necessary event bindings for monitoring which custom fields are added/removed/updated.
  *
  * @returns {void}
  */
	YoastCustomFieldsPlugin.prototype.bindCustomFields = function () {
		var callback = _.debounce(this.updateCustomFields.bind(this), 500, true);

		jQuery("#the-list .button + .update_meta").off("click.wpseoCustomFields").on("click.wpseoCustomFields", callback);
		jQuery("#the-list").off("wpListDelEnd.wpseoCustomFields").on("wpListDelEnd.wpseoCustomFields", callback);
		jQuery("#the-list").off("wpListAddEnd.wpseoCustomFields").on("wpListAddEnd.wpseoCustomFields", callback);
		jQuery("#the-list textarea").off("input.wpseoCustomFields").on("input.wpseoCustomFields", callback);
	};

	if (typeof YoastSEO !== "undefined" && typeof YoastSEO.app !== "undefined") {
		new YoastCustomFieldsPlugin();
	} else {
		jQuery(window).on("YoastSEO:ready", function () {
			new YoastCustomFieldsPlugin();
		});
	}
})();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvc3JjL2N1c3RvbS1maWVsZHMtcGx1Z2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQTtBQUNBO0FBQ0E7QUFDRSxhQUFXO0FBQ1o7Ozs7Ozs7O0FBUUEsS0FBSSwwQkFBMEIsU0FBMUIsdUJBQTBCLEdBQVc7QUFDeEMsV0FBUyxHQUFULENBQWEsY0FBYixDQUE2Qix5QkFBN0IsRUFBd0QsRUFBRSxRQUFRLFNBQVYsRUFBeEQ7O0FBRUEsT0FBSyxZQUFMLEdBQW9CLEVBQXBCOztBQUVBLE9BQUssa0JBQUw7QUFDQSxPQUFLLFlBQUw7QUFDQSxFQVBEOztBQVNBOzs7OztBQUtBLHlCQUF3QixTQUF4QixDQUFrQyxZQUFsQyxHQUFpRCxZQUFXO0FBQzNELFdBQVMsR0FBVCxDQUFhLFdBQWIsQ0FBMEIseUJBQTFCO0FBQ0EsV0FBUyxHQUFULENBQWEsb0JBQWIsQ0FBbUMsU0FBbkMsRUFBOEMsS0FBSyxlQUFMLENBQXFCLElBQXJCLENBQTJCLElBQTNCLENBQTlDLEVBQWlGLHlCQUFqRjtBQUNBLEVBSEQ7O0FBS0E7Ozs7O0FBS0EseUJBQXdCLFNBQXhCLENBQWtDLGVBQWxDLEdBQW9ELFlBQVc7QUFDOUQsV0FBUyxHQUFULENBQWEsY0FBYixDQUE2Qix5QkFBN0I7QUFDQSxFQUZEOztBQUlBOzs7Ozs7QUFNQSx5QkFBd0IsU0FBeEIsQ0FBa0MsZUFBbEMsR0FBb0QsVUFBVSxPQUFWLEVBQW9CO0FBQ3ZFLE9BQUssSUFBSSxTQUFULElBQXNCLEtBQUssWUFBM0IsRUFBMEM7QUFDekMsY0FBVyxHQUFYO0FBQ0EsY0FBVyxLQUFLLFlBQUwsQ0FBbUIsU0FBbkIsQ0FBWDtBQUNBO0FBQ0QsU0FBTyxPQUFQO0FBQ0EsRUFORDs7QUFRQTs7Ozs7O0FBTUEseUJBQXdCLFNBQXhCLENBQWtDLGtCQUFsQyxHQUF1RCxZQUFXO0FBQ2pFLE1BQUksZUFBZSxFQUFuQjtBQUNBLFNBQVEsd0JBQVIsRUFBbUMsSUFBbkMsQ0FDQyxVQUFVLENBQVYsRUFBYSxFQUFiLEVBQWtCO0FBQ2pCLE9BQUksa0JBQWtCLE9BQVEsTUFBTSxHQUFHLEVBQVQsR0FBYyxNQUF0QixFQUErQixHQUEvQixFQUF0QjtBQUNBLE9BQUssMkJBQTJCLGtCQUEzQixDQUE4QyxPQUE5QyxDQUF1RCxlQUF2RCxNQUE2RSxDQUFDLENBQW5GLEVBQXVGO0FBQ3RGLGlCQUFjLGVBQWQsSUFBa0MsT0FBUSxNQUFNLEdBQUcsRUFBVCxHQUFjLFFBQXRCLEVBQWlDLEdBQWpDLEVBQWxDO0FBQ0E7QUFDRCxHQU5GO0FBUUEsT0FBSyxZQUFMLEdBQW9CLFlBQXBCO0FBQ0EsT0FBSyxlQUFMO0FBQ0EsT0FBSyxnQkFBTDtBQUNBLEVBYkQ7O0FBZUE7Ozs7O0FBS0EseUJBQXdCLFNBQXhCLENBQWtDLGdCQUFsQyxHQUFxRCxZQUFXO0FBQy9ELE1BQUksV0FBVyxFQUFFLFFBQUYsQ0FBWSxLQUFLLGtCQUFMLENBQXdCLElBQXhCLENBQThCLElBQTlCLENBQVosRUFBa0QsR0FBbEQsRUFBdUQsSUFBdkQsQ0FBZjs7QUFFQSxTQUFRLGtDQUFSLEVBQTZDLEdBQTdDLENBQWtELHlCQUFsRCxFQUE4RSxFQUE5RSxDQUFrRix5QkFBbEYsRUFBNkcsUUFBN0c7QUFDQSxTQUFRLFdBQVIsRUFBc0IsR0FBdEIsQ0FBMkIsZ0NBQTNCLEVBQThELEVBQTlELENBQWtFLGdDQUFsRSxFQUFvRyxRQUFwRztBQUNBLFNBQVEsV0FBUixFQUFzQixHQUF0QixDQUEyQixnQ0FBM0IsRUFBOEQsRUFBOUQsQ0FBa0UsZ0NBQWxFLEVBQW9HLFFBQXBHO0FBQ0EsU0FBUSxvQkFBUixFQUErQixHQUEvQixDQUFvQyx5QkFBcEMsRUFBZ0UsRUFBaEUsQ0FBb0UseUJBQXBFLEVBQStGLFFBQS9GO0FBQ0EsRUFQRDs7QUFTQSxLQUFLLE9BQU8sUUFBUCxLQUFvQixXQUFwQixJQUFtQyxPQUFPLFNBQVMsR0FBaEIsS0FBd0IsV0FBaEUsRUFBOEU7QUFDN0UsTUFBSSx1QkFBSjtBQUNBLEVBRkQsTUFFTztBQUNOLFNBQVEsTUFBUixFQUFpQixFQUFqQixDQUNDLGdCQURELEVBRUMsWUFBVztBQUNWLE9BQUksdUJBQUo7QUFDQSxHQUpGO0FBTUE7QUFDRCxDQWhHQyxHQUFGIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qIGdsb2JhbCBZb2FzdEN1c3RvbUZpZWxkc1BsdWdpbkwxMCAqL1xuLyogZ2xvYmFsIFlvYXN0U0VPICovXG4vKiBnbG9iYWwgXyAqL1xuKCBmdW5jdGlvbigpIHtcblx0LyoqXG5cdCAqIFRoZSBZb2FzdCBDdXN0b20gRmllbGRzIFBsdWdpbiBhZGRzIHRoZSBjdXN0b20gZmllbGRzIHRvIHRoZSBjb250ZW50IHRoYXQgd2VyZSBkZWZpbmVkIGluIHRoZSB0aXRsZXMgYW5kIG1ldGEnc1xuXHQgKiBzZWN0aW9uIG9mIHRoZSBZb2FzdCBTRU8gc2V0dGluZ3Mgd2hlbiB0aG9zZSBmaWVsZHMgYXJlIGF2YWlsYWJsZS5cblx0ICpcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBwcm9wZXJ0eSB7QXJyYXl9IGN1c3RvbUZpZWxkTmFtZXNcblx0ICogQHByb3BlcnR5IHtPYmplY3R9IGN1c3RvbUZpZWxkc1xuXHQgKi9cblx0dmFyIFlvYXN0Q3VzdG9tRmllbGRzUGx1Z2luID0gZnVuY3Rpb24oKSB7XG5cdFx0WW9hc3RTRU8uYXBwLnJlZ2lzdGVyUGx1Z2luKCBcIllvYXN0Q3VzdG9tRmllbGRzUGx1Z2luXCIsIHsgc3RhdHVzOiBcImxvYWRpbmdcIiB9ICk7XG5cblx0XHR0aGlzLmN1c3RvbUZpZWxkcyA9IHt9O1xuXG5cdFx0dGhpcy51cGRhdGVDdXN0b21GaWVsZHMoKTtcblx0XHR0aGlzLmRlY2xhcmVSZWFkeSgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWNsYXJlcyByZWFkeSB3aXRoIFlvYXN0U0VPLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdFlvYXN0Q3VzdG9tRmllbGRzUGx1Z2luLnByb3RvdHlwZS5kZWNsYXJlUmVhZHkgPSBmdW5jdGlvbigpIHtcblx0XHRZb2FzdFNFTy5hcHAucGx1Z2luUmVhZHkoIFwiWW9hc3RDdXN0b21GaWVsZHNQbHVnaW5cIiApO1xuXHRcdFlvYXN0U0VPLmFwcC5yZWdpc3Rlck1vZGlmaWNhdGlvbiggXCJjb250ZW50XCIsIHRoaXMuYWRkQ3VzdG9tRmllbGRzLmJpbmQoIHRoaXMgKSwgXCJZb2FzdEN1c3RvbUZpZWxkc1BsdWdpblwiICk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlY2xhcmVzIHJlbG9hZGVkIHdpdGggWW9hc3RTRU8uXG5cdCAqXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0WW9hc3RDdXN0b21GaWVsZHNQbHVnaW4ucHJvdG90eXBlLmRlY2xhcmVSZWxvYWRlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdFlvYXN0U0VPLmFwcC5wbHVnaW5SZWxvYWRlZCggXCJZb2FzdEN1c3RvbUZpZWxkc1BsdWdpblwiICk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFRoZSBjYWxsYmFjayB1c2VkIHRvIGFkZCB0aGUgY3VzdG9tIGZpZWxkcyB0byB0aGUgY29udGVudCB0byBiZSBhbmFseXplZCBieSBZb2FzdFNFTy5qcy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnQgVGhlIGNvbnRlbnQgZm9yIGFkZGluZyB0aGUgY3VzdG9tIGZpZWxkcyB0by5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIGNvbnRlbnQuXG5cdCAqL1xuXHRZb2FzdEN1c3RvbUZpZWxkc1BsdWdpbi5wcm90b3R5cGUuYWRkQ3VzdG9tRmllbGRzID0gZnVuY3Rpb24oIGNvbnRlbnQgKSB7XG5cdFx0Zm9yKCB2YXIgZmllbGROYW1lIGluIHRoaXMuY3VzdG9tRmllbGRzICkge1xuXHRcdFx0Y29udGVudCArPSBcIiBcIjtcblx0XHRcdGNvbnRlbnQgKz0gdGhpcy5jdXN0b21GaWVsZHNbIGZpZWxkTmFtZSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gY29udGVudDtcblx0fTtcblxuXHQvKipcblx0ICogRmV0Y2hlcyB0aGUgcmVsZXZhbnQgY3VzdG9tIGZpZWxkcyBmcm9tIHRoZSBmb3JtIGFuZCBzYXZlcyB0aGVtIGluIGEgcHJvcGVydHkuXG5cdCAqIFRoZW4gZGVjbGFyZXMgcmVsb2FkZWQgYW5kIHJlYmluZHMgdGhlIGN1c3RvbSBmaWVsZHMgZm9ybS5cblx0ICpcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRZb2FzdEN1c3RvbUZpZWxkc1BsdWdpbi5wcm90b3R5cGUudXBkYXRlQ3VzdG9tRmllbGRzID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1c3RvbUZpZWxkcyA9IHt9O1xuXHRcdGpRdWVyeSggXCIjdGhlLWxpc3QgPiB0cjp2aXNpYmxlXCIgKS5lYWNoKFxuXHRcdFx0ZnVuY3Rpb24oIGksIGVsICkge1xuXHRcdFx0XHR2YXIgY3VzdG9tRmllbGROYW1lID0galF1ZXJ5KCBcIiNcIiArIGVsLmlkICsgXCIta2V5XCIgKS52YWwoKTtcblx0XHRcdFx0aWYgKCBZb2FzdEN1c3RvbUZpZWxkc1BsdWdpbkwxMC5jdXN0b21fZmllbGRfbmFtZXMuaW5kZXhPZiggY3VzdG9tRmllbGROYW1lICkgIT09IC0xICkge1xuXHRcdFx0XHRcdGN1c3RvbUZpZWxkc1sgY3VzdG9tRmllbGROYW1lIF0gPSBqUXVlcnkoIFwiI1wiICsgZWwuaWQgKyBcIi12YWx1ZVwiICkudmFsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpO1xuXHRcdHRoaXMuY3VzdG9tRmllbGRzID0gY3VzdG9tRmllbGRzO1xuXHRcdHRoaXMuZGVjbGFyZVJlbG9hZGVkKCk7XG5cdFx0dGhpcy5iaW5kQ3VzdG9tRmllbGRzKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEFkZHMgdGhlIG5lY2Vzc2FyeSBldmVudCBiaW5kaW5ncyBmb3IgbW9uaXRvcmluZyB3aGljaCBjdXN0b20gZmllbGRzIGFyZSBhZGRlZC9yZW1vdmVkL3VwZGF0ZWQuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0WW9hc3RDdXN0b21GaWVsZHNQbHVnaW4ucHJvdG90eXBlLmJpbmRDdXN0b21GaWVsZHMgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBfLmRlYm91bmNlKCB0aGlzLnVwZGF0ZUN1c3RvbUZpZWxkcy5iaW5kKCB0aGlzICksIDUwMCwgdHJ1ZSApO1xuXG5cdFx0alF1ZXJ5KCBcIiN0aGUtbGlzdCAuYnV0dG9uICsgLnVwZGF0ZV9tZXRhXCIgKS5vZmYoIFwiY2xpY2sud3BzZW9DdXN0b21GaWVsZHNcIiApLm9uKCBcImNsaWNrLndwc2VvQ3VzdG9tRmllbGRzXCIsIGNhbGxiYWNrICk7XG5cdFx0alF1ZXJ5KCBcIiN0aGUtbGlzdFwiICkub2ZmKCBcIndwTGlzdERlbEVuZC53cHNlb0N1c3RvbUZpZWxkc1wiICkub24oIFwid3BMaXN0RGVsRW5kLndwc2VvQ3VzdG9tRmllbGRzXCIsIGNhbGxiYWNrICk7XG5cdFx0alF1ZXJ5KCBcIiN0aGUtbGlzdFwiICkub2ZmKCBcIndwTGlzdEFkZEVuZC53cHNlb0N1c3RvbUZpZWxkc1wiICkub24oIFwid3BMaXN0QWRkRW5kLndwc2VvQ3VzdG9tRmllbGRzXCIsIGNhbGxiYWNrICk7XG5cdFx0alF1ZXJ5KCBcIiN0aGUtbGlzdCB0ZXh0YXJlYVwiICkub2ZmKCBcImlucHV0Lndwc2VvQ3VzdG9tRmllbGRzXCIgKS5vbiggXCJpbnB1dC53cHNlb0N1c3RvbUZpZWxkc1wiLCBjYWxsYmFjayApO1xuXHR9O1xuXG5cdGlmICggdHlwZW9mIFlvYXN0U0VPICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBZb2FzdFNFTy5hcHAgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0bmV3IFlvYXN0Q3VzdG9tRmllbGRzUGx1Z2luKCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5KCB3aW5kb3cgKS5vbihcblx0XHRcdFwiWW9hc3RTRU86cmVhZHlcIixcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRuZXcgWW9hc3RDdXN0b21GaWVsZHNQbHVnaW4oKTtcblx0XHRcdH1cblx0XHQpO1xuXHR9XG59KCkgKTtcbiJdfQ==
