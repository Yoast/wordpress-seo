yoastPremiumWebpackJsonp([8],{

/***/ 887:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* jshint -W097 */\n/* jshint -W098 */\n/* jshint -W107 */\n/* global ajaxurl, alert, wpseoPremiumStrings, wp, _, wpseoSelect2Locale */\n\n(function ($) {\n\tvar ALLOW_EMPTY_TARGET = [410, 451];\n\n\tvar TABLE_COLUMNS = {\n\t\tORIGIN: 1,\n\t\tTARGET: 2,\n\t\tTYPE: 0\n\t};\n\n\tvar KEYS = {\n\t\tENTER: 13\n\t};\n\n\tvar templateQuickEdit;\n\n\t/**\n  * Initialize a redirect form object.\n  *\n  * @param {element} form The redirect form.\n  * @constructor\n  */\n\tvar RedirectForm = function RedirectForm(form) {\n\t\tthis.form = form;\n\t};\n\n\t/**\n  * Returns the origin field\n  *\n  * @returns {element} The field for the redirect origin.\n  */\n\tRedirectForm.prototype.getOriginField = function () {\n\t\treturn this.form.find(\"input[name=wpseo_redirects_origin]\");\n\t};\n\n\t/**\n  * Returns the target field\n  *\n  * @returns {element} The field for the redirect target.\n  */\n\tRedirectForm.prototype.getTargetField = function () {\n\t\treturn this.form.find(\"input[name=wpseo_redirects_target]\");\n\t};\n\n\t/**\n  * Returns the type field\n  *\n  * @returns {element} The field for redirect type.\n  */\n\tRedirectForm.prototype.getTypeField = function () {\n\t\treturn this.form.find(\"select[name=wpseo_redirects_type]\");\n\t};\n\n\t/**\n  * Clears the form error message.\n  *\n  * @returns {void}\n  */\n\tRedirectForm.prototype.clearErrorMessage = function () {\n\t\tthis.form.find(\".wpseo_redirect_form .form_error\").remove();\n\t};\n\n\t/**\n  * Sets a form error message.\n  *\n  * @param {string} errorMessage The error message to set.\n  *\n  * @returns {void}\n  */\n\tRedirectForm.prototype.setErrorMessage = function (errorMessage) {\n\t\tthis.form.find(\".wpseo_redirect_form\").prepend(\"<div class=\\\"form_error error\\\"><p>\" + errorMessage + \"</p></div>\");\n\t};\n\n\t/**\n  * Removing the row errors\n  *\n  * @returns {void}\n  */\n\tRedirectForm.prototype.removeRowHighlights = function () {\n\t\tthis.form.find(\".redirect_form_row\").removeClass(\"field_error\");\n\t};\n\n\t/**\n  * Highlighting the row errors.\n  *\n  * @param {array} fieldsToHighlight The fields to highlight.\n  *\n  * @returns {void}\n  */\n\tRedirectForm.prototype.highLightRowErrors = function (fieldsToHighlight) {\n\t\tfor (var i = 0; i < fieldsToHighlight.length; i++) {\n\t\t\tswitch (fieldsToHighlight[i]) {\n\t\t\t\tcase \"origin\":\n\t\t\t\t\tthis.highlightRow(this.getOriginField());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"target\":\n\t\t\t\t\tthis.highlightRow(this.getTargetField());\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"type\":\n\t\t\t\t\tthis.highlightRow(this.getTypeField());\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n  * Highlights the closest row with an error class.\n  *\n  * @param {element} errorField The field to hightlight.\n  *\n  * @returns {void}\n  */\n\tRedirectForm.prototype.highlightRow = function (errorField) {\n\t\tjQuery(errorField).closest(\"div.redirect_form_row\").addClass(\"field_error\");\n\t};\n\n\t/**\n  * Clientside validator for the redirect\n  *\n  * @param {RedirectForm} form Form object representing the form.\n  * @param {string} type       The redirect type.\n  *\n  * @returns {void}\n  */\n\tvar ValidateRedirect = function ValidateRedirect(form, type) {\n\t\tthis.form = form;\n\t\tthis.type = type;\n\t\tthis.validationError = \"\";\n\t};\n\n\t/**\n  * Validates for the form fields\n  *\n  * @returns {boolean} True when validation has been successful.\n  */\n\tValidateRedirect.prototype.validate = function () {\n\t\tthis.form.clearErrorMessage();\n\n\t\tthis.form.removeRowHighlights();\n\n\t\tif (this.runValidation(this.form.getOriginField(), this.form.getTargetField(), this.form.getTypeField()) === false) {\n\t\t\tthis.addValidationError(this.validationError);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t/**\n  * Executes the validation.\n  *\n  * @param {element} originField The origin field.\n  * @param {element} targetField The target field.\n  * @param {element} typeField   The type field.\n  * @returns {boolean} True when validation has been successful.\n  */\n\tValidateRedirect.prototype.runValidation = function (originField, targetField, typeField) {\n\t\t// Check old URL.\n\t\tif (\"\" === originField.val()) {\n\t\t\tthis.form.highlightRow(originField);\n\n\t\t\tif (\"plain\" === this.type) {\n\t\t\t\treturn this.setError(wpseoPremiumStrings.error_old_url);\n\t\t\t}\n\n\t\t\treturn this.setError(wpseoPremiumStrings.error_regex);\n\t\t}\n\n\t\t// Only when the redirect type is not deleted.\n\t\tif (jQuery.inArray(parseInt(typeField.val(), 10), ALLOW_EMPTY_TARGET) === -1) {\n\t\t\t// Check new URL.\n\t\t\tif (\"\" === targetField.val()) {\n\t\t\t\tthis.form.highlightRow(targetField);\n\t\t\t\treturn this.setError(wpseoPremiumStrings.error_new_url);\n\t\t\t}\n\n\t\t\t// Check if both fields aren't the same.\n\t\t\tif (targetField.val() === originField.val()) {\n\t\t\t\tthis.form.highlightRow(targetField);\n\t\t\t\treturn this.setError(wpseoPremiumStrings.error_circular);\n\t\t\t}\n\t\t}\n\n\t\t// Check the redirect type.\n\t\tif (\"\" === typeField.val()) {\n\t\t\tthis.form.highlightRow(typeField);\n\t\t\treturn this.setError(wpseoPremiumStrings.error_new_type);\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t/**\n  * Sets the validation error and return false.\n  *\n  * @param {string} error The error to set.\n  * @returns {boolean} False, because there is an error.\n  */\n\tValidateRedirect.prototype.setError = function (error) {\n\t\tthis.validationError = error;\n\t\treturn false;\n\t};\n\n\t/**\n  * Adding the validation error\n  *\n  * @param {string} error  The error message.\n  * @param {object} fields The fields related to the error.\n  *\n  * @returns {void}\n  */\n\tValidateRedirect.prototype.addValidationError = function (error, fields) {\n\t\tthis.form.setErrorMessage(error);\n\n\t\tif (typeof fields !== \"undefined\") {\n\t\t\tthis.form.highLightRowErrors(fields);\n\t\t}\n\t};\n\n\t/**\n  * Returns the values on the quick edit form\n  *\n  * @returns {{origin: (string|*), target: (string|*), type: (string|*)}} Object with the form values.\n  */\n\tValidateRedirect.prototype.getFormValues = function () {\n\t\tvar values = {\n\t\t\torigin: this.form.getOriginField().val().toString(),\n\t\t\ttarget: this.form.getTargetField().val().toString(),\n\t\t\ttype: this.form.getTypeField().val().toString()\n\t\t};\n\n\t\t// When the redirect type is deleted or unavailable, the target can be emptied.\n\t\tif (jQuery.inArray(parseInt(values.type, 10), ALLOW_EMPTY_TARGET) > -1) {\n\t\t\tvalues.target = \"\";\n\t\t}\n\n\t\treturn values;\n\t};\n\n\t/**\n  * The quick edit prototype for handling the quick edit on form rows.\n  * @constructor\n  */\n\tvar RedirectQuickEdit = function RedirectQuickEdit() {\n\t\tthis.row = null;\n\t\tthis.quickEditRow = null;\n\t};\n\n\t/**\n  * Setting upt the quick edit for a row, with the given row values.\n  *\n  * @param {element} row     The form row object.\n  * @param {object} rowCells The form row cells.\n  *\n  * @returns {void}\n  */\n\tRedirectQuickEdit.prototype.setup = function (row, rowCells) {\n\t\tthis.row = row;\n\t\tthis.quickEditRow = $(templateQuickEdit({\n\t\t\torigin: _.unescape(rowCells.origin.html()),\n\t\t\ttarget: _.unescape(rowCells.target.html()),\n\t\t\ttype: parseInt(rowCells.type.html(), 10),\n\t\t\tsuffix: $(\"#the-list\").find(\"tr\").index(row)\n\t\t}));\n\t};\n\n\t/**\n  * Returns the original row element\n  *\n  * @returns {element} The row object.\n  */\n\tRedirectQuickEdit.prototype.getRow = function () {\n\t\treturn this.row;\n\t};\n\n\t/**\n  * Returns the original row element\n  *\n  * @returns {element} The form object.\n  */\n\tRedirectQuickEdit.prototype.getForm = function () {\n\t\treturn this.quickEditRow;\n\t};\n\n\t/**\n  * Shows the quick edit form and hides the redirect row.\n  *\n  * @returns {void}\n  */\n\tRedirectQuickEdit.prototype.show = function () {\n\t\tthis.row.addClass(\"hidden\");\n\t\tthis.quickEditRow.insertAfter(this.row).show(400, function () {\n\t\t\t$(this).find(\":input\").first().focus();\n\t\t});\n\t};\n\n\t/**\n  * Hides the quick edit form and show the redirect row.\n  *\n  * @returns {void}\n  */\n\tRedirectQuickEdit.prototype.remove = function () {\n\t\tthis.row.removeClass(\"hidden\");\n\t\tthis.quickEditRow.remove();\n\t};\n\n\t// Instantiate the quick edit form.\n\tvar redirectsQuickEdit = new RedirectQuickEdit();\n\n\t// Extend the jQuery UI dialog widget for our needs.\n\t$.widget(\"ui.dialog\", $.ui.dialog, {\n\t\t// Extend the `_createOverlay` function.\n\t\t_createOverlay: function _createOverlay() {\n\t\t\tthis._super();\n\t\t\t// If the modal option is true, add a click event on the overlay.\n\t\t\tif (this.options.modal) {\n\t\t\t\tthis._on(this.overlay, {\n\t\t\t\t\tclick: function click(event) {\n\t\t\t\t\t\tthis.close(event);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n  * Extending the elements with a wpseo_redirects object\n  *\n  * @param {string} argType The redirect table.\n  *\n  * @returns {void}\n  */\n\t$.fn.wpseoRedirects = function (argType) {\n\t\tvar that = this;\n\t\tvar type = argType.replace(\"table-\", \"\");\n\t\tvar ignore = false;\n\n\t\tvar lastAction;\n\n\t\t// The element focus keyboard should be moved back to.\n\t\tvar returnFocusToEl = null;\n\n\t\t/**\n   * Resets the ignore and lastAction.\n   *\n   * @returns {void}\n   */\n\t\tvar resetIgnore = function resetIgnore() {\n\t\t\tignore = false;\n\t\t\tlastAction = null;\n\t\t};\n\n\t\tthis.getButtons = function (type) {\n\t\t\tif (type === \"default\") {\n\t\t\t\treturn [{\n\t\t\t\t\ttext: wpseoPremiumStrings.button_ok,\n\t\t\t\t\tclick: function click() {\n\t\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t\t}\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\treturn [{\n\t\t\t\ttext: wpseoPremiumStrings.button_cancel,\n\t\t\t\tclick: function click() {\n\t\t\t\t\tresetIgnore();\n\t\t\t\t\t$(this).dialog(\"close\");\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\ttext: wpseoPremiumStrings.button_save_anyway,\n\t\t\t\t\"class\": \"button-primary\",\n\t\t\t\tclick: function click() {\n\t\t\t\t\tignore = true;\n\n\t\t\t\t\t// The value of last action will be the button pressed to save the redirect.\n\t\t\t\t\tlastAction();\n\n\t\t\t\t\t$(this).dialog(\"close\");\n\n\t\t\t\t\tresetIgnore();\n\t\t\t\t}\n\t\t\t}];\n\t\t};\n\n\t\t/**\n   * Returns a mapped object with the row column elements\n   *\n   * @param {Object} row The row object.\n   * @returns {{origin: *, target: *, type: *}} The values of the fields in the row.\n   */\n\t\tthis.rowCells = function (row) {\n\t\t\tvar rowValues = row.find(\".val\");\n\n\t\t\treturn {\n\t\t\t\torigin: rowValues.eq(TABLE_COLUMNS.ORIGIN),\n\t\t\t\ttarget: rowValues.eq(TABLE_COLUMNS.TARGET),\n\t\t\t\ttype: rowValues.eq(TABLE_COLUMNS.TYPE)\n\t\t\t};\n\t\t};\n\n\t\t/**\n   * Showing a dialog on the screen\n   *\n   * @param {string} title Dialog title.\n   * @param {string} text  The text for the dialog.\n   * @param {string} type  The dialog type.\n   *\n   * @returns {void}\n   */\n\t\tthis.dialog = function (title, text, type) {\n\t\t\tif (typeof type === \"undefined\" || type === \"error\") {\n\t\t\t\ttype = \"default\";\n\t\t\t}\n\n\t\t\tvar buttons = this.getButtons(type);\n\n\t\t\t$(\"#YoastRedirectDialogText\").html(text);\n\t\t\t$(\"#YoastRedirectDialog\").dialog({\n\t\t\t\ttitle: title,\n\t\t\t\twidth: 500,\n\t\t\t\tdraggable: false,\n\t\t\t\tresizable: false,\n\t\t\t\tposition: {\n\t\t\t\t\tat: \"center center\",\n\t\t\t\t\tmy: \"center center\",\n\t\t\t\t\tof: window\n\t\t\t\t},\n\t\t\t\tbuttons: buttons,\n\t\t\t\tmodal: true,\n\t\t\t\tclose: function close() {\n\t\t\t\t\treturnFocusToEl.focus();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n   * Handle the response\n   *\n   * @param {object} successMessage The message that will be displayed on success.\n   *\n   * @returns {void}\n   */\n\t\tthis.openDialog = function (successMessage) {\n\t\t\tthis.dialog(successMessage.title, successMessage.message);\n\t\t};\n\n\t\t/**\n   * Sending post request\n   *\n   * @param {object}   data       The data to post.\n   * @param {function} oncomplete Callback when request has been successful.\n   *\n   * @returns {void}\n   */\n\t\tthis.post = function (data, oncomplete) {\n\t\t\t$.post(ajaxurl, data, oncomplete, \"json\");\n\t\t};\n\n\t\t/**\n   * Creating an edit row for editting a redirect.\n   *\n   * @param {object} row The row to edit.\n   *\n   * @returns {void}\n   */\n\t\tthis.editRow = function (row) {\n\t\t\t// Just show a dialog when there is already a quick edit form opened.\n\t\t\tif ($(\"#the-list\").find(\"#inline-edit\").length > 0) {\n\t\t\t\t/* eslint-disable camelcase */\n\t\t\t\tthis.dialog(wpseoPremiumStrings.edit_redirect, wpseoPremiumStrings.editing_redirect);\n\t\t\t\t/* eslint-enable camelcase */\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Running the setup and show the quick edit form.\n\t\t\tredirectsQuickEdit.setup(row, this.rowCells(row));\n\t\t\tredirectsQuickEdit.show();\n\n\t\t\tnew RedirectForm(redirectsQuickEdit.quickEditRow).getTypeField().trigger(\"change\");\n\t\t};\n\n\t\t/**\n   * Create a table row element with the new added redirect data\n   *\n   * @param {string} oldUrl       The old url.\n   * @param {string} newUrl       The new url.\n   * @param {string} redirectType The type of the redirect (regex or plain).\n   * @param {Object} redirectInfo  Object with details about the redirect.\n   * @returns {void|*|jQuery} The generated row.\n   */\n\t\tthis.createRedirectRow = function (oldUrl, newUrl, redirectType, redirectInfo) {\n\t\t\tvar targetClasses = [\"val\"];\n\n\t\t\tif (!redirectInfo.isTargetRelative || \"\" === newUrl || \"/\" === newUrl) {\n\t\t\t\ttargetClasses.push(\"remove-slashes\");\n\t\t\t}\n\n\t\t\tif (redirectInfo.hasTrailingSlash) {\n\t\t\t\ttargetClasses.push(\"has-trailing-slash\");\n\t\t\t}\n\n\t\t\tvar tr = $(\"<tr>\").append($(\"<th>\").addClass(\"check-column\").attr(\"scope\", \"row\").append($(\"<input>\").attr(\"name\", \"wpseo_redirects_bulk_delete[]\").attr(\"type\", \"checkbox\").val(_.escape(oldUrl)))).append($(\"<td>\").addClass(\"type column-type has-row-actions column-primary\").append($(\"<div>\").addClass(\"val type\").html(_.escape(redirectType))).append($(\"<div>\").addClass(\"row-actions\").append($(\"<span>\").addClass(\"edit\").append($(\"<a>\").attr({ href: \"#\", role: \"button\", \"class\": \"redirect-edit\" }).html(wpseoPremiumStrings.editAction)).append(\" | \")).append($(\"<span>\").addClass(\"trash\").append($(\"<a>\").attr({ href: \"#\", role: \"button\", \"class\": \"redirect-delete\" }).html(wpseoPremiumStrings.deleteAction))))).append($(\"<td>\").addClass(\"column-old\").append($(\"<div>\").addClass(\"val\").html(_.escape(oldUrl)))).append($(\"<td>\").addClass(\"column-new\").append($(\"<div>\").addClass(targetClasses.join(\" \")).html(_.escape(newUrl))));\n\n\t\t\treturn tr;\n\t\t};\n\n\t\t/**\n   * Handles the error.\n   *\n   * @param {ValidateRedirect} validateRedirect The validation object.\n   * @param {Object}           error            The error object.\n   *\n   * @returns {void}\n   */\n\t\tthis.handleError = function (validateRedirect, error) {\n\t\t\tvalidateRedirect.addValidationError(error.message, error.fields);\n\n\t\t\tif (error.type === \"warning\") {\n\t\t\t\tthat.dialog(wpseoPremiumStrings.error_saving_redirect, error.message, error.type);\n\t\t\t}\n\t\t};\n\n\t\t/**\n   * Adding the redirect\n   *\n   * @returns {boolean} True when redirect has been added successfully.\n   */\n\t\tthis.addRedirect = function () {\n\t\t\t// Do the validation.\n\t\t\tvar redirectForm = new RedirectForm($(\".wpseo-new-redirect-form\"));\n\t\t\tvar validateRedirect = new ValidateRedirect(redirectForm, type);\n\t\t\tif (validateRedirect.validate() === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar redirectValues = validateRedirect.getFormValues();\n\n\t\t\t// Do post.\n\t\t\tthat.post({\n\t\t\t\taction: \"wpseo_add_redirect_\" + type,\n\t\t\t\tajax_nonce: $(\".wpseo_redirects_ajax_nonce\").val(),\n\t\t\t\tredirect: {\n\t\t\t\t\torigin: encodeURIComponent(redirectValues.origin),\n\t\t\t\t\ttarget: encodeURIComponent(redirectValues.target),\n\t\t\t\t\ttype: redirectValues.type\n\t\t\t\t},\n\t\t\t\tignore_warning: ignore\n\t\t\t}, function (response) {\n\t\t\t\tif (response.error) {\n\t\t\t\t\tthat.handleError(validateRedirect, response.error);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Empty the form fields.\n\t\t\t\tredirectForm.getOriginField().val(\"\");\n\t\t\t\tredirectForm.getTargetField().val(\"\");\n\n\t\t\t\t// Remove the no items row.\n\t\t\t\tthat.find(\".no-items\").remove();\n\n\t\t\t\t// Creating tr.\n\t\t\t\tvar tr = that.createRedirectRow(response.origin, response.target, response.type, response.info);\n\n\t\t\t\t// Add the new row.\n\t\t\t\t$(\"form#\" + type).find(\"#the-list\").prepend(tr);\n\n\t\t\t\tthat.openDialog(wpseoPremiumStrings.redirect_added);\n\t\t\t});\n\n\t\t\treturn true;\n\t\t};\n\n\t\t/**\n   * Updating the redirect\n   *\n   * @returns {boolean} True when updates is successful.\n   */\n\t\tthis.updateRedirect = function () {\n\t\t\t// Do the validation.\n\t\t\tvar redirectForm = new RedirectForm(redirectsQuickEdit.getForm());\n\t\t\tvar validateRedirect = new ValidateRedirect(redirectForm, type);\n\t\t\tif (validateRedirect.validate() === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar redirectValues = validateRedirect.getFormValues();\n\n\t\t\t// Setting the vars for the row and its values.\n\t\t\tvar row = redirectsQuickEdit.getRow();\n\t\t\tvar rowCells = this.rowCells(row);\n\n\t\t\t// Post the request.\n\t\t\tthat.post({\n\t\t\t\t/* eslint-disable camelcase */\n\t\t\t\taction: \"wpseo_update_redirect_\" + type,\n\t\t\t\tajax_nonce: $(\".wpseo_redirects_ajax_nonce\").val(),\n\t\t\t\told_redirect: {\n\t\t\t\t\torigin: encodeURIComponent(rowCells.origin.html()),\n\t\t\t\t\ttarget: encodeURIComponent(rowCells.target.html()),\n\t\t\t\t\ttype: encodeURIComponent(rowCells.type.html())\n\t\t\t\t},\n\t\t\t\tnew_redirect: {\n\t\t\t\t\torigin: encodeURIComponent(redirectValues.origin),\n\t\t\t\t\ttarget: encodeURIComponent(redirectValues.target),\n\t\t\t\t\ttype: encodeURIComponent(redirectValues.type)\n\t\t\t\t},\n\t\t\t\tignore_warning: ignore\n\t\t\t}, function (response) {\n\t\t\t\tif (response.error) {\n\t\t\t\t\tthat.handleError(validateRedirect, response.error);\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// Updates the table cells.\n\t\t\t\trowCells.origin.html(_.escape(response.origin));\n\t\t\t\trowCells.target.html(_.escape(response.target));\n\t\t\t\trowCells.type.html(_.escape(response.type));\n\n\t\t\t\tredirectsQuickEdit.remove();\n\n\t\t\t\tthat.openDialog(wpseoPremiumStrings.redirect_updated);\n\t\t\t}\n\t\t\t/* eslint-enable camelcase */\n\t\t\t);\n\n\t\t\treturn true;\n\t\t};\n\n\t\t/**\n   * Removes the redirect\n   *\n   * @param {Object} row The row object.\n   *\n   * @returns {void}\n   */\n\t\tthis.deleteRedirect = function (row) {\n\t\t\tvar rowCells = this.rowCells(row);\n\n\t\t\tthat.post({\n\t\t\t\taction: \"wpseo_delete_redirect_\" + type,\n\t\t\t\tajax_nonce: $(\".wpseo_redirects_ajax_nonce\").val(),\n\t\t\t\tredirect: {\n\t\t\t\t\torigin: encodeURIComponent(rowCells.origin.html()),\n\t\t\t\t\ttarget: encodeURIComponent(rowCells.target.html()),\n\t\t\t\t\ttype: encodeURIComponent(rowCells.type.html())\n\t\t\t\t}\n\t\t\t}, function () {\n\t\t\t\t// When the redirect is removed, just fade out the row and remove it after its faded.\n\t\t\t\trow.fadeTo(\"fast\", 0).slideUp(function () {\n\t\t\t\t\t$(this).remove();\n\t\t\t\t});\n\n\t\t\t\tthat.openDialog(wpseoPremiumStrings.redirect_deleted);\n\t\t\t});\n\t\t};\n\n\t\t/**\n   * Running the setup of this element.\n   *\n   * @returns {void}\n   */\n\t\tthis.setup = function () {\n\t\t\tvar $row;\n\t\t\t// Adding dialog.\n\t\t\t$(\"body\").append(\"<div id=\\\"YoastRedirectDialog\\\"><div id=\\\"YoastRedirectDialogText\\\"></div></div>\");\n\n\t\t\t// When the window will be closed/reloaded and there is a inline edit opened show a message.\n\t\t\t$(window).on(\"beforeunload\", function () {\n\t\t\t\tif ($(\"#the-list\").find(\"#inline-edit\").length > 0) {\n\t\t\t\t\treturn wpseoPremiumStrings.unsaved_redirects;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Adding the onchange event.\n\t\t\t$(\".redirect-table-tab\").on(\"change\", \"select[name=wpseo_redirects_type]\", function (evt) {\n\t\t\t\tvar type = parseInt($(evt.target).val(), 10);\n\t\t\t\tvar fieldToToggle = $(evt.target).closest(\".wpseo_redirect_form\").find(\".wpseo_redirect_target_holder\");\n\n\t\t\t\t// Hide the target field in case of a 410 redirect.\n\t\t\t\tif (jQuery.inArray(type, ALLOW_EMPTY_TARGET) > -1) {\n\t\t\t\t\t$(fieldToToggle).hide();\n\t\t\t\t} else {\n\t\t\t\t\t$(fieldToToggle).show();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Adding events for the add form.\n\t\t\t$(\".wpseo-new-redirect-form\").on(\"click\", \".button-primary\", function () {\n\t\t\t\tlastAction = function lastAction() {\n\t\t\t\t\tthat.addRedirect();\n\t\t\t\t};\n\n\t\t\t\tthat.addRedirect();\n\t\t\t\treturnFocusToEl = $(this);\n\t\t\t\treturn false;\n\t\t\t}).on(\"keypress\", \"input\", function (evt) {\n\t\t\t\tif (evt.which === KEYS.ENTER) {\n\t\t\t\t\tlastAction = function lastAction() {\n\t\t\t\t\t\tthat.addRedirect();\n\t\t\t\t\t};\n\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tthat.addRedirect();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$(\".wp-list-table\").on(\"click\", \".redirect-edit\", function (evt) {\n\t\t\t\t$row = $(evt.target).closest(\"tr\");\n\n\t\t\t\tevt.preventDefault();\n\t\t\t\tthat.editRow($row);\n\t\t\t\treturnFocusToEl = $(this);\n\t\t\t}).on(\"click\", \".redirect-delete\", function (evt) {\n\t\t\t\t$row = $(evt.target).closest(\"tr\");\n\n\t\t\t\tevt.preventDefault();\n\t\t\t\tthat.deleteRedirect($row);\n\t\t\t\t// When a row gets deleted, where focus should land?\n\t\t\t\treturnFocusToEl = $(\"#cb-select-all-1\");\n\t\t\t}).on(\"keypress\", \"input\", function (evt) {\n\t\t\t\tif (evt.which === KEYS.ENTER) {\n\t\t\t\t\tlastAction = function lastAction() {\n\t\t\t\t\t\tthat.updateRedirect();\n\t\t\t\t\t};\n\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tthat.updateRedirect();\n\t\t\t\t}\n\t\t\t}).on(\"click\", \".save\", function () {\n\t\t\t\tlastAction = function lastAction() {\n\t\t\t\t\tthat.updateRedirect();\n\t\t\t\t};\n\n\t\t\t\tlastAction();\n\t\t\t}).on(\"click\", \".cancel\", function () {\n\t\t\t\tlastAction = null;\n\t\t\t\tredirectsQuickEdit.remove();\n\t\t\t\t// Move focus back to the Edit link.\n\t\t\t\t$row.find(\".redirect-edit\").focus();\n\t\t\t});\n\t\t};\n\n\t\tthat.setup();\n\t};\n\n\t/**\n  * Adds select2 for selected fields\n  *\n  * @returns {void}\n  */\n\tfunction initSelect2() {\n\t\t$(\"#wpseo_redirects_type\").select2({\n\t\t\twidth: \"400px\",\n\t\t\tlanguage: wpseoSelect2Locale\n\t\t});\n\t}\n\n\t/**\n  * Initializes the redirect page.\n  *\n  * @returns {void}\n  */\n\tfunction init() {\n\t\ttemplateQuickEdit = wp.template(\"redirects-inline-edit\");\n\n\t\t$.each($(\".redirect-table-tab\"), function (key, element) {\n\t\t\t$(element).wpseoRedirects($(element).attr(\"id\"));\n\t\t});\n\n\t\tinitSelect2();\n\t}\n\n\t$(init);\n})(jQuery);\n\n//////////////////\n// WEBPACK FOOTER\n// ./admin-redirects.js\n// module id = 887\n// module chunks = 8\n\n//# sourceURL=webpack:///./admin-redirects.js?");

/***/ })

},[887]);