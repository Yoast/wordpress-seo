yoastPremiumWebpackJsonp([4],{

/***/ 388:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global wpseoPremiumStrings, ajaxurl */\n\n/**\n * Undoes a redirect.\n *\n * @param {string} origin The redirect's origin.\n * @param {string} target The redirect's target.\n * @param {string} type The type of redirect.\n * @param {string} nonce The nonce being used to validate the current AJAX request.\n * @param {object} source The DOMElement containing the alerts.\n *\n * @returns {void}\n */\nfunction wpseoUndoRedirect(origin, target, type, nonce, source) {\n\tjQuery.post(ajaxurl, {\n\t\taction: \"wpseo_delete_redirect_plain\",\n\t\tajax_nonce: nonce,\n\t\tredirect: {\n\t\t\torigin: origin,\n\t\t\ttarget: target,\n\t\t\ttype: type\n\t\t}\n\t}, function () {\n\t\tjQuery(source).closest(\".yoast-alert\").fadeOut(\"slow\");\n\t});\n}\n\n/**\n * Creates a redirect\n *\n * @param {string} origin The origin.\n * @param {string} type   The redirect type, regex or plain.\n * @param {string} nonce  The nonce.\n * @param {object} source The source of the redirect.\n *\n * @returns {void}\n */\nfunction wpseoCreateRedirect(origin, type, nonce, source) {\n\tvar target = \"\";\n\n\tif (parseInt(type, 10) !== 410) {\n\t\t/* eslint-disable no-alert */\n\t\ttarget = window.prompt(wpseoPremiumStrings.enter_new_url.replace(\"%s\", origin));\n\t\t/* eslint-enable no-alert */\n\n\t\tif (target === \"\") {\n\t\t\t/* eslint-disable no-alert */\n\t\t\twindow.alert(wpseoPremiumStrings.error_new_url);\n\t\t\t/* eslint-enable no-alert */\n\t\t\treturn;\n\t\t}\n\t}\n\n\tjQuery.post(ajaxurl, {\n\t\taction: \"wpseo_add_redirect_plain\",\n\t\tajax_nonce: nonce,\n\t\tredirect: {\n\t\t\torigin: origin,\n\t\t\ttarget: target,\n\t\t\ttype: type\n\t\t}\n\t}, function (response) {\n\t\tvar notice = jQuery(source).closest(\".yoast-alert\");\n\t\t// Remove the classes first.\n\t\tjQuery(notice).removeClass(\"updated\").removeClass(\"error\");\n\n\t\t// Remove possibly added redirect errors.\n\t\tjQuery(notice).find(\".redirect_error\").remove();\n\n\t\tif (response.error) {\n\t\t\t// Add paragraph on top of the notice with actions and set class to error.\n\t\t\tjQuery(notice).addClass(\"error\").prepend(\"<p class=\\\"redirect_error\\\">\" + response.error.message + \"</p>\");\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Parse the success message.\n\t\tvar successMessage = \"\";\n\t\tif (parseInt(type, 10) === 410) {\n\t\t\tsuccessMessage = wpseoPremiumStrings.redirect_saved_no_target;\n\t\t} else {\n\t\t\tsuccessMessage = wpseoPremiumStrings.redirect_saved.replace(\"%2$s\", \"<code>\" + response.target + \"</code>\");\n\t\t}\n\n\t\tsuccessMessage = successMessage.replace(\"%1$s\", \"<code>\" + response.origin + \"</code>\");\n\n\t\t// Set class to updated and replace html with the success message.\n\t\tjQuery(notice).addClass(\"updated\").html(\"<p>\" + successMessage + \"</p>\");\n\t}, \"json\");\n}\n\nmodule.exports = {\n\twpseoCreateRedirect: wpseoCreateRedirect,\n\twpseoUndoRedirect: wpseoUndoRedirect\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./redirects/functions.js\n// module id = 388\n// module chunks = 3 4\n\n//# sourceURL=webpack:///./redirects/functions.js?");

/***/ }),

/***/ 889:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global ajaxurl */\n/* jshint -W097 */\n\nvar redirectFunctions = __webpack_require__(388);\n\n/**\n * Use notification counter so we can count how many times the function wpseoShowNotification is called.\n *\n * @type {number}\n */\nvar wpseoNotificationCounter = 0;\n\n/**\n * Show notification to user when there's a redirect created. When the response is empty, up the notification counter\n * with 1, wait 100 ms and call function again.\n * Stop when the notification counter is bigger than 20.\n *\n * @returns {void}\n */\nfunction wpseoShowNotification() {\n\tjQuery.post(ajaxurl, { action: \"yoast_get_notifications\" }, function (response) {\n\t\tif (response !== \"\") {\n\t\t\tvar insertAfterElement = jQuery(\".wrap\").children().eq(0);\n\t\t\tjQuery(response).insertAfter(insertAfterElement);\n\t\t\twpseoNotificationCounter = 0;\n\t\t}\n\n\t\tif (wpseoNotificationCounter < 20 && response === \"\") {\n\t\t\twpseoNotificationCounter++;\n\t\t\tsetTimeout(wpseoShowNotification, 500);\n\t\t}\n\t});\n}\n\nwindow.wpseoShowNotification = wpseoShowNotification;\n\n/**\n * Gets the current page based on the current URL.\n *\n * @returns {string} The current page.\n */\nfunction wpseoGetCurrentPage() {\n\treturn jQuery(location).attr(\"pathname\").split(\"/\").pop();\n}\n\nwindow.wpseoGetCurrentPage = wpseoGetCurrentPage;\n\n/**\n * Gets the name of the field to get the slug from, based on the current URL.\n *\n * For posts, this is 'post_name', for terms it is 'slug'.\n *\n * @returns {string} The current slug field name.\n */\nfunction wpseoGetSlugField(currentPage) {\n\tcurrentPage = currentPage || wpseoGetCurrentPage();\n\n\tif (currentPage === \"edit-tags.php\") {\n\t\treturn \"slug\";\n\t}\n\n\treturn \"post_name\";\n}\n\n/**\n * Gets the current slug of a post based on the current page and post or term being edited.\n *\n * @returns {string} The slug of the current post or term.\n */\nfunction wpseoGetCurrentSlug() {\n\tvar currentPost = wpseoGetItemId();\n\tvar slugField = wpseoGetSlugField();\n\n\treturn jQuery(\"#inline_\" + currentPost).find(\".\" + slugField).html();\n}\n\nwindow.wpseoGetCurrentSlug = wpseoGetCurrentSlug;\n\n/**\n * Checks whether or not the slug has changed.\n *\n * @returns {boolean} Whether or not the slug has changed.\n */\nfunction wpseoSlugChanged() {\n\tvar editor = wpseoGetActiveEditor();\n\tvar slugField = wpseoGetSlugField();\n\tvar currentSlug = wpseoGetCurrentSlug();\n\tvar newSlug = editor.find(\"input[name=\" + slugField + \"]\").val();\n\n\treturn currentSlug !== newSlug;\n}\n\nwindow.wpseoSlugChanged = wpseoSlugChanged;\n\n/**\n * Gets the currently active editor used in quick edit.\n *\n * @returns {Object} The editor that is currently active.\n */\nfunction wpseoGetActiveEditor() {\n\treturn jQuery(\"tr.inline-editor\");\n}\n\nwindow.wpseoGetActiveEditor = wpseoGetActiveEditor;\n\n/**\n * Gets the current post or term id.\n * Returns an empty string if no editor is currently active.\n *\n * @returns {string} The ID of the current post or term.\n */\nfunction wpseoGetItemId() {\n\tvar editor = wpseoGetActiveEditor();\n\n\tif (editor.length === 0 || editor === \"\") {\n\t\treturn \"\";\n\t}\n\n\treturn editor.attr(\"id\").replace(\"edit-\", \"\");\n}\n\nwindow.wpseoGetItemId = wpseoGetItemId;\n\n/**\n * Handles the key-based events in the quick edit editor.\n *\n * @param {Event} ev The event currently being executed.\n *\n * @returns {void}\n */\nfunction wpseoHandleKeyEvents(ev) {\n\t// 13 refers to the enter key.\n\tif (ev.which === 13 && wpseoSlugChanged()) {\n\t\twpseoShowNotification();\n\t}\n}\n\nwindow.wpseoHandleKeyEvents = wpseoHandleKeyEvents;\n\n/**\n * Handles the button-based events in the quick edit editor.\n *\n * @param {Event} ev The event currently being executed.\n *\n * @returns {void}\n */\nfunction wpseoHandleButtonEvents(ev) {\n\tif (jQuery(ev.target).attr(\"id\") !== \"save-order\" && wpseoSlugChanged()) {\n\t\twpseoShowNotification();\n\t}\n}\n\nwindow.wpseoHandleButtonEvents = wpseoHandleButtonEvents;\n\nwindow.wpseoUndoRedirect = redirectFunctions.wpseoUndoRedirect;\nwindow.wpseoCreateRedirect = redirectFunctions.wpseoCreateRedirect;\n\njQuery(function () {\n\tvar wpseoCurrentPage = wpseoGetCurrentPage();\n\n\tif ([\"edit.php\", \"edit-tags.php\"].includes(wpseoCurrentPage)) {\n\t\tjQuery(\"#inline-edit input\").on(\"keydown\", function (ev) {\n\t\t\twpseoHandleKeyEvents(ev);\n\t\t});\n\n\t\tjQuery(\".button-primary\").click(function (ev) {\n\t\t\twpseoHandleButtonEvents(ev);\n\t\t});\n\t}\n\n\tif (wpseoCurrentPage === \"edit-tags.php\") {\n\t\tjQuery(document).on(\"ajaxComplete\", function (e, xhr, settings) {\n\t\t\tif (settings.data.indexOf(\"action=delete-tag\") > -1) {\n\t\t\t\twpseoShowNotification();\n\t\t\t}\n\t\t});\n\t}\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./quickedit-notification.js\n// module id = 889\n// module chunks = 4\n\n//# sourceURL=webpack:///./quickedit-notification.js?");

/***/ })

},[889]);