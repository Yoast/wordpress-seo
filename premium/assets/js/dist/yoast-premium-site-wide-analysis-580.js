(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A helper class to do AJAX requests to the REST API.
 */
var RestApi = function () {

	/**
  * Constructs a RestApi request helper object.
  *
  * @param {string} rootUrl The root URL of the REST API.
  * @param {string} nonce The nonce to authenticate to the REST API using cookies.
  */
	function RestApi(_ref) {
		var rootUrl = _ref.rootUrl,
		    nonce = _ref.nonce;

		_classCallCheck(this, RestApi);

		this._rootUrl = rootUrl;
		this._nonce = nonce;
	}

	/**
  * Does a GET request to the REST API
  *
  * @param {string} path The path to do the request to.
  * @param {Object} params The parameters to use for jQuery.
  * @returns {Promise} Resolves when the AJAX request is complete.
  */


	_createClass(RestApi, [{
		key: "get",
		value: function get(path, params) {
			params = Object.assign(params, {
				type: "GET",
				url: this._rootUrl + path
			});

			return this.request(params);
		}

		/**
   * Does a POST request to the REST API
   *
   * @param {string} path The path to do the request to.
   * @param {Object} params The parameters to use for jQuery.
   * @returns {Promise} Resolves when the AJAX request is complete.
   */

	}, {
		key: "post",
		value: function post(path, params) {
			params = Object.assign(params, {
				type: "POST",
				url: this._rootUrl + path
			});

			return this.request(params);
		}

		/**
   * Do a request to the REST API
   *
   * @param {Object} params The params to use for jQuery.
   * @returns {Promise} Resolves when the AJAX request is complete.
   */

	}, {
		key: "request",
		value: function request(params) {
			var _this = this;

			return new Promise(function (resolve, reject) {
				params = Object.assign(params, {
					beforeSend: function beforeSend(xhr) {
						xhr.setRequestHeader("X-WP-Nonce", _this._nonce);
					},
					success: resolve,
					error: reject
				});

				jQuery.ajax(params);
			});
		}
	}]);

	return RestApi;
}();

exports.default = RestApi;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A key value store for prominent words to their respective IDs.
 */
var ProminentWordCache = function () {

	/**
  * Sets the initial cache.
  */
	function ProminentWordCache() {
		_classCallCheck(this, ProminentWordCache);

		this._cache = {};
	}

	/**
  * Returns the ID given the name, or 0 if not found in the cache.
  *
  * @param {string} name The name of the prominent word.
  * @returns {number} The ID of the prominent word.
  */


	_createClass(ProminentWordCache, [{
		key: "getID",
		value: function getID(name) {
			if (this._cache.hasOwnProperty(name)) {
				return this._cache[name];
			}

			return 0;
		}

		/**
   * Sets the ID for a given name.
   *
   * @param {string} name The name of the prominent word.
   * @param {number} id The ID of the prominent word.
   * @returns {void}
   */

	}, {
		key: "setID",
		value: function setID(name, id) {
			this._cache[name] = id;
		}
	}]);

	return ProminentWordCache;
}();

exports.default = ProminentWordCache;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _unescape = require("lodash/unescape");

var _unescape2 = _interopRequireDefault(_unescape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Populates a prominent word cache with data from the server.
 */
var ProminentWordCachePopulator = function () {

	/**
  * Sets the instance attributes.
  *
  * @param {ProminentWordCache} cache The cache to populate.
  * @param {RestApi} restApi The REST API object to do requests with.
  */
	function ProminentWordCachePopulator(_ref) {
		var cache = _ref.cache,
		    restApi = _ref.restApi;

		_classCallCheck(this, ProminentWordCachePopulator);

		this._cache = cache;
		this._restApi = restApi;
		this._currentPage = 1;

		this.processProminentWord = this.processProminentWord.bind(this);
	}

	/**
  * Populates the prominent word cache with data from the server.
  *
  * @returns {Promise} Resolves when the cache has been populated.
  */


	_createClass(ProminentWordCachePopulator, [{
		key: "populate",
		value: function populate() {
			var _this = this;

			var data = {
				per_page: 100,
				page: this._currentPage
			};

			return this._restApi.get("wp/v2/yst_prominent_words", { data: data }).then(function (result) {
				if (result.length === 0) {
					return;
				}

				result.forEach(_this.processProminentWord);

				_this._currentPage += 1;

				return _this.populate();
			});
		}

		/**
   * Saves a prominent word to the cache.
   *
   * @param {Object} prominentWord The prominent word to save to the cache.
   * @returns {void}
   */

	}, {
		key: "processProminentWord",
		value: function processProminentWord(prominentWord) {
			var name = (0, _unescape2.default)(prominentWord.name);

			this._cache.setID(name, prominentWord.id);
		}
	}]);

	return ProminentWordCachePopulator;
}();

exports.default = ProminentWordCachePopulator;

},{"lodash/unescape":170}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ProminentWordCache = require("./ProminentWordCache");

var _ProminentWordCache2 = _interopRequireDefault(_ProminentWordCache);

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

var _isEqual = require("lodash/isEqual");

var _isEqual2 = _interopRequireDefault(_isEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Handles the retrieval and storage of focus keyword suggestions
 */
var ProminentWordStorage = function (_EventEmitter) {
	_inherits(ProminentWordStorage, _EventEmitter);

	/**
  * @param {string} rootUrl             The root URL of the WP REST API.
  * @param {string} nonce               The WordPress nonce required to save anything to the REST API endpoints.
  * @param {number} postID              The postID of the post to save prominent words for.
  * @param {number} prominentWordsLimit The limit of prominent words.
  * @param {ProminentWordCache} cache   The cache to use for the prominent word term IDs.
  */
	function ProminentWordStorage(_ref) {
		var postID = _ref.postID,
		    rootUrl = _ref.rootUrl,
		    nonce = _ref.nonce,
		    _ref$prominentWordsLi = _ref.prominentWordsLimit,
		    prominentWordsLimit = _ref$prominentWordsLi === undefined ? 20 : _ref$prominentWordsLi,
		    _ref$cache = _ref.cache,
		    cache = _ref$cache === undefined ? null : _ref$cache;

		_classCallCheck(this, ProminentWordStorage);

		var _this = _possibleConstructorReturn(this, (ProminentWordStorage.__proto__ || Object.getPrototypeOf(ProminentWordStorage)).call(this));

		_this._rootUrl = rootUrl;
		_this._nonce = nonce;
		_this._postID = postID;
		_this._savingProminentWords = false;
		_this._previousProminentWords = null;

		_this._postSaveEndpoint = _this._rootUrl + "yoast/v1/prominent_words_link/" + _this._postID;

		if (cache === null) {
			cache = new _ProminentWordCache2.default();
		}
		_this._cache = cache;

		_this.setProminentWordsLimit(prominentWordsLimit);

		_this.retrieveProminentWordId = _this.retrieveProminentWordId.bind(_this);
		return _this;
	}

	/**
  * Sets the prominent words limit.
  *
  * @param {number} limit The limit to set.
  *
  * @returns {void}
  */


	_createClass(ProminentWordStorage, [{
		key: "setProminentWordsLimit",
		value: function setProminentWordsLimit(limit) {
			this._prominentWordsLimit = limit;
		}

		/**
   * Saves prominent words to the database using AJAX
   *
   * @param {WordCombination[]} prominentWords The prominent words to save.
   * @returns {Promise} Resolves when the prominent words are saved.
   */

	}, {
		key: "saveProminentWords",
		value: function saveProminentWords(prominentWords) {
			var _this2 = this;

			// If there is already a save sequence in progress, don't do it again.
			if (this._savingProminentWords) {
				return;
			}
			this._savingProminentWords = true;

			var prominentWordsToSave = prominentWords.slice(0, this._prominentWordsLimit);

			// Retrieve IDs of all prominent word terms, but do it in sequence to prevent overloading servers.
			var prominentWordIds = prominentWordsToSave.reduce(function (previousPromise, prominentWord) {
				return previousPromise.then(function (ids) {
					return _this2.retrieveProminentWordId(prominentWord).then(function (newId) {
						ids.push(newId);

						return ids;

						// On error, just continue with the other terms.
					}, function () {
						return ids;
					});
				});
			}, Promise.resolve([]));

			return prominentWordIds.then(function (prominentWords) {
				if ((0, _isEqual2.default)(prominentWords, _this2._previousProminentWords)) {
					_this2._savingProminentWords = false;
					return Promise.resolve();
				}
				_this2._previousProminentWords = prominentWords;

				return new Promise(function (resolve, reject) {
					jQuery.ajax({
						type: "POST",
						url: _this2._postSaveEndpoint,
						beforeSend: function beforeSend(xhr) {
							xhr.setRequestHeader("X-WP-Nonce", _this2._nonce);
						},
						data: {
							// eslint-disable-next-line camelcase
							yst_prominent_words: prominentWords
						},
						dataType: "json",
						success: resolve,
						error: reject
					}).always(function () {
						_this2.emit("savedProminentWords", prominentWords);

						_this2._savingProminentWords = false;
					});
				});
			}).catch(function (e) {
				// eslint-disable-next-line
				window.console && console.log(e);
			});
		}

		/**
   * Retrieves the ID of a promise
   *
   * @param {WordCombination} prominentWord The prominent word to retrieve the ID for.
   * @returns {Promise} Resolves to the ID of the prominent word term.
   */

	}, {
		key: "retrieveProminentWordId",
		value: function retrieveProminentWordId(prominentWord) {
			var _this3 = this;

			var cachedId = this._cache.getID(prominentWord.getCombination());
			if (0 !== cachedId) {
				return Promise.resolve(cachedId);
			}

			var foundProminentWord = new Promise(function (resolve, reject) {
				jQuery.ajax({
					type: "GET",
					url: _this3._rootUrl + "yoast/v1/prominent_words",
					beforeSend: function beforeSend(xhr) {
						xhr.setRequestHeader("X-WP-Nonce", _this3._nonce);
					},
					data: {
						word: prominentWord.getCombination()
					},
					dataType: "json",
					success: function success(response) {
						resolve(response);
					},
					error: function error(response) {
						reject(response);
					}
				});
			});

			var createdProminentWord = foundProminentWord.then(function (prominentWordTerm) {
				if (prominentWordTerm === null) {
					return _this3.createProminentWordTerm(prominentWord);
				}

				return prominentWordTerm;
			});

			return createdProminentWord.then(function (prominentWordTerm) {
				_this3._cache.setID(prominentWord.getCombination(), prominentWordTerm.id);

				return prominentWordTerm.id;
			});
		}

		/**
   * Creates a term for a prominent word
   *
   * @param {WordCombination} prominentWord The prominent word to create a term for.
   * @returns {Promise} A promise that resolves when a term has been created and resolves with the ID of the newly created term.
   */

	}, {
		key: "createProminentWordTerm",
		value: function createProminentWordTerm(prominentWord) {
			var _this4 = this;

			return new Promise(function (resolve, reject) {
				jQuery.ajax({
					type: "POST",
					url: _this4._rootUrl + "wp/v2/yst_prominent_words",
					beforeSend: function beforeSend(xhr) {
						xhr.setRequestHeader("X-WP-Nonce", _this4._nonce);
					},
					data: {
						name: prominentWord.getCombination()
					},
					dataType: "json",
					success: function success(response) {
						resolve(response);
					},
					error: function error(response) {
						reject(response);
					}
				});
			});
		}
	}]);

	return ProminentWordStorage;
}(_events2.default);

exports.default = ProminentWordStorage;

},{"./ProminentWordCache":2,"events":8,"lodash/isEqual":148}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _relevantWords = require("yoastseo/js/stringProcessing/relevantWords");

var _ProminentWordStorage = require("./ProminentWordStorage");

var _ProminentWordStorage2 = _interopRequireDefault(_ProminentWordStorage);

var _ProminentWordCache = require("./ProminentWordCache");

var _ProminentWordCache2 = _interopRequireDefault(_ProminentWordCache);

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global yoastSiteWideAnalysisData */

var postStatuses = ["future", "draft", "pending", "private", "publish"].join(",");

/**
 * Calculates prominent words for all posts on the site.
 */

var SiteWideCalculation = function (_EventEmitter) {
	_inherits(SiteWideCalculation, _EventEmitter);

	/**
  * Constructs a calculation object.
  *
  * @param {boolean} recalculateAll Whether to calculate all posts or only posts without prominent words.
  * @param {number} totalPosts The amount of posts to calculate prominent words for.
  * @param {string} rootUrl The root REST API URL.
  * @param {string} nonce The nonce to use when using the REST API.
  * @param {number[]} allProminentWordIds A list of all prominent word IDs present on the site.
  * @param {string} listEndpoint The endpoint to call when retrieving posts or pages.
  * @param {ProminentWordCache} prominentWordCache The cache for prominent words.
  */
	function SiteWideCalculation(_ref) {
		var totalPosts = _ref.totalPosts,
		    rootUrl = _ref.rootUrl,
		    nonce = _ref.nonce,
		    allProminentWordIds = _ref.allProminentWordIds,
		    listEndpoint = _ref.listEndpoint,
		    _ref$prominentWordCac = _ref.prominentWordCache,
		    prominentWordCache = _ref$prominentWordCac === undefined ? null : _ref$prominentWordCac,
		    _ref$recalculateAll = _ref.recalculateAll,
		    recalculateAll = _ref$recalculateAll === undefined ? false : _ref$recalculateAll;

		_classCallCheck(this, SiteWideCalculation);

		var _this = _possibleConstructorReturn(this, (SiteWideCalculation.__proto__ || Object.getPrototypeOf(SiteWideCalculation)).call(this));

		_this._perPage = 10;
		_this._totalPosts = totalPosts;
		_this._totalPages = Math.ceil(totalPosts / _this._perPage);
		_this._processedPosts = 0;
		_this._currentPage = 1;
		_this._rootUrl = rootUrl;
		_this._nonce = nonce;
		_this._recalculateAll = recalculateAll;
		_this._allProminentWordIds = allProminentWordIds;
		_this._listEndpoint = listEndpoint;

		if (prominentWordCache === null) {
			prominentWordCache = new _ProminentWordCache2.default();
		}
		_this._prominentWordCache = prominentWordCache;

		_this.processPost = _this.processPost.bind(_this);
		_this.continueProcessing = _this.continueProcessing.bind(_this);
		_this.processResponse = _this.processResponse.bind(_this);
		_this.incrementProcessedPosts = _this.incrementProcessedPosts.bind(_this);
		_this.calculate = _this.calculate.bind(_this);
		return _this;
	}

	/**
  * Starts calculating prominent words.
  *
  * @returns {void}
  */


	_createClass(SiteWideCalculation, [{
		key: "start",
		value: function start() {
			this.calculate();
		}

		/**
   * Does a calculation step for the current page.
   *
   * @returns {void}
   */

	}, {
		key: "calculate",
		value: function calculate() {
			var _this2 = this;

			var data = {
				/* eslint-disable camelcase */
				per_page: this._perPage,
				status: postStatuses,
				yst_prominent_words_is_unindexed: true
			};

			if (!this._recalculateAll) {
				// eslint-disable-next-line camelcase
				data.yst_prominent_words = this._allProminentWordIds;
			}

			jQuery.ajax({
				type: "GET",
				url: this._listEndpoint,
				beforeSend: function beforeSend(xhr) {
					xhr.setRequestHeader("X-WP-Nonce", _this2._nonce);
				},
				data: data,
				dataType: "json",
				success: this.processResponse
			});
		}

		/**
   * Process response from the index request for posts.
   *
   * @param {Array} response The list of found posts from the server.
   * @returns {void}
   */

	}, {
		key: "processResponse",
		value: function processResponse(response) {
			var _this3 = this;

			var processPromises = response.reduce(function (previousPromise, post) {
				return previousPromise.then(function () {
					return _this3.processPost(post);
				}).catch(function (err) {
					// eslint-disable-next-line
					window.console && console.log(err);

					return _this3.saveProminentWords(post, []);
				});
			}, Promise.resolve());

			processPromises.then(this.continueProcessing).catch(function (err) {
				// eslint-disable-next-line
				window.console && console.log(err);

				_this3.continueProcessing();
			});
		}

		/**
   * Continues processing by going to the next page if there is one.
   *
   * @returns {void}
   */

	}, {
		key: "continueProcessing",
		value: function continueProcessing() {
			this.emit("processedPage", this._currentPage, this._totalPages);

			if (this._currentPage < this._totalPages) {
				this._currentPage += 1;
				this.calculate();
			} else {
				this.emit("complete");
			}
		}

		/**
   * Processes a post returned from the REST API.
   *
   * @param {Object} post A post object with rendered content.
   * @returns {Promise} Resolves when the prominent words are saved for the post.
   */

	}, {
		key: "processPost",
		value: function processPost(post) {
			var content = post.content.rendered;

			var prominentWords = (0, _relevantWords.getRelevantWords)(content, yoastSiteWideAnalysisData.data.l10n.contentLocale);

			return this.saveProminentWords(post, prominentWords);
		}

		/**
   * Saves the prominent words.
   *
   * @param {Object} post A post object with rendered content.
   * @param {Array} prominentWords The prominent words to save.
   * @returns {Promise} Resolves when the prominent words are saved for the post.
   */

	}, {
		key: "saveProminentWords",
		value: function saveProminentWords(post, prominentWords) {
			var prominentWordStorage = new _ProminentWordStorage2.default({
				postID: post.id,
				rootUrl: this._rootUrl,
				nonce: this._nonce,
				cache: this._prominentWordCache
			});

			return prominentWordStorage.saveProminentWords(prominentWords).then(this.incrementProcessedPosts, this.incrementProcessedPosts);
		}

		/**
   * Increments the amount of processed posts by one.
   *
   * @returns {void}
   */

	}, {
		key: "incrementProcessedPosts",
		value: function incrementProcessedPosts() {
			this._processedPosts += 1;

			this.emit("processedPost", this._processedPosts, this._totalPosts);
		}
	}]);

	return SiteWideCalculation;
}(_events2.default);

exports.default = SiteWideCalculation;

},{"./ProminentWordCache":2,"./ProminentWordStorage":4,"events":8,"yoastseo/js/stringProcessing/relevantWords":192}],6:[function(require,module,exports){
"use strict";

var _siteWideCalculation = require("./keywordSuggestions/siteWideCalculation");

var _siteWideCalculation2 = _interopRequireDefault(_siteWideCalculation);

var _ProminentWordCache = require("./keywordSuggestions/ProminentWordCache");

var _ProminentWordCache2 = _interopRequireDefault(_ProminentWordCache);

var _ProminentWordCachePopulator = require("./keywordSuggestions/ProminentWordCachePopulator");

var _ProminentWordCachePopulator2 = _interopRequireDefault(_ProminentWordCachePopulator);

var _restApi = require("./helpers/restApi");

var _restApi2 = _interopRequireDefault(_restApi);

var _a11ySpeak = require("a11y-speak");

var _a11ySpeak2 = _interopRequireDefault(_a11ySpeak);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var settings = yoastSiteWideAnalysisData.data; /* global yoastSiteWideAnalysisData, tb_remove */

var infoContainer = void 0;
var prominentWordCache = void 0;
var prominentWordsCalculated = false;

/**
 * Recalculates posts
 *
 * @returns {Promise} Resolves when we have recalculated posts.
 */
function recalculatePosts() {
	var progressElement = jQuery("#wpseo_count_posts");
	var progress = jQuery("#wpseo_internal_links_posts_progressbar").progressbar({ value: 0 });
	var rootUrl = settings.restApi.root;

	return new Promise(function (resolve) {
		var postsCalculation = new _siteWideCalculation2.default({
			totalPosts: settings.amount.total,
			recalculateAll: true,
			rootUrl: rootUrl,
			nonce: settings.restApi.nonce,
			allProminentWordIds: settings.allWords,
			listEndpoint: rootUrl + "wp/v2/posts/",
			prominentWordCache: prominentWordCache
		});

		postsCalculation.on("processedPost", function (postCount) {
			var newWidth = postCount * (100 / settings.amount.total);

			progress.progressbar("value", Math.round(newWidth));

			progressElement.html(postCount);
		});

		postsCalculation.start();

		// Free up the variable to start another recalculation.
		postsCalculation.on("complete", resolve);
	});
}

/**
 * Recalculates pages
 *
 * @returns {Promise} Resolves when we have recalculated pages.
 */
function recalculatePages() {
	var progressElement = jQuery("#wpseo_count_pages");
	var progress = jQuery("#wpseo_internal_links_pages_progressbar").progressbar({ value: 0 });
	var rootUrl = settings.restApi.root;

	return new Promise(function (resolve) {
		var pagesCalculation = new _siteWideCalculation2.default({
			totalPosts: settings.amountPages.total,
			recalculateAll: true,
			rootUrl: rootUrl,
			nonce: settings.restApi.nonce,
			allProminentWordIds: settings.allWords,
			listEndpoint: rootUrl + "wp/v2/pages/",
			prominentWordCache: prominentWordCache
		});

		pagesCalculation.on("processedPost", function (pageCount) {
			var newWidth = pageCount * (100 / settings.amountPages.total);

			progress.progressbar("value", Math.round(newWidth));
			progressElement.html(pageCount);
		});

		pagesCalculation.start();

		// Free up the variable to start another recalculation.
		pagesCalculation.on("complete", resolve);
	});
}

/**
 * Shows completion to the user
 *
 * @returns {void}
 */
function showCompletion() {
	(0, _a11ySpeak2.default)(settings.l10n.calculationCompleted);

	jQuery.get({
		url: settings.restApi.root + "yoast/v1/complete_recalculation/",
		beforeSend: function beforeSend(xhr) {
			xhr.setRequestHeader("X-WP-Nonce", settings.restApi.nonce);
		},
		success: function success() {
			prominentWordsCalculated = true;
			jQuery("#internalLinksCalculation").html(settings.message.analysisCompleted);

			tb_remove();
		}
	});
}

/**
 * Start recalculating.
 *
 * @returns {void}
 */
function startRecalculating() {
	(0, _a11ySpeak2.default)(settings.l10n.calculationInProgress);

	var restApi = new _restApi2.default({ rootUrl: settings.restApi.root, nonce: settings.restApi.nonce });

	prominentWordCache = new _ProminentWordCache2.default();
	var populator = new _ProminentWordCachePopulator2.default({ cache: prominentWordCache, restApi: restApi });

	populator.populate().then(recalculatePosts).then(recalculatePages).then(showCompletion);
}

/**
 * Opens the internal link calculation modal.
 *
 * @returns {void}
 */
function openInternalLinkCalculation() {
	jQuery("#general-tab").click();

	if (prominentWordsCalculated === false) {
		jQuery("#openInternalLinksCalculation").click();
	}
}

/**
 * Initializes the site wide analysis tab.
 *
 * @returns {void}
 */
function init() {
	var recalculating = false;
	jQuery(".yoast-js-calculate-prominent-words--all").on("click", function () {
		if (recalculating === false) {
			startRecalculating();

			recalculating = true;
		}
	});

	jQuery("#noticeRunAnalysis").click(openInternalLinkCalculation);

	if (document.location.hash === "#open-internal-links-calculation") {
		setTimeout(openInternalLinkCalculation, 0);
	}

	infoContainer = jQuery(".yoast-js-prominent-words-info");
}

jQuery(init);

},{"./helpers/restApi":1,"./keywordSuggestions/ProminentWordCache":2,"./keywordSuggestions/ProminentWordCachePopulator":3,"./keywordSuggestions/siteWideCalculation":5,"a11y-speak":7}],7:[function(require,module,exports){
var containerPolite, containerAssertive;

/**
 * Build the live regions markup.
 *
 * @param {String} ariaLive Optional. Value for the "aria-live" attribute, default "polite".
 *
 * @returns {Object} $container The ARIA live region jQuery object.
 */
var addContainer = function( ariaLive ) {
	ariaLive = ariaLive || "polite";

	var container = document.createElement( "div" );
	container.id = "a11y-speak-" + ariaLive;
	container.className = "a11y-speak-region";

	var screenReaderTextStyle = "clip: rect(1px, 1px, 1px, 1px); position: absolute; height: 1px; width: 1px; overflow: hidden;";
	container.setAttribute( "style", screenReaderTextStyle );

	container.setAttribute( "aria-live", ariaLive );
	container.setAttribute( "aria-relevant", "additions text" );
	container.setAttribute( "aria-atomic", "true" );

	document.querySelector( "body" ).appendChild( container );
	return container;
};

/**
 * Specify a function to execute when the DOM is fully loaded.
 *
 * @param {Function} callback A function to execute after the DOM is ready.
 *
 * @returns {void}
 */
var domReady = function( callback ) {
	if ( document.readyState === "complete" || ( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
		return callback();
	}

	document.addEventListener( "DOMContentLoaded", callback );
};

/**
 * Create the live regions when the DOM is fully loaded.
 */
domReady( function() {
	containerPolite = document.getElementById( "a11y-speak-polite" );
	containerAssertive = document.getElementById( "a11y-speak-assertive" );

	if ( containerPolite === null ) {
		containerPolite = addContainer( "polite" );
	}
	if ( containerAssertive === null ) {
		containerAssertive = addContainer( "assertive" );
	}
} );

/**
 * Clear the live regions.
 */
var clear = function() {
	var regions = document.querySelectorAll( ".a11y-speak-region" );
	for ( var i = 0; i < regions.length; i++ ) {
		regions[ i ].textContent = "";
	}
};

/**
 * Update the ARIA live notification area text node.
 *
 * @param {String} message  The message to be announced by Assistive Technologies.
 * @param {String} ariaLive Optional. The politeness level for aria-live. Possible values:
 *                          polite or assertive. Default polite.
 */
var A11ySpeak = function( message, ariaLive ) {
	// Clear previous messages to allow repeated strings being read out.
	clear();

	/*
	 * Strip HTML tags (if any) from the message string. Ideally, messages should
	 * be simple strings, carefully crafted for specific use with A11ySpeak.
	 * When re-using already existing strings this will ensure simple HTML to be
	 * stripped out and replaced with a space. Browsers will collapse multiple
	 * spaces natively.
	 */
	message = message.replace( /<[^<>]+>/g, " " );

	if ( containerAssertive && "assertive" === ariaLive ) {
		containerAssertive.textContent = message;
	} else if ( containerPolite ) {
		containerPolite.textContent = message;
	}
};

module.exports = A11ySpeak;

},{}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],9:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":79,"./_root":115}],10:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":84,"./_hashDelete":85,"./_hashGet":86,"./_hashHas":87,"./_hashSet":88}],11:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":96,"./_listCacheDelete":97,"./_listCacheGet":98,"./_listCacheHas":99,"./_listCacheSet":100}],12:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":79,"./_root":115}],13:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":101,"./_mapCacheDelete":102,"./_mapCacheGet":103,"./_mapCacheHas":104,"./_mapCacheSet":105}],14:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":79,"./_root":115}],15:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":79,"./_root":115}],16:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":13,"./_setCacheAdd":116,"./_setCacheHas":117}],17:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":11,"./_stackClear":121,"./_stackDelete":122,"./_stackGet":123,"./_stackHas":124,"./_stackSet":125}],18:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":115}],19:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":115}],20:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":79,"./_root":115}],21:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],22:[function(require,module,exports){
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

},{}],23:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],24:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf');

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

},{"./_baseIndexOf":41}],25:[function(require,module,exports){
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;

},{}],26:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":61,"./_isIndex":90,"./isArguments":142,"./isArray":143,"./isBuffer":146,"./isTypedArray":157}],27:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],28:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],29:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],30:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":132}],31:[function(require,module,exports){
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./_baseForOwn":36,"./_createBaseEach":70}],32:[function(require,module,exports){
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

},{"./_baseEach":31}],33:[function(require,module,exports){
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

},{}],34:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isFlattenable = require('./_isFlattenable');

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;

},{"./_arrayPush":28,"./_isFlattenable":89}],35:[function(require,module,exports){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":71}],36:[function(require,module,exports){
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"./_baseFor":35,"./keys":159}],37:[function(require,module,exports){
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":68,"./_toKey":128}],38:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  value = Object(value);
  return (symToStringTag && symToStringTag in value)
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":18,"./_getRawTag":80,"./_objectToString":112}],39:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;

},{}],40:[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

},{}],41:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictIndexOf = require('./_strictIndexOf');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

},{"./_baseFindIndex":33,"./_baseIsNaN":47,"./_strictIndexOf":126}],42:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    arrayMap = require('./_arrayMap'),
    baseUnary = require('./_baseUnary'),
    cacheHas = require('./_cacheHas');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * The base implementation of methods like `_.intersection`, without support
 * for iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of shared values.
 */
function baseIntersection(arrays, iteratee, comparator) {
  var includes = comparator ? arrayIncludesWith : arrayIncludes,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];

  while (othIndex--) {
    var array = arrays[othIndex];
    if (othIndex && iteratee) {
      array = arrayMap(array, baseUnary(iteratee));
    }
    maxLength = nativeMin(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
      ? new SetCache(othIndex && array)
      : undefined;
  }
  array = arrays[0];

  var index = -1,
      seen = caches[0];

  outer:
  while (++index < length && result.length < maxLength) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (!(seen
          ? cacheHas(seen, computed)
          : includes(result, computed, comparator)
        )) {
      othIndex = othLength;
      while (--othIndex) {
        var cache = caches[othIndex];
        if (!(cache
              ? cacheHas(cache, computed)
              : includes(arrays[othIndex], computed, comparator))
            ) {
          continue outer;
        }
      }
      if (seen) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseIntersection;

},{"./_SetCache":16,"./_arrayIncludes":24,"./_arrayIncludesWith":25,"./_arrayMap":27,"./_baseUnary":63,"./_cacheHas":65}],43:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":38,"./isObjectLike":154}],44:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObject = require('./isObject'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":45,"./isObject":153,"./isObjectLike":154}],45:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":17,"./_equalArrays":73,"./_equalByTag":74,"./_equalObjects":75,"./_getTag":81,"./isArray":143,"./isBuffer":146,"./isTypedArray":157}],46:[function(require,module,exports){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":17,"./_baseIsEqual":44}],47:[function(require,module,exports){
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

},{}],48:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":93,"./_toSource":129,"./isFunction":149,"./isObject":153}],49:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":38,"./isLength":150,"./isObjectLike":154}],50:[function(require,module,exports){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":53,"./_baseMatchesProperty":54,"./identity":139,"./isArray":143,"./property":163}],51:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":94,"./_nativeKeys":110}],52:[function(require,module,exports){
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

},{"./_baseEach":31,"./isArrayLike":144}],53:[function(require,module,exports){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":46,"./_getMatchData":78,"./_matchesStrictComparable":107}],54:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":44,"./_isKey":91,"./_isStrictComparable":95,"./_matchesStrictComparable":107,"./_toKey":128,"./get":136,"./hasIn":138}],55:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],56:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":37}],57:[function(require,module,exports){
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;

},{}],58:[function(require,module,exports){
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

},{"./_overRest":114,"./_setToString":119,"./identity":139}],59:[function(require,module,exports){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./_defineProperty":72,"./constant":131,"./identity":139}],60:[function(require,module,exports){
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;

},{}],61:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],62:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":18,"./_arrayMap":27,"./isArray":143,"./isSymbol":156}],63:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],64:[function(require,module,exports){
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;

},{"./_arrayMap":27}],65:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],66:[function(require,module,exports){
var isArrayLikeObject = require('./isArrayLikeObject');

/**
 * Casts `value` to an empty array if it's not an array like object.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array|Object} Returns the cast array-like object.
 */
function castArrayLikeObject(value) {
  return isArrayLikeObject(value) ? value : [];
}

module.exports = castArrayLikeObject;

},{"./isArrayLikeObject":145}],67:[function(require,module,exports){
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

},{"./identity":139}],68:[function(require,module,exports){
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

},{"./_isKey":91,"./_stringToPath":127,"./isArray":143,"./toString":169}],69:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":115}],70:[function(require,module,exports){
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./isArrayLike":144}],71:[function(require,module,exports){
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],72:[function(require,module,exports){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":79}],73:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":16,"./_arraySome":29,"./_cacheHas":65}],74:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":18,"./_Uint8Array":19,"./_equalArrays":73,"./_mapToArray":106,"./_setToArray":118,"./eq":132}],75:[function(require,module,exports){
var keys = require('./keys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./keys":159}],76:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],77:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":92}],78:[function(require,module,exports){
var isStrictComparable = require('./_isStrictComparable'),
    keys = require('./keys');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":95,"./keys":159}],79:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":48,"./_getValue":82}],80:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":18}],81:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":9,"./_Map":12,"./_Promise":14,"./_Set":15,"./_WeakMap":20,"./_baseGetTag":38,"./_toSource":129}],82:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],83:[function(require,module,exports){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":68,"./_isIndex":90,"./_toKey":128,"./isArguments":142,"./isArray":143,"./isLength":150}],84:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":109}],85:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],86:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":109}],87:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":109}],88:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":109}],89:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray');

/** Built-in value references. */
var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

},{"./_Symbol":18,"./isArguments":142,"./isArray":143}],90:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],91:[function(require,module,exports){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":143,"./isSymbol":156}],92:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],93:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":69}],94:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],95:[function(require,module,exports){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":153}],96:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],97:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":30}],98:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":30}],99:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":30}],100:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":30}],101:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":10,"./_ListCache":11,"./_Map":12}],102:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":77}],103:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":77}],104:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":77}],105:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":77}],106:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],107:[function(require,module,exports){
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

},{}],108:[function(require,module,exports){
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

},{"./memoize":161}],109:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":79}],110:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":113}],111:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":76}],112:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],113:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],114:[function(require,module,exports){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":21}],115:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":76}],116:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],117:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],118:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],119:[function(require,module,exports){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":59,"./_shortOut":120}],120:[function(require,module,exports){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],121:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":11}],122:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],123:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],124:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],125:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":11,"./_Map":12,"./_MapCache":13}],126:[function(require,module,exports){
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

},{}],127:[function(require,module,exports){
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./_memoizeCapped":108}],128:[function(require,module,exports){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":156}],129:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],130:[function(require,module,exports){
var basePropertyOf = require('./_basePropertyOf');

/** Used to map HTML entities to characters. */
var htmlUnescapes = {
  '&amp;': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&#39;': "'"
};

/**
 * Used by `_.unescape` to convert HTML entities to characters.
 *
 * @private
 * @param {string} chr The matched character to unescape.
 * @returns {string} Returns the unescaped character.
 */
var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

module.exports = unescapeHtmlChar;

},{"./_basePropertyOf":57}],131:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],132:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],133:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    baseFilter = require('./_baseFilter'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */
function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

},{"./_arrayFilter":23,"./_baseFilter":32,"./_baseIteratee":50,"./isArray":143}],134:[function(require,module,exports){
var baseFlatten = require('./_baseFlatten'),
    map = require('./map');

/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMap(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), 1);
}

module.exports = flatMap;

},{"./_baseFlatten":34,"./map":160}],135:[function(require,module,exports){
var arrayEach = require('./_arrayEach'),
    baseEach = require('./_baseEach'),
    castFunction = require('./_castFunction'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

},{"./_arrayEach":22,"./_baseEach":31,"./_castFunction":67,"./isArray":143}],136:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":37}],137:[function(require,module,exports){
var baseHas = require('./_baseHas'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;

},{"./_baseHas":39,"./_hasPath":83}],138:[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":40,"./_hasPath":83}],139:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],140:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    toInteger = require('./toInteger'),
    values = require('./values');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;

},{"./_baseIndexOf":41,"./isArrayLike":144,"./isString":155,"./toInteger":167,"./values":171}],141:[function(require,module,exports){
var arrayMap = require('./_arrayMap'),
    baseIntersection = require('./_baseIntersection'),
    baseRest = require('./_baseRest'),
    castArrayLikeObject = require('./_castArrayLikeObject');

/**
 * Creates an array of unique values that are included in all given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersection([2, 1], [2, 3]);
 * // => [2]
 */
var intersection = baseRest(function(arrays) {
  var mapped = arrayMap(arrays, castArrayLikeObject);
  return (mapped.length && mapped[0] === arrays[0])
    ? baseIntersection(mapped)
    : [];
});

module.exports = intersection;

},{"./_arrayMap":27,"./_baseIntersection":42,"./_baseRest":58,"./_castArrayLikeObject":66}],142:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":43,"./isObjectLike":154}],143:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],144:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":149,"./isLength":150}],145:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":144,"./isObjectLike":154}],146:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":115,"./stubFalse":164}],147:[function(require,module,exports){
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isBuffer = require('./isBuffer'),
    isPrototype = require('./_isPrototype'),
    isTypedArray = require('./isTypedArray');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;

},{"./_baseKeys":51,"./_getTag":81,"./_isPrototype":94,"./isArguments":142,"./isArray":143,"./isArrayLike":144,"./isBuffer":146,"./isTypedArray":157}],148:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual');

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are **not** supported.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

},{"./_baseIsEqual":44}],149:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":38,"./isObject":153}],150:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],151:[function(require,module,exports){
var isNumber = require('./isNumber');

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

module.exports = isNaN;

},{"./isNumber":152}],152:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;

},{"./_baseGetTag":38,"./isObjectLike":154}],153:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],154:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],155:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;

},{"./_baseGetTag":38,"./isArray":143,"./isObjectLike":154}],156:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":38,"./isObjectLike":154}],157:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":49,"./_baseUnary":63,"./_nodeUtil":111}],158:[function(require,module,exports){
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

},{}],159:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":26,"./_baseKeys":51,"./isArrayLike":144}],160:[function(require,module,exports){
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    isArray = require('./isArray');

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

},{"./_arrayMap":27,"./_baseIteratee":50,"./_baseMap":52,"./isArray":143}],161:[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":13}],162:[function(require,module,exports){
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0: return !predicate.call(this);
      case 1: return !predicate.call(this, args[0]);
      case 2: return !predicate.call(this, args[0], args[1]);
      case 3: return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

module.exports = negate;

},{}],163:[function(require,module,exports){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":55,"./_basePropertyDeep":56,"./_isKey":91,"./_toKey":128}],164:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],165:[function(require,module,exports){
var baseSlice = require('./_baseSlice'),
    toInteger = require('./toInteger');

/**
 * Creates a slice of `array` with `n` elements taken from the beginning.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=1] The number of elements to take.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.take([1, 2, 3]);
 * // => [1]
 *
 * _.take([1, 2, 3], 2);
 * // => [1, 2]
 *
 * _.take([1, 2, 3], 5);
 * // => [1, 2, 3]
 *
 * _.take([1, 2, 3], 0);
 * // => []
 */
function take(array, n, guard) {
  if (!(array && array.length)) {
    return [];
  }
  n = (guard || n === undefined) ? 1 : toInteger(n);
  return baseSlice(array, 0, n < 0 ? 0 : n);
}

module.exports = take;

},{"./_baseSlice":60,"./toInteger":167}],166:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":168}],167:[function(require,module,exports){
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":166}],168:[function(require,module,exports){
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":153,"./isSymbol":156}],169:[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":62}],170:[function(require,module,exports){
var toString = require('./toString'),
    unescapeHtmlChar = require('./_unescapeHtmlChar');

/** Used to match HTML entities and HTML characters. */
var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
    reHasEscapedHtml = RegExp(reEscapedHtml.source);

/**
 * The inverse of `_.escape`; this method converts the HTML entities
 * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
 * their corresponding characters.
 *
 * **Note:** No other HTML entities are unescaped. To unescape additional
 * HTML entities use a third-party library like [_he_](https://mths.be/he).
 *
 * @static
 * @memberOf _
 * @since 0.6.0
 * @category String
 * @param {string} [string=''] The string to unescape.
 * @returns {string} Returns the unescaped string.
 * @example
 *
 * _.unescape('fred, barney, &amp; pebbles');
 * // => 'fred, barney, & pebbles'
 */
function unescape(string) {
  string = toString(string);
  return (string && reHasEscapedHtml.test(string))
    ? string.replace(reEscapedHtml, unescapeHtmlChar)
    : string;
}

module.exports = unescape;

},{"./_unescapeHtmlChar":130,"./toString":169}],171:[function(require,module,exports){
var baseValues = require('./_baseValues'),
    keys = require('./keys');

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

},{"./_baseValues":64,"./keys":159}],172:[function(require,module,exports){
var findMatchingRule = function(rules, text){
  var i;
  for(i=0; i<rules.length; i++)
    if(rules[i].regex.test(text))
      return rules[i];
  return undefined;
};

var findMaxIndexAndRule = function(rules, text){
  var i, rule, last_matching_rule;
  for(i=0; i<text.length; i++){
    rule = findMatchingRule(rules, text.substring(0, i + 1));
    if(rule)
      last_matching_rule = rule;
    else if(last_matching_rule)
      return {max_index: i, rule: last_matching_rule};
  }
  return last_matching_rule ? {max_index: text.length, rule: last_matching_rule} : undefined;
};

module.exports = function(onToken_orig){
  var buffer = "";
  var rules = [];
  var line = 1;
  var col = 1;

  var onToken = function(src, type){
    onToken_orig({
      type: type,
      src: src,
      line: line,
      col: col
    });
    var lines = src.split("\n");
    line += lines.length - 1;
    col = (lines.length > 1 ? 1 : col) + lines[lines.length - 1].length;
  };

  return {
    addRule: function(regex, type){
      rules.push({regex: regex, type: type});
    },
    onText: function(text){
      var str = buffer + text;
      var m = findMaxIndexAndRule(rules, str);
      while(m && m.max_index !== str.length){
        onToken(str.substring(0, m.max_index), m.rule.type);

        //now find the next token
        str = str.substring(m.max_index);
        m = findMaxIndexAndRule(rules, str);
      }
      buffer = str;
    },
    end: function(){
      if(buffer.length === 0)
        return;

      var rule = findMatchingRule(rules, buffer);
      if(!rule){
        var err = new Error("unable to tokenize");
        err.tokenizer2 = {
          buffer: buffer,
          line: line,
          col: col
        };
        throw err;
      }

      onToken(buffer, rule.type);
    }
  };
};

},{}],173:[function(require,module,exports){
"use strict";
/**
 * The function getting the language part of the locale.
 *
 * @param {string} locale The locale.
 * @returns {string} The language part of the locale.
 */

module.exports = function (locale) {
  return locale.split("_")[0];
};



},{}],174:[function(require,module,exports){
"use strict";

var blockElements = ["address", "article", "aside", "blockquote", "canvas", "dd", "div", "dl", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "li", "main", "nav", "noscript", "ol", "output", "p", "pre", "section", "table", "tfoot", "ul", "video"];
var inlineElements = ["b", "big", "i", "small", "tt", "abbr", "acronym", "cite", "code", "dfn", "em", "kbd", "strong", "samp", "time", "var", "a", "bdo", "br", "img", "map", "object", "q", "script", "span", "sub", "sup", "button", "input", "label", "select", "textarea"];
var blockElementsRegex = new RegExp("^(" + blockElements.join("|") + ")$", "i");
var inlineElementsRegex = new RegExp("^(" + inlineElements.join("|") + ")$", "i");
var blockElementStartRegex = new RegExp("^<(" + blockElements.join("|") + ")[^>]*?>$", "i");
var blockElementEndRegex = new RegExp("^</(" + blockElements.join("|") + ")[^>]*?>$", "i");
var inlineElementStartRegex = new RegExp("^<(" + inlineElements.join("|") + ")[^>]*>$", "i");
var inlineElementEndRegex = new RegExp("^</(" + inlineElements.join("|") + ")[^>]*>$", "i");
var otherElementStartRegex = /^<([^>\s\/]+)[^>]*>$/;
var otherElementEndRegex = /^<\/([^>\s]+)[^>]*>$/;
var contentRegex = /^[^<]+$/;
var greaterThanContentRegex = /^<[^><]*$/;
var commentRegex = /<!--(.|[\r\n])*?-->/g;
var core = require("tokenizer2/core");
var forEach = require("lodash/forEach");
var memoize = require("lodash/memoize");
var tokens = [];
var htmlBlockTokenizer;
/**
 * Creates a tokenizer to tokenize HTML into blocks.
 *
 * @returns {void}
 */
function createTokenizer() {
    tokens = [];
    htmlBlockTokenizer = core(function (token) {
        tokens.push(token);
    });
    htmlBlockTokenizer.addRule(contentRegex, "content");
    htmlBlockTokenizer.addRule(greaterThanContentRegex, "greater-than-sign-content");
    htmlBlockTokenizer.addRule(blockElementStartRegex, "block-start");
    htmlBlockTokenizer.addRule(blockElementEndRegex, "block-end");
    htmlBlockTokenizer.addRule(inlineElementStartRegex, "inline-start");
    htmlBlockTokenizer.addRule(inlineElementEndRegex, "inline-end");
    htmlBlockTokenizer.addRule(otherElementStartRegex, "other-element-start");
    htmlBlockTokenizer.addRule(otherElementEndRegex, "other-element-end");
}
/**
 * Returns whether or not the given element name is a block element.
 *
 * @param {string} htmlElementName The name of the HTML element.
 * @returns {boolean} Whether or not it is a block element.
 */
function isBlockElement(htmlElementName) {
    return blockElementsRegex.test(htmlElementName);
}
/**
 * Returns whether or not the given element name is an inline element.
 *
 * @param {string} htmlElementName The name of the HTML element.
 * @returns {boolean} Whether or not it is an inline element.
 */
function isInlineElement(htmlElementName) {
    return inlineElementsRegex.test(htmlElementName);
}
/**
 * Splits a text into blocks based on HTML block elements.
 *
 * @param {string} text The text to split.
 * @returns {Array} A list of blocks based on HTML block elements.
 */
function getBlocks(text) {
    var blocks = [],
        depth = 0,
        blockStartTag = "",
        currentBlock = "",
        blockEndTag = "";
    // Remove all comments because it is very hard to tokenize them.
    text = text.replace(commentRegex, "");
    createTokenizer();
    htmlBlockTokenizer.onText(text);
    htmlBlockTokenizer.end();
    forEach(tokens, function (token, i) {
        var nextToken = tokens[i + 1];
        switch (token.type) {
            case "content":
            case "greater-than-sign-content":
            case "inline-start":
            case "inline-end":
            case "other-tag":
            case "other-element-start":
            case "other-element-end":
            case "greater than sign":
                if (!nextToken || depth === 0 && (nextToken.type === "block-start" || nextToken.type === "block-end")) {
                    currentBlock += token.src;
                    blocks.push(currentBlock);
                    blockStartTag = "";
                    currentBlock = "";
                    blockEndTag = "";
                } else {
                    currentBlock += token.src;
                }
                break;
            case "block-start":
                if (depth !== 0) {
                    if (currentBlock.trim() !== "") {
                        blocks.push(currentBlock);
                    }
                    currentBlock = "";
                    blockEndTag = "";
                }
                depth++;
                blockStartTag = token.src;
                break;
            case "block-end":
                depth--;
                blockEndTag = token.src;
                /*
                 * We try to match the most deep blocks so discard any other blocks that have been started but not
                 * finished.
                 */
                if ("" !== blockStartTag && "" !== blockEndTag) {
                    blocks.push(blockStartTag + currentBlock + blockEndTag);
                } else if ("" !== currentBlock.trim()) {
                    blocks.push(currentBlock);
                }
                blockStartTag = "";
                currentBlock = "";
                blockEndTag = "";
                break;
        }
        // Handles HTML with too many closing tags.
        if (depth < 0) {
            depth = 0;
        }
    });
    return blocks;
}
module.exports = {
    blockElements: blockElements,
    inlineElements: inlineElements,
    isBlockElement: isBlockElement,
    isInlineElement: isInlineElement,
    getBlocks: memoize(getBlocks)
};



},{"lodash/forEach":135,"lodash/memoize":161,"tokenizer2/core":172}],175:[function(require,module,exports){
"use strict";

var transitionWords = require("./transitionWords.js")().singleWords;
/**
 * Returns an array with exceptions for the prominent words researcher.
 * @returns {Array} The array filled with exceptions.
 */
var articles = ["de", "het", "een", "der", "des", "den"];
var cardinalNumerals = ["eén", "één", "twee", "drie", "vier", "vijf", "zes", "zeven", "acht", "negen", "tien", "elf", "twaalf", "dertien", "veertien", "vijftien", "zestien", "zeventien", "achttien", "negentien", "twintig", "honderd", "honderden", "duizend", "duizenden", "miljoen", "miljoenen", "biljoen", "biljoenen"];
var ordinalNumerals = ["eerste", "tweede", "derde", "vierde", "vijfde", "zesde", "zevende", "achtste", "negende", "tiende", "elfde", "twaalfde", "dertiende", "veertiende", "vijftiende", "zestiende", "zeventiende", "achttiende", "negentiende", "twinstigste"];
// 'Het' is already included in the list of articles.
var personalPronounsNominative = ["ik", "je", "jij", "hij", "ze", "we", "wij", "jullie", "zij", "u", "ge", "gij", "men"];
var personalPronounsAccusative = ["mij", "jou", "hem", "haar", "hen", "hun", "uw"];
var demonstrativePronouns = ["dit", "dat", "deze", "die", "zelf"];
// What to do with 'zijn', since it is also a verb?
var possessivePronouns = ["mijn", "mijne", "jouw", "jouwe", "zijne", "hare", "ons", "onze", "hunne", "uwe", "elkaars", "elkanders"];
var quantifiers = ["alle", "sommige", "sommigen", "weinig", "weinige", "weinigen", "veel", "vele", "velen", "geen", "beetje", "elke", "elk", "genoeg", "meer", "meest", "meeste", "meesten", "paar", "zoveel", "enkele", "enkelen", "zoveelste", "hoeveelste", "laatste", "laatsten", "iedere", "allemaal", "zekere", "ander", "andere", "gene", "enig", "enige", "verscheidene", "verschillende", "voldoende", "allerlei", "allerhande", "enerlei", "enerhande", "beiderlei", "beiderhande", "tweeërlei", "tweeërhande", "drieërlei", "drieërhande", "velerlei", "velerhande", "menigerlei", "menigerhande", "enigerlei", "enigerhande", "generlei", "generhande"];
var reflexivePronouns = ["mezelf", "mijzelf", "jezelf", "jouzelf", "zichzelf", "haarzelf", "hemzelf", "onszelf", "julliezelf", "henzelf", "hunzelf", "uzelf", "zich"];
var reciprocalPronouns = ["mekaar", "elkaar", "elkander", "mekander"];
var indefinitePronouns = ["iedereen", "ieder", "eenieder", "alleman", "allen", "alles", "iemand", "niemand", "iets", "niets", "menigeen"];
var indefinitePronounsPossessive = ["ieders", "aller", "iedereens", "eenieders"];
var relativePronouns = ["welke", "welk", "wat", "wie", "wiens", "wier"];
var interrogativeProAdverbs = ["hoe", "waarom", "waar", "hoezo", "hoeveel"];
var pronominalAdverbs = ["daaraan", "daarachter", "daaraf", "daarbij", "daarbinnen", "daarboven", "daarbuiten", "daardoorheen", "daarheen", "daarin", "daarjegens", "daarmede", "daarnaar", "daarnaartoe", "daaromtrent", "daaronder", "daarop", "daarover", "daaroverheen", "daarrond", "daartegen", "daartussen", "daartussenuit", "daaruit", "daarvan", "daarvandaan", "eraan", "erachter", "erachteraan", "eraf", "erbij", "erbinnen", "erboven", "erbuiten", "erdoor", "erdoorheen", "erheen", "erin", "erjegens", "ermede", "ermee", "erna", "ernaar", "ernaartoe", "ernaast", "erom", "eromtrent", "eronder", "eronderdoor", "erop", "eropaf", "eropuit", "erover", "eroverheen", "errond", "ertegen", "ertegenaan", "ertoe", "ertussen", "ertussenuit", "eruit", "ervan", "ervandaan", "ervandoor", "ervoor", "hieraan", "hierachter", "hieraf", "hierbij", "hierbinnen", "hierboven", "hierbuiten", "hierdoor", "hierdoorheen", "hierheen", "hierin", "hierjegens", "hierlangs", "hiermede", "hiermee", "hierna", "hiernaar", "hiernaartoe", "hiernaast", "hieromheen", "hieromtrent", "hieronder", "hierop", "hierover", "hieroverheen", "hierrond", "hiertegen", "hiertoe", "hiertussen", "hiertussenuit", "hieruit", "hiervan", "hiervandaan", "hiervoor", "vandaan", "waaraan", "waarachter", "waaraf", "waarbij", "waarboven", "waarbuiten", "waardoorheen", "waarheen", "waarin", "waarjegens", "waarmede", "waarna", "waarnaar", "waarnaartoe", "waarnaast", "waarop", "waarover", "waaroverheen", "waarrond", "waartegen", "waartegenin", "waartoe", "waartussen", "waartussenuit", "waaruit", "waarvan", "waarvandaan", "waarvoor"];
var locativeAdverbs = ["daar", "hier", "ginder", "daarginds", "ginds", "ver", "veraf", "ergens", "nergens", "overal", "dichtbij", "kortbij"];
var filteredPassiveAuxiliaries = ["word", "wordt", "werd", "werden", "ben", "bent", "is", "was", "waren"];
var passiveAuxiliariesInfinitive = ["worden", "zijn"];
var otherAuxiliaries = ["heb", "hebt", "heeft", "hadden", "had", "kun", "kan", "kunt", "kon", "konden", "mag", "mocht", "mochten", "dien", "dient", "diende", "dienden", "moet", "moest", "moesten", "ga", "gaat", "ging", "gingen"];
var otherAuxiliariesInfinitive = ["hebben", "kunnen", "mogen", "dienen", "moeten", "gaan"];
// 'Vóórkomen' (appear) is not included, because we don't want to filter out 'voorkómen' (prevent).
var copula = ["blijkt", "blijk", "bleek", "bleken", "gebleken", "dunkt", "dunk", "dunkte", "dunkten", "gedunkt", "heet", "heette", "heetten", "geheten", "lijkt", "lijk", "geleken", "leek", "leken", "schijn", "schijnt", "scheen", "schenen", "toescheen", "toeschijnt", "toeschijn", "toeschenen"];
var copulaInfinitive = ["blijken", "dunken", "heten", "lijken", "schijnen", "toeschijnen"];
var prepositions = ["à", "aan", "aangaande", "achter", "behalve", "behoudens", "beneden", "benevens", "benoorden", "benoordoosten", "benoordwesten", "beoosten", "betreffende", "bewesten", "bezijden", "bezuiden", "bezuidoosten", "bezuidwesten", "bij", "binnen", "blijkens", "boven", "bovenaan", "buiten", "circa", "conform", "contra", "cum", "dankzij", "door", "gedurende", "gezien", "in", "ingevolge", "inzake", "jegens", "krachtens", "langs", "luidens", "met", "middels", "na", "naar", "naast", "nabij", "namens", "nevens", "niettegenstaande", "nopens", "om", "omstreeks", "omtrent", "onder", "onderaan", "ongeacht", "onverminderd", "op", "over", "overeenkomstig", "per", "plus", "post", "richting", "rond", "rondom", "spijts", "staande", "te", "tegen", "tegenover", "ten", "ter", "tijdens", "tot", "tussen", "uit", "van", "vanaf", "vanuit", "versus", "via", "vis-à-vis", "volgens", "voor", "voorbij", "wegens", "zijdens", "zonder"];
// Many prepositional adverbs are already listed as preposition.
var prepositionalAdverbs = ["af", "heen", "mee", "toe", "achterop", "onderin", "voorin", "bovenop", "buitenop", "achteraan", "onderop", "binnenin", "tevoren"];
var coordinatingConjunctions = ["en", "alsmede", "of", "ofwel", "en/of"];
/* 'Zowel' and 'als' are part of 'zowel...als', 'evenmin' is part of 'evenmin...als', 'zomin' is part of 'zomin...als',
 'hetzij' is part of 'hetzij...hetzij'. */
var correlativeConjunctions = ["zowel", "evenmin", "zomin", "hetzij"];
var subordinatingConjunctions = ["vermits", "dewijl", "dorodien", "naardien", "nademaal", "overmits", "wijl", "eer", "eerdat", "aleer", "vooraleer", "alvorens", "totdat", "zolang", "sinds", "sedert", "ingeval", "tenware", "alhoewel", "hoezeer", "uitgezonderd", "zoverre", "zover", "naargelang", "naarmate", "alsof"];
// These verbs are frequently used in interviews to indicate questions and answers.
var interviewVerbs = ["zegt", "zei", "vraagt", "vroeg", "denkt", "dacht", "stelt", "pleit", "pleitte"];
// These transition words were not included in the list for the transition word assessment for various reasons.
var additionalTransitionWords = ["absoluut", "zeker", "ongetwijfeld", "sowieso", "onmiddelijk", "meteen", "inclusief", "direct", "ogenblikkelijk", "terstond", "natuurlijk", "vanzelfsprekend", "gewoonlijk", "normaliter", "doorgaans", "werkelijk", "daadwerkelijk", "inderdaad", "waarachtig", "oprecht", "bijna", "meestal", "misschien", "waarschijnlijk", "wellicht", "mogelijk", "vermoedelijk", "allicht", "aannemelijk", "oorspronkelijk", "aanvankelijk", "initieel", "eigenlijk", "feitelijk", "wezenlijk", "juist", "reeds", "alvast", "bijv.", "vaak", "dikwijls", "veelal", "geregeld", "menigmaal", "regelmatig", "veelvuldig", "eenvoudigweg", "simpelweg", "louter", "kortweg", "stomweg", "domweg", "zomaar", "eventueel", "mogelijkerwijs", "eens", "weleens", "nooit", "ooit", "anders", "momenteel", "thans", "incidenteel", "trouwens", "elders", "volgend", "recent", "onlangs", "recentelijk", "laatst", "zojuist", "relatief", "duidelijk", "overduidelijk", "klaarblijkelijk", "nadrukkelijk", "ogenschijnlijk", "kennelijk", "schijnbaar", "alweer", "continu", "herhaaldelijk", "nog", "steeds", "nu"];
// 'vrij' is not included because it also means 'free'.
var intensifiers = ["zeer", "erg", "redelijk", "flink", "tikkeltje", "bijzonder", "ernstig", "enigszins", "zo", "tamelijk", "nogal", "behoorlijk", "zwaar", "heel", "hele", "reuze", "buitengewoon", "ontzettend", "vreselijk"];
// These verbs convey little meaning.
var delexicalizedVerbs = ["laat", "liet", "lieten", "kom", "komt", "kwam", "kwamen", "maakt", "maak", "maakte", "maakten", "doe", "doet", "deed", "deden", "vindt", "vind", "vond", "vonden"];
var delexicalizedVerbsInfinitive = ["laten", "komen", "maken", "doen", "vinden"];
/* These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.
Keyword combinations containing these adjectives/adverbs are fine. */
var generalAdjectivesAdverbs = ["nieuw", "nieuwe", "nieuwer", "nieuwere", "nieuwst", "nieuwste", "oud", "oude", "ouder", "oudere", "oudst", "oudste", "vorig", "vorige", "goed", "goede", "beter", "betere", "best", "beste", "groot", "grote", "groter", "grotere", "grootst", "grootste", "makkelijk", "makkelijke", "makkelijker", "makkelijkere", "makkelijkst", "makkelijste", "gemakkelijk", "gemakkelijke", "gemakkelijker", "gemakkelijkere", "gemakkelijkst", "gemakkelijste", "simpel", "simpele", "simpeler", "simpelere", "simpelst", "simpelste", "snel", "snelle", "sneller", "snellere", "snelst", "snelste", "verre", "verder", "verdere", "verst", "verste", "lang", "lange", "langer", "langere", "langst", "langste", "hard", "harde", "harder", "hardere", "hardst", "hardste", "minder", "mindere", "minst", "minste", "eigen", "laag", "lage", "lager", "lagere", "laagst", "laagste", "hoog", "hoge", "hoger", "hogere", "hoogst", "hoogste", "klein", "kleine", "kleiner", "kleinere", "kleinst", "kleinste", "kort", "korte", "korter", "kortere", "kortst", "kortste", "herhaaldelijke", "directe", "ongeveer", "slecht", "slechte", "slechter", "slechtere", "slechtst", "slechtste", "zulke", "zulk", "zo'n", "zulks", "er", "extreem", "extreme", "bijbehorende", "bijbehorend", "niet"];
var interjections = ["oh", "wauw", "hèhè", "hè", "hé", "au", "ai", "jaja", "welja", "jawel", "ssst", "heremijntijd", "hemeltjelief", "aha", "foei", "hmm", "nou", "nee", "tja", "nja", "okido", "ho", "halt", "komaan", "komop", "verrek", "nietwaar", "brr", "oef", "ach", "och", "bah", "enfin", "afijn", "haha", "hihi", "hatsjie", "hatsjoe", "hm", "tring", "vroem", "boem", "hopla"];
// These words and abbreviations are frequently used in recipes in lists of ingredients.
var recipeWords = ["ml", "cl", "dl", "l", "tl", "el", "mg", "g", "gr", "kg", "ca", "theel", "min", "sec", "uur"];
var timeWords = ["seconde", "secondes", "seconden", "minuut", "minuten", "uur", "uren", "dag", "dagen", "week", "weken", "maand", "maanden", "jaar", "jaren", "vandaag", "morgen", "overmorgen", "gisteren", "eergisteren", "'s", "morgens", "avonds", "middags", "nachts"];
var vagueNouns = ["ding", "dingen", "manier", "manieren", "item", "items", "keer", "maal", "procent", "geval", "aspect", "persoon", "personen", "deel"];
var miscellaneous = ["wel", "ja", "neen", "oké", "oke", "okee", "ok", "zoiets", "€", "euro"];
var titlesPreceding = ["mevr", "dhr", "mr", "dr", "prof"];
var titlesFollowing = ["jr", "sr"];
/*
Exports all function words concatenated, and specific word categories and category combinations
to be used as filters for the prominent words.
 */
module.exports = function () {
  return {
    // These word categories are filtered at the ending of word combinations.
    filteredAtBeginning: [].concat(passiveAuxiliariesInfinitive, otherAuxiliariesInfinitive, copulaInfinitive, delexicalizedVerbsInfinitive),
    // These word categories are filtered at the ending of word combinations.
    filteredAtEnding: [].concat(ordinalNumerals, generalAdjectivesAdverbs),
    // These word categories are filtered at the beginning and ending of word combinations.
    filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers),
    // These word categories are filtered everywhere within word combinations.
    filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, reflexivePronouns, interjections, cardinalNumerals, filteredPassiveAuxiliaries, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeProAdverbs, relativePronouns, locativeAdverbs, miscellaneous, prepositionalAdverbs, pronominalAdverbs, recipeWords, timeWords, vagueNouns, reciprocalPronouns, possessivePronouns),
    // This export contains all of the above words.
    all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, reciprocalPronouns, personalPronounsNominative, personalPronounsAccusative, quantifiers, indefinitePronouns, indefinitePronounsPossessive, relativePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, prepositionalAdverbs, filteredPassiveAuxiliaries, passiveAuxiliariesInfinitive, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, titlesPreceding, titlesFollowing)
  };
};



},{"./transitionWords.js":176}],176:[function(require,module,exports){
"use strict";

var singleWords = ["aangezien", "al", "aldus", "allereerst", "als", "alsook", "anderzijds", "bijgevolg", "bijvoorbeeld", "bovendien", "concluderend", "daardoor", "daarentegen", "daarmee", "daarna", "daarnaast", "daarom", "daartoe", "daarvoor", "dadelijk", "dan", "desondanks", "dienovereenkomstig", "dientegevolge", "doch", "doordat", "dus", "echter", "eerst", "evenals", "eveneens", "evenzeer", "hierom", "hoewel", "immers", "indien", "integendeel", "intussen", "kortom", "later", "maar", "mits", "nadat", "namelijk", "net als", "niettemin", "noch", "ofschoon", "omdat", "ondanks", "ondertussen", "ook", "opdat", "resumerend", "samengevat", "samenvattend", "tegenwoordig", "teneinde", "tenzij", "terwijl", "tevens", "toch", "toen", "uiteindelijk", "vanwege", "vervolgens", "voorafgaand", "vooralsnog", "voordat", "voorts", "vroeger", "waardoor", "waarmee", "waaronder", "wanneer", "want", "zoals", "zodat", "zodoende", "zodra"];
var multipleWords = ["aan de andere kant", "aan de ene kant", "aangenomen dat", "al met al", "alles afwegend", "alles bij elkaar", "alles in aanmerking nemend", "als gevolg van", "anders gezegd", "daar staat tegenover", "daarbij komt", "daaruit volgt", "dat betekent", "dat blijkt uit", "de oorzaak daarvan is", "de oorzaak hiervan is", "door middel van", "een voorbeeld hiervan", "een voorbeeld van", "gesteld dat", "hetzelfde als", "hieruit kunnen we afleiden", "hieruit volgt", "hoe het ook zij", "in de derde plaats", "in de eerste plaats", "in de tweede plaats", "in één woord", "in het bijzonder", "in het geval dat", "in plaats van", "in tegenstelling tot", "in vergelijking met", "maar ook", "met als doel", "met andere woorden", "met behulp van", "met de bedoeling", "neem nou", "net als", "om kort te gaan", "onder andere", "op dezelfde wijze", "stel dat", "te danken aan", "te wijten aan", "ten derde", "ten eerste", "ten gevolge van", "ten slotte", "ten tweede", "ter conclusie", "ter illustratie", "ter verduidelijking", "tot nog toe", "tot slot", "vandaar dat", "vergeleken met", "voor het geval dat"];
/**
 * Returns lists with transition words to be used by the assessments.
 * @returns {Object} The object with transition word lists.
 */
module.exports = function () {
    return {
        singleWords: singleWords,
        multipleWords: multipleWords,
        allWords: singleWords.concat(multipleWords)
    };
};



},{}],177:[function(require,module,exports){
"use strict";

var filteredPassiveAuxiliaries = require("./passivevoice/auxiliaries.js")().filteredAuxiliaries;
var notFilteredPassiveAuxiliaries = require("./passivevoice/auxiliaries.js")().notFilteredAuxiliaries;
var transitionWords = require("./transitionWords.js")().singleWords;
/**
 * Returns an object with exceptions for the prominent words researcher
 * @returns {Object} The object filled with exception arrays.
 */
var articles = ["the", "an", "a"];
var cardinalNumerals = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "hundred", "hundreds", "thousand", "thousands", "million", "millions", "billion", "billions"];
var ordinalNumerals = ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth", "twentieth"];
var personalPronounsNominative = ["i", "you", "he", "she", "it", "we", "they"];
var personalPronounsAccusative = ["me", "him", "us", "them"];
var demonstrativePronouns = ["this", "that", "these", "those"];
var possessivePronouns = ["my", "your", "his", "her", "its", "their", "our", "mine", "yours", "hers", "theirs", "ours"];
var quantifiers = ["all", "some", "many", "lot", "lots", "ton", "tons", "bit", "no", "every", "enough", "little", "much", "more", "most", "plenty", "several", "few", "fewer", "kind", "kinds"];
var reflexivePronouns = ["myself", "yourself", "himself", "herself", "itself", "oneself", "ourselves", "yourselves", "themselves"];
var indefinitePronouns = ["none", "nobody", "everyone", "everybody", "someone", "somebody", "anyone", "anybody", "nothing", "everything", "something", "anything", "each", "other", "whatever", "whichever", "whoever", "whomever", "whomsoever", "whosoever", "others", "neither", "both", "either", "any", "such"];
var indefinitePronounsPossessive = ["one's", "nobody's", "everyone's", "everybody's", "someone's", "somebody's", "anyone's", "anybody's", "nothing's", "everything's", "something's", "anything's", "whoever's", "others'", "other's", "another's", "neither's", "either's"];
var interrogativeDeterminers = ["which", "what", "whose"];
var interrogativePronouns = ["who", "whom"];
var interrogativeProAdverbs = ["where", "how", "why", "whether", "wherever", "whyever", "wheresoever", "whensoever", "howsoever", "whysoever", "whatsoever", "whereso", "whomso", "whenso", "howso", "whyso", "whoso", "whatso"];
var pronominalAdverbs = ["therefor", "therein", "hereby", "hereto", "wherein", "therewith", "herewith", "wherewith", "thereby"];
var locativeAdverbs = ["there", "here", "whither", "thither", "hither", "whence", "thence"];
var adverbialGenitives = ["always", "once", "twice", "thrice"];
var otherAuxiliaries = ["can", "cannot", "can't", "could", "couldn't", "could've", "dare", "dares", "dared", "do", "don't", "does", "doesn't", "did", "didn't", "done", "have", "haven't", "had", "hadn't", "has", "hasn't", "i've", "you've", "we've", "they've", "i'd", "you'd", "he'd", "she'd", "it'd", "we'd", "they'd", "would", "wouldn't", "would've", "may", "might", "must", "need", "needn't", "needs", "ought", "shall", "shalln't", "shan't", "should", "shouldn't", "will", "won't", "i'll", "you'll", "he'll", "she'll", "it'll", "we'll", "they'll", "there's", "there're", "there'll", "here's", "here're", "there'll"];
var copula = ["appear", "appears", "appeared", "become", "becomes", "became", "come", "comes", "came", "keep", "keeps", "kept", "remain", "remains", "remained", "stay", "stays", "stayed", "turn", "turns", "turned"];
// These verbs should only be included at the beginning of combinations.
var continuousVerbs = ["doing", "daring", "having", "appearing", "becoming", "coming", "keeping", "remaining", "staying", "saying", "asking", "stating", "seeming", "letting", "making", "setting", "showing", "putting", "adding", "going", "using", "trying", "containing"];
var prepositions = ["in", "from", "with", "under", "throughout", "atop", "for", "on", "of", "to", "aboard", "about", "above", "abreast", "absent", "across", "adjacent", "after", "against", "along", "alongside", "amid", "mid", "among", "apropos", "apud", "around", "as", "astride", "at", "ontop", "afore", "tofore", "behind", "ahind", "below", "ablow", "beneath", "neath", "beside", "between", "atween", "beyond", "ayond", "by", "chez", "circa", "spite", "down", "except", "into", "less", "like", "minus", "near", "nearer", "nearest", "anear", "notwithstanding", "off", "onto", "opposite", "out", "outen", "over", "past", "per", "pre", "qua", "sans", "sauf", "sithence", "through", "thru", "truout", "toward", "underneath", "up", "upon", "upside", "versus", "via", "vis-à-vis", "without", "ago", "apart", "aside", "aslant", "away", "withal", "towards", "amidst", "amongst", "midst", "whilst"];
// Many prepositional adverbs are already listed as preposition.
var prepositionalAdverbs = ["back", "within", "forward", "backward", "ahead"];
var coordinatingConjunctions = ["and", "or", "and/or", "yet"];
// 'sooner' is part of 'no sooner...than', 'just' is part of 'just as...so',
// 'Only' is part of 'not only...but also'.
var correlativeConjunctions = ["sooner", "just", "only"];
var subordinatingConjunctions = ["if", "even"];
// These verbs are frequently used in interviews to indicate questions and answers.
// 'Claim','claims', 'state' and 'states' are not included, because these words are also nouns.
var interviewVerbs = ["say", "says", "said", "claimed", "ask", "asks", "asked", "stated", "explain", "explains", "explained", "think", "thinks", "talks", "talked", "announces", "announced", "tells", "told", "discusses", "discussed", "suggests", "suggested", "understands", "understood"];
// These transition words were not included in the list for the transition word assessment for various reasons.
var additionalTransitionWords = ["again", "definitely", "eternally", "expressively", "instead", "expressly", "immediately", "including", "instantly", "namely", "naturally", "next", "notably", "now", "nowadays", "ordinarily", "positively", "truly", "ultimately", "uniquely", "usually", "almost", "maybe", "probably", "granted", "initially", "too", "actually", "already", "e.g", "i.e", "often", "regularly", "simply", "optionally", "perhaps", "sometimes", "likely", "never", "ever", "else", "inasmuch", "provided", "currently", "incidentally", "elsewhere", "particular", "recently", "relatively", "f.i", "clearly", "apparently"];
var intensifiers = ["highly", "very", "really", "extremely", "absolutely", "completely", "totally", "utterly", "quite", "somewhat", "seriously", "fairly", "fully", "amazingly"];
/* These verbs convey little meaning. 'Show', 'shows', 'uses', 'meaning', 'set', 'sets'
 are not included, because these words could be relevant nouns.

 */
var delexicalizedVerbs = ["seem", "seems", "seemed", "let", "let's", "lets", "make", "makes", "made", "want", "showed", "shown", "go", "goes", "went", "gone", "take", "takes", "took", "taken", "put", "puts", "use", "used", "try", "tries", "tried", "mean", "means", "meant", "called", "based", "add", "adds", "added", "contain", "contains", "contained", "consist", "consists", "consisted", "ensure", "ensures", "ensured"];
// These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.
// Keyword combinations containing these adjectives/adverbs are fine.
var generalAdjectivesAdverbs = ["new", "newer", "newest", "old", "older", "oldest", "previous", "good", "well", "better", "best", "big", "bigger", "biggest", "easy", "easier", "easiest", "fast", "faster", "fastest", "far", "hard", "harder", "hardest", "least", "own", "large", "larger", "largest", "long", "longer", "longest", "low", "lower", "lowest", "high", "higher", "highest", "regular", "simple", "simpler", "simplest", "small", "smaller", "smallest", "tiny", "tinier", "tiniest", "short", "shorter", "shortest", "main", "actual", "nice", "nicer", "nicest", "real", "same", "able", "certain", "usual", "so-called", "mainly", "mostly", "recent", "anymore", "complete", "lately", "possible", "commonly", "constantly", "continually", "directly", "easily", "nearly", "slightly", "somewhere", "estimated", "latest", "different", "similar", "widely", "bad", "worse", "worst", "great", "specific", "available", "average", "awful", "awesome", "basic", "beautiful", "busy", "current", "entire", "everywhere", "important", "major", "multiple", "normal", "necessary", "obvious", "partly", "special", "last", "early", "earlier", "earliest", "young", "younger", "youngest", ""];
var interjections = ["oh", "wow", "tut-tut", "tsk-tsk", "ugh", "whew", "phew", "yeah", "yea", "shh", "oops", "ouch", "aha", "yikes"];
// These words and abbreviations are frequently used in recipes in lists of ingredients.
var recipeWords = ["tbs", "tbsp", "spk", "lb", "qt", "pk", "bu", "oz", "pt", "mod", "doz", "hr", "f.g", "ml", "dl", "cl", "l", "mg", "g", "kg", "quart"];
var timeWords = ["seconds", "minute", "minutes", "hour", "hours", "day", "days", "week", "weeks", "month", "months", "year", "years", "today", "tomorrow", "yesterday"];
// 'People' should only be removed in combination with 'some', 'many' and 'few' (and is therefore not yet included in the list below).
var vagueNouns = ["thing", "things", "way", "ways", "matter", "case", "likelihood", "ones", "piece", "pieces", "stuff", "times", "part", "parts", "percent", "instance", "instances", "aspect", "aspects", "item", "items", "idea", "theme", "person", "instance", "instances", "detail", "details", "factor", "factors", "difference", "differences"];
// 'No' is already included in the quantifier list.
var miscellaneous = ["not", "yes", "sure", "top", "bottom", "ok", "okay", "amen", "aka", "etc", "etcetera", "sorry", "please"];
var titlesPreceding = ["ms", "mss", "mrs", "mr", "dr", "prof"];
var titlesFollowing = ["jr", "sr"];
module.exports = function () {
    return {
        // These word categories are filtered at the ending of word combinations.
        filteredAtEnding: [].concat(ordinalNumerals, continuousVerbs, generalAdjectivesAdverbs),
        // These word categories are filtered at the beginning and ending of word combinations.
        filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),
        // These word categories are filtered everywhere within word combinations.
        filteredAnywhere: [].concat(transitionWords, adverbialGenitives, personalPronounsNominative, personalPronounsAccusative, reflexivePronouns, interjections, cardinalNumerals, filteredPassiveAuxiliaries, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, miscellaneous, prepositionalAdverbs, pronominalAdverbs, recipeWords, timeWords, vagueNouns),
        // These categories are used in the passive voice assessment. If they directly precede a participle, the sentence part is not passive.
        cannotDirectlyPrecedePassiveParticiple: [].concat(articles, prepositions, demonstrativePronouns, possessivePronouns, ordinalNumerals, continuousVerbs, quantifiers),
        /*
        These categories are used in the passive voice assessment. If they appear between an auxiliary and a participle,
        the sentence part is not passive.
        */
        cannotBeBetweenPassiveAuxiliaryAndParticiple: [].concat(otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs),
        // This export contains all of the above words.
        all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, personalPronounsNominative, personalPronounsAccusative, quantifiers, indefinitePronouns, continuousVerbs, indefinitePronounsPossessive, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, adverbialGenitives, prepositionalAdverbs, filteredPassiveAuxiliaries, notFilteredPassiveAuxiliaries, otherAuxiliaries, copula, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, titlesPreceding, titlesFollowing)
    };
};



},{"./passivevoice/auxiliaries.js":178,"./transitionWords.js":179}],178:[function(require,module,exports){
"use strict";
// These auxiliaries are filtered from the beginning of word combinations in the prominent words.

var filteredAuxiliaries = ["am", "is", "are", "was", "were", "been", "get", "gets", "got", "gotten", "be", "she's", "he's", "it's", "i'm", "we're", "they're", "you're", "isn't", "weren't", "wasn't", "that's", "aren't"];
// These auxiliaries are not filtered from the beginning of word combinations in the prominent words.
var notFilteredAuxiliaries = ["being", "getting", "having", "what's"];
module.exports = function () {
    return {
        filteredAuxiliaries: filteredAuxiliaries,
        notFilteredAuxiliaries: notFilteredAuxiliaries,
        all: filteredAuxiliaries.concat(notFilteredAuxiliaries)
    };
};



},{}],179:[function(require,module,exports){
"use strict";
/** @module config/transitionWords */

var singleWords = ["accordingly", "additionally", "afterward", "afterwards", "albeit", "also", "although", "altogether", "another", "basically", "because", "before", "besides", "but", "certainly", "chiefly", "comparatively", "concurrently", "consequently", "contrarily", "conversely", "correspondingly", "despite", "doubtedly", "during", "e.g.", "earlier", "emphatically", "equally", "especially", "eventually", "evidently", "explicitly", "finally", "firstly", "following", "formerly", "forthwith", "fourthly", "further", "furthermore", "generally", "hence", "henceforth", "however", "i.e.", "identically", "indeed", "instead", "last", "lastly", "later", "lest", "likewise", "markedly", "meanwhile", "moreover", "nevertheless", "nonetheless", "nor", "notwithstanding", "obviously", "occasionally", "otherwise", "overall", "particularly", "presently", "previously", "rather", "regardless", "secondly", "shortly", "significantly", "similarly", "simultaneously", "since", "so", "soon", "specifically", "still", "straightaway", "subsequently", "surely", "surprisingly", "than", "then", "thereafter", "therefore", "thereupon", "thirdly", "though", "thus", "till", "undeniably", "undoubtedly", "unless", "unlike", "unquestionably", "until", "when", "whenever", "whereas", "while"];
var multipleWords = ["above all", "after all", "after that", "all in all", "all of a sudden", "all things considered", "analogous to", "although this may be true", "analogous to", "another key point", "as a matter of fact", "as a result", "as an illustration", "as can be seen", "as has been noted", "as I have noted", "as I have said", "as I have shown", "as long as", "as much as", "as shown above", "as soon as", "as well as", "at any rate", "at first", "at last", "at least", "at length", "at the present time", "at the same time", "at this instant", "at this point", "at this time", "balanced against", "being that", "by all means", "by and large", "by comparison", "by the same token", "by the time", "compared to", "be that as it may", "coupled with", "different from", "due to", "equally important", "even if", "even more", "even so", "even though", "first thing to remember", "for example", "for fear that", "for instance", "for one thing", "for that reason", "for the most part", "for the purpose of", "for the same reason", "for this purpose", "for this reason", "from time to time", "given that", "given these points", "important to realize", "in a word", "in addition", "in another case", "in any case", "in any event", "in brief", "in case", "in conclusion", "in contrast", "in detail", "in due time", "in effect", "in either case", "in essence", "in fact", "in general", "in light of", "in like fashion", "in like manner", "in order that", "in order to", "in other words", "in particular", "in reality", "in short", "in similar fashion", "in spite of", "in sum", "in summary", "in that case", "in the event that", "in the final analysis", "in the first place", "in the fourth place", "in the hope that", "in the light of", "in the long run", "in the meantime", "in the same fashion", "in the same way", "in the second place", "in the third place", "in this case", "in this situation", "in time", "in truth", "in view of", "inasmuch as", "most compelling evidence", "most important", "must be remembered", "not to mention", "now that", "of course", "on account of", "on balance", "on condition that", "on one hand", "on the condition that", "on the contrary", "on the negative side", "on the other hand", "on the positive side", "on the whole", "on this occasion", "once", "once in a while", "only if", "owing to", "point often overlooked", "prior to", "provided that", "seeing that", "so as to", "so far", "so long as", "so that", "sooner or later", "such as", "summing up", "take the case of", "that is", "that is to say", "then again", "this time", "to be sure", "to begin with", "to clarify", "to conclude", "to demonstrate", "to emphasize", "to enumerate", "to explain", "to illustrate", "to list", "to point out", "to put it another way", "to put it differently", "to repeat", "to rephrase it", "to say nothing of", "to sum up", "to summarize", "to that end", "to the end that", "to this end", "together with", "under those circumstances", "until now", "up against", "up to the present time", "vis a vis", "what's more", "while it may be true", "while this may be true", "with attention to", "with the result that", "with this in mind", "with this intention", "with this purpose in mind", "without a doubt", "without delay", "without doubt", "without reservation"];
/**
 * Returns lists with transition words to be used by the assessments.
 * @returns {Object} The object with transition word lists.
 */
module.exports = function () {
    return {
        singleWords: singleWords,
        multipleWords: multipleWords,
        allWords: singleWords.concat(multipleWords)
    };
};



},{}],180:[function(require,module,exports){
"use strict";

var transitionWords = require("./transitionWords.js")().singleWords;
/**
 * Returns an object with exceptions for the prominent words researcher
 * @returns {Object} The object filled with exception arrays.
 */
var articles = ["le", "la", "les", "un", "une", "des", "aux", "du", "au", "d'un", "d'une"];
var cardinalNumerals = ["deux", "trois", "quatre", "cinq", "six", "sept", "huit", "neuf", "dix", "onze", "douze", "treize", "quatorze", "quinze", "seize", "dix-sept", "dix-huit", "dix-neuf", "vingt", "trente", "quarante", "cinquante", "soixante", "soixante-dix", "quatre-vingt", "quatre-vingt-dix", "cent", "mille", "million", "milliard"];
// 'premier' and 'première' are not included because of their secondary meanings ('prime minister', '[movie] premiere')
var ordinalNumerals = ["second", "secondes", "deuxième", "deuxièmes", "troisième", "troisièmes", "quatrième", "quatrièmes", "cinquième", "cinquièmes", "sixième", "sixièmes", "septième", "septièmes", "huitième", "huitièmes", "neuvième", "neuvièmes", "dixième", "dixièmes", "onzième", "onzièmes", "douzième", "douzièmes", "treizième", "treizièmes", "quatorzième", "quatorzièmes", "quinzième", "quinzièmes", "seizième", "seizièmes", "dix-septième", "dix-septièmes", "dix-huitième", "dix-huitièmes", "dix-neuvième", "dix-neuvièmes", "vingtième", "vingtièmes"];
var personalPronounsNominative = ["je", "tu", "il", "elle", "on", "nous", "vous", "ils", "elles"];
var personalPronounsStressed = ["moi", "toi", "lui", "soi", "eux"];
// Le, la, les are already included in the articles list.
var personalPronounsAccusative = ["me", "te"];
var demonstrativePronouns = ["celui", "celle", "ceux", "celles", "ce", "celui-ci", "celui-là", "celle-ci", "celle-là", "ceux-ci", "ceux-là", "celles-ci", "celles-là", "ceci", "cela", "ça", "cette", "cet", "ces"];
var possessivePronouns = ["mon", "ton", "son", "ma", "ta", "sa", "mes", "tes", "ses", "notre", "votre", "leur", "nos", "vos", "leurs"];
var quantifiers = ["beaucoup", "peu", "quelque", "quelques", "tous", "tout", "toute", "toutes", "plusieurs", "plein", "chaque", "suffisant", "suffisante", "suffisantes", "suffisants", "faible", "moins", "tant", "plus", "divers", "diverse", "diverses"];
// The remaining reflexive personal pronouns are already included in other pronoun lists.
var reflexivePronouns = ["se"];
var indefinitePronouns = ["aucun", "aucune", "autre", "autres", "certain", "certaine", "certaines", "certains", "chacun", "chacune", "même", "mêmes", "quelqu'un", "quelqu'une", "quelques'uns", "quelques'unes", "autrui", "nul", "personne", "quiconque", "rien", "d'aucunes", "d'aucuns", "nuls", "nules", "l'autre", "l'autres", "tel", "telle", "tels", "telles"];
var relativePronouns = ["qui", "que", "lequel", "laquelle", "auquel", "auxquels", "auxquelles", "duquel", "desquels", "desquelles", "dont", "où", "quoi"];
var interrogativeProAdverbs = ["combien", "comment", "pourquoi", "d'où"];
var interrogativeAdjectives = ["quel", "quels", "quelle"];
var pronominalAdverbs = ["y"];
var locativeAdverbs = ["là", "ici", "voici"];
// 'Vins' is not included because it also means 'wines'.
var otherAuxiliaries = ["a", "a-t-elle", "a-t-il", "a-t-on", "ai", "ai-je", "aie", "as", "as-tu", "aura", "aurai", "auraient", "aurais", "aurait", "auras", "aurez", "auriez", "aurons", "auront", "avaient", "avais", "avait", "avez", "avez-vous", "aviez", "avions", "avons", "avons-nous", "ayez", "ayons", "eu", "eûmes", "eurent", "eus", "eut", "eûtes", "j'ai", "j'aurai", "j'avais", "j'eus", "ont", "ont-elles", "ont-ils", "vais", "vas", "va", "allons", "allez", "vont", "vais-je", "vas-tu", "va-t-il", "va-t-elle", "va-t-on", "allons-nous", "allez-vous", "vont-elles", "vont-ils", "allé", "allés", "j'allai", "allai", "allas", "alla", "allâmes", "allâtes", "allèrent", "j'allais", "allais", "allait", "allions", "alliez", "allaient", "j'irai", "iras", "ira", "irons", "irez", "iront", "j'aille", "aille", "ailles", "aillent", "j'allasse", "allasse", "allasses", "allât", "allassions", "allassiez", "allassent", "j'irais", "irais", "irait", "irions", "iriez", "iraient", "allant", "viens", "vient", "venons", "venez", "viennent", "viens-je", "viens-de", "vient-il", "vient-elle", "vient-on", "venons-nous", "venez-vous", "viennent-elles", "viennent-ils", "vins", "vint", "vînmes", "vîntes", "vinrent", "venu", "venus", "venais", "venait", "venions", "veniez", "venaient", "viendrai", "viendras", "viendra", "viendrons", "viendrez", "viendront", "vienne", "viennes", "vinsse", "vinsses", "vînt", "vinssions", "vinssiez", "vinssent", "viendrais", "viendrait", "viendrions", "viendriez", "viendraient", "venant", "dois", "doit", "devons", "devez", "doivent", "dois-je", "dois-tu", "doit-il", "doit-elle", "doit-on", "devons-nous", "devez-vous", "doivent-elles", "doivent-ils", "dus", "dut", "dûmes", "dûtes", "durent", "dû", "devais", "devait", "devions", "deviez", "devaient", "devrai", "devras", "devra", "devrons", "devrez", "devront", "doive", "doives", "dusse", "dusses", "dût", "dussions", "dussiez", "dussent", "devrais", "devrait", "devrions", "devriez", "devraient", "peux", "peut", "pouvons", "pouvez", "peuvent", "peux-je", "peux-tu", "peut-il", "peut-elle", "peut-on", "pouvons-nous", "pouvez-vous", "peuvent-ils", "peuvent-elles", "pus", "put", "pûmes", "pûtes", "purent", "pu", "pouvais", "pouvait", "pouvions", "pouviez", "pouvaient", "pourrai", "pourras", "pourra", "pourrons", "pourrez", "pourront", "puisse", "puisses", "puissions", "puissiez", "puissent", "pusse", "pusses", "pût", "pussions", "pussiez", "pussent", "pourrais", "pourrait", "pourrions", "pourriez", "pourraient", "pouvant", "semble", "sembles", "semblons", "semblez", "semblent", "semble-je", "sembles-il", "sembles-elle", "sembles-on", "semblons-nous", "semblez-vous", "semblent-ils", "semblent-elles", "semblai", "semblas", "sembla", "semblâmes", "semblâtes", "semblèrent", "semblais", "semblait", "semblions", "sembliez", "semblaient", "semblerai", "sembleras", "semblera", "semblerons", "semblerez", "sembleront", "semblé", "semblasse", "semblasses", "semblât", "semblassions", "semblassiez", "semblassent", "semblerais", "semblerait", "semblerions", "sembleriez", "sembleraient", "parais", "paraît", "ait", "paraissons", "paraissez", "paraissent", "parais-je", "parais-tu", "paraît-il", "paraît-elle", "paraît-on", "ait-il", "ait-elle", "ait-on", "paraissons-nous", "paraissez-vous", "paraissent-ils", "paraissent-elles", "parus", "parut", "parûmes", "parûtes", "parurent", "paraissais", "paraissait", "paraissions", "paraissiez", "paraissaient", "paraîtrai", "paraîtras", "paraîtra", "paraîtrons", "paraîtrez", "paraîtront", "aitrai", "aitras", "aitra", "aitrons", "aitrez", "aitront", "paru", "paraisse", "paraisses", "parusse", "parusses", "parût", "parussions", "parussiez", "parussent", "paraîtrais", "paraîtrait", "paraîtrions", "paraîtriez", "paraîtraient", "paraitrais", "paraitrait", "paraitrions", "paraitriez", "paraitraient", "paraissant", "mets", "met", "mettons", "mettez", "mettent", "mets-je", "mets-tu", "met-il", "met-elle", "met-on", "mettons-nous", "mettez-vous", "mettent-ils", "mettent-elles", "mis", "mit", "mîmes", "mîtes", "mirent", "mettais", "mettait", "mettions", "mettiez", "mettaient", "mettrai", "mettras", "mettra", "mettrons", "mettrez", "mettront", "mette", "mettes", "misse", "misses", "mît", "missions", "missiez", "missent", "mettrais", "mettrait", "mettrions", "mettriez", "mettraient", "mettant", "finis", "finit", "finissons", "finissez", "finissent", "finis-je", "finis-tu", "finit-il", "finit-elle", "finit-on", "finissons-nous", "finissez-vous", "finissent-ils", "finissent-elles", "finîmes", "finîtes", "finirent", "finissais", "finissait", "finissions", "finissiez", "finissaient", "finirai", "finiras", "finira", "finirons", "finirez", "finiront", "fini", "finisse", "finisses", "finît", "finirais", "finirait", "finirions", "finiriez", "finiraient", "finissant"];
var otherAuxiliariesInfinitive = ["avoir", "aller", "venir", "devoir", "pouvoir", "sembler", "paraître", "paraitre", "mettre", "finir"];
var copula = ["suis", "es", "est", "est-ce", "n'est", "sommes", "êtes", "sont", "suis-je", "es-tu", "est-il", "est-elle", "est-on", "sommes-nous", "êtes-vous", "sont-ils", "sont-elles", "étais", "était", "étions", "étiez", "étaient", "serai", "seras", "sera", "serons", "serez", "seront", "serais", "serait", "serions", "seriez", "seraient", "sois", "soit", "soyons", "soyez", "soient", "été"];
var copulaInfinitive = ["être"];
/*
’Excepté' not filtered because might also be participle of 'excepter', 'concernant' not filtered because might also be present participle
of 'concerner'.
Not filtered because of primary meaning: 'grâce à' ('grace'), 'en face' ('face'), 'en dehors' ('outside'), 'à côté' ('side'),
'à droite' ('right'), 'à gauche' ('left'). 'voici' already included in the locative pronoun list.
'hors' for 'hors de', 'quant' for 'quant à'. ‘travers’ is part of 'à travers.'
 */
var prepositions = ["à", "après", "au-delà", "au-dessous", "au-dessus", "avant", "avec", "concernant", "chez", "contre", "dans", "de", "depuis", "derrière", "dès", "devant", "durant", "en", "entre", "envers", "environ", "hormis", "hors", "jusque", "jusqu'à", "jusqu'au", "jusqu'aux", "loin", "moyennant", "outre", "par", "parmi", "pendant", "pour", "près", "quant", "sans", "sous", "sur", "travers", "vers", "voilà"];
var coordinatingConjunctions = ["et", "ni", "or", "ou"];
/*
Et...et, ou...ou, ni...ni – in their simple forms already in other lists. 'd'une', 'd'autre' are part of 'd'une part…d'autre part'.
'sinon' is part of 'sinon…du moins'.
*/
var correlativeConjunctions = ["non", "pas", "seulement", "sitôt", "aussitôt", "d'autre"];
/*
Many subordinating conjunctions are already included in the prepositions list, transition words list or pronominal adverbs list.
'autant', 'd'autant', 'd'ici', 'tandis' part of the complex form with 'que', 'lors' as a part of 'lors même que',
'parce' as a part of 'parce que'
 */
var subordinatingConjunctions = ["afin", "autant", "comme", "d'autant", "d'ici", "quand", "lors", "parce", "si", "tandis"];
/*
 These verbs are frequently used in interviews to indicate questions and answers.
'Dire' ('to say'), 'demander' ('to ask'), 'penser' ('to think')– 16 forms; more specific verbs – 4 forms
'affirmer', 'ajouter' ('to add'), 'analyser', 'avancer', 'écrire' ('to write'), 'indiquer', 'poursuivre' ('to pursue'), 'préciser', 'résumer',
 'souvenir' ('to remember'), 'témoigner' ('to witness') – only VS forms (due to their more general nature)
 */
var interviewVerbs = ["dit", "disent", "dit-il", "dit-elle", "disent-ils", "disent-elles", "disait", "disait-il", "disait-elle", "disaient-ils", "disaient-elles", "dirent", "demande", "demandent", "demande-t-il", "demande-t-elle", "demandent-ils", "demandent-elles", "demandait", "demandaient", "demandait-il", "demandait-elle", "demandaient-ils", "demandaient-elles", "demanda", "demanda-t-il", "demanda-t-elle", "demandé", "pense", "pensent", "pense-t-il", "pense-t-elle", "pensent-ils", "pensent-elles", "pensait", "pensaient", "pensait-il", "pensait-elle", "pensaient-ils", "pensaient-elles", "pensa", "pensa-t-il", "pensa-t-elle", "pensé", "affirme", "affirme-t-il", "affirme-t-elle", "affirmé", "avoue", "avoue-t-il", "avoue-t-elle", "avoué", "concède", "concède-t-il", "concède-t-elle", "concédé", "confie", "confie-t-il", "confie-t-elle", "confié", "continue", "continue-t-il", "continue-t-elle", "continué", "déclame", "déclame-t-il", "déclame-t-elle", "déclamé", "déclare", "déclare-t-il", "déclare-t-elle", "déclaré", "déplore", "déplore-t-il", "déplore-t-elle", "déploré", "explique", "explique-t-il", "explique-t-elle", "expliqué", "lance", "lance-t-il", "lance-t-elle", "lancé", "narre", "narre-t-il", "narre-t-elle", "narré", "raconte", "raconte-t-il", "raconte-t-elle", "raconté", "rappelle", "rappelle-t-il", "rappelle-t-elle", "rappelé", "réagit", "réagit-il", "réagit-elle", "réagi", "répond", "répond-il", "répond-elle", "répondu", "rétorque", "rétorque-t-il", "rétorque-t-elle", "rétorqué", "souligne", "souligne-t-il", "souligne-t-elle", "souligné", "affirme-t-il", "affirme-t-elle", "ajoute-t-il", "ajoute-t-elle", "analyse-t-il", "analyse-t-elle", "avance-t-il", "avance-t-elle", "écrit-il", "écrit-elle", "indique-t-il", "indique-t-elle", "poursuit-il", "poursuit-elle", "précise-t-il", "précise-t-elle", "résume-t-il", "résume-t-elle", "souvient-il", "souvient-elle", "témoigne-t-il", "témoigne-t-elle"];
var interviewVerbsInfinitive = ["dire", "penser", "demander", "concéder", "continuer", "confier", "déclamer", "déclarer", "déplorer", "expliquer", "lancer", "narrer", "raconter", "rappeler", "réagir", "répondre", "rétorquer", "souligner", "affirmer", "ajouter", "analyser", "avancer", "écrire", "indiquer", "poursuivre", "préciser", "résumer", "témoigner"];
// These transition words were not included in the list for the transition word assessment for various reasons.
var additionalTransitionWords = ["encore", "éternellement", "immédiatement", "compris", "comprenant", "inclus", "naturellement", "particulièrement", "notablement", "actuellement", "maintenant", "ordinairement", "généralement", "habituellement", "d'habitude", "vraiment", "finalement", "uniquement", "peut-être", "initialement", "déjà", "c.-à-d", "souvent", "fréquemment", "régulièrement", "simplement", "éventuellement", "quelquefois", "parfois", "probable", "plausible", "jamais", "toujours", "incidemment", "accidentellement", "récemment", "dernièrement", "relativement", "clairement", "évidemment", "apparemment", "pourvu"];
var intensifiers = ["assez", "trop", "tellement", "presque", "très", "absolument", "extrêmement", "quasi", "quasiment", "fort"];
// These verbs convey little meaning.
var delexicalizedVerbs = ["fais", "fait", "faisons", "faites", "font", "fais-je", "fait-il", "fait-elle", "fait-on", "faisons-nous", "faites-vous", "font-ils", "font-elles", "fis", "fit", "fîmes", "fîtes", "firent", "faisais", "faisait", "faisions", "faisiez", "faisaient", "ferai", "feras", "fera", "ferons", "ferez", "feront", "veux", "veut", "voulons", "voulez", "veulent", "voulus", "voulut", "voulûmes", "voulûtes", "voulurent", "voulais", "voulait", "voulions", "vouliez", "voulaient", "voudrai", "voudras", "voudra", "voudrons", "voudrez", "voudront", "voulu", "veux-je", "veux-tu", "veut-il", "veut-elle", "veut-on", "voulons-nous", "voulez-vous", "veulent-ils", "veulent-elles", "voudrais", "voudrait", "voudrions", "voudriez", "voudraient", "voulant"];
var delexicalizedVerbsInfinitive = ["faire", "vouloir"];
/* These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.
 Keyword combinations containing these adjectives/adverbs are fine.
 'Dernier' is also included in generalAdjectivesAdverbsPreceding because it can be used both before and after a noun,
 and it should be filtered out either way.
 */
var generalAdjectivesAdverbs = ["antérieur", "antérieures", "antérieurs", "antérieure", "précédent", "précédents", "précédente", "précédentes", "facile", "faciles", "simple", "simples", "vite", "vites", "vitesse", "vitesses", "difficile", "difficiles", "propre", "propres", "long", "longe", "longs", "longes", "longue", "longues", "bas", "basse", "basses", "ordinaire", "ordinaires", "bref", "brefs", "brève", "brèves", "sûr", "sûrs", "sûre", "sûres", "sure", "sures", "surs", "habituel", "habituels", "habituelle", "habituelles", "soi-disant", "surtout", "récent", "récents", "récente", "récentes", "total", "totaux", "totale", "totales", "complet", "complets", "complète", "complètes", "possible", "possibles", "communément", "constamment", "facilement", "continuellement", "directement", "légèrement", "dernier", "derniers", "dernière", "dernières", "différent", "différents", "différente", "différentes", "similaire", "similaires", "pareil", "pareils", "pareille", "pareilles", "largement", "mal", "super", "bien", "pire", "pires", "suivants", "suivante", "suivantes", "prochain", "prochaine", "prochains", "prochaines", "proche", "proches", "fur"];
/*
 'Dernier' is also included in generalAdjectivesAdverbs because it can be used both before and after a noun,
 and it should be filtered out either way.
 */
var generalAdjectivesAdverbsPreceding = ["nouveau", "nouvel", "nouvelle", "nouveaux", "nouvelles", "vieux", "vieil", "vieille", "vieilles", "beau", "bel", "belle", "belles", "bon", "bons", "bonne", "bonnes", "grand", "grande", "grands", "grandes", "haut", "hauts", "haute", "hautes", "petit", "petite", "petits", "petites", "meilleur", "meilleurs", "meilleure", "meilleures", "joli", "jolis", "jolie", "jolies", "gros", "grosse", "grosses", "mauvais", "mauvaise", "mauvaises", "dernier", "derniers", "dernière", "dernières"];
var interjections = ["ah", "ha", "oh", "ho", "bis", "plouf", "vlan", "ciel", "pouf", "paf", "crac", "hurrah", "allo", "stop", "bravo", "ô", "eh", "hé", "aïe", "oef", "ahi", "fi", "zest", "hem", "holà", "chut"];
// These words and abbreviations are frequently used in recipes in lists of ingredients.
var recipeWords = ["mg", "g", "kg", "ml", "dl", "cl", "l", "grammes", "gram", "once", "onces", "oz", "lbs", "càc", "cc", "càd", "càs", "càt", "cd", "cs", "ct"];
var timeWords = ["minute", "minutes", "heure", "heures", "journée", "journées", "semaine", "semaines", "mois", "année", "années", "aujourd'hui", "demain", "hier", "après-demain", "avant-hier"];
var vagueNouns = ["chose", "choses", "façon", "façons", "pièce", "pièces", "truc", "trucs", "fois", "cas", "aspect", "aspects", "objet", "objets", "idée", "idées", "thème", "thèmes", "sujet", "sujets", "personnes", "manière", "manières", "sorte", "sortes"];
var miscellaneous = ["ne", "oui", "d'accord", "amen", "euro", "euros", "etc"];
var titlesPreceding = ["mme", "mmes", "mlle", "mlles", "mm", "dr", "pr"];
var titlesFollowing = ["jr", "sr"];
module.exports = function () {
  return {
    // These word categories are filtered at the ending of word combinations.
    filteredAtEnding: [].concat(ordinalNumerals, otherAuxiliariesInfinitive, delexicalizedVerbsInfinitive, copulaInfinitive, interviewVerbsInfinitive, generalAdjectivesAdverbsPreceding),
    // These word categories are filtered at the beginning of word combinations.
    filteredAtBeginning: generalAdjectivesAdverbs,
    // These word categories are filtered at the beginning and ending of word combinations.
    filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),
    // These word categories are filtered everywhere within word combinations.
    filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, personalPronounsStressed, reflexivePronouns, interjections, cardinalNumerals, copula, interviewVerbs, otherAuxiliaries, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeAdjectives, relativePronouns, locativeAdverbs, miscellaneous, pronominalAdverbs, recipeWords, timeWords, vagueNouns),
    // This export contains all of the above words.
    all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, personalPronounsNominative, personalPronounsAccusative, relativePronouns, quantifiers, indefinitePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, otherAuxiliaries, otherAuxiliariesInfinitive, interrogativeAdjectives, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, interviewVerbsInfinitive, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, generalAdjectivesAdverbsPreceding, recipeWords, vagueNouns, miscellaneous, timeWords, titlesPreceding, titlesFollowing)
  };
};



},{"./transitionWords.js":181}],181:[function(require,module,exports){
"use strict";
/** @module config/transitionWords */

var singleWords = ["ainsi", "alors", "aussi", "car", "cependant", "certainement", "certes", "conséquemment", "d'abord", "d'ailleurs", "d'après", "davantage", "désormais", "deuxièmement", "donc", "dorénavant", "effectivement", "également", "enfin", "ensuite", "entre-temps", "essentiellement", "excepté", "finalement", "globalement", "jusqu'ici", "là-dessus", "lorsque", "mais", "malgré", "néanmoins", "notamment", "partant", "plutôt", "pourtant", "précédemment", "premièrement", "probablement", "puis", "puisque", "quoique", "sauf", "selon", "semblablement", "sinon", "suivant", "toutefois", "troisièmement"];
var multipleWords = ["à cause de", "à ce jour", "à ce propos", "à ce sujet", "à cet égard", "à cette fin", "à compter de", "à condition que", "à défaut de", "à force de", "à juste titre", "à la lumière de", "à la suite de", "à l'aide de", "à l'appui de", "à l'encontre de", "à l'époque actuelle", "à l'exception de", "à l'exclusion de", "à l'heure actuelle", "à l'image de", "à l'instar de", "à l'inverse", "à l'inverse de", "à l'opposé", "à la condition que", "à mesure que", "à moins que", "à nouveau", "à partir de", "à première vue", "à savoir", "à seule fin que", "à supposer que", "à tel point que", "à tout prendre", "à vrai dire", "afin de", "afin d'attirer l'attention sur", "afin que", "ainsi donc", "ainsi que", "alors que", "antérieurement", "apès réflexion", "après cela", "après quoi", "après que", "après réflexion", "après tout", "attendu que", "au cas où", "au contraire", "au fond", "au fur et à mesure", "au lieu de", "au même temps", "au moment où", "au moyen de", "au point que", "au risque de", "au surplus", "au total", "aussi bien que", "aussitôt que", "autant que", "autrement dit", "avant que", "avant tout", "ayant fini", "bien que", "c'est à dire que", "c'est ainsi que", "c'est dans ce but que", "c'est dire", "c'est le cas de", "c'est pour cela que", "c'est la raison pour laquelle", "c'est pourquoi", "c'est qu'en effet", "c'est-à-dire", "ça confirme que", "ça montre que", "ça prouve que", "cela étant", "cela dit", "cependant que", "compte tenu", "comme l'illustre", "comme le souligne", "comme on pouvait s'y attendre", "comme quoi", "comme si", "commençons par examiner", "comparativement à", "conformément à", "contrairement à", "considérons par exemple", "d'autant plus", "d'autant que", "d'autre part", "d'ici là", "d'où", "d'un autre côté", "d'un côté", "d'une façon générale", "dans ce cas", "dans ces conditions", "dans cet esprit", "dans l'ensemble", "dans l'état actuel des choses", "dans l'éventualité où", "dans l'hypothèse où", "dans la mesure où", "dans le but de", "dans le cadre de", "dans le cas où", "dans les circonstances actuelles", "dans les grandes lignes", "dans un autre ordre d'idée", "dans un délai de", "de ce fait", "de cette façon", "de crainte que", "de façon à", "de façon à ce que", "de façon que", "de fait", "de l'autre côté", "de la même manière", "de la même façon que", "de manière que", "de même", "de même qu'à", "de même que", "de nos jours", "de peur que", "de prime abord", "de sorte que", "de surcroît", "de telle manière que", "de telle sorte que", "de toute évidence", "de toute façon", "de toute manière", "depuis que", "dès lors que", "dès maintenant", "dès qua", "dès que", "du fait que", "du moins", "du moment que", "du point de vue de", "du reste", "d'ici là", "d'ores et déjà", "en admettant que", "en attendant que", "en bref", "en cas de", "en cas que", "en ce cas", "en ce domaine", "en ce moment", "en ce qui a trait à", "en ce qui concerne", "en ce sens", "en cela", "en concequence", "en comparaison de", "en concequence", "en conclusion", "en conformité avec", "en conséquence", "en d'autres termes", "en définitive", "en dépit de", "en dernier lieu", "en deuxième lieu", "en effet", "en face de", "en fait", "en fin de compte", "en général", "en guise de conclusion", "en matière de", "en même temps que", "en outre", "en particulier", "en plus", "en premier lieu", "en principe", "en raison de", "en réalité", "en règle générale", "en résumé", "en revanche", "en second lieu", "en somme", "en sorte que", "en supposant que", "en tant que", "en terminant", "en théorie", "en tout cas", "en tout premier lieu", "en troisième lieu", "en un mot", "en vérité", "en vue que", "encore que", "encore une fois", "entre autres", "et même", "et puis", "étant donné qu'a", "étant donné qua", "étant donné que", "face à", "grâce à", "il est à noter que", "il est indéniable que", "il est question de", "il est vrai que", "il faut dire aussi que", "il faut reconnaître que", "il faut souligner que", "il ne faut pas oublier que", "il s'ensuit que", "il suffit de prendre pour exemple", "jusqu'ici", "il y a aussi", "jusqu'à ce que", "jusqu'à ce jour", "jusqu'à maintenant", "jusqu'à présent", "jusqu'au moment où", "jusqu'ici", "l'aspect le plus important de", "l'exemple le plus significatif", "jusqu'au moment où", "la preuve c'est que", "loin que", "mais en réalité", "malgré cela", "malgré tout", "même si", "mentionnons que", "mis à part le fait que", "notons que", "nul doute que", "ou bien", "outre cela", "où que", "par ailleurs", "par conséquent", "par contre", "par exception", "par exemple", "par la suite", "par l'entremise de", "par l'intermédiaire de", "par rapport à", "par suite", "par suite de", "par surcroît", "parce que", "pareillement", "partant de ce fait", "pas du tout", "pendant que", "plus précisément", "plus tard", "pour ainsi dire", "pour autant que", "pour ce qui est de", "pour ces motifs", "pour ces raisons", "pour cette raison", "pour commencer", "pour conclure", "pour le moment", "pour marquer la causalité", "pour l'instant", "pour peu que", "pour prendre un autre exemple", "pour que", "pour résumé", "pour terminer", "pour tout dire", "pour toutes ces raisons", "pourvu que", "prenons le cas de", "quand bien même que", "quand même", "quant à", "quel que soit", "qui plus est", "qui que", "quitte à", "quoi qu'il en soit", "quoi que", "quoiqu'il en soit", "sans délai", "sans doute", "sans parler de", "sans préjuger", "sans tarder", "sauf si", "selon que", "si bien que", "si ce n'est que", "si l'on songe que", "sitôt que", "somme toute", "sous cette réserve", "sous prétexte que", "sous réserve de", "sous réserve que", "suivant que", "supposé que", "sur le plan de", "tandis que", "tant et si bien que", "tant que", "tel que", "tellement que", "touchant à", "tout à fait", "tout bien pesé", "tout compte fait", "tout d'abord", "tout d'abord examinons", "tout d'abord il faut dire que", "tout de même", "tout en reconnaissant que", "une fois de plus", "vu que"];
/**
 * Returns an list with transition words to be used by the assessments.
 * @returns {Object} The list filled with transition word lists.
 */
module.exports = function () {
    return {
        singleWords: singleWords,
        multipleWords: multipleWords,
        allWords: singleWords.concat(multipleWords)
    };
};



},{}],182:[function(require,module,exports){
"use strict";

var filteredPassiveAuxiliaries = require("./passivevoice/auxiliaries.js")().filteredAuxiliaries;
var passiveAuxiliariesInfinitive = require("./passivevoice/auxiliaries.js")().infinitiveAuxiliaries;
var transitionWords = require("./transitionWords.js")().singleWords;
/**
 * Returns an object with exceptions for the prominent words researcher
 * @returns {Object} The object filled with exception arrays.
 */
var articles = ["das", "dem", "den", "der", "des", "die", "ein", "eine", "einem", "einen", "einer", "eines"];
var cardinalNumerals = ["eins", "zwei", "drei", "vier", "fünf", "sechs", "sieben", "acht", "neun", "zehn", "elf", "zwölf", "zwoelf", "dreizehn", "vierzehn", "fünfzehn", "fuenfzehn", "sechzehn", "siebzehn", "achtzehn", "neunzehn", "zwanzig", "hundert", "einhundert", "zweihundert", "dreihundert", "vierhundert", "fünfhundert", "fuenfhundert", "sechshundert", "siebenhundert", "achthundert", "neunhundert", "tausend", "million", "milliarde", "billion", "billiarde"];
var ordinalNumerals = ["erste", "erster", "ersten", "erstem", "erstes", "zweite", "zweites", "zweiter", "zweitem", "zweiten", "dritte", "dritter", "drittes", "dritten", "drittem", "vierter", "vierten", "viertem", "viertes", "vierte", "fünfte", "fünfter", "fünftes", "fünften", "fünftem", "fuenfte", "fuenfter", "fuenftem", "fuenften", "fuenftes", "sechste", "sechster", "sechstes", "sechsten", "sechstem", "siebte", "siebter", "siebten", "siebtem", "siebtes", "achte", "achter", "achten", "achtem", "achtes", "neunte", "neunter", "neuntes", "neunten", "neuntem", "zehnte", "zehnter", "zehnten", "zehntem", "zehntes", "elfte", "elfter", "elftes", "elften", "elftem", "zwölfte", "zwölfter", "zwölften", "zwölftem", "zwölftes", "zwoelfte", "zwoelfter", "zwoelften", "zwoelftem", "zwoelftes", "dreizehnte", "dreizehnter", "dreizehntes", "dreizehnten", "dreizehntem", "vierzehnte", "vierzehnter", "vierzehntes", "vierzehnten", "vierzehntem", "fünfzehnte", "fünfzehnten", "fünfzehntem", "fünfzehnter", "fünfzehntes", "fuenfzehnte", "fuenfzehnten", "fuenfzehntem", "fuenfzehnter", "fuenfzehntes", "sechzehnte", "sechzehnter", "sechzehnten", "sechzehntes", "sechzehntem", "siebzehnte", "siebzehnter", "siebzehntes", "siebzehntem", "siebzehnten", "achtzehnter", "achtzehnten", "achtzehntem", "achtzehntes", "achtzehnte", "nehnzehnte", "nehnzehnter", "nehnzehntem", "nehnzehnten", "nehnzehntes", "zwanzigste", "zwanzigster", "zwanzigstem", "zwanzigsten", "zwanzigstes"];
var personalPronounsNominative = ["ich", "du", "er", "sie", "es", "wir", "ihr"];
var personalPronounsAccusative = ["mich", "dich", "ihn", "uns", "euch"];
var personalPronounsDative = ["mir", "dir", "ihm", "ihnen"];
var demonstrativePronouns = ["denen", "deren", "derer", "dessen", "diese", "diesem", "diesen", "dieser", "dieses", "jene", "jenem", "jenen", "jener", "jenes", "welch", "welcher", "welches", "derjenige", "desjenigen", "demjenigen", "denjenigen", "diejenige", "derjenigen", "dasjenige", "diejenigen"];
var possessivePronouns = ["mein", "meine", "meinem", "meiner", "meines", "meinen", "dein", "deine", "deinem", "deiner", "deines", "deinen", "sein", "seine", "seinem", "seiner", "seines", "ihre", "ihrem", "ihren", "ihrer", "ihres", "unser", "unsere", "unserem", "unseren", "unserer", "unseres", "euer", "eure", "eurem", "euren", "eurer", "eures", "einanders"];
var quantifiers = ["manche", "manch", "viele", "viel", "vieler", "vielen", "vielem", "all", "alle", "aller", "alles", "allen", "allem", "allerlei", "solcherlei", "einige", "etliche", "wenige", "weniger", "wenigen", "wenigem", "weniges", "wenig", "wenigerer", "wenigeren", "wenigerem", "wenigere", "wenigeres", "wenig", "bisschen", "paar", "kein", "keines", "keinem", "keinen", "keine", "mehr", "genug", "mehrere", "mehrerer", "mehreren", "mehrerem", "mehreres", "verschiedene", "verschiedener", "verschiedenen", "verschiedenem", "verschiedenes", "verschiedne", "verschiedner", "verschiednen", "verschiednem", "verschiednes", "art", "arten", "sorte", "sorten"];
var reflexivePronouns = ["sich"];
var reciprocalPronouns = ["einander"];
// "Welch", "welcher", and "welches" are already included in the demonstrativePronouns.
var indefinitePronouns = ["andere", "anderer", "anderem", "anderen", "anderes", "andren", "andern", "andrem", "anderm", "andre", "andrer", "andres", "beide", "beides", "beidem", "beider", "beiden", "etwas", "irgendetwas", "irgendein", "irgendeinen", "irgendeinem", "irgendeines", "irgendeine", "irgendeiner", "irgendwas", "irgendwessen", "irgendwer", "irgendwen", "irgendwem", "irgendwelche", "irgendwelcher", "irgendwelchem", "irgendwelchen", "irgendwelches", "irgendjemand", "irgendjemanden", "irgendjemandem", "irgendjemandes", "irgendwie", "wer", "wen", "wem", "wessen", "was", "welchen", "welchem", "welche", "jeder", "jedes", "jedem", "jeden", "jede", "jedweder", "jedweden", "jedwedem", "jedwedes", "jedwede", "jeglicher", "jeglichen", "jeglichem", "jegliches", "jegliche", "jedermann", "jedermanns", "jemand", "jemanden", "jemandem", "jemands", "jemandes", "man", "meinesgleichen", "sämtlich", "saemtlich", "sämtlicher", "saemtlicher", "sämtlichen", "saemtlichen", "sämtlichem", "saemtlichem", "sämtliches", "saemtliches", "sämtliche", "saemtliche", "solche", "solcher", "solchen", "solchem", "solches", "niemand", "niemanden", "niemandem", "niemandes", "niemands", "nichts", "zweiter"];
var interrogativeProAdverbs = ["warum", "wie", "wo", "woher", "wohin", "wann"];
var pronominalAdverbs = ["dahinter", "damit", "daneben", "daran", "daraus", "darin", "darunter", "darüber", "darueber", "davon", "dazwischen", "hieran", "hierauf", "hieraus", "hierbei", "hierfuer", "hierfür", "hiergegen", "hierhinter", "hierin", "hiermit", "hiernach", "hierum", "hierunter", "hierueber", "hierüber", "hiervor", "hierzwischen", "hierneben", "hiervon", "wodurch", "wofür", "wofuer", "wogegen", "wohinter", "womit", "wonach", "woneben", "woran", "worauf", "woraus", "worin", "worum", "worunter", "worüber", "worueber", "wovon", "wovor", "wozu", "wozwischen"];
var locativeAdverbs = ["hier", "dorthin", "hierher", "dorther"];
var adverbialGenitives = ["allenfalls", "keinesfalls", "anderenfalls", "andernfalls", "andrenfalls", "äußerstenfalls", "bejahendenfalls", "bestenfalls", "eintretendenfalls", "entgegengesetztenfalls", "erforderlichenfalls", "gegebenenfalls", "geringstenfalls", "gleichfalls", "günstigenfalls", "günstigstenfalls", "höchstenfalls", "möglichenfalls", "notfalls", "nötigenfalls", "notwendigenfalls", "schlimmstenfalls", "vorkommendenfalls", "zutreffendenfalls", "keineswegs", "durchwegs", "geradenwegs", "geradeswegs", "geradewegs", "gradenwegs", "halbwegs", "mittwegs", "unterwegs"];
var otherAuxiliaries = ["habe", "hast", "hat", "habt", "habest", "habet", "hatte", "hattest", "hatten", "hätte", "haette", "hättest", "haettest", "hätten", "haetten", "haettet", "hättet", "hab", "bin", "bist", "ist", "sind", "sei", "seiest", "seien", "seiet", "war", "warst", "waren", "wart", "wäre", "waere", "wärest", "waerest", "wärst", "waerst", "wären", "waeren", "wäret", "waeret", "wärt", "waert", "seid", "darf", "darfst", "dürft", "duerft", "dürfe", "duerfe", "dürfest", "duerfest", "dürfet", "duerfet", "durfte", "durftest", "durften", "durftet", "dürfte", "duerfte", "dürftest", "duerftest", "dürften", "duerften", "dürftet", "duerftet", "kann", "kannst", "könnt", "koennt", "könne", "koenne", "könnest", "koennest", "könnet", "koennet", "konnte", "konntest", "konnten", "konntet", "könnte", "koennte", "könntest", "koenntest", "könnten", "koennten", "könntet", "koenntet", "mag", "magst", "mögt", "moegt", "möge", "moege", "mögest", "moegest", "möget", "moeget", "mochte", "mochtest", "mochten", "mochtet", "möchte", "moechte", "möchtest", "moechtest", "möchten", "moechten", "möchtet", "moechtet", "muss", "muß", "musst", "mußt", "müsst", "muesst", "müßt", "mueßt", "müsse", "muesse", "müssest", "muessest", "müsset", "muesset", "musste", "mußte", "musstest", "mußtest", "mussten", "mußten", "musstet", "mußtet", "müsste", "muesste", "müßte", "mueßte", "müsstest", "muesstest", "müßtest", "mueßtest", "müssten", "muessten", "müßten", "mueßten", "müsstet", "muesstet", "müßtet", "mueßtet", "soll", "sollst", "sollt", "solle", "sollest", "sollet", "sollte", "solltest", "sollten", "solltet", "will", "willst", "wollt", "wolle", "wollest", "wollet", "wollte", "wolltest", "wollten", "wolltet", "lasse", "lässt", "laesst", "läßt", "laeßt", "lasst", "laßt", "lassest", "lasset", "ließ", "ließest", "ließt", "ließen", "ließe", "ließet", "liess", "liessest", "liesst", "liessen", "liesse", "liesset"];
var otherAuxiliariesInfinitive = ["haben", "dürfen", "duerfen", "können", "koennen", "mögen", "moegen", "müssen", "muessen", "sollen", "wollen", "lassen"];
// Forms from 'aussehen' with two parts, like 'sehe aus', are not included, because we remove words on an single word basis.
var copula = ["bleibe", "bleibst", "bleibt", "bleibest", "bleibet", "blieb", "bliebst", "bliebt", "blieben", "bliebe", "bliebest", "bliebet", "heiße", "heißt", "heißest", "heißet", "heisse", "heisst", "heissest", "heisset", "hieß", "hießest", "hießt", "hießen", "hieße", "hießet", "hiess", "hiessest", "hiesst", "hiessen", "hiesse", "hiesset", "giltst", "gilt", "geltet", "gelte", "geltest", "galt", "galtest", "galtst", "galten", "galtet", "gälte", "gaelte", "gölte", "goelte", "gältest", "gaeltest", "göltest", "goeltest", "gälten", "gaelten", "gölten", "goelten", "gältet", "gaeltet", "göltet", "goeltet", "aussehe", "aussiehst", "aussieht", "ausseht", "aussehest", "aussehet", "aussah", "aussahst", "aussahen", "aussaht", "aussähe", "aussaehe", "aussähest", "aussaehest", "aussähst", "aussaehst", "aussähet", "aussaehet", "aussäht", "aussaeht", "aussähen", "aussaehen", "scheine", "scheinst", "scheint", "scheinest", "scheinet", "schien", "schienst", "schienen", "schient", "schiene", "schienest", "schienet", "erscheine", "erscheinst", "erscheint", "erscheinest", "erscheinet", "erschien", "erschienst", "erschienen", "erschient", "erschiene", "erschienest", "erschienet"];
var copulaInfinitive = ["bleiben", "heißen", "heissen", "gelten", "aussehen", "scheinen", "erscheinen"];
var prepositions = ["a", "à", "ab", "abseits", "abzüglich", "abzueglich", "als", "am", "an", "angelegentlich", "angesichts", "anhand", "anlässlich", "anlaesslich", "ans", "anstatt", "anstelle", "auf", "aufs", "aufseiten", "aus", "ausgangs", "ausschließlich", "ausschliesslich", "außerhalb", "ausserhalb", "ausweislich", "bar", "behufs", "bei", "beidseits", "beiderseits", "beim", "betreffs", "bezüglich", "bezueglich", "binnen", "bis", "contra", "dank", "diesseits", "durch", "einbezüglich", "einbezueglich", "eingangs", "eingedenk", "einschließlich", "einschliesslich", "entgegen", "entlang", "exklusive", "fern", "fernab", "fuer", "für", "fuers", "fürs", "gegen", "gegenüber", "gegenueber", "gelegentlich", "gemäß", "gemaeß", "gen", "getreu", "gleich", "halber", "hinsichtlich", "hinter", "hinterm", "hinters", "im", "in", "inklusive", "inmitten", "innerhalb", "innert", "ins", "je", "jenseits", "kontra", "kraft", "längs", "laengs", "längsseits", "laengsseits", "laut", "links", "mangels", "minus", "mit", "mithilfe", "mitsamt", "mittels", "nach", "nächst", "naechst", "nah", "namens", "neben", "nebst", "nördlich", "noerdlich", "nordöstlich", "nordoestlich", "nordwestlich", "oberhalb", "ohne", "östlich", "oestlich", "per", "plus", "pro", "quer", "rechts", "rücksichtlich", "ruecksichtlich", "samt", "seitens", "seitlich", "seitwärts", "seitwaerts", "südlich", "suedlich", "südöstlich", "suedoestlich", "südwestlich", "suedwestlich", "über", "ueber", "überm", "ueberm", "übern", "uebern", "übers", "uebers", "um", "ums", "unbeschadet", "unerachtet", "unfern", "unter", "unterhalb", "unterm", "untern", "unters", "unweit", "vermittels", "vermittelst", "vermöge", "vermoege", "via", "vom", "von", "vonseiten", "vor", "vorbehaltlich", "wegen", "wider", "zeit", "zu", "zugunsten", "zulieb", "zuliebe", "zum", "zur", "zusätzlich", "zusaetzlich", "zuungunsten", "zuwider", "zuzüglich", "zuzueglich", "zwecks", "zwischen"];
// Many coordinating conjunctions are already included in the transition words list.
var coordinatingConjunctions = ["und", "oder", "umso"];
// 'noch' is part of 'weder...noch', 'nur' is part of 'nicht nur...sondern auch'.
var correlativeConjunctions = ["auch", "noch", "nur"];
// Many subordinating conjunctions are already included in the prepositions list, transition words list or pronominal adverbs list.
var subordinatingConjunctions = ["nun", "so", "gleichwohl"];
/*
These verbs are frequently used in interviews to indicate questions and answers. 'Frage' and 'fragen' are not included,
because those words are also nouns.
 */
var interviewVerbs = ["sage", "sagst", "sagt", "sagest", "saget", "sagte", "sagtest", "sagten", "sagtet", "gesagt", "fragst", "fragt", "fragest", "fraget", "fragte", "fragtest", "fragten", "fragtet", "gefragt", "erkläre", "erklärst", "erklärt", "erklaere", "erklaerst", "erklaert", "erklärte", "erklärtest", "erklärtet", "erklärten", "erklaerte", "erklaertest", "erklaertet", "erklaerten", "denke", "denkst", "denkt", "denkest", "denket", "dachte", "dachtest", "dachten", "dachtet", "dächte", "dächtest", "dächten", "dächtet", "daechte", "daechtest", "daechten", "daechtet", "finde", "findest", "findet", "gefunden"];
var interviewVerbsInfinitive = ["sagen", "erklären", "erklaeren", "denken", "finden"];
// These transition words were not included in the list for the transition word assessment for various reasons.
var additionalTransitionWords = ["etwa", "absolut", "unbedingt", "wieder", "definitiv", "bestimmt", "immer", "äußerst", "aeußerst", "höchst", "hoechst", "sofort", "augenblicklich", "umgehend", "direkt", "unmittelbar", "nämlich", "naemlich", "natürlich", "natuerlich", "besonders", "hauptsächlich", "hauptsaechlich", "jetzt", "eben", "heutzutage", "eindeutig", "wirklich", "echt", "wahrhaft", "ehrlich", "aufrichtig", "wahrheitsgemäß", "letztlich", "einmalig", "unübertrefflich", "normalerweise", "gewöhnlich", "gewoehnlich", "üblicherweise", "ueblicherweise", "sonst", "fast", "nahezu", "beinahe", "knapp", "annähernd", "annaehernd", "geradezu", "bald", "vielleicht", "wahrscheinlich", "wohl", "voraussichtlich", "zugegeben", "ursprünglich", "insgesamt", "tatsächlich", "eigentlich", "wahrhaftig", "bereits", "schon", "oft", "häufig", "haeufig", "regelmäßig", "regelmaeßig", "gleichmäßig", "gleichmaeßig", "einfach", "lediglich", "bloß", "bloss", "halt", "wahlweise", "eventuell", "manchmal", "teilweise", "nie", "niemals", "nimmer", "jemals", "allzeit", "irgendeinmal", "anders", "momentan", "gegenwärtig", "gegenwaertig", "nebenbei", "anderswo", "woanders", "anderswohin", "anderorts", "insbesondere", "namentlich", "sonderlich", "ausdrücklich", "ausdruecklich", "vollends", "kürzlich", "kuerzlich", "jüngst", "juengst", "unlängst", "unlaengst", "neuerdings", "neulich", "letztens", "neuerlich", "verhältnismäßig", "verhaeltnismaessig", "deutlich", "klar", "offenbar", "anscheinend", "genau", "u.a", "damals", "zumindest"];
var intensifiers = ["sehr", "recht", "überaus", "ueberaus", "ungemein", "weitaus", "einigermaßen", "einigermassen", "ganz", "schwer", "tierisch", "ungleich", "ziemlich", "übelst", "uebelst", "stark", "volkommen", "durchaus", "gar"];
// These verbs convey little meaning.
var delexicalizedVerbs = ["geschienen", "meinst", "meint", "meinest", "meinet", "meinte", "meintest", "meinten", "meintet", "gemeint", "stehe", "stehst", "steht", "gehe", "gehst", "geht", "gegangen", "ging", "gingst", "gingen", "gingt"];
var delexicalizedVerbsInfinitive = ["tun", "machen", "stehen", "wissen", "gehen", "kommen"];
// These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.
// Keyword combinations containing these adjectives/adverbs are fine.
var generalAdjectivesAdverbs = ["einerlei", "egal", "neu", "neue", "neuer", "neuen", "neues", "neuem", "neuerer", "neueren", "neuerem", "neueres", "neuere", "neuester", "neuster", "neuesten", "neusten", "neuestem", "neustem", "neuestes", "neustes", "neueste", "neuste", "alt", "alter", "alten", "altem", "altes", "alte", "ältere", "älteren", "älterer", "älteres", "ältester", "ältesten", "ältestem", "ältestes", "älteste", "aeltere", "aelteren", "aelterer", "aelteres", "aeltester", "aeltesten", "aeltestem", "aeltestes", "aelteste", "gut", "guter", "gutem", "guten", "gutes", "gute", "besser", "besserer", "besseren", "besserem", "besseres", "bester", "besten", "bestem", "bestes", "beste", "größte", "grösste", "groß", "großer", "großen", "großem", "großes", "große", "großerer", "großerem", "großeren", "großeres", "großere", "großter", "großten", "großtem", "großtes", "großte", "gross", "grosser", "grossen", "grossem", "grosses", "grosse", "grosserer", "grosserem", "grosseren", "grosseres", "grossere", "grosster", "grossten", "grosstem", "grosstes", "grosste", "einfacher", "einfachen", "einfachem", "einfaches", "einfache", "einfacherer", "einfacheren", "einfacherem", "einfacheres", "einfachere", "einfachste", "einfachster", "einfachsten", "einfachstes", "einfachstem", "schnell", "schneller", "schnellen", "schnellem", "schnelles", "schnelle", "schnellere", "schnellerer", "schnelleren", "schnelleres", "schnellerem", "schnellster", "schnellste", "schnellsten", "schnellstem", "schnellstes", "weit", "weiten", "weitem", "weites", "weiterer", "weiteren", "weiterem", "weiteres", "weitere", "weitester", "weitesten", "weitestem", "weitestes", "weiteste", "eigen", "eigener", "eigenen", "eigenes", "eigenem", "eigene", "eigenerer", "eignerer", "eigeneren", "eigneren", "eigenerem", "eignerem", "eigeneres", "eigneres", "eigenere", "eignere", "eigenster", "eigensten", "eigenstem", "eigenstes", "eigenste", "wenigster", "wenigsten", "wenigstem", "wenigstes", "wenigste", "minderer", "minderen", "minderem", "mindere", "minderes", "mindester", "mindesten", "mindestes", "mindestem", "mindeste", "lang", "langer", "langen", "langem", "langes", "längerer", "längeren", "längerem", "längeres", "längere", "längster", "längsten", "längstem", "längstes", "längste", "laengerer", "laengeren", "laengerem", "laengeres", "laengere", "laengster", "laengsten", "laengstem", "laengstes", "laengste", "tief", "tiefer", "tiefen", "tiefem", "tiefes", "tiefe", "tieferer", "tieferen", "tieferem", "tieferes", "tiefere", "tiefster", "tiefsten", "tiefstem", "tiefste", "tiefstes", "hoch", "hoher", "hohen", "hohem", "hohes", "hohe", "höherer", "höhere", "höheren", "höherem", "höheres", "hoeherer", "hoehere", "hoeheren", "hoeherem", "hoeheres", "höchster", "höchste", "höchsten", "höchstem", "höchstes", "hoechster", "hoechste", "hoechsten", "hoechstem", "hoechstes", "regulär", "regulärer", "regulären", "regulärem", "reguläres", "reguläre", "regulaer", "regulaerer", "regulaeren", "regulaerem", "regulaeres", "regulaere", "regulärerer", "reguläreren", "regulärerem", "reguläreres", "regulärere", "regulaererer", "regulaereren", "regulaererem", "regulaereres", "regulaerere", "regulärster", "regulärsten", "regulärstem", "regulärstes", "regulärste", "regulaerster", "regulaersten", "regulaerstem", "regulaerstes", "regulaerste", "normal", "normaler", "normalen", "normalem", "normales", "normale", "normalerer", "normaleren", "normalerem", "normaleres", "normalere", "normalster", "normalsten", "normalstem", "normalstes", "normalste", "klein", "kleiner", "kleinen", "kleinem", "kleines", "kleine", "kleinerer", "kleineres", "kleineren", "kleinerem", "kleinere", "kleinster", "kleinsten", "kleinstem", "kleinstes", "kleinste", "winzig", "winziger", "winzigen", "winzigem", "winziges", "winzigerer", "winzigeren", "winzigerem", "winzigeres", "winzigere", "winzigster", "winzigsten", "winzigstem", "winzigste", "winzigstes", "sogenannt", "sogenannter", "sogenannten", "sogenanntem", "sogenanntes", "sogenannte", "kurz", "kurzer", "kurzen", "kurzem", "kurzes", "kurze", "kürzerer", "kürzeres", "kürzeren", "kürzerem", "kürzere", "kuerzerer", "kuerzeres", "kuerzeren", "kuerzerem", "kuerzere", "kürzester", "kürzesten", "kürzestem", "kürzestes", "kürzeste", "kuerzester", "kuerzesten", "kuerzestem", "kuerzestes", "kuerzeste", "wirklicher", "wirklichen", "wirklichem", "wirkliches", "wirkliche", "wirklicherer", "wirklicheren", "wirklicherem", "wirklicheres", "wirklichere", "wirklichster", "wirklichsten", "wirklichstes", "wirklichstem", "wirklichste", "eigentlicher", "eigentlichen", "eigentlichem", "eigentliches", "eigentliche", "schön", "schöner", "schönen", "schönem", "schönes", "schöne", "schönerer", "schöneren", "schönerem", "schöneres", "schönere", "schönster", "schönsten", "schönstem", "schönstes", "schönste", "real", "realer", "realen", "realem", "reales", "realerer", "realeren", "realerem", "realeres", "realere", "realster", "realsten", "realstem", "realstes", "realste", "derselbe", "denselben", "demselben", "desselben", "dasselbe", "dieselbe", "derselben", "dieselben", "gleicher", "gleichen", "gleichem", "gleiches", "gleiche", "gleicherer", "gleicheren", "gleicherem", "gleicheres", "gleichere", "gleichster", "gleichsten", "gleichstem", "gleichstes", "gleichste", "bestimmter", "bestimmten", "bestimmtem", "bestimmtes", "bestimmte", "bestimmtere", "bestimmterer", "bestimmterem", "bestimmteren", "bestimmteres", "bestimmtester", "bestimmtesten", "bestimmtestem", "bestimmtestes", "bestimmteste", "überwiegend", "ueberwiegend", "zumeist", "meistens", "meisten", "großenteils", "grossenteils", "meistenteils", "weithin", "ständig", "staendig", "laufend", "dauernd", "andauernd", "immerfort", "irgendwo", "irgendwann", "ähnlicher", "ähnlichen", "ähnlichem", "ähnliches", "ähnliche", "ähnlich", "ähnlicherer", "ähnlicheren", "ähnlicherem", "ähnlicheres", "ähnlichere", "ähnlichster", "ähnlichsten", "ähnlichstem", "ähnlichstes", "ähnlichste", "schlecht", "schlechter", "schlechten", "schlechtem", "schlechtes", "schlechte", "schlechterer", "schlechteren", "schlechterem", "schlechteres", "schlechtere", "schlechtester", "schlechtesten", "schlechtestem", "schlechtestes", "schlechteste", "schlimm", "schlimmer", "schlimmen", "schlimmem", "schlimmes", "schlimme", "schlimmerer", "schlimmeren", "schlimmerem", "schlimmeres", "schlimmere", "schlimmster", "schlimmsten", "schlimmstem", "schlimmstes", "schlimmste", "toll", "toller", "tollen", "tollem", "tolles", "tolle", "tollerer", "tolleren", "tollerem", "tollere", "tolleres", "tollster", "tollsten", "tollstem", "tollstes", "tollste", "super", "mögliche", "möglicher", "mögliches", "möglichen", "möglichem", "möglich", "moegliche", "moeglicher", "moegliches", "moeglichen", "moeglichem", "moeglich", "nächsten", "naechsten", "voll", "voller", "vollen", "vollem", "volle", "volles", "vollerer", "volleren", "vollerem", "vollere", "volleres", "vollster", "vollsten", "vollstem", "vollste", "vollstes", "außen", "ganzer", "ganzen", "ganzem", "ganze", "ganzes", "gerne", "oben", "unten", "zurück", "zurueck", "nicht"];
var interjections = ["ach", "aha", "oh", "au", "bäh", "baeh", "igitt", "huch", "hurra", "hoppla", "nanu", "oha", "olala", "pfui", "tja", "uups", "wow", "grr", "äh", "aeh", "ähm", "aehm", "öhm", "oehm", "hm", "mei", "mhm", "okay", "richtig", "eijeijeijei"];
// These words and abbreviations are frequently used in recipes in lists of ingredients.
var recipeWords = ["g", "el", "tl", "wg", "be", "bd", "cl", "dl", "dag", "do", "gl", "gr", "kg", "kl", "cb", "ccm", "l", "ms", "mg", "ml", "mi", "pk", "pr", "pp", "sc", "sp", "st", "sk", "ta", "tr", "cm", "mass"];
var timeWords = ["sekunde", "sekunden", "minute", "minuten", "stunde", "stunden", "uhr", "tag", "tages", "tags", "tage", "tagen", "woche", "wochen", "monat", "monate", "monates", "monats", "monaten", "jahr", "jahres", "jahrs", "jahre", "jahren", "morgens", "mittags", "abends", "nachts", "heute", "gestern", "morgen", "vorgestern", "übermorgen", "uebermorgen"];
var vagueNouns = ["ding", "dinge", "dinges", "dinger", "dingern", "dingen", "sache", "sachen", "weise", "weisen", "wahrscheinlichkeit", "zeug", "zeuge", "zeuges", "zeugen", "mal", "einmal", "teil", "teile", "teiles", "teilen", "prozent", "prozents", "prozentes", "prozente", "prozenten", "beispiel", "beispiele", "beispieles", "beispiels", "beispielen", "aspekt", "aspekte", "aspektes", "aspekts", "aspekten", "idee", "ideen", "ahnung", "ahnungen", "thema", "themas", "themata", "themen", "fall", "falle", "falles", "fälle", "fällen", "faelle", "faellen", "mensch", "menschen", "leute"];
var miscellaneous = ["nix", "nixe", "nixes", "nixen", "usw.", "amen", "ja", "nein", "euro"];
var titlesPreceding = ["fr", "hr", "dr", "prof"];
var titlesFollowing = ["jr", "jun", "sen", "sr"];
module.exports = function () {
    return {
        // These word categories are filtered at the beginning of word combinations.
        filteredAtBeginning: [].concat(otherAuxiliariesInfinitive, passiveAuxiliariesInfinitive, delexicalizedVerbsInfinitive, copulaInfinitive, interviewVerbsInfinitive),
        // These word categories are filtered at the ending of word combinations.
        filteredAtEnding: [].concat(ordinalNumerals, generalAdjectivesAdverbs),
        // These word categories are filtered at the beginning and ending of word combinations.
        filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers),
        // These word categories are filtered everywhere within word combinations.
        filteredAnywhere: [].concat(transitionWords, adverbialGenitives, personalPronounsNominative, personalPronounsAccusative, personalPronounsDative, reflexivePronouns, interjections, cardinalNumerals, copula, interviewVerbs, otherAuxiliaries, filteredPassiveAuxiliaries, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeProAdverbs, locativeAdverbs, miscellaneous, pronominalAdverbs, recipeWords, timeWords, vagueNouns, reciprocalPronouns, possessivePronouns),
        // This export contains all of the above words.
        all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, reflexivePronouns, reciprocalPronouns, personalPronounsNominative, personalPronounsAccusative, quantifiers, indefinitePronouns, interrogativeProAdverbs, pronominalAdverbs, locativeAdverbs, adverbialGenitives, filteredPassiveAuxiliaries, passiveAuxiliariesInfinitive, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, interviewVerbsInfinitive, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, timeWords, titlesPreceding, titlesFollowing)
    };
};



},{"./passivevoice/auxiliaries.js":183,"./transitionWords.js":184}],183:[function(require,module,exports){
"use strict";
// These passive auxiliaries start with be-, ge- or er- en and with -t, and therefore look like a participle.

var participleLike = ["bekommst", "bekommt", "bekamst", "bekommest", "bekommet", "bekämest", "bekämst", "bekämet", "bekämt", "gekriegt", "gehörst", "gehört", "gehörtest", "gehörtet", "gehörest", "gehöret", "erhältst", "erhält", "erhaltet", "erhielt", "erhieltest", "erhieltst", "erhieltet", "erhaltest"];
// These are all other passive auxiliaries.
var otherAuxiliaries = ["werde", "wirst", "wird", "werden", "werdet", "wurde", "ward", "wurdest", "wardst", "wurden", "wurdet", "worden", "werdest", "würde", "würdest", "würden", "würdet", "bekomme", "bekommen", "bekam", "bekamen", "bekäme", "bekämen", "kriege", "kriegst", "kriegt", "kriegen", "kriegte", "kriegtest", "kriegten", "kriegtet", "kriegest", "krieget", "gehöre", "gehören", "gehörte", "gehörten", "erhalte", "erhalten", "erhielten", "erhielte"];
// These first person plural auxiliaries also function as an infinitive.
var infinitiveAuxiliaries = ["werden", "bekommen", "kriegen", "gehören", "erhalten"];
/**
 * Returns lists with auxiliaries.
 * @returns {Array} The lists with auxiliaries.
 */
module.exports = function () {
    return {
        participleLike: participleLike,
        otherAuxiliaries: otherAuxiliaries.concat(infinitiveAuxiliaries),
        // These auxiliaries are filtered from the beginning and end of word combinations in the prominent words.
        filteredAuxiliaries: participleLike.concat(otherAuxiliaries),
        // These auxiliaries are not filtered from the beginning of word combinations in the prominent words.
        infinitiveAuxiliaries: infinitiveAuxiliaries,
        allAuxiliaries: participleLike.concat(otherAuxiliaries, infinitiveAuxiliaries)
    };
};



},{}],184:[function(require,module,exports){
"use strict";
/** @module config/transitionWords */

var singleWords = ["aber", "abschließend", "abschliessend", "alldieweil", "allerdings", "also", "anderenteils", "andererseits", "andernteils", "anfaenglich", "anfänglich", "anfangs", "angenommen", "anschliessend", "anschließend", "aufgrund", "ausgenommen", "ausserdem", "außerdem", "beispielsweise", "bevor", "beziehungsweise", "bspw", "bzw", "d.h", "da", "dabei", "dadurch", "dafuer", "dafür", "dagegen", "daher", "dahingegen", "danach", "dann", "darauf", "darum", "dass", "davor", "dazu", "dementgegen", "dementsprechend", "demgegenüber", "demgegenueber", "demgemaess", "demgemäß", "demzufolge", "denn", "dennoch", "dergestalt", "desto", "deshalb", "desungeachtet", "deswegen", "doch", "dort", "drittens", "ebenfalls", "ebenso", "endlich", "ehe", "einerseits", "einesteils", "entsprechend", "entweder", "erst", "erstens", "falls", "ferner", "folgerichtig", "folglich", "fürderhin", "fuerderhin", "genauso", "hierdurch", "hierzu", "hingegen", "immerhin", "indem", "indes", "indessen", "infolge", "infolgedessen", "insofern", "insoweit", "inzwischen", "jedenfalls", "jedoch", "kurzum", "m.a.w", "mitnichten", "mitunter", "möglicherweise", "moeglicherweise", "nachdem", "nebenher", "nichtsdestotrotz", "nichtsdestoweniger", "ob", "obenrein", "obgleich", "obschon", "obwohl", "obzwar", "ohnehin", "richtigerweise", "schliesslich", "schließlich", "seit", "seitdem", "sobald", "sodass", "so dass", "sofern", "sogar", "solang", "solange", "somit", "sondern", "sooft", "soviel", "soweit", "sowie", "sowohl", "statt", "stattdessen", "trotz", "trotzdem", "überdies", "übrigens", "ueberdies", "uebrigens", "ungeachtet", "vielmehr", "vorausgesetzt", "vorher", "waehrend", "während", "währenddessen", "waehrenddessen", "weder", "wegen", "weil", "weiter", "weiterhin", "wenn", "wenngleich", "wennschon", "wennzwar", "weshalb", "widrigenfalls", "wiewohl", "wobei", "wohingegen", "z.b", "zudem", "zuerst", "zufolge", "zuletzt", "zumal", "zuvor", "zwar", "zweitens"];
var multipleWords = ["abgesehen von", "abgesehen davon", "als dass", "als wenn", "anders ausgedrückt", "anders ausgedrueckt", "anders formuliert", "anders gefasst", "anders gefragt", "anders gesagt", "anders gesprochen", "anstatt dass", "auch wenn", "auf grund", "auf jeden fall", "aus diesem grund", "ausser dass", "außer dass", "ausser wenn", "außer wenn", "besser ausgedrückt", "besser ausgedrueckt", "besser formuliert", "besser gesagt", "besser gesprochen", "bloss dass", "bloß dass", "das heisst", "das heißt", "des weiteren", "dessen ungeachtet", "ebenso wie", "genauso wie", "geschweige denn", "im fall", "im falle", "im folgenden", "im gegensatz dazu", "im grunde genommen", "in diesem sinne", "je nachdem", "kurz gesagt", "mit anderen worten", "ohne dass", "so dass", "umso mehr als", "umso weniger als", "umso mehr, als", "umso weniger, als", "unbeschadet dessen", "und zwar", "ungeachtet dessen", "unter dem strich", "zum beispiel"];
/**
 * Returns lists with transition words to be used by the assessments.
 * @returns {Object} The object with transition word lists.
 */
module.exports = function () {
    return {
        singleWords: singleWords,
        multipleWords: multipleWords,
        allWords: singleWords.concat(multipleWords)
    };
};



},{}],185:[function(require,module,exports){
"use strict";

var transitionWords = require("./transitionWords.js")().singleWords;
/**
 * Returns an object with exceptions for the prominent words researcher.
 * @returns {Object} The object filled with exception arrays.
 */
var articles = ["il", "i", "la", "le", "lo", "gli", "un", "uno", "una"];
var cardinalNumerals = ["due", "tre", "quattro", "cinque", "sette", "otto", "nove", "dieci", "undici", "dodici", "tredici", "quattordici", "quindici", "sedici", "diciassette", "diciotto", "diciannove", "venti", "cento", "mille", "mila", "duemila", "tremila", "quattromila", "cinquemila", "seimila", "settemila", "ottomila", "novemila", "diecimila", "milione", "milioni", "miliardo", "miliardi"];
var ordinalNumerals = ["prima", "primi", "prime", "secondo", "seconda", "secondi", "seconde", "terzo", "terza", "terzi", "terze", "quarto", "quarta", "quarti", "quarte", "quinto", "quinta", "quinti", "quinte", "sesto", "sesta", "sesti", "seste", "settimo", "settima", "settimi", "settime", "ottavo", "ottava", "ottavi", "ottave", "nono", "nona", "noni", "none", "decimo", "decima", "decimi", "decime", "undicesimo", "undicesima", "undicesimi", "undicesime", "dodicesimo", "dodicesima", "dodicesimi", "dodicesime", "tredicesimo", "tredicesima", "tredicesimi", "tredicesime", "quattordicesimo", "quattordicesima", "quattordicesimi", "quattordicesime", "quindicesimo", "quindicesima", "quindicesimi", "quindicesime", "sedicesimo", "sedicesima", "sedicesimi", "sedicesime", "diciassettesimo", "diciassettesima", "diciassettesimi", "diciassettesime", "diciannovesimo", "diciannovesima", "diciannovesimi", "diciannovesime", "ventesimo", "ventesima", "ventesimi", "ventesime"];
var personalPronounsNominative = ["io", "tu", "egli", "esso", "lui", "ella", "essa", "lei", "noi", "voi", "essi", "esse", "loro"];
// 'La' and 'le' are already included in the list of articles.
var personalPronounsAccusative = ["mi", "ti", "si", "ci", "vi", "li", "me", "te", "se", "glie", "glielo", "gliela", "glieli", "gliele", "gliene", "ce", "ve"];
var personalPronounsPrepositional = ["sé"];
var demonstrativePronouns = ["ciò", "codesto", "codesta", "codesti", "codeste", "colei", "colui", "coloro", "costei", "costui", "costoro", "medesimo", "medesima", "medesimi", "medesime", "questo", "questa", "questi", "queste", "quello", "quella", "quelli", "quelle", "quel", "quei", "quegli"];
var possessivePronouns = ["mio", "mia", "miei", "mie", "tuo", "tua", "tuoi", "tue", "suo", "sua", "suoi", "sue", "nostro", "nostra", "nostri", "nostre", "vostro", "vostra", "vostri", "vostre"];
// Already in the list of transition words: appena.
var quantifiers = ["affatto", "alcun", "alcuna", "alcune", "alcuni", "alcuno", "bastantemente", "grandemente", "massimamente", "meno", "minimamente", "molta", "molte", "molti", "moltissimo", "molto", "nessun", "nessuna", "nessuno", "niente", "nulla", "ogni", "più", "po'", "poca", "poche", "pochi", "poco", "pochissime", "pochissimi", "qualche", "qualsiasi", "qualunque", "quintali", "rara", "rarissima", "rarissimo", "raro", "spesso", "spessissimo", "sufficientemente", "taluno", "taluna", "taluni", "talune", "tanta", "tante", "tanti", "tantissime", "tantissimi", "tanto", "tonnellate", "troppa", "troppe", "troppi", "troppo", "tutta", "tutte", "tutti", "tutto"];
// Already in the quantifier list: alcuno, molto, nessuno, poco, taluno tanto, troppo, tutto, nulla, niente.
var indefinitePronouns = ["alcunché", "alcunchè", "altro", "altra", "altri", "altre", "certa", "certi", "certe", "checché", "checchè", "chicchessia", "chiunque", "ciascuno", "ciascuna", "ciascun", "diverso", "diversa", "diversi", "diverse", "parecchio", "parecchia", "parecchi", "parecchie", "qualcosa", "qualcuno", "qualcuna", "vario", "varia", "vari", "varie"];
var interrogativeDeterminers = ["che", "cosa", "cui", "qual", "quale", "quali"];
var interrogativePronouns = ["chi", "quanta", "quante", "quanti", "quanto"];
var interrogativeAdverbs = ["com'è", "com'era", "com'erano", "donde", "d'onde", "dove", "dov'è", "dov'era", "dov'erano", "dovunque"];
// 'Ci' and 'vi' are already part of the list of personal pronouns.
var pronominalAdverbs = ["ne"];
// 'Via' not included because of primary meaning 'street'.
var locativeAdverbs = ["accanto", "altrove", "attorno", "dappertutto", "giù", "là", "laggiù", "lassù", "lì", "ovunque", "qua", "quaggiù", "quassù", "qui"];
// 'Essere' is already part of the otherAuxiliaries list.
var filteredPassiveAuxiliaries = ["vengano", "vengo", "vengono", "veniamo", "veniate", "venimmo", "venisse", "venissero", "venissi", "venissimo", "veniste", "venisti", "venite", "veniva", "venivamo", "venivano", "venivate", "venivi", "venivo", "venne", "vennero", "venni", "verrà", "verrai", "verranno", "verrebbe", "verrebbero", "verrei", "verremmo", "verremo", "verreste", "verresti", "verrete", "verrò", "viene", "vieni"];
var passiveAuxiliariesInfinitive = ["venire", "venir"];
var otherAuxiliaries = ["abbi", "abbia", "abbiamo", "abbiano", "abbiate", "abbiente", "avemmo", "avendo", "avente", "avesse", "avessero", "avessi", "avessimo", "aveste", "avesti", "avete", "aveva", "avevamo", "avevano", "avevate", "avevi", "avevo", "avrà", "avrai", "avranno", "avrebbe", "avrebbero", "avrei", "avremmo", "avremo", "avreste", "avresti", "avrete", "avrò", "avuto", "ebbe", "ebbero", "ebbi", "ha", "hai", "hanno", "ho", "possa", "possano", "possiamo", "possiate", "posso", "possono", "poté", "potei", "potemmo", "potendo", "potente", "poterono", "potesse", "potessero", "potessi", "potessimo", "poteste", "potesti", "potete", "potette", "potettero", "potetti", "poteva", "potevamo", "potevano", "potevate", "potevi", "potevo", "potrà", "potrai", "potranno", "potrebbe", "potrebbero", "potrei", "potremmo", "potremo", "potreste", "potresti", "potrete", "potrò", "potuto", "può", "puoi", "voglia", "vogliamo", "vogliano", "vogliate", "voglio", "vogliono", "volemmo", "volendo", "volente", "volesse", "volessero", "volessi", "volessimo", "voleste", "volesti", "volete", "voleva", "volevamo", "volevano", "volevate", "volevi", "volevo", "volle", "vollero", "volli", "voluto", "vorrà", "vorrai", "vorranno", "vorrebbe", "vorrebbero", "vorrei", "vorremmo", "vorremo", "vorreste", "vorresti", "vorrete", "vorrò", "vuoi", "vuole", "debba", "debbano", "debbono", "deva", "deve", "devi", "devo", "devono", "dobbiamo", "dobbiate", "dové", "dovei", "dovemmo", "dovendo", "doverono", "dovesse", "dovessero", "dovessi", "dovessimo", "doveste", "dovesti", "dovete", "dovette", "dovettero", "dovetti", "doveva", "dovevamo", "dovevano", "dovevate", "dovevi", "dovevo", "dovrà", "dovrai", "dovranno", "dovrebbe", "dovrebbero", "dovrei", "dovremmo", "dovremo", "dovreste", "dovresti", "dovrete", "dovrò", "dovuto", "sa", "sai", "sanno", "sapemmo", "sapendo", "sapesse", "sapessero", "sapessi", "sapessimo", "sapeste", "sapesti", "sapete", "sapeva", "sapevamo", "sapevano", "sapevate", "sapevi", "sapevo", "sappi", "sappia", "sappiamo", "sappiano", "sappiate", "saprà", "saprai", "sapranno", "saprebbe", "saprebbero", "saprei", "sapremmo", "sapremo", "sapreste", "sapresti", "saprete", "saprò", "saputo", "seppe", "seppero", "seppi", "so", "soglia", "sogliamo", "sogliano", "sogliate", "soglio", "sogliono", "solesse", "solessero", "solessi", "solessimo", "soleste", "solete", "soleva", "solevamo", "solevano", "solevate", "solevi", "solevo", "suoli", "sta", "stai", "stando", "stanno", "stante", "starà", "starai", "staranno", "staremo", "starete", "starò", "stava", "stavamo", "stavano", "stavate", "stavi", "stavo", "stemmo", "stessero", "stessimo", "steste", "stesti", "stette", "stettero", "stetti", "stia", "stiamo", "stiano", "stiate", "sto"];
var otherAuxiliariesInfinitive = ["avere", "aver", "potere", "poter", "volere", "voler", "dovere", "dover", "sapere", "saper", "solere", "stare", "star"];
var copula = ["è", "e'", "era", "erano", "eravamo", "eravate", "eri", "ero", "essendo", "essente", "fosse", "fossero", "fossi", "fossimo", "foste", "fosti", "fu", "fui", "fummo", "furono", "sarà", "sarai", "saranno", "sarebbe", "sarebbero", "sarei", "saremmo", "saremo", "sareste", "saresti", "sarete", "sarò", "sei", "sia", "siamo", "siano", "siate", "siete", "sii", "sono", "stata", "state", "stati", "stato"];
var copulaInfinitive = ["essere", "esser"];
/*
'Verso' ('towards') not included because it can also mean 'verse'.
Already in other lists: malgrado, nonostante.
 */
var prepositions = ["di", "del", "dello", "della", "dei", "degli", "delle", "a", "ad", "al", "allo", "alla", "ai", "agli", "alle", "da", "dal", "dallo", "dalla", "dai", "dagli", "dalle", "in", "nel", "nello", "nella", "nei", "negli", "nelle", "con", "col", "collo", "colla", "coi", "cogli", "colle", "su", "sul", "sullo", "sulla", "sui", "sugli", "sulle", "per", "pel", "pello", "pella", "pei", "pegli", "tra", "fra", "attraverso", "circa", "contro", "davanti", "dentro", "dietro", "entro", "escluso", "fuori", "insieme", "intorno", "lontano", "lungo", "mediante", "oltre", "presso", "rasente", "riguardo", "senza", "sopra", "sotto", "tramite", "vicino"];
var coordinatingConjunctions = ["e", "ed", "o", "oppure"];
/* '
Tale' from 'tale ... quale'.
'Dall'altra' from 'da una parte... dall'altra'.
Already in other lists: vuoi...vuoi, tanto...quanto, quanto...quanto, ora...ora, non solo...ma anche, sia...sia, o...o,
più...meno, né...né, altrettanto...così, così...come.
 */
var correlativeConjunctions = ["tale", "l'uno", "l'altro", "tali", "dall'altra"];
/*
Already in another list (transition words, interrogative adverbs, numerals, prepositions):
perché, quando, mentre, appena [che], sebbene, fino, affinché, finché, dato [che], visto [che], benché,
come, prima [che], dopo, per, senza [che], di, sempre, nonostante, malgrado, così [che], in modo...da,
tanto...da, con, dove, quanto, più...che, meno, peggio...che, meglio...di, se, che, di, a meno che, siccome,
ogni volta [che], anche se, cosicché, invece, bensì, [al] punto [che].
'Modo' from 'in modgiacché o che'.
'Volta' from 'una volta che.
Excluded because of primary meaning: dal momento che, allo scopo di, a furia di ('fury', 'haste', 'rage'),
a forza di ('force'), a condizione che ('condition').
*/
var subordinatingConjunctions = ["anziché", "anzichè", "fuorché", "fuorchè", "giacché", "giacchè", "laddove", "modo", "ove", "qualora", "quantunque", "volta"];
/*
These verbs are frequently used in interviews to indicate questions and answers.
Not included: 'legge' ('reads', but also: 'law'), 'letto' ('(has) read', but also: bed), 'precisa' ('states', but also: 'precise').
 */
var interviewVerbs = ["dice", "dicono", "diceva", "dicevano", "disse", "dissero", "detto", "domanda", "domandano", "domandava", "domandavano", "domandò", "domandarono", "domandato", "afferma", "affermato", "aggiunge", "aggiunto", "ammette", "ammesso", "annuncia", "annunciato", "assicura", "assicurato", "chiede", "chiesto", "commentato", "conclude", "concluso", "continua", "continuato", "denuncia", "denunciato", "dichiara", "dichiarato", "esordisce", "esordito", "inizia", "iniziato", "precisato", "prosegue", "proseguito", "racconta", "raccontato", "recita", "recitato", "replica", "replicato", "risponde", "risposto", "rimarca", "rimarcato", "rivela", "rivelato", "scandisce", "scandito", "scrive", "scritto", "segnala", "segnalato", "sottolinea", "sottolineato", "spiega", "spiegato"];
var interviewVerbsInfinitive = ["affermare", "aggiungere", "ammettere", "annunciare", "assicurare", "chiedere", "commentare", "concludere", "continuare", "denunciare", "dichiarare", "esordire", "iniziare", "precisare", "proseguire", "raccontare", "recitare", "replicare", "rispondere", "rimarcare", "rivelare", "scandire", "scrivere", "segnalare", "sottolineare", "spiegare"];
/*
These transition words were not included in the list for the transition word assessment for various reasons.
'Appunto' ('just', 'exactly') not included for the second meaning of 'note'.
*/
var additionalTransitionWords = ["eventualmente", "forse", "mai", "probabilmente"];
var intensifiers = ["addirittura", "assolutamente", "ben", "estremamente", "mica", "nemmeno", "quasi"];
// These verbs convey little meaning.
var delexicalizedVerbs = ["fa", "fa'", "faccia", "facciamo", "facciano", "facciate", "faccio", "facemmo", "facendo", "facente", "facesse", "facessero", "facessi", "facessimo", "faceste", "facesti", "faceva", "facevamo", "facevano", "facevate", "facevi", "facevo", "fai", "fanno", "farà", "farai", "faranno", "farebbe", "farebbero", "farei", "faremmo", "faremo", "fareste", "faresti", "farete", "farò", "fate", "fatto", "fece", "fecero", "feci", "fo"];
var delexicalizedVerbsInfinitive = ["fare"];
/*
These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.
 Keyword combinations containing these adjectives/adverbs are fine.
 */
var generalAdjectivesAdverbs = ["anteriore", "anteriori", "precedente", "precedenti", "facile", "facili", "facilissimo", "facilissima", "facilissimi", "facilissime", "semplice", "semplici", "semplicissima", "semplicissimo", "semplicissimi", "semplicissime", "semplicemente", "rapido", "rapida", "rapidi", "rapide", "veloce", "veloci", "differente", "difficile", "difficili", "difficilissimo", "difficilissima", "difficilissimi", "difficilissime", "basso", "bassa", "bassi", "basse", "alto", "alta", "alti", "alte", "normale", "normali", "normalmente", "corto", "corta", "corti", "corte", "breve", "brevi", "recente", "recenti", "totale", "totali", "completo", "completa", "completi", "complete", "possibile", "possibili", "ultimo", "ultima", "ultimi", "ultime", "differenti", "simile", "simili", "prossimo", "prossima", "prossimi", "prossime", "giusto", "giusta", "giusti", "giuste", "giustamente", "cosiddetto", "bene", "meglio", "benissimo", "male", "peggio", "malissimo", "comunemente", "constantemente", "direttamente", "esattamente", "facilmente", "generalmente", "leggermente", "personalmente", "recentemente", "sinceramente", "solamente", "avanti", "indietro"];
var generalAdjectivesAdverbsPreceding = ["nuovo", "nuova", "nuovi", "nuove", "vecchio", "vecchia", "vecchi", "vecchie", "bello", "bella", "belli", "belle", "bellissimo", "bellissima", "bellissimi", "bellissime", "buono", "buona", "buoni", "buone", "buonissimo", "buonissima", "buonissimi", "buonissime", "grande", "grandi", "grandissimo", "grandissima", "grandissimi", "grandissime", "lunga", "lunghi", "lunghe", "piccolo", "piccola", "piccoli", "piccole", "piccolissimo", "piccolissima", "piccolissimi", "piccolissime", "proprio", "propria", "propri", "proprie", "solito", "solita", "soliti", "solite", "stesso", "stessa", "stessi", "stesse"];
var interjections = ["accidenti", "acciderba", "ah", "aah", "ahi", "ahia", "ahimé", "bah", "beh", "boh", "ca", "caspita", "chissà", "de'", "diamine", "ecco", "eh", "ehi", "eeh", "ehilà", "ehm", "gna", "ih", "magari", "macché", "macchè", "mah", "mhm", "nca", "neh", "oibò", "oh", "ohe", "ohé", "ohilá", "ohibò", "ohimé", "okay", "ok", "olà", "poh", "pota", "puah", "sorbole", "to'", "toh", "ts", "uff", "uffa", "uh", "uhi"];
// These words and abbreviations are frequently used in recipes in lists of ingredients.
var recipeWords = ["cc", "g", "hg", "hl", "kg", "l", "prs", "pz", "q.b.", "qb", "ta", "tz"];
var timeWords = ["minuto", "minuti", "ora", "ore", "giorno", "giorni", "giornata", "giornate", "settimana", "settimane", "mese", "mesi", "anno", "anni", "oggi", "domani", "ieri", "stamattina", "stanotte", "stasera", "tardi"];
// Already included in other lists.
var vagueNouns = ["aspetto", "aspetti", "caso", "casi", "cose", "idea", "idee", "istanza", "maniera", "oggetto", "oggetti", "parte", "parti", "persona", "persone", "pezzo", "pezzi", "punto", "punti", "sorta", "sorte", "tema", "temi", "volte"];
var miscellaneous = ["sì", "no", "non", "€", "euro", "euros", "ecc", "eccetera"];
var titlesPreceding = ["sig.na", "sig.ra", "sig", "sigg", "dr", "dr.ssa", "dott", "dott.ssa", "prof", "prof.ssa", "gent", "gent.mo", "gent.mi", "gent.ma", "gent.me", "egr", "egr.i", "egr.ia", "egr.ie", "preg.mo", "preg.mo", "preg.ma", "preg.me", "ill", "ill.mo", "ill.mi", "ill.ma", "ill.me", "cav", "on", "spett"];
/*
 Exports all function words concatenated, and specific word categories and category combinations
 to be used as filters for the prominent words.
 */
module.exports = function () {
  return {
    // These word categories are filtered at the beginning of word combinations.
    filteredAtBeginning: generalAdjectivesAdverbs,
    // These word categories are filtered at the ending of word combinations.
    filteredAtEnding: [].concat(ordinalNumerals, interviewVerbsInfinitive, passiveAuxiliariesInfinitive, otherAuxiliariesInfinitive, copulaInfinitive, delexicalizedVerbsInfinitive, generalAdjectivesAdverbsPreceding),
    // These word categories are filtered at the beginning and ending of word combinations.
    filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),
    // These word categories are filtered everywhere within word combinations.
    filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, interjections, cardinalNumerals, filteredPassiveAuxiliaries, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeDeterminers, interrogativePronouns, interrogativeAdverbs, locativeAdverbs, miscellaneous, pronominalAdverbs, recipeWords, timeWords, vagueNouns),
    // This export contains all of the above words.
    all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, quantifiers, indefinitePronouns, interrogativePronouns, interrogativeAdverbs, interrogativeDeterminers, pronominalAdverbs, locativeAdverbs, filteredPassiveAuxiliaries, passiveAuxiliariesInfinitive, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, interviewVerbsInfinitive, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, generalAdjectivesAdverbsPreceding, recipeWords, vagueNouns, miscellaneous, timeWords, titlesPreceding)
  };
};



},{"./transitionWords.js":186}],186:[function(require,module,exports){
"use strict";
/** @module config/transitionWords */

var singleWords = ["abbastanza", "acciocché", "acciocchè", "adesso", "affinché", "affinchè", "allora", "almeno", "alquanto", "altrettanto", "altrimenti", "analogamente", "anche", "ancora", "antecedentemente", "anzi", "anzitutto", "apertamente", "appena", "assai", "attualmente", "benché", "benchè", "beninteso", "bensì", "brevemente", "bruscamente", "casomai", "celermente", "certamente", "certo", "chiaramente", "ciononostante", "cioé", "cioè", "comparabilmente", "come", "complessivamente", "completamente", "comunque", "concisamente", "concludendo", "conformemente", "congiuntamente", "conseguentemente", "considerando", "considerato", "considerevolmente", "contemporaneamente", "continuamente", "contrariamente", "controbilanciato", "così", "cosicché", "cosicchè", "dapprima", "dato", "davvero", "definitivamente", "dettagliatamente", "differentemente", "diversamente", "dopo", "dopodiché", "dopodichè", "durante", "dunque", "eccetto", "eccome", "effettivamente", "egualmente", "elencando", "enfaticamente", "eppure", "esaurientemente", "esplicitamente", "espressamente", "estesamente", "evidentemente", "finalmente", "finché", "finchè", "fino", "finora", "fintanto", "fintanto che", "fintantoché", "fintantochè", "fondamentalmente", "frattanto", "frequentemente", "generalmente", "già", "gradualmente", "illustrando", "immantinente", "immediatamente", "importantissimo", "incontestabilmente", "incredibilmente", "indipendentemente", "indiscutibilmente", "indubbiamente", "infatti", "infine", "innanzitutto", "innegabilmente", "inoltre", "insomma", "intanto", "interamente", "istantaneamente", "invece", "logicamente", "lentamente", "ma", "malgrado", "marcatamente", "memorabile", "mentre", "motivatamente", "naturalmente", "né", "nè", "neanche", "neppure", "nonché", "nonchè", "nondimeno", "nonostante", "notevolmente", "occasionalmente", "oltretutto", "onde", "onestamente", "ossia", "ostinatamente", "ovvero", "ovviamente", "parimenti", "particolarmente", "peraltro", "perché", "perchè", "perciò", "perlomeno", "però", "pertanto", "pesantemente", "piuttosto", "poi", "poiché", "poichè", "praticamente", "precedentemente", "preferibilmente", "precisamente", "prematuramente", "presto", "prima", "primariamente", "primo", "principalmente", "prontamente", "proporzionalmente", "pure", "purché", "purchè", "quando", "quanto", "quantomeno", "quindi", "raramente", "realmente", "relativamente", "riassumendo", "riformulando", "ripetutamente", "saltuariamente", "schiettamente", "sebbene", "secondariamente", "secondo", "sempre", "sennò", "seguente", "sensibilmente", "seppure", "seriamente", "siccome", "sicuramente", "significativamente", "similmente", "simultaneamente", "singolarmente", "sinteticamente", "solitamente", "solo", "soltanto", "soprattutto", "sopravvalutato", "sorprendentemente", "sostanzialmente", "sottolineando", "sottovalutato", "specialmente", "specificamente", "specificatamente", "subitamente", "subito", "successivamente", "successivo", "talmente", "terzo", "totalmente", "tranne", "tuttavia", "ugualmente", "ulteriormente", "ultimamente", "veramente", "verosimilmente", "visto"];
var multipleWords = ["a breve", "a causa", "a causa di", "a condizione che", "a conseguenza", "a conti fatti", "a differenza di", "a differenza del", "a differenza della", "a differenza dei", "a differenza degli", "a differenza delle", "a dire il vero", "a dire la verità", "a dirla tutta", "a dispetto di", "a lungo", "a lungo termine", "a maggior ragione", "a meno che non", "a parte", "a patto che", "a prescindere", "a prima vista", "a proposito", "a qualunque costo", "a quanto", "a quel proposito", "a quel tempo", "a quell'epoca", "a questo fine", "a questo proposito", "a questo punto", "a questo riguardo", "a questo scopo", "a riguardo", "a seguire", "a seguito", "a sottolineare", "a tal fine", "a tal proposito", "a tempo debito", "a tutti gli effetti", "a tutti i costi", "a una prima occhiata", "ad eccezione di", "ad esempio", "ad essere maliziosi", "ad essere sinceri", "ad ogni buon conto", "ad ogni costo", "ad ogni modo", "ad una prima occhiata", "adesso che", "al che", "al contrario", "al contrario di", "al fine di", "al fine di fare", "al giorno d'oggi", "al momento", "al momento giusto", "al momento opportuno", "al più presto", "al posto di", "al suo posto", "al termine", "all'epoca", "all'infuori di", "all'inizio", "all'opposto", "all'ultimo", "alla fine", "alla fine della fiera", "alla luce", "alla luce di", "alla lunga", "alla moda", "alla stessa maniera", "allo scopo di", "allo stesso modo", "allo stesso tempo", "anch'esso", "anch'io", "anche se", "ancora più", "ancora di più", "assumendo che", "bisogna chiarire che", "bisogna considerare che", "causato da", "ciò nondimeno", "ciò nonostante", "col tempo", "con il tempo", "come a dire", "come abbiamo dimostrato", "come è stato notato", "come è stato detto", "come è stato dimostrato", "come hanno detto", "come ho detto", "come ho dimostrato", "come ho notato", "come potete notare", "come potete vedere", "come puoi notare", "come puoi vedere", "come si è dimostrato", "come si può vedere", "come si può notare", "come sopra indicato", "comunque sia", "con attenzione", "con enfasi", "con il risultato che", "con l'obiettivo di", "con ostinazione", "con questa intenzione", "con questa idea", "con queste idee", "con questo in testa", "con questo scopo", "così che", "così da", "d'altra parte", "d'altro canto", "d'altro lato", "d'altronde", "d'ora in avanti", "d'ora in poi", "da allora", "da quando", "da quanto", "da quel momento", "da quella volta", "da questo momento in poi", "da questo momento", "da qui", "da ultimo", "da un certo punto di vista", "da un lato", "da una parte", "dall'altro lato", "dall'epoca", "dal che", "dato che", "dato per assunto che", "davanti a", "del tutto", "dell'epoca", "detto questo", "di certo", "di colpo", "di conseguenza", "di fatto", "di fronte", "di fronte a", "di lì a poco", "di punto in bianco", "di quando in quando", "di quanto non sia", "di quel tempo", "di qui a", "di rado", "di seguito", "di si", "di sicuro", "di solito", "di tanto in tanto", "di tutt'altra pasta", "di quando in quando", "differente da", "diversamente da", "diverso da", "dopotutto", "dovuto a", "e anche", "e inoltre", "entro breve", "fermo restando che", "faccia a faccia", "fin da", "fin dall'inizio", "fin quando", "finché non", "finchè non", "fin dal primo momento", "fin dall'inizio", "fino a", "fino a questo momento", "fino ad oggi", "fino ai giorni nostri", "fino adesso", "fino a un certo punto", "fino adesso", "fra quanto", "il prima possibile", "in aggiunta", "in altre parole", "in altri termini", "in ambo i casi", "in breve", "in caso di", "in conclusione", "in conformità", "in confronto", "in confronto a", "in conseguenza", "in considerazione", "in considerazione di", "in definitiva", "in dettaglio", "importante rendersi conto", "in effetti", "in entrambi i casi", "in fin dei conti", "in generale", "in genere", "in linea di massima", "in poche parole", "il più possibile", "in maggior parte", "in maniera analoga", "in maniera convincente", "in maniera esauriente", "in maniera esaustiva", "in maniera esplicita", "in maniera evidente", "in maniera incontestabile", "in maniera indiscutibile", "in maniera innegabile", "in maniera significativa", "in maniera simile", "in modo allusivo", "in modo analogo", "in modo che", "in modo convincente", "in modo da", "in modo identico", "in modo notevole", "in modo significativo", "in modo significativo", "in modo simile", "in ogni caso", "in ogni modo", "in ogni momento", "in parte considerevole", "in parti uguali", "in particolare", "in particolare per", "in particolare", "in più", "in pratica", "in precedenza", "in prima battuta", "in prima istanza", "in primo luogo", "in rapporto", "in qualche modo", "in qualsiasi modo", "in qualsiasi momento", "in qualunque modo", "in qualunque momento", "in quarta battuta", "in quarta istanza", "in quarto luogo", "in quel caso", "in quelle circostanze", "in questa occasione", "in questa situazione", "in questo caso", "in questo caso particolare", "in questo istante", "in questo momento", "in rare occasioni", "in realtà", "in seconda battuta", "in seconda istanza", "in secondo luogo", "in seguito", "in sintesi", "in sostanza", "in tempo", "in terza battuta", "in terza istanza", "in terzo luogo", "in totale", "in tutto", "in ugual maniera", "in ugual misura", "in ugual modo", "in ultima analisi", "in ultima istanza", "in un altro caso", "in una parola", "in verità", "insieme a", "insieme con", "invece che", "invece di", "la prima cosa da considerare", "la prima cosa da tenere a mente", "lo stesso", "mentre potrebbe essere vero", "motivo per cui", "motivo per il quale", "ne consegue che", "ne deriva che", "nei dettagli", "nel caso", "nel caso che", "nel caso in cui", "nel complesso", "nel corso del", "nel corso di", "nel frattempo", "nel lungo periodo", "nel mentre", "nell'eventualità che", "nella misura in cui", "nella speranza che", "nella stessa maniera", "nella stessa misura", "nello specifico", "nello stesso modo", "nello stesso momento", "nello stesso stile", "non appena", "non per essere maliziosi", "non più da", "nonostante ciò", "nonostante tutto", "ogni qualvolta", "ogni tanto", "ogni volta", "oltre a", "oltre a ciò", "ora che", "passo dopo passo", "per causa di", "per certo", "per chiarezza", "per chiarire", "per come", "per concludere", "per conto di", "per contro", "per cui", "per davvero", "per di più", "per dirla in altro modo", "per dirla meglio", "per dirla tutta", "per es.", "per esempio", "per essere sinceri", "per far vedere", "per farla breve", "per finire", "per l'avvenire", "per l'ultima volta", "per la maggior parte", "per la stessa ragione", "per la verità", "per lo più", "per mettere in luce", "per metterla in altro modo", "per non dire di", "per non parlare di", "per ora", "per ovvi motivi", "per paura di", "per paura dei", "per paura delle", "per paura degli", "per prima cosa", "per quanto", "per questa ragione", "per questo motivo", "per riassumere", "per sottolineare", "per timore", "per trarre le conclusioni", "per ultima", "per ultime", "per ultimi", "per ultimo", "per via di", "perché si", "perchè si", "perfino se", "piano piano", "più di ogni altra cosa", "più di tutto", "più facilmente", "più importante", "più tardi", "poco a poco", "poco dopo", "prendiamo il caso di", "presto o tardi", "prima che", "prima di", "prima di ogni cosa", "prima di tutto", "prima o dopo", "prima o poi", "questo è probabilmente vero", "questo potrebbe essere vero", "restando inteso che", "riassumendo", "quanto prima", "questa volta", "se confrontato con", "se e solo se", "se no", "seduta stante", "sempreché", "semprechè", "sempre che", "senz'altro", "senza alcun riguardo", "senza dubbio", "senz'ombra di dubbio", "senza ombra di dubbio", "senza riguardo per", "senza tregua", "senza ulteriore ritardo", "sia quel che sia", "solo se", "sotto questa luce", "sperando che", "sta volta", "su tutto", "subito dopo", "sul serio", "tanto per cominciare", "tanto quanto", "tra breve", "tra l'altro", "tra poco", "tra quanto", "tutte le volte", "tutti insieme", "tutto a un tratto", "tutto ad un tratto", "tutto d'un tratto", "tutto considerato", "tutto sommato", "un passo alla volta", "un tempo", "una volta", "una volta ogni tanto", "unito a", "va chiarito che", "va considerato che", "vada come vada", "vale a dire", "visto che"];
/**
 * Returns lists with transition words to be used by the assessments.
 * @returns {Object} The object with transition word lists.
 */
module.exports = function () {
    return {
        singleWords: singleWords,
        multipleWords: multipleWords,
        allWords: singleWords.concat(multipleWords)
    };
};



},{}],187:[function(require,module,exports){
"use strict";

var transitionWords = require("./transitionWords.js")().singleWords;
/**
 * Returns an array with exceptions for the prominent words researcher
 * @returns {Array} The array filled with exceptions.
 */
var articles = ["el", "la", "los", "las", "un", "una", "unos", "unas"];
// "Uno" is already included in the articles.
var cardinalNumerals = ["dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve", "diez", "once", "doce", "trece", "catorce", "quince", "dieciseis", "diecisiete", "dieciocho", "diecinueve", "veinte", "cien", "centena", "mil", "millon", "millones"];
var ordinalNumerals = ["primera", "segunda", "tercera", "cuarto", "cuarta", "quinto", "quinta", "sexto", "sexta", "septimo", "septima", "octavo", "octava", "noveno", "novena", "décimo", "décima", "vigésimo", "vigésima", "primeros", "primeras", "segundos", "segundas", "terceros", "terceras", "cuartos", "cuartas", "quintos", "quintas", "sextos", "sextas", "septimos", "septimas", "octavos", "octavas", "novenos", "novenas", "décimos", "décimas", "vigésimos", "vigésimas"];
var personalPronounsNominative = ["yo", "tú", "él", "ella", "ello", "nosotros", "nosotras", "vosotros", "vosotras", "ustedes", "ellos", "ellas"];
var personalPronounsAccusative = ["me", "te", "lo", "se", "nos", "os", "les"];
var personalPronounsPrepositional = ["mí", "ti", "ud", "uds", "usted", "sí"];
var personalPronounsComitative = ["conmigo", "contigo", "consigo"];
var demonstrativePronouns = ["este", "ese", "aquel", "esta", "esa", "aquella", "estos", "esos", "aquellos", "estas", "esas", "aquellas", "esto", "eso", "aquello"];
var possessivePronouns = ["mi", "mis", "mío", "míos", "mía", "mías", "nuestro", "nuestros", "nuestra", "nuestras", "tuyo", "tuyos", "tuya", "tuyas", "tu", "tus", "vuestro", "vuestros", "vuestra", "vuestras", "suyo", "suyos", "suya", "suyas", "su", "sus"];
var quantifiers = ["bastante", "bastantes", "mucho", "muchas", "mucha", "muchos", "demasiado", "demasiada", "demasiados", "demasiadas", "poco", "poca", "pocos", "pocas", "demás", "otros", "otras", "todo", "toda", "todos", "todas"];
var indefinitePronouns = ["alguien", "algo", "algún", "alguno", "alguna", "algunos", "algunas", "nadie", "nada", "ningún", "ninguno", "ninguna", "ningunos", "ningunas", "tanto", "tantos", "tanta", "tantas"];
var interrogativeDeterminers = ["cuyas", "cual"];
var interrogativePronouns = ["cuyo"];
/*
'Qué' is part of 'por qué' ('why'). The combination 'quien sea' ('whoever') is separated into two entries: 'quien' and 'sea'.
'quira' is part of 'cuando quiera' ('whenever').
 */
var interrogativeProAdverbs = ["comoquiera", "cualesquiera", "cualquier", "cuanta", "cuantas", "cuanto", "cuantos", "cuál", "cuáles", "cuánta", "cuántas", "cuánto", "cuántos", "cómo", "dondequiera", "dónde", "quien", "quienes", "quienquiera", "quién", "quiénes", "qué"];
var locativeAdverbs = ["allí", "ahí", "allá", "aquí", "acá", "adónde", "delante", "detrás", "debajo", "adelante", "atrás", "adentro", "afuera"];
var otherAuxiliaries = ["he", "has", "ha", "hay", "hemos", "habéis", "han", "hube", "hubiste", "hubo", "hubimos", "hubisteis", "hubieron", "había", "habías", "habíamos", "habíais", "habían", "habría", "habrías", "habríais", "habrían", "habré", "habrás", "habrá", "habremos", "habréis", "habrán", "haya", "hayas", "hayamos", "hayáis", "hayan", "hubiera", "hubieras", "hubiéramos", "hubierais", "hubieran", "hubiese", "hubieses", "hubiésemos", "hubieseis", "hubiesen", "hubiere", "hubieres", "hubiéremos", "hubiereis", "hubieren", "habed", "habido", "debo", "debes", "debe", "debemos", "debéis", "deben", "debí", "debiste", "debió", "debimos", "debisteis", "debieron", "debía", "debías", "debíamos", "debíais", "debían", "debería", "deberías", "deberíamos", "deberíais", "deberían", "deberé", "deberás", "deberá", "deberemos", "deberéis", "deberán", "deba", "debas", "debamos", "debáis", "deban", "debiera", "debieras", "debiéramos", "debierais", "debieran", "debiese", "debieses", "debiésemos", "debieseis", "debiesen", "debiere", "debieres", "debiéremos", "debiereis", "debieren", "debed", "debido", "empiezo", "empiezas", "empieza", "empezáis", "empiezan", "empecé", "empezaste", "empezó", "empezamos", "empezasteis", "empezaron", "empezaba", "empezabas", "empezábamos", "empezabais", "empezaban", "empezaría", "empezarías", "empezaríamos", "empezaríais", "empezarían", "empezaré", "empezarás", "empezará", "empezaremos", "empezaréis", "empezarán", "empiece", "empieces", "empecemos", "empecéis", "empiecen", "empezara", "empezaras", "empezáramos", "empezarais", "empezaran", "empezase", "empezases", "empezásemos", "empezaseis", "empezasen", "empezare", "empezares", "empezáremos", "empezareis", "empezaren", "empezad", "empezado", "comienzo", "comienzas", "comienza", "comenzamos", "comenzáis", "comienzan", "comencé", "comenzaste", "comenzó", "comenzasteis", "comenzaron", "comenzaba", "comenzabas", "comenzábamos", "comenzabais", "comenzaban", "comenzaría", "comenzarías", "comenzaríamos", "comenzaríais", "comenzarían", "comenzaré", "comenzarás", "comenzará", "comenzaremos", "comenzaréis", "comenzarán", "comience", "comiences", "comencemos", "comencéis", "comiencen", "comenzara", "comenzaras", "comenzáramos", "comenzarais", "comenzaran", "comenzase", "comenzases", "comenzásemos", "comenzaseis", "comenzasen", "comenzare", "comenzares", "comenzáremos", "comenzareis", "comenzaren", "comenzad", "comenzado", "sigo", "sigues", "sigue", "seguimos", "seguis", "siguen", "seguí", "seguiste", "siguió", "seguisteis", "siguieron", "seguía", "seguías", "seguíamos", "seguíais", "seguían", "seguiría", "seguirías", "seguiríamos", "seguiríais", "seguirían", "seguiré", "seguirás", "seguirá", "seguiremos", "seguiréis", "seguirán", "siga", "sigas", "sigamos", "sigáis", "sigan", "siguiera", "siguieras", "siguiéramos", "siguierais", "siguieran", "siguiese", "siguieses", "siguiésemos", "siguieseis", "siguiesen", "siguiere", "siguieres", "siguiéremos", "siguiereis", "siguieren", "seguid", "seguido", "tengo", "tienes", "tiene", "tenemos", "tenéis", "tienen", "tuve", "tuviste", "tuvo", "tuvimos", "tuvisteis", "tuvieron", "tenía", "tenías", "teníamos", "teníais", "tenían", "tendría", "tendrías", "tendríamos", "tendríais", "tendrían", "tendré", "tendrás", "tendrá", "tendremos", "tendréis", "tendrán", "tenga", "tengas", "tengamos", "tengáis", "tengan", "tuviera", "tuvieras", "tuviéramos", "tuvierais", "tuvieran", "tuviese", "tuvieses", "tuviésemos", "tuvieseis", "tuviesen", "tuviere", "tuvieres", "tuviéremos", "tuviereis", "tuvieren", "ten", "tened", "tenido", "ando", "andas", "andamos", "andáis", "andan", "anduve", "anduviste", "anduvo", "anduvimos", "anduvisteis", "anduvieron", "andaba", "andabas", "andábamos", "andabais", "andaban", "andaría", "andarías", "andaríamos", "andaríais", "andarían", "andaré", "andarás", "andará", "andaremos", "andaréis", "andarán", "ande", "andes", "andemos", "andéis", "anden", "anduviera", "anduvieras", "anduviéramos", "anduvierais", "anduvieran", "anduviese", "anduvieses", "anduviésemos", "anduvieseis", "anduviesen", "anduviere", "anduvieres", "anduviéremos", "anduviereis", "anduvieren", "andad", "andado", "quedo", "quedas", "queda", "quedamos", "quedáis", "quedan", "quedé", "quedasteis", "quedaron", "quedaba", "quedabas", "quedábamos", "quedabais", "quedaban", "quedaría", "quedarías", "quedaríamos", "quedaríais", "quedarían", "quedaré", "quedarás", "quedará", "quedaremos", "quedaréis", "quedarán", "quede", "quedes", "quedemos", "quedéis", "queden", "quedara", "quedaras", "quedáramos", "quedarais", "quedaran", "quedase", "quedases", "quedásemos", "quedaseis", "quedasen", "quedare", "quedares", "quedáremos", "quedareis", "quedaren", "quedad", "quedado", "hallo", "hallas", "halla", "hallamos", "halláis", "hallan", "hallé", "hallaste", "halló", "hallasteis", "hallaron", "hallaba", "hallabas", "hallábamos", "hallabais", "hallaban", "hallaría", "hallarías", "hallaríamos", "hallaríais", "hallarían", "hallaré", "hallarás", "hallará", "hallaremos", "hallaréis", "hallarán", "halle", "halles", "hallemos", "halléis", "hallen", "hallara", "hallaras", "halláramos", "hallarais", "hallaran", "hallase", "hallases", "hallásemos", "hallaseis", "hallasen", "hallare", "hallares", "halláremos", "hallareis", "hallaren", "hallad", "hallado", "vengo", "vienes", "viene", "venimos", "venis", "vienen", "vine", "viniste", "vino", "vinimos", "vinisteis", "vinieron", "venía", "vanías", "verníamos", "veníais", "venían", "vendría", "vendrías", "vendríamos", "vendíais", "vendrían", "vendré", "vendrás", "vendrá", "vendremos", "vendréis", "vendrán", "venga", "vengas", "vengamos", "vengáis", "vengan", "viniera", "vinieras", "viniéramos", "vinierais", "vinieran", "viniese", "vinieses", "viniésemos", "vinieseis", "viniesen", "viniere", "vinieres", "viniéremos", "viniereis", "vinieren", "ven", "venid", "venido", "abro", "abres", "abre", "abrismos", "abrís", "abren", "abrí", "abriste", "abrió", "abristeis", "abrieron", "abría", "abrías", "abríais", "abrían", "abriría", "abrirías", "abriríamos", "abriríais", "abrirían", "abriré", "abrirás", "abrirá", "abriremos", "abriréis", "abrirán", "abra", "abras", "abramos", "abráis", "abran", "abriera", "abrieras", "abriéramos", "abrierais", "abrieran", "abriese", "abrieses", "abriésemos", "abrieseis", "abriesen", "abriere", "abrieres", "abriéremos", "abriereis", "abrieren", "abrid", "abierto", "voy", "vas", "va", "vamos", "vais", "van", "iba", "ibas", "íbamos", "ibais", "iban", "iría", "irías", "iríamos", "iríais", "irían", "iré", "irás", "irá", "iremos", "iréis", "irán", "vaya", "vayas", "vayamos", "vayáis", "vayan", "ve", "id", "ido", "acabo", "acabas", "acaba", "acabamos", "acabáis", "acaban", "acabé", "acabaste", "acabó", "acabasteis", "acabaron", "acababa", "acababas", "acabábamos", "acababais", "acababan", "acabaría", "acabarías", "acabaríamos", "acabaríais", "acabarían", "acabaré", "acabarás", "acabará", "acabaremos", "acabaréis", "acabarán", "acabe", "acabes", "acabemos", "acabéis", "acaben", "acabara", "acabaras", "acabáramos", "acabarais", "acabaran", "acabase", "acabases", "acabásemos", "acabaseis", "acabasen", "acabare", "acabares", "acabáremos", "acabareis", "acabaren", "acabad", "acabado", "llevo", "llevas", "lleva", "llevamos", "lleváis", "llevan", "llevé", "llevaste", "llevó", "llevasteis", "llevaron", "llevaba", "llevabas", "llevábamos", "llevabais", "llevaban", "llevaría", "llevarías", "llevaríamos", "llevaríais", "llevarían", "llevaré", "llevarás", "llevará", "llevaremos", "llevaréis", "llevarán", "lleve", "lleves", "llevemos", "llevéis", "lleven", "llevara", "llevaras", "lleváramos", "llevarais", "llevaran", "llevase", "llevases", "llevásemos", "llevaseis", "llevasen", "llevare", "llevares", "lleváremos", "llevareis", "llevaren", "llevad", "llevado", "alcanzo", "alcanzas", "alcanza", "alcanzamos", "alcanzáis", "alcanzan", "alcancé", "alcanzaste", "alcanzó", "alcanzasteis", "alcanzaron", "alcanzaba", "alcanzabas", "alcanzábamos", "alcanzabais", "alcanzaban", "alcanzaría", "alcanzarías", "alcanzaríamos", "alcanzaríais", "alcanzarían", "alcanzaré", "alcanzarás", "alcanzará", "alcanzaremos", "alcanzaréis", "alcanzarán", "alcance", "alcances", "alcancemos", "alcancéis", "alcancen", "alcanzara", "alcanzaras", "alcanzáramos", "alcanzarais", "alcanzaran", "alcanzase", "alcanzases", "alcanzásemos", "alcanzaseis", "alcanzasen", "alcanzare", "alcanzares", "alcanzáremos", "alcanzareis", "alcanzaren", "alcanzad", "alcanzado", "digo", "dices", "dice", "decimos", "decís", "dicen", "dije", "dijiste", "dijo", "dijimos", "dijisteis", "dijeron", "decía", "decías", "decíamos", "decíais", "decían", "diría", "dirías", "diríamos", "diríais", "dirían", "diré", "dirás", "dirá", "diremos", "diréis", "dirán", "diga", "digas", "digamos", "digáis", "digan", "dijera", "dijeras", "dijéramos", "dijerais", "dijeran", "dijese", "dijeses", "dijésemos", "dijeseis", "dijesen", "dijere", "dijeres", "dijéremos", "dijereis", "dijeren", "di", "decid", "dicho", "continúo", "continúas", "continúa", "continuamos", "continuáis", "continúan", "continué", "continuaste", "continuó", "continuasteis", "continuaron", "continuaba", "continuabas", "continuábamos", "continuabais", "continuaban", "continuaría", "continuarías", "continuaríamos", "continuaríais", "continuarían", "continuaré", "continuarás", "continuará", "continuaremos", "continuaréis", "continuarán", "continúe", "continúes", "continuemos", "continuéis", "continúen", "continuara", "continuaras", "continuáramos", "continuarais", "continuaran", "continuase", "continuases", "continuásemos", "continuaseis", "continuasen", "continuare", "continuares", "continuáremos", "continuareis", "continuaren", "continuad", "continuado", "resulto", "resultas", "resulta", "resultamos", "resultáis", "resultan", "resulté", "resultaste", "resultó", "resultasteis", "resultaron", "resultaba", "resultabas", "resultábamos", "resultabais", "resultaban", "resultaría", "resultarías", "resultaríamos", "resultaríais", "resultarían", "resultaré", "resultarás", "resultará", "resultaremos", "resultaréis", "resultarán", "resulte", "resultes", "resultemos", "resultéis", "resulten", "resultara", "resultaras", "resultáramos", "resultarais", "resultaran", "resultase", "resultases", "resultásemos", "resultaseis", "resultasen", "resultare", "resultares", "resultáremos", "resultareis", "resultaren", "resultad", "resultado", "puedo", "puedes", "puede", "podemos", "podéis", "pueden", "pude", "pudiste", "pudo", "pudimos", "pudisteis", "pudieron", "podía", "podías", "podíamos", "podíais", "podían", "podría", "podrías", "podríamos", "podríais", "podrían", "podré", "podrás", "podrá", "podremos", "podréis", "podrán", "pueda", "puedas", "podamos", "podáis", "puedan", "pudiera", "pudieras", "pudiéramos", "pudierais", "pudieran", "pudiese", "pudieses", "pudiésemos", "pudieseis", "pudiesen", "pudiere", "pudieres", "pudiéremos", "pudiereis", "pudieren", "poded", "podido", "quiero", "quieres", "quiere", "queremos", "queréis", "quieren", "quise", "quisiste", "quiso", "quisimos", "quisisteis", "quisieron", "quería", "querías", "queríamos", "queríais", "querían", "querría", "querrías", "querríamos", "querríais", "querrían", "querré", "querrás", "querrá", "querremos", "querréis", "querrán", "quiera", "quieras", "queramos", "queráis", "quieran", "quisiera", "quisieras", "quisiéramos", "quisierais", "quisieran", "quisiese", "quisieses", "quisiésemos", "quisieseis", "quisiesen", "quisiere", "quisieres", "quisiéremos", "quisiereis", "quisieren", "quered", "querido", "sabes", "sabe", "sabemos", "sabéis", "saben", "supe", "supiste", "supo", "supimos", "supisteis", "supieron", "sabía", "sabías", "sabíamos", "sabíais", "sabían", "sabría", "sabrías", "sabríamos", "sabríais", "sabrían", "sabré", "sabrás", "sabrá", "sabremos", "sabréis", "sabrán", "sepa", "sepas", "sepamos", "sepáis", "sepan", "supiera", "supieras", "supiéramos", "supierais", "supieran", "supiese", "supieses", "supiésemos", "supieseis", "supiesen", "supiere", "supieres", "supiéremos", "supiereis", "supieren", "sabed", "sabido", "suelo", "sueles", "suele", "solemos", "soléis", "suelen", "solí", "soliste", "solió", "solimos", "solisteis", "solieron", "solía", "solías", "solíamos", "solíais", "solían", "solería", "solerías", "soleríamos", "soleríais", "solerían", "soleré", "solerás", "solerá", "soleremos", "soleréis", "solerán", "suela", "suelas", "solamos", "soláis", "suelan", "soliera", "solieras", "soliéramos", "solierais", "solieran", "soliese", "solieses", "soliésemos", "solieseis", "soliesen", "soliere", "solieres", "soliéremos", "soliereis", "solieren", "soled", "solido", "necesito", "necesitas", "necesitamos", "necesitáis", "necesitan", "necesité", "necesitaste", "necesitó", "necesitasteis", "necesitaron", "necesitaba", "necesitabas", "necesitábamos", "necesitabais", "necesitaban", "necesitaría", "necesitarías", "necesitaríamos", "necesitaríais", "necesitarían", "necesitaré", "necesitarás", "necesitará", "necesitaremos", "necesitaréis", "necesitarán", "necesite", "necesites", "necesitemos", "necesitéis", "necesiten", "necesitara", "necesitaras", "necesitáramos", "necesitarais", "necesitaran", "necesitase", "necesitases", "necesitásemos", "necesitaseis", "necesitasen", "necesitare", "necesitares", "necesitáremos", "necesitareis", "necesitaren", "necesita", "necesitad", "necesitado"];
var otherAuxiliariesInfinitive = ["haber", "deber", "empezar", "comenzar", "seguir", "tener", "andar", "quedar", "hallar", "venir", "abrir", "ir", "acabar", "llevar", "alcanzar", "decir", "continuar", "resultar", "poder", "querer", "saber", "soler", "necesitar"];
var copula = ["estoy", "estás", "está", "estamos", "estáis", "están", "estuve", "estuviste", "estuvo", "estuvimos", "estuvisteis", "estuvieron", "estuba", "estabas", "estábamos", "estabais", "estaban", "estraría", "estarías", "estaríamos", "estaríais", "estarían", "estaré", "estarás", "estará", "estaremos", "estaréis", "estarán", "esté", "estés", "estemos", "estéis", "estén", "estuviera", "estuviese", "estuvieras", "estuviéramos", "estuvierais", "estuvieran", "estuvieses", "estuviésemos", "estuvieseis", "estuviesen", "estuviere", "estuvieres", "estuviéremos", "estuviereis", "estuvieren", "estad", "estado", "soy", "eres", "es", "somos", "sois", "son", "fui", "fuiste", "fuimos", "fuisteis", "fueron", "era", "eras", "éramos", "erais", "eran", "sería", "serías", "seríamos", "seríais", "serían", "seré", "serás", "seremos", "seréis", "serán", "sea", "seas", "seamos", "seáis", "sean", "fueras", "fuéramos", "fuerais", "fueran", "fuese", "fueses", "fuésemos", "fueseis", "fuesen", "fuere", "fueres", "fuéremos", "fuereis", "fueren", "sé", "sed", "sido"];
var copulaInfinitive = ["estar", "ser"];
var prepositions = ["a", "ante", "abajo", "adonde", "al", "allende", "alrededor", "amén", "antes", "arriba", "aun", "bajo", "cabe", "cabo", "con", "contigo", "contra", "de", "dejante", "del", "dentro", "desde", "donde", "durante", "en", "encima", "entre", "excepto", "fuera", "hacia", "hasta", "incluso", "mediante", "más", "opuesto", "par", "para", "próximo", "salvo", "según", "sin", "so", "sobre", "tras", "versus", "vía"];
var prepositionalAdverbs = ["cerca"];
var coordinatingConjunctions = ["o", "y", "entonces", "e", "u", "ni", "bien", "ora"];
// 'Igual' is part of 'igual...que'.
var correlativeConjunctions = ["igual"];
var subordinatingConjunctions = ["apenas", "segun", "que"];
// These verbs are frequently used in interviews to indicate questions and answers.
// 'Dijo' is already included in the otherAuxiliaries category.
var interviewVerbs = ["apunto", "apunta", "confieso", "confiesa", "confesaba", "revelado", "revelo", "revela", "revelaba", "declarado", "declaro", "declara", "declaba", "señalo", "señala", "señalaba", "declaraba", "comento", "comenta"];
// These transition words were not included in the list for the transition word assessment for various reasons.
var additionalTransitionWords = ["básicamente", "esencialmente", "primeramente", "siempre", "nunca", "ahora", "quizá", "acaso", "inclusive", "probablemente", "verdaderamente", "seguramente", "jamás", "obviamente", "indiscutiblement", "inmediatamente", "previamente"];
var intensifiers = ["muy", "tan", "completamente", "suficiente", "tal", "tales"];
// These verbs convey little meaning.
var delexicalizedVerbs = ["hago", "haces", "hace", "hacemos", "hacéis", "hacen", "hice", "hiciste", "hizo", "hicimos", "hicisteis", "hicieron", "hacía", "hacías", "hacíamos", "hacíais", "hacían", "haría,", "harías", "haríamos", "haríais", "harían", "haré", "harás", "hará", "haremos", "haréis", "harán", "haga", "hagas", "hagamos", "hagáis", "hagan", "hiciera", "hicieras", "hiciéramos", "hicierais", "hicieran", "hiciese", "hicieses", "hiciésemos", "hicieseis", "hiciesen", "hiciere", "hicieres", "hiciéremos", "hiciereis", "hicieren", "haz", "haced", "hecho", "parezco", "pareces", "parece", "parecemos", "parecéis", "parecen", "parecí", "pareciste", "pareció", "parecimos", "parecisteis", "parecieron", "parecía", "parecías", "parecíamos", "parecíais", "parecían", "parecería", "parecerías", "pareceríamos", "pareceríais", "parecerían", "pareceré", "parecerás", "parecerá", "pareceremos", "pareceréis", "parecerán", "parezca", "parezcas", "parezcamos", "parezcáis", "parezcan", "pareciera", "parecieras", "pareciéramos", "parecierais", "parecieran", "pareciese", "parecieses", "pareciésemos", "parecieseis", "pareciesen", "pareciere", "parecieres", "pareciéremos", "pareciereis", "parecieren", "pareced", "parecido"];
var delexicalizedVerbsInfinitive = ["hacer", "parecer"];
// These adjectives and adverbs are so general, they should never be suggested as a (single) keyword.
// Keyword combinations containing these adjectives/adverbs are fine.
var generalAdjectivesAdverbs = ["enfrente", "mejor", "peor", "menos", "claro", "bueno", "nuevo", "nueva", "nuevos", "nuevas", "viejo", "viejos", "vieja", "viejas", "anterior", "grande", "gran", "grandes", "mayores", "fácil", "fáciles", "rápido", "rápida", "rápidos", "rápidas", "lejos", "lejas", "difícil", "difíciles", "propio", "propios", "propia", "propias", "largo", "larga", "largos", "largas", "bajos", "baja", "bajas", "alto", "alta", "altos", "altas", "regular", "regulares", "normal", "pequeño", "pequeña", "pequeños", "pequeñas", "diminuta", "diminuto", "diminutas", "diminutos", "chiquitito", "chiquititos", "chiquitita", "chiquititas", "corta", "corto", "cortas", "cortos", "principal", "principales", "mismo", "mismos", "misma", "mismas", "capaz", "capaces", "cierta", "cierto", "ciertas", "ciertos", "llamado", "llamada", "llamados", "llamadas", "mayormente", "reciente", "recientes", "completa", "completo", "completas", "completos", "absoluta", "absoluto", "absolutas", "absolutos", "últimamente", "posible", "común", "comúnes", "comúnmente", "constantemente", "continuamente", "directamente", "fácilmente", "casi", "ligeramente", "estima", "estimada", "estimado", "aproximada", "aproximadamente", "última", "últimas", "último", "últimos", "diferente", "diferentes", "similar", "mal", "malo", "malos", "mala", "malas", "perfectamente", "excelente", "final", "general"];
var interjections = ["ah", "eh", "ejem", "ele", "achís", "adiós", "agur", "ajá", "ajajá", "ala", "alá", "albricias", "aleluya", "alerta", "alirón", "aló", "amalaya", "ar", "aro", "arrarray", "arre", "arsa", "atatay", "aúpa", "ax", "ay", "ayayay", "bah", "banzai", "barajo", "bla", "bravo", "buf", "bum", "ca", "caguendiós", "canastos", "caracho", "caracoles", "carajo", "caramba", "carape", "caray", "cáscaras", "cáspita", "cataplum", "ce", "chao", "chau", "che", "chis", "chist", "chitón", "cho", "chucho", "chus", "cielos", "clo", "coche", "cochi", "cojones", "concho", "coño", "córcholis", "cuchí", "cuidado", "cuz", "demonio", "demontre", "despacio", "diablo", "diantre", "dios", "ea", "epa", "equilicuá", "estúpido", "eureka", "evohé", "exacto", "fantástico", "firmes", "fo", "forte", "gua", "gualá", "guarte", "guay", "hala", "hale", "he", "hi", "hin", "hola", "hopo", "huesque", "huiche", "huichó", "huifa", "hurra", "huy", "ja", "jajajá", "jajay", "jaque", "jau", "jo", "jobar", "joder", "jolín", "jopo", "leñe", "listo", "malhayas", "mamola", "mecachis", "miéchica", "mondo", "moste", "mutis", "nanay", "narices", "oh", "ojalá", "ojo", "okay", "ole", "olé", "órdiga", "oste", "ostras", "ox", "oxte", "paf", "pardiez", "paso", "pucha", "puf", "puff", "pumba", "puñeta", "quia", "quiúbole", "recórcholis", "rediez", "rediós", "salve", "sanseacabó", "sniff", "socorro", "ta", "tararira", "tate", "tururú", "uf", "uh", "ui", "upa", "uste", "uy", "victoria", "vítor", "viva", "za", "zambomba", "zapateta", "zape", "zas"];
// These words and abbreviations are frequently used in recipes in lists of ingredients.
var recipeWords = ["kg", "mg", "gr", "g", "km", "m", "l", "ml", "cl"];
var timeWords = ["minuto", "minutos", "hora", "horas", "día", "días", "semana", "semanas", "mes", "meses", "año", "años", "hoy", "mañana", "ayer"];
// 'People' should only be removed in combination with 'some', 'many' and 'few' (and is therefore not yet included in the list below).
var vagueNouns = ["cosa", "cosas", "manera", "maneras", "caso", "casos", "pieza", "piezas", "vez", "veces", "parte", "partes", "porcentaje", "instancia", "aspecto", "aspectos", "punto", "puntos", "objeto", "objectos", "persona", "personas"];
var miscellaneous = ["no", "euros"];
var titlesPreceding = ["sra", "sras", "srta", "sr", "sres", "dra", "dr", "profa", "prof"];
var titlesFollowing = ["jr", "sr"];
module.exports = function () {
    return {
        // These word categories are filtered at the beginning of word combinations.
        filteredAtBeginning: generalAdjectivesAdverbs,
        // These word categories are filtered at the ending of word combinations.
        filteredAtEnding: [].concat(ordinalNumerals, otherAuxiliariesInfinitive, copulaInfinitive, delexicalizedVerbsInfinitive),
        // These word categories are filtered at the beginning and ending of word combinations.
        filteredAtBeginningAndEnding: [].concat(articles, prepositions, coordinatingConjunctions, demonstrativePronouns, intensifiers, quantifiers, possessivePronouns),
        // These word categories are filtered everywhere within word combinations.
        filteredAnywhere: [].concat(transitionWords, personalPronounsNominative, personalPronounsAccusative, personalPronounsPrepositional, personalPronounsComitative, interjections, cardinalNumerals, otherAuxiliaries, copula, interviewVerbs, delexicalizedVerbs, indefinitePronouns, correlativeConjunctions, subordinatingConjunctions, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, miscellaneous, prepositionalAdverbs, recipeWords, timeWords, vagueNouns),
        // This export contains all of the above words.
        all: [].concat(articles, cardinalNumerals, ordinalNumerals, demonstrativePronouns, possessivePronouns, personalPronounsNominative, personalPronounsComitative, personalPronounsPrepositional, personalPronounsAccusative, quantifiers, indefinitePronouns, interrogativeDeterminers, interrogativePronouns, interrogativeProAdverbs, locativeAdverbs, prepositionalAdverbs, otherAuxiliaries, otherAuxiliariesInfinitive, copula, copulaInfinitive, prepositions, coordinatingConjunctions, correlativeConjunctions, subordinatingConjunctions, interviewVerbs, transitionWords, additionalTransitionWords, intensifiers, delexicalizedVerbs, delexicalizedVerbsInfinitive, interjections, generalAdjectivesAdverbs, recipeWords, vagueNouns, miscellaneous, titlesPreceding, titlesFollowing)
    };
};



},{"./transitionWords.js":188}],188:[function(require,module,exports){
"use strict";
/** @module config/transitionWords */

var singleWords = ["además", "adicional", "así", "asimismo", "aún", "aunque", "ciertamente", "como", "concluyendo", "conque", "contrariamente", "cuando", "decididamente", "decisivamente", "después", "diferentemente", "efectivamente", "entonces", "especialmente", "específicamente", "eventualmente", "evidentemente", "finalmente", "frecuentemente", "generalmente", "igualmente", "lógicamente", "luego", "mas", "mientras", "pero", "por", "porque", "posteriormente", "primero", "principalmente", "pronto", "próximamente", "pues", "raramente", "realmente", "seguidamente", "segundo", "semejantemente", "si", "siguiente", "sino", "súbitamente", "supongamos", "también", "tampoco", "tercero", "verbigracia", "vice-versa", "ya"];
var multipleWords = ["a causa de", "a continuación", "a diferencia de", "a fin de cuentas", "a la inversa", "a la misma vez", "a más de", "a más de esto", "a menos que", "a no ser que", "a pesar de", "a pesar de eso", "a pesar de todo", "a peser de", "a propósito", "a saber", "a todo esto", "ahora bien", "al contrario", "al fin y al cabo", "al final", "al inicio", "al mismo tiempo", "al principio", "ante todo", "antes bien", "antes de", "antes de nada", "antes que nada", "aparte de", "as así como", "así como", "así mismo", "así pues", "así que", "así y todo", "aún así", "claro está que", "claro que", "claro que sí", "como caso típico", "como decíamos", "como era de esperar", "como es de esperar", "como muestra", "como resultado", "como se ha notado", "como sigue", "comparado con", "con el objeto de", "con el propósito de", "con que", "con relación a", "con tal de que", "con todo", "dado que", "de ahí", "de cierta manera", "de cualquier manera", "de cualquier modo", "de ello resulta que", "de este modo", "de golpe", "de hecho", "de igual manera", "de igual modo", "de igualmanera", "de la manera siguiente", "de la misma forma", "de la misma manera", "de manera semejante", "del mismo modo", "de modo que", "de nuevo", "de otra manera", "de otro modo", "de pronto", "de qualquier manera", "de repente", "de suerte que", "de tal modo", "de todas formas", "de todas maneras", "de todos modos", "de veras", "debido a", "debido a que", "del mismo modo", "dentro de poco", "desde entonces", "después de", "después de todo", "ejemplo de esto", "el caso es que", "en aquel tiempo", "en cambio", "en cierto modo", "en comparación con", "en conclusión", "en concreto", "en conformidad con", "en consecuencia", "en consiguiente", "en contraste con", "en cualquier caso", "en cuanto", "en cuanto a", "en definitiva", "en efecto", "en el caso de que", "en este sentido", "en fin", "en fin de cuentas", "en general", "en lugar de", "en otras palabras", "en otro orden", "en otros términos", "en particular", "en primer lugar", "en primer término", "en primera instancia", "en realidad", "en relación a", "en relación con", "en representación de", "en resumen", "en resumidas cuentas", "en segundo lugar", "en seguida", "en síntesis", "en suma", "en todo caso", "en último término", "en verdad", "en vez de", "en virtud de", "entre ellas figura", "entre ellos figura", "es cierto que", "es decir", "es evidente que", "es incuestionable", "es indudable", "es más", "está claro que", "esto indica", "excepto si", "generalmente por ejemplo", "gracias a", "hasta aquí", "hasta cierto punto", "hasta el momento", "hay que añadir", "igual que", "la mayor parte del tiempo", "la mayoría del tiempo", "lo que es peor", "más tarde", "mejor dicho", "mientras tanto", "mirándolo todo", "nadie puede ignorar", "no faltaría más", "no obstante", "o sea", "otra vez", "otro aspecto", "par ilustrar", "para concluir", "para conclusión", "para continuar", "para empezar", "para finalizar", "para mencionar una cosa", "para que", "para resumir", "para terminar", "pongamos por caso", "por añadidura", "por cierto", "por consiguiente", "por ejemplo", "por el consiguiente", "por el contrario", "por el hecho que", "por eso", "por esta razón", "por esto", "por fin", "por la mayor parte", "por lo general", "por lo que", "por lo tanto", "por otro lado", "por otra parte", "por otro lado", "por supuesto", "por tanto", "por último", "por un lado", "por una parte", "primero que nada", "primero que todo", "pues bien", "puesto que", "rara vez", "resulta que", "sea como sea", "seguidamente entre tanto", "si bien", "siempre que", "siempre y cuando", "sigue que", "sin duda", "sin embargo", "sin ir más lejos", "sobre todo", "supuesto que", "tal como", "tales como", "tan pronto como", "tanto como", "una vez", "ya que"];
/**
 * Returns lists with transition words to be used by the assessments.
 * @returns {Object} The object with transition word lists.
 */
module.exports = function () {
    return {
        singleWords: singleWords,
        multipleWords: multipleWords,
        allWords: singleWords.concat(multipleWords)
    };
};



},{}],189:[function(require,module,exports){
"use strict";

var map = require("lodash/map");
var isUndefined = require("lodash/isUndefined");
var forEach = require("lodash/forEach");
var isNaN = require("lodash/isNaN");
var filter = require("lodash/filter");
var flatMap = require("lodash/flatMap");
var isEmpty = require("lodash/isEmpty");
var negate = require("lodash/negate");
var memoize = require("lodash/memoize");
var core = require("tokenizer2/core");
var getBlocks = require("../helpers/html.js").getBlocks;
var normalizeQuotes = require("../stringProcessing/quotes.js").normalize;
var unifyWhitespace = require("../stringProcessing/unifyWhitespace.js").unifyNonBreakingSpace;
// All characters that indicate a sentence delimiter.
var fullStop = ".";
// The \u2026 character is an ellipsis
var sentenceDelimiters = "?!;\u2026";
var newLines = "\n\r|\n|\r";
var fullStopRegex = new RegExp("^[" + fullStop + "]$");
var sentenceDelimiterRegex = new RegExp("^[" + sentenceDelimiters + "]$");
var sentenceRegex = new RegExp("^[^" + fullStop + sentenceDelimiters + "<\\(\\)\\[\\]]+$");
var htmlStartRegex = /^<([^>\s\/]+)[^>]*>$/mi;
var htmlEndRegex = /^<\/([^>\s]+)[^>]*>$/mi;
var newLineRegex = new RegExp(newLines);
var blockStartRegex = /^\s*[\[\(\{]\s*$/;
var blockEndRegex = /^\s*[\]\)}]\s*$/;
var tokens = [];
var sentenceTokenizer;
/**
 * Creates a tokenizer to create tokens from a sentence.
 *
 * @returns {void}
 */
function createTokenizer() {
    tokens = [];
    sentenceTokenizer = core(function (token) {
        tokens.push(token);
    });
    sentenceTokenizer.addRule(htmlStartRegex, "html-start");
    sentenceTokenizer.addRule(htmlEndRegex, "html-end");
    sentenceTokenizer.addRule(blockStartRegex, "block-start");
    sentenceTokenizer.addRule(blockEndRegex, "block-end");
    sentenceTokenizer.addRule(fullStopRegex, "full-stop");
    sentenceTokenizer.addRule(sentenceDelimiterRegex, "sentence-delimiter");
    sentenceTokenizer.addRule(sentenceRegex, "sentence");
}
/**
 * Returns whether or not a certain character is a capital letter.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the character is a capital letter.
 */
function isCapitalLetter(character) {
    return character !== character.toLocaleLowerCase();
}
/**
 * Returns whether or not a certain character is a number.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the character is a capital letter.
 */
function isNumber(character) {
    return !isNaN(parseInt(character, 10));
}
/**
 * Returns whether or not a given HTML tag is a break tag.
 *
 * @param {string} htmlTag The HTML tag to check.
 * @returns {boolean} Whether or not the given HTML tag is a break tag.
 */
function isBreakTag(htmlTag) {
    return (/<br/.test(htmlTag)
    );
}
/**
 * Returns whether or not a given character is quotation mark.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the given character is a quotation mark.
 */
function isQuotation(character) {
    character = normalizeQuotes(character);
    return "'" === character || "\"" === character;
}
/**
 * Returns whether or not a given character is a punctuation mark that can be at the beginning
 * of a sentence, like ¿ and ¡ used in Spanish.
 *
 * @param {string} character The character to check.
 * @returns {boolean} Whether or not the given character is a punctuation mark.
 */
function isPunctuation(character) {
    return "¿" === character || "¡" === character;
}
/**
 * Tokenizes a sentence, assumes that the text has already been split into blocks.
 *
 * @param {string} text The text to tokenize.
 * @returns {Array} An array of tokens.
 */
function tokenizeSentences(text) {
    createTokenizer();
    sentenceTokenizer.onText(text);
    sentenceTokenizer.end();
    return tokens;
}
/**
 * Removes duplicate whitespace from a given text.
 *
 * @param {string} text The text with duplicate whitespace.
 * @returns {string} The text without duplicate whitespace.
 */
function removeDuplicateWhitespace(text) {
    return text.replace(/\s+/, " ");
}
/**
 * Retrieves the next two characters from an array with the two next tokens.
 *
 * @param {Array} nextTokens The two next tokens. Might be undefined.
 * @returns {string} The next two characters.
 */
function getNextTwoCharacters(nextTokens) {
    var next = "";
    if (!isUndefined(nextTokens[0])) {
        next += nextTokens[0].src;
    }
    if (!isUndefined(nextTokens[1])) {
        next += nextTokens[1].src;
    }
    next = removeDuplicateWhitespace(next);
    return next;
}
/**
 * Checks if the sentenceBeginning beginning is a valid beginning.
 *
 * @param {string} sentenceBeginning The beginning of the sentence to validate.
 * @returns {boolean} Returns true if it is a valid beginning, false if it is not.
 */
function isValidSentenceBeginning(sentenceBeginning) {
    return isCapitalLetter(sentenceBeginning) || isNumber(sentenceBeginning) || isQuotation(sentenceBeginning) || isPunctuation(sentenceBeginning);
}
/**
 * Checks if the token is a valid sentence ending.
 *
 * @param {Object} token The token to validate.
 * @returns {boolean} Returns true if the token is valid ending, false if it is not.
 */
function isSentenceStart(token) {
    return !isUndefined(token) && ("html-start" === token.type || "html-end" === token.type || "block-start" === token.type);
}
/**
 * Returns an array of sentences for a given array of tokens, assumes that the text has already been split into blocks.
 *
 * @param {Array} tokens The tokens from the sentence tokenizer.
 * @returns {Array<string>} A list of sentences.
 */
function getSentencesFromTokens(tokens) {
    var tokenSentences = [],
        currentSentence = "",
        nextSentenceStart;
    var sliced;
    // Drop the first and last HTML tag if both are present.
    do {
        sliced = false;
        var firstToken = tokens[0];
        var lastToken = tokens[tokens.length - 1];
        if (firstToken.type === "html-start" && lastToken.type === "html-end") {
            tokens = tokens.slice(1, tokens.length - 1);
            sliced = true;
        }
    } while (sliced && tokens.length > 1);
    forEach(tokens, function (token, i) {
        var hasNextSentence;
        var nextToken = tokens[i + 1];
        var secondToNextToken = tokens[i + 2];
        var nextCharacters;
        switch (token.type) {
            case "html-start":
            case "html-end":
                if (isBreakTag(token.src)) {
                    tokenSentences.push(currentSentence);
                    currentSentence = "";
                } else {
                    currentSentence += token.src;
                }
                break;
            case "sentence":
                currentSentence += token.src;
                break;
            case "sentence-delimiter":
                currentSentence += token.src;
                if (!isUndefined(nextToken) && "block-end" !== nextToken.type) {
                    tokenSentences.push(currentSentence);
                    currentSentence = "";
                }
                break;
            case "full-stop":
                currentSentence += token.src;
                nextCharacters = getNextTwoCharacters([nextToken, secondToNextToken]);
                // For a new sentence we need to check the next two characters.
                hasNextSentence = nextCharacters.length >= 2;
                nextSentenceStart = hasNextSentence ? nextCharacters[1] : "";
                // If the next character is a number, never split. For example: IPv4-numbers.
                if (hasNextSentence && isNumber(nextCharacters[0])) {
                    break;
                }
                // Only split on sentence delimiters when the next sentence looks like the start of a sentence.
                if (hasNextSentence && isValidSentenceBeginning(nextSentenceStart) || isSentenceStart(nextToken)) {
                    tokenSentences.push(currentSentence);
                    currentSentence = "";
                }
                break;
            case "block-start":
                currentSentence += token.src;
                break;
            case "block-end":
                currentSentence += token.src;
                nextCharacters = getNextTwoCharacters([nextToken, secondToNextToken]);
                // For a new sentence we need to check the next two characters.
                hasNextSentence = nextCharacters.length >= 2;
                nextSentenceStart = hasNextSentence ? nextCharacters[0] : "";
                // If the next character is a number, never split. For example: IPv4-numbers.
                if (hasNextSentence && isNumber(nextCharacters[0])) {
                    break;
                }
                if (hasNextSentence && isValidSentenceBeginning(nextSentenceStart) || isSentenceStart(nextToken)) {
                    tokenSentences.push(currentSentence);
                    currentSentence = "";
                }
                break;
        }
    });
    if ("" !== currentSentence) {
        tokenSentences.push(currentSentence);
    }
    tokenSentences = map(tokenSentences, function (sentence) {
        return sentence.trim();
    });
    return tokenSentences;
}
/**
 * Returns the sentences from a certain block.
 *
 * @param {string} block The HTML inside a HTML block.
 * @returns {Array<string>} The list of sentences in the block.
 */
function getSentencesFromBlock(block) {
    var tokens = tokenizeSentences(block);
    return tokens.length === 0 ? [] : getSentencesFromTokens(tokens);
}
var getSentencesFromBlockCached = memoize(getSentencesFromBlock);
/**
 * Returns sentences in a string.
 *
 * @param {String} text The string to count sentences in.
 * @returns {Array} Sentences found in the text.
 */
module.exports = function (text) {
    text = unifyWhitespace(text);
    var sentences,
        blocks = getBlocks(text);
    // Split each block on newlines.
    blocks = flatMap(blocks, function (block) {
        return block.split(newLineRegex);
    });
    sentences = flatMap(blocks, getSentencesFromBlockCached);
    return filter(sentences, negate(isEmpty));
};



},{"../helpers/html.js":174,"../stringProcessing/quotes.js":191,"../stringProcessing/unifyWhitespace.js":196,"lodash/filter":133,"lodash/flatMap":134,"lodash/forEach":135,"lodash/isEmpty":147,"lodash/isNaN":151,"lodash/isUndefined":158,"lodash/map":160,"lodash/memoize":161,"lodash/negate":162,"tokenizer2/core":172}],190:[function(require,module,exports){
"use strict";
/** @module stringProcessing/countWords */

var stripTags = require("./stripHTMLTags.js").stripFullTags;
var stripSpaces = require("./stripSpaces.js");
var removePunctuation = require("./removePunctuation.js");
var map = require("lodash/map");
var filter = require("lodash/filter");
/**
 * Returns an array with words used in the text.
 *
 * @param {string} text The text to be counted.
 * @returns {Array} The array with all words.
 */
module.exports = function (text) {
    text = stripSpaces(stripTags(text));
    if (text === "") {
        return [];
    }
    var words = text.split(/\s/g);
    words = map(words, function (word) {
        return removePunctuation(word);
    });
    return filter(words, function (word) {
        return word.trim() !== "";
    });
};



},{"./removePunctuation.js":193,"./stripHTMLTags.js":194,"./stripSpaces.js":195,"lodash/filter":133,"lodash/map":160}],191:[function(require,module,exports){
"use strict";
/**
 * Normalizes single quotes to 'regular' quotes.
 *
 * @param {string} text Text to normalize.
 * @returns {string} The normalized text.
 */

function normalizeSingleQuotes(text) {
    return text.replace(/[‘’‛`]/g, "'");
}
/**
 * Normalizes double quotes to 'regular' quotes.
 *
 * @param {string} text Text to normalize.
 * @returns {string} The normalized text.
 */
function normalizeDoubleQuotes(text) {
    return text.replace(/[“”〝〞〟‟„]/g, "\"");
}
/**
 * Normalizes quotes to 'regular' quotes.
 *
 * @param {string} text Text to normalize.
 * @returns {string} The normalized text.
 */
function normalizeQuotes(text) {
    return normalizeDoubleQuotes(normalizeSingleQuotes(text));
}
module.exports = {
    normalizeSingle: normalizeSingleQuotes,
    normalizeDouble: normalizeDoubleQuotes,
    normalize: normalizeQuotes
};



},{}],192:[function(require,module,exports){
"use strict";

var getWords = require("../stringProcessing/getWords.js");
var getSentences = require("../stringProcessing/getSentences.js");
var WordCombination = require("../values/WordCombination.js");
var normalizeQuotes = require("../stringProcessing/quotes.js").normalize;
var germanFunctionWords = require("../researches/german/functionWords.js");
var englishFunctionWords = require("../researches/english/functionWords.js");
var dutchFunctionWords = require("../researches/dutch/functionWords.js");
var spanishFunctionWords = require("../researches/spanish/functionWords.js");
var italianFunctionWords = require("../researches/italian/functionWords.js");
var frenchFunctionWords = require("../researches/french/functionWords.js");
var getLanguage = require("../helpers/getLanguage.js");
var filter = require("lodash/filter");
var map = require("lodash/map");
var forEach = require("lodash/forEach");
var has = require("lodash/has");
var flatMap = require("lodash/flatMap");
var values = require("lodash/values");
var take = require("lodash/take");
var includes = require("lodash/includes");
var intersection = require("lodash/intersection");
var isEmpty = require("lodash/isEmpty");
var densityLowerLimit = 0;
var densityUpperLimit = 0.03;
var relevantWordLimit = 100;
var wordCountLowerLimit = 200;
// First four characters: en dash, em dash, hyphen-minus, and copyright sign.
var specialCharacters = ["–", "—", "-", "\xA9", "#", "%", "/", "\\", "$", "€", "£", "*", "•", "|", "→", "←", "}", "{", "//", "||", "\u200B"];
/**
 * Returns the word combinations for the given text based on the combination size.
 *
 * @param {string} text The text to retrieve combinations for.
 * @param {number} combinationSize The size of the combinations to retrieve.
 * @param {Function} functionWords The function containing the lists of function words.
 * @returns {WordCombination[]} All word combinations for the given text.
 */
function getWordCombinations(text, combinationSize, functionWords) {
    var sentences = getSentences(text);
    var words = void 0,
        combination = void 0;
    return flatMap(sentences, function (sentence) {
        sentence = sentence.toLocaleLowerCase();
        sentence = normalizeQuotes(sentence);
        words = getWords(sentence);
        return filter(map(words, function (word, i) {
            // If there are still enough words in the sentence to slice of.
            if (i + combinationSize - 1 < words.length) {
                combination = words.slice(i, i + combinationSize);
                return new WordCombination(combination, 0, functionWords);
            }
            return false;
        }));
    });
}
/**
 * Calculates occurrences for a list of word combinations.
 *
 * @param {WordCombination[]} wordCombinations The word combinations to calculate occurrences for.
 * @returns {WordCombination[]} Word combinations with their respective occurrences.
 */
function calculateOccurrences(wordCombinations) {
    var occurrences = {};
    forEach(wordCombinations, function (wordCombination) {
        var combination = wordCombination.getCombination();
        if (!has(occurrences, combination)) {
            occurrences[combination] = wordCombination;
        }
        occurrences[combination].incrementOccurrences();
    });
    return values(occurrences);
}
/**
 * Returns only the relevant combinations from a list of word combinations. Assumes
 * occurrences have already been calculated.
 *
 * @param {WordCombination[]} wordCombinations A list of word combinations.
 * @returns {WordCombination[]} Only relevant word combinations.
 */
function getRelevantCombinations(wordCombinations) {
    wordCombinations = wordCombinations.filter(function (combination) {
        return combination.getOccurrences() !== 1 && combination.getRelevance() !== 0;
    });
    return wordCombinations;
}
/**
 * Sorts combinations based on their relevance and length.
 *
 * @param {WordCombination[]} wordCombinations The combinations to sort.
 * @returns {void}
 */
function sortCombinations(wordCombinations) {
    wordCombinations.sort(function (combinationA, combinationB) {
        var difference = combinationB.getRelevance() - combinationA.getRelevance();
        // The combination with the highest relevance comes first.
        if (difference !== 0) {
            return difference;
        }
        // In case of a tie on relevance, the longest combination comes first.
        return combinationB.getLength() - combinationA.getLength();
    });
}
/**
 * Filters word combinations that consist of a single one-character word.
 *
 * @param {WordCombination[]} wordCombinations The word combinations to filter.
 * @returns {WordCombination[]} Filtered word combinations.
 */
function filterOneCharacterWordCombinations(wordCombinations) {
    return wordCombinations.filter(function (combination) {
        return !(combination.getLength() === 1 && combination.getWords()[0].length <= 1);
    });
}
/**
 * Filters word combinations containing certain function words at any position.
 *
 * @param {WordCombination[]} wordCombinations The word combinations to filter.
 * @param {array} functionWords The list of function words.
 * @returns {WordCombination[]} Filtered word combinations.
 */
function filterFunctionWordsAnywhere(wordCombinations, functionWords) {
    return wordCombinations.filter(function (combination) {
        return isEmpty(intersection(functionWords, combination.getWords()));
    });
}
/**
 * Filters word combinations beginning with certain function words.
 *
 * @param {WordCombination[]} wordCombinations The word combinations to filter.
 * @param {array} functionWords The list of function words.
 * @returns {WordCombination[]} Filtered word combinations.
 */
function filterFunctionWordsAtBeginning(wordCombinations, functionWords) {
    return wordCombinations.filter(function (combination) {
        return !includes(functionWords, combination.getWords()[0]);
    });
}
/**
 * Filters word combinations ending with certain function words.
 *
 * @param {WordCombination[]} wordCombinations The word combinations to filter.
 * @param {array} functionWords The list of function words.
 * @returns {WordCombination[]} Filtered word combinations.
 */
function filterFunctionWordsAtEnding(wordCombinations, functionWords) {
    return wordCombinations.filter(function (combination) {
        var words = combination.getWords();
        var lastWordIndex = words.length - 1;
        return !includes(functionWords, words[lastWordIndex]);
    });
}
/**
 * Filters word combinations beginning and ending with certain function words.
 *
 * @param {WordCombination[]} wordCombinations The word combinations to filter.
 * @param {Array} functionWords The list of function words.
 * @returns {WordCombination[]} Filtered word combinations.
 */
function filterFunctionWordsAtBeginningAndEnding(wordCombinations, functionWords) {
    wordCombinations = filterFunctionWordsAtBeginning(wordCombinations, functionWords);
    wordCombinations = filterFunctionWordsAtEnding(wordCombinations, functionWords);
    return wordCombinations;
}
/**
 * Filters word combinations based on keyword density if the word count is 200 or over.
 *
 * @param {WordCombination[]} wordCombinations The word combinations to filter.
 * @param {number} wordCount The number of words in the total text.
 * @param {number} densityLowerLimit The lower limit of keyword density.
 * @param {number} densityUpperLimit The upper limit of keyword density.
 * @returns {WordCombination[]} Filtered word combinations.
 */
function filterOnDensity(wordCombinations, wordCount, densityLowerLimit, densityUpperLimit) {
    return wordCombinations.filter(function (combination) {
        return combination.getDensity(wordCount) >= densityLowerLimit && combination.getDensity(wordCount) < densityUpperLimit;
    });
}
/**
 * Filters the list of word combination objects based on the language-specific function word filters.
 * Word combinations with specific parts of speech are removed.
 *
 * @param {Array} combinations The list of word combination objects.
 * @param {Function} functionWords The function containing the lists of function words.
 * @returns {Array} The filtered list of word combination objects.
 */
function filterFunctionWords(combinations, functionWords) {
    combinations = filterFunctionWordsAnywhere(combinations, functionWords().filteredAnywhere);
    combinations = filterFunctionWordsAtBeginningAndEnding(combinations, functionWords().filteredAtBeginningAndEnding);
    combinations = filterFunctionWordsAtEnding(combinations, functionWords().filteredAtEnding);
    combinations = filterFunctionWordsAtBeginning(combinations, functionWords().filteredAtBeginning);
    return combinations;
}
/**
 * Filters the list of word combination objects based on function word filters, a special character filter and
 * a one-character filter.
 *
 * @param {Array} combinations The list of word combination objects.
 * @param {Function} functionWords The function containing the lists of function words.
 * @returns {Array} The filtered list of word combination objects.
 */
function filterCombinations(combinations, functionWords) {
    combinations = filterFunctionWordsAnywhere(combinations, specialCharacters);
    combinations = filterOneCharacterWordCombinations(combinations);
    combinations = filterFunctionWords(combinations, functionWords);
    return combinations;
}
/**
 * Returns the relevant words in a given text.
 *
 * @param {string} text The text to retrieve the relevant words of.
 * @param {string} locale The paper's locale.
 * @returns {WordCombination[]} All relevant words sorted and filtered for this text.
 */
function getRelevantWords(text, locale) {
    var functionWords = void 0;
    switch (getLanguage(locale)) {
        case "de":
            functionWords = germanFunctionWords;
            break;
        case "nl":
            functionWords = dutchFunctionWords;
            break;
        case "fr":
            functionWords = frenchFunctionWords;
            break;
        case "es":
            functionWords = spanishFunctionWords;
            break;
        case "it":
            functionWords = italianFunctionWords;
            break;
        default:
        case "en":
            functionWords = englishFunctionWords;
            break;
    }
    var words = getWordCombinations(text, 1, functionWords().all);
    var wordCount = words.length;
    var oneWordCombinations = getRelevantCombinations(calculateOccurrences(words));
    sortCombinations(oneWordCombinations);
    oneWordCombinations = take(oneWordCombinations, 100);
    var oneWordRelevanceMap = {};
    forEach(oneWordCombinations, function (combination) {
        oneWordRelevanceMap[combination.getCombination()] = combination.getRelevance(functionWords);
    });
    var twoWordCombinations = calculateOccurrences(getWordCombinations(text, 2, functionWords().all));
    var threeWordCombinations = calculateOccurrences(getWordCombinations(text, 3, functionWords().all));
    var fourWordCombinations = calculateOccurrences(getWordCombinations(text, 4, functionWords().all));
    var fiveWordCombinations = calculateOccurrences(getWordCombinations(text, 5, functionWords().all));
    var combinations = oneWordCombinations.concat(twoWordCombinations, threeWordCombinations, fourWordCombinations, fiveWordCombinations);
    combinations = filterCombinations(combinations, functionWords);
    forEach(combinations, function (combination) {
        combination.setRelevantWords(oneWordRelevanceMap);
    });
    combinations = getRelevantCombinations(combinations, wordCount);
    sortCombinations(combinations);
    if (wordCount >= wordCountLowerLimit) {
        combinations = filterOnDensity(combinations, wordCount, densityLowerLimit, densityUpperLimit);
    }
    return take(combinations, relevantWordLimit);
}
module.exports = {
    getWordCombinations: getWordCombinations,
    getRelevantWords: getRelevantWords,
    calculateOccurrences: calculateOccurrences,
    getRelevantCombinations: getRelevantCombinations,
    sortCombinations: sortCombinations,
    filterFunctionWordsAtEnding: filterFunctionWordsAtEnding,
    filterFunctionWordsAtBeginning: filterFunctionWordsAtBeginning,
    filterFunctionWords: filterFunctionWordsAtBeginningAndEnding,
    filterFunctionWordsAnywhere: filterFunctionWordsAnywhere,
    filterOnDensity: filterOnDensity,
    filterOneCharacterWordCombinations: filterOneCharacterWordCombinations
};



},{"../helpers/getLanguage.js":173,"../researches/dutch/functionWords.js":175,"../researches/english/functionWords.js":177,"../researches/french/functionWords.js":180,"../researches/german/functionWords.js":182,"../researches/italian/functionWords.js":185,"../researches/spanish/functionWords.js":187,"../stringProcessing/getSentences.js":189,"../stringProcessing/getWords.js":190,"../stringProcessing/quotes.js":191,"../values/WordCombination.js":197,"lodash/filter":133,"lodash/flatMap":134,"lodash/forEach":135,"lodash/has":137,"lodash/includes":140,"lodash/intersection":141,"lodash/isEmpty":147,"lodash/map":160,"lodash/take":165,"lodash/values":171}],193:[function(require,module,exports){
"use strict";
// Replace all other punctuation characters at the beginning or at the end of a word.

var punctuationRegexString = "[\\\u2013\\-\\(\\)_\\[\\]\u2019\u201C\u201D\"'.?!:;,\xBF\xA1\xAB\xBB\u2014\xD7+&]+";
var punctuationRegexStart = new RegExp("^" + punctuationRegexString);
var punctuationRegexEnd = new RegExp(punctuationRegexString + "$");
/**
 * Replaces punctuation characters from the given text string.
 *
 * @param {String} text The text to remove the punctuation characters for.
 *
 * @returns {String} The sanitized text.
 */
module.exports = function (text) {
  text = text.replace(punctuationRegexStart, "");
  text = text.replace(punctuationRegexEnd, "");
  return text;
};



},{}],194:[function(require,module,exports){
"use strict";
/** @module stringProcessing/stripHTMLTags */

var stripSpaces = require("../stringProcessing/stripSpaces.js");
var blockElements = require("../helpers/html.js").blockElements;
var blockElementStartRegex = new RegExp("^<(" + blockElements.join("|") + ")[^>]*?>", "i");
var blockElementEndRegex = new RegExp("</(" + blockElements.join("|") + ")[^>]*?>$", "i");
/**
 * Strip incomplete tags within a text. Strips an endtag at the beginning of a string and the start tag at the end of a
 * start of a string.
 * @param {String} text The text to strip the HTML-tags from at the begin and end.
 * @returns {String} The text without HTML-tags at the begin and end.
 */
var stripIncompleteTags = function stripIncompleteTags(text) {
    text = text.replace(/^(<\/([^>]+)>)+/i, "");
    text = text.replace(/(<([^\/>]+)>)+$/i, "");
    return text;
};
/**
 * Removes the block element tags at the beginning and end of a string and returns this string.
 *
 * @param {string} text The unformatted string.
 * @returns {string} The text with removed HTML begin and end block elements
 */
var stripBlockTagsAtStartEnd = function stripBlockTagsAtStartEnd(text) {
    text = text.replace(blockElementStartRegex, "");
    text = text.replace(blockElementEndRegex, "");
    return text;
};
/**
 * Strip HTML-tags from text
 *
 * @param {String} text The text to strip the HTML-tags from.
 * @returns {String} The text without HTML-tags.
 */
var stripFullTags = function stripFullTags(text) {
    text = text.replace(/(<([^>]+)>)/ig, " ");
    text = stripSpaces(text);
    return text;
};
module.exports = {
    stripFullTags: stripFullTags,
    stripIncompleteTags: stripIncompleteTags,
    stripBlockTagsAtStartEnd: stripBlockTagsAtStartEnd
};



},{"../helpers/html.js":174,"../stringProcessing/stripSpaces.js":195}],195:[function(require,module,exports){
"use strict";
/** @module stringProcessing/stripSpaces */
/**
 * Strip double spaces from text
 *
 * @param {String} text The text to strip spaces from.
 * @returns {String} The text without double spaces
 */

module.exports = function (text) {
    // Replace multiple spaces with single space
    text = text.replace(/\s{2,}/g, " ");
    // Replace spaces followed by periods with only the period.
    text = text.replace(/\s\./g, ".");
    // Remove first/last character if space
    text = text.replace(/^\s+|\s+$/g, "");
    return text;
};



},{}],196:[function(require,module,exports){
"use strict";
/** @module stringProcessing/unifyWhitespace */
/**
 * Replaces a non breaking space with a normal space
 * @param {string} text The string to replace the non breaking space in.
 * @returns {string} The text with unified spaces.
 */

var unifyNonBreakingSpace = function unifyNonBreakingSpace(text) {
    return text.replace(/&nbsp;/g, " ");
};
/**
 * Replaces all whitespaces with a normal space
 * @param {string} text The string to replace the non breaking space in.
 * @returns {string} The text with unified spaces.
 */
var unifyWhiteSpace = function unifyWhiteSpace(text) {
    return text.replace(/\s/g, " ");
};
/**
 * Converts all whitespace to spaces.
 *
 * @param {string} text The text to replace spaces.
 * @returns {string} The text with unified spaces.
 */
var unifyAllSpaces = function unifyAllSpaces(text) {
    text = unifyNonBreakingSpace(text);
    return unifyWhiteSpace(text);
};
module.exports = {
    unifyNonBreakingSpace: unifyNonBreakingSpace,
    unifyWhiteSpace: unifyWhiteSpace,
    unifyAllSpaces: unifyAllSpaces
};



},{}],197:[function(require,module,exports){
"use strict";

var forEach = require("lodash/forEach");
var has = require("lodash/has");
/**
 * Returns whether or not the given word is a function word.
 *
 * @param {string} word The word to check.
 * @param {Function} functionWords The function containing the lists of function words.
 * @returns {boolean} Whether or not the word is a function word.
 */
function isFunctionWord(word, functionWords) {
    return -1 !== functionWords.indexOf(word.toLocaleLowerCase());
}
/**
 * Represents a word combination in the context of relevant words.
 *
 * @constructor
 *
 * @param {string[]} words The list of words that this combination consists of.
 * @param {number} [occurrences] The number of occurrences, defaults to 0.
 * @param {Function} functionWords The function containing the lists of function words.
 */
function WordCombination(words, occurrences, functionWords) {
    this._words = words;
    this._length = words.length;
    this._occurrences = occurrences || 0;
    this._functionWords = functionWords;
}
WordCombination.lengthBonus = {
    2: 3,
    3: 7,
    4: 12,
    5: 18
};
/**
 * Returns the base relevance based on the length of this combination.
 *
 * @returns {number} The base relevance based on the length.
 */
WordCombination.prototype.getLengthBonus = function () {
    if (has(WordCombination.lengthBonus, this._length)) {
        return WordCombination.lengthBonus[this._length];
    }
    return 0;
};
/**
 * Returns the list with words.
 *
 * @returns {array} The list with words.
 */
WordCombination.prototype.getWords = function () {
    return this._words;
};
/**
 * Returns the word combination length.
 *
 * @returns {number} The word combination length.
 */
WordCombination.prototype.getLength = function () {
    return this._length;
};
/**
 * Returns the combination as it occurs in the text.
 *
 * @returns {string} The combination.
 */
WordCombination.prototype.getCombination = function () {
    return this._words.join(" ");
};
/**
 * Returns the amount of occurrences of this word combination.
 *
 * @returns {number} The amount of occurrences.
 */
WordCombination.prototype.getOccurrences = function () {
    return this._occurrences;
};
/**
 * Increments the occurrences.
 *
 * @returns {void}
 */
WordCombination.prototype.incrementOccurrences = function () {
    this._occurrences += 1;
};
/**
 * Returns the relevance of the length.
 *
 * @param {number} relevantWordPercentage The relevance of the words within the combination.
 * @returns {number} The relevance based on the length and the word relevance.
 */
WordCombination.prototype.getMultiplier = function (relevantWordPercentage) {
    var lengthBonus = this.getLengthBonus();
    // The relevance scales linearly from the relevance of one word to the maximum.
    return 1 + relevantWordPercentage * lengthBonus;
};
/**
 * Returns if the given word is a relevant word based on the given word relevance.
 *
 * @param {string} word The word to check if it is relevant.
 * @returns {boolean} Whether or not it is relevant.
 */
WordCombination.prototype.isRelevantWord = function (word) {
    return has(this._relevantWords, word);
};
/**
 * Returns the relevance of the words within this combination.
 *
 * @returns {number} The percentage of relevant words inside this combination.
 */
WordCombination.prototype.getRelevantWordPercentage = function () {
    var relevantWordCount = 0,
        wordRelevance = 1;
    if (this._length > 1) {
        forEach(this._words, function (word) {
            if (this.isRelevantWord(word)) {
                relevantWordCount += 1;
            }
        }.bind(this));
        wordRelevance = relevantWordCount / this._length;
    }
    return wordRelevance;
};
/**
 * Returns the relevance for this word combination.
 *
 * @returns {number} The relevance of this word combination.
 */
WordCombination.prototype.getRelevance = function () {
    if (this._words.length === 1 && isFunctionWord(this._words[0], this._functionWords)) {
        return 0;
    }
    var wordRelevance = this.getRelevantWordPercentage();
    if (wordRelevance === 0) {
        return 0;
    }
    return this.getMultiplier(wordRelevance) * this._occurrences;
};
/**
 * Sets the relevance of single words
 *
 * @param {Object} relevantWords A mapping from a word to a relevance.
 * @returns {void}
 */
WordCombination.prototype.setRelevantWords = function (relevantWords) {
    this._relevantWords = relevantWords;
};
/**
 * Returns the density of this combination within the text.
 *
 * @param {number} wordCount The word count of the text this combination was found in.
 * @returns {number} The density of this combination.
 */
WordCombination.prototype.getDensity = function (wordCount) {
    return this._occurrences / wordCount;
};
module.exports = WordCombination;



},{"lodash/forEach":135,"lodash/has":137}]},{},[6])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhc3NldHMvanMvc3JjL2hlbHBlcnMvcmVzdEFwaS5qcyIsImFzc2V0cy9qcy9zcmMva2V5d29yZFN1Z2dlc3Rpb25zL1Byb21pbmVudFdvcmRDYWNoZS5qcyIsImFzc2V0cy9qcy9zcmMva2V5d29yZFN1Z2dlc3Rpb25zL1Byb21pbmVudFdvcmRDYWNoZVBvcHVsYXRvci5qcyIsImFzc2V0cy9qcy9zcmMva2V5d29yZFN1Z2dlc3Rpb25zL1Byb21pbmVudFdvcmRTdG9yYWdlLmpzIiwiYXNzZXRzL2pzL3NyYy9rZXl3b3JkU3VnZ2VzdGlvbnMvc2l0ZVdpZGVDYWxjdWxhdGlvbi5qcyIsImFzc2V0cy9qcy9zcmMvc2l0ZS13aWRlLWFuYWx5c2lzLmpzIiwibm9kZV9tb2R1bGVzL2ExMXktc3BlYWsvYTExeS1zcGVhay5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fTGlzdENhY2hlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19TdGFjay5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUluY2x1ZGVzV2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VFYWNoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGaW5kSW5kZXguanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmxhdHRlbi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3IuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yT3duLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSGFzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhc0luLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2YuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSW50ZXJzZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hTi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXAuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5T2YuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTbGljZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VWYWx1ZXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RBcnJheUxpa2VPYmplY3QuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0RnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2NyZWF0ZUJhc2VGb3IuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxCeVRhZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TmF0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzRmxhdHRlbmFibGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlclJlc3QuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvQXJyYXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrU2V0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaWN0SW5kZXhPZi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL191bmVzY2FwZUh0bWxDaGFyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9jb25zdGFudC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2ZpbHRlci5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvZmxhdE1hcC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvZm9yRWFjaC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9oYXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2hhc0luLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2ludGVyc2VjdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZU9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNCdWZmZXIuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzRW1wdHkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzRXF1YWwuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc05hTi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNOdW1iZXIuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc1VuZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvbWFwLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9tZW1vaXplLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9uZWdhdGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL3Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL3Rha2UuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL3RvRmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC90b0ludGVnZXIuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvdW5lc2NhcGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL3ZhbHVlcy5qcyIsIm5vZGVfbW9kdWxlcy90b2tlbml6ZXIyL2NvcmUuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvaGVscGVycy9nZXRMYW5ndWFnZS5qcyIsIm5vZGVfbW9kdWxlcy95b2FzdHNlby9qcy9oZWxwZXJzL2h0bWwuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvcmVzZWFyY2hlcy9kdXRjaC9mdW5jdGlvbldvcmRzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3Jlc2VhcmNoZXMvZHV0Y2gvdHJhbnNpdGlvbldvcmRzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3Jlc2VhcmNoZXMvZW5nbGlzaC9mdW5jdGlvbldvcmRzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3Jlc2VhcmNoZXMvZW5nbGlzaC9wYXNzaXZldm9pY2UvYXV4aWxpYXJpZXMuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvcmVzZWFyY2hlcy9lbmdsaXNoL3RyYW5zaXRpb25Xb3Jkcy5qcyIsIm5vZGVfbW9kdWxlcy95b2FzdHNlby9qcy9yZXNlYXJjaGVzL2ZyZW5jaC9mdW5jdGlvbldvcmRzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3Jlc2VhcmNoZXMvZnJlbmNoL3RyYW5zaXRpb25Xb3Jkcy5qcyIsIm5vZGVfbW9kdWxlcy95b2FzdHNlby9qcy9yZXNlYXJjaGVzL2dlcm1hbi9mdW5jdGlvbldvcmRzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3Jlc2VhcmNoZXMvZ2VybWFuL3Bhc3NpdmV2b2ljZS9hdXhpbGlhcmllcy5qcyIsIm5vZGVfbW9kdWxlcy95b2FzdHNlby9qcy9yZXNlYXJjaGVzL2dlcm1hbi90cmFuc2l0aW9uV29yZHMuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvcmVzZWFyY2hlcy9pdGFsaWFuL2Z1bmN0aW9uV29yZHMuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvcmVzZWFyY2hlcy9pdGFsaWFuL3RyYW5zaXRpb25Xb3Jkcy5qcyIsIm5vZGVfbW9kdWxlcy95b2FzdHNlby9qcy9yZXNlYXJjaGVzL3NwYW5pc2gvZnVuY3Rpb25Xb3Jkcy5qcyIsIm5vZGVfbW9kdWxlcy95b2FzdHNlby9qcy9yZXNlYXJjaGVzL3NwYW5pc2gvdHJhbnNpdGlvbldvcmRzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0U2VudGVuY2VzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3N0cmluZ1Byb2Nlc3NpbmcvZ2V0V29yZHMuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvc3RyaW5nUHJvY2Vzc2luZy9xdW90ZXMuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvc3RyaW5nUHJvY2Vzc2luZy9yZWxldmFudFdvcmRzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3N0cmluZ1Byb2Nlc3NpbmcvcmVtb3ZlUHVuY3R1YXRpb24uanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvc3RyaW5nUHJvY2Vzc2luZy9zdHJpcEhUTUxUYWdzLmpzIiwibm9kZV9tb2R1bGVzL3lvYXN0c2VvL2pzL3N0cmluZ1Byb2Nlc3Npbmcvc3RyaXBTcGFjZXMuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvc3RyaW5nUHJvY2Vzc2luZy91bmlmeVdoaXRlc3BhY2UuanMiLCJub2RlX21vZHVsZXMveW9hc3RzZW8vanMvdmFsdWVzL1dvcmRDb21iaW5hdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7QUNBQTs7O0lBR00sTzs7QUFFTDs7Ozs7O0FBTUEsd0JBQWtDO0FBQUEsTUFBbkIsT0FBbUIsUUFBbkIsT0FBbUI7QUFBQSxNQUFWLEtBQVUsUUFBVixL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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDekZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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WUFBMUIsR0FBeUMsWUFBWTtBQUNqRCxRQUFJLEtBQUssTUFBTCxDQUFZLE1BQVosS0FBdUIsQ0FBdkIsSUFBNEIsZUFBZSxLQUFLLE1BQUwsQ0FBWSxDQUFaLENBQWYsRUFBK0IsS0FBSyxjQUFwQyxDQUFoQyxFQUFxRjtBQUNqRixlQUFPLENBQVA7QUFDSDtBQUNELFFBQUksZ0JBQWdCLEtBQUsseUJBQUwsRUFBcEI7QUFDQSxRQUFJLGtCQUFrQixDQUF0QixFQUF5QjtBQUNyQixlQUFPLENBQVA7QUFDSDtBQUNELFdBQU8sS0FBSyxhQUFMLENBQW1CLGFBQW5CLElBQW9DLEtBQUssWUFBaEQ7QUFDSCxDQVREO0FBVUE7Ozs7OztBQU1BLGdCQUFnQixTQUFoQixDQUEwQixnQkFBMUIsR0FBNkMsVUFBVSxhQUFWLEVBQXlCO0FBQ2xFLFNBQUssY0FBTCxHQUFzQixhQUF0QjtBQUNILENBRkQ7QUFHQTs7Ozs7O0FBTUEsZ0JBQWdCLFNBQWhCLENBQTBCLFVBQTFCLEdBQXVDLFVBQVUsU0FBVixFQUFxQjtBQUN4RCxXQUFPLEtBQUssWUFBTCxHQUFvQixTQUEzQjtBQUNILENBRkQ7QUFHQSxPQUFPLE9BQVAsR0FBaUIsZUFBakI7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qKlxuICogQSBoZWxwZXIgY2xhc3MgdG8gZG8gQUpBWCByZXF1ZXN0cyB0byB0aGUgUkVTVCBBUEkuXG4gKi9cbmNsYXNzIFJlc3RBcGkge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RzIGEgUmVzdEFwaSByZXF1ZXN0IGhlbHBlciBvYmplY3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSByb290VXJsIFRoZSByb290IFVSTCBvZiB0aGUgUkVTVCBBUEkuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBub25jZSBUaGUgbm9uY2UgdG8gYXV0aGVudGljYXRlIHRvIHRoZSBSRVNUIEFQSSB1c2luZyBjb29raWVzLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHsgcm9vdFVybCwgbm9uY2UgfSApIHtcblx0XHR0aGlzLl9yb290VXJsID0gcm9vdFVybDtcblx0XHR0aGlzLl9ub25jZSA9IG5vbmNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIERvZXMgYSBHRVQgcmVxdWVzdCB0byB0aGUgUkVTVCBBUElcblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gZG8gdGhlIHJlcXVlc3QgdG8uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgVGhlIHBhcmFtZXRlcnMgdG8gdXNlIGZvciBqUXVlcnkuXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXNvbHZlcyB3aGVuIHRoZSBBSkFYIHJlcXVlc3QgaXMgY29tcGxldGUuXG5cdCAqL1xuXHRnZXQoIHBhdGgsIHBhcmFtcyApIHtcblx0XHRwYXJhbXMgPSBPYmplY3QuYXNzaWduKCBwYXJhbXMsIHtcblx0XHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0XHR1cmw6IHRoaXMuX3Jvb3RVcmwgKyBwYXRoLFxuXHRcdH0gKTtcblxuXHRcdHJldHVybiB0aGlzLnJlcXVlc3QoIHBhcmFtcyApO1xuXHR9XG5cblx0LyoqXG5cdCAqIERvZXMgYSBQT1NUIHJlcXVlc3QgdG8gdGhlIFJFU1QgQVBJXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGRvIHRoZSByZXF1ZXN0IHRvLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIFRoZSBwYXJhbWV0ZXJzIHRvIHVzZSBmb3IgalF1ZXJ5LlxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmVzb2x2ZXMgd2hlbiB0aGUgQUpBWCByZXF1ZXN0IGlzIGNvbXBsZXRlLlxuXHQgKi9cblx0cG9zdCggcGF0aCwgcGFyYW1zICkge1xuXHRcdHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oIHBhcmFtcywge1xuXHRcdFx0dHlwZTogXCJQT1NUXCIsXG5cdFx0XHR1cmw6IHRoaXMuX3Jvb3RVcmwgKyBwYXRoLFxuXHRcdH0gKTtcblxuXHRcdHJldHVybiB0aGlzLnJlcXVlc3QoIHBhcmFtcyApO1xuXHR9XG5cblx0LyoqXG5cdCAqIERvIGEgcmVxdWVzdCB0byB0aGUgUkVTVCBBUElcblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBUaGUgcGFyYW1zIHRvIHVzZSBmb3IgalF1ZXJ5LlxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmVzb2x2ZXMgd2hlbiB0aGUgQUpBWCByZXF1ZXN0IGlzIGNvbXBsZXRlLlxuXHQgKi9cblx0cmVxdWVzdCggcGFyYW1zICkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XG5cdFx0XHRwYXJhbXMgPSBPYmplY3QuYXNzaWduKCBwYXJhbXMsIHtcblx0XHRcdFx0YmVmb3JlU2VuZDogKCB4aHIgKSA9PiB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIFwiWC1XUC1Ob25jZVwiLCB0aGlzLl9ub25jZSApO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdWNjZXNzOiByZXNvbHZlLFxuXHRcdFx0XHRlcnJvcjogcmVqZWN0LFxuXHRcdFx0fSApO1xuXG5cdFx0XHRqUXVlcnkuYWpheCggcGFyYW1zICk7XG5cdFx0fSApO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlc3RBcGk7XG5cblxuIiwiLyoqXG4gKiBBIGtleSB2YWx1ZSBzdG9yZSBmb3IgcHJvbWluZW50IHdvcmRzIHRvIHRoZWlyIHJlc3BlY3RpdmUgSURzLlxuICovXG5jbGFzcyBQcm9taW5lbnRXb3JkQ2FjaGUge1xuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBpbml0aWFsIGNhY2hlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5fY2FjaGUgPSB7fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBJRCBnaXZlbiB0aGUgbmFtZSwgb3IgMCBpZiBub3QgZm91bmQgaW4gdGhlIGNhY2hlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvbWluZW50IHdvcmQuXG5cdCAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBJRCBvZiB0aGUgcHJvbWluZW50IHdvcmQuXG5cdCAqL1xuXHRnZXRJRCggbmFtZSApIHtcblx0XHRpZiAoIHRoaXMuX2NhY2hlLmhhc093blByb3BlcnR5KCBuYW1lICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fY2FjaGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBJRCBmb3IgYSBnaXZlbiBuYW1lLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvbWluZW50IHdvcmQuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBpZCBUaGUgSUQgb2YgdGhlIHByb21pbmVudCB3b3JkLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdHNldElEKCBuYW1lLCBpZCApIHtcblx0XHR0aGlzLl9jYWNoZVsgbmFtZSBdID0gaWQ7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvbWluZW50V29yZENhY2hlO1xuIiwiaW1wb3J0IHVuZXNjYXBlIGZyb20gXCJsb2Rhc2gvdW5lc2NhcGVcIjtcblxuLyoqXG4gKiBQb3B1bGF0ZXMgYSBwcm9taW5lbnQgd29yZCBjYWNoZSB3aXRoIGRhdGEgZnJvbSB0aGUgc2VydmVyLlxuICovXG5jbGFzcyBQcm9taW5lbnRXb3JkQ2FjaGVQb3B1bGF0b3Ige1xuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBpbnN0YW5jZSBhdHRyaWJ1dGVzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1Byb21pbmVudFdvcmRDYWNoZX0gY2FjaGUgVGhlIGNhY2hlIHRvIHBvcHVsYXRlLlxuXHQgKiBAcGFyYW0ge1Jlc3RBcGl9IHJlc3RBcGkgVGhlIFJFU1QgQVBJIG9iamVjdCB0byBkbyByZXF1ZXN0cyB3aXRoLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoIHsgY2FjaGUsIHJlc3RBcGkgfSApIHtcblx0XHR0aGlzLl9jYWNoZSA9IGNhY2hlO1xuXHRcdHRoaXMuX3Jlc3RBcGkgPSByZXN0QXBpO1xuXHRcdHRoaXMuX2N1cnJlbnRQYWdlID0gMTtcblxuXHRcdHRoaXMucHJvY2Vzc1Byb21pbmVudFdvcmQgPSB0aGlzLnByb2Nlc3NQcm9taW5lbnRXb3JkLmJpbmQoIHRoaXMgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQb3B1bGF0ZXMgdGhlIHByb21pbmVudCB3b3JkIGNhY2hlIHdpdGggZGF0YSBmcm9tIHRoZSBzZXJ2ZXIuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXNvbHZlcyB3aGVuIHRoZSBjYWNoZSBoYXMgYmVlbiBwb3B1bGF0ZWQuXG5cdCAqL1xuXHRwb3B1bGF0ZSgpIHtcblx0XHRsZXQgZGF0YSA9IHtcblx0XHRcdHBlcl9wYWdlOiAxMDAsXG5cdFx0XHRwYWdlOiB0aGlzLl9jdXJyZW50UGFnZSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuX3Jlc3RBcGkuZ2V0KCBcIndwL3YyL3lzdF9wcm9taW5lbnRfd29yZHNcIiwgeyBkYXRhIH0gKS50aGVuKCAoIHJlc3VsdCApID0+IHtcblx0XHRcdGlmICggcmVzdWx0Lmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQuZm9yRWFjaCggdGhpcy5wcm9jZXNzUHJvbWluZW50V29yZCApO1xuXG5cdFx0XHR0aGlzLl9jdXJyZW50UGFnZSArPSAxO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5wb3B1bGF0ZSgpO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTYXZlcyBhIHByb21pbmVudCB3b3JkIHRvIHRoZSBjYWNoZS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHByb21pbmVudFdvcmQgVGhlIHByb21pbmVudCB3b3JkIHRvIHNhdmUgdG8gdGhlIGNhY2hlLlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdHByb2Nlc3NQcm9taW5lbnRXb3JkKCBwcm9taW5lbnRXb3JkICkge1xuXHRcdGxldCBuYW1lID0gdW5lc2NhcGUoIHByb21pbmVudFdvcmQubmFtZSApO1xuXG5cdFx0dGhpcy5fY2FjaGUuc2V0SUQoIG5hbWUsIHByb21pbmVudFdvcmQuaWQgKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9taW5lbnRXb3JkQ2FjaGVQb3B1bGF0b3I7XG4iLCJpbXBvcnQgUHJvbWluZW50V29yZENhY2hlIGZyb20gXCIuL1Byb21pbmVudFdvcmRDYWNoZVwiO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tIFwiZXZlbnRzXCI7XG5pbXBvcnQgaXNFcXVhbCBmcm9tIFwibG9kYXNoL2lzRXF1YWxcIjtcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSByZXRyaWV2YWwgYW5kIHN0b3JhZ2Ugb2YgZm9jdXMga2V5d29yZCBzdWdnZXN0aW9uc1xuICovXG5jbGFzcyBQcm9taW5lbnRXb3JkU3RvcmFnZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcm9vdFVybCAgICAgICAgICAgICBUaGUgcm9vdCBVUkwgb2YgdGhlIFdQIFJFU1QgQVBJLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbm9uY2UgICAgICAgICAgICAgICBUaGUgV29yZFByZXNzIG5vbmNlIHJlcXVpcmVkIHRvIHNhdmUgYW55dGhpbmcgdG8gdGhlIFJFU1QgQVBJIGVuZHBvaW50cy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHBvc3RJRCAgICAgICAgICAgICAgVGhlIHBvc3RJRCBvZiB0aGUgcG9zdCB0byBzYXZlIHByb21pbmVudCB3b3JkcyBmb3IuXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBwcm9taW5lbnRXb3Jkc0xpbWl0IFRoZSBsaW1pdCBvZiBwcm9taW5lbnQgd29yZHMuXG5cdCAqIEBwYXJhbSB7UHJvbWluZW50V29yZENhY2hlfSBjYWNoZSAgIFRoZSBjYWNoZSB0byB1c2UgZm9yIHRoZSBwcm9taW5lbnQgd29yZCB0ZXJtIElEcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB7IHBvc3RJRCwgcm9vdFVybCwgbm9uY2UsIHByb21pbmVudFdvcmRzTGltaXQgPSAyMCwgY2FjaGUgPSBudWxsIH0gKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX3Jvb3RVcmwgPSByb290VXJsO1xuXHRcdHRoaXMuX25vbmNlID0gbm9uY2U7XG5cdFx0dGhpcy5fcG9zdElEID0gcG9zdElEO1xuXHRcdHRoaXMuX3NhdmluZ1Byb21pbmVudFdvcmRzID0gZmFsc2U7XG5cdFx0dGhpcy5fcHJldmlvdXNQcm9taW5lbnRXb3JkcyA9IG51bGw7XG5cblx0XHR0aGlzLl9wb3N0U2F2ZUVuZHBvaW50ID0gdGhpcy5fcm9vdFVybCArIFwieW9hc3QvdjEvcHJvbWluZW50X3dvcmRzX2xpbmsvXCIgKyB0aGlzLl9wb3N0SUQ7XG5cblx0XHRpZiAoIGNhY2hlID09PSBudWxsICkge1xuXHRcdFx0Y2FjaGUgPSBuZXcgUHJvbWluZW50V29yZENhY2hlKCk7XG5cdFx0fVxuXHRcdHRoaXMuX2NhY2hlID0gY2FjaGU7XG5cblx0XHR0aGlzLnNldFByb21pbmVudFdvcmRzTGltaXQoIHByb21pbmVudFdvcmRzTGltaXQgKTtcblxuXHRcdHRoaXMucmV0cmlldmVQcm9taW5lbnRXb3JkSWQgPSB0aGlzLnJldHJpZXZlUHJvbWluZW50V29yZElkLmJpbmQoIHRoaXMgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBwcm9taW5lbnQgd29yZHMgbGltaXQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbGltaXQgdG8gc2V0LlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdHNldFByb21pbmVudFdvcmRzTGltaXQoIGxpbWl0ICkge1xuXHRcdHRoaXMuX3Byb21pbmVudFdvcmRzTGltaXQgPSBsaW1pdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTYXZlcyBwcm9taW5lbnQgd29yZHMgdG8gdGhlIGRhdGFiYXNlIHVzaW5nIEFKQVhcblx0ICpcblx0ICogQHBhcmFtIHtXb3JkQ29tYmluYXRpb25bXX0gcHJvbWluZW50V29yZHMgVGhlIHByb21pbmVudCB3b3JkcyB0byBzYXZlLlxuXHQgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmVzb2x2ZXMgd2hlbiB0aGUgcHJvbWluZW50IHdvcmRzIGFyZSBzYXZlZC5cblx0ICovXG5cdHNhdmVQcm9taW5lbnRXb3JkcyggcHJvbWluZW50V29yZHMgKSB7XG5cdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNhdmUgc2VxdWVuY2UgaW4gcHJvZ3Jlc3MsIGRvbid0IGRvIGl0IGFnYWluLlxuXHRcdGlmICggdGhpcy5fc2F2aW5nUHJvbWluZW50V29yZHMgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX3NhdmluZ1Byb21pbmVudFdvcmRzID0gdHJ1ZTtcblxuXHRcdGxldCBwcm9taW5lbnRXb3Jkc1RvU2F2ZSA9IHByb21pbmVudFdvcmRzLnNsaWNlKCAwLCB0aGlzLl9wcm9taW5lbnRXb3Jkc0xpbWl0ICk7XG5cblx0XHQvLyBSZXRyaWV2ZSBJRHMgb2YgYWxsIHByb21pbmVudCB3b3JkIHRlcm1zLCBidXQgZG8gaXQgaW4gc2VxdWVuY2UgdG8gcHJldmVudCBvdmVybG9hZGluZyBzZXJ2ZXJzLlxuXHRcdGxldCBwcm9taW5lbnRXb3JkSWRzID0gcHJvbWluZW50V29yZHNUb1NhdmUucmVkdWNlKCAoIHByZXZpb3VzUHJvbWlzZSwgcHJvbWluZW50V29yZCApID0+IHtcblx0XHRcdHJldHVybiBwcmV2aW91c1Byb21pc2UudGhlbiggKCBpZHMgKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnJldHJpZXZlUHJvbWluZW50V29yZElkKCBwcm9taW5lbnRXb3JkICkudGhlbiggKCBuZXdJZCApID0+IHtcblx0XHRcdFx0XHRpZHMucHVzaCggbmV3SWQgKTtcblxuXHRcdFx0XHRcdHJldHVybiBpZHM7XG5cblx0XHRcdFx0Ly8gT24gZXJyb3IsIGp1c3QgY29udGludWUgd2l0aCB0aGUgb3RoZXIgdGVybXMuXG5cdFx0XHRcdH0sICgpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gaWRzO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgUHJvbWlzZS5yZXNvbHZlKCBbXSApICk7XG5cblx0XHRyZXR1cm4gcHJvbWluZW50V29yZElkcy50aGVuKCAoIHByb21pbmVudFdvcmRzICkgPT4ge1xuXHRcdFx0aWYgKCBpc0VxdWFsKCBwcm9taW5lbnRXb3JkcywgdGhpcy5fcHJldmlvdXNQcm9taW5lbnRXb3JkcyApICkge1xuXHRcdFx0XHR0aGlzLl9zYXZpbmdQcm9taW5lbnRXb3JkcyA9IGZhbHNlO1xuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9wcmV2aW91c1Byb21pbmVudFdvcmRzID0gcHJvbWluZW50V29yZHM7XG5cblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XG5cdFx0XHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHRcdFx0dHlwZTogXCJQT1NUXCIsXG5cdFx0XHRcdFx0dXJsOiB0aGlzLl9wb3N0U2F2ZUVuZHBvaW50LFxuXHRcdFx0XHRcdGJlZm9yZVNlbmQ6ICggeGhyICkgPT4ge1xuXHRcdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIFwiWC1XUC1Ob25jZVwiLCB0aGlzLl9ub25jZSApO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdFx0XHRcdFx0eXN0X3Byb21pbmVudF93b3JkczogcHJvbWluZW50V29yZHMsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRkYXRhVHlwZTogXCJqc29uXCIsXG5cdFx0XHRcdFx0c3VjY2VzczogcmVzb2x2ZSxcblx0XHRcdFx0XHRlcnJvcjogcmVqZWN0LFxuXHRcdFx0XHR9ICkuYWx3YXlzKCAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5lbWl0KCBcInNhdmVkUHJvbWluZW50V29yZHNcIiwgcHJvbWluZW50V29yZHMgKTtcblxuXHRcdFx0XHRcdHRoaXMuX3NhdmluZ1Byb21pbmVudFdvcmRzID0gZmFsc2U7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICkuY2F0Y2goICggZSApID0+IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXHRcdFx0d2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5sb2coIGUgKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0cmlldmVzIHRoZSBJRCBvZiBhIHByb21pc2Vcblx0ICpcblx0ICogQHBhcmFtIHtXb3JkQ29tYmluYXRpb259IHByb21pbmVudFdvcmQgVGhlIHByb21pbmVudCB3b3JkIHRvIHJldHJpZXZlIHRoZSBJRCBmb3IuXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXNvbHZlcyB0byB0aGUgSUQgb2YgdGhlIHByb21pbmVudCB3b3JkIHRlcm0uXG5cdCAqL1xuXHRyZXRyaWV2ZVByb21pbmVudFdvcmRJZCggcHJvbWluZW50V29yZCApIHtcblx0XHRsZXQgY2FjaGVkSWQgPSB0aGlzLl9jYWNoZS5nZXRJRCggcHJvbWluZW50V29yZC5nZXRDb21iaW5hdGlvbigpICk7XG5cdFx0aWYgKCAwICE9PSBjYWNoZWRJZCApIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoIGNhY2hlZElkICk7XG5cdFx0fVxuXG5cdFx0bGV0IGZvdW5kUHJvbWluZW50V29yZCA9IG5ldyBQcm9taXNlKCAoIHJlc29sdmUsIHJlamVjdCApID0+IHtcblx0XHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0XHRcdHVybDogdGhpcy5fcm9vdFVybCArIFwieW9hc3QvdjEvcHJvbWluZW50X3dvcmRzXCIsXG5cdFx0XHRcdGJlZm9yZVNlbmQ6ICggeGhyICkgPT4ge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBcIlgtV1AtTm9uY2VcIiwgdGhpcy5fbm9uY2UgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdHdvcmQ6IHByb21pbmVudFdvcmQuZ2V0Q29tYmluYXRpb24oKSxcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGF0YVR5cGU6IFwianNvblwiLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZSggcmVzcG9uc2UgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdFx0XHRyZWplY3QoIHJlc3BvbnNlICk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXG5cdFx0bGV0IGNyZWF0ZWRQcm9taW5lbnRXb3JkID0gZm91bmRQcm9taW5lbnRXb3JkLnRoZW4oICggcHJvbWluZW50V29yZFRlcm0gKSA9PiB7XG5cdFx0XHRpZiAoIHByb21pbmVudFdvcmRUZXJtID09PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jcmVhdGVQcm9taW5lbnRXb3JkVGVybSggcHJvbWluZW50V29yZCApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcHJvbWluZW50V29yZFRlcm07XG5cdFx0fSApO1xuXG5cdFx0cmV0dXJuIGNyZWF0ZWRQcm9taW5lbnRXb3JkLnRoZW4oICggcHJvbWluZW50V29yZFRlcm0gKSA9PiB7XG5cdFx0XHR0aGlzLl9jYWNoZS5zZXRJRCggcHJvbWluZW50V29yZC5nZXRDb21iaW5hdGlvbigpLCBwcm9taW5lbnRXb3JkVGVybS5pZCApO1xuXG5cdFx0XHRyZXR1cm4gcHJvbWluZW50V29yZFRlcm0uaWQ7XG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB0ZXJtIGZvciBhIHByb21pbmVudCB3b3JkXG5cdCAqXG5cdCAqIEBwYXJhbSB7V29yZENvbWJpbmF0aW9ufSBwcm9taW5lbnRXb3JkIFRoZSBwcm9taW5lbnQgd29yZCB0byBjcmVhdGUgYSB0ZXJtIGZvci5cblx0ICogQHJldHVybnMge1Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYSB0ZXJtIGhhcyBiZWVuIGNyZWF0ZWQgYW5kIHJlc29sdmVzIHdpdGggdGhlIElEIG9mIHRoZSBuZXdseSBjcmVhdGVkIHRlcm0uXG5cdCAqL1xuXHRjcmVhdGVQcm9taW5lbnRXb3JkVGVybSggcHJvbWluZW50V29yZCApIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuXHRcdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdFx0dHlwZTogXCJQT1NUXCIsXG5cdFx0XHRcdHVybDogdGhpcy5fcm9vdFVybCArIFwid3AvdjIveXN0X3Byb21pbmVudF93b3Jkc1wiLFxuXHRcdFx0XHRiZWZvcmVTZW5kOiAoIHhociApID0+IHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggXCJYLVdQLU5vbmNlXCIsIHRoaXMuX25vbmNlICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRuYW1lOiBwcm9taW5lbnRXb3JkLmdldENvbWJpbmF0aW9uKCksXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGFUeXBlOiBcImpzb25cIixcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0XHRcdHJlc29sdmUoIHJlc3BvbnNlICk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRcdFx0cmVqZWN0KCByZXNwb25zZSApO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9taW5lbnRXb3JkU3RvcmFnZTtcbiIsIi8qIGdsb2JhbCB5b2FzdFNpdGVXaWRlQW5hbHlzaXNEYXRhICovXG5cbmltcG9ydCB7IGdldFJlbGV2YW50V29yZHMgfSBmcm9tIFwieW9hc3RzZW8vanMvc3RyaW5nUHJvY2Vzc2luZy9yZWxldmFudFdvcmRzXCI7XG5pbXBvcnQgUHJvbWluZW50V29yZFN0b3JhZ2UgZnJvbSBcIi4vUHJvbWluZW50V29yZFN0b3JhZ2VcIjtcbmltcG9ydCBQcm9taW5lbnRXb3JkQ2FjaGUgZnJvbSBcIi4vUHJvbWluZW50V29yZENhY2hlXCI7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gXCJldmVudHNcIjtcblxubGV0IHBvc3RTdGF0dXNlcyA9IFsgXCJmdXR1cmVcIiwgXCJkcmFmdFwiLCBcInBlbmRpbmdcIiwgXCJwcml2YXRlXCIsIFwicHVibGlzaFwiIF0uam9pbiggXCIsXCIgKTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHByb21pbmVudCB3b3JkcyBmb3IgYWxsIHBvc3RzIG9uIHRoZSBzaXRlLlxuICovXG5jbGFzcyBTaXRlV2lkZUNhbGN1bGF0aW9uIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIGNhbGN1bGF0aW9uIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIHtib29sZWFufSByZWNhbGN1bGF0ZUFsbCBXaGV0aGVyIHRvIGNhbGN1bGF0ZSBhbGwgcG9zdHMgb3Igb25seSBwb3N0cyB3aXRob3V0IHByb21pbmVudCB3b3Jkcy5cblx0ICogQHBhcmFtIHtudW1iZXJ9IHRvdGFsUG9zdHMgVGhlIGFtb3VudCBvZiBwb3N0cyB0byBjYWxjdWxhdGUgcHJvbWluZW50IHdvcmRzIGZvci5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHJvb3RVcmwgVGhlIHJvb3QgUkVTVCBBUEkgVVJMLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbm9uY2UgVGhlIG5vbmNlIHRvIHVzZSB3aGVuIHVzaW5nIHRoZSBSRVNUIEFQSS5cblx0ICogQHBhcmFtIHtudW1iZXJbXX0gYWxsUHJvbWluZW50V29yZElkcyBBIGxpc3Qgb2YgYWxsIHByb21pbmVudCB3b3JkIElEcyBwcmVzZW50IG9uIHRoZSBzaXRlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGlzdEVuZHBvaW50IFRoZSBlbmRwb2ludCB0byBjYWxsIHdoZW4gcmV0cmlldmluZyBwb3N0cyBvciBwYWdlcy5cblx0ICogQHBhcmFtIHtQcm9taW5lbnRXb3JkQ2FjaGV9IHByb21pbmVudFdvcmRDYWNoZSBUaGUgY2FjaGUgZm9yIHByb21pbmVudCB3b3Jkcy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKCB7IHRvdGFsUG9zdHMsIHJvb3RVcmwsIG5vbmNlLCBhbGxQcm9taW5lbnRXb3JkSWRzLCBsaXN0RW5kcG9pbnQsIHByb21pbmVudFdvcmRDYWNoZSA9IG51bGwsIHJlY2FsY3VsYXRlQWxsID0gZmFsc2UgfSApIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5fcGVyUGFnZSA9IDEwO1xuXHRcdHRoaXMuX3RvdGFsUG9zdHMgPSB0b3RhbFBvc3RzO1xuXHRcdHRoaXMuX3RvdGFsUGFnZXMgPSBNYXRoLmNlaWwoIHRvdGFsUG9zdHMgLyB0aGlzLl9wZXJQYWdlICk7XG5cdFx0dGhpcy5fcHJvY2Vzc2VkUG9zdHMgPSAwO1xuXHRcdHRoaXMuX2N1cnJlbnRQYWdlID0gMTtcblx0XHR0aGlzLl9yb290VXJsID0gcm9vdFVybDtcblx0XHR0aGlzLl9ub25jZSA9IG5vbmNlO1xuXHRcdHRoaXMuX3JlY2FsY3VsYXRlQWxsID0gcmVjYWxjdWxhdGVBbGw7XG5cdFx0dGhpcy5fYWxsUHJvbWluZW50V29yZElkcyA9IGFsbFByb21pbmVudFdvcmRJZHM7XG5cdFx0dGhpcy5fbGlzdEVuZHBvaW50ID0gbGlzdEVuZHBvaW50O1xuXG5cdFx0aWYgKCBwcm9taW5lbnRXb3JkQ2FjaGUgPT09IG51bGwgKSB7XG5cdFx0XHRwcm9taW5lbnRXb3JkQ2FjaGUgPSBuZXcgUHJvbWluZW50V29yZENhY2hlKCk7XG5cdFx0fVxuXHRcdHRoaXMuX3Byb21pbmVudFdvcmRDYWNoZSA9IHByb21pbmVudFdvcmRDYWNoZTtcblxuXHRcdHRoaXMucHJvY2Vzc1Bvc3QgPSB0aGlzLnByb2Nlc3NQb3N0LmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLmNvbnRpbnVlUHJvY2Vzc2luZyA9IHRoaXMuY29udGludWVQcm9jZXNzaW5nLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLnByb2Nlc3NSZXNwb25zZSA9IHRoaXMucHJvY2Vzc1Jlc3BvbnNlLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLmluY3JlbWVudFByb2Nlc3NlZFBvc3RzID0gdGhpcy5pbmNyZW1lbnRQcm9jZXNzZWRQb3N0cy5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5jYWxjdWxhdGUgPSB0aGlzLmNhbGN1bGF0ZS5iaW5kKCB0aGlzICk7XG5cdH1cblxuXHQvKipcblx0ICogU3RhcnRzIGNhbGN1bGF0aW5nIHByb21pbmVudCB3b3Jkcy5cblx0ICpcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRzdGFydCgpIHtcblx0XHR0aGlzLmNhbGN1bGF0ZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERvZXMgYSBjYWxjdWxhdGlvbiBzdGVwIGZvciB0aGUgY3VycmVudCBwYWdlLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGNhbGN1bGF0ZSgpIHtcblx0XHRsZXQgZGF0YSA9IHtcblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuXHRcdFx0cGVyX3BhZ2U6IHRoaXMuX3BlclBhZ2UsXG5cdFx0XHRzdGF0dXM6IHBvc3RTdGF0dXNlcyxcblx0XHRcdHlzdF9wcm9taW5lbnRfd29yZHNfaXNfdW5pbmRleGVkOiB0cnVlLFxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cblx0XHR9O1xuXG5cdFx0aWYgKCAhIHRoaXMuX3JlY2FsY3VsYXRlQWxsICkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuXHRcdFx0ZGF0YS55c3RfcHJvbWluZW50X3dvcmRzID0gdGhpcy5fYWxsUHJvbWluZW50V29yZElkcztcblx0XHR9XG5cblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dHlwZTogXCJHRVRcIixcblx0XHRcdHVybDogdGhpcy5fbGlzdEVuZHBvaW50LFxuXHRcdFx0YmVmb3JlU2VuZDogKCB4aHIgKSA9PiB7XG5cdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBcIlgtV1AtTm9uY2VcIiwgdGhpcy5fbm9uY2UgKTtcblx0XHRcdH0sXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0ZGF0YVR5cGU6IFwianNvblwiLFxuXHRcdFx0c3VjY2VzczogdGhpcy5wcm9jZXNzUmVzcG9uc2UsXG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIFByb2Nlc3MgcmVzcG9uc2UgZnJvbSB0aGUgaW5kZXggcmVxdWVzdCBmb3IgcG9zdHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHJlc3BvbnNlIFRoZSBsaXN0IG9mIGZvdW5kIHBvc3RzIGZyb20gdGhlIHNlcnZlci5cblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRwcm9jZXNzUmVzcG9uc2UoIHJlc3BvbnNlICkge1xuXHRcdGxldCBwcm9jZXNzUHJvbWlzZXMgPSByZXNwb25zZS5yZWR1Y2UoICggcHJldmlvdXNQcm9taXNlLCBwb3N0ICkgPT4ge1xuXHRcdFx0cmV0dXJuIHByZXZpb3VzUHJvbWlzZS50aGVuKCAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnByb2Nlc3NQb3N0KCBwb3N0ICk7XG5cdFx0XHR9ICkuY2F0Y2goICggZXJyICkgPT4ge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0XHRcdFx0d2luZG93LmNvbnNvbGUgJiYgY29uc29sZS5sb2coIGVyciApO1xuXG5cdFx0XHRcdHJldHVybiB0aGlzLnNhdmVQcm9taW5lbnRXb3JkcyggcG9zdCwgW10gKTtcblx0XHRcdH0gKTtcblx0XHR9LCBQcm9taXNlLnJlc29sdmUoKSApO1xuXG5cdFx0cHJvY2Vzc1Byb21pc2VzLnRoZW4oIHRoaXMuY29udGludWVQcm9jZXNzaW5nICkuY2F0Y2goICggZXJyICkgPT4ge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cdFx0XHR3aW5kb3cuY29uc29sZSAmJiBjb25zb2xlLmxvZyggZXJyICk7XG5cblx0XHRcdHRoaXMuY29udGludWVQcm9jZXNzaW5nKCk7XG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnRpbnVlcyBwcm9jZXNzaW5nIGJ5IGdvaW5nIHRvIHRoZSBuZXh0IHBhZ2UgaWYgdGhlcmUgaXMgb25lLlxuXHQgKlxuXHQgKiBAcmV0dXJucyB7dm9pZH1cblx0ICovXG5cdGNvbnRpbnVlUHJvY2Vzc2luZygpIHtcblx0XHR0aGlzLmVtaXQoIFwicHJvY2Vzc2VkUGFnZVwiLCB0aGlzLl9jdXJyZW50UGFnZSwgdGhpcy5fdG90YWxQYWdlcyApO1xuXG5cdFx0aWYgKCB0aGlzLl9jdXJyZW50UGFnZSA8IHRoaXMuX3RvdGFsUGFnZXMgKSB7XG5cdFx0XHR0aGlzLl9jdXJyZW50UGFnZSArPSAxO1xuXHRcdFx0dGhpcy5jYWxjdWxhdGUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5lbWl0KCBcImNvbXBsZXRlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUHJvY2Vzc2VzIGEgcG9zdCByZXR1cm5lZCBmcm9tIHRoZSBSRVNUIEFQSS5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IHBvc3QgQSBwb3N0IG9iamVjdCB3aXRoIHJlbmRlcmVkIGNvbnRlbnQuXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXNvbHZlcyB3aGVuIHRoZSBwcm9taW5lbnQgd29yZHMgYXJlIHNhdmVkIGZvciB0aGUgcG9zdC5cblx0ICovXG5cdHByb2Nlc3NQb3N0KCBwb3N0ICkge1xuXHRcdGxldCBjb250ZW50ID0gcG9zdC5jb250ZW50LnJlbmRlcmVkO1xuXG5cdFx0bGV0IHByb21pbmVudFdvcmRzID0gZ2V0UmVsZXZhbnRXb3JkcyggY29udGVudCwgeW9hc3RTaXRlV2lkZUFuYWx5c2lzRGF0YS5kYXRhLmwxMG4uY29udGVudExvY2FsZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2F2ZVByb21pbmVudFdvcmRzKCBwb3N0LCBwcm9taW5lbnRXb3JkcyApO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNhdmVzIHRoZSBwcm9taW5lbnQgd29yZHMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwb3N0IEEgcG9zdCBvYmplY3Qgd2l0aCByZW5kZXJlZCBjb250ZW50LlxuXHQgKiBAcGFyYW0ge0FycmF5fSBwcm9taW5lbnRXb3JkcyBUaGUgcHJvbWluZW50IHdvcmRzIHRvIHNhdmUuXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXNvbHZlcyB3aGVuIHRoZSBwcm9taW5lbnQgd29yZHMgYXJlIHNhdmVkIGZvciB0aGUgcG9zdC5cblx0ICovXG5cdHNhdmVQcm9taW5lbnRXb3JkcyggcG9zdCwgcHJvbWluZW50V29yZHMgKSB7XG5cdFx0bGV0IHByb21pbmVudFdvcmRTdG9yYWdlID0gbmV3IFByb21pbmVudFdvcmRTdG9yYWdlKCB7XG5cdFx0XHRwb3N0SUQ6IHBvc3QuaWQsXG5cdFx0XHRyb290VXJsOiB0aGlzLl9yb290VXJsLFxuXHRcdFx0bm9uY2U6IHRoaXMuX25vbmNlLFxuXHRcdFx0Y2FjaGU6IHRoaXMuX3Byb21pbmVudFdvcmRDYWNoZSxcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gcHJvbWluZW50V29yZFN0b3JhZ2Uuc2F2ZVByb21pbmVudFdvcmRzKCBwcm9taW5lbnRXb3JkcyApLnRoZW4oIHRoaXMuaW5jcmVtZW50UHJvY2Vzc2VkUG9zdHMsIHRoaXMuaW5jcmVtZW50UHJvY2Vzc2VkUG9zdHMgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbmNyZW1lbnRzIHRoZSBhbW91bnQgb2YgcHJvY2Vzc2VkIHBvc3RzIGJ5IG9uZS5cblx0ICpcblx0ICogQHJldHVybnMge3ZvaWR9XG5cdCAqL1xuXHRpbmNyZW1lbnRQcm9jZXNzZWRQb3N0cygpIHtcblx0XHR0aGlzLl9wcm9jZXNzZWRQb3N0cyArPSAxO1xuXG5cdFx0dGhpcy5lbWl0KCBcInByb2Nlc3NlZFBvc3RcIiwgdGhpcy5fcHJvY2Vzc2VkUG9zdHMsIHRoaXMuX3RvdGFsUG9zdHMgKTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaXRlV2lkZUNhbGN1bGF0aW9uO1xuIiwiLyogZ2xvYmFsIHlvYXN0U2l0ZVdpZGVBbmFseXNpc0RhdGEsIHRiX3JlbW92ZSAqL1xuXG5pbXBvcnQgUHJvbWluZW50V29yZENhbGN1bGF0aW9uIGZyb20gXCIuL2tleXdvcmRTdWdnZXN0aW9ucy9zaXRlV2lkZUNhbGN1bGF0aW9uXCI7XG5pbXBvcnQgUHJvbWluZW50V29yZENhY2hlIGZyb20gXCIuL2tleXdvcmRTdWdnZXN0aW9ucy9Qcm9taW5lbnRXb3JkQ2FjaGVcIjtcbmltcG9ydCBQcm9taW5lbnRXb3JkQ2FjaGVQb3B1bGF0b3IgZnJvbSBcIi4va2V5d29yZFN1Z2dlc3Rpb25zL1Byb21pbmVudFdvcmRDYWNoZVBvcHVsYXRvclwiO1xuaW1wb3J0IFJlc3RBcGkgZnJvbSBcIi4vaGVscGVycy9yZXN0QXBpXCI7XG5pbXBvcnQgYTExeVNwZWFrIGZyb20gXCJhMTF5LXNwZWFrXCI7XG5cbmxldCBzZXR0aW5ncyA9IHlvYXN0U2l0ZVdpZGVBbmFseXNpc0RhdGEuZGF0YTtcblxubGV0IGluZm9Db250YWluZXI7XG5sZXQgcHJvbWluZW50V29yZENhY2hlO1xubGV0IHByb21pbmVudFdvcmRzQ2FsY3VsYXRlZCA9IGZhbHNlO1xuXG4vKipcbiAqIFJlY2FsY3VsYXRlcyBwb3N0c1xuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXNvbHZlcyB3aGVuIHdlIGhhdmUgcmVjYWxjdWxhdGVkIHBvc3RzLlxuICovXG5mdW5jdGlvbiByZWNhbGN1bGF0ZVBvc3RzKCkge1xuXHRsZXQgcHJvZ3Jlc3NFbGVtZW50ID0galF1ZXJ5KCBcIiN3cHNlb19jb3VudF9wb3N0c1wiICk7XG5cdGxldCBwcm9ncmVzcyA9IGpRdWVyeSggXCIjd3BzZW9faW50ZXJuYWxfbGlua3NfcG9zdHNfcHJvZ3Jlc3NiYXJcIiApLnByb2dyZXNzYmFyKCB7IHZhbHVlOiAwIH0gKTtcblx0bGV0IHJvb3RVcmwgPSBzZXR0aW5ncy5yZXN0QXBpLnJvb3Q7XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKCAoIHJlc29sdmUgKSA9PiB7XG5cdFx0bGV0IHBvc3RzQ2FsY3VsYXRpb24gPSBuZXcgUHJvbWluZW50V29yZENhbGN1bGF0aW9uKCB7XG5cdFx0XHR0b3RhbFBvc3RzOiBzZXR0aW5ncy5hbW91bnQudG90YWwsXG5cdFx0XHRyZWNhbGN1bGF0ZUFsbDogdHJ1ZSxcblx0XHRcdHJvb3RVcmw6IHJvb3RVcmwsXG5cdFx0XHRub25jZTogc2V0dGluZ3MucmVzdEFwaS5ub25jZSxcblx0XHRcdGFsbFByb21pbmVudFdvcmRJZHM6IHNldHRpbmdzLmFsbFdvcmRzLFxuXHRcdFx0bGlzdEVuZHBvaW50OiByb290VXJsICsgXCJ3cC92Mi9wb3N0cy9cIixcblx0XHRcdHByb21pbmVudFdvcmRDYWNoZSxcblx0XHR9ICk7XG5cblx0XHRwb3N0c0NhbGN1bGF0aW9uLm9uKCBcInByb2Nlc3NlZFBvc3RcIiwgKCBwb3N0Q291bnQgKSA9PiB7XG5cdFx0XHRsZXQgbmV3V2lkdGggPSBwb3N0Q291bnQgKiAoIDEwMCAvIHNldHRpbmdzLmFtb3VudC50b3RhbCApO1xuXG5cdFx0XHRwcm9ncmVzcy5wcm9ncmVzc2JhciggXCJ2YWx1ZVwiLCBNYXRoLnJvdW5kKCBuZXdXaWR0aCApICk7XG5cblx0XHRcdHByb2dyZXNzRWxlbWVudC5odG1sKCBwb3N0Q291bnQgKTtcblx0XHR9ICk7XG5cblx0XHRwb3N0c0NhbGN1bGF0aW9uLnN0YXJ0KCk7XG5cblx0XHQvLyBGcmVlIHVwIHRoZSB2YXJpYWJsZSB0byBzdGFydCBhbm90aGVyIHJlY2FsY3VsYXRpb24uXG5cdFx0cG9zdHNDYWxjdWxhdGlvbi5vbiggXCJjb21wbGV0ZVwiLCByZXNvbHZlICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBSZWNhbGN1bGF0ZXMgcGFnZXNcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUmVzb2x2ZXMgd2hlbiB3ZSBoYXZlIHJlY2FsY3VsYXRlZCBwYWdlcy5cbiAqL1xuZnVuY3Rpb24gcmVjYWxjdWxhdGVQYWdlcygpIHtcblx0bGV0IHByb2dyZXNzRWxlbWVudCA9IGpRdWVyeSggXCIjd3BzZW9fY291bnRfcGFnZXNcIiApO1xuXHRsZXQgcHJvZ3Jlc3MgPSBqUXVlcnkoIFwiI3dwc2VvX2ludGVybmFsX2xpbmtzX3BhZ2VzX3Byb2dyZXNzYmFyXCIgKS5wcm9ncmVzc2JhciggeyB2YWx1ZTogMCB9ICk7XG5cdGxldCByb290VXJsID0gc2V0dGluZ3MucmVzdEFwaS5yb290O1xuXG5cdHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlICkgPT4ge1xuXHRcdGxldCBwYWdlc0NhbGN1bGF0aW9uID0gbmV3IFByb21pbmVudFdvcmRDYWxjdWxhdGlvbigge1xuXHRcdFx0dG90YWxQb3N0czogc2V0dGluZ3MuYW1vdW50UGFnZXMudG90YWwsXG5cdFx0XHRyZWNhbGN1bGF0ZUFsbDogdHJ1ZSxcblx0XHRcdHJvb3RVcmw6IHJvb3RVcmwsXG5cdFx0XHRub25jZTogc2V0dGluZ3MucmVzdEFwaS5ub25jZSxcblx0XHRcdGFsbFByb21pbmVudFdvcmRJZHM6IHNldHRpbmdzLmFsbFdvcmRzLFxuXHRcdFx0bGlzdEVuZHBvaW50OiByb290VXJsICsgXCJ3cC92Mi9wYWdlcy9cIixcblx0XHRcdHByb21pbmVudFdvcmRDYWNoZSxcblx0XHR9ICk7XG5cblx0XHRwYWdlc0NhbGN1bGF0aW9uLm9uKCBcInByb2Nlc3NlZFBvc3RcIiwgKCBwYWdlQ291bnQgKSA9PiB7XG5cdFx0XHRsZXQgbmV3V2lkdGggPSBwYWdlQ291bnQgKiAoIDEwMCAvIHNldHRpbmdzLmFtb3VudFBhZ2VzLnRvdGFsICk7XG5cblx0XHRcdHByb2dyZXNzLnByb2dyZXNzYmFyKCBcInZhbHVlXCIsIE1hdGgucm91bmQoIG5ld1dpZHRoICkgKTtcblx0XHRcdHByb2dyZXNzRWxlbWVudC5odG1sKCBwYWdlQ291bnQgKTtcblx0XHR9ICk7XG5cblx0XHRwYWdlc0NhbGN1bGF0aW9uLnN0YXJ0KCk7XG5cblx0XHQvLyBGcmVlIHVwIHRoZSB2YXJpYWJsZSB0byBzdGFydCBhbm90aGVyIHJlY2FsY3VsYXRpb24uXG5cdFx0cGFnZXNDYWxjdWxhdGlvbi5vbiggXCJjb21wbGV0ZVwiLCByZXNvbHZlICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBTaG93cyBjb21wbGV0aW9uIHRvIHRoZSB1c2VyXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNob3dDb21wbGV0aW9uKCkge1xuXHRhMTF5U3BlYWsoIHNldHRpbmdzLmwxMG4uY2FsY3VsYXRpb25Db21wbGV0ZWQgKTtcblxuXHRqUXVlcnkuZ2V0KFxuXHRcdHtcblx0XHRcdHVybDogc2V0dGluZ3MucmVzdEFwaS5yb290ICsgXCJ5b2FzdC92MS9jb21wbGV0ZV9yZWNhbGN1bGF0aW9uL1wiLFxuXHRcdFx0YmVmb3JlU2VuZDogKCB4aHIgKSA9PiB7XG5cdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBcIlgtV1AtTm9uY2VcIiwgc2V0dGluZ3MucmVzdEFwaS5ub25jZSApO1xuXHRcdFx0fSxcblx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRwcm9taW5lbnRXb3Jkc0NhbGN1bGF0ZWQgPSB0cnVlO1xuXHRcdFx0XHRqUXVlcnkoIFwiI2ludGVybmFsTGlua3NDYWxjdWxhdGlvblwiICkuaHRtbCggc2V0dGluZ3MubWVzc2FnZS5hbmFseXNpc0NvbXBsZXRlZCApO1xuXG5cdFx0XHRcdHRiX3JlbW92ZSgpO1xuXHRcdFx0fSxcblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogU3RhcnQgcmVjYWxjdWxhdGluZy5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gc3RhcnRSZWNhbGN1bGF0aW5nKCkge1xuXHRhMTF5U3BlYWsoIHNldHRpbmdzLmwxMG4uY2FsY3VsYXRpb25JblByb2dyZXNzICk7XG5cblx0bGV0IHJlc3RBcGkgPSBuZXcgUmVzdEFwaSggeyByb290VXJsOiBzZXR0aW5ncy5yZXN0QXBpLnJvb3QsIG5vbmNlOiBzZXR0aW5ncy5yZXN0QXBpLm5vbmNlIH0gKTtcblxuXHRwcm9taW5lbnRXb3JkQ2FjaGUgID0gbmV3IFByb21pbmVudFdvcmRDYWNoZSgpO1xuXHRsZXQgcG9wdWxhdG9yICAgICAgID0gbmV3IFByb21pbmVudFdvcmRDYWNoZVBvcHVsYXRvciggeyBjYWNoZTogcHJvbWluZW50V29yZENhY2hlLCByZXN0QXBpOiByZXN0QXBpIH0gKTtcblxuXHRwb3B1bGF0b3IucG9wdWxhdGUoKVxuXHRcdC50aGVuKCByZWNhbGN1bGF0ZVBvc3RzIClcblx0XHQudGhlbiggcmVjYWxjdWxhdGVQYWdlcyApXG5cdFx0LnRoZW4oIHNob3dDb21wbGV0aW9uICk7XG59XG5cbi8qKlxuICogT3BlbnMgdGhlIGludGVybmFsIGxpbmsgY2FsY3VsYXRpb24gbW9kYWwuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIG9wZW5JbnRlcm5hbExpbmtDYWxjdWxhdGlvbigpIHtcblx0alF1ZXJ5KCBcIiNnZW5lcmFsLXRhYlwiICkuY2xpY2soKTtcblxuXHRpZiAoIHByb21pbmVudFdvcmRzQ2FsY3VsYXRlZCA9PT0gZmFsc2UgKSB7XG5cdFx0alF1ZXJ5KCBcIiNvcGVuSW50ZXJuYWxMaW5rc0NhbGN1bGF0aW9uXCIgKS5jbGljaygpO1xuXHR9XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIHNpdGUgd2lkZSBhbmFseXNpcyB0YWIuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGluaXQoKSB7XG5cdGxldCByZWNhbGN1bGF0aW5nID0gZmFsc2U7XG5cdGpRdWVyeSggXCIueW9hc3QtanMtY2FsY3VsYXRlLXByb21pbmVudC13b3Jkcy0tYWxsXCIgKS5vbiggXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcblx0XHRpZiggcmVjYWxjdWxhdGluZyA9PT0gZmFsc2UgKSB7XG5cdFx0XHRzdGFydFJlY2FsY3VsYXRpbmcoKTtcblxuXHRcdFx0cmVjYWxjdWxhdGluZyA9IHRydWU7XG5cdFx0fVxuXHR9ICk7XG5cblx0alF1ZXJ5KCBcIiNub3RpY2VSdW5BbmFseXNpc1wiICkuY2xpY2soIG9wZW5JbnRlcm5hbExpbmtDYWxjdWxhdGlvbiApO1xuXG5cdGlmICggZG9jdW1lbnQubG9jYXRpb24uaGFzaCA9PT0gXCIjb3Blbi1pbnRlcm5hbC1saW5rcy1jYWxjdWxhdGlvblwiICkge1xuXHRcdHNldFRpbWVvdXQoIG9wZW5JbnRlcm5hbExpbmtDYWxjdWxhdGlvbiwgMCApO1xuXHR9XG5cblx0aW5mb0NvbnRhaW5lciA9IGpRdWVyeSggXCIueW9hc3QtanMtcHJvbWluZW50LXdvcmRzLWluZm9cIiApO1xufVxuXG5qUXVlcnkoIGluaXQgKTtcbiIsInZhciBjb250YWluZXJQb2xpdGUsIGNvbnRhaW5lckFzc2VydGl2ZTtcblxuLyoqXG4gKiBCdWlsZCB0aGUgbGl2ZSByZWdpb25zIG1hcmt1cC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYXJpYUxpdmUgT3B0aW9uYWwuIFZhbHVlIGZvciB0aGUgXCJhcmlhLWxpdmVcIiBhdHRyaWJ1dGUsIGRlZmF1bHQgXCJwb2xpdGVcIi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAkY29udGFpbmVyIFRoZSBBUklBIGxpdmUgcmVnaW9uIGpRdWVyeSBvYmplY3QuXG4gKi9cbnZhciBhZGRDb250YWluZXIgPSBmdW5jdGlvbiggYXJpYUxpdmUgKSB7XG5cdGFyaWFMaXZlID0gYXJpYUxpdmUgfHwgXCJwb2xpdGVcIjtcblxuXHR2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRjb250YWluZXIuaWQgPSBcImExMXktc3BlYWstXCIgKyBhcmlhTGl2ZTtcblx0Y29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYTExeS1zcGVhay1yZWdpb25cIjtcblxuXHR2YXIgc2NyZWVuUmVhZGVyVGV4dFN0eWxlID0gXCJjbGlwOiByZWN0KDFweCwgMXB4LCAxcHgsIDFweCk7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgaGVpZ2h0OiAxcHg7IHdpZHRoOiAxcHg7IG92ZXJmbG93OiBoaWRkZW47XCI7XG5cdGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoIFwic3R5bGVcIiwgc2NyZWVuUmVhZGVyVGV4dFN0eWxlICk7XG5cblx0Y29udGFpbmVyLnNldEF0dHJpYnV0ZSggXCJhcmlhLWxpdmVcIiwgYXJpYUxpdmUgKTtcblx0Y29udGFpbmVyLnNldEF0dHJpYnV0ZSggXCJhcmlhLXJlbGV2YW50XCIsIFwiYWRkaXRpb25zIHRleHRcIiApO1xuXHRjb250YWluZXIuc2V0QXR0cmlidXRlKCBcImFyaWEtYXRvbWljXCIsIFwidHJ1ZVwiICk7XG5cblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvciggXCJib2R5XCIgKS5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cdHJldHVybiBjb250YWluZXI7XG59O1xuXG4vKipcbiAqIFNwZWNpZnkgYSBmdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gdGhlIERPTSBpcyBmdWxseSBsb2FkZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQSBmdW5jdGlvbiB0byBleGVjdXRlIGFmdGVyIHRoZSBET00gaXMgcmVhZHkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbnZhciBkb21SZWFkeSA9IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHwgKCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cdFx0cmV0dXJuIGNhbGxiYWNrKCk7XG5cdH1cblxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY2FsbGJhY2sgKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBsaXZlIHJlZ2lvbnMgd2hlbiB0aGUgRE9NIGlzIGZ1bGx5IGxvYWRlZC5cbiAqL1xuZG9tUmVhZHkoIGZ1bmN0aW9uKCkge1xuXHRjb250YWluZXJQb2xpdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJhMTF5LXNwZWFrLXBvbGl0ZVwiICk7XG5cdGNvbnRhaW5lckFzc2VydGl2ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcImExMXktc3BlYWstYXNzZXJ0aXZlXCIgKTtcblxuXHRpZiAoIGNvbnRhaW5lclBvbGl0ZSA9PT0gbnVsbCApIHtcblx0XHRjb250YWluZXJQb2xpdGUgPSBhZGRDb250YWluZXIoIFwicG9saXRlXCIgKTtcblx0fVxuXHRpZiAoIGNvbnRhaW5lckFzc2VydGl2ZSA9PT0gbnVsbCApIHtcblx0XHRjb250YWluZXJBc3NlcnRpdmUgPSBhZGRDb250YWluZXIoIFwiYXNzZXJ0aXZlXCIgKTtcblx0fVxufSApO1xuXG4vKipcbiAqIENsZWFyIHRoZSBsaXZlIHJlZ2lvbnMuXG4gKi9cbnZhciBjbGVhciA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgcmVnaW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiLmExMXktc3BlYWstcmVnaW9uXCIgKTtcblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgcmVnaW9ucy5sZW5ndGg7IGkrKyApIHtcblx0XHRyZWdpb25zWyBpIF0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHR9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgQVJJQSBsaXZlIG5vdGlmaWNhdGlvbiBhcmVhIHRleHQgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSAgVGhlIG1lc3NhZ2UgdG8gYmUgYW5ub3VuY2VkIGJ5IEFzc2lzdGl2ZSBUZWNobm9sb2dpZXMuXG4gKiBAcGFyYW0ge1N0cmluZ30gYXJpYUxpdmUgT3B0aW9uYWwuIFRoZSBwb2xpdGVuZXNzIGxldmVsIGZvciBhcmlhLWxpdmUuIFBvc3NpYmxlIHZhbHVlczpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBwb2xpdGUgb3IgYXNzZXJ0aXZlLiBEZWZhdWx0IHBvbGl0ZS5cbiAqL1xudmFyIEExMXlTcGVhayA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBhcmlhTGl2ZSApIHtcblx0Ly8gQ2xlYXIgcHJldmlvdXMgbWVzc2FnZXMgdG8gYWxsb3cgcmVwZWF0ZWQgc3RyaW5ncyBiZWluZyByZWFkIG91dC5cblx0Y2xlYXIoKTtcblxuXHQvKlxuXHQgKiBTdHJpcCBIVE1MIHRhZ3MgKGlmIGFueSkgZnJvbSB0aGUgbWVzc2FnZSBzdHJpbmcuIElkZWFsbHksIG1lc3NhZ2VzIHNob3VsZFxuXHQgKiBiZSBzaW1wbGUgc3RyaW5ncywgY2FyZWZ1bGx5IGNyYWZ0ZWQgZm9yIHNwZWNpZmljIHVzZSB3aXRoIEExMXlTcGVhay5cblx0ICogV2hlbiByZS11c2luZyBhbHJlYWR5IGV4aXN0aW5nIHN0cmluZ3MgdGhpcyB3aWxsIGVuc3VyZSBzaW1wbGUgSFRNTCB0byBiZVxuXHQgKiBzdHJpcHBlZCBvdXQgYW5kIHJlcGxhY2VkIHdpdGggYSBzcGFjZS4gQnJvd3NlcnMgd2lsbCBjb2xsYXBzZSBtdWx0aXBsZVxuXHQgKiBzcGFjZXMgbmF0aXZlbHkuXG5cdCAqL1xuXHRtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKCAvPFtePD5dKz4vZywgXCIgXCIgKTtcblxuXHRpZiAoIGNvbnRhaW5lckFzc2VydGl2ZSAmJiBcImFzc2VydGl2ZVwiID09PSBhcmlhTGl2ZSApIHtcblx0XHRjb250YWluZXJBc3NlcnRpdmUudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuXHR9IGVsc2UgaWYgKCBjb250YWluZXJQb2xpdGUgKSB7XG5cdFx0Y29udGFpbmVyUG9saXRlLnRleHRDb250ZW50ID0gbWVzc2FnZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBMTF5U3BlYWs7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LicpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKylcbiAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuXG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgdmFyIG07XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSAwO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKGVtaXR0ZXIuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gMTtcbiAgZWxzZVxuICAgIHJldCA9IGVtaXR0ZXIuX2V2ZW50c1t0eXBlXS5sZW5ndGg7XG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIiwidmFyIGJhc2VJbmRleE9mID0gcmVxdWlyZSgnLi9fYmFzZUluZGV4T2YnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUluY2x1ZGVzO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY3JlYXRlQmFzZUVhY2ggPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFjaDtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmlsdGVyO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0ZsYXR0ZW5hYmxlID0gcmVxdWlyZSgnLi9faXNGbGF0dGVuYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmxhdHRlbjtcbiIsInZhciBjcmVhdGVCYXNlRm9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUZvcicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvcjtcbiIsInZhciBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3JPd247XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICB2YWx1ZSA9IE9iamVjdCh2YWx1ZSk7XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gdmFsdWUpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUlzTmFOID0gcmVxdWlyZSgnLi9fYmFzZUlzTmFOJyksXG4gICAgc3RyaWN0SW5kZXhPZiA9IHJlcXVpcmUoJy4vX3N0cmljdEluZGV4T2YnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXMnKSxcbiAgICBhcnJheUluY2x1ZGVzV2l0aCA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXNXaXRoJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBzaGFyZWQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluY2x1ZGVzID0gY29tcGFyYXRvciA/IGFycmF5SW5jbHVkZXNXaXRoIDogYXJyYXlJbmNsdWRlcyxcbiAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGgsXG4gICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgaWYgKG90aEluZGV4ICYmIGl0ZXJhdGVlKSB7XG4gICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICB9XG4gICAgbWF4TGVuZ3RoID0gbmF0aXZlTWluKGFycmF5Lmxlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuICBhcnJheSA9IGFycmF5c1swXTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgIGlmICghKHNlZW5cbiAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgIDogaW5jbHVkZXMocmVzdWx0LCBjb21wdXRlZCwgY29tcGFyYXRvcilcbiAgICAgICAgKSkge1xuICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICB3aGlsZSAoLS1vdGhJbmRleCkge1xuICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKGNhY2hlLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlZW4pIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW50ZXJzZWN0aW9uO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0KHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IGFycmF5VGFnLFxuICAgICAgb3RoVGFnID0gYXJyYXlUYWc7XG5cbiAgaWYgKCFvYmpJc0Fycikge1xuICAgIG9ialRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICB9XG4gIGlmICghb3RoSXNBcnIpIHtcbiAgICBvdGhUYWcgPSBnZXRUYWcob3RoZXIpO1xuICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuICB9XG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hdGNoO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hTmAgd2l0aG91dCBzdXBwb3J0IGZvciBudW1iZXIgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYU47XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYmFzZU1hdGNoZXMgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlcycpLFxuICAgIGJhc2VNYXRjaGVzUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIHByb3BlcnR5ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJdGVyYXRlZTtcbiIsInZhciBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXMnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzO1xuIiwidmFyIGJhc2VFYWNoID0gcmVxdWlyZSgnLi9fYmFzZUVhY2gnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXBgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gQXJyYXkoY29sbGVjdGlvbi5sZW5ndGgpIDogW107XG5cbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWFwO1xuIiwidmFyIGJhc2VJc01hdGNoID0gcmVxdWlyZSgnLi9fYmFzZUlzTWF0Y2gnKSxcbiAgICBnZXRNYXRjaERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXRjaERhdGEnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzKHNvdXJjZSkge1xuICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKG1hdGNoRGF0YVswXVswXSwgbWF0Y2hEYXRhWzBdWzFdKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKSxcbiAgICBnZXQgPSByZXF1aXJlKCcuL2dldCcpLFxuICAgIGhhc0luID0gcmVxdWlyZSgnLi9oYXNJbicpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgcmV0dXJuIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIG9ialZhbHVlID09PSBzcmNWYWx1ZSlcbiAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5O1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5T2Y7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iLCJ2YXIgY29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50JyksXG4gICAgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0VG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNsaWNlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gKiBvZiBgcHJvcHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVZhbHVlcztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RBcnJheUxpa2VPYmplY3Q7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEZ1bmN0aW9uO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydHk7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0ga2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBrZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXRjaERhdGE7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gZGF0YVtrZXldICE9PSB1bmRlZmluZWQgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRmxhdHRlbmFibGU7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJlxuICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBtZW1vaXplID0gcmVxdWlyZSgnLi9tZW1vaXplJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplQ2FwcGVkO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgYXBwbHkgPSByZXF1aXJlKCcuL19hcHBseScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJSZXN0O1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgYmFzZVNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVNldFRvU3RyaW5nJyksXG4gICAgc2hvcnRPdXQgPSByZXF1aXJlKCcuL19zaG9ydE91dCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvU3RyaW5nO1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaWN0SW5kZXhPZjtcbiIsInZhciBtZW1vaXplQ2FwcGVkID0gcmVxdWlyZSgnLi9fbWVtb2l6ZUNhcHBlZCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVMZWFkaW5nRG90ID0gL15cXC4vLFxuICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsInZhciBiYXNlUHJvcGVydHlPZiA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eU9mJyk7XG5cbi8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG52YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgJyZhbXA7JzogJyYnLFxuICAnJmx0Oyc6ICc8JyxcbiAgJyZndDsnOiAnPicsXG4gICcmcXVvdDsnOiAnXCInLFxuICAnJiMzOTsnOiBcIidcIlxufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICovXG52YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuZXNjYXBlSHRtbENoYXI7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudDtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBiYXNlRmlsdGVyID0gcmVxdWlyZSgnLi9fYmFzZUZpbHRlcicpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqIEBzZWUgXy5yZWplY3RcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gKiBdO1xuICpcbiAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAqXG4gKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gKi9cbmZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmlsdGVyO1xuIiwidmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBtYXAgPSByZXF1aXJlKCcuL21hcCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICogICByZXR1cm4gW24sIG5dO1xuICogfVxuICpcbiAqIF8uZmxhdE1hcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAqL1xuZnVuY3Rpb24gZmxhdE1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdE1hcDtcbiIsInZhciBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBhbGlhcyBlYWNoXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAqXG4gKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCJ2YXIgYmFzZUhhcyA9IHJlcXVpcmUoJy4vX2Jhc2VIYXMnKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXM7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBiYXNlSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Jhc2VJbmRleE9mJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNTdHJpbmcgPSByZXF1aXJlKCcuL2lzU3RyaW5nJyksXG4gICAgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi90b0ludGVnZXInKSxcbiAgICB2YWx1ZXMgPSByZXF1aXJlKCcuL3ZhbHVlcycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gYGNvbGxlY3Rpb25gLiBJZiBgY29sbGVjdGlvbmAgaXMgYSBzdHJpbmcsIGl0J3NcbiAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGlzIHVzZWQgZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzXG4gKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICBjb2xsZWN0aW9uID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBjb2xsZWN0aW9uIDogdmFsdWVzKGNvbGxlY3Rpb24pO1xuICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICBpZiAoZnJvbUluZGV4IDwgMCkge1xuICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICB9XG4gIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKVxuICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5jbHVkZXM7XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJbnRlcnNlY3Rpb24gPSByZXF1aXJlKCcuL19iYXNlSW50ZXJzZWN0aW9uJyksXG4gICAgYmFzZVJlc3QgPSByZXF1aXJlKCcuL19iYXNlUmVzdCcpLFxuICAgIGNhc3RBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL19jYXN0QXJyYXlMaWtlT2JqZWN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gKiAvLyA9PiBbMl1cbiAqL1xudmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgOiBbXTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdGlvbjtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAqIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBpc0FycmF5TGlrZSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2VPYmplY3Q7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICBzdHViRmFsc2UgPSByZXF1aXJlKCcuL3N0dWJGYWxzZScpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG4iLCJ2YXIgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gKlxuICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gKiBwcm9wZXJ0aWVzLlxuICpcbiAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0VtcHR5KG51bGwpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSh0cnVlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gIH1cbiAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VtcHR5O1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSAqKm5vdCoqIHN1cHBvcnRlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIG9iamVjdCA9PT0gb3RoZXI7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VxdWFsO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsInZhciBpc051bWJlciA9IHJlcXVpcmUoJy4vaXNOdW1iZXInKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgTmFOYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAqIFtgTnVtYmVyLmlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzTmFOKSBhbmQgaXMgbm90IHRoZSBzYW1lIGFzXG4gKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTmFOKE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc05hTihuZXcgTnVtYmVyKE5hTikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIGlzTmFOKHVuZGVmaW5lZCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc05hTih1bmRlZmluZWQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gIC8vIEFjdGl2ZVggb2JqZWN0cyBpbiBJRS5cbiAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOYU47XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBOdW1iZXJgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gKiBjbGFzc2lmaWVkIGFzIG51bWJlcnMsIHVzZSB0aGUgYF8uaXNGaW5pdGVgIG1ldGhvZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTnVtYmVyKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc051bWJlcignMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IG51bWJlclRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOdW1iZXI7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N0cmluZygnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N0cmluZygxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N0cmluZztcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1N5bWJvbDtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVW5kZWZpbmVkO1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwidmFyIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBiYXNlTWFwID0gcmVxdWlyZSgnLi9fYmFzZU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBieSBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydVxuICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAqXG4gKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gKiBgZmlsbGAsIGBpbnZlcnRgLCBgcGFyc2VJbnRgLCBgcmFuZG9tYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVwZWF0YCxcbiAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gKiAgIHJldHVybiBuICogbjtcbiAqIH1cbiAqXG4gKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XVxuICpcbiAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogdmFyIHVzZXJzID0gW1xuICogICB7ICd1c2VyJzogJ2Jhcm5leScgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gKiBdO1xuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gKiAvLyA9PiBbJ2Jhcm5leScsICdmcmVkJ11cbiAqL1xuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5TWFwIDogYmFzZU1hcDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwO1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemU7XG4iLCIvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gKiBgZnVuY2AgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGVcbiAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAqIH1cbiAqXG4gKiBfLmZpbHRlcihbMSwgMiwgMywgNCwgNSwgNl0sIF8ubmVnYXRlKGlzRXZlbikpO1xuICogLy8gPT4gWzEsIDMsIDVdXG4gKi9cbmZ1bmN0aW9uIG5lZ2F0ZShwcmVkaWNhdGUpIHtcbiAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgY2FzZSAyOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZWdhdGU7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R1YkZhbHNlO1xuIiwidmFyIGJhc2VTbGljZSA9IHJlcXVpcmUoJy4vX2Jhc2VTbGljZScpLFxuICAgIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vdG9JbnRlZ2VyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGFrZShbMSwgMiwgM10pO1xuICogLy8gPT4gWzFdXG4gKlxuICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAqIC8vID0+IFsxLCAyLCAzXVxuICpcbiAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICogLy8gPT4gW11cbiAqL1xuZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0YWtlO1xuIiwidmFyIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDg7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEyLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0Zpbml0ZSgzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICogLy8gPT4gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDhcbiAqXG4gKiBfLnRvRmluaXRlKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICB9XG4gIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgIHJldHVybiBzaWduICogTUFYX0lOVEVHRVI7XG4gIH1cbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Zpbml0ZTtcbiIsInZhciB0b0Zpbml0ZSA9IHJlcXVpcmUoJy4vdG9GaW5pdGUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0ludGVnZXIoMy4yKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnRvSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDBcbiAqXG4gKiBfLnRvSW50ZWdlcihJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9JbnRlZ2VyKCczLjInKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gdG9JbnRlZ2VyKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gIHJldHVybiByZXN1bHQgPT09IHJlc3VsdCA/IChyZW1haW5kZXIgPyByZXN1bHQgLSByZW1haW5kZXIgOiByZXN1bHQpIDogMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0ludGVnZXI7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwidmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpLFxuICAgIHVuZXNjYXBlSHRtbENoYXIgPSByZXF1aXJlKCcuL191bmVzY2FwZUh0bWxDaGFyJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbnZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4vKipcbiAqIFRoZSBpbnZlcnNlIG9mIGBfLmVzY2FwZWA7IHRoaXMgbWV0aG9kIGNvbnZlcnRzIHRoZSBIVE1MIGVudGl0aWVzXG4gKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gKlxuICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjYuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVuZXNjYXBlKCdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnKTtcbiAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgID8gc3RyaW5nLnJlcGxhY2UocmVFc2NhcGVkSHRtbCwgdW5lc2NhcGVIdG1sQ2hhcilcbiAgICA6IHN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmVzY2FwZTtcbiIsInZhciBiYXNlVmFsdWVzID0gcmVxdWlyZSgnLi9fYmFzZVZhbHVlcycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8udmFsdWVzKCdoaScpO1xuICogLy8gPT4gWydoJywgJ2knXVxuICovXG5mdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsdWVzO1xuIiwidmFyIGZpbmRNYXRjaGluZ1J1bGUgPSBmdW5jdGlvbihydWxlcywgdGV4dCl7XG4gIHZhciBpO1xuICBmb3IoaT0wOyBpPHJ1bGVzLmxlbmd0aDsgaSsrKVxuICAgIGlmKHJ1bGVzW2ldLnJlZ2V4LnRlc3QodGV4dCkpXG4gICAgICByZXR1cm4gcnVsZXNbaV07XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG52YXIgZmluZE1heEluZGV4QW5kUnVsZSA9IGZ1bmN0aW9uKHJ1bGVzLCB0ZXh0KXtcbiAgdmFyIGksIHJ1bGUsIGxhc3RfbWF0Y2hpbmdfcnVsZTtcbiAgZm9yKGk9MDsgaTx0ZXh0Lmxlbmd0aDsgaSsrKXtcbiAgICBydWxlID0gZmluZE1hdGNoaW5nUnVsZShydWxlcywgdGV4dC5zdWJzdHJpbmcoMCwgaSArIDEpKTtcbiAgICBpZihydWxlKVxuICAgICAgbGFzdF9tYXRjaGluZ19ydWxlID0gcnVsZTtcbiAgICBlbHNlIGlmKGxhc3RfbWF0Y2hpbmdfcnVsZSlcbiAgICAgIHJldHVybiB7bWF4X2luZGV4OiBpLCBydWxlOiBsYXN0X21hdGNoaW5nX3J1bGV9O1xuICB9XG4gIHJldHVybiBsYXN0X21hdGNoaW5nX3J1bGUgPyB7bWF4X2luZGV4OiB0ZXh0Lmxlbmd0aCwgcnVsZTogbGFzdF9tYXRjaGluZ19ydWxlfSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob25Ub2tlbl9vcmlnKXtcbiAgdmFyIGJ1ZmZlciA9IFwiXCI7XG4gIHZhciBydWxlcyA9IFtdO1xuICB2YXIgbGluZSA9IDE7XG4gIHZhciBjb2wgPSAxO1xuXG4gIHZhciBvblRva2VuID0gZnVuY3Rpb24oc3JjLCB0eXBlKXtcbiAgICBvblRva2VuX29yaWcoe1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHNyYzogc3JjLFxuICAgICAgbGluZTogbGluZSxcbiAgICAgIGNvbDogY29sXG4gICAgfSk7XG4gICAgdmFyIGxpbmVzID0gc3JjLnNwbGl0KFwiXFxuXCIpO1xuICAgIGxpbmUgKz0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICBjb2wgPSAobGluZXMubGVuZ3RoID4gMSA/IDEgOiBjb2wpICsgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkUnVsZTogZnVuY3Rpb24ocmVnZXgsIHR5cGUpe1xuICAgICAgcnVsZXMucHVzaCh7cmVnZXg6IHJlZ2V4LCB0eXBlOiB0eXBlfSk7XG4gICAgfSxcbiAgICBvblRleHQ6IGZ1bmN0aW9uKHRleHQpe1xuICAgICAgdmFyIHN0ciA9IGJ1ZmZlciArIHRleHQ7XG4gICAgICB2YXIgbSA9IGZpbmRNYXhJbmRleEFuZFJ1bGUocnVsZXMsIHN0cik7XG4gICAgICB3aGlsZShtICYmIG0ubWF4X2luZGV4ICE9PSBzdHIubGVuZ3RoKXtcbiAgICAgICAgb25Ub2tlbihzdHIuc3Vic3RyaW5nKDAsIG0ubWF4X2luZGV4KSwgbS5ydWxlLnR5cGUpO1xuXG4gICAgICAgIC8vbm93IGZpbmQgdGhlIG5leHQgdG9rZW5cbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZyhtLm1heF9pbmRleCk7XG4gICAgICAgIG0gPSBmaW5kTWF4SW5kZXhBbmRSdWxlKHJ1bGVzLCBzdHIpO1xuICAgICAgfVxuICAgICAgYnVmZmVyID0gc3RyO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbigpe1xuICAgICAgaWYoYnVmZmVyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICB2YXIgcnVsZSA9IGZpbmRNYXRjaGluZ1J1bGUocnVsZXMsIGJ1ZmZlcik7XG4gICAgICBpZighcnVsZSl7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXCJ1bmFibGUgdG8gdG9rZW5pemVcIik7XG4gICAgICAgIGVyci50b2tlbml6ZXIyID0ge1xuICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgY29sOiBjb2xcbiAgICAgICAgfTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICBvblRva2VuKGJ1ZmZlciwgcnVsZS50eXBlKTtcbiAgICB9XG4gIH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFRoZSBmdW5jdGlvbiBnZXR0aW5nIHRoZSBsYW5ndWFnZSBwYXJ0IG9mIHRoZSBsb2NhbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSBUaGUgbG9jYWxlLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGxhbmd1YWdlIHBhcnQgb2YgdGhlIGxvY2FsZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgcmV0dXJuIGxvY2FsZS5zcGxpdChcIl9cIilbMF07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TGFuZ3VhZ2UuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRMYW5ndWFnZS5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgYmxvY2tFbGVtZW50cyA9IFtcImFkZHJlc3NcIiwgXCJhcnRpY2xlXCIsIFwiYXNpZGVcIiwgXCJibG9ja3F1b3RlXCIsIFwiY2FudmFzXCIsIFwiZGRcIiwgXCJkaXZcIiwgXCJkbFwiLCBcImZpZWxkc2V0XCIsIFwiZmlnY2FwdGlvblwiLCBcImZpZ3VyZVwiLCBcImZvb3RlclwiLCBcImZvcm1cIiwgXCJoMVwiLCBcImgyXCIsIFwiaDNcIiwgXCJoNFwiLCBcImg1XCIsIFwiaDZcIiwgXCJoZWFkZXJcIiwgXCJoZ3JvdXBcIiwgXCJoclwiLCBcImxpXCIsIFwibWFpblwiLCBcIm5hdlwiLCBcIm5vc2NyaXB0XCIsIFwib2xcIiwgXCJvdXRwdXRcIiwgXCJwXCIsIFwicHJlXCIsIFwic2VjdGlvblwiLCBcInRhYmxlXCIsIFwidGZvb3RcIiwgXCJ1bFwiLCBcInZpZGVvXCJdO1xudmFyIGlubGluZUVsZW1lbnRzID0gW1wiYlwiLCBcImJpZ1wiLCBcImlcIiwgXCJzbWFsbFwiLCBcInR0XCIsIFwiYWJiclwiLCBcImFjcm9ueW1cIiwgXCJjaXRlXCIsIFwiY29kZVwiLCBcImRmblwiLCBcImVtXCIsIFwia2JkXCIsIFwic3Ryb25nXCIsIFwic2FtcFwiLCBcInRpbWVcIiwgXCJ2YXJcIiwgXCJhXCIsIFwiYmRvXCIsIFwiYnJcIiwgXCJpbWdcIiwgXCJtYXBcIiwgXCJvYmplY3RcIiwgXCJxXCIsIFwic2NyaXB0XCIsIFwic3BhblwiLCBcInN1YlwiLCBcInN1cFwiLCBcImJ1dHRvblwiLCBcImlucHV0XCIsIFwibGFiZWxcIiwgXCJzZWxlY3RcIiwgXCJ0ZXh0YXJlYVwiXTtcbnZhciBibG9ja0VsZW1lbnRzUmVnZXggPSBuZXcgUmVnRXhwKFwiXihcIiArIGJsb2NrRWxlbWVudHMuam9pbihcInxcIikgKyBcIikkXCIsIFwiaVwiKTtcbnZhciBpbmxpbmVFbGVtZW50c1JlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oXCIgKyBpbmxpbmVFbGVtZW50cy5qb2luKFwifFwiKSArIFwiKSRcIiwgXCJpXCIpO1xudmFyIGJsb2NrRWxlbWVudFN0YXJ0UmVnZXggPSBuZXcgUmVnRXhwKFwiXjwoXCIgKyBibG9ja0VsZW1lbnRzLmpvaW4oXCJ8XCIpICsgXCIpW14+XSo/PiRcIiwgXCJpXCIpO1xudmFyIGJsb2NrRWxlbWVudEVuZFJlZ2V4ID0gbmV3IFJlZ0V4cChcIl48LyhcIiArIGJsb2NrRWxlbWVudHMuam9pbihcInxcIikgKyBcIilbXj5dKj8+JFwiLCBcImlcIik7XG52YXIgaW5saW5lRWxlbWVudFN0YXJ0UmVnZXggPSBuZXcgUmVnRXhwKFwiXjwoXCIgKyBpbmxpbmVFbGVtZW50cy5qb2luKFwifFwiKSArIFwiKVtePl0qPiRcIiwgXCJpXCIpO1xudmFyIGlubGluZUVsZW1lbnRFbmRSZWdleCA9IG5ldyBSZWdFeHAoXCJePC8oXCIgKyBpbmxpbmVFbGVtZW50cy5qb2luKFwifFwiKSArIFwiKVtePl0qPiRcIiwgXCJpXCIpO1xudmFyIG90aGVyRWxlbWVudFN0YXJ0UmVnZXggPSAvXjwoW14+XFxzXFwvXSspW14+XSo+JC87XG52YXIgb3RoZXJFbGVtZW50RW5kUmVnZXggPSAvXjxcXC8oW14+XFxzXSspW14+XSo+JC87XG52YXIgY29udGVudFJlZ2V4ID0gL15bXjxdKyQvO1xudmFyIGdyZWF0ZXJUaGFuQ29udGVudFJlZ2V4ID0gL148W14+PF0qJC87XG52YXIgY29tbWVudFJlZ2V4ID0gLzwhLS0oLnxbXFxyXFxuXSkqPy0tPi9nO1xudmFyIGNvcmUgPSByZXF1aXJlKFwidG9rZW5pemVyMi9jb3JlXCIpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKFwibG9kYXNoL2ZvckVhY2hcIik7XG52YXIgbWVtb2l6ZSA9IHJlcXVpcmUoXCJsb2Rhc2gvbWVtb2l6ZVwiKTtcbnZhciB0b2tlbnMgPSBbXTtcbnZhciBodG1sQmxvY2tUb2tlbml6ZXI7XG4vKipcbiAqIENyZWF0ZXMgYSB0b2tlbml6ZXIgdG8gdG9rZW5pemUgSFRNTCBpbnRvIGJsb2Nrcy5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9rZW5pemVyKCkge1xuICAgIHRva2VucyA9IFtdO1xuICAgIGh0bWxCbG9ja1Rva2VuaXplciA9IGNvcmUoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICB9KTtcbiAgICBodG1sQmxvY2tUb2tlbml6ZXIuYWRkUnVsZShjb250ZW50UmVnZXgsIFwiY29udGVudFwiKTtcbiAgICBodG1sQmxvY2tUb2tlbml6ZXIuYWRkUnVsZShncmVhdGVyVGhhbkNvbnRlbnRSZWdleCwgXCJncmVhdGVyLXRoYW4tc2lnbi1jb250ZW50XCIpO1xuICAgIGh0bWxCbG9ja1Rva2VuaXplci5hZGRSdWxlKGJsb2NrRWxlbWVudFN0YXJ0UmVnZXgsIFwiYmxvY2stc3RhcnRcIik7XG4gICAgaHRtbEJsb2NrVG9rZW5pemVyLmFkZFJ1bGUoYmxvY2tFbGVtZW50RW5kUmVnZXgsIFwiYmxvY2stZW5kXCIpO1xuICAgIGh0bWxCbG9ja1Rva2VuaXplci5hZGRSdWxlKGlubGluZUVsZW1lbnRTdGFydFJlZ2V4LCBcImlubGluZS1zdGFydFwiKTtcbiAgICBodG1sQmxvY2tUb2tlbml6ZXIuYWRkUnVsZShpbmxpbmVFbGVtZW50RW5kUmVnZXgsIFwiaW5saW5lLWVuZFwiKTtcbiAgICBodG1sQmxvY2tUb2tlbml6ZXIuYWRkUnVsZShvdGhlckVsZW1lbnRTdGFydFJlZ2V4LCBcIm90aGVyLWVsZW1lbnQtc3RhcnRcIik7XG4gICAgaHRtbEJsb2NrVG9rZW5pemVyLmFkZFJ1bGUob3RoZXJFbGVtZW50RW5kUmVnZXgsIFwib3RoZXItZWxlbWVudC1lbmRcIik7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBpcyBhIGJsb2NrIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxFbGVtZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgSFRNTCBlbGVtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IGl0IGlzIGEgYmxvY2sgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gaXNCbG9ja0VsZW1lbnQoaHRtbEVsZW1lbnROYW1lKSB7XG4gICAgcmV0dXJuIGJsb2NrRWxlbWVudHNSZWdleC50ZXN0KGh0bWxFbGVtZW50TmFtZSk7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBpcyBhbiBpbmxpbmUgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaHRtbEVsZW1lbnROYW1lIFRoZSBuYW1lIG9mIHRoZSBIVE1MIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgaXQgaXMgYW4gaW5saW5lIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGlzSW5saW5lRWxlbWVudChodG1sRWxlbWVudE5hbWUpIHtcbiAgICByZXR1cm4gaW5saW5lRWxlbWVudHNSZWdleC50ZXN0KGh0bWxFbGVtZW50TmFtZSk7XG59XG4vKipcbiAqIFNwbGl0cyBhIHRleHQgaW50byBibG9ja3MgYmFzZWQgb24gSFRNTCBibG9jayBlbGVtZW50cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBzcGxpdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gQSBsaXN0IG9mIGJsb2NrcyBiYXNlZCBvbiBIVE1MIGJsb2NrIGVsZW1lbnRzLlxuICovXG5mdW5jdGlvbiBnZXRCbG9ja3ModGV4dCkge1xuICAgIHZhciBibG9ja3MgPSBbXSxcbiAgICAgICAgZGVwdGggPSAwLFxuICAgICAgICBibG9ja1N0YXJ0VGFnID0gXCJcIixcbiAgICAgICAgY3VycmVudEJsb2NrID0gXCJcIixcbiAgICAgICAgYmxvY2tFbmRUYWcgPSBcIlwiO1xuICAgIC8vIFJlbW92ZSBhbGwgY29tbWVudHMgYmVjYXVzZSBpdCBpcyB2ZXJ5IGhhcmQgdG8gdG9rZW5pemUgdGhlbS5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGNvbW1lbnRSZWdleCwgXCJcIik7XG4gICAgY3JlYXRlVG9rZW5pemVyKCk7XG4gICAgaHRtbEJsb2NrVG9rZW5pemVyLm9uVGV4dCh0ZXh0KTtcbiAgICBodG1sQmxvY2tUb2tlbml6ZXIuZW5kKCk7XG4gICAgZm9yRWFjaCh0b2tlbnMsIGZ1bmN0aW9uICh0b2tlbiwgaSkge1xuICAgICAgICB2YXIgbmV4dFRva2VuID0gdG9rZW5zW2kgKyAxXTtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiY29udGVudFwiOlxuICAgICAgICAgICAgY2FzZSBcImdyZWF0ZXItdGhhbi1zaWduLWNvbnRlbnRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmUtc3RhcnRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmUtZW5kXCI6XG4gICAgICAgICAgICBjYXNlIFwib3RoZXItdGFnXCI6XG4gICAgICAgICAgICBjYXNlIFwib3RoZXItZWxlbWVudC1zdGFydFwiOlxuICAgICAgICAgICAgY2FzZSBcIm90aGVyLWVsZW1lbnQtZW5kXCI6XG4gICAgICAgICAgICBjYXNlIFwiZ3JlYXRlciB0aGFuIHNpZ25cIjpcbiAgICAgICAgICAgICAgICBpZiAoIW5leHRUb2tlbiB8fCBkZXB0aCA9PT0gMCAmJiAobmV4dFRva2VuLnR5cGUgPT09IFwiYmxvY2stc3RhcnRcIiB8fCBuZXh0VG9rZW4udHlwZSA9PT0gXCJibG9jay1lbmRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJsb2NrICs9IHRva2VuLnNyYztcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tTdGFydFRhZyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCbG9jayA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGJsb2NrRW5kVGFnID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2sgKz0gdG9rZW4uc3JjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJibG9jay1zdGFydFwiOlxuICAgICAgICAgICAgICAgIGlmIChkZXB0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJsb2NrLnRyaW0oKSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzLnB1c2goY3VycmVudEJsb2NrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2sgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBibG9ja0VuZFRhZyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgICAgICAgICAgYmxvY2tTdGFydFRhZyA9IHRva2VuLnNyYztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJibG9jay1lbmRcIjpcbiAgICAgICAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICAgICAgICAgIGJsb2NrRW5kVGFnID0gdG9rZW4uc3JjO1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogV2UgdHJ5IHRvIG1hdGNoIHRoZSBtb3N0IGRlZXAgYmxvY2tzIHNvIGRpc2NhcmQgYW55IG90aGVyIGJsb2NrcyB0aGF0IGhhdmUgYmVlbiBzdGFydGVkIGJ1dCBub3RcbiAgICAgICAgICAgICAgICAgKiBmaW5pc2hlZC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoXCJcIiAhPT0gYmxvY2tTdGFydFRhZyAmJiBcIlwiICE9PSBibG9ja0VuZFRhZykge1xuICAgICAgICAgICAgICAgICAgICBibG9ja3MucHVzaChibG9ja1N0YXJ0VGFnICsgY3VycmVudEJsb2NrICsgYmxvY2tFbmRUYWcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJcIiAhPT0gY3VycmVudEJsb2NrLnRyaW0oKSkge1xuICAgICAgICAgICAgICAgICAgICBibG9ja3MucHVzaChjdXJyZW50QmxvY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBibG9ja1N0YXJ0VGFnID0gXCJcIjtcbiAgICAgICAgICAgICAgICBjdXJyZW50QmxvY2sgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGJsb2NrRW5kVGFnID0gXCJcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGVzIEhUTUwgd2l0aCB0b28gbWFueSBjbG9zaW5nIHRhZ3MuXG4gICAgICAgIGlmIChkZXB0aCA8IDApIHtcbiAgICAgICAgICAgIGRlcHRoID0gMDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBibG9ja3M7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBibG9ja0VsZW1lbnRzOiBibG9ja0VsZW1lbnRzLFxuICAgIGlubGluZUVsZW1lbnRzOiBpbmxpbmVFbGVtZW50cyxcbiAgICBpc0Jsb2NrRWxlbWVudDogaXNCbG9ja0VsZW1lbnQsXG4gICAgaXNJbmxpbmVFbGVtZW50OiBpc0lubGluZUVsZW1lbnQsXG4gICAgZ2V0QmxvY2tzOiBtZW1vaXplKGdldEJsb2Nrcylcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odG1sLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHRtbC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdHJhbnNpdGlvbldvcmRzID0gcmVxdWlyZShcIi4vdHJhbnNpdGlvbldvcmRzLmpzXCIpKCkuc2luZ2xlV29yZHM7XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCBleGNlcHRpb25zIGZvciB0aGUgcHJvbWluZW50IHdvcmRzIHJlc2VhcmNoZXIuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBmaWxsZWQgd2l0aCBleGNlcHRpb25zLlxuICovXG52YXIgYXJ0aWNsZXMgPSBbXCJkZVwiLCBcImhldFwiLCBcImVlblwiLCBcImRlclwiLCBcImRlc1wiLCBcImRlblwiXTtcbnZhciBjYXJkaW5hbE51bWVyYWxzID0gW1wiZcOpblwiLCBcIsOpw6luXCIsIFwidHdlZVwiLCBcImRyaWVcIiwgXCJ2aWVyXCIsIFwidmlqZlwiLCBcInplc1wiLCBcInpldmVuXCIsIFwiYWNodFwiLCBcIm5lZ2VuXCIsIFwidGllblwiLCBcImVsZlwiLCBcInR3YWFsZlwiLCBcImRlcnRpZW5cIiwgXCJ2ZWVydGllblwiLCBcInZpamZ0aWVuXCIsIFwiemVzdGllblwiLCBcInpldmVudGllblwiLCBcImFjaHR0aWVuXCIsIFwibmVnZW50aWVuXCIsIFwidHdpbnRpZ1wiLCBcImhvbmRlcmRcIiwgXCJob25kZXJkZW5cIiwgXCJkdWl6ZW5kXCIsIFwiZHVpemVuZGVuXCIsIFwibWlsam9lblwiLCBcIm1pbGpvZW5lblwiLCBcImJpbGpvZW5cIiwgXCJiaWxqb2VuZW5cIl07XG52YXIgb3JkaW5hbE51bWVyYWxzID0gW1wiZWVyc3RlXCIsIFwidHdlZWRlXCIsIFwiZGVyZGVcIiwgXCJ2aWVyZGVcIiwgXCJ2aWpmZGVcIiwgXCJ6ZXNkZVwiLCBcInpldmVuZGVcIiwgXCJhY2h0c3RlXCIsIFwibmVnZW5kZVwiLCBcInRpZW5kZVwiLCBcImVsZmRlXCIsIFwidHdhYWxmZGVcIiwgXCJkZXJ0aWVuZGVcIiwgXCJ2ZWVydGllbmRlXCIsIFwidmlqZnRpZW5kZVwiLCBcInplc3RpZW5kZVwiLCBcInpldmVudGllbmRlXCIsIFwiYWNodHRpZW5kZVwiLCBcIm5lZ2VudGllbmRlXCIsIFwidHdpbnN0aWdzdGVcIl07XG4vLyAnSGV0JyBpcyBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIGFydGljbGVzLlxudmFyIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlID0gW1wiaWtcIiwgXCJqZVwiLCBcImppalwiLCBcImhpalwiLCBcInplXCIsIFwid2VcIiwgXCJ3aWpcIiwgXCJqdWxsaWVcIiwgXCJ6aWpcIiwgXCJ1XCIsIFwiZ2VcIiwgXCJnaWpcIiwgXCJtZW5cIl07XG52YXIgcGVyc29uYWxQcm9ub3Vuc0FjY3VzYXRpdmUgPSBbXCJtaWpcIiwgXCJqb3VcIiwgXCJoZW1cIiwgXCJoYWFyXCIsIFwiaGVuXCIsIFwiaHVuXCIsIFwidXdcIl07XG52YXIgZGVtb25zdHJhdGl2ZVByb25vdW5zID0gW1wiZGl0XCIsIFwiZGF0XCIsIFwiZGV6ZVwiLCBcImRpZVwiLCBcInplbGZcIl07XG4vLyBXaGF0IHRvIGRvIHdpdGggJ3ppam4nLCBzaW5jZSBpdCBpcyBhbHNvIGEgdmVyYj9cbnZhciBwb3NzZXNzaXZlUHJvbm91bnMgPSBbXCJtaWpuXCIsIFwibWlqbmVcIiwgXCJqb3V3XCIsIFwiam91d2VcIiwgXCJ6aWpuZVwiLCBcImhhcmVcIiwgXCJvbnNcIiwgXCJvbnplXCIsIFwiaHVubmVcIiwgXCJ1d2VcIiwgXCJlbGthYXJzXCIsIFwiZWxrYW5kZXJzXCJdO1xudmFyIHF1YW50aWZpZXJzID0gW1wiYWxsZVwiLCBcInNvbW1pZ2VcIiwgXCJzb21taWdlblwiLCBcIndlaW5pZ1wiLCBcIndlaW5pZ2VcIiwgXCJ3ZWluaWdlblwiLCBcInZlZWxcIiwgXCJ2ZWxlXCIsIFwidmVsZW5cIiwgXCJnZWVuXCIsIFwiYmVldGplXCIsIFwiZWxrZVwiLCBcImVsa1wiLCBcImdlbm9lZ1wiLCBcIm1lZXJcIiwgXCJtZWVzdFwiLCBcIm1lZXN0ZVwiLCBcIm1lZXN0ZW5cIiwgXCJwYWFyXCIsIFwiem92ZWVsXCIsIFwiZW5rZWxlXCIsIFwiZW5rZWxlblwiLCBcInpvdmVlbHN0ZVwiLCBcImhvZXZlZWxzdGVcIiwgXCJsYWF0c3RlXCIsIFwibGFhdHN0ZW5cIiwgXCJpZWRlcmVcIiwgXCJhbGxlbWFhbFwiLCBcInpla2VyZVwiLCBcImFuZGVyXCIsIFwiYW5kZXJlXCIsIFwiZ2VuZVwiLCBcImVuaWdcIiwgXCJlbmlnZVwiLCBcInZlcnNjaGVpZGVuZVwiLCBcInZlcnNjaGlsbGVuZGVcIiwgXCJ2b2xkb2VuZGVcIiwgXCJhbGxlcmxlaVwiLCBcImFsbGVyaGFuZGVcIiwgXCJlbmVybGVpXCIsIFwiZW5lcmhhbmRlXCIsIFwiYmVpZGVybGVpXCIsIFwiYmVpZGVyaGFuZGVcIiwgXCJ0d2Vlw6tybGVpXCIsIFwidHdlZcOrcmhhbmRlXCIsIFwiZHJpZcOrcmxlaVwiLCBcImRyaWXDq3JoYW5kZVwiLCBcInZlbGVybGVpXCIsIFwidmVsZXJoYW5kZVwiLCBcIm1lbmlnZXJsZWlcIiwgXCJtZW5pZ2VyaGFuZGVcIiwgXCJlbmlnZXJsZWlcIiwgXCJlbmlnZXJoYW5kZVwiLCBcImdlbmVybGVpXCIsIFwiZ2VuZXJoYW5kZVwiXTtcbnZhciByZWZsZXhpdmVQcm9ub3VucyA9IFtcIm1lemVsZlwiLCBcIm1panplbGZcIiwgXCJqZXplbGZcIiwgXCJqb3V6ZWxmXCIsIFwiemljaHplbGZcIiwgXCJoYWFyemVsZlwiLCBcImhlbXplbGZcIiwgXCJvbnN6ZWxmXCIsIFwianVsbGllemVsZlwiLCBcImhlbnplbGZcIiwgXCJodW56ZWxmXCIsIFwidXplbGZcIiwgXCJ6aWNoXCJdO1xudmFyIHJlY2lwcm9jYWxQcm9ub3VucyA9IFtcIm1la2FhclwiLCBcImVsa2FhclwiLCBcImVsa2FuZGVyXCIsIFwibWVrYW5kZXJcIl07XG52YXIgaW5kZWZpbml0ZVByb25vdW5zID0gW1wiaWVkZXJlZW5cIiwgXCJpZWRlclwiLCBcImVlbmllZGVyXCIsIFwiYWxsZW1hblwiLCBcImFsbGVuXCIsIFwiYWxsZXNcIiwgXCJpZW1hbmRcIiwgXCJuaWVtYW5kXCIsIFwiaWV0c1wiLCBcIm5pZXRzXCIsIFwibWVuaWdlZW5cIl07XG52YXIgaW5kZWZpbml0ZVByb25vdW5zUG9zc2Vzc2l2ZSA9IFtcImllZGVyc1wiLCBcImFsbGVyXCIsIFwiaWVkZXJlZW5zXCIsIFwiZWVuaWVkZXJzXCJdO1xudmFyIHJlbGF0aXZlUHJvbm91bnMgPSBbXCJ3ZWxrZVwiLCBcIndlbGtcIiwgXCJ3YXRcIiwgXCJ3aWVcIiwgXCJ3aWVuc1wiLCBcIndpZXJcIl07XG52YXIgaW50ZXJyb2dhdGl2ZVByb0FkdmVyYnMgPSBbXCJob2VcIiwgXCJ3YWFyb21cIiwgXCJ3YWFyXCIsIFwiaG9lem9cIiwgXCJob2V2ZWVsXCJdO1xudmFyIHByb25vbWluYWxBZHZlcmJzID0gW1wiZGFhcmFhblwiLCBcImRhYXJhY2h0ZXJcIiwgXCJkYWFyYWZcIiwgXCJkYWFyYmlqXCIsIFwiZGFhcmJpbm5lblwiLCBcImRhYXJib3ZlblwiLCBcImRhYXJidWl0ZW5cIiwgXCJkYWFyZG9vcmhlZW5cIiwgXCJkYWFyaGVlblwiLCBcImRhYXJpblwiLCBcImRhYXJqZWdlbnNcIiwgXCJkYWFybWVkZVwiLCBcImRhYXJuYWFyXCIsIFwiZGFhcm5hYXJ0b2VcIiwgXCJkYWFyb210cmVudFwiLCBcImRhYXJvbmRlclwiLCBcImRhYXJvcFwiLCBcImRhYXJvdmVyXCIsIFwiZGFhcm92ZXJoZWVuXCIsIFwiZGFhcnJvbmRcIiwgXCJkYWFydGVnZW5cIiwgXCJkYWFydHVzc2VuXCIsIFwiZGFhcnR1c3NlbnVpdFwiLCBcImRhYXJ1aXRcIiwgXCJkYWFydmFuXCIsIFwiZGFhcnZhbmRhYW5cIiwgXCJlcmFhblwiLCBcImVyYWNodGVyXCIsIFwiZXJhY2h0ZXJhYW5cIiwgXCJlcmFmXCIsIFwiZXJiaWpcIiwgXCJlcmJpbm5lblwiLCBcImVyYm92ZW5cIiwgXCJlcmJ1aXRlblwiLCBcImVyZG9vclwiLCBcImVyZG9vcmhlZW5cIiwgXCJlcmhlZW5cIiwgXCJlcmluXCIsIFwiZXJqZWdlbnNcIiwgXCJlcm1lZGVcIiwgXCJlcm1lZVwiLCBcImVybmFcIiwgXCJlcm5hYXJcIiwgXCJlcm5hYXJ0b2VcIiwgXCJlcm5hYXN0XCIsIFwiZXJvbVwiLCBcImVyb210cmVudFwiLCBcImVyb25kZXJcIiwgXCJlcm9uZGVyZG9vclwiLCBcImVyb3BcIiwgXCJlcm9wYWZcIiwgXCJlcm9wdWl0XCIsIFwiZXJvdmVyXCIsIFwiZXJvdmVyaGVlblwiLCBcImVycm9uZFwiLCBcImVydGVnZW5cIiwgXCJlcnRlZ2VuYWFuXCIsIFwiZXJ0b2VcIiwgXCJlcnR1c3NlblwiLCBcImVydHVzc2VudWl0XCIsIFwiZXJ1aXRcIiwgXCJlcnZhblwiLCBcImVydmFuZGFhblwiLCBcImVydmFuZG9vclwiLCBcImVydm9vclwiLCBcImhpZXJhYW5cIiwgXCJoaWVyYWNodGVyXCIsIFwiaGllcmFmXCIsIFwiaGllcmJpalwiLCBcImhpZXJiaW5uZW5cIiwgXCJoaWVyYm92ZW5cIiwgXCJoaWVyYnVpdGVuXCIsIFwiaGllcmRvb3JcIiwgXCJoaWVyZG9vcmhlZW5cIiwgXCJoaWVyaGVlblwiLCBcImhpZXJpblwiLCBcImhpZXJqZWdlbnNcIiwgXCJoaWVybGFuZ3NcIiwgXCJoaWVybWVkZVwiLCBcImhpZXJtZWVcIiwgXCJoaWVybmFcIiwgXCJoaWVybmFhclwiLCBcImhpZXJuYWFydG9lXCIsIFwiaGllcm5hYXN0XCIsIFwiaGllcm9taGVlblwiLCBcImhpZXJvbXRyZW50XCIsIFwiaGllcm9uZGVyXCIsIFwiaGllcm9wXCIsIFwiaGllcm92ZXJcIiwgXCJoaWVyb3ZlcmhlZW5cIiwgXCJoaWVycm9uZFwiLCBcImhpZXJ0ZWdlblwiLCBcImhpZXJ0b2VcIiwgXCJoaWVydHVzc2VuXCIsIFwiaGllcnR1c3NlbnVpdFwiLCBcImhpZXJ1aXRcIiwgXCJoaWVydmFuXCIsIFwiaGllcnZhbmRhYW5cIiwgXCJoaWVydm9vclwiLCBcInZhbmRhYW5cIiwgXCJ3YWFyYWFuXCIsIFwid2FhcmFjaHRlclwiLCBcIndhYXJhZlwiLCBcIndhYXJiaWpcIiwgXCJ3YWFyYm92ZW5cIiwgXCJ3YWFyYnVpdGVuXCIsIFwid2FhcmRvb3JoZWVuXCIsIFwid2FhcmhlZW5cIiwgXCJ3YWFyaW5cIiwgXCJ3YWFyamVnZW5zXCIsIFwid2Fhcm1lZGVcIiwgXCJ3YWFybmFcIiwgXCJ3YWFybmFhclwiLCBcIndhYXJuYWFydG9lXCIsIFwid2Fhcm5hYXN0XCIsIFwid2Fhcm9wXCIsIFwid2Fhcm92ZXJcIiwgXCJ3YWFyb3ZlcmhlZW5cIiwgXCJ3YWFycm9uZFwiLCBcIndhYXJ0ZWdlblwiLCBcIndhYXJ0ZWdlbmluXCIsIFwid2FhcnRvZVwiLCBcIndhYXJ0dXNzZW5cIiwgXCJ3YWFydHVzc2VudWl0XCIsIFwid2FhcnVpdFwiLCBcIndhYXJ2YW5cIiwgXCJ3YWFydmFuZGFhblwiLCBcIndhYXJ2b29yXCJdO1xudmFyIGxvY2F0aXZlQWR2ZXJicyA9IFtcImRhYXJcIiwgXCJoaWVyXCIsIFwiZ2luZGVyXCIsIFwiZGFhcmdpbmRzXCIsIFwiZ2luZHNcIiwgXCJ2ZXJcIiwgXCJ2ZXJhZlwiLCBcImVyZ2Vuc1wiLCBcIm5lcmdlbnNcIiwgXCJvdmVyYWxcIiwgXCJkaWNodGJpalwiLCBcImtvcnRiaWpcIl07XG52YXIgZmlsdGVyZWRQYXNzaXZlQXV4aWxpYXJpZXMgPSBbXCJ3b3JkXCIsIFwid29yZHRcIiwgXCJ3ZXJkXCIsIFwid2VyZGVuXCIsIFwiYmVuXCIsIFwiYmVudFwiLCBcImlzXCIsIFwid2FzXCIsIFwid2FyZW5cIl07XG52YXIgcGFzc2l2ZUF1eGlsaWFyaWVzSW5maW5pdGl2ZSA9IFtcIndvcmRlblwiLCBcInppam5cIl07XG52YXIgb3RoZXJBdXhpbGlhcmllcyA9IFtcImhlYlwiLCBcImhlYnRcIiwgXCJoZWVmdFwiLCBcImhhZGRlblwiLCBcImhhZFwiLCBcImt1blwiLCBcImthblwiLCBcImt1bnRcIiwgXCJrb25cIiwgXCJrb25kZW5cIiwgXCJtYWdcIiwgXCJtb2NodFwiLCBcIm1vY2h0ZW5cIiwgXCJkaWVuXCIsIFwiZGllbnRcIiwgXCJkaWVuZGVcIiwgXCJkaWVuZGVuXCIsIFwibW9ldFwiLCBcIm1vZXN0XCIsIFwibW9lc3RlblwiLCBcImdhXCIsIFwiZ2FhdFwiLCBcImdpbmdcIiwgXCJnaW5nZW5cIl07XG52YXIgb3RoZXJBdXhpbGlhcmllc0luZmluaXRpdmUgPSBbXCJoZWJiZW5cIiwgXCJrdW5uZW5cIiwgXCJtb2dlblwiLCBcImRpZW5lblwiLCBcIm1vZXRlblwiLCBcImdhYW5cIl07XG4vLyAnVsOzw7Nya29tZW4nIChhcHBlYXIpIGlzIG5vdCBpbmNsdWRlZCwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIGZpbHRlciBvdXQgJ3Zvb3Jrw7NtZW4nIChwcmV2ZW50KS5cbnZhciBjb3B1bGEgPSBbXCJibGlqa3RcIiwgXCJibGlqa1wiLCBcImJsZWVrXCIsIFwiYmxla2VuXCIsIFwiZ2VibGVrZW5cIiwgXCJkdW5rdFwiLCBcImR1bmtcIiwgXCJkdW5rdGVcIiwgXCJkdW5rdGVuXCIsIFwiZ2VkdW5rdFwiLCBcImhlZXRcIiwgXCJoZWV0dGVcIiwgXCJoZWV0dGVuXCIsIFwiZ2VoZXRlblwiLCBcImxpamt0XCIsIFwibGlqa1wiLCBcImdlbGVrZW5cIiwgXCJsZWVrXCIsIFwibGVrZW5cIiwgXCJzY2hpam5cIiwgXCJzY2hpam50XCIsIFwic2NoZWVuXCIsIFwic2NoZW5lblwiLCBcInRvZXNjaGVlblwiLCBcInRvZXNjaGlqbnRcIiwgXCJ0b2VzY2hpam5cIiwgXCJ0b2VzY2hlbmVuXCJdO1xudmFyIGNvcHVsYUluZmluaXRpdmUgPSBbXCJibGlqa2VuXCIsIFwiZHVua2VuXCIsIFwiaGV0ZW5cIiwgXCJsaWprZW5cIiwgXCJzY2hpam5lblwiLCBcInRvZXNjaGlqbmVuXCJdO1xudmFyIHByZXBvc2l0aW9ucyA9IFtcIsOgXCIsIFwiYWFuXCIsIFwiYWFuZ2FhbmRlXCIsIFwiYWNodGVyXCIsIFwiYmVoYWx2ZVwiLCBcImJlaG91ZGVuc1wiLCBcImJlbmVkZW5cIiwgXCJiZW5ldmVuc1wiLCBcImJlbm9vcmRlblwiLCBcImJlbm9vcmRvb3N0ZW5cIiwgXCJiZW5vb3Jkd2VzdGVuXCIsIFwiYmVvb3N0ZW5cIiwgXCJiZXRyZWZmZW5kZVwiLCBcImJld2VzdGVuXCIsIFwiYmV6aWpkZW5cIiwgXCJiZXp1aWRlblwiLCBcImJlenVpZG9vc3RlblwiLCBcImJlenVpZHdlc3RlblwiLCBcImJpalwiLCBcImJpbm5lblwiLCBcImJsaWprZW5zXCIsIFwiYm92ZW5cIiwgXCJib3ZlbmFhblwiLCBcImJ1aXRlblwiLCBcImNpcmNhXCIsIFwiY29uZm9ybVwiLCBcImNvbnRyYVwiLCBcImN1bVwiLCBcImRhbmt6aWpcIiwgXCJkb29yXCIsIFwiZ2VkdXJlbmRlXCIsIFwiZ2V6aWVuXCIsIFwiaW5cIiwgXCJpbmdldm9sZ2VcIiwgXCJpbnpha2VcIiwgXCJqZWdlbnNcIiwgXCJrcmFjaHRlbnNcIiwgXCJsYW5nc1wiLCBcImx1aWRlbnNcIiwgXCJtZXRcIiwgXCJtaWRkZWxzXCIsIFwibmFcIiwgXCJuYWFyXCIsIFwibmFhc3RcIiwgXCJuYWJpalwiLCBcIm5hbWVuc1wiLCBcIm5ldmVuc1wiLCBcIm5pZXR0ZWdlbnN0YWFuZGVcIiwgXCJub3BlbnNcIiwgXCJvbVwiLCBcIm9tc3RyZWVrc1wiLCBcIm9tdHJlbnRcIiwgXCJvbmRlclwiLCBcIm9uZGVyYWFuXCIsIFwib25nZWFjaHRcIiwgXCJvbnZlcm1pbmRlcmRcIiwgXCJvcFwiLCBcIm92ZXJcIiwgXCJvdmVyZWVua29tc3RpZ1wiLCBcInBlclwiLCBcInBsdXNcIiwgXCJwb3N0XCIsIFwicmljaHRpbmdcIiwgXCJyb25kXCIsIFwicm9uZG9tXCIsIFwic3BpanRzXCIsIFwic3RhYW5kZVwiLCBcInRlXCIsIFwidGVnZW5cIiwgXCJ0ZWdlbm92ZXJcIiwgXCJ0ZW5cIiwgXCJ0ZXJcIiwgXCJ0aWpkZW5zXCIsIFwidG90XCIsIFwidHVzc2VuXCIsIFwidWl0XCIsIFwidmFuXCIsIFwidmFuYWZcIiwgXCJ2YW51aXRcIiwgXCJ2ZXJzdXNcIiwgXCJ2aWFcIiwgXCJ2aXMtw6AtdmlzXCIsIFwidm9sZ2Vuc1wiLCBcInZvb3JcIiwgXCJ2b29yYmlqXCIsIFwid2VnZW5zXCIsIFwiemlqZGVuc1wiLCBcInpvbmRlclwiXTtcbi8vIE1hbnkgcHJlcG9zaXRpb25hbCBhZHZlcmJzIGFyZSBhbHJlYWR5IGxpc3RlZCBhcyBwcmVwb3NpdGlvbi5cbnZhciBwcmVwb3NpdGlvbmFsQWR2ZXJicyA9IFtcImFmXCIsIFwiaGVlblwiLCBcIm1lZVwiLCBcInRvZVwiLCBcImFjaHRlcm9wXCIsIFwib25kZXJpblwiLCBcInZvb3JpblwiLCBcImJvdmVub3BcIiwgXCJidWl0ZW5vcFwiLCBcImFjaHRlcmFhblwiLCBcIm9uZGVyb3BcIiwgXCJiaW5uZW5pblwiLCBcInRldm9yZW5cIl07XG52YXIgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zID0gW1wiZW5cIiwgXCJhbHNtZWRlXCIsIFwib2ZcIiwgXCJvZndlbFwiLCBcImVuL29mXCJdO1xuLyogJ1pvd2VsJyBhbmQgJ2FscycgYXJlIHBhcnQgb2YgJ3pvd2VsLi4uYWxzJywgJ2V2ZW5taW4nIGlzIHBhcnQgb2YgJ2V2ZW5taW4uLi5hbHMnLCAnem9taW4nIGlzIHBhcnQgb2YgJ3pvbWluLi4uYWxzJyxcbiAnaGV0emlqJyBpcyBwYXJ0IG9mICdoZXR6aWouLi5oZXR6aWonLiAqL1xudmFyIGNvcnJlbGF0aXZlQ29uanVuY3Rpb25zID0gW1wiem93ZWxcIiwgXCJldmVubWluXCIsIFwiem9taW5cIiwgXCJoZXR6aWpcIl07XG52YXIgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucyA9IFtcInZlcm1pdHNcIiwgXCJkZXdpamxcIiwgXCJkb3JvZGllblwiLCBcIm5hYXJkaWVuXCIsIFwibmFkZW1hYWxcIiwgXCJvdmVybWl0c1wiLCBcIndpamxcIiwgXCJlZXJcIiwgXCJlZXJkYXRcIiwgXCJhbGVlclwiLCBcInZvb3JhbGVlclwiLCBcImFsdm9yZW5zXCIsIFwidG90ZGF0XCIsIFwiem9sYW5nXCIsIFwic2luZHNcIiwgXCJzZWRlcnRcIiwgXCJpbmdldmFsXCIsIFwidGVud2FyZVwiLCBcImFsaG9ld2VsXCIsIFwiaG9lemVlclwiLCBcInVpdGdlem9uZGVyZFwiLCBcInpvdmVycmVcIiwgXCJ6b3ZlclwiLCBcIm5hYXJnZWxhbmdcIiwgXCJuYWFybWF0ZVwiLCBcImFsc29mXCJdO1xuLy8gVGhlc2UgdmVyYnMgYXJlIGZyZXF1ZW50bHkgdXNlZCBpbiBpbnRlcnZpZXdzIHRvIGluZGljYXRlIHF1ZXN0aW9ucyBhbmQgYW5zd2Vycy5cbnZhciBpbnRlcnZpZXdWZXJicyA9IFtcInplZ3RcIiwgXCJ6ZWlcIiwgXCJ2cmFhZ3RcIiwgXCJ2cm9lZ1wiLCBcImRlbmt0XCIsIFwiZGFjaHRcIiwgXCJzdGVsdFwiLCBcInBsZWl0XCIsIFwicGxlaXR0ZVwiXTtcbi8vIFRoZXNlIHRyYW5zaXRpb24gd29yZHMgd2VyZSBub3QgaW5jbHVkZWQgaW4gdGhlIGxpc3QgZm9yIHRoZSB0cmFuc2l0aW9uIHdvcmQgYXNzZXNzbWVudCBmb3IgdmFyaW91cyByZWFzb25zLlxudmFyIGFkZGl0aW9uYWxUcmFuc2l0aW9uV29yZHMgPSBbXCJhYnNvbHV1dFwiLCBcInpla2VyXCIsIFwib25nZXR3aWpmZWxkXCIsIFwic293aWVzb1wiLCBcIm9ubWlkZGVsaWprXCIsIFwibWV0ZWVuXCIsIFwiaW5jbHVzaWVmXCIsIFwiZGlyZWN0XCIsIFwib2dlbmJsaWtrZWxpamtcIiwgXCJ0ZXJzdG9uZFwiLCBcIm5hdHV1cmxpamtcIiwgXCJ2YW56ZWxmc3ByZWtlbmRcIiwgXCJnZXdvb25saWprXCIsIFwibm9ybWFsaXRlclwiLCBcImRvb3JnYWFuc1wiLCBcIndlcmtlbGlqa1wiLCBcImRhYWR3ZXJrZWxpamtcIiwgXCJpbmRlcmRhYWRcIiwgXCJ3YWFyYWNodGlnXCIsIFwib3ByZWNodFwiLCBcImJpam5hXCIsIFwibWVlc3RhbFwiLCBcIm1pc3NjaGllblwiLCBcIndhYXJzY2hpam5saWprXCIsIFwid2VsbGljaHRcIiwgXCJtb2dlbGlqa1wiLCBcInZlcm1vZWRlbGlqa1wiLCBcImFsbGljaHRcIiwgXCJhYW5uZW1lbGlqa1wiLCBcIm9vcnNwcm9ua2VsaWprXCIsIFwiYWFudmFua2VsaWprXCIsIFwiaW5pdGllZWxcIiwgXCJlaWdlbmxpamtcIiwgXCJmZWl0ZWxpamtcIiwgXCJ3ZXplbmxpamtcIiwgXCJqdWlzdFwiLCBcInJlZWRzXCIsIFwiYWx2YXN0XCIsIFwiYmlqdi5cIiwgXCJ2YWFrXCIsIFwiZGlrd2lqbHNcIiwgXCJ2ZWVsYWxcIiwgXCJnZXJlZ2VsZFwiLCBcIm1lbmlnbWFhbFwiLCBcInJlZ2VsbWF0aWdcIiwgXCJ2ZWVsdnVsZGlnXCIsIFwiZWVudm91ZGlnd2VnXCIsIFwic2ltcGVsd2VnXCIsIFwibG91dGVyXCIsIFwia29ydHdlZ1wiLCBcInN0b213ZWdcIiwgXCJkb213ZWdcIiwgXCJ6b21hYXJcIiwgXCJldmVudHVlZWxcIiwgXCJtb2dlbGlqa2Vyd2lqc1wiLCBcImVlbnNcIiwgXCJ3ZWxlZW5zXCIsIFwibm9vaXRcIiwgXCJvb2l0XCIsIFwiYW5kZXJzXCIsIFwibW9tZW50ZWVsXCIsIFwidGhhbnNcIiwgXCJpbmNpZGVudGVlbFwiLCBcInRyb3V3ZW5zXCIsIFwiZWxkZXJzXCIsIFwidm9sZ2VuZFwiLCBcInJlY2VudFwiLCBcIm9ubGFuZ3NcIiwgXCJyZWNlbnRlbGlqa1wiLCBcImxhYXRzdFwiLCBcInpvanVpc3RcIiwgXCJyZWxhdGllZlwiLCBcImR1aWRlbGlqa1wiLCBcIm92ZXJkdWlkZWxpamtcIiwgXCJrbGFhcmJsaWprZWxpamtcIiwgXCJuYWRydWtrZWxpamtcIiwgXCJvZ2Vuc2NoaWpubGlqa1wiLCBcImtlbm5lbGlqa1wiLCBcInNjaGlqbmJhYXJcIiwgXCJhbHdlZXJcIiwgXCJjb250aW51XCIsIFwiaGVyaGFhbGRlbGlqa1wiLCBcIm5vZ1wiLCBcInN0ZWVkc1wiLCBcIm51XCJdO1xuLy8gJ3ZyaWonIGlzIG5vdCBpbmNsdWRlZCBiZWNhdXNlIGl0IGFsc28gbWVhbnMgJ2ZyZWUnLlxudmFyIGludGVuc2lmaWVycyA9IFtcInplZXJcIiwgXCJlcmdcIiwgXCJyZWRlbGlqa1wiLCBcImZsaW5rXCIsIFwidGlra2VsdGplXCIsIFwiYmlqem9uZGVyXCIsIFwiZXJuc3RpZ1wiLCBcImVuaWdzemluc1wiLCBcInpvXCIsIFwidGFtZWxpamtcIiwgXCJub2dhbFwiLCBcImJlaG9vcmxpamtcIiwgXCJ6d2FhclwiLCBcImhlZWxcIiwgXCJoZWxlXCIsIFwicmV1emVcIiwgXCJidWl0ZW5nZXdvb25cIiwgXCJvbnR6ZXR0ZW5kXCIsIFwidnJlc2VsaWprXCJdO1xuLy8gVGhlc2UgdmVyYnMgY29udmV5IGxpdHRsZSBtZWFuaW5nLlxudmFyIGRlbGV4aWNhbGl6ZWRWZXJicyA9IFtcImxhYXRcIiwgXCJsaWV0XCIsIFwibGlldGVuXCIsIFwia29tXCIsIFwia29tdFwiLCBcImt3YW1cIiwgXCJrd2FtZW5cIiwgXCJtYWFrdFwiLCBcIm1hYWtcIiwgXCJtYWFrdGVcIiwgXCJtYWFrdGVuXCIsIFwiZG9lXCIsIFwiZG9ldFwiLCBcImRlZWRcIiwgXCJkZWRlblwiLCBcInZpbmR0XCIsIFwidmluZFwiLCBcInZvbmRcIiwgXCJ2b25kZW5cIl07XG52YXIgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSA9IFtcImxhdGVuXCIsIFwia29tZW5cIiwgXCJtYWtlblwiLCBcImRvZW5cIiwgXCJ2aW5kZW5cIl07XG4vKiBUaGVzZSBhZGplY3RpdmVzIGFuZCBhZHZlcmJzIGFyZSBzbyBnZW5lcmFsLCB0aGV5IHNob3VsZCBuZXZlciBiZSBzdWdnZXN0ZWQgYXMgYSAoc2luZ2xlKSBrZXl3b3JkLlxuS2V5d29yZCBjb21iaW5hdGlvbnMgY29udGFpbmluZyB0aGVzZSBhZGplY3RpdmVzL2FkdmVyYnMgYXJlIGZpbmUuICovXG52YXIgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzID0gW1wibmlldXdcIiwgXCJuaWV1d2VcIiwgXCJuaWV1d2VyXCIsIFwibmlldXdlcmVcIiwgXCJuaWV1d3N0XCIsIFwibmlldXdzdGVcIiwgXCJvdWRcIiwgXCJvdWRlXCIsIFwib3VkZXJcIiwgXCJvdWRlcmVcIiwgXCJvdWRzdFwiLCBcIm91ZHN0ZVwiLCBcInZvcmlnXCIsIFwidm9yaWdlXCIsIFwiZ29lZFwiLCBcImdvZWRlXCIsIFwiYmV0ZXJcIiwgXCJiZXRlcmVcIiwgXCJiZXN0XCIsIFwiYmVzdGVcIiwgXCJncm9vdFwiLCBcImdyb3RlXCIsIFwiZ3JvdGVyXCIsIFwiZ3JvdGVyZVwiLCBcImdyb290c3RcIiwgXCJncm9vdHN0ZVwiLCBcIm1ha2tlbGlqa1wiLCBcIm1ha2tlbGlqa2VcIiwgXCJtYWtrZWxpamtlclwiLCBcIm1ha2tlbGlqa2VyZVwiLCBcIm1ha2tlbGlqa3N0XCIsIFwibWFra2VsaWpzdGVcIiwgXCJnZW1ha2tlbGlqa1wiLCBcImdlbWFra2VsaWprZVwiLCBcImdlbWFra2VsaWprZXJcIiwgXCJnZW1ha2tlbGlqa2VyZVwiLCBcImdlbWFra2VsaWprc3RcIiwgXCJnZW1ha2tlbGlqc3RlXCIsIFwic2ltcGVsXCIsIFwic2ltcGVsZVwiLCBcInNpbXBlbGVyXCIsIFwic2ltcGVsZXJlXCIsIFwic2ltcGVsc3RcIiwgXCJzaW1wZWxzdGVcIiwgXCJzbmVsXCIsIFwic25lbGxlXCIsIFwic25lbGxlclwiLCBcInNuZWxsZXJlXCIsIFwic25lbHN0XCIsIFwic25lbHN0ZVwiLCBcInZlcnJlXCIsIFwidmVyZGVyXCIsIFwidmVyZGVyZVwiLCBcInZlcnN0XCIsIFwidmVyc3RlXCIsIFwibGFuZ1wiLCBcImxhbmdlXCIsIFwibGFuZ2VyXCIsIFwibGFuZ2VyZVwiLCBcImxhbmdzdFwiLCBcImxhbmdzdGVcIiwgXCJoYXJkXCIsIFwiaGFyZGVcIiwgXCJoYXJkZXJcIiwgXCJoYXJkZXJlXCIsIFwiaGFyZHN0XCIsIFwiaGFyZHN0ZVwiLCBcIm1pbmRlclwiLCBcIm1pbmRlcmVcIiwgXCJtaW5zdFwiLCBcIm1pbnN0ZVwiLCBcImVpZ2VuXCIsIFwibGFhZ1wiLCBcImxhZ2VcIiwgXCJsYWdlclwiLCBcImxhZ2VyZVwiLCBcImxhYWdzdFwiLCBcImxhYWdzdGVcIiwgXCJob29nXCIsIFwiaG9nZVwiLCBcImhvZ2VyXCIsIFwiaG9nZXJlXCIsIFwiaG9vZ3N0XCIsIFwiaG9vZ3N0ZVwiLCBcImtsZWluXCIsIFwia2xlaW5lXCIsIFwia2xlaW5lclwiLCBcImtsZWluZXJlXCIsIFwia2xlaW5zdFwiLCBcImtsZWluc3RlXCIsIFwia29ydFwiLCBcImtvcnRlXCIsIFwia29ydGVyXCIsIFwia29ydGVyZVwiLCBcImtvcnRzdFwiLCBcImtvcnRzdGVcIiwgXCJoZXJoYWFsZGVsaWprZVwiLCBcImRpcmVjdGVcIiwgXCJvbmdldmVlclwiLCBcInNsZWNodFwiLCBcInNsZWNodGVcIiwgXCJzbGVjaHRlclwiLCBcInNsZWNodGVyZVwiLCBcInNsZWNodHN0XCIsIFwic2xlY2h0c3RlXCIsIFwienVsa2VcIiwgXCJ6dWxrXCIsIFwiem8nblwiLCBcInp1bGtzXCIsIFwiZXJcIiwgXCJleHRyZWVtXCIsIFwiZXh0cmVtZVwiLCBcImJpamJlaG9yZW5kZVwiLCBcImJpamJlaG9yZW5kXCIsIFwibmlldFwiXTtcbnZhciBpbnRlcmplY3Rpb25zID0gW1wib2hcIiwgXCJ3YXV3XCIsIFwiaMOoaMOoXCIsIFwiaMOoXCIsIFwiaMOpXCIsIFwiYXVcIiwgXCJhaVwiLCBcImphamFcIiwgXCJ3ZWxqYVwiLCBcImphd2VsXCIsIFwic3NzdFwiLCBcImhlcmVtaWpudGlqZFwiLCBcImhlbWVsdGplbGllZlwiLCBcImFoYVwiLCBcImZvZWlcIiwgXCJobW1cIiwgXCJub3VcIiwgXCJuZWVcIiwgXCJ0amFcIiwgXCJuamFcIiwgXCJva2lkb1wiLCBcImhvXCIsIFwiaGFsdFwiLCBcImtvbWFhblwiLCBcImtvbW9wXCIsIFwidmVycmVrXCIsIFwibmlldHdhYXJcIiwgXCJicnJcIiwgXCJvZWZcIiwgXCJhY2hcIiwgXCJvY2hcIiwgXCJiYWhcIiwgXCJlbmZpblwiLCBcImFmaWpuXCIsIFwiaGFoYVwiLCBcImhpaGlcIiwgXCJoYXRzamllXCIsIFwiaGF0c2pvZVwiLCBcImhtXCIsIFwidHJpbmdcIiwgXCJ2cm9lbVwiLCBcImJvZW1cIiwgXCJob3BsYVwiXTtcbi8vIFRoZXNlIHdvcmRzIGFuZCBhYmJyZXZpYXRpb25zIGFyZSBmcmVxdWVudGx5IHVzZWQgaW4gcmVjaXBlcyBpbiBsaXN0cyBvZiBpbmdyZWRpZW50cy5cbnZhciByZWNpcGVXb3JkcyA9IFtcIm1sXCIsIFwiY2xcIiwgXCJkbFwiLCBcImxcIiwgXCJ0bFwiLCBcImVsXCIsIFwibWdcIiwgXCJnXCIsIFwiZ3JcIiwgXCJrZ1wiLCBcImNhXCIsIFwidGhlZWxcIiwgXCJtaW5cIiwgXCJzZWNcIiwgXCJ1dXJcIl07XG52YXIgdGltZVdvcmRzID0gW1wic2Vjb25kZVwiLCBcInNlY29uZGVzXCIsIFwic2Vjb25kZW5cIiwgXCJtaW51dXRcIiwgXCJtaW51dGVuXCIsIFwidXVyXCIsIFwidXJlblwiLCBcImRhZ1wiLCBcImRhZ2VuXCIsIFwid2Vla1wiLCBcIndla2VuXCIsIFwibWFhbmRcIiwgXCJtYWFuZGVuXCIsIFwiamFhclwiLCBcImphcmVuXCIsIFwidmFuZGFhZ1wiLCBcIm1vcmdlblwiLCBcIm92ZXJtb3JnZW5cIiwgXCJnaXN0ZXJlblwiLCBcImVlcmdpc3RlcmVuXCIsIFwiJ3NcIiwgXCJtb3JnZW5zXCIsIFwiYXZvbmRzXCIsIFwibWlkZGFnc1wiLCBcIm5hY2h0c1wiXTtcbnZhciB2YWd1ZU5vdW5zID0gW1wiZGluZ1wiLCBcImRpbmdlblwiLCBcIm1hbmllclwiLCBcIm1hbmllcmVuXCIsIFwiaXRlbVwiLCBcIml0ZW1zXCIsIFwia2VlclwiLCBcIm1hYWxcIiwgXCJwcm9jZW50XCIsIFwiZ2V2YWxcIiwgXCJhc3BlY3RcIiwgXCJwZXJzb29uXCIsIFwicGVyc29uZW5cIiwgXCJkZWVsXCJdO1xudmFyIG1pc2NlbGxhbmVvdXMgPSBbXCJ3ZWxcIiwgXCJqYVwiLCBcIm5lZW5cIiwgXCJva8OpXCIsIFwib2tlXCIsIFwib2tlZVwiLCBcIm9rXCIsIFwiem9pZXRzXCIsIFwi4oKsXCIsIFwiZXVyb1wiXTtcbnZhciB0aXRsZXNQcmVjZWRpbmcgPSBbXCJtZXZyXCIsIFwiZGhyXCIsIFwibXJcIiwgXCJkclwiLCBcInByb2ZcIl07XG52YXIgdGl0bGVzRm9sbG93aW5nID0gW1wianJcIiwgXCJzclwiXTtcbi8qXG5FeHBvcnRzIGFsbCBmdW5jdGlvbiB3b3JkcyBjb25jYXRlbmF0ZWQsIGFuZCBzcGVjaWZpYyB3b3JkIGNhdGVnb3JpZXMgYW5kIGNhdGVnb3J5IGNvbWJpbmF0aW9uc1xudG8gYmUgdXNlZCBhcyBmaWx0ZXJzIGZvciB0aGUgcHJvbWluZW50IHdvcmRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBUaGVzZSB3b3JkIGNhdGVnb3JpZXMgYXJlIGZpbHRlcmVkIGF0IHRoZSBlbmRpbmcgb2Ygd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQXRCZWdpbm5pbmc6IFtdLmNvbmNhdChwYXNzaXZlQXV4aWxpYXJpZXNJbmZpbml0aXZlLCBvdGhlckF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgY29wdWxhSW5maW5pdGl2ZSwgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSksXG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgYXQgdGhlIGVuZGluZyBvZiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBdEVuZGluZzogW10uY29uY2F0KG9yZGluYWxOdW1lcmFscywgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzKSxcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgb2Ygd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQXRCZWdpbm5pbmdBbmRFbmRpbmc6IFtdLmNvbmNhdChhcnRpY2xlcywgcHJlcG9zaXRpb25zLCBjb29yZGluYXRpbmdDb25qdW5jdGlvbnMsIGRlbW9uc3RyYXRpdmVQcm9ub3VucywgaW50ZW5zaWZpZXJzLCBxdWFudGlmaWVycyksXG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgZXZlcnl3aGVyZSB3aXRoaW4gd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQW55d2hlcmU6IFtdLmNvbmNhdCh0cmFuc2l0aW9uV29yZHMsIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlLCBwZXJzb25hbFByb25vdW5zQWNjdXNhdGl2ZSwgcmVmbGV4aXZlUHJvbm91bnMsIGludGVyamVjdGlvbnMsIGNhcmRpbmFsTnVtZXJhbHMsIGZpbHRlcmVkUGFzc2l2ZUF1eGlsaWFyaWVzLCBvdGhlckF1eGlsaWFyaWVzLCBjb3B1bGEsIGludGVydmlld1ZlcmJzLCBkZWxleGljYWxpemVkVmVyYnMsIGluZGVmaW5pdGVQcm9ub3VucywgY29ycmVsYXRpdmVDb25qdW5jdGlvbnMsIHN1Ym9yZGluYXRpbmdDb25qdW5jdGlvbnMsIGludGVycm9nYXRpdmVQcm9BZHZlcmJzLCByZWxhdGl2ZVByb25vdW5zLCBsb2NhdGl2ZUFkdmVyYnMsIG1pc2NlbGxhbmVvdXMsIHByZXBvc2l0aW9uYWxBZHZlcmJzLCBwcm9ub21pbmFsQWR2ZXJicywgcmVjaXBlV29yZHMsIHRpbWVXb3JkcywgdmFndWVOb3VucywgcmVjaXByb2NhbFByb25vdW5zLCBwb3NzZXNzaXZlUHJvbm91bnMpLFxuICAgICAgICAvLyBUaGlzIGV4cG9ydCBjb250YWlucyBhbGwgb2YgdGhlIGFib3ZlIHdvcmRzLlxuICAgICAgICBhbGw6IFtdLmNvbmNhdChhcnRpY2xlcywgY2FyZGluYWxOdW1lcmFscywgb3JkaW5hbE51bWVyYWxzLCBkZW1vbnN0cmF0aXZlUHJvbm91bnMsIHBvc3Nlc3NpdmVQcm9ub3VucywgcmVmbGV4aXZlUHJvbm91bnMsIHJlY2lwcm9jYWxQcm9ub3VucywgcGVyc29uYWxQcm9ub3Vuc05vbWluYXRpdmUsIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlLCBxdWFudGlmaWVycywgaW5kZWZpbml0ZVByb25vdW5zLCBpbmRlZmluaXRlUHJvbm91bnNQb3NzZXNzaXZlLCByZWxhdGl2ZVByb25vdW5zLCBpbnRlcnJvZ2F0aXZlUHJvQWR2ZXJicywgcHJvbm9taW5hbEFkdmVyYnMsIGxvY2F0aXZlQWR2ZXJicywgcHJlcG9zaXRpb25hbEFkdmVyYnMsIGZpbHRlcmVkUGFzc2l2ZUF1eGlsaWFyaWVzLCBwYXNzaXZlQXV4aWxpYXJpZXNJbmZpbml0aXZlLCBvdGhlckF1eGlsaWFyaWVzLCBvdGhlckF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgY29wdWxhLCBjb3B1bGFJbmZpbml0aXZlLCBwcmVwb3NpdGlvbnMsIGNvb3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgY29ycmVsYXRpdmVDb25qdW5jdGlvbnMsIHN1Ym9yZGluYXRpbmdDb25qdW5jdGlvbnMsIGludGVydmlld1ZlcmJzLCB0cmFuc2l0aW9uV29yZHMsIGFkZGl0aW9uYWxUcmFuc2l0aW9uV29yZHMsIGludGVuc2lmaWVycywgZGVsZXhpY2FsaXplZFZlcmJzLCBkZWxleGljYWxpemVkVmVyYnNJbmZpbml0aXZlLCBpbnRlcmplY3Rpb25zLCBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMsIHJlY2lwZVdvcmRzLCB2YWd1ZU5vdW5zLCBtaXNjZWxsYW5lb3VzLCB0aXRsZXNQcmVjZWRpbmcsIHRpdGxlc0ZvbGxvd2luZylcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9uV29yZHMuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbldvcmRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzaW5nbGVXb3JkcyA9IFtcImFhbmdlemllblwiLCBcImFsXCIsIFwiYWxkdXNcIiwgXCJhbGxlcmVlcnN0XCIsIFwiYWxzXCIsIFwiYWxzb29rXCIsIFwiYW5kZXJ6aWpkc1wiLCBcImJpamdldm9sZ1wiLCBcImJpanZvb3JiZWVsZFwiLCBcImJvdmVuZGllblwiLCBcImNvbmNsdWRlcmVuZFwiLCBcImRhYXJkb29yXCIsIFwiZGFhcmVudGVnZW5cIiwgXCJkYWFybWVlXCIsIFwiZGFhcm5hXCIsIFwiZGFhcm5hYXN0XCIsIFwiZGFhcm9tXCIsIFwiZGFhcnRvZVwiLCBcImRhYXJ2b29yXCIsIFwiZGFkZWxpamtcIiwgXCJkYW5cIiwgXCJkZXNvbmRhbmtzXCIsIFwiZGllbm92ZXJlZW5rb21zdGlnXCIsIFwiZGllbnRlZ2V2b2xnZVwiLCBcImRvY2hcIiwgXCJkb29yZGF0XCIsIFwiZHVzXCIsIFwiZWNodGVyXCIsIFwiZWVyc3RcIiwgXCJldmVuYWxzXCIsIFwiZXZlbmVlbnNcIiwgXCJldmVuemVlclwiLCBcImhpZXJvbVwiLCBcImhvZXdlbFwiLCBcImltbWVyc1wiLCBcImluZGllblwiLCBcImludGVnZW5kZWVsXCIsIFwiaW50dXNzZW5cIiwgXCJrb3J0b21cIiwgXCJsYXRlclwiLCBcIm1hYXJcIiwgXCJtaXRzXCIsIFwibmFkYXRcIiwgXCJuYW1lbGlqa1wiLCBcIm5ldCBhbHNcIiwgXCJuaWV0dGVtaW5cIiwgXCJub2NoXCIsIFwib2ZzY2hvb25cIiwgXCJvbWRhdFwiLCBcIm9uZGFua3NcIiwgXCJvbmRlcnR1c3NlblwiLCBcIm9va1wiLCBcIm9wZGF0XCIsIFwicmVzdW1lcmVuZFwiLCBcInNhbWVuZ2V2YXRcIiwgXCJzYW1lbnZhdHRlbmRcIiwgXCJ0ZWdlbndvb3JkaWdcIiwgXCJ0ZW5laW5kZVwiLCBcInRlbnppalwiLCBcInRlcndpamxcIiwgXCJ0ZXZlbnNcIiwgXCJ0b2NoXCIsIFwidG9lblwiLCBcInVpdGVpbmRlbGlqa1wiLCBcInZhbndlZ2VcIiwgXCJ2ZXJ2b2xnZW5zXCIsIFwidm9vcmFmZ2FhbmRcIiwgXCJ2b29yYWxzbm9nXCIsIFwidm9vcmRhdFwiLCBcInZvb3J0c1wiLCBcInZyb2VnZXJcIiwgXCJ3YWFyZG9vclwiLCBcIndhYXJtZWVcIiwgXCJ3YWFyb25kZXJcIiwgXCJ3YW5uZWVyXCIsIFwid2FudFwiLCBcInpvYWxzXCIsIFwiem9kYXRcIiwgXCJ6b2RvZW5kZVwiLCBcInpvZHJhXCJdO1xudmFyIG11bHRpcGxlV29yZHMgPSBbXCJhYW4gZGUgYW5kZXJlIGthbnRcIiwgXCJhYW4gZGUgZW5lIGthbnRcIiwgXCJhYW5nZW5vbWVuIGRhdFwiLCBcImFsIG1ldCBhbFwiLCBcImFsbGVzIGFmd2VnZW5kXCIsIFwiYWxsZXMgYmlqIGVsa2FhclwiLCBcImFsbGVzIGluIGFhbm1lcmtpbmcgbmVtZW5kXCIsIFwiYWxzIGdldm9sZyB2YW5cIiwgXCJhbmRlcnMgZ2V6ZWdkXCIsIFwiZGFhciBzdGFhdCB0ZWdlbm92ZXJcIiwgXCJkYWFyYmlqIGtvbXRcIiwgXCJkYWFydWl0IHZvbGd0XCIsIFwiZGF0IGJldGVrZW50XCIsIFwiZGF0IGJsaWprdCB1aXRcIiwgXCJkZSBvb3J6YWFrIGRhYXJ2YW4gaXNcIiwgXCJkZSBvb3J6YWFrIGhpZXJ2YW4gaXNcIiwgXCJkb29yIG1pZGRlbCB2YW5cIiwgXCJlZW4gdm9vcmJlZWxkIGhpZXJ2YW5cIiwgXCJlZW4gdm9vcmJlZWxkIHZhblwiLCBcImdlc3RlbGQgZGF0XCIsIFwiaGV0emVsZmRlIGFsc1wiLCBcImhpZXJ1aXQga3VubmVuIHdlIGFmbGVpZGVuXCIsIFwiaGllcnVpdCB2b2xndFwiLCBcImhvZSBoZXQgb29rIHppalwiLCBcImluIGRlIGRlcmRlIHBsYWF0c1wiLCBcImluIGRlIGVlcnN0ZSBwbGFhdHNcIiwgXCJpbiBkZSB0d2VlZGUgcGxhYXRzXCIsIFwiaW4gw6nDqW4gd29vcmRcIiwgXCJpbiBoZXQgYmlqem9uZGVyXCIsIFwiaW4gaGV0IGdldmFsIGRhdFwiLCBcImluIHBsYWF0cyB2YW5cIiwgXCJpbiB0ZWdlbnN0ZWxsaW5nIHRvdFwiLCBcImluIHZlcmdlbGlqa2luZyBtZXRcIiwgXCJtYWFyIG9va1wiLCBcIm1ldCBhbHMgZG9lbFwiLCBcIm1ldCBhbmRlcmUgd29vcmRlblwiLCBcIm1ldCBiZWh1bHAgdmFuXCIsIFwibWV0IGRlIGJlZG9lbGluZ1wiLCBcIm5lZW0gbm91XCIsIFwibmV0IGFsc1wiLCBcIm9tIGtvcnQgdGUgZ2FhblwiLCBcIm9uZGVyIGFuZGVyZVwiLCBcIm9wIGRlemVsZmRlIHdpanplXCIsIFwic3RlbCBkYXRcIiwgXCJ0ZSBkYW5rZW4gYWFuXCIsIFwidGUgd2lqdGVuIGFhblwiLCBcInRlbiBkZXJkZVwiLCBcInRlbiBlZXJzdGVcIiwgXCJ0ZW4gZ2V2b2xnZSB2YW5cIiwgXCJ0ZW4gc2xvdHRlXCIsIFwidGVuIHR3ZWVkZVwiLCBcInRlciBjb25jbHVzaWVcIiwgXCJ0ZXIgaWxsdXN0cmF0aWVcIiwgXCJ0ZXIgdmVyZHVpZGVsaWpraW5nXCIsIFwidG90IG5vZyB0b2VcIiwgXCJ0b3Qgc2xvdFwiLCBcInZhbmRhYXIgZGF0XCIsIFwidmVyZ2VsZWtlbiBtZXRcIiwgXCJ2b29yIGhldCBnZXZhbCBkYXRcIl07XG4vKipcbiAqIFJldHVybnMgbGlzdHMgd2l0aCB0cmFuc2l0aW9uIHdvcmRzIHRvIGJlIHVzZWQgYnkgdGhlIGFzc2Vzc21lbnRzLlxuICogQHJldHVybnMge09iamVjdH0gVGhlIG9iamVjdCB3aXRoIHRyYW5zaXRpb24gd29yZCBsaXN0cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2luZ2xlV29yZHM6IHNpbmdsZVdvcmRzLFxuICAgICAgICBtdWx0aXBsZVdvcmRzOiBtdWx0aXBsZVdvcmRzLFxuICAgICAgICBhbGxXb3Jkczogc2luZ2xlV29yZHMuY29uY2F0KG11bHRpcGxlV29yZHMpXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uV29yZHMuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uV29yZHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGZpbHRlcmVkUGFzc2l2ZUF1eGlsaWFyaWVzID0gcmVxdWlyZShcIi4vcGFzc2l2ZXZvaWNlL2F1eGlsaWFyaWVzLmpzXCIpKCkuZmlsdGVyZWRBdXhpbGlhcmllcztcbnZhciBub3RGaWx0ZXJlZFBhc3NpdmVBdXhpbGlhcmllcyA9IHJlcXVpcmUoXCIuL3Bhc3NpdmV2b2ljZS9hdXhpbGlhcmllcy5qc1wiKSgpLm5vdEZpbHRlcmVkQXV4aWxpYXJpZXM7XG52YXIgdHJhbnNpdGlvbldvcmRzID0gcmVxdWlyZShcIi4vdHJhbnNpdGlvbldvcmRzLmpzXCIpKCkuc2luZ2xlV29yZHM7XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggZXhjZXB0aW9ucyBmb3IgdGhlIHByb21pbmVudCB3b3JkcyByZXNlYXJjaGVyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2JqZWN0IGZpbGxlZCB3aXRoIGV4Y2VwdGlvbiBhcnJheXMuXG4gKi9cbnZhciBhcnRpY2xlcyA9IFtcInRoZVwiLCBcImFuXCIsIFwiYVwiXTtcbnZhciBjYXJkaW5hbE51bWVyYWxzID0gW1wib25lXCIsIFwidHdvXCIsIFwidGhyZWVcIiwgXCJmb3VyXCIsIFwiZml2ZVwiLCBcInNpeFwiLCBcInNldmVuXCIsIFwiZWlnaHRcIiwgXCJuaW5lXCIsIFwidGVuXCIsIFwiZWxldmVuXCIsIFwidHdlbHZlXCIsIFwidGhpcnRlZW5cIiwgXCJmb3VydGVlblwiLCBcImZpZnRlZW5cIiwgXCJzaXh0ZWVuXCIsIFwic2V2ZW50ZWVuXCIsIFwiZWlnaHRlZW5cIiwgXCJuaW5ldGVlblwiLCBcInR3ZW50eVwiLCBcImh1bmRyZWRcIiwgXCJodW5kcmVkc1wiLCBcInRob3VzYW5kXCIsIFwidGhvdXNhbmRzXCIsIFwibWlsbGlvblwiLCBcIm1pbGxpb25zXCIsIFwiYmlsbGlvblwiLCBcImJpbGxpb25zXCJdO1xudmFyIG9yZGluYWxOdW1lcmFscyA9IFtcImZpcnN0XCIsIFwic2Vjb25kXCIsIFwidGhpcmRcIiwgXCJmb3VydGhcIiwgXCJmaWZ0aFwiLCBcInNpeHRoXCIsIFwic2V2ZW50aFwiLCBcImVpZ2h0aFwiLCBcIm5pbnRoXCIsIFwidGVudGhcIiwgXCJlbGV2ZW50aFwiLCBcInR3ZWxmdGhcIiwgXCJ0aGlydGVlbnRoXCIsIFwiZm91cnRlZW50aFwiLCBcImZpZnRlZW50aFwiLCBcInNpeHRlZW50aFwiLCBcInNldmVudGVlbnRoXCIsIFwiZWlnaHRlZW50aFwiLCBcIm5pbmV0ZWVudGhcIiwgXCJ0d2VudGlldGhcIl07XG52YXIgcGVyc29uYWxQcm9ub3Vuc05vbWluYXRpdmUgPSBbXCJpXCIsIFwieW91XCIsIFwiaGVcIiwgXCJzaGVcIiwgXCJpdFwiLCBcIndlXCIsIFwidGhleVwiXTtcbnZhciBwZXJzb25hbFByb25vdW5zQWNjdXNhdGl2ZSA9IFtcIm1lXCIsIFwiaGltXCIsIFwidXNcIiwgXCJ0aGVtXCJdO1xudmFyIGRlbW9uc3RyYXRpdmVQcm9ub3VucyA9IFtcInRoaXNcIiwgXCJ0aGF0XCIsIFwidGhlc2VcIiwgXCJ0aG9zZVwiXTtcbnZhciBwb3NzZXNzaXZlUHJvbm91bnMgPSBbXCJteVwiLCBcInlvdXJcIiwgXCJoaXNcIiwgXCJoZXJcIiwgXCJpdHNcIiwgXCJ0aGVpclwiLCBcIm91clwiLCBcIm1pbmVcIiwgXCJ5b3Vyc1wiLCBcImhlcnNcIiwgXCJ0aGVpcnNcIiwgXCJvdXJzXCJdO1xudmFyIHF1YW50aWZpZXJzID0gW1wiYWxsXCIsIFwic29tZVwiLCBcIm1hbnlcIiwgXCJsb3RcIiwgXCJsb3RzXCIsIFwidG9uXCIsIFwidG9uc1wiLCBcImJpdFwiLCBcIm5vXCIsIFwiZXZlcnlcIiwgXCJlbm91Z2hcIiwgXCJsaXR0bGVcIiwgXCJtdWNoXCIsIFwibW9yZVwiLCBcIm1vc3RcIiwgXCJwbGVudHlcIiwgXCJzZXZlcmFsXCIsIFwiZmV3XCIsIFwiZmV3ZXJcIiwgXCJraW5kXCIsIFwia2luZHNcIl07XG52YXIgcmVmbGV4aXZlUHJvbm91bnMgPSBbXCJteXNlbGZcIiwgXCJ5b3Vyc2VsZlwiLCBcImhpbXNlbGZcIiwgXCJoZXJzZWxmXCIsIFwiaXRzZWxmXCIsIFwib25lc2VsZlwiLCBcIm91cnNlbHZlc1wiLCBcInlvdXJzZWx2ZXNcIiwgXCJ0aGVtc2VsdmVzXCJdO1xudmFyIGluZGVmaW5pdGVQcm9ub3VucyA9IFtcIm5vbmVcIiwgXCJub2JvZHlcIiwgXCJldmVyeW9uZVwiLCBcImV2ZXJ5Ym9keVwiLCBcInNvbWVvbmVcIiwgXCJzb21lYm9keVwiLCBcImFueW9uZVwiLCBcImFueWJvZHlcIiwgXCJub3RoaW5nXCIsIFwiZXZlcnl0aGluZ1wiLCBcInNvbWV0aGluZ1wiLCBcImFueXRoaW5nXCIsIFwiZWFjaFwiLCBcIm90aGVyXCIsIFwid2hhdGV2ZXJcIiwgXCJ3aGljaGV2ZXJcIiwgXCJ3aG9ldmVyXCIsIFwid2hvbWV2ZXJcIiwgXCJ3aG9tc29ldmVyXCIsIFwid2hvc29ldmVyXCIsIFwib3RoZXJzXCIsIFwibmVpdGhlclwiLCBcImJvdGhcIiwgXCJlaXRoZXJcIiwgXCJhbnlcIiwgXCJzdWNoXCJdO1xudmFyIGluZGVmaW5pdGVQcm9ub3Vuc1Bvc3Nlc3NpdmUgPSBbXCJvbmUnc1wiLCBcIm5vYm9keSdzXCIsIFwiZXZlcnlvbmUnc1wiLCBcImV2ZXJ5Ym9keSdzXCIsIFwic29tZW9uZSdzXCIsIFwic29tZWJvZHknc1wiLCBcImFueW9uZSdzXCIsIFwiYW55Ym9keSdzXCIsIFwibm90aGluZydzXCIsIFwiZXZlcnl0aGluZydzXCIsIFwic29tZXRoaW5nJ3NcIiwgXCJhbnl0aGluZydzXCIsIFwid2hvZXZlcidzXCIsIFwib3RoZXJzJ1wiLCBcIm90aGVyJ3NcIiwgXCJhbm90aGVyJ3NcIiwgXCJuZWl0aGVyJ3NcIiwgXCJlaXRoZXInc1wiXTtcbnZhciBpbnRlcnJvZ2F0aXZlRGV0ZXJtaW5lcnMgPSBbXCJ3aGljaFwiLCBcIndoYXRcIiwgXCJ3aG9zZVwiXTtcbnZhciBpbnRlcnJvZ2F0aXZlUHJvbm91bnMgPSBbXCJ3aG9cIiwgXCJ3aG9tXCJdO1xudmFyIGludGVycm9nYXRpdmVQcm9BZHZlcmJzID0gW1wid2hlcmVcIiwgXCJob3dcIiwgXCJ3aHlcIiwgXCJ3aGV0aGVyXCIsIFwid2hlcmV2ZXJcIiwgXCJ3aHlldmVyXCIsIFwid2hlcmVzb2V2ZXJcIiwgXCJ3aGVuc29ldmVyXCIsIFwiaG93c29ldmVyXCIsIFwid2h5c29ldmVyXCIsIFwid2hhdHNvZXZlclwiLCBcIndoZXJlc29cIiwgXCJ3aG9tc29cIiwgXCJ3aGVuc29cIiwgXCJob3dzb1wiLCBcIndoeXNvXCIsIFwid2hvc29cIiwgXCJ3aGF0c29cIl07XG52YXIgcHJvbm9taW5hbEFkdmVyYnMgPSBbXCJ0aGVyZWZvclwiLCBcInRoZXJlaW5cIiwgXCJoZXJlYnlcIiwgXCJoZXJldG9cIiwgXCJ3aGVyZWluXCIsIFwidGhlcmV3aXRoXCIsIFwiaGVyZXdpdGhcIiwgXCJ3aGVyZXdpdGhcIiwgXCJ0aGVyZWJ5XCJdO1xudmFyIGxvY2F0aXZlQWR2ZXJicyA9IFtcInRoZXJlXCIsIFwiaGVyZVwiLCBcIndoaXRoZXJcIiwgXCJ0aGl0aGVyXCIsIFwiaGl0aGVyXCIsIFwid2hlbmNlXCIsIFwidGhlbmNlXCJdO1xudmFyIGFkdmVyYmlhbEdlbml0aXZlcyA9IFtcImFsd2F5c1wiLCBcIm9uY2VcIiwgXCJ0d2ljZVwiLCBcInRocmljZVwiXTtcbnZhciBvdGhlckF1eGlsaWFyaWVzID0gW1wiY2FuXCIsIFwiY2Fubm90XCIsIFwiY2FuJ3RcIiwgXCJjb3VsZFwiLCBcImNvdWxkbid0XCIsIFwiY291bGQndmVcIiwgXCJkYXJlXCIsIFwiZGFyZXNcIiwgXCJkYXJlZFwiLCBcImRvXCIsIFwiZG9uJ3RcIiwgXCJkb2VzXCIsIFwiZG9lc24ndFwiLCBcImRpZFwiLCBcImRpZG4ndFwiLCBcImRvbmVcIiwgXCJoYXZlXCIsIFwiaGF2ZW4ndFwiLCBcImhhZFwiLCBcImhhZG4ndFwiLCBcImhhc1wiLCBcImhhc24ndFwiLCBcImkndmVcIiwgXCJ5b3UndmVcIiwgXCJ3ZSd2ZVwiLCBcInRoZXkndmVcIiwgXCJpJ2RcIiwgXCJ5b3UnZFwiLCBcImhlJ2RcIiwgXCJzaGUnZFwiLCBcIml0J2RcIiwgXCJ3ZSdkXCIsIFwidGhleSdkXCIsIFwid291bGRcIiwgXCJ3b3VsZG4ndFwiLCBcIndvdWxkJ3ZlXCIsIFwibWF5XCIsIFwibWlnaHRcIiwgXCJtdXN0XCIsIFwibmVlZFwiLCBcIm5lZWRuJ3RcIiwgXCJuZWVkc1wiLCBcIm91Z2h0XCIsIFwic2hhbGxcIiwgXCJzaGFsbG4ndFwiLCBcInNoYW4ndFwiLCBcInNob3VsZFwiLCBcInNob3VsZG4ndFwiLCBcIndpbGxcIiwgXCJ3b24ndFwiLCBcImknbGxcIiwgXCJ5b3UnbGxcIiwgXCJoZSdsbFwiLCBcInNoZSdsbFwiLCBcIml0J2xsXCIsIFwid2UnbGxcIiwgXCJ0aGV5J2xsXCIsIFwidGhlcmUnc1wiLCBcInRoZXJlJ3JlXCIsIFwidGhlcmUnbGxcIiwgXCJoZXJlJ3NcIiwgXCJoZXJlJ3JlXCIsIFwidGhlcmUnbGxcIl07XG52YXIgY29wdWxhID0gW1wiYXBwZWFyXCIsIFwiYXBwZWFyc1wiLCBcImFwcGVhcmVkXCIsIFwiYmVjb21lXCIsIFwiYmVjb21lc1wiLCBcImJlY2FtZVwiLCBcImNvbWVcIiwgXCJjb21lc1wiLCBcImNhbWVcIiwgXCJrZWVwXCIsIFwia2VlcHNcIiwgXCJrZXB0XCIsIFwicmVtYWluXCIsIFwicmVtYWluc1wiLCBcInJlbWFpbmVkXCIsIFwic3RheVwiLCBcInN0YXlzXCIsIFwic3RheWVkXCIsIFwidHVyblwiLCBcInR1cm5zXCIsIFwidHVybmVkXCJdO1xuLy8gVGhlc2UgdmVyYnMgc2hvdWxkIG9ubHkgYmUgaW5jbHVkZWQgYXQgdGhlIGJlZ2lubmluZyBvZiBjb21iaW5hdGlvbnMuXG52YXIgY29udGludW91c1ZlcmJzID0gW1wiZG9pbmdcIiwgXCJkYXJpbmdcIiwgXCJoYXZpbmdcIiwgXCJhcHBlYXJpbmdcIiwgXCJiZWNvbWluZ1wiLCBcImNvbWluZ1wiLCBcImtlZXBpbmdcIiwgXCJyZW1haW5pbmdcIiwgXCJzdGF5aW5nXCIsIFwic2F5aW5nXCIsIFwiYXNraW5nXCIsIFwic3RhdGluZ1wiLCBcInNlZW1pbmdcIiwgXCJsZXR0aW5nXCIsIFwibWFraW5nXCIsIFwic2V0dGluZ1wiLCBcInNob3dpbmdcIiwgXCJwdXR0aW5nXCIsIFwiYWRkaW5nXCIsIFwiZ29pbmdcIiwgXCJ1c2luZ1wiLCBcInRyeWluZ1wiLCBcImNvbnRhaW5pbmdcIl07XG52YXIgcHJlcG9zaXRpb25zID0gW1wiaW5cIiwgXCJmcm9tXCIsIFwid2l0aFwiLCBcInVuZGVyXCIsIFwidGhyb3VnaG91dFwiLCBcImF0b3BcIiwgXCJmb3JcIiwgXCJvblwiLCBcIm9mXCIsIFwidG9cIiwgXCJhYm9hcmRcIiwgXCJhYm91dFwiLCBcImFib3ZlXCIsIFwiYWJyZWFzdFwiLCBcImFic2VudFwiLCBcImFjcm9zc1wiLCBcImFkamFjZW50XCIsIFwiYWZ0ZXJcIiwgXCJhZ2FpbnN0XCIsIFwiYWxvbmdcIiwgXCJhbG9uZ3NpZGVcIiwgXCJhbWlkXCIsIFwibWlkXCIsIFwiYW1vbmdcIiwgXCJhcHJvcG9zXCIsIFwiYXB1ZFwiLCBcImFyb3VuZFwiLCBcImFzXCIsIFwiYXN0cmlkZVwiLCBcImF0XCIsIFwib250b3BcIiwgXCJhZm9yZVwiLCBcInRvZm9yZVwiLCBcImJlaGluZFwiLCBcImFoaW5kXCIsIFwiYmVsb3dcIiwgXCJhYmxvd1wiLCBcImJlbmVhdGhcIiwgXCJuZWF0aFwiLCBcImJlc2lkZVwiLCBcImJldHdlZW5cIiwgXCJhdHdlZW5cIiwgXCJiZXlvbmRcIiwgXCJheW9uZFwiLCBcImJ5XCIsIFwiY2hlelwiLCBcImNpcmNhXCIsIFwic3BpdGVcIiwgXCJkb3duXCIsIFwiZXhjZXB0XCIsIFwiaW50b1wiLCBcImxlc3NcIiwgXCJsaWtlXCIsIFwibWludXNcIiwgXCJuZWFyXCIsIFwibmVhcmVyXCIsIFwibmVhcmVzdFwiLCBcImFuZWFyXCIsIFwibm90d2l0aHN0YW5kaW5nXCIsIFwib2ZmXCIsIFwib250b1wiLCBcIm9wcG9zaXRlXCIsIFwib3V0XCIsIFwib3V0ZW5cIiwgXCJvdmVyXCIsIFwicGFzdFwiLCBcInBlclwiLCBcInByZVwiLCBcInF1YVwiLCBcInNhbnNcIiwgXCJzYXVmXCIsIFwic2l0aGVuY2VcIiwgXCJ0aHJvdWdoXCIsIFwidGhydVwiLCBcInRydW91dFwiLCBcInRvd2FyZFwiLCBcInVuZGVybmVhdGhcIiwgXCJ1cFwiLCBcInVwb25cIiwgXCJ1cHNpZGVcIiwgXCJ2ZXJzdXNcIiwgXCJ2aWFcIiwgXCJ2aXMtw6AtdmlzXCIsIFwid2l0aG91dFwiLCBcImFnb1wiLCBcImFwYXJ0XCIsIFwiYXNpZGVcIiwgXCJhc2xhbnRcIiwgXCJhd2F5XCIsIFwid2l0aGFsXCIsIFwidG93YXJkc1wiLCBcImFtaWRzdFwiLCBcImFtb25nc3RcIiwgXCJtaWRzdFwiLCBcIndoaWxzdFwiXTtcbi8vIE1hbnkgcHJlcG9zaXRpb25hbCBhZHZlcmJzIGFyZSBhbHJlYWR5IGxpc3RlZCBhcyBwcmVwb3NpdGlvbi5cbnZhciBwcmVwb3NpdGlvbmFsQWR2ZXJicyA9IFtcImJhY2tcIiwgXCJ3aXRoaW5cIiwgXCJmb3J3YXJkXCIsIFwiYmFja3dhcmRcIiwgXCJhaGVhZFwiXTtcbnZhciBjb29yZGluYXRpbmdDb25qdW5jdGlvbnMgPSBbXCJhbmRcIiwgXCJvclwiLCBcImFuZC9vclwiLCBcInlldFwiXTtcbi8vICdzb29uZXInIGlzIHBhcnQgb2YgJ25vIHNvb25lci4uLnRoYW4nLCAnanVzdCcgaXMgcGFydCBvZiAnanVzdCBhcy4uLnNvJyxcbi8vICdPbmx5JyBpcyBwYXJ0IG9mICdub3Qgb25seS4uLmJ1dCBhbHNvJy5cbnZhciBjb3JyZWxhdGl2ZUNvbmp1bmN0aW9ucyA9IFtcInNvb25lclwiLCBcImp1c3RcIiwgXCJvbmx5XCJdO1xudmFyIHN1Ym9yZGluYXRpbmdDb25qdW5jdGlvbnMgPSBbXCJpZlwiLCBcImV2ZW5cIl07XG4vLyBUaGVzZSB2ZXJicyBhcmUgZnJlcXVlbnRseSB1c2VkIGluIGludGVydmlld3MgdG8gaW5kaWNhdGUgcXVlc3Rpb25zIGFuZCBhbnN3ZXJzLlxuLy8gJ0NsYWltJywnY2xhaW1zJywgJ3N0YXRlJyBhbmQgJ3N0YXRlcycgYXJlIG5vdCBpbmNsdWRlZCwgYmVjYXVzZSB0aGVzZSB3b3JkcyBhcmUgYWxzbyBub3Vucy5cbnZhciBpbnRlcnZpZXdWZXJicyA9IFtcInNheVwiLCBcInNheXNcIiwgXCJzYWlkXCIsIFwiY2xhaW1lZFwiLCBcImFza1wiLCBcImFza3NcIiwgXCJhc2tlZFwiLCBcInN0YXRlZFwiLCBcImV4cGxhaW5cIiwgXCJleHBsYWluc1wiLCBcImV4cGxhaW5lZFwiLCBcInRoaW5rXCIsIFwidGhpbmtzXCIsIFwidGFsa3NcIiwgXCJ0YWxrZWRcIiwgXCJhbm5vdW5jZXNcIiwgXCJhbm5vdW5jZWRcIiwgXCJ0ZWxsc1wiLCBcInRvbGRcIiwgXCJkaXNjdXNzZXNcIiwgXCJkaXNjdXNzZWRcIiwgXCJzdWdnZXN0c1wiLCBcInN1Z2dlc3RlZFwiLCBcInVuZGVyc3RhbmRzXCIsIFwidW5kZXJzdG9vZFwiXTtcbi8vIFRoZXNlIHRyYW5zaXRpb24gd29yZHMgd2VyZSBub3QgaW5jbHVkZWQgaW4gdGhlIGxpc3QgZm9yIHRoZSB0cmFuc2l0aW9uIHdvcmQgYXNzZXNzbWVudCBmb3IgdmFyaW91cyByZWFzb25zLlxudmFyIGFkZGl0aW9uYWxUcmFuc2l0aW9uV29yZHMgPSBbXCJhZ2FpblwiLCBcImRlZmluaXRlbHlcIiwgXCJldGVybmFsbHlcIiwgXCJleHByZXNzaXZlbHlcIiwgXCJpbnN0ZWFkXCIsIFwiZXhwcmVzc2x5XCIsIFwiaW1tZWRpYXRlbHlcIiwgXCJpbmNsdWRpbmdcIiwgXCJpbnN0YW50bHlcIiwgXCJuYW1lbHlcIiwgXCJuYXR1cmFsbHlcIiwgXCJuZXh0XCIsIFwibm90YWJseVwiLCBcIm5vd1wiLCBcIm5vd2FkYXlzXCIsIFwib3JkaW5hcmlseVwiLCBcInBvc2l0aXZlbHlcIiwgXCJ0cnVseVwiLCBcInVsdGltYXRlbHlcIiwgXCJ1bmlxdWVseVwiLCBcInVzdWFsbHlcIiwgXCJhbG1vc3RcIiwgXCJtYXliZVwiLCBcInByb2JhYmx5XCIsIFwiZ3JhbnRlZFwiLCBcImluaXRpYWxseVwiLCBcInRvb1wiLCBcImFjdHVhbGx5XCIsIFwiYWxyZWFkeVwiLCBcImUuZ1wiLCBcImkuZVwiLCBcIm9mdGVuXCIsIFwicmVndWxhcmx5XCIsIFwic2ltcGx5XCIsIFwib3B0aW9uYWxseVwiLCBcInBlcmhhcHNcIiwgXCJzb21ldGltZXNcIiwgXCJsaWtlbHlcIiwgXCJuZXZlclwiLCBcImV2ZXJcIiwgXCJlbHNlXCIsIFwiaW5hc211Y2hcIiwgXCJwcm92aWRlZFwiLCBcImN1cnJlbnRseVwiLCBcImluY2lkZW50YWxseVwiLCBcImVsc2V3aGVyZVwiLCBcInBhcnRpY3VsYXJcIiwgXCJyZWNlbnRseVwiLCBcInJlbGF0aXZlbHlcIiwgXCJmLmlcIiwgXCJjbGVhcmx5XCIsIFwiYXBwYXJlbnRseVwiXTtcbnZhciBpbnRlbnNpZmllcnMgPSBbXCJoaWdobHlcIiwgXCJ2ZXJ5XCIsIFwicmVhbGx5XCIsIFwiZXh0cmVtZWx5XCIsIFwiYWJzb2x1dGVseVwiLCBcImNvbXBsZXRlbHlcIiwgXCJ0b3RhbGx5XCIsIFwidXR0ZXJseVwiLCBcInF1aXRlXCIsIFwic29tZXdoYXRcIiwgXCJzZXJpb3VzbHlcIiwgXCJmYWlybHlcIiwgXCJmdWxseVwiLCBcImFtYXppbmdseVwiXTtcbi8qIFRoZXNlIHZlcmJzIGNvbnZleSBsaXR0bGUgbWVhbmluZy4gJ1Nob3cnLCAnc2hvd3MnLCAndXNlcycsICdtZWFuaW5nJywgJ3NldCcsICdzZXRzJ1xuIGFyZSBub3QgaW5jbHVkZWQsIGJlY2F1c2UgdGhlc2Ugd29yZHMgY291bGQgYmUgcmVsZXZhbnQgbm91bnMuXG5cbiAqL1xudmFyIGRlbGV4aWNhbGl6ZWRWZXJicyA9IFtcInNlZW1cIiwgXCJzZWVtc1wiLCBcInNlZW1lZFwiLCBcImxldFwiLCBcImxldCdzXCIsIFwibGV0c1wiLCBcIm1ha2VcIiwgXCJtYWtlc1wiLCBcIm1hZGVcIiwgXCJ3YW50XCIsIFwic2hvd2VkXCIsIFwic2hvd25cIiwgXCJnb1wiLCBcImdvZXNcIiwgXCJ3ZW50XCIsIFwiZ29uZVwiLCBcInRha2VcIiwgXCJ0YWtlc1wiLCBcInRvb2tcIiwgXCJ0YWtlblwiLCBcInB1dFwiLCBcInB1dHNcIiwgXCJ1c2VcIiwgXCJ1c2VkXCIsIFwidHJ5XCIsIFwidHJpZXNcIiwgXCJ0cmllZFwiLCBcIm1lYW5cIiwgXCJtZWFuc1wiLCBcIm1lYW50XCIsIFwiY2FsbGVkXCIsIFwiYmFzZWRcIiwgXCJhZGRcIiwgXCJhZGRzXCIsIFwiYWRkZWRcIiwgXCJjb250YWluXCIsIFwiY29udGFpbnNcIiwgXCJjb250YWluZWRcIiwgXCJjb25zaXN0XCIsIFwiY29uc2lzdHNcIiwgXCJjb25zaXN0ZWRcIiwgXCJlbnN1cmVcIiwgXCJlbnN1cmVzXCIsIFwiZW5zdXJlZFwiXTtcbi8vIFRoZXNlIGFkamVjdGl2ZXMgYW5kIGFkdmVyYnMgYXJlIHNvIGdlbmVyYWwsIHRoZXkgc2hvdWxkIG5ldmVyIGJlIHN1Z2dlc3RlZCBhcyBhIChzaW5nbGUpIGtleXdvcmQuXG4vLyBLZXl3b3JkIGNvbWJpbmF0aW9ucyBjb250YWluaW5nIHRoZXNlIGFkamVjdGl2ZXMvYWR2ZXJicyBhcmUgZmluZS5cbnZhciBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMgPSBbXCJuZXdcIiwgXCJuZXdlclwiLCBcIm5ld2VzdFwiLCBcIm9sZFwiLCBcIm9sZGVyXCIsIFwib2xkZXN0XCIsIFwicHJldmlvdXNcIiwgXCJnb29kXCIsIFwid2VsbFwiLCBcImJldHRlclwiLCBcImJlc3RcIiwgXCJiaWdcIiwgXCJiaWdnZXJcIiwgXCJiaWdnZXN0XCIsIFwiZWFzeVwiLCBcImVhc2llclwiLCBcImVhc2llc3RcIiwgXCJmYXN0XCIsIFwiZmFzdGVyXCIsIFwiZmFzdGVzdFwiLCBcImZhclwiLCBcImhhcmRcIiwgXCJoYXJkZXJcIiwgXCJoYXJkZXN0XCIsIFwibGVhc3RcIiwgXCJvd25cIiwgXCJsYXJnZVwiLCBcImxhcmdlclwiLCBcImxhcmdlc3RcIiwgXCJsb25nXCIsIFwibG9uZ2VyXCIsIFwibG9uZ2VzdFwiLCBcImxvd1wiLCBcImxvd2VyXCIsIFwibG93ZXN0XCIsIFwiaGlnaFwiLCBcImhpZ2hlclwiLCBcImhpZ2hlc3RcIiwgXCJyZWd1bGFyXCIsIFwic2ltcGxlXCIsIFwic2ltcGxlclwiLCBcInNpbXBsZXN0XCIsIFwic21hbGxcIiwgXCJzbWFsbGVyXCIsIFwic21hbGxlc3RcIiwgXCJ0aW55XCIsIFwidGluaWVyXCIsIFwidGluaWVzdFwiLCBcInNob3J0XCIsIFwic2hvcnRlclwiLCBcInNob3J0ZXN0XCIsIFwibWFpblwiLCBcImFjdHVhbFwiLCBcIm5pY2VcIiwgXCJuaWNlclwiLCBcIm5pY2VzdFwiLCBcInJlYWxcIiwgXCJzYW1lXCIsIFwiYWJsZVwiLCBcImNlcnRhaW5cIiwgXCJ1c3VhbFwiLCBcInNvLWNhbGxlZFwiLCBcIm1haW5seVwiLCBcIm1vc3RseVwiLCBcInJlY2VudFwiLCBcImFueW1vcmVcIiwgXCJjb21wbGV0ZVwiLCBcImxhdGVseVwiLCBcInBvc3NpYmxlXCIsIFwiY29tbW9ubHlcIiwgXCJjb25zdGFudGx5XCIsIFwiY29udGludWFsbHlcIiwgXCJkaXJlY3RseVwiLCBcImVhc2lseVwiLCBcIm5lYXJseVwiLCBcInNsaWdodGx5XCIsIFwic29tZXdoZXJlXCIsIFwiZXN0aW1hdGVkXCIsIFwibGF0ZXN0XCIsIFwiZGlmZmVyZW50XCIsIFwic2ltaWxhclwiLCBcIndpZGVseVwiLCBcImJhZFwiLCBcIndvcnNlXCIsIFwid29yc3RcIiwgXCJncmVhdFwiLCBcInNwZWNpZmljXCIsIFwiYXZhaWxhYmxlXCIsIFwiYXZlcmFnZVwiLCBcImF3ZnVsXCIsIFwiYXdlc29tZVwiLCBcImJhc2ljXCIsIFwiYmVhdXRpZnVsXCIsIFwiYnVzeVwiLCBcImN1cnJlbnRcIiwgXCJlbnRpcmVcIiwgXCJldmVyeXdoZXJlXCIsIFwiaW1wb3J0YW50XCIsIFwibWFqb3JcIiwgXCJtdWx0aXBsZVwiLCBcIm5vcm1hbFwiLCBcIm5lY2Vzc2FyeVwiLCBcIm9idmlvdXNcIiwgXCJwYXJ0bHlcIiwgXCJzcGVjaWFsXCIsIFwibGFzdFwiLCBcImVhcmx5XCIsIFwiZWFybGllclwiLCBcImVhcmxpZXN0XCIsIFwieW91bmdcIiwgXCJ5b3VuZ2VyXCIsIFwieW91bmdlc3RcIiwgXCJcIl07XG52YXIgaW50ZXJqZWN0aW9ucyA9IFtcIm9oXCIsIFwid293XCIsIFwidHV0LXR1dFwiLCBcInRzay10c2tcIiwgXCJ1Z2hcIiwgXCJ3aGV3XCIsIFwicGhld1wiLCBcInllYWhcIiwgXCJ5ZWFcIiwgXCJzaGhcIiwgXCJvb3BzXCIsIFwib3VjaFwiLCBcImFoYVwiLCBcInlpa2VzXCJdO1xuLy8gVGhlc2Ugd29yZHMgYW5kIGFiYnJldmlhdGlvbnMgYXJlIGZyZXF1ZW50bHkgdXNlZCBpbiByZWNpcGVzIGluIGxpc3RzIG9mIGluZ3JlZGllbnRzLlxudmFyIHJlY2lwZVdvcmRzID0gW1widGJzXCIsIFwidGJzcFwiLCBcInNwa1wiLCBcImxiXCIsIFwicXRcIiwgXCJwa1wiLCBcImJ1XCIsIFwib3pcIiwgXCJwdFwiLCBcIm1vZFwiLCBcImRvelwiLCBcImhyXCIsIFwiZi5nXCIsIFwibWxcIiwgXCJkbFwiLCBcImNsXCIsIFwibFwiLCBcIm1nXCIsIFwiZ1wiLCBcImtnXCIsIFwicXVhcnRcIl07XG52YXIgdGltZVdvcmRzID0gW1wic2Vjb25kc1wiLCBcIm1pbnV0ZVwiLCBcIm1pbnV0ZXNcIiwgXCJob3VyXCIsIFwiaG91cnNcIiwgXCJkYXlcIiwgXCJkYXlzXCIsIFwid2Vla1wiLCBcIndlZWtzXCIsIFwibW9udGhcIiwgXCJtb250aHNcIiwgXCJ5ZWFyXCIsIFwieWVhcnNcIiwgXCJ0b2RheVwiLCBcInRvbW9ycm93XCIsIFwieWVzdGVyZGF5XCJdO1xuLy8gJ1Blb3BsZScgc2hvdWxkIG9ubHkgYmUgcmVtb3ZlZCBpbiBjb21iaW5hdGlvbiB3aXRoICdzb21lJywgJ21hbnknIGFuZCAnZmV3JyAoYW5kIGlzIHRoZXJlZm9yZSBub3QgeWV0IGluY2x1ZGVkIGluIHRoZSBsaXN0IGJlbG93KS5cbnZhciB2YWd1ZU5vdW5zID0gW1widGhpbmdcIiwgXCJ0aGluZ3NcIiwgXCJ3YXlcIiwgXCJ3YXlzXCIsIFwibWF0dGVyXCIsIFwiY2FzZVwiLCBcImxpa2VsaWhvb2RcIiwgXCJvbmVzXCIsIFwicGllY2VcIiwgXCJwaWVjZXNcIiwgXCJzdHVmZlwiLCBcInRpbWVzXCIsIFwicGFydFwiLCBcInBhcnRzXCIsIFwicGVyY2VudFwiLCBcImluc3RhbmNlXCIsIFwiaW5zdGFuY2VzXCIsIFwiYXNwZWN0XCIsIFwiYXNwZWN0c1wiLCBcIml0ZW1cIiwgXCJpdGVtc1wiLCBcImlkZWFcIiwgXCJ0aGVtZVwiLCBcInBlcnNvblwiLCBcImluc3RhbmNlXCIsIFwiaW5zdGFuY2VzXCIsIFwiZGV0YWlsXCIsIFwiZGV0YWlsc1wiLCBcImZhY3RvclwiLCBcImZhY3RvcnNcIiwgXCJkaWZmZXJlbmNlXCIsIFwiZGlmZmVyZW5jZXNcIl07XG4vLyAnTm8nIGlzIGFscmVhZHkgaW5jbHVkZWQgaW4gdGhlIHF1YW50aWZpZXIgbGlzdC5cbnZhciBtaXNjZWxsYW5lb3VzID0gW1wibm90XCIsIFwieWVzXCIsIFwic3VyZVwiLCBcInRvcFwiLCBcImJvdHRvbVwiLCBcIm9rXCIsIFwib2theVwiLCBcImFtZW5cIiwgXCJha2FcIiwgXCJldGNcIiwgXCJldGNldGVyYVwiLCBcInNvcnJ5XCIsIFwicGxlYXNlXCJdO1xudmFyIHRpdGxlc1ByZWNlZGluZyA9IFtcIm1zXCIsIFwibXNzXCIsIFwibXJzXCIsIFwibXJcIiwgXCJkclwiLCBcInByb2ZcIl07XG52YXIgdGl0bGVzRm9sbG93aW5nID0gW1wianJcIiwgXCJzclwiXTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgYXQgdGhlIGVuZGluZyBvZiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBdEVuZGluZzogW10uY29uY2F0KG9yZGluYWxOdW1lcmFscywgY29udGludW91c1ZlcmJzLCBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMpLFxuICAgICAgICAvLyBUaGVzZSB3b3JkIGNhdGVnb3JpZXMgYXJlIGZpbHRlcmVkIGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyBvZiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBdEJlZ2lubmluZ0FuZEVuZGluZzogW10uY29uY2F0KGFydGljbGVzLCBwcmVwb3NpdGlvbnMsIGNvb3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgZGVtb25zdHJhdGl2ZVByb25vdW5zLCBpbnRlbnNpZmllcnMsIHF1YW50aWZpZXJzLCBwb3NzZXNzaXZlUHJvbm91bnMpLFxuICAgICAgICAvLyBUaGVzZSB3b3JkIGNhdGVnb3JpZXMgYXJlIGZpbHRlcmVkIGV2ZXJ5d2hlcmUgd2l0aGluIHdvcmQgY29tYmluYXRpb25zLlxuICAgICAgICBmaWx0ZXJlZEFueXdoZXJlOiBbXS5jb25jYXQodHJhbnNpdGlvbldvcmRzLCBhZHZlcmJpYWxHZW5pdGl2ZXMsIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlLCBwZXJzb25hbFByb25vdW5zQWNjdXNhdGl2ZSwgcmVmbGV4aXZlUHJvbm91bnMsIGludGVyamVjdGlvbnMsIGNhcmRpbmFsTnVtZXJhbHMsIGZpbHRlcmVkUGFzc2l2ZUF1eGlsaWFyaWVzLCBvdGhlckF1eGlsaWFyaWVzLCBjb3B1bGEsIGludGVydmlld1ZlcmJzLCBkZWxleGljYWxpemVkVmVyYnMsIGluZGVmaW5pdGVQcm9ub3VucywgY29ycmVsYXRpdmVDb25qdW5jdGlvbnMsIHN1Ym9yZGluYXRpbmdDb25qdW5jdGlvbnMsIGludGVycm9nYXRpdmVEZXRlcm1pbmVycywgaW50ZXJyb2dhdGl2ZVByb25vdW5zLCBpbnRlcnJvZ2F0aXZlUHJvQWR2ZXJicywgbG9jYXRpdmVBZHZlcmJzLCBtaXNjZWxsYW5lb3VzLCBwcmVwb3NpdGlvbmFsQWR2ZXJicywgcHJvbm9taW5hbEFkdmVyYnMsIHJlY2lwZVdvcmRzLCB0aW1lV29yZHMsIHZhZ3VlTm91bnMpLFxuICAgICAgICAvLyBUaGVzZSBjYXRlZ29yaWVzIGFyZSB1c2VkIGluIHRoZSBwYXNzaXZlIHZvaWNlIGFzc2Vzc21lbnQuIElmIHRoZXkgZGlyZWN0bHkgcHJlY2VkZSBhIHBhcnRpY2lwbGUsIHRoZSBzZW50ZW5jZSBwYXJ0IGlzIG5vdCBwYXNzaXZlLlxuICAgICAgICBjYW5ub3REaXJlY3RseVByZWNlZGVQYXNzaXZlUGFydGljaXBsZTogW10uY29uY2F0KGFydGljbGVzLCBwcmVwb3NpdGlvbnMsIGRlbW9uc3RyYXRpdmVQcm9ub3VucywgcG9zc2Vzc2l2ZVByb25vdW5zLCBvcmRpbmFsTnVtZXJhbHMsIGNvbnRpbnVvdXNWZXJicywgcXVhbnRpZmllcnMpLFxuICAgICAgICAvKlxuICAgICAgICBUaGVzZSBjYXRlZ29yaWVzIGFyZSB1c2VkIGluIHRoZSBwYXNzaXZlIHZvaWNlIGFzc2Vzc21lbnQuIElmIHRoZXkgYXBwZWFyIGJldHdlZW4gYW4gYXV4aWxpYXJ5IGFuZCBhIHBhcnRpY2lwbGUsXG4gICAgICAgIHRoZSBzZW50ZW5jZSBwYXJ0IGlzIG5vdCBwYXNzaXZlLlxuICAgICAgICAqL1xuICAgICAgICBjYW5ub3RCZUJldHdlZW5QYXNzaXZlQXV4aWxpYXJ5QW5kUGFydGljaXBsZTogW10uY29uY2F0KG90aGVyQXV4aWxpYXJpZXMsIGNvcHVsYSwgaW50ZXJ2aWV3VmVyYnMsIGRlbGV4aWNhbGl6ZWRWZXJicyksXG4gICAgICAgIC8vIFRoaXMgZXhwb3J0IGNvbnRhaW5zIGFsbCBvZiB0aGUgYWJvdmUgd29yZHMuXG4gICAgICAgIGFsbDogW10uY29uY2F0KGFydGljbGVzLCBjYXJkaW5hbE51bWVyYWxzLCBvcmRpbmFsTnVtZXJhbHMsIGRlbW9uc3RyYXRpdmVQcm9ub3VucywgcG9zc2Vzc2l2ZVByb25vdW5zLCByZWZsZXhpdmVQcm9ub3VucywgcGVyc29uYWxQcm9ub3Vuc05vbWluYXRpdmUsIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlLCBxdWFudGlmaWVycywgaW5kZWZpbml0ZVByb25vdW5zLCBjb250aW51b3VzVmVyYnMsIGluZGVmaW5pdGVQcm9ub3Vuc1Bvc3Nlc3NpdmUsIGludGVycm9nYXRpdmVEZXRlcm1pbmVycywgaW50ZXJyb2dhdGl2ZVByb25vdW5zLCBpbnRlcnJvZ2F0aXZlUHJvQWR2ZXJicywgcHJvbm9taW5hbEFkdmVyYnMsIGxvY2F0aXZlQWR2ZXJicywgYWR2ZXJiaWFsR2VuaXRpdmVzLCBwcmVwb3NpdGlvbmFsQWR2ZXJicywgZmlsdGVyZWRQYXNzaXZlQXV4aWxpYXJpZXMsIG5vdEZpbHRlcmVkUGFzc2l2ZUF1eGlsaWFyaWVzLCBvdGhlckF1eGlsaWFyaWVzLCBjb3B1bGEsIHByZXBvc2l0aW9ucywgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBjb3JyZWxhdGl2ZUNvbmp1bmN0aW9ucywgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgaW50ZXJ2aWV3VmVyYnMsIHRyYW5zaXRpb25Xb3JkcywgYWRkaXRpb25hbFRyYW5zaXRpb25Xb3JkcywgaW50ZW5zaWZpZXJzLCBkZWxleGljYWxpemVkVmVyYnMsIGludGVyamVjdGlvbnMsIGdlbmVyYWxBZGplY3RpdmVzQWR2ZXJicywgcmVjaXBlV29yZHMsIHZhZ3VlTm91bnMsIG1pc2NlbGxhbmVvdXMsIHRpdGxlc1ByZWNlZGluZywgdGl0bGVzRm9sbG93aW5nKVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb25Xb3Jkcy5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9uV29yZHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoZXNlIGF1eGlsaWFyaWVzIGFyZSBmaWx0ZXJlZCBmcm9tIHRoZSBiZWdpbm5pbmcgb2Ygd29yZCBjb21iaW5hdGlvbnMgaW4gdGhlIHByb21pbmVudCB3b3Jkcy5cblxudmFyIGZpbHRlcmVkQXV4aWxpYXJpZXMgPSBbXCJhbVwiLCBcImlzXCIsIFwiYXJlXCIsIFwid2FzXCIsIFwid2VyZVwiLCBcImJlZW5cIiwgXCJnZXRcIiwgXCJnZXRzXCIsIFwiZ290XCIsIFwiZ290dGVuXCIsIFwiYmVcIiwgXCJzaGUnc1wiLCBcImhlJ3NcIiwgXCJpdCdzXCIsIFwiaSdtXCIsIFwid2UncmVcIiwgXCJ0aGV5J3JlXCIsIFwieW91J3JlXCIsIFwiaXNuJ3RcIiwgXCJ3ZXJlbid0XCIsIFwid2Fzbid0XCIsIFwidGhhdCdzXCIsIFwiYXJlbid0XCJdO1xuLy8gVGhlc2UgYXV4aWxpYXJpZXMgYXJlIG5vdCBmaWx0ZXJlZCBmcm9tIHRoZSBiZWdpbm5pbmcgb2Ygd29yZCBjb21iaW5hdGlvbnMgaW4gdGhlIHByb21pbmVudCB3b3Jkcy5cbnZhciBub3RGaWx0ZXJlZEF1eGlsaWFyaWVzID0gW1wiYmVpbmdcIiwgXCJnZXR0aW5nXCIsIFwiaGF2aW5nXCIsIFwid2hhdCdzXCJdO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZmlsdGVyZWRBdXhpbGlhcmllczogZmlsdGVyZWRBdXhpbGlhcmllcyxcbiAgICAgICAgbm90RmlsdGVyZWRBdXhpbGlhcmllczogbm90RmlsdGVyZWRBdXhpbGlhcmllcyxcbiAgICAgICAgYWxsOiBmaWx0ZXJlZEF1eGlsaWFyaWVzLmNvbmNhdChub3RGaWx0ZXJlZEF1eGlsaWFyaWVzKVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV4aWxpYXJpZXMuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXhpbGlhcmllcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgY29uZmlnL3RyYW5zaXRpb25Xb3JkcyAqL1xuXG52YXIgc2luZ2xlV29yZHMgPSBbXCJhY2NvcmRpbmdseVwiLCBcImFkZGl0aW9uYWxseVwiLCBcImFmdGVyd2FyZFwiLCBcImFmdGVyd2FyZHNcIiwgXCJhbGJlaXRcIiwgXCJhbHNvXCIsIFwiYWx0aG91Z2hcIiwgXCJhbHRvZ2V0aGVyXCIsIFwiYW5vdGhlclwiLCBcImJhc2ljYWxseVwiLCBcImJlY2F1c2VcIiwgXCJiZWZvcmVcIiwgXCJiZXNpZGVzXCIsIFwiYnV0XCIsIFwiY2VydGFpbmx5XCIsIFwiY2hpZWZseVwiLCBcImNvbXBhcmF0aXZlbHlcIiwgXCJjb25jdXJyZW50bHlcIiwgXCJjb25zZXF1ZW50bHlcIiwgXCJjb250cmFyaWx5XCIsIFwiY29udmVyc2VseVwiLCBcImNvcnJlc3BvbmRpbmdseVwiLCBcImRlc3BpdGVcIiwgXCJkb3VidGVkbHlcIiwgXCJkdXJpbmdcIiwgXCJlLmcuXCIsIFwiZWFybGllclwiLCBcImVtcGhhdGljYWxseVwiLCBcImVxdWFsbHlcIiwgXCJlc3BlY2lhbGx5XCIsIFwiZXZlbnR1YWxseVwiLCBcImV2aWRlbnRseVwiLCBcImV4cGxpY2l0bHlcIiwgXCJmaW5hbGx5XCIsIFwiZmlyc3RseVwiLCBcImZvbGxvd2luZ1wiLCBcImZvcm1lcmx5XCIsIFwiZm9ydGh3aXRoXCIsIFwiZm91cnRobHlcIiwgXCJmdXJ0aGVyXCIsIFwiZnVydGhlcm1vcmVcIiwgXCJnZW5lcmFsbHlcIiwgXCJoZW5jZVwiLCBcImhlbmNlZm9ydGhcIiwgXCJob3dldmVyXCIsIFwiaS5lLlwiLCBcImlkZW50aWNhbGx5XCIsIFwiaW5kZWVkXCIsIFwiaW5zdGVhZFwiLCBcImxhc3RcIiwgXCJsYXN0bHlcIiwgXCJsYXRlclwiLCBcImxlc3RcIiwgXCJsaWtld2lzZVwiLCBcIm1hcmtlZGx5XCIsIFwibWVhbndoaWxlXCIsIFwibW9yZW92ZXJcIiwgXCJuZXZlcnRoZWxlc3NcIiwgXCJub25ldGhlbGVzc1wiLCBcIm5vclwiLCBcIm5vdHdpdGhzdGFuZGluZ1wiLCBcIm9idmlvdXNseVwiLCBcIm9jY2FzaW9uYWxseVwiLCBcIm90aGVyd2lzZVwiLCBcIm92ZXJhbGxcIiwgXCJwYXJ0aWN1bGFybHlcIiwgXCJwcmVzZW50bHlcIiwgXCJwcmV2aW91c2x5XCIsIFwicmF0aGVyXCIsIFwicmVnYXJkbGVzc1wiLCBcInNlY29uZGx5XCIsIFwic2hvcnRseVwiLCBcInNpZ25pZmljYW50bHlcIiwgXCJzaW1pbGFybHlcIiwgXCJzaW11bHRhbmVvdXNseVwiLCBcInNpbmNlXCIsIFwic29cIiwgXCJzb29uXCIsIFwic3BlY2lmaWNhbGx5XCIsIFwic3RpbGxcIiwgXCJzdHJhaWdodGF3YXlcIiwgXCJzdWJzZXF1ZW50bHlcIiwgXCJzdXJlbHlcIiwgXCJzdXJwcmlzaW5nbHlcIiwgXCJ0aGFuXCIsIFwidGhlblwiLCBcInRoZXJlYWZ0ZXJcIiwgXCJ0aGVyZWZvcmVcIiwgXCJ0aGVyZXVwb25cIiwgXCJ0aGlyZGx5XCIsIFwidGhvdWdoXCIsIFwidGh1c1wiLCBcInRpbGxcIiwgXCJ1bmRlbmlhYmx5XCIsIFwidW5kb3VidGVkbHlcIiwgXCJ1bmxlc3NcIiwgXCJ1bmxpa2VcIiwgXCJ1bnF1ZXN0aW9uYWJseVwiLCBcInVudGlsXCIsIFwid2hlblwiLCBcIndoZW5ldmVyXCIsIFwid2hlcmVhc1wiLCBcIndoaWxlXCJdO1xudmFyIG11bHRpcGxlV29yZHMgPSBbXCJhYm92ZSBhbGxcIiwgXCJhZnRlciBhbGxcIiwgXCJhZnRlciB0aGF0XCIsIFwiYWxsIGluIGFsbFwiLCBcImFsbCBvZiBhIHN1ZGRlblwiLCBcImFsbCB0aGluZ3MgY29uc2lkZXJlZFwiLCBcImFuYWxvZ291cyB0b1wiLCBcImFsdGhvdWdoIHRoaXMgbWF5IGJlIHRydWVcIiwgXCJhbmFsb2dvdXMgdG9cIiwgXCJhbm90aGVyIGtleSBwb2ludFwiLCBcImFzIGEgbWF0dGVyIG9mIGZhY3RcIiwgXCJhcyBhIHJlc3VsdFwiLCBcImFzIGFuIGlsbHVzdHJhdGlvblwiLCBcImFzIGNhbiBiZSBzZWVuXCIsIFwiYXMgaGFzIGJlZW4gbm90ZWRcIiwgXCJhcyBJIGhhdmUgbm90ZWRcIiwgXCJhcyBJIGhhdmUgc2FpZFwiLCBcImFzIEkgaGF2ZSBzaG93blwiLCBcImFzIGxvbmcgYXNcIiwgXCJhcyBtdWNoIGFzXCIsIFwiYXMgc2hvd24gYWJvdmVcIiwgXCJhcyBzb29uIGFzXCIsIFwiYXMgd2VsbCBhc1wiLCBcImF0IGFueSByYXRlXCIsIFwiYXQgZmlyc3RcIiwgXCJhdCBsYXN0XCIsIFwiYXQgbGVhc3RcIiwgXCJhdCBsZW5ndGhcIiwgXCJhdCB0aGUgcHJlc2VudCB0aW1lXCIsIFwiYXQgdGhlIHNhbWUgdGltZVwiLCBcImF0IHRoaXMgaW5zdGFudFwiLCBcImF0IHRoaXMgcG9pbnRcIiwgXCJhdCB0aGlzIHRpbWVcIiwgXCJiYWxhbmNlZCBhZ2FpbnN0XCIsIFwiYmVpbmcgdGhhdFwiLCBcImJ5IGFsbCBtZWFuc1wiLCBcImJ5IGFuZCBsYXJnZVwiLCBcImJ5IGNvbXBhcmlzb25cIiwgXCJieSB0aGUgc2FtZSB0b2tlblwiLCBcImJ5IHRoZSB0aW1lXCIsIFwiY29tcGFyZWQgdG9cIiwgXCJiZSB0aGF0IGFzIGl0IG1heVwiLCBcImNvdXBsZWQgd2l0aFwiLCBcImRpZmZlcmVudCBmcm9tXCIsIFwiZHVlIHRvXCIsIFwiZXF1YWxseSBpbXBvcnRhbnRcIiwgXCJldmVuIGlmXCIsIFwiZXZlbiBtb3JlXCIsIFwiZXZlbiBzb1wiLCBcImV2ZW4gdGhvdWdoXCIsIFwiZmlyc3QgdGhpbmcgdG8gcmVtZW1iZXJcIiwgXCJmb3IgZXhhbXBsZVwiLCBcImZvciBmZWFyIHRoYXRcIiwgXCJmb3IgaW5zdGFuY2VcIiwgXCJmb3Igb25lIHRoaW5nXCIsIFwiZm9yIHRoYXQgcmVhc29uXCIsIFwiZm9yIHRoZSBtb3N0IHBhcnRcIiwgXCJmb3IgdGhlIHB1cnBvc2Ugb2ZcIiwgXCJmb3IgdGhlIHNhbWUgcmVhc29uXCIsIFwiZm9yIHRoaXMgcHVycG9zZVwiLCBcImZvciB0aGlzIHJlYXNvblwiLCBcImZyb20gdGltZSB0byB0aW1lXCIsIFwiZ2l2ZW4gdGhhdFwiLCBcImdpdmVuIHRoZXNlIHBvaW50c1wiLCBcImltcG9ydGFudCB0byByZWFsaXplXCIsIFwiaW4gYSB3b3JkXCIsIFwiaW4gYWRkaXRpb25cIiwgXCJpbiBhbm90aGVyIGNhc2VcIiwgXCJpbiBhbnkgY2FzZVwiLCBcImluIGFueSBldmVudFwiLCBcImluIGJyaWVmXCIsIFwiaW4gY2FzZVwiLCBcImluIGNvbmNsdXNpb25cIiwgXCJpbiBjb250cmFzdFwiLCBcImluIGRldGFpbFwiLCBcImluIGR1ZSB0aW1lXCIsIFwiaW4gZWZmZWN0XCIsIFwiaW4gZWl0aGVyIGNhc2VcIiwgXCJpbiBlc3NlbmNlXCIsIFwiaW4gZmFjdFwiLCBcImluIGdlbmVyYWxcIiwgXCJpbiBsaWdodCBvZlwiLCBcImluIGxpa2UgZmFzaGlvblwiLCBcImluIGxpa2UgbWFubmVyXCIsIFwiaW4gb3JkZXIgdGhhdFwiLCBcImluIG9yZGVyIHRvXCIsIFwiaW4gb3RoZXIgd29yZHNcIiwgXCJpbiBwYXJ0aWN1bGFyXCIsIFwiaW4gcmVhbGl0eVwiLCBcImluIHNob3J0XCIsIFwiaW4gc2ltaWxhciBmYXNoaW9uXCIsIFwiaW4gc3BpdGUgb2ZcIiwgXCJpbiBzdW1cIiwgXCJpbiBzdW1tYXJ5XCIsIFwiaW4gdGhhdCBjYXNlXCIsIFwiaW4gdGhlIGV2ZW50IHRoYXRcIiwgXCJpbiB0aGUgZmluYWwgYW5hbHlzaXNcIiwgXCJpbiB0aGUgZmlyc3QgcGxhY2VcIiwgXCJpbiB0aGUgZm91cnRoIHBsYWNlXCIsIFwiaW4gdGhlIGhvcGUgdGhhdFwiLCBcImluIHRoZSBsaWdodCBvZlwiLCBcImluIHRoZSBsb25nIHJ1blwiLCBcImluIHRoZSBtZWFudGltZVwiLCBcImluIHRoZSBzYW1lIGZhc2hpb25cIiwgXCJpbiB0aGUgc2FtZSB3YXlcIiwgXCJpbiB0aGUgc2Vjb25kIHBsYWNlXCIsIFwiaW4gdGhlIHRoaXJkIHBsYWNlXCIsIFwiaW4gdGhpcyBjYXNlXCIsIFwiaW4gdGhpcyBzaXR1YXRpb25cIiwgXCJpbiB0aW1lXCIsIFwiaW4gdHJ1dGhcIiwgXCJpbiB2aWV3IG9mXCIsIFwiaW5hc211Y2ggYXNcIiwgXCJtb3N0IGNvbXBlbGxpbmcgZXZpZGVuY2VcIiwgXCJtb3N0IGltcG9ydGFudFwiLCBcIm11c3QgYmUgcmVtZW1iZXJlZFwiLCBcIm5vdCB0byBtZW50aW9uXCIsIFwibm93IHRoYXRcIiwgXCJvZiBjb3Vyc2VcIiwgXCJvbiBhY2NvdW50IG9mXCIsIFwib24gYmFsYW5jZVwiLCBcIm9uIGNvbmRpdGlvbiB0aGF0XCIsIFwib24gb25lIGhhbmRcIiwgXCJvbiB0aGUgY29uZGl0aW9uIHRoYXRcIiwgXCJvbiB0aGUgY29udHJhcnlcIiwgXCJvbiB0aGUgbmVnYXRpdmUgc2lkZVwiLCBcIm9uIHRoZSBvdGhlciBoYW5kXCIsIFwib24gdGhlIHBvc2l0aXZlIHNpZGVcIiwgXCJvbiB0aGUgd2hvbGVcIiwgXCJvbiB0aGlzIG9jY2FzaW9uXCIsIFwib25jZVwiLCBcIm9uY2UgaW4gYSB3aGlsZVwiLCBcIm9ubHkgaWZcIiwgXCJvd2luZyB0b1wiLCBcInBvaW50IG9mdGVuIG92ZXJsb29rZWRcIiwgXCJwcmlvciB0b1wiLCBcInByb3ZpZGVkIHRoYXRcIiwgXCJzZWVpbmcgdGhhdFwiLCBcInNvIGFzIHRvXCIsIFwic28gZmFyXCIsIFwic28gbG9uZyBhc1wiLCBcInNvIHRoYXRcIiwgXCJzb29uZXIgb3IgbGF0ZXJcIiwgXCJzdWNoIGFzXCIsIFwic3VtbWluZyB1cFwiLCBcInRha2UgdGhlIGNhc2Ugb2ZcIiwgXCJ0aGF0IGlzXCIsIFwidGhhdCBpcyB0byBzYXlcIiwgXCJ0aGVuIGFnYWluXCIsIFwidGhpcyB0aW1lXCIsIFwidG8gYmUgc3VyZVwiLCBcInRvIGJlZ2luIHdpdGhcIiwgXCJ0byBjbGFyaWZ5XCIsIFwidG8gY29uY2x1ZGVcIiwgXCJ0byBkZW1vbnN0cmF0ZVwiLCBcInRvIGVtcGhhc2l6ZVwiLCBcInRvIGVudW1lcmF0ZVwiLCBcInRvIGV4cGxhaW5cIiwgXCJ0byBpbGx1c3RyYXRlXCIsIFwidG8gbGlzdFwiLCBcInRvIHBvaW50IG91dFwiLCBcInRvIHB1dCBpdCBhbm90aGVyIHdheVwiLCBcInRvIHB1dCBpdCBkaWZmZXJlbnRseVwiLCBcInRvIHJlcGVhdFwiLCBcInRvIHJlcGhyYXNlIGl0XCIsIFwidG8gc2F5IG5vdGhpbmcgb2ZcIiwgXCJ0byBzdW0gdXBcIiwgXCJ0byBzdW1tYXJpemVcIiwgXCJ0byB0aGF0IGVuZFwiLCBcInRvIHRoZSBlbmQgdGhhdFwiLCBcInRvIHRoaXMgZW5kXCIsIFwidG9nZXRoZXIgd2l0aFwiLCBcInVuZGVyIHRob3NlIGNpcmN1bXN0YW5jZXNcIiwgXCJ1bnRpbCBub3dcIiwgXCJ1cCBhZ2FpbnN0XCIsIFwidXAgdG8gdGhlIHByZXNlbnQgdGltZVwiLCBcInZpcyBhIHZpc1wiLCBcIndoYXQncyBtb3JlXCIsIFwid2hpbGUgaXQgbWF5IGJlIHRydWVcIiwgXCJ3aGlsZSB0aGlzIG1heSBiZSB0cnVlXCIsIFwid2l0aCBhdHRlbnRpb24gdG9cIiwgXCJ3aXRoIHRoZSByZXN1bHQgdGhhdFwiLCBcIndpdGggdGhpcyBpbiBtaW5kXCIsIFwid2l0aCB0aGlzIGludGVudGlvblwiLCBcIndpdGggdGhpcyBwdXJwb3NlIGluIG1pbmRcIiwgXCJ3aXRob3V0IGEgZG91YnRcIiwgXCJ3aXRob3V0IGRlbGF5XCIsIFwid2l0aG91dCBkb3VidFwiLCBcIndpdGhvdXQgcmVzZXJ2YXRpb25cIl07XG4vKipcbiAqIFJldHVybnMgbGlzdHMgd2l0aCB0cmFuc2l0aW9uIHdvcmRzIHRvIGJlIHVzZWQgYnkgdGhlIGFzc2Vzc21lbnRzLlxuICogQHJldHVybnMge09iamVjdH0gVGhlIG9iamVjdCB3aXRoIHRyYW5zaXRpb24gd29yZCBsaXN0cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2luZ2xlV29yZHM6IHNpbmdsZVdvcmRzLFxuICAgICAgICBtdWx0aXBsZVdvcmRzOiBtdWx0aXBsZVdvcmRzLFxuICAgICAgICBhbGxXb3Jkczogc2luZ2xlV29yZHMuY29uY2F0KG11bHRpcGxlV29yZHMpXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uV29yZHMuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uV29yZHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHRyYW5zaXRpb25Xb3JkcyA9IHJlcXVpcmUoXCIuL3RyYW5zaXRpb25Xb3Jkcy5qc1wiKSgpLnNpbmdsZVdvcmRzO1xuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIGV4Y2VwdGlvbnMgZm9yIHRoZSBwcm9taW5lbnQgd29yZHMgcmVzZWFyY2hlclxuICogQHJldHVybnMge09iamVjdH0gVGhlIG9iamVjdCBmaWxsZWQgd2l0aCBleGNlcHRpb24gYXJyYXlzLlxuICovXG52YXIgYXJ0aWNsZXMgPSBbXCJsZVwiLCBcImxhXCIsIFwibGVzXCIsIFwidW5cIiwgXCJ1bmVcIiwgXCJkZXNcIiwgXCJhdXhcIiwgXCJkdVwiLCBcImF1XCIsIFwiZCd1blwiLCBcImQndW5lXCJdO1xudmFyIGNhcmRpbmFsTnVtZXJhbHMgPSBbXCJkZXV4XCIsIFwidHJvaXNcIiwgXCJxdWF0cmVcIiwgXCJjaW5xXCIsIFwic2l4XCIsIFwic2VwdFwiLCBcImh1aXRcIiwgXCJuZXVmXCIsIFwiZGl4XCIsIFwib256ZVwiLCBcImRvdXplXCIsIFwidHJlaXplXCIsIFwicXVhdG9yemVcIiwgXCJxdWluemVcIiwgXCJzZWl6ZVwiLCBcImRpeC1zZXB0XCIsIFwiZGl4LWh1aXRcIiwgXCJkaXgtbmV1ZlwiLCBcInZpbmd0XCIsIFwidHJlbnRlXCIsIFwicXVhcmFudGVcIiwgXCJjaW5xdWFudGVcIiwgXCJzb2l4YW50ZVwiLCBcInNvaXhhbnRlLWRpeFwiLCBcInF1YXRyZS12aW5ndFwiLCBcInF1YXRyZS12aW5ndC1kaXhcIiwgXCJjZW50XCIsIFwibWlsbGVcIiwgXCJtaWxsaW9uXCIsIFwibWlsbGlhcmRcIl07XG4vLyAncHJlbWllcicgYW5kICdwcmVtacOocmUnIGFyZSBub3QgaW5jbHVkZWQgYmVjYXVzZSBvZiB0aGVpciBzZWNvbmRhcnkgbWVhbmluZ3MgKCdwcmltZSBtaW5pc3RlcicsICdbbW92aWVdIHByZW1pZXJlJylcbnZhciBvcmRpbmFsTnVtZXJhbHMgPSBbXCJzZWNvbmRcIiwgXCJzZWNvbmRlc1wiLCBcImRldXhpw6htZVwiLCBcImRldXhpw6htZXNcIiwgXCJ0cm9pc2nDqG1lXCIsIFwidHJvaXNpw6htZXNcIiwgXCJxdWF0cmnDqG1lXCIsIFwicXVhdHJpw6htZXNcIiwgXCJjaW5xdWnDqG1lXCIsIFwiY2lucXVpw6htZXNcIiwgXCJzaXhpw6htZVwiLCBcInNpeGnDqG1lc1wiLCBcInNlcHRpw6htZVwiLCBcInNlcHRpw6htZXNcIiwgXCJodWl0acOobWVcIiwgXCJodWl0acOobWVzXCIsIFwibmV1dmnDqG1lXCIsIFwibmV1dmnDqG1lc1wiLCBcImRpeGnDqG1lXCIsIFwiZGl4acOobWVzXCIsIFwib256acOobWVcIiwgXCJvbnppw6htZXNcIiwgXCJkb3V6acOobWVcIiwgXCJkb3V6acOobWVzXCIsIFwidHJlaXppw6htZVwiLCBcInRyZWl6acOobWVzXCIsIFwicXVhdG9yemnDqG1lXCIsIFwicXVhdG9yemnDqG1lc1wiLCBcInF1aW56acOobWVcIiwgXCJxdWluemnDqG1lc1wiLCBcInNlaXppw6htZVwiLCBcInNlaXppw6htZXNcIiwgXCJkaXgtc2VwdGnDqG1lXCIsIFwiZGl4LXNlcHRpw6htZXNcIiwgXCJkaXgtaHVpdGnDqG1lXCIsIFwiZGl4LWh1aXRpw6htZXNcIiwgXCJkaXgtbmV1dmnDqG1lXCIsIFwiZGl4LW5ldXZpw6htZXNcIiwgXCJ2aW5ndGnDqG1lXCIsIFwidmluZ3Rpw6htZXNcIl07XG52YXIgcGVyc29uYWxQcm9ub3Vuc05vbWluYXRpdmUgPSBbXCJqZVwiLCBcInR1XCIsIFwiaWxcIiwgXCJlbGxlXCIsIFwib25cIiwgXCJub3VzXCIsIFwidm91c1wiLCBcImlsc1wiLCBcImVsbGVzXCJdO1xudmFyIHBlcnNvbmFsUHJvbm91bnNTdHJlc3NlZCA9IFtcIm1vaVwiLCBcInRvaVwiLCBcImx1aVwiLCBcInNvaVwiLCBcImV1eFwiXTtcbi8vIExlLCBsYSwgbGVzIGFyZSBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBhcnRpY2xlcyBsaXN0LlxudmFyIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlID0gW1wibWVcIiwgXCJ0ZVwiXTtcbnZhciBkZW1vbnN0cmF0aXZlUHJvbm91bnMgPSBbXCJjZWx1aVwiLCBcImNlbGxlXCIsIFwiY2V1eFwiLCBcImNlbGxlc1wiLCBcImNlXCIsIFwiY2VsdWktY2lcIiwgXCJjZWx1aS1sw6BcIiwgXCJjZWxsZS1jaVwiLCBcImNlbGxlLWzDoFwiLCBcImNldXgtY2lcIiwgXCJjZXV4LWzDoFwiLCBcImNlbGxlcy1jaVwiLCBcImNlbGxlcy1sw6BcIiwgXCJjZWNpXCIsIFwiY2VsYVwiLCBcIsOnYVwiLCBcImNldHRlXCIsIFwiY2V0XCIsIFwiY2VzXCJdO1xudmFyIHBvc3Nlc3NpdmVQcm9ub3VucyA9IFtcIm1vblwiLCBcInRvblwiLCBcInNvblwiLCBcIm1hXCIsIFwidGFcIiwgXCJzYVwiLCBcIm1lc1wiLCBcInRlc1wiLCBcInNlc1wiLCBcIm5vdHJlXCIsIFwidm90cmVcIiwgXCJsZXVyXCIsIFwibm9zXCIsIFwidm9zXCIsIFwibGV1cnNcIl07XG52YXIgcXVhbnRpZmllcnMgPSBbXCJiZWF1Y291cFwiLCBcInBldVwiLCBcInF1ZWxxdWVcIiwgXCJxdWVscXVlc1wiLCBcInRvdXNcIiwgXCJ0b3V0XCIsIFwidG91dGVcIiwgXCJ0b3V0ZXNcIiwgXCJwbHVzaWV1cnNcIiwgXCJwbGVpblwiLCBcImNoYXF1ZVwiLCBcInN1ZmZpc2FudFwiLCBcInN1ZmZpc2FudGVcIiwgXCJzdWZmaXNhbnRlc1wiLCBcInN1ZmZpc2FudHNcIiwgXCJmYWlibGVcIiwgXCJtb2luc1wiLCBcInRhbnRcIiwgXCJwbHVzXCIsIFwiZGl2ZXJzXCIsIFwiZGl2ZXJzZVwiLCBcImRpdmVyc2VzXCJdO1xuLy8gVGhlIHJlbWFpbmluZyByZWZsZXhpdmUgcGVyc29uYWwgcHJvbm91bnMgYXJlIGFscmVhZHkgaW5jbHVkZWQgaW4gb3RoZXIgcHJvbm91biBsaXN0cy5cbnZhciByZWZsZXhpdmVQcm9ub3VucyA9IFtcInNlXCJdO1xudmFyIGluZGVmaW5pdGVQcm9ub3VucyA9IFtcImF1Y3VuXCIsIFwiYXVjdW5lXCIsIFwiYXV0cmVcIiwgXCJhdXRyZXNcIiwgXCJjZXJ0YWluXCIsIFwiY2VydGFpbmVcIiwgXCJjZXJ0YWluZXNcIiwgXCJjZXJ0YWluc1wiLCBcImNoYWN1blwiLCBcImNoYWN1bmVcIiwgXCJtw6ptZVwiLCBcIm3Dqm1lc1wiLCBcInF1ZWxxdSd1blwiLCBcInF1ZWxxdSd1bmVcIiwgXCJxdWVscXVlcyd1bnNcIiwgXCJxdWVscXVlcyd1bmVzXCIsIFwiYXV0cnVpXCIsIFwibnVsXCIsIFwicGVyc29ubmVcIiwgXCJxdWljb25xdWVcIiwgXCJyaWVuXCIsIFwiZCdhdWN1bmVzXCIsIFwiZCdhdWN1bnNcIiwgXCJudWxzXCIsIFwibnVsZXNcIiwgXCJsJ2F1dHJlXCIsIFwibCdhdXRyZXNcIiwgXCJ0ZWxcIiwgXCJ0ZWxsZVwiLCBcInRlbHNcIiwgXCJ0ZWxsZXNcIl07XG52YXIgcmVsYXRpdmVQcm9ub3VucyA9IFtcInF1aVwiLCBcInF1ZVwiLCBcImxlcXVlbFwiLCBcImxhcXVlbGxlXCIsIFwiYXVxdWVsXCIsIFwiYXV4cXVlbHNcIiwgXCJhdXhxdWVsbGVzXCIsIFwiZHVxdWVsXCIsIFwiZGVzcXVlbHNcIiwgXCJkZXNxdWVsbGVzXCIsIFwiZG9udFwiLCBcIm/DuVwiLCBcInF1b2lcIl07XG52YXIgaW50ZXJyb2dhdGl2ZVByb0FkdmVyYnMgPSBbXCJjb21iaWVuXCIsIFwiY29tbWVudFwiLCBcInBvdXJxdW9pXCIsIFwiZCdvw7lcIl07XG52YXIgaW50ZXJyb2dhdGl2ZUFkamVjdGl2ZXMgPSBbXCJxdWVsXCIsIFwicXVlbHNcIiwgXCJxdWVsbGVcIl07XG52YXIgcHJvbm9taW5hbEFkdmVyYnMgPSBbXCJ5XCJdO1xudmFyIGxvY2F0aXZlQWR2ZXJicyA9IFtcImzDoFwiLCBcImljaVwiLCBcInZvaWNpXCJdO1xuLy8gJ1ZpbnMnIGlzIG5vdCBpbmNsdWRlZCBiZWNhdXNlIGl0IGFsc28gbWVhbnMgJ3dpbmVzJy5cbnZhciBvdGhlckF1eGlsaWFyaWVzID0gW1wiYVwiLCBcImEtdC1lbGxlXCIsIFwiYS10LWlsXCIsIFwiYS10LW9uXCIsIFwiYWlcIiwgXCJhaS1qZVwiLCBcImFpZVwiLCBcImFzXCIsIFwiYXMtdHVcIiwgXCJhdXJhXCIsIFwiYXVyYWlcIiwgXCJhdXJhaWVudFwiLCBcImF1cmFpc1wiLCBcImF1cmFpdFwiLCBcImF1cmFzXCIsIFwiYXVyZXpcIiwgXCJhdXJpZXpcIiwgXCJhdXJvbnNcIiwgXCJhdXJvbnRcIiwgXCJhdmFpZW50XCIsIFwiYXZhaXNcIiwgXCJhdmFpdFwiLCBcImF2ZXpcIiwgXCJhdmV6LXZvdXNcIiwgXCJhdmllelwiLCBcImF2aW9uc1wiLCBcImF2b25zXCIsIFwiYXZvbnMtbm91c1wiLCBcImF5ZXpcIiwgXCJheW9uc1wiLCBcImV1XCIsIFwiZcO7bWVzXCIsIFwiZXVyZW50XCIsIFwiZXVzXCIsIFwiZXV0XCIsIFwiZcO7dGVzXCIsIFwiaidhaVwiLCBcImonYXVyYWlcIiwgXCJqJ2F2YWlzXCIsIFwiaidldXNcIiwgXCJvbnRcIiwgXCJvbnQtZWxsZXNcIiwgXCJvbnQtaWxzXCIsIFwidmFpc1wiLCBcInZhc1wiLCBcInZhXCIsIFwiYWxsb25zXCIsIFwiYWxsZXpcIiwgXCJ2b250XCIsIFwidmFpcy1qZVwiLCBcInZhcy10dVwiLCBcInZhLXQtaWxcIiwgXCJ2YS10LWVsbGVcIiwgXCJ2YS10LW9uXCIsIFwiYWxsb25zLW5vdXNcIiwgXCJhbGxlei12b3VzXCIsIFwidm9udC1lbGxlc1wiLCBcInZvbnQtaWxzXCIsIFwiYWxsw6lcIiwgXCJhbGzDqXNcIiwgXCJqJ2FsbGFpXCIsIFwiYWxsYWlcIiwgXCJhbGxhc1wiLCBcImFsbGFcIiwgXCJhbGzDom1lc1wiLCBcImFsbMOidGVzXCIsIFwiYWxsw6hyZW50XCIsIFwiaidhbGxhaXNcIiwgXCJhbGxhaXNcIiwgXCJhbGxhaXRcIiwgXCJhbGxpb25zXCIsIFwiYWxsaWV6XCIsIFwiYWxsYWllbnRcIiwgXCJqJ2lyYWlcIiwgXCJpcmFzXCIsIFwiaXJhXCIsIFwiaXJvbnNcIiwgXCJpcmV6XCIsIFwiaXJvbnRcIiwgXCJqJ2FpbGxlXCIsIFwiYWlsbGVcIiwgXCJhaWxsZXNcIiwgXCJhaWxsZW50XCIsIFwiaidhbGxhc3NlXCIsIFwiYWxsYXNzZVwiLCBcImFsbGFzc2VzXCIsIFwiYWxsw6J0XCIsIFwiYWxsYXNzaW9uc1wiLCBcImFsbGFzc2llelwiLCBcImFsbGFzc2VudFwiLCBcImonaXJhaXNcIiwgXCJpcmFpc1wiLCBcImlyYWl0XCIsIFwiaXJpb25zXCIsIFwiaXJpZXpcIiwgXCJpcmFpZW50XCIsIFwiYWxsYW50XCIsIFwidmllbnNcIiwgXCJ2aWVudFwiLCBcInZlbm9uc1wiLCBcInZlbmV6XCIsIFwidmllbm5lbnRcIiwgXCJ2aWVucy1qZVwiLCBcInZpZW5zLWRlXCIsIFwidmllbnQtaWxcIiwgXCJ2aWVudC1lbGxlXCIsIFwidmllbnQtb25cIiwgXCJ2ZW5vbnMtbm91c1wiLCBcInZlbmV6LXZvdXNcIiwgXCJ2aWVubmVudC1lbGxlc1wiLCBcInZpZW5uZW50LWlsc1wiLCBcInZpbnNcIiwgXCJ2aW50XCIsIFwidsOubm1lc1wiLCBcInbDrm50ZXNcIiwgXCJ2aW5yZW50XCIsIFwidmVudVwiLCBcInZlbnVzXCIsIFwidmVuYWlzXCIsIFwidmVuYWl0XCIsIFwidmVuaW9uc1wiLCBcInZlbmllelwiLCBcInZlbmFpZW50XCIsIFwidmllbmRyYWlcIiwgXCJ2aWVuZHJhc1wiLCBcInZpZW5kcmFcIiwgXCJ2aWVuZHJvbnNcIiwgXCJ2aWVuZHJlelwiLCBcInZpZW5kcm9udFwiLCBcInZpZW5uZVwiLCBcInZpZW5uZXNcIiwgXCJ2aW5zc2VcIiwgXCJ2aW5zc2VzXCIsIFwidsOubnRcIiwgXCJ2aW5zc2lvbnNcIiwgXCJ2aW5zc2llelwiLCBcInZpbnNzZW50XCIsIFwidmllbmRyYWlzXCIsIFwidmllbmRyYWl0XCIsIFwidmllbmRyaW9uc1wiLCBcInZpZW5kcmllelwiLCBcInZpZW5kcmFpZW50XCIsIFwidmVuYW50XCIsIFwiZG9pc1wiLCBcImRvaXRcIiwgXCJkZXZvbnNcIiwgXCJkZXZlelwiLCBcImRvaXZlbnRcIiwgXCJkb2lzLWplXCIsIFwiZG9pcy10dVwiLCBcImRvaXQtaWxcIiwgXCJkb2l0LWVsbGVcIiwgXCJkb2l0LW9uXCIsIFwiZGV2b25zLW5vdXNcIiwgXCJkZXZlei12b3VzXCIsIFwiZG9pdmVudC1lbGxlc1wiLCBcImRvaXZlbnQtaWxzXCIsIFwiZHVzXCIsIFwiZHV0XCIsIFwiZMO7bWVzXCIsIFwiZMO7dGVzXCIsIFwiZHVyZW50XCIsIFwiZMO7XCIsIFwiZGV2YWlzXCIsIFwiZGV2YWl0XCIsIFwiZGV2aW9uc1wiLCBcImRldmllelwiLCBcImRldmFpZW50XCIsIFwiZGV2cmFpXCIsIFwiZGV2cmFzXCIsIFwiZGV2cmFcIiwgXCJkZXZyb25zXCIsIFwiZGV2cmV6XCIsIFwiZGV2cm9udFwiLCBcImRvaXZlXCIsIFwiZG9pdmVzXCIsIFwiZHVzc2VcIiwgXCJkdXNzZXNcIiwgXCJkw7t0XCIsIFwiZHVzc2lvbnNcIiwgXCJkdXNzaWV6XCIsIFwiZHVzc2VudFwiLCBcImRldnJhaXNcIiwgXCJkZXZyYWl0XCIsIFwiZGV2cmlvbnNcIiwgXCJkZXZyaWV6XCIsIFwiZGV2cmFpZW50XCIsIFwicGV1eFwiLCBcInBldXRcIiwgXCJwb3V2b25zXCIsIFwicG91dmV6XCIsIFwicGV1dmVudFwiLCBcInBldXgtamVcIiwgXCJwZXV4LXR1XCIsIFwicGV1dC1pbFwiLCBcInBldXQtZWxsZVwiLCBcInBldXQtb25cIiwgXCJwb3V2b25zLW5vdXNcIiwgXCJwb3V2ZXotdm91c1wiLCBcInBldXZlbnQtaWxzXCIsIFwicGV1dmVudC1lbGxlc1wiLCBcInB1c1wiLCBcInB1dFwiLCBcInDDu21lc1wiLCBcInDDu3Rlc1wiLCBcInB1cmVudFwiLCBcInB1XCIsIFwicG91dmFpc1wiLCBcInBvdXZhaXRcIiwgXCJwb3V2aW9uc1wiLCBcInBvdXZpZXpcIiwgXCJwb3V2YWllbnRcIiwgXCJwb3VycmFpXCIsIFwicG91cnJhc1wiLCBcInBvdXJyYVwiLCBcInBvdXJyb25zXCIsIFwicG91cnJlelwiLCBcInBvdXJyb250XCIsIFwicHVpc3NlXCIsIFwicHVpc3Nlc1wiLCBcInB1aXNzaW9uc1wiLCBcInB1aXNzaWV6XCIsIFwicHVpc3NlbnRcIiwgXCJwdXNzZVwiLCBcInB1c3Nlc1wiLCBcInDDu3RcIiwgXCJwdXNzaW9uc1wiLCBcInB1c3NpZXpcIiwgXCJwdXNzZW50XCIsIFwicG91cnJhaXNcIiwgXCJwb3VycmFpdFwiLCBcInBvdXJyaW9uc1wiLCBcInBvdXJyaWV6XCIsIFwicG91cnJhaWVudFwiLCBcInBvdXZhbnRcIiwgXCJzZW1ibGVcIiwgXCJzZW1ibGVzXCIsIFwic2VtYmxvbnNcIiwgXCJzZW1ibGV6XCIsIFwic2VtYmxlbnRcIiwgXCJzZW1ibGUtamVcIiwgXCJzZW1ibGVzLWlsXCIsIFwic2VtYmxlcy1lbGxlXCIsIFwic2VtYmxlcy1vblwiLCBcInNlbWJsb25zLW5vdXNcIiwgXCJzZW1ibGV6LXZvdXNcIiwgXCJzZW1ibGVudC1pbHNcIiwgXCJzZW1ibGVudC1lbGxlc1wiLCBcInNlbWJsYWlcIiwgXCJzZW1ibGFzXCIsIFwic2VtYmxhXCIsIFwic2VtYmzDom1lc1wiLCBcInNlbWJsw6J0ZXNcIiwgXCJzZW1ibMOocmVudFwiLCBcInNlbWJsYWlzXCIsIFwic2VtYmxhaXRcIiwgXCJzZW1ibGlvbnNcIiwgXCJzZW1ibGllelwiLCBcInNlbWJsYWllbnRcIiwgXCJzZW1ibGVyYWlcIiwgXCJzZW1ibGVyYXNcIiwgXCJzZW1ibGVyYVwiLCBcInNlbWJsZXJvbnNcIiwgXCJzZW1ibGVyZXpcIiwgXCJzZW1ibGVyb250XCIsIFwic2VtYmzDqVwiLCBcInNlbWJsYXNzZVwiLCBcInNlbWJsYXNzZXNcIiwgXCJzZW1ibMOidFwiLCBcInNlbWJsYXNzaW9uc1wiLCBcInNlbWJsYXNzaWV6XCIsIFwic2VtYmxhc3NlbnRcIiwgXCJzZW1ibGVyYWlzXCIsIFwic2VtYmxlcmFpdFwiLCBcInNlbWJsZXJpb25zXCIsIFwic2VtYmxlcmllelwiLCBcInNlbWJsZXJhaWVudFwiLCBcInBhcmFpc1wiLCBcInBhcmHDrnRcIiwgXCJhaXRcIiwgXCJwYXJhaXNzb25zXCIsIFwicGFyYWlzc2V6XCIsIFwicGFyYWlzc2VudFwiLCBcInBhcmFpcy1qZVwiLCBcInBhcmFpcy10dVwiLCBcInBhcmHDrnQtaWxcIiwgXCJwYXJhw650LWVsbGVcIiwgXCJwYXJhw650LW9uXCIsIFwiYWl0LWlsXCIsIFwiYWl0LWVsbGVcIiwgXCJhaXQtb25cIiwgXCJwYXJhaXNzb25zLW5vdXNcIiwgXCJwYXJhaXNzZXotdm91c1wiLCBcInBhcmFpc3NlbnQtaWxzXCIsIFwicGFyYWlzc2VudC1lbGxlc1wiLCBcInBhcnVzXCIsIFwicGFydXRcIiwgXCJwYXLDu21lc1wiLCBcInBhcsO7dGVzXCIsIFwicGFydXJlbnRcIiwgXCJwYXJhaXNzYWlzXCIsIFwicGFyYWlzc2FpdFwiLCBcInBhcmFpc3Npb25zXCIsIFwicGFyYWlzc2llelwiLCBcInBhcmFpc3NhaWVudFwiLCBcInBhcmHDrnRyYWlcIiwgXCJwYXJhw650cmFzXCIsIFwicGFyYcOudHJhXCIsIFwicGFyYcOudHJvbnNcIiwgXCJwYXJhw650cmV6XCIsIFwicGFyYcOudHJvbnRcIiwgXCJhaXRyYWlcIiwgXCJhaXRyYXNcIiwgXCJhaXRyYVwiLCBcImFpdHJvbnNcIiwgXCJhaXRyZXpcIiwgXCJhaXRyb250XCIsIFwicGFydVwiLCBcInBhcmFpc3NlXCIsIFwicGFyYWlzc2VzXCIsIFwicGFydXNzZVwiLCBcInBhcnVzc2VzXCIsIFwicGFyw7t0XCIsIFwicGFydXNzaW9uc1wiLCBcInBhcnVzc2llelwiLCBcInBhcnVzc2VudFwiLCBcInBhcmHDrnRyYWlzXCIsIFwicGFyYcOudHJhaXRcIiwgXCJwYXJhw650cmlvbnNcIiwgXCJwYXJhw650cmllelwiLCBcInBhcmHDrnRyYWllbnRcIiwgXCJwYXJhaXRyYWlzXCIsIFwicGFyYWl0cmFpdFwiLCBcInBhcmFpdHJpb25zXCIsIFwicGFyYWl0cmllelwiLCBcInBhcmFpdHJhaWVudFwiLCBcInBhcmFpc3NhbnRcIiwgXCJtZXRzXCIsIFwibWV0XCIsIFwibWV0dG9uc1wiLCBcIm1ldHRlelwiLCBcIm1ldHRlbnRcIiwgXCJtZXRzLWplXCIsIFwibWV0cy10dVwiLCBcIm1ldC1pbFwiLCBcIm1ldC1lbGxlXCIsIFwibWV0LW9uXCIsIFwibWV0dG9ucy1ub3VzXCIsIFwibWV0dGV6LXZvdXNcIiwgXCJtZXR0ZW50LWlsc1wiLCBcIm1ldHRlbnQtZWxsZXNcIiwgXCJtaXNcIiwgXCJtaXRcIiwgXCJtw65tZXNcIiwgXCJtw650ZXNcIiwgXCJtaXJlbnRcIiwgXCJtZXR0YWlzXCIsIFwibWV0dGFpdFwiLCBcIm1ldHRpb25zXCIsIFwibWV0dGllelwiLCBcIm1ldHRhaWVudFwiLCBcIm1ldHRyYWlcIiwgXCJtZXR0cmFzXCIsIFwibWV0dHJhXCIsIFwibWV0dHJvbnNcIiwgXCJtZXR0cmV6XCIsIFwibWV0dHJvbnRcIiwgXCJtZXR0ZVwiLCBcIm1ldHRlc1wiLCBcIm1pc3NlXCIsIFwibWlzc2VzXCIsIFwibcOudFwiLCBcIm1pc3Npb25zXCIsIFwibWlzc2llelwiLCBcIm1pc3NlbnRcIiwgXCJtZXR0cmFpc1wiLCBcIm1ldHRyYWl0XCIsIFwibWV0dHJpb25zXCIsIFwibWV0dHJpZXpcIiwgXCJtZXR0cmFpZW50XCIsIFwibWV0dGFudFwiLCBcImZpbmlzXCIsIFwiZmluaXRcIiwgXCJmaW5pc3NvbnNcIiwgXCJmaW5pc3NlelwiLCBcImZpbmlzc2VudFwiLCBcImZpbmlzLWplXCIsIFwiZmluaXMtdHVcIiwgXCJmaW5pdC1pbFwiLCBcImZpbml0LWVsbGVcIiwgXCJmaW5pdC1vblwiLCBcImZpbmlzc29ucy1ub3VzXCIsIFwiZmluaXNzZXotdm91c1wiLCBcImZpbmlzc2VudC1pbHNcIiwgXCJmaW5pc3NlbnQtZWxsZXNcIiwgXCJmaW7Drm1lc1wiLCBcImZpbsOudGVzXCIsIFwiZmluaXJlbnRcIiwgXCJmaW5pc3NhaXNcIiwgXCJmaW5pc3NhaXRcIiwgXCJmaW5pc3Npb25zXCIsIFwiZmluaXNzaWV6XCIsIFwiZmluaXNzYWllbnRcIiwgXCJmaW5pcmFpXCIsIFwiZmluaXJhc1wiLCBcImZpbmlyYVwiLCBcImZpbmlyb25zXCIsIFwiZmluaXJlelwiLCBcImZpbmlyb250XCIsIFwiZmluaVwiLCBcImZpbmlzc2VcIiwgXCJmaW5pc3Nlc1wiLCBcImZpbsOudFwiLCBcImZpbmlyYWlzXCIsIFwiZmluaXJhaXRcIiwgXCJmaW5pcmlvbnNcIiwgXCJmaW5pcmllelwiLCBcImZpbmlyYWllbnRcIiwgXCJmaW5pc3NhbnRcIl07XG52YXIgb3RoZXJBdXhpbGlhcmllc0luZmluaXRpdmUgPSBbXCJhdm9pclwiLCBcImFsbGVyXCIsIFwidmVuaXJcIiwgXCJkZXZvaXJcIiwgXCJwb3V2b2lyXCIsIFwic2VtYmxlclwiLCBcInBhcmHDrnRyZVwiLCBcInBhcmFpdHJlXCIsIFwibWV0dHJlXCIsIFwiZmluaXJcIl07XG52YXIgY29wdWxhID0gW1wic3Vpc1wiLCBcImVzXCIsIFwiZXN0XCIsIFwiZXN0LWNlXCIsIFwibidlc3RcIiwgXCJzb21tZXNcIiwgXCLDqnRlc1wiLCBcInNvbnRcIiwgXCJzdWlzLWplXCIsIFwiZXMtdHVcIiwgXCJlc3QtaWxcIiwgXCJlc3QtZWxsZVwiLCBcImVzdC1vblwiLCBcInNvbW1lcy1ub3VzXCIsIFwiw6p0ZXMtdm91c1wiLCBcInNvbnQtaWxzXCIsIFwic29udC1lbGxlc1wiLCBcIsOpdGFpc1wiLCBcIsOpdGFpdFwiLCBcIsOpdGlvbnNcIiwgXCLDqXRpZXpcIiwgXCLDqXRhaWVudFwiLCBcInNlcmFpXCIsIFwic2VyYXNcIiwgXCJzZXJhXCIsIFwic2Vyb25zXCIsIFwic2VyZXpcIiwgXCJzZXJvbnRcIiwgXCJzZXJhaXNcIiwgXCJzZXJhaXRcIiwgXCJzZXJpb25zXCIsIFwic2VyaWV6XCIsIFwic2VyYWllbnRcIiwgXCJzb2lzXCIsIFwic29pdFwiLCBcInNveW9uc1wiLCBcInNveWV6XCIsIFwic29pZW50XCIsIFwiw6l0w6lcIl07XG52YXIgY29wdWxhSW5maW5pdGl2ZSA9IFtcIsOqdHJlXCJdO1xuLypcbuKAmUV4Y2VwdMOpJyBub3QgZmlsdGVyZWQgYmVjYXVzZSBtaWdodCBhbHNvIGJlIHBhcnRpY2lwbGUgb2YgJ2V4Y2VwdGVyJywgJ2NvbmNlcm5hbnQnIG5vdCBmaWx0ZXJlZCBiZWNhdXNlIG1pZ2h0IGFsc28gYmUgcHJlc2VudCBwYXJ0aWNpcGxlXG5vZiAnY29uY2VybmVyJy5cbk5vdCBmaWx0ZXJlZCBiZWNhdXNlIG9mIHByaW1hcnkgbWVhbmluZzogJ2dyw6JjZSDDoCcgKCdncmFjZScpLCAnZW4gZmFjZScgKCdmYWNlJyksICdlbiBkZWhvcnMnICgnb3V0c2lkZScpLCAnw6AgY8O0dMOpJyAoJ3NpZGUnKSxcbifDoCBkcm9pdGUnICgncmlnaHQnKSwgJ8OgIGdhdWNoZScgKCdsZWZ0JykuICd2b2ljaScgYWxyZWFkeSBpbmNsdWRlZCBpbiB0aGUgbG9jYXRpdmUgcHJvbm91biBsaXN0LlxuJ2hvcnMnIGZvciAnaG9ycyBkZScsICdxdWFudCcgZm9yICdxdWFudCDDoCcuIOKAmHRyYXZlcnPigJkgaXMgcGFydCBvZiAnw6AgdHJhdmVycy4nXG4gKi9cbnZhciBwcmVwb3NpdGlvbnMgPSBbXCLDoFwiLCBcImFwcsOoc1wiLCBcImF1LWRlbMOgXCIsIFwiYXUtZGVzc291c1wiLCBcImF1LWRlc3N1c1wiLCBcImF2YW50XCIsIFwiYXZlY1wiLCBcImNvbmNlcm5hbnRcIiwgXCJjaGV6XCIsIFwiY29udHJlXCIsIFwiZGFuc1wiLCBcImRlXCIsIFwiZGVwdWlzXCIsIFwiZGVycmnDqHJlXCIsIFwiZMOoc1wiLCBcImRldmFudFwiLCBcImR1cmFudFwiLCBcImVuXCIsIFwiZW50cmVcIiwgXCJlbnZlcnNcIiwgXCJlbnZpcm9uXCIsIFwiaG9ybWlzXCIsIFwiaG9yc1wiLCBcImp1c3F1ZVwiLCBcImp1c3F1J8OgXCIsIFwianVzcXUnYXVcIiwgXCJqdXNxdSdhdXhcIiwgXCJsb2luXCIsIFwibW95ZW5uYW50XCIsIFwib3V0cmVcIiwgXCJwYXJcIiwgXCJwYXJtaVwiLCBcInBlbmRhbnRcIiwgXCJwb3VyXCIsIFwicHLDqHNcIiwgXCJxdWFudFwiLCBcInNhbnNcIiwgXCJzb3VzXCIsIFwic3VyXCIsIFwidHJhdmVyc1wiLCBcInZlcnNcIiwgXCJ2b2lsw6BcIl07XG52YXIgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zID0gW1wiZXRcIiwgXCJuaVwiLCBcIm9yXCIsIFwib3VcIl07XG4vKlxuRXQuLi5ldCwgb3UuLi5vdSwgbmkuLi5uaSDigJMgaW4gdGhlaXIgc2ltcGxlIGZvcm1zIGFscmVhZHkgaW4gb3RoZXIgbGlzdHMuICdkJ3VuZScsICdkJ2F1dHJlJyBhcmUgcGFydCBvZiAnZCd1bmUgcGFydOKApmQnYXV0cmUgcGFydCcuXG4nc2lub24nIGlzIHBhcnQgb2YgJ3Npbm9u4oCmZHUgbW9pbnMnLlxuKi9cbnZhciBjb3JyZWxhdGl2ZUNvbmp1bmN0aW9ucyA9IFtcIm5vblwiLCBcInBhc1wiLCBcInNldWxlbWVudFwiLCBcInNpdMO0dFwiLCBcImF1c3NpdMO0dFwiLCBcImQnYXV0cmVcIl07XG4vKlxuTWFueSBzdWJvcmRpbmF0aW5nIGNvbmp1bmN0aW9ucyBhcmUgYWxyZWFkeSBpbmNsdWRlZCBpbiB0aGUgcHJlcG9zaXRpb25zIGxpc3QsIHRyYW5zaXRpb24gd29yZHMgbGlzdCBvciBwcm9ub21pbmFsIGFkdmVyYnMgbGlzdC5cbidhdXRhbnQnLCAnZCdhdXRhbnQnLCAnZCdpY2knLCAndGFuZGlzJyBwYXJ0IG9mIHRoZSBjb21wbGV4IGZvcm0gd2l0aCAncXVlJywgJ2xvcnMnIGFzIGEgcGFydCBvZiAnbG9ycyBtw6ptZSBxdWUnLFxuJ3BhcmNlJyBhcyBhIHBhcnQgb2YgJ3BhcmNlIHF1ZSdcbiAqL1xudmFyIHN1Ym9yZGluYXRpbmdDb25qdW5jdGlvbnMgPSBbXCJhZmluXCIsIFwiYXV0YW50XCIsIFwiY29tbWVcIiwgXCJkJ2F1dGFudFwiLCBcImQnaWNpXCIsIFwicXVhbmRcIiwgXCJsb3JzXCIsIFwicGFyY2VcIiwgXCJzaVwiLCBcInRhbmRpc1wiXTtcbi8qXG4gVGhlc2UgdmVyYnMgYXJlIGZyZXF1ZW50bHkgdXNlZCBpbiBpbnRlcnZpZXdzIHRvIGluZGljYXRlIHF1ZXN0aW9ucyBhbmQgYW5zd2Vycy5cbidEaXJlJyAoJ3RvIHNheScpLCAnZGVtYW5kZXInICgndG8gYXNrJyksICdwZW5zZXInICgndG8gdGhpbmsnKeKAkyAxNiBmb3JtczsgbW9yZSBzcGVjaWZpYyB2ZXJicyDigJMgNCBmb3Jtc1xuJ2FmZmlybWVyJywgJ2Fqb3V0ZXInICgndG8gYWRkJyksICdhbmFseXNlcicsICdhdmFuY2VyJywgJ8OpY3JpcmUnICgndG8gd3JpdGUnKSwgJ2luZGlxdWVyJywgJ3BvdXJzdWl2cmUnICgndG8gcHVyc3VlJyksICdwcsOpY2lzZXInLCAncsOpc3VtZXInLFxuICdzb3V2ZW5pcicgKCd0byByZW1lbWJlcicpLCAndMOpbW9pZ25lcicgKCd0byB3aXRuZXNzJykg4oCTIG9ubHkgVlMgZm9ybXMgKGR1ZSB0byB0aGVpciBtb3JlIGdlbmVyYWwgbmF0dXJlKVxuICovXG52YXIgaW50ZXJ2aWV3VmVyYnMgPSBbXCJkaXRcIiwgXCJkaXNlbnRcIiwgXCJkaXQtaWxcIiwgXCJkaXQtZWxsZVwiLCBcImRpc2VudC1pbHNcIiwgXCJkaXNlbnQtZWxsZXNcIiwgXCJkaXNhaXRcIiwgXCJkaXNhaXQtaWxcIiwgXCJkaXNhaXQtZWxsZVwiLCBcImRpc2FpZW50LWlsc1wiLCBcImRpc2FpZW50LWVsbGVzXCIsIFwiZGlyZW50XCIsIFwiZGVtYW5kZVwiLCBcImRlbWFuZGVudFwiLCBcImRlbWFuZGUtdC1pbFwiLCBcImRlbWFuZGUtdC1lbGxlXCIsIFwiZGVtYW5kZW50LWlsc1wiLCBcImRlbWFuZGVudC1lbGxlc1wiLCBcImRlbWFuZGFpdFwiLCBcImRlbWFuZGFpZW50XCIsIFwiZGVtYW5kYWl0LWlsXCIsIFwiZGVtYW5kYWl0LWVsbGVcIiwgXCJkZW1hbmRhaWVudC1pbHNcIiwgXCJkZW1hbmRhaWVudC1lbGxlc1wiLCBcImRlbWFuZGFcIiwgXCJkZW1hbmRhLXQtaWxcIiwgXCJkZW1hbmRhLXQtZWxsZVwiLCBcImRlbWFuZMOpXCIsIFwicGVuc2VcIiwgXCJwZW5zZW50XCIsIFwicGVuc2UtdC1pbFwiLCBcInBlbnNlLXQtZWxsZVwiLCBcInBlbnNlbnQtaWxzXCIsIFwicGVuc2VudC1lbGxlc1wiLCBcInBlbnNhaXRcIiwgXCJwZW5zYWllbnRcIiwgXCJwZW5zYWl0LWlsXCIsIFwicGVuc2FpdC1lbGxlXCIsIFwicGVuc2FpZW50LWlsc1wiLCBcInBlbnNhaWVudC1lbGxlc1wiLCBcInBlbnNhXCIsIFwicGVuc2EtdC1pbFwiLCBcInBlbnNhLXQtZWxsZVwiLCBcInBlbnPDqVwiLCBcImFmZmlybWVcIiwgXCJhZmZpcm1lLXQtaWxcIiwgXCJhZmZpcm1lLXQtZWxsZVwiLCBcImFmZmlybcOpXCIsIFwiYXZvdWVcIiwgXCJhdm91ZS10LWlsXCIsIFwiYXZvdWUtdC1lbGxlXCIsIFwiYXZvdcOpXCIsIFwiY29uY8OoZGVcIiwgXCJjb25jw6hkZS10LWlsXCIsIFwiY29uY8OoZGUtdC1lbGxlXCIsIFwiY29uY8OpZMOpXCIsIFwiY29uZmllXCIsIFwiY29uZmllLXQtaWxcIiwgXCJjb25maWUtdC1lbGxlXCIsIFwiY29uZmnDqVwiLCBcImNvbnRpbnVlXCIsIFwiY29udGludWUtdC1pbFwiLCBcImNvbnRpbnVlLXQtZWxsZVwiLCBcImNvbnRpbnXDqVwiLCBcImTDqWNsYW1lXCIsIFwiZMOpY2xhbWUtdC1pbFwiLCBcImTDqWNsYW1lLXQtZWxsZVwiLCBcImTDqWNsYW3DqVwiLCBcImTDqWNsYXJlXCIsIFwiZMOpY2xhcmUtdC1pbFwiLCBcImTDqWNsYXJlLXQtZWxsZVwiLCBcImTDqWNsYXLDqVwiLCBcImTDqXBsb3JlXCIsIFwiZMOpcGxvcmUtdC1pbFwiLCBcImTDqXBsb3JlLXQtZWxsZVwiLCBcImTDqXBsb3LDqVwiLCBcImV4cGxpcXVlXCIsIFwiZXhwbGlxdWUtdC1pbFwiLCBcImV4cGxpcXVlLXQtZWxsZVwiLCBcImV4cGxpcXXDqVwiLCBcImxhbmNlXCIsIFwibGFuY2UtdC1pbFwiLCBcImxhbmNlLXQtZWxsZVwiLCBcImxhbmPDqVwiLCBcIm5hcnJlXCIsIFwibmFycmUtdC1pbFwiLCBcIm5hcnJlLXQtZWxsZVwiLCBcIm5hcnLDqVwiLCBcInJhY29udGVcIiwgXCJyYWNvbnRlLXQtaWxcIiwgXCJyYWNvbnRlLXQtZWxsZVwiLCBcInJhY29udMOpXCIsIFwicmFwcGVsbGVcIiwgXCJyYXBwZWxsZS10LWlsXCIsIFwicmFwcGVsbGUtdC1lbGxlXCIsIFwicmFwcGVsw6lcIiwgXCJyw6lhZ2l0XCIsIFwicsOpYWdpdC1pbFwiLCBcInLDqWFnaXQtZWxsZVwiLCBcInLDqWFnaVwiLCBcInLDqXBvbmRcIiwgXCJyw6lwb25kLWlsXCIsIFwicsOpcG9uZC1lbGxlXCIsIFwicsOpcG9uZHVcIiwgXCJyw6l0b3JxdWVcIiwgXCJyw6l0b3JxdWUtdC1pbFwiLCBcInLDqXRvcnF1ZS10LWVsbGVcIiwgXCJyw6l0b3JxdcOpXCIsIFwic291bGlnbmVcIiwgXCJzb3VsaWduZS10LWlsXCIsIFwic291bGlnbmUtdC1lbGxlXCIsIFwic291bGlnbsOpXCIsIFwiYWZmaXJtZS10LWlsXCIsIFwiYWZmaXJtZS10LWVsbGVcIiwgXCJham91dGUtdC1pbFwiLCBcImFqb3V0ZS10LWVsbGVcIiwgXCJhbmFseXNlLXQtaWxcIiwgXCJhbmFseXNlLXQtZWxsZVwiLCBcImF2YW5jZS10LWlsXCIsIFwiYXZhbmNlLXQtZWxsZVwiLCBcIsOpY3JpdC1pbFwiLCBcIsOpY3JpdC1lbGxlXCIsIFwiaW5kaXF1ZS10LWlsXCIsIFwiaW5kaXF1ZS10LWVsbGVcIiwgXCJwb3Vyc3VpdC1pbFwiLCBcInBvdXJzdWl0LWVsbGVcIiwgXCJwcsOpY2lzZS10LWlsXCIsIFwicHLDqWNpc2UtdC1lbGxlXCIsIFwicsOpc3VtZS10LWlsXCIsIFwicsOpc3VtZS10LWVsbGVcIiwgXCJzb3V2aWVudC1pbFwiLCBcInNvdXZpZW50LWVsbGVcIiwgXCJ0w6ltb2lnbmUtdC1pbFwiLCBcInTDqW1vaWduZS10LWVsbGVcIl07XG52YXIgaW50ZXJ2aWV3VmVyYnNJbmZpbml0aXZlID0gW1wiZGlyZVwiLCBcInBlbnNlclwiLCBcImRlbWFuZGVyXCIsIFwiY29uY8OpZGVyXCIsIFwiY29udGludWVyXCIsIFwiY29uZmllclwiLCBcImTDqWNsYW1lclwiLCBcImTDqWNsYXJlclwiLCBcImTDqXBsb3JlclwiLCBcImV4cGxpcXVlclwiLCBcImxhbmNlclwiLCBcIm5hcnJlclwiLCBcInJhY29udGVyXCIsIFwicmFwcGVsZXJcIiwgXCJyw6lhZ2lyXCIsIFwicsOpcG9uZHJlXCIsIFwicsOpdG9ycXVlclwiLCBcInNvdWxpZ25lclwiLCBcImFmZmlybWVyXCIsIFwiYWpvdXRlclwiLCBcImFuYWx5c2VyXCIsIFwiYXZhbmNlclwiLCBcIsOpY3JpcmVcIiwgXCJpbmRpcXVlclwiLCBcInBvdXJzdWl2cmVcIiwgXCJwcsOpY2lzZXJcIiwgXCJyw6lzdW1lclwiLCBcInTDqW1vaWduZXJcIl07XG4vLyBUaGVzZSB0cmFuc2l0aW9uIHdvcmRzIHdlcmUgbm90IGluY2x1ZGVkIGluIHRoZSBsaXN0IGZvciB0aGUgdHJhbnNpdGlvbiB3b3JkIGFzc2Vzc21lbnQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbnZhciBhZGRpdGlvbmFsVHJhbnNpdGlvbldvcmRzID0gW1wiZW5jb3JlXCIsIFwiw6l0ZXJuZWxsZW1lbnRcIiwgXCJpbW3DqWRpYXRlbWVudFwiLCBcImNvbXByaXNcIiwgXCJjb21wcmVuYW50XCIsIFwiaW5jbHVzXCIsIFwibmF0dXJlbGxlbWVudFwiLCBcInBhcnRpY3VsacOocmVtZW50XCIsIFwibm90YWJsZW1lbnRcIiwgXCJhY3R1ZWxsZW1lbnRcIiwgXCJtYWludGVuYW50XCIsIFwib3JkaW5haXJlbWVudFwiLCBcImfDqW7DqXJhbGVtZW50XCIsIFwiaGFiaXR1ZWxsZW1lbnRcIiwgXCJkJ2hhYml0dWRlXCIsIFwidnJhaW1lbnRcIiwgXCJmaW5hbGVtZW50XCIsIFwidW5pcXVlbWVudFwiLCBcInBldXQtw6p0cmVcIiwgXCJpbml0aWFsZW1lbnRcIiwgXCJkw6lqw6BcIiwgXCJjLi3DoC1kXCIsIFwic291dmVudFwiLCBcImZyw6lxdWVtbWVudFwiLCBcInLDqWd1bGnDqHJlbWVudFwiLCBcInNpbXBsZW1lbnRcIiwgXCLDqXZlbnR1ZWxsZW1lbnRcIiwgXCJxdWVscXVlZm9pc1wiLCBcInBhcmZvaXNcIiwgXCJwcm9iYWJsZVwiLCBcInBsYXVzaWJsZVwiLCBcImphbWFpc1wiLCBcInRvdWpvdXJzXCIsIFwiaW5jaWRlbW1lbnRcIiwgXCJhY2NpZGVudGVsbGVtZW50XCIsIFwicsOpY2VtbWVudFwiLCBcImRlcm5pw6hyZW1lbnRcIiwgXCJyZWxhdGl2ZW1lbnRcIiwgXCJjbGFpcmVtZW50XCIsIFwiw6l2aWRlbW1lbnRcIiwgXCJhcHBhcmVtbWVudFwiLCBcInBvdXJ2dVwiXTtcbnZhciBpbnRlbnNpZmllcnMgPSBbXCJhc3NlelwiLCBcInRyb3BcIiwgXCJ0ZWxsZW1lbnRcIiwgXCJwcmVzcXVlXCIsIFwidHLDqHNcIiwgXCJhYnNvbHVtZW50XCIsIFwiZXh0csOqbWVtZW50XCIsIFwicXVhc2lcIiwgXCJxdWFzaW1lbnRcIiwgXCJmb3J0XCJdO1xuLy8gVGhlc2UgdmVyYnMgY29udmV5IGxpdHRsZSBtZWFuaW5nLlxudmFyIGRlbGV4aWNhbGl6ZWRWZXJicyA9IFtcImZhaXNcIiwgXCJmYWl0XCIsIFwiZmFpc29uc1wiLCBcImZhaXRlc1wiLCBcImZvbnRcIiwgXCJmYWlzLWplXCIsIFwiZmFpdC1pbFwiLCBcImZhaXQtZWxsZVwiLCBcImZhaXQtb25cIiwgXCJmYWlzb25zLW5vdXNcIiwgXCJmYWl0ZXMtdm91c1wiLCBcImZvbnQtaWxzXCIsIFwiZm9udC1lbGxlc1wiLCBcImZpc1wiLCBcImZpdFwiLCBcImbDrm1lc1wiLCBcImbDrnRlc1wiLCBcImZpcmVudFwiLCBcImZhaXNhaXNcIiwgXCJmYWlzYWl0XCIsIFwiZmFpc2lvbnNcIiwgXCJmYWlzaWV6XCIsIFwiZmFpc2FpZW50XCIsIFwiZmVyYWlcIiwgXCJmZXJhc1wiLCBcImZlcmFcIiwgXCJmZXJvbnNcIiwgXCJmZXJlelwiLCBcImZlcm9udFwiLCBcInZldXhcIiwgXCJ2ZXV0XCIsIFwidm91bG9uc1wiLCBcInZvdWxlelwiLCBcInZldWxlbnRcIiwgXCJ2b3VsdXNcIiwgXCJ2b3VsdXRcIiwgXCJ2b3Vsw7ttZXNcIiwgXCJ2b3Vsw7t0ZXNcIiwgXCJ2b3VsdXJlbnRcIiwgXCJ2b3VsYWlzXCIsIFwidm91bGFpdFwiLCBcInZvdWxpb25zXCIsIFwidm91bGllelwiLCBcInZvdWxhaWVudFwiLCBcInZvdWRyYWlcIiwgXCJ2b3VkcmFzXCIsIFwidm91ZHJhXCIsIFwidm91ZHJvbnNcIiwgXCJ2b3VkcmV6XCIsIFwidm91ZHJvbnRcIiwgXCJ2b3VsdVwiLCBcInZldXgtamVcIiwgXCJ2ZXV4LXR1XCIsIFwidmV1dC1pbFwiLCBcInZldXQtZWxsZVwiLCBcInZldXQtb25cIiwgXCJ2b3Vsb25zLW5vdXNcIiwgXCJ2b3VsZXotdm91c1wiLCBcInZldWxlbnQtaWxzXCIsIFwidmV1bGVudC1lbGxlc1wiLCBcInZvdWRyYWlzXCIsIFwidm91ZHJhaXRcIiwgXCJ2b3VkcmlvbnNcIiwgXCJ2b3VkcmllelwiLCBcInZvdWRyYWllbnRcIiwgXCJ2b3VsYW50XCJdO1xudmFyIGRlbGV4aWNhbGl6ZWRWZXJic0luZmluaXRpdmUgPSBbXCJmYWlyZVwiLCBcInZvdWxvaXJcIl07XG4vKiBUaGVzZSBhZGplY3RpdmVzIGFuZCBhZHZlcmJzIGFyZSBzbyBnZW5lcmFsLCB0aGV5IHNob3VsZCBuZXZlciBiZSBzdWdnZXN0ZWQgYXMgYSAoc2luZ2xlKSBrZXl3b3JkLlxuIEtleXdvcmQgY29tYmluYXRpb25zIGNvbnRhaW5pbmcgdGhlc2UgYWRqZWN0aXZlcy9hZHZlcmJzIGFyZSBmaW5lLlxuICdEZXJuaWVyJyBpcyBhbHNvIGluY2x1ZGVkIGluIGdlbmVyYWxBZGplY3RpdmVzQWR2ZXJic1ByZWNlZGluZyBiZWNhdXNlIGl0IGNhbiBiZSB1c2VkIGJvdGggYmVmb3JlIGFuZCBhZnRlciBhIG5vdW4sXG4gYW5kIGl0IHNob3VsZCBiZSBmaWx0ZXJlZCBvdXQgZWl0aGVyIHdheS5cbiAqL1xudmFyIGdlbmVyYWxBZGplY3RpdmVzQWR2ZXJicyA9IFtcImFudMOpcmlldXJcIiwgXCJhbnTDqXJpZXVyZXNcIiwgXCJhbnTDqXJpZXVyc1wiLCBcImFudMOpcmlldXJlXCIsIFwicHLDqWPDqWRlbnRcIiwgXCJwcsOpY8OpZGVudHNcIiwgXCJwcsOpY8OpZGVudGVcIiwgXCJwcsOpY8OpZGVudGVzXCIsIFwiZmFjaWxlXCIsIFwiZmFjaWxlc1wiLCBcInNpbXBsZVwiLCBcInNpbXBsZXNcIiwgXCJ2aXRlXCIsIFwidml0ZXNcIiwgXCJ2aXRlc3NlXCIsIFwidml0ZXNzZXNcIiwgXCJkaWZmaWNpbGVcIiwgXCJkaWZmaWNpbGVzXCIsIFwicHJvcHJlXCIsIFwicHJvcHJlc1wiLCBcImxvbmdcIiwgXCJsb25nZVwiLCBcImxvbmdzXCIsIFwibG9uZ2VzXCIsIFwibG9uZ3VlXCIsIFwibG9uZ3Vlc1wiLCBcImJhc1wiLCBcImJhc3NlXCIsIFwiYmFzc2VzXCIsIFwib3JkaW5haXJlXCIsIFwib3JkaW5haXJlc1wiLCBcImJyZWZcIiwgXCJicmVmc1wiLCBcImJyw6h2ZVwiLCBcImJyw6h2ZXNcIiwgXCJzw7tyXCIsIFwic8O7cnNcIiwgXCJzw7tyZVwiLCBcInPDu3Jlc1wiLCBcInN1cmVcIiwgXCJzdXJlc1wiLCBcInN1cnNcIiwgXCJoYWJpdHVlbFwiLCBcImhhYml0dWVsc1wiLCBcImhhYml0dWVsbGVcIiwgXCJoYWJpdHVlbGxlc1wiLCBcInNvaS1kaXNhbnRcIiwgXCJzdXJ0b3V0XCIsIFwicsOpY2VudFwiLCBcInLDqWNlbnRzXCIsIFwicsOpY2VudGVcIiwgXCJyw6ljZW50ZXNcIiwgXCJ0b3RhbFwiLCBcInRvdGF1eFwiLCBcInRvdGFsZVwiLCBcInRvdGFsZXNcIiwgXCJjb21wbGV0XCIsIFwiY29tcGxldHNcIiwgXCJjb21wbMOodGVcIiwgXCJjb21wbMOodGVzXCIsIFwicG9zc2libGVcIiwgXCJwb3NzaWJsZXNcIiwgXCJjb21tdW7DqW1lbnRcIiwgXCJjb25zdGFtbWVudFwiLCBcImZhY2lsZW1lbnRcIiwgXCJjb250aW51ZWxsZW1lbnRcIiwgXCJkaXJlY3RlbWVudFwiLCBcImzDqWfDqHJlbWVudFwiLCBcImRlcm5pZXJcIiwgXCJkZXJuaWVyc1wiLCBcImRlcm5pw6hyZVwiLCBcImRlcm5pw6hyZXNcIiwgXCJkaWZmw6lyZW50XCIsIFwiZGlmZsOpcmVudHNcIiwgXCJkaWZmw6lyZW50ZVwiLCBcImRpZmbDqXJlbnRlc1wiLCBcInNpbWlsYWlyZVwiLCBcInNpbWlsYWlyZXNcIiwgXCJwYXJlaWxcIiwgXCJwYXJlaWxzXCIsIFwicGFyZWlsbGVcIiwgXCJwYXJlaWxsZXNcIiwgXCJsYXJnZW1lbnRcIiwgXCJtYWxcIiwgXCJzdXBlclwiLCBcImJpZW5cIiwgXCJwaXJlXCIsIFwicGlyZXNcIiwgXCJzdWl2YW50c1wiLCBcInN1aXZhbnRlXCIsIFwic3VpdmFudGVzXCIsIFwicHJvY2hhaW5cIiwgXCJwcm9jaGFpbmVcIiwgXCJwcm9jaGFpbnNcIiwgXCJwcm9jaGFpbmVzXCIsIFwicHJvY2hlXCIsIFwicHJvY2hlc1wiLCBcImZ1clwiXTtcbi8qXG4gJ0Rlcm5pZXInIGlzIGFsc28gaW5jbHVkZWQgaW4gZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzIGJlY2F1c2UgaXQgY2FuIGJlIHVzZWQgYm90aCBiZWZvcmUgYW5kIGFmdGVyIGEgbm91bixcbiBhbmQgaXQgc2hvdWxkIGJlIGZpbHRlcmVkIG91dCBlaXRoZXIgd2F5LlxuICovXG52YXIgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzUHJlY2VkaW5nID0gW1wibm91dmVhdVwiLCBcIm5vdXZlbFwiLCBcIm5vdXZlbGxlXCIsIFwibm91dmVhdXhcIiwgXCJub3V2ZWxsZXNcIiwgXCJ2aWV1eFwiLCBcInZpZWlsXCIsIFwidmllaWxsZVwiLCBcInZpZWlsbGVzXCIsIFwiYmVhdVwiLCBcImJlbFwiLCBcImJlbGxlXCIsIFwiYmVsbGVzXCIsIFwiYm9uXCIsIFwiYm9uc1wiLCBcImJvbm5lXCIsIFwiYm9ubmVzXCIsIFwiZ3JhbmRcIiwgXCJncmFuZGVcIiwgXCJncmFuZHNcIiwgXCJncmFuZGVzXCIsIFwiaGF1dFwiLCBcImhhdXRzXCIsIFwiaGF1dGVcIiwgXCJoYXV0ZXNcIiwgXCJwZXRpdFwiLCBcInBldGl0ZVwiLCBcInBldGl0c1wiLCBcInBldGl0ZXNcIiwgXCJtZWlsbGV1clwiLCBcIm1laWxsZXVyc1wiLCBcIm1laWxsZXVyZVwiLCBcIm1laWxsZXVyZXNcIiwgXCJqb2xpXCIsIFwiam9saXNcIiwgXCJqb2xpZVwiLCBcImpvbGllc1wiLCBcImdyb3NcIiwgXCJncm9zc2VcIiwgXCJncm9zc2VzXCIsIFwibWF1dmFpc1wiLCBcIm1hdXZhaXNlXCIsIFwibWF1dmFpc2VzXCIsIFwiZGVybmllclwiLCBcImRlcm5pZXJzXCIsIFwiZGVybmnDqHJlXCIsIFwiZGVybmnDqHJlc1wiXTtcbnZhciBpbnRlcmplY3Rpb25zID0gW1wiYWhcIiwgXCJoYVwiLCBcIm9oXCIsIFwiaG9cIiwgXCJiaXNcIiwgXCJwbG91ZlwiLCBcInZsYW5cIiwgXCJjaWVsXCIsIFwicG91ZlwiLCBcInBhZlwiLCBcImNyYWNcIiwgXCJodXJyYWhcIiwgXCJhbGxvXCIsIFwic3RvcFwiLCBcImJyYXZvXCIsIFwiw7RcIiwgXCJlaFwiLCBcImjDqVwiLCBcImHDr2VcIiwgXCJvZWZcIiwgXCJhaGlcIiwgXCJmaVwiLCBcInplc3RcIiwgXCJoZW1cIiwgXCJob2zDoFwiLCBcImNodXRcIl07XG4vLyBUaGVzZSB3b3JkcyBhbmQgYWJicmV2aWF0aW9ucyBhcmUgZnJlcXVlbnRseSB1c2VkIGluIHJlY2lwZXMgaW4gbGlzdHMgb2YgaW5ncmVkaWVudHMuXG52YXIgcmVjaXBlV29yZHMgPSBbXCJtZ1wiLCBcImdcIiwgXCJrZ1wiLCBcIm1sXCIsIFwiZGxcIiwgXCJjbFwiLCBcImxcIiwgXCJncmFtbWVzXCIsIFwiZ3JhbVwiLCBcIm9uY2VcIiwgXCJvbmNlc1wiLCBcIm96XCIsIFwibGJzXCIsIFwiY8OgY1wiLCBcImNjXCIsIFwiY8OgZFwiLCBcImPDoHNcIiwgXCJjw6B0XCIsIFwiY2RcIiwgXCJjc1wiLCBcImN0XCJdO1xudmFyIHRpbWVXb3JkcyA9IFtcIm1pbnV0ZVwiLCBcIm1pbnV0ZXNcIiwgXCJoZXVyZVwiLCBcImhldXJlc1wiLCBcImpvdXJuw6llXCIsIFwiam91cm7DqWVzXCIsIFwic2VtYWluZVwiLCBcInNlbWFpbmVzXCIsIFwibW9pc1wiLCBcImFubsOpZVwiLCBcImFubsOpZXNcIiwgXCJhdWpvdXJkJ2h1aVwiLCBcImRlbWFpblwiLCBcImhpZXJcIiwgXCJhcHLDqHMtZGVtYWluXCIsIFwiYXZhbnQtaGllclwiXTtcbnZhciB2YWd1ZU5vdW5zID0gW1wiY2hvc2VcIiwgXCJjaG9zZXNcIiwgXCJmYcOnb25cIiwgXCJmYcOnb25zXCIsIFwicGnDqGNlXCIsIFwicGnDqGNlc1wiLCBcInRydWNcIiwgXCJ0cnVjc1wiLCBcImZvaXNcIiwgXCJjYXNcIiwgXCJhc3BlY3RcIiwgXCJhc3BlY3RzXCIsIFwib2JqZXRcIiwgXCJvYmpldHNcIiwgXCJpZMOpZVwiLCBcImlkw6llc1wiLCBcInRow6htZVwiLCBcInRow6htZXNcIiwgXCJzdWpldFwiLCBcInN1amV0c1wiLCBcInBlcnNvbm5lc1wiLCBcIm1hbmnDqHJlXCIsIFwibWFuacOocmVzXCIsIFwic29ydGVcIiwgXCJzb3J0ZXNcIl07XG52YXIgbWlzY2VsbGFuZW91cyA9IFtcIm5lXCIsIFwib3VpXCIsIFwiZCdhY2NvcmRcIiwgXCJhbWVuXCIsIFwiZXVyb1wiLCBcImV1cm9zXCIsIFwiZXRjXCJdO1xudmFyIHRpdGxlc1ByZWNlZGluZyA9IFtcIm1tZVwiLCBcIm1tZXNcIiwgXCJtbGxlXCIsIFwibWxsZXNcIiwgXCJtbVwiLCBcImRyXCIsIFwicHJcIl07XG52YXIgdGl0bGVzRm9sbG93aW5nID0gW1wianJcIiwgXCJzclwiXTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgYXQgdGhlIGVuZGluZyBvZiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBdEVuZGluZzogW10uY29uY2F0KG9yZGluYWxOdW1lcmFscywgb3RoZXJBdXhpbGlhcmllc0luZmluaXRpdmUsIGRlbGV4aWNhbGl6ZWRWZXJic0luZmluaXRpdmUsIGNvcHVsYUluZmluaXRpdmUsIGludGVydmlld1ZlcmJzSW5maW5pdGl2ZSwgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzUHJlY2VkaW5nKSxcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHdvcmQgY29tYmluYXRpb25zLlxuICAgICAgICBmaWx0ZXJlZEF0QmVnaW5uaW5nOiBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMsXG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIG9mIHdvcmQgY29tYmluYXRpb25zLlxuICAgICAgICBmaWx0ZXJlZEF0QmVnaW5uaW5nQW5kRW5kaW5nOiBbXS5jb25jYXQoYXJ0aWNsZXMsIHByZXBvc2l0aW9ucywgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBkZW1vbnN0cmF0aXZlUHJvbm91bnMsIGludGVuc2lmaWVycywgcXVhbnRpZmllcnMsIHBvc3Nlc3NpdmVQcm9ub3VucyksXG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgZXZlcnl3aGVyZSB3aXRoaW4gd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQW55d2hlcmU6IFtdLmNvbmNhdCh0cmFuc2l0aW9uV29yZHMsIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlLCBwZXJzb25hbFByb25vdW5zQWNjdXNhdGl2ZSwgcGVyc29uYWxQcm9ub3Vuc1N0cmVzc2VkLCByZWZsZXhpdmVQcm9ub3VucywgaW50ZXJqZWN0aW9ucywgY2FyZGluYWxOdW1lcmFscywgY29wdWxhLCBpbnRlcnZpZXdWZXJicywgb3RoZXJBdXhpbGlhcmllcywgZGVsZXhpY2FsaXplZFZlcmJzLCBpbmRlZmluaXRlUHJvbm91bnMsIGNvcnJlbGF0aXZlQ29uanVuY3Rpb25zLCBzdWJvcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBpbnRlcnJvZ2F0aXZlQWRqZWN0aXZlcywgcmVsYXRpdmVQcm9ub3VucywgbG9jYXRpdmVBZHZlcmJzLCBtaXNjZWxsYW5lb3VzLCBwcm9ub21pbmFsQWR2ZXJicywgcmVjaXBlV29yZHMsIHRpbWVXb3JkcywgdmFndWVOb3VucyksXG4gICAgICAgIC8vIFRoaXMgZXhwb3J0IGNvbnRhaW5zIGFsbCBvZiB0aGUgYWJvdmUgd29yZHMuXG4gICAgICAgIGFsbDogW10uY29uY2F0KGFydGljbGVzLCBjYXJkaW5hbE51bWVyYWxzLCBvcmRpbmFsTnVtZXJhbHMsIGRlbW9uc3RyYXRpdmVQcm9ub3VucywgcG9zc2Vzc2l2ZVByb25vdW5zLCByZWZsZXhpdmVQcm9ub3VucywgcGVyc29uYWxQcm9ub3Vuc05vbWluYXRpdmUsIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlLCByZWxhdGl2ZVByb25vdW5zLCBxdWFudGlmaWVycywgaW5kZWZpbml0ZVByb25vdW5zLCBpbnRlcnJvZ2F0aXZlUHJvQWR2ZXJicywgcHJvbm9taW5hbEFkdmVyYnMsIGxvY2F0aXZlQWR2ZXJicywgb3RoZXJBdXhpbGlhcmllcywgb3RoZXJBdXhpbGlhcmllc0luZmluaXRpdmUsIGludGVycm9nYXRpdmVBZGplY3RpdmVzLCBjb3B1bGEsIGNvcHVsYUluZmluaXRpdmUsIHByZXBvc2l0aW9ucywgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBjb3JyZWxhdGl2ZUNvbmp1bmN0aW9ucywgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgaW50ZXJ2aWV3VmVyYnMsIGludGVydmlld1ZlcmJzSW5maW5pdGl2ZSwgdHJhbnNpdGlvbldvcmRzLCBhZGRpdGlvbmFsVHJhbnNpdGlvbldvcmRzLCBpbnRlbnNpZmllcnMsIGRlbGV4aWNhbGl6ZWRWZXJicywgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSwgaW50ZXJqZWN0aW9ucywgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzLCBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnNQcmVjZWRpbmcsIHJlY2lwZVdvcmRzLCB2YWd1ZU5vdW5zLCBtaXNjZWxsYW5lb3VzLCB0aW1lV29yZHMsIHRpdGxlc1ByZWNlZGluZywgdGl0bGVzRm9sbG93aW5nKVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb25Xb3Jkcy5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9uV29yZHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKiBAbW9kdWxlIGNvbmZpZy90cmFuc2l0aW9uV29yZHMgKi9cblxudmFyIHNpbmdsZVdvcmRzID0gW1wiYWluc2lcIiwgXCJhbG9yc1wiLCBcImF1c3NpXCIsIFwiY2FyXCIsIFwiY2VwZW5kYW50XCIsIFwiY2VydGFpbmVtZW50XCIsIFwiY2VydGVzXCIsIFwiY29uc8OpcXVlbW1lbnRcIiwgXCJkJ2Fib3JkXCIsIFwiZCdhaWxsZXVyc1wiLCBcImQnYXByw6hzXCIsIFwiZGF2YW50YWdlXCIsIFwiZMOpc29ybWFpc1wiLCBcImRldXhpw6htZW1lbnRcIiwgXCJkb25jXCIsIFwiZG9yw6luYXZhbnRcIiwgXCJlZmZlY3RpdmVtZW50XCIsIFwiw6lnYWxlbWVudFwiLCBcImVuZmluXCIsIFwiZW5zdWl0ZVwiLCBcImVudHJlLXRlbXBzXCIsIFwiZXNzZW50aWVsbGVtZW50XCIsIFwiZXhjZXB0w6lcIiwgXCJmaW5hbGVtZW50XCIsIFwiZ2xvYmFsZW1lbnRcIiwgXCJqdXNxdSdpY2lcIiwgXCJsw6AtZGVzc3VzXCIsIFwibG9yc3F1ZVwiLCBcIm1haXNcIiwgXCJtYWxncsOpXCIsIFwibsOpYW5tb2luc1wiLCBcIm5vdGFtbWVudFwiLCBcInBhcnRhbnRcIiwgXCJwbHV0w7R0XCIsIFwicG91cnRhbnRcIiwgXCJwcsOpY8OpZGVtbWVudFwiLCBcInByZW1pw6hyZW1lbnRcIiwgXCJwcm9iYWJsZW1lbnRcIiwgXCJwdWlzXCIsIFwicHVpc3F1ZVwiLCBcInF1b2lxdWVcIiwgXCJzYXVmXCIsIFwic2Vsb25cIiwgXCJzZW1ibGFibGVtZW50XCIsIFwic2lub25cIiwgXCJzdWl2YW50XCIsIFwidG91dGVmb2lzXCIsIFwidHJvaXNpw6htZW1lbnRcIl07XG52YXIgbXVsdGlwbGVXb3JkcyA9IFtcIsOgIGNhdXNlIGRlXCIsIFwiw6AgY2Ugam91clwiLCBcIsOgIGNlIHByb3Bvc1wiLCBcIsOgIGNlIHN1amV0XCIsIFwiw6AgY2V0IMOpZ2FyZFwiLCBcIsOgIGNldHRlIGZpblwiLCBcIsOgIGNvbXB0ZXIgZGVcIiwgXCLDoCBjb25kaXRpb24gcXVlXCIsIFwiw6AgZMOpZmF1dCBkZVwiLCBcIsOgIGZvcmNlIGRlXCIsIFwiw6AganVzdGUgdGl0cmVcIiwgXCLDoCBsYSBsdW1pw6hyZSBkZVwiLCBcIsOgIGxhIHN1aXRlIGRlXCIsIFwiw6AgbCdhaWRlIGRlXCIsIFwiw6AgbCdhcHB1aSBkZVwiLCBcIsOgIGwnZW5jb250cmUgZGVcIiwgXCLDoCBsJ8OpcG9xdWUgYWN0dWVsbGVcIiwgXCLDoCBsJ2V4Y2VwdGlvbiBkZVwiLCBcIsOgIGwnZXhjbHVzaW9uIGRlXCIsIFwiw6AgbCdoZXVyZSBhY3R1ZWxsZVwiLCBcIsOgIGwnaW1hZ2UgZGVcIiwgXCLDoCBsJ2luc3RhciBkZVwiLCBcIsOgIGwnaW52ZXJzZVwiLCBcIsOgIGwnaW52ZXJzZSBkZVwiLCBcIsOgIGwnb3Bwb3PDqVwiLCBcIsOgIGxhIGNvbmRpdGlvbiBxdWVcIiwgXCLDoCBtZXN1cmUgcXVlXCIsIFwiw6AgbW9pbnMgcXVlXCIsIFwiw6Agbm91dmVhdVwiLCBcIsOgIHBhcnRpciBkZVwiLCBcIsOgIHByZW1pw6hyZSB2dWVcIiwgXCLDoCBzYXZvaXJcIiwgXCLDoCBzZXVsZSBmaW4gcXVlXCIsIFwiw6Agc3VwcG9zZXIgcXVlXCIsIFwiw6AgdGVsIHBvaW50IHF1ZVwiLCBcIsOgIHRvdXQgcHJlbmRyZVwiLCBcIsOgIHZyYWkgZGlyZVwiLCBcImFmaW4gZGVcIiwgXCJhZmluIGQnYXR0aXJlciBsJ2F0dGVudGlvbiBzdXJcIiwgXCJhZmluIHF1ZVwiLCBcImFpbnNpIGRvbmNcIiwgXCJhaW5zaSBxdWVcIiwgXCJhbG9ycyBxdWVcIiwgXCJhbnTDqXJpZXVyZW1lbnRcIiwgXCJhcMOocyByw6lmbGV4aW9uXCIsIFwiYXByw6hzIGNlbGFcIiwgXCJhcHLDqHMgcXVvaVwiLCBcImFwcsOocyBxdWVcIiwgXCJhcHLDqHMgcsOpZmxleGlvblwiLCBcImFwcsOocyB0b3V0XCIsIFwiYXR0ZW5kdSBxdWVcIiwgXCJhdSBjYXMgb8O5XCIsIFwiYXUgY29udHJhaXJlXCIsIFwiYXUgZm9uZFwiLCBcImF1IGZ1ciBldCDDoCBtZXN1cmVcIiwgXCJhdSBsaWV1IGRlXCIsIFwiYXUgbcOqbWUgdGVtcHNcIiwgXCJhdSBtb21lbnQgb8O5XCIsIFwiYXUgbW95ZW4gZGVcIiwgXCJhdSBwb2ludCBxdWVcIiwgXCJhdSByaXNxdWUgZGVcIiwgXCJhdSBzdXJwbHVzXCIsIFwiYXUgdG90YWxcIiwgXCJhdXNzaSBiaWVuIHF1ZVwiLCBcImF1c3NpdMO0dCBxdWVcIiwgXCJhdXRhbnQgcXVlXCIsIFwiYXV0cmVtZW50IGRpdFwiLCBcImF2YW50IHF1ZVwiLCBcImF2YW50IHRvdXRcIiwgXCJheWFudCBmaW5pXCIsIFwiYmllbiBxdWVcIiwgXCJjJ2VzdCDDoCBkaXJlIHF1ZVwiLCBcImMnZXN0IGFpbnNpIHF1ZVwiLCBcImMnZXN0IGRhbnMgY2UgYnV0IHF1ZVwiLCBcImMnZXN0IGRpcmVcIiwgXCJjJ2VzdCBsZSBjYXMgZGVcIiwgXCJjJ2VzdCBwb3VyIGNlbGEgcXVlXCIsIFwiYydlc3QgbGEgcmFpc29uIHBvdXIgbGFxdWVsbGVcIiwgXCJjJ2VzdCBwb3VycXVvaVwiLCBcImMnZXN0IHF1J2VuIGVmZmV0XCIsIFwiYydlc3Qtw6AtZGlyZVwiLCBcIsOnYSBjb25maXJtZSBxdWVcIiwgXCLDp2EgbW9udHJlIHF1ZVwiLCBcIsOnYSBwcm91dmUgcXVlXCIsIFwiY2VsYSDDqXRhbnRcIiwgXCJjZWxhIGRpdFwiLCBcImNlcGVuZGFudCBxdWVcIiwgXCJjb21wdGUgdGVudVwiLCBcImNvbW1lIGwnaWxsdXN0cmVcIiwgXCJjb21tZSBsZSBzb3VsaWduZVwiLCBcImNvbW1lIG9uIHBvdXZhaXQgcyd5IGF0dGVuZHJlXCIsIFwiY29tbWUgcXVvaVwiLCBcImNvbW1lIHNpXCIsIFwiY29tbWVuw6dvbnMgcGFyIGV4YW1pbmVyXCIsIFwiY29tcGFyYXRpdmVtZW50IMOgXCIsIFwiY29uZm9ybcOpbWVudCDDoFwiLCBcImNvbnRyYWlyZW1lbnQgw6BcIiwgXCJjb25zaWTDqXJvbnMgcGFyIGV4ZW1wbGVcIiwgXCJkJ2F1dGFudCBwbHVzXCIsIFwiZCdhdXRhbnQgcXVlXCIsIFwiZCdhdXRyZSBwYXJ0XCIsIFwiZCdpY2kgbMOgXCIsIFwiZCdvw7lcIiwgXCJkJ3VuIGF1dHJlIGPDtHTDqVwiLCBcImQndW4gY8O0dMOpXCIsIFwiZCd1bmUgZmHDp29uIGfDqW7DqXJhbGVcIiwgXCJkYW5zIGNlIGNhc1wiLCBcImRhbnMgY2VzIGNvbmRpdGlvbnNcIiwgXCJkYW5zIGNldCBlc3ByaXRcIiwgXCJkYW5zIGwnZW5zZW1ibGVcIiwgXCJkYW5zIGwnw6l0YXQgYWN0dWVsIGRlcyBjaG9zZXNcIiwgXCJkYW5zIGwnw6l2ZW50dWFsaXTDqSBvw7lcIiwgXCJkYW5zIGwnaHlwb3Row6hzZSBvw7lcIiwgXCJkYW5zIGxhIG1lc3VyZSBvw7lcIiwgXCJkYW5zIGxlIGJ1dCBkZVwiLCBcImRhbnMgbGUgY2FkcmUgZGVcIiwgXCJkYW5zIGxlIGNhcyBvw7lcIiwgXCJkYW5zIGxlcyBjaXJjb25zdGFuY2VzIGFjdHVlbGxlc1wiLCBcImRhbnMgbGVzIGdyYW5kZXMgbGlnbmVzXCIsIFwiZGFucyB1biBhdXRyZSBvcmRyZSBkJ2lkw6llXCIsIFwiZGFucyB1biBkw6lsYWkgZGVcIiwgXCJkZSBjZSBmYWl0XCIsIFwiZGUgY2V0dGUgZmHDp29uXCIsIFwiZGUgY3JhaW50ZSBxdWVcIiwgXCJkZSBmYcOnb24gw6BcIiwgXCJkZSBmYcOnb24gw6AgY2UgcXVlXCIsIFwiZGUgZmHDp29uIHF1ZVwiLCBcImRlIGZhaXRcIiwgXCJkZSBsJ2F1dHJlIGPDtHTDqVwiLCBcImRlIGxhIG3Dqm1lIG1hbmnDqHJlXCIsIFwiZGUgbGEgbcOqbWUgZmHDp29uIHF1ZVwiLCBcImRlIG1hbmnDqHJlIHF1ZVwiLCBcImRlIG3Dqm1lXCIsIFwiZGUgbcOqbWUgcXUnw6BcIiwgXCJkZSBtw6ptZSBxdWVcIiwgXCJkZSBub3Mgam91cnNcIiwgXCJkZSBwZXVyIHF1ZVwiLCBcImRlIHByaW1lIGFib3JkXCIsIFwiZGUgc29ydGUgcXVlXCIsIFwiZGUgc3VyY3Jvw650XCIsIFwiZGUgdGVsbGUgbWFuacOocmUgcXVlXCIsIFwiZGUgdGVsbGUgc29ydGUgcXVlXCIsIFwiZGUgdG91dGUgw6l2aWRlbmNlXCIsIFwiZGUgdG91dGUgZmHDp29uXCIsIFwiZGUgdG91dGUgbWFuacOocmVcIiwgXCJkZXB1aXMgcXVlXCIsIFwiZMOocyBsb3JzIHF1ZVwiLCBcImTDqHMgbWFpbnRlbmFudFwiLCBcImTDqHMgcXVhXCIsIFwiZMOocyBxdWVcIiwgXCJkdSBmYWl0IHF1ZVwiLCBcImR1IG1vaW5zXCIsIFwiZHUgbW9tZW50IHF1ZVwiLCBcImR1IHBvaW50IGRlIHZ1ZSBkZVwiLCBcImR1IHJlc3RlXCIsIFwiZCdpY2kgbMOgXCIsIFwiZCdvcmVzIGV0IGTDqWrDoFwiLCBcImVuIGFkbWV0dGFudCBxdWVcIiwgXCJlbiBhdHRlbmRhbnQgcXVlXCIsIFwiZW4gYnJlZlwiLCBcImVuIGNhcyBkZVwiLCBcImVuIGNhcyBxdWVcIiwgXCJlbiBjZSBjYXNcIiwgXCJlbiBjZSBkb21haW5lXCIsIFwiZW4gY2UgbW9tZW50XCIsIFwiZW4gY2UgcXVpIGEgdHJhaXQgw6BcIiwgXCJlbiBjZSBxdWkgY29uY2VybmVcIiwgXCJlbiBjZSBzZW5zXCIsIFwiZW4gY2VsYVwiLCBcImVuIGNvbmNlcXVlbmNlXCIsIFwiZW4gY29tcGFyYWlzb24gZGVcIiwgXCJlbiBjb25jZXF1ZW5jZVwiLCBcImVuIGNvbmNsdXNpb25cIiwgXCJlbiBjb25mb3JtaXTDqSBhdmVjXCIsIFwiZW4gY29uc8OpcXVlbmNlXCIsIFwiZW4gZCdhdXRyZXMgdGVybWVzXCIsIFwiZW4gZMOpZmluaXRpdmVcIiwgXCJlbiBkw6lwaXQgZGVcIiwgXCJlbiBkZXJuaWVyIGxpZXVcIiwgXCJlbiBkZXV4acOobWUgbGlldVwiLCBcImVuIGVmZmV0XCIsIFwiZW4gZmFjZSBkZVwiLCBcImVuIGZhaXRcIiwgXCJlbiBmaW4gZGUgY29tcHRlXCIsIFwiZW4gZ8OpbsOpcmFsXCIsIFwiZW4gZ3Vpc2UgZGUgY29uY2x1c2lvblwiLCBcImVuIG1hdGnDqHJlIGRlXCIsIFwiZW4gbcOqbWUgdGVtcHMgcXVlXCIsIFwiZW4gb3V0cmVcIiwgXCJlbiBwYXJ0aWN1bGllclwiLCBcImVuIHBsdXNcIiwgXCJlbiBwcmVtaWVyIGxpZXVcIiwgXCJlbiBwcmluY2lwZVwiLCBcImVuIHJhaXNvbiBkZVwiLCBcImVuIHLDqWFsaXTDqVwiLCBcImVuIHLDqGdsZSBnw6luw6lyYWxlXCIsIFwiZW4gcsOpc3Vtw6lcIiwgXCJlbiByZXZhbmNoZVwiLCBcImVuIHNlY29uZCBsaWV1XCIsIFwiZW4gc29tbWVcIiwgXCJlbiBzb3J0ZSBxdWVcIiwgXCJlbiBzdXBwb3NhbnQgcXVlXCIsIFwiZW4gdGFudCBxdWVcIiwgXCJlbiB0ZXJtaW5hbnRcIiwgXCJlbiB0aMOpb3JpZVwiLCBcImVuIHRvdXQgY2FzXCIsIFwiZW4gdG91dCBwcmVtaWVyIGxpZXVcIiwgXCJlbiB0cm9pc2nDqG1lIGxpZXVcIiwgXCJlbiB1biBtb3RcIiwgXCJlbiB2w6lyaXTDqVwiLCBcImVuIHZ1ZSBxdWVcIiwgXCJlbmNvcmUgcXVlXCIsIFwiZW5jb3JlIHVuZSBmb2lzXCIsIFwiZW50cmUgYXV0cmVzXCIsIFwiZXQgbcOqbWVcIiwgXCJldCBwdWlzXCIsIFwiw6l0YW50IGRvbm7DqSBxdSdhXCIsIFwiw6l0YW50IGRvbm7DqSBxdWFcIiwgXCLDqXRhbnQgZG9ubsOpIHF1ZVwiLCBcImZhY2Ugw6BcIiwgXCJncsOiY2Ugw6BcIiwgXCJpbCBlc3Qgw6Agbm90ZXIgcXVlXCIsIFwiaWwgZXN0IGluZMOpbmlhYmxlIHF1ZVwiLCBcImlsIGVzdCBxdWVzdGlvbiBkZVwiLCBcImlsIGVzdCB2cmFpIHF1ZVwiLCBcImlsIGZhdXQgZGlyZSBhdXNzaSBxdWVcIiwgXCJpbCBmYXV0IHJlY29ubmHDrnRyZSBxdWVcIiwgXCJpbCBmYXV0IHNvdWxpZ25lciBxdWVcIiwgXCJpbCBuZSBmYXV0IHBhcyBvdWJsaWVyIHF1ZVwiLCBcImlsIHMnZW5zdWl0IHF1ZVwiLCBcImlsIHN1ZmZpdCBkZSBwcmVuZHJlIHBvdXIgZXhlbXBsZVwiLCBcImp1c3F1J2ljaVwiLCBcImlsIHkgYSBhdXNzaVwiLCBcImp1c3F1J8OgIGNlIHF1ZVwiLCBcImp1c3F1J8OgIGNlIGpvdXJcIiwgXCJqdXNxdSfDoCBtYWludGVuYW50XCIsIFwianVzcXUnw6AgcHLDqXNlbnRcIiwgXCJqdXNxdSdhdSBtb21lbnQgb8O5XCIsIFwianVzcXUnaWNpXCIsIFwibCdhc3BlY3QgbGUgcGx1cyBpbXBvcnRhbnQgZGVcIiwgXCJsJ2V4ZW1wbGUgbGUgcGx1cyBzaWduaWZpY2F0aWZcIiwgXCJqdXNxdSdhdSBtb21lbnQgb8O5XCIsIFwibGEgcHJldXZlIGMnZXN0IHF1ZVwiLCBcImxvaW4gcXVlXCIsIFwibWFpcyBlbiByw6lhbGl0w6lcIiwgXCJtYWxncsOpIGNlbGFcIiwgXCJtYWxncsOpIHRvdXRcIiwgXCJtw6ptZSBzaVwiLCBcIm1lbnRpb25ub25zIHF1ZVwiLCBcIm1pcyDDoCBwYXJ0IGxlIGZhaXQgcXVlXCIsIFwibm90b25zIHF1ZVwiLCBcIm51bCBkb3V0ZSBxdWVcIiwgXCJvdSBiaWVuXCIsIFwib3V0cmUgY2VsYVwiLCBcIm/DuSBxdWVcIiwgXCJwYXIgYWlsbGV1cnNcIiwgXCJwYXIgY29uc8OpcXVlbnRcIiwgXCJwYXIgY29udHJlXCIsIFwicGFyIGV4Y2VwdGlvblwiLCBcInBhciBleGVtcGxlXCIsIFwicGFyIGxhIHN1aXRlXCIsIFwicGFyIGwnZW50cmVtaXNlIGRlXCIsIFwicGFyIGwnaW50ZXJtw6lkaWFpcmUgZGVcIiwgXCJwYXIgcmFwcG9ydCDDoFwiLCBcInBhciBzdWl0ZVwiLCBcInBhciBzdWl0ZSBkZVwiLCBcInBhciBzdXJjcm/DrnRcIiwgXCJwYXJjZSBxdWVcIiwgXCJwYXJlaWxsZW1lbnRcIiwgXCJwYXJ0YW50IGRlIGNlIGZhaXRcIiwgXCJwYXMgZHUgdG91dFwiLCBcInBlbmRhbnQgcXVlXCIsIFwicGx1cyBwcsOpY2lzw6ltZW50XCIsIFwicGx1cyB0YXJkXCIsIFwicG91ciBhaW5zaSBkaXJlXCIsIFwicG91ciBhdXRhbnQgcXVlXCIsIFwicG91ciBjZSBxdWkgZXN0IGRlXCIsIFwicG91ciBjZXMgbW90aWZzXCIsIFwicG91ciBjZXMgcmFpc29uc1wiLCBcInBvdXIgY2V0dGUgcmFpc29uXCIsIFwicG91ciBjb21tZW5jZXJcIiwgXCJwb3VyIGNvbmNsdXJlXCIsIFwicG91ciBsZSBtb21lbnRcIiwgXCJwb3VyIG1hcnF1ZXIgbGEgY2F1c2FsaXTDqVwiLCBcInBvdXIgbCdpbnN0YW50XCIsIFwicG91ciBwZXUgcXVlXCIsIFwicG91ciBwcmVuZHJlIHVuIGF1dHJlIGV4ZW1wbGVcIiwgXCJwb3VyIHF1ZVwiLCBcInBvdXIgcsOpc3Vtw6lcIiwgXCJwb3VyIHRlcm1pbmVyXCIsIFwicG91ciB0b3V0IGRpcmVcIiwgXCJwb3VyIHRvdXRlcyBjZXMgcmFpc29uc1wiLCBcInBvdXJ2dSBxdWVcIiwgXCJwcmVub25zIGxlIGNhcyBkZVwiLCBcInF1YW5kIGJpZW4gbcOqbWUgcXVlXCIsIFwicXVhbmQgbcOqbWVcIiwgXCJxdWFudCDDoFwiLCBcInF1ZWwgcXVlIHNvaXRcIiwgXCJxdWkgcGx1cyBlc3RcIiwgXCJxdWkgcXVlXCIsIFwicXVpdHRlIMOgXCIsIFwicXVvaSBxdSdpbCBlbiBzb2l0XCIsIFwicXVvaSBxdWVcIiwgXCJxdW9pcXUnaWwgZW4gc29pdFwiLCBcInNhbnMgZMOpbGFpXCIsIFwic2FucyBkb3V0ZVwiLCBcInNhbnMgcGFybGVyIGRlXCIsIFwic2FucyBwcsOpanVnZXJcIiwgXCJzYW5zIHRhcmRlclwiLCBcInNhdWYgc2lcIiwgXCJzZWxvbiBxdWVcIiwgXCJzaSBiaWVuIHF1ZVwiLCBcInNpIGNlIG4nZXN0IHF1ZVwiLCBcInNpIGwnb24gc29uZ2UgcXVlXCIsIFwic2l0w7R0IHF1ZVwiLCBcInNvbW1lIHRvdXRlXCIsIFwic291cyBjZXR0ZSByw6lzZXJ2ZVwiLCBcInNvdXMgcHLDqXRleHRlIHF1ZVwiLCBcInNvdXMgcsOpc2VydmUgZGVcIiwgXCJzb3VzIHLDqXNlcnZlIHF1ZVwiLCBcInN1aXZhbnQgcXVlXCIsIFwic3VwcG9zw6kgcXVlXCIsIFwic3VyIGxlIHBsYW4gZGVcIiwgXCJ0YW5kaXMgcXVlXCIsIFwidGFudCBldCBzaSBiaWVuIHF1ZVwiLCBcInRhbnQgcXVlXCIsIFwidGVsIHF1ZVwiLCBcInRlbGxlbWVudCBxdWVcIiwgXCJ0b3VjaGFudCDDoFwiLCBcInRvdXQgw6AgZmFpdFwiLCBcInRvdXQgYmllbiBwZXPDqVwiLCBcInRvdXQgY29tcHRlIGZhaXRcIiwgXCJ0b3V0IGQnYWJvcmRcIiwgXCJ0b3V0IGQnYWJvcmQgZXhhbWlub25zXCIsIFwidG91dCBkJ2Fib3JkIGlsIGZhdXQgZGlyZSBxdWVcIiwgXCJ0b3V0IGRlIG3Dqm1lXCIsIFwidG91dCBlbiByZWNvbm5haXNzYW50IHF1ZVwiLCBcInVuZSBmb2lzIGRlIHBsdXNcIiwgXCJ2dSBxdWVcIl07XG4vKipcbiAqIFJldHVybnMgYW4gbGlzdCB3aXRoIHRyYW5zaXRpb24gd29yZHMgdG8gYmUgdXNlZCBieSB0aGUgYXNzZXNzbWVudHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbGlzdCBmaWxsZWQgd2l0aCB0cmFuc2l0aW9uIHdvcmQgbGlzdHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNpbmdsZVdvcmRzOiBzaW5nbGVXb3JkcyxcbiAgICAgICAgbXVsdGlwbGVXb3JkczogbXVsdGlwbGVXb3JkcyxcbiAgICAgICAgYWxsV29yZHM6IHNpbmdsZVdvcmRzLmNvbmNhdChtdWx0aXBsZVdvcmRzKVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbldvcmRzLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbldvcmRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmaWx0ZXJlZFBhc3NpdmVBdXhpbGlhcmllcyA9IHJlcXVpcmUoXCIuL3Bhc3NpdmV2b2ljZS9hdXhpbGlhcmllcy5qc1wiKSgpLmZpbHRlcmVkQXV4aWxpYXJpZXM7XG52YXIgcGFzc2l2ZUF1eGlsaWFyaWVzSW5maW5pdGl2ZSA9IHJlcXVpcmUoXCIuL3Bhc3NpdmV2b2ljZS9hdXhpbGlhcmllcy5qc1wiKSgpLmluZmluaXRpdmVBdXhpbGlhcmllcztcbnZhciB0cmFuc2l0aW9uV29yZHMgPSByZXF1aXJlKFwiLi90cmFuc2l0aW9uV29yZHMuanNcIikoKS5zaW5nbGVXb3Jkcztcbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBleGNlcHRpb25zIGZvciB0aGUgcHJvbWluZW50IHdvcmRzIHJlc2VhcmNoZXJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBvYmplY3QgZmlsbGVkIHdpdGggZXhjZXB0aW9uIGFycmF5cy5cbiAqL1xudmFyIGFydGljbGVzID0gW1wiZGFzXCIsIFwiZGVtXCIsIFwiZGVuXCIsIFwiZGVyXCIsIFwiZGVzXCIsIFwiZGllXCIsIFwiZWluXCIsIFwiZWluZVwiLCBcImVpbmVtXCIsIFwiZWluZW5cIiwgXCJlaW5lclwiLCBcImVpbmVzXCJdO1xudmFyIGNhcmRpbmFsTnVtZXJhbHMgPSBbXCJlaW5zXCIsIFwiendlaVwiLCBcImRyZWlcIiwgXCJ2aWVyXCIsIFwiZsO8bmZcIiwgXCJzZWNoc1wiLCBcInNpZWJlblwiLCBcImFjaHRcIiwgXCJuZXVuXCIsIFwiemVoblwiLCBcImVsZlwiLCBcInp3w7ZsZlwiLCBcInp3b2VsZlwiLCBcImRyZWl6ZWhuXCIsIFwidmllcnplaG5cIiwgXCJmw7xuZnplaG5cIiwgXCJmdWVuZnplaG5cIiwgXCJzZWNoemVoblwiLCBcInNpZWJ6ZWhuXCIsIFwiYWNodHplaG5cIiwgXCJuZXVuemVoblwiLCBcInp3YW56aWdcIiwgXCJodW5kZXJ0XCIsIFwiZWluaHVuZGVydFwiLCBcInp3ZWlodW5kZXJ0XCIsIFwiZHJlaWh1bmRlcnRcIiwgXCJ2aWVyaHVuZGVydFwiLCBcImbDvG5maHVuZGVydFwiLCBcImZ1ZW5maHVuZGVydFwiLCBcInNlY2hzaHVuZGVydFwiLCBcInNpZWJlbmh1bmRlcnRcIiwgXCJhY2h0aHVuZGVydFwiLCBcIm5ldW5odW5kZXJ0XCIsIFwidGF1c2VuZFwiLCBcIm1pbGxpb25cIiwgXCJtaWxsaWFyZGVcIiwgXCJiaWxsaW9uXCIsIFwiYmlsbGlhcmRlXCJdO1xudmFyIG9yZGluYWxOdW1lcmFscyA9IFtcImVyc3RlXCIsIFwiZXJzdGVyXCIsIFwiZXJzdGVuXCIsIFwiZXJzdGVtXCIsIFwiZXJzdGVzXCIsIFwiendlaXRlXCIsIFwiendlaXRlc1wiLCBcInp3ZWl0ZXJcIiwgXCJ6d2VpdGVtXCIsIFwiendlaXRlblwiLCBcImRyaXR0ZVwiLCBcImRyaXR0ZXJcIiwgXCJkcml0dGVzXCIsIFwiZHJpdHRlblwiLCBcImRyaXR0ZW1cIiwgXCJ2aWVydGVyXCIsIFwidmllcnRlblwiLCBcInZpZXJ0ZW1cIiwgXCJ2aWVydGVzXCIsIFwidmllcnRlXCIsIFwiZsO8bmZ0ZVwiLCBcImbDvG5mdGVyXCIsIFwiZsO8bmZ0ZXNcIiwgXCJmw7xuZnRlblwiLCBcImbDvG5mdGVtXCIsIFwiZnVlbmZ0ZVwiLCBcImZ1ZW5mdGVyXCIsIFwiZnVlbmZ0ZW1cIiwgXCJmdWVuZnRlblwiLCBcImZ1ZW5mdGVzXCIsIFwic2VjaHN0ZVwiLCBcInNlY2hzdGVyXCIsIFwic2VjaHN0ZXNcIiwgXCJzZWNoc3RlblwiLCBcInNlY2hzdGVtXCIsIFwic2llYnRlXCIsIFwic2llYnRlclwiLCBcInNpZWJ0ZW5cIiwgXCJzaWVidGVtXCIsIFwic2llYnRlc1wiLCBcImFjaHRlXCIsIFwiYWNodGVyXCIsIFwiYWNodGVuXCIsIFwiYWNodGVtXCIsIFwiYWNodGVzXCIsIFwibmV1bnRlXCIsIFwibmV1bnRlclwiLCBcIm5ldW50ZXNcIiwgXCJuZXVudGVuXCIsIFwibmV1bnRlbVwiLCBcInplaG50ZVwiLCBcInplaG50ZXJcIiwgXCJ6ZWhudGVuXCIsIFwiemVobnRlbVwiLCBcInplaG50ZXNcIiwgXCJlbGZ0ZVwiLCBcImVsZnRlclwiLCBcImVsZnRlc1wiLCBcImVsZnRlblwiLCBcImVsZnRlbVwiLCBcInp3w7ZsZnRlXCIsIFwienfDtmxmdGVyXCIsIFwienfDtmxmdGVuXCIsIFwienfDtmxmdGVtXCIsIFwienfDtmxmdGVzXCIsIFwiendvZWxmdGVcIiwgXCJ6d29lbGZ0ZXJcIiwgXCJ6d29lbGZ0ZW5cIiwgXCJ6d29lbGZ0ZW1cIiwgXCJ6d29lbGZ0ZXNcIiwgXCJkcmVpemVobnRlXCIsIFwiZHJlaXplaG50ZXJcIiwgXCJkcmVpemVobnRlc1wiLCBcImRyZWl6ZWhudGVuXCIsIFwiZHJlaXplaG50ZW1cIiwgXCJ2aWVyemVobnRlXCIsIFwidmllcnplaG50ZXJcIiwgXCJ2aWVyemVobnRlc1wiLCBcInZpZXJ6ZWhudGVuXCIsIFwidmllcnplaG50ZW1cIiwgXCJmw7xuZnplaG50ZVwiLCBcImbDvG5memVobnRlblwiLCBcImbDvG5memVobnRlbVwiLCBcImbDvG5memVobnRlclwiLCBcImbDvG5memVobnRlc1wiLCBcImZ1ZW5memVobnRlXCIsIFwiZnVlbmZ6ZWhudGVuXCIsIFwiZnVlbmZ6ZWhudGVtXCIsIFwiZnVlbmZ6ZWhudGVyXCIsIFwiZnVlbmZ6ZWhudGVzXCIsIFwic2VjaHplaG50ZVwiLCBcInNlY2h6ZWhudGVyXCIsIFwic2VjaHplaG50ZW5cIiwgXCJzZWNoemVobnRlc1wiLCBcInNlY2h6ZWhudGVtXCIsIFwic2llYnplaG50ZVwiLCBcInNpZWJ6ZWhudGVyXCIsIFwic2llYnplaG50ZXNcIiwgXCJzaWViemVobnRlbVwiLCBcInNpZWJ6ZWhudGVuXCIsIFwiYWNodHplaG50ZXJcIiwgXCJhY2h0emVobnRlblwiLCBcImFjaHR6ZWhudGVtXCIsIFwiYWNodHplaG50ZXNcIiwgXCJhY2h0emVobnRlXCIsIFwibmVobnplaG50ZVwiLCBcIm5laG56ZWhudGVyXCIsIFwibmVobnplaG50ZW1cIiwgXCJuZWhuemVobnRlblwiLCBcIm5laG56ZWhudGVzXCIsIFwiendhbnppZ3N0ZVwiLCBcInp3YW56aWdzdGVyXCIsIFwiendhbnppZ3N0ZW1cIiwgXCJ6d2Fuemlnc3RlblwiLCBcInp3YW56aWdzdGVzXCJdO1xudmFyIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlID0gW1wiaWNoXCIsIFwiZHVcIiwgXCJlclwiLCBcInNpZVwiLCBcImVzXCIsIFwid2lyXCIsIFwiaWhyXCJdO1xudmFyIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlID0gW1wibWljaFwiLCBcImRpY2hcIiwgXCJpaG5cIiwgXCJ1bnNcIiwgXCJldWNoXCJdO1xudmFyIHBlcnNvbmFsUHJvbm91bnNEYXRpdmUgPSBbXCJtaXJcIiwgXCJkaXJcIiwgXCJpaG1cIiwgXCJpaG5lblwiXTtcbnZhciBkZW1vbnN0cmF0aXZlUHJvbm91bnMgPSBbXCJkZW5lblwiLCBcImRlcmVuXCIsIFwiZGVyZXJcIiwgXCJkZXNzZW5cIiwgXCJkaWVzZVwiLCBcImRpZXNlbVwiLCBcImRpZXNlblwiLCBcImRpZXNlclwiLCBcImRpZXNlc1wiLCBcImplbmVcIiwgXCJqZW5lbVwiLCBcImplbmVuXCIsIFwiamVuZXJcIiwgXCJqZW5lc1wiLCBcIndlbGNoXCIsIFwid2VsY2hlclwiLCBcIndlbGNoZXNcIiwgXCJkZXJqZW5pZ2VcIiwgXCJkZXNqZW5pZ2VuXCIsIFwiZGVtamVuaWdlblwiLCBcImRlbmplbmlnZW5cIiwgXCJkaWVqZW5pZ2VcIiwgXCJkZXJqZW5pZ2VuXCIsIFwiZGFzamVuaWdlXCIsIFwiZGllamVuaWdlblwiXTtcbnZhciBwb3NzZXNzaXZlUHJvbm91bnMgPSBbXCJtZWluXCIsIFwibWVpbmVcIiwgXCJtZWluZW1cIiwgXCJtZWluZXJcIiwgXCJtZWluZXNcIiwgXCJtZWluZW5cIiwgXCJkZWluXCIsIFwiZGVpbmVcIiwgXCJkZWluZW1cIiwgXCJkZWluZXJcIiwgXCJkZWluZXNcIiwgXCJkZWluZW5cIiwgXCJzZWluXCIsIFwic2VpbmVcIiwgXCJzZWluZW1cIiwgXCJzZWluZXJcIiwgXCJzZWluZXNcIiwgXCJpaHJlXCIsIFwiaWhyZW1cIiwgXCJpaHJlblwiLCBcImlocmVyXCIsIFwiaWhyZXNcIiwgXCJ1bnNlclwiLCBcInVuc2VyZVwiLCBcInVuc2VyZW1cIiwgXCJ1bnNlcmVuXCIsIFwidW5zZXJlclwiLCBcInVuc2VyZXNcIiwgXCJldWVyXCIsIFwiZXVyZVwiLCBcImV1cmVtXCIsIFwiZXVyZW5cIiwgXCJldXJlclwiLCBcImV1cmVzXCIsIFwiZWluYW5kZXJzXCJdO1xudmFyIHF1YW50aWZpZXJzID0gW1wibWFuY2hlXCIsIFwibWFuY2hcIiwgXCJ2aWVsZVwiLCBcInZpZWxcIiwgXCJ2aWVsZXJcIiwgXCJ2aWVsZW5cIiwgXCJ2aWVsZW1cIiwgXCJhbGxcIiwgXCJhbGxlXCIsIFwiYWxsZXJcIiwgXCJhbGxlc1wiLCBcImFsbGVuXCIsIFwiYWxsZW1cIiwgXCJhbGxlcmxlaVwiLCBcInNvbGNoZXJsZWlcIiwgXCJlaW5pZ2VcIiwgXCJldGxpY2hlXCIsIFwid2VuaWdlXCIsIFwid2VuaWdlclwiLCBcIndlbmlnZW5cIiwgXCJ3ZW5pZ2VtXCIsIFwid2VuaWdlc1wiLCBcIndlbmlnXCIsIFwid2VuaWdlcmVyXCIsIFwid2VuaWdlcmVuXCIsIFwid2VuaWdlcmVtXCIsIFwid2VuaWdlcmVcIiwgXCJ3ZW5pZ2VyZXNcIiwgXCJ3ZW5pZ1wiLCBcImJpc3NjaGVuXCIsIFwicGFhclwiLCBcImtlaW5cIiwgXCJrZWluZXNcIiwgXCJrZWluZW1cIiwgXCJrZWluZW5cIiwgXCJrZWluZVwiLCBcIm1laHJcIiwgXCJnZW51Z1wiLCBcIm1laHJlcmVcIiwgXCJtZWhyZXJlclwiLCBcIm1laHJlcmVuXCIsIFwibWVocmVyZW1cIiwgXCJtZWhyZXJlc1wiLCBcInZlcnNjaGllZGVuZVwiLCBcInZlcnNjaGllZGVuZXJcIiwgXCJ2ZXJzY2hpZWRlbmVuXCIsIFwidmVyc2NoaWVkZW5lbVwiLCBcInZlcnNjaGllZGVuZXNcIiwgXCJ2ZXJzY2hpZWRuZVwiLCBcInZlcnNjaGllZG5lclwiLCBcInZlcnNjaGllZG5lblwiLCBcInZlcnNjaGllZG5lbVwiLCBcInZlcnNjaGllZG5lc1wiLCBcImFydFwiLCBcImFydGVuXCIsIFwic29ydGVcIiwgXCJzb3J0ZW5cIl07XG52YXIgcmVmbGV4aXZlUHJvbm91bnMgPSBbXCJzaWNoXCJdO1xudmFyIHJlY2lwcm9jYWxQcm9ub3VucyA9IFtcImVpbmFuZGVyXCJdO1xuLy8gXCJXZWxjaFwiLCBcIndlbGNoZXJcIiwgYW5kIFwid2VsY2hlc1wiIGFyZSBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBkZW1vbnN0cmF0aXZlUHJvbm91bnMuXG52YXIgaW5kZWZpbml0ZVByb25vdW5zID0gW1wiYW5kZXJlXCIsIFwiYW5kZXJlclwiLCBcImFuZGVyZW1cIiwgXCJhbmRlcmVuXCIsIFwiYW5kZXJlc1wiLCBcImFuZHJlblwiLCBcImFuZGVyblwiLCBcImFuZHJlbVwiLCBcImFuZGVybVwiLCBcImFuZHJlXCIsIFwiYW5kcmVyXCIsIFwiYW5kcmVzXCIsIFwiYmVpZGVcIiwgXCJiZWlkZXNcIiwgXCJiZWlkZW1cIiwgXCJiZWlkZXJcIiwgXCJiZWlkZW5cIiwgXCJldHdhc1wiLCBcImlyZ2VuZGV0d2FzXCIsIFwiaXJnZW5kZWluXCIsIFwiaXJnZW5kZWluZW5cIiwgXCJpcmdlbmRlaW5lbVwiLCBcImlyZ2VuZGVpbmVzXCIsIFwiaXJnZW5kZWluZVwiLCBcImlyZ2VuZGVpbmVyXCIsIFwiaXJnZW5kd2FzXCIsIFwiaXJnZW5kd2Vzc2VuXCIsIFwiaXJnZW5kd2VyXCIsIFwiaXJnZW5kd2VuXCIsIFwiaXJnZW5kd2VtXCIsIFwiaXJnZW5kd2VsY2hlXCIsIFwiaXJnZW5kd2VsY2hlclwiLCBcImlyZ2VuZHdlbGNoZW1cIiwgXCJpcmdlbmR3ZWxjaGVuXCIsIFwiaXJnZW5kd2VsY2hlc1wiLCBcImlyZ2VuZGplbWFuZFwiLCBcImlyZ2VuZGplbWFuZGVuXCIsIFwiaXJnZW5kamVtYW5kZW1cIiwgXCJpcmdlbmRqZW1hbmRlc1wiLCBcImlyZ2VuZHdpZVwiLCBcIndlclwiLCBcIndlblwiLCBcIndlbVwiLCBcIndlc3NlblwiLCBcIndhc1wiLCBcIndlbGNoZW5cIiwgXCJ3ZWxjaGVtXCIsIFwid2VsY2hlXCIsIFwiamVkZXJcIiwgXCJqZWRlc1wiLCBcImplZGVtXCIsIFwiamVkZW5cIiwgXCJqZWRlXCIsIFwiamVkd2VkZXJcIiwgXCJqZWR3ZWRlblwiLCBcImplZHdlZGVtXCIsIFwiamVkd2VkZXNcIiwgXCJqZWR3ZWRlXCIsIFwiamVnbGljaGVyXCIsIFwiamVnbGljaGVuXCIsIFwiamVnbGljaGVtXCIsIFwiamVnbGljaGVzXCIsIFwiamVnbGljaGVcIiwgXCJqZWRlcm1hbm5cIiwgXCJqZWRlcm1hbm5zXCIsIFwiamVtYW5kXCIsIFwiamVtYW5kZW5cIiwgXCJqZW1hbmRlbVwiLCBcImplbWFuZHNcIiwgXCJqZW1hbmRlc1wiLCBcIm1hblwiLCBcIm1laW5lc2dsZWljaGVuXCIsIFwic8OkbXRsaWNoXCIsIFwic2FlbXRsaWNoXCIsIFwic8OkbXRsaWNoZXJcIiwgXCJzYWVtdGxpY2hlclwiLCBcInPDpG10bGljaGVuXCIsIFwic2FlbXRsaWNoZW5cIiwgXCJzw6RtdGxpY2hlbVwiLCBcInNhZW10bGljaGVtXCIsIFwic8OkbXRsaWNoZXNcIiwgXCJzYWVtdGxpY2hlc1wiLCBcInPDpG10bGljaGVcIiwgXCJzYWVtdGxpY2hlXCIsIFwic29sY2hlXCIsIFwic29sY2hlclwiLCBcInNvbGNoZW5cIiwgXCJzb2xjaGVtXCIsIFwic29sY2hlc1wiLCBcIm5pZW1hbmRcIiwgXCJuaWVtYW5kZW5cIiwgXCJuaWVtYW5kZW1cIiwgXCJuaWVtYW5kZXNcIiwgXCJuaWVtYW5kc1wiLCBcIm5pY2h0c1wiLCBcInp3ZWl0ZXJcIl07XG52YXIgaW50ZXJyb2dhdGl2ZVByb0FkdmVyYnMgPSBbXCJ3YXJ1bVwiLCBcIndpZVwiLCBcIndvXCIsIFwid29oZXJcIiwgXCJ3b2hpblwiLCBcIndhbm5cIl07XG52YXIgcHJvbm9taW5hbEFkdmVyYnMgPSBbXCJkYWhpbnRlclwiLCBcImRhbWl0XCIsIFwiZGFuZWJlblwiLCBcImRhcmFuXCIsIFwiZGFyYXVzXCIsIFwiZGFyaW5cIiwgXCJkYXJ1bnRlclwiLCBcImRhcsO8YmVyXCIsIFwiZGFydWViZXJcIiwgXCJkYXZvblwiLCBcImRhendpc2NoZW5cIiwgXCJoaWVyYW5cIiwgXCJoaWVyYXVmXCIsIFwiaGllcmF1c1wiLCBcImhpZXJiZWlcIiwgXCJoaWVyZnVlclwiLCBcImhpZXJmw7xyXCIsIFwiaGllcmdlZ2VuXCIsIFwiaGllcmhpbnRlclwiLCBcImhpZXJpblwiLCBcImhpZXJtaXRcIiwgXCJoaWVybmFjaFwiLCBcImhpZXJ1bVwiLCBcImhpZXJ1bnRlclwiLCBcImhpZXJ1ZWJlclwiLCBcImhpZXLDvGJlclwiLCBcImhpZXJ2b3JcIiwgXCJoaWVyendpc2NoZW5cIiwgXCJoaWVybmViZW5cIiwgXCJoaWVydm9uXCIsIFwid29kdXJjaFwiLCBcIndvZsO8clwiLCBcIndvZnVlclwiLCBcIndvZ2VnZW5cIiwgXCJ3b2hpbnRlclwiLCBcIndvbWl0XCIsIFwid29uYWNoXCIsIFwid29uZWJlblwiLCBcIndvcmFuXCIsIFwid29yYXVmXCIsIFwid29yYXVzXCIsIFwid29yaW5cIiwgXCJ3b3J1bVwiLCBcIndvcnVudGVyXCIsIFwid29yw7xiZXJcIiwgXCJ3b3J1ZWJlclwiLCBcIndvdm9uXCIsIFwid292b3JcIiwgXCJ3b3p1XCIsIFwid296d2lzY2hlblwiXTtcbnZhciBsb2NhdGl2ZUFkdmVyYnMgPSBbXCJoaWVyXCIsIFwiZG9ydGhpblwiLCBcImhpZXJoZXJcIiwgXCJkb3J0aGVyXCJdO1xudmFyIGFkdmVyYmlhbEdlbml0aXZlcyA9IFtcImFsbGVuZmFsbHNcIiwgXCJrZWluZXNmYWxsc1wiLCBcImFuZGVyZW5mYWxsc1wiLCBcImFuZGVybmZhbGxzXCIsIFwiYW5kcmVuZmFsbHNcIiwgXCLDpHXDn2Vyc3RlbmZhbGxzXCIsIFwiYmVqYWhlbmRlbmZhbGxzXCIsIFwiYmVzdGVuZmFsbHNcIiwgXCJlaW50cmV0ZW5kZW5mYWxsc1wiLCBcImVudGdlZ2VuZ2VzZXR6dGVuZmFsbHNcIiwgXCJlcmZvcmRlcmxpY2hlbmZhbGxzXCIsIFwiZ2VnZWJlbmVuZmFsbHNcIiwgXCJnZXJpbmdzdGVuZmFsbHNcIiwgXCJnbGVpY2hmYWxsc1wiLCBcImfDvG5zdGlnZW5mYWxsc1wiLCBcImfDvG5zdGlnc3RlbmZhbGxzXCIsIFwiaMO2Y2hzdGVuZmFsbHNcIiwgXCJtw7ZnbGljaGVuZmFsbHNcIiwgXCJub3RmYWxsc1wiLCBcIm7DtnRpZ2VuZmFsbHNcIiwgXCJub3R3ZW5kaWdlbmZhbGxzXCIsIFwic2NobGltbXN0ZW5mYWxsc1wiLCBcInZvcmtvbW1lbmRlbmZhbGxzXCIsIFwienV0cmVmZmVuZGVuZmFsbHNcIiwgXCJrZWluZXN3ZWdzXCIsIFwiZHVyY2h3ZWdzXCIsIFwiZ2VyYWRlbndlZ3NcIiwgXCJnZXJhZGVzd2Vnc1wiLCBcImdlcmFkZXdlZ3NcIiwgXCJncmFkZW53ZWdzXCIsIFwiaGFsYndlZ3NcIiwgXCJtaXR0d2Vnc1wiLCBcInVudGVyd2Vnc1wiXTtcbnZhciBvdGhlckF1eGlsaWFyaWVzID0gW1wiaGFiZVwiLCBcImhhc3RcIiwgXCJoYXRcIiwgXCJoYWJ0XCIsIFwiaGFiZXN0XCIsIFwiaGFiZXRcIiwgXCJoYXR0ZVwiLCBcImhhdHRlc3RcIiwgXCJoYXR0ZW5cIiwgXCJow6R0dGVcIiwgXCJoYWV0dGVcIiwgXCJow6R0dGVzdFwiLCBcImhhZXR0ZXN0XCIsIFwiaMOkdHRlblwiLCBcImhhZXR0ZW5cIiwgXCJoYWV0dGV0XCIsIFwiaMOkdHRldFwiLCBcImhhYlwiLCBcImJpblwiLCBcImJpc3RcIiwgXCJpc3RcIiwgXCJzaW5kXCIsIFwic2VpXCIsIFwic2VpZXN0XCIsIFwic2VpZW5cIiwgXCJzZWlldFwiLCBcIndhclwiLCBcIndhcnN0XCIsIFwid2FyZW5cIiwgXCJ3YXJ0XCIsIFwid8OkcmVcIiwgXCJ3YWVyZVwiLCBcInfDpHJlc3RcIiwgXCJ3YWVyZXN0XCIsIFwid8OkcnN0XCIsIFwid2FlcnN0XCIsIFwid8OkcmVuXCIsIFwid2FlcmVuXCIsIFwid8OkcmV0XCIsIFwid2FlcmV0XCIsIFwid8OkcnRcIiwgXCJ3YWVydFwiLCBcInNlaWRcIiwgXCJkYXJmXCIsIFwiZGFyZnN0XCIsIFwiZMO8cmZ0XCIsIFwiZHVlcmZ0XCIsIFwiZMO8cmZlXCIsIFwiZHVlcmZlXCIsIFwiZMO8cmZlc3RcIiwgXCJkdWVyZmVzdFwiLCBcImTDvHJmZXRcIiwgXCJkdWVyZmV0XCIsIFwiZHVyZnRlXCIsIFwiZHVyZnRlc3RcIiwgXCJkdXJmdGVuXCIsIFwiZHVyZnRldFwiLCBcImTDvHJmdGVcIiwgXCJkdWVyZnRlXCIsIFwiZMO8cmZ0ZXN0XCIsIFwiZHVlcmZ0ZXN0XCIsIFwiZMO8cmZ0ZW5cIiwgXCJkdWVyZnRlblwiLCBcImTDvHJmdGV0XCIsIFwiZHVlcmZ0ZXRcIiwgXCJrYW5uXCIsIFwia2FubnN0XCIsIFwia8O2bm50XCIsIFwia29lbm50XCIsIFwia8O2bm5lXCIsIFwia29lbm5lXCIsIFwia8O2bm5lc3RcIiwgXCJrb2VubmVzdFwiLCBcImvDtm5uZXRcIiwgXCJrb2VubmV0XCIsIFwia29ubnRlXCIsIFwia29ubnRlc3RcIiwgXCJrb25udGVuXCIsIFwia29ubnRldFwiLCBcImvDtm5udGVcIiwgXCJrb2VubnRlXCIsIFwia8O2bm50ZXN0XCIsIFwia29lbm50ZXN0XCIsIFwia8O2bm50ZW5cIiwgXCJrb2VubnRlblwiLCBcImvDtm5udGV0XCIsIFwia29lbm50ZXRcIiwgXCJtYWdcIiwgXCJtYWdzdFwiLCBcIm3Dtmd0XCIsIFwibW9lZ3RcIiwgXCJtw7ZnZVwiLCBcIm1vZWdlXCIsIFwibcO2Z2VzdFwiLCBcIm1vZWdlc3RcIiwgXCJtw7ZnZXRcIiwgXCJtb2VnZXRcIiwgXCJtb2NodGVcIiwgXCJtb2NodGVzdFwiLCBcIm1vY2h0ZW5cIiwgXCJtb2NodGV0XCIsIFwibcO2Y2h0ZVwiLCBcIm1vZWNodGVcIiwgXCJtw7ZjaHRlc3RcIiwgXCJtb2VjaHRlc3RcIiwgXCJtw7ZjaHRlblwiLCBcIm1vZWNodGVuXCIsIFwibcO2Y2h0ZXRcIiwgXCJtb2VjaHRldFwiLCBcIm11c3NcIiwgXCJtdcOfXCIsIFwibXVzc3RcIiwgXCJtdcOfdFwiLCBcIm3DvHNzdFwiLCBcIm11ZXNzdFwiLCBcIm3DvMOfdFwiLCBcIm11ZcOfdFwiLCBcIm3DvHNzZVwiLCBcIm11ZXNzZVwiLCBcIm3DvHNzZXN0XCIsIFwibXVlc3Nlc3RcIiwgXCJtw7xzc2V0XCIsIFwibXVlc3NldFwiLCBcIm11c3N0ZVwiLCBcIm11w590ZVwiLCBcIm11c3N0ZXN0XCIsIFwibXXDn3Rlc3RcIiwgXCJtdXNzdGVuXCIsIFwibXXDn3RlblwiLCBcIm11c3N0ZXRcIiwgXCJtdcOfdGV0XCIsIFwibcO8c3N0ZVwiLCBcIm11ZXNzdGVcIiwgXCJtw7zDn3RlXCIsIFwibXVlw590ZVwiLCBcIm3DvHNzdGVzdFwiLCBcIm11ZXNzdGVzdFwiLCBcIm3DvMOfdGVzdFwiLCBcIm11ZcOfdGVzdFwiLCBcIm3DvHNzdGVuXCIsIFwibXVlc3N0ZW5cIiwgXCJtw7zDn3RlblwiLCBcIm11ZcOfdGVuXCIsIFwibcO8c3N0ZXRcIiwgXCJtdWVzc3RldFwiLCBcIm3DvMOfdGV0XCIsIFwibXVlw590ZXRcIiwgXCJzb2xsXCIsIFwic29sbHN0XCIsIFwic29sbHRcIiwgXCJzb2xsZVwiLCBcInNvbGxlc3RcIiwgXCJzb2xsZXRcIiwgXCJzb2xsdGVcIiwgXCJzb2xsdGVzdFwiLCBcInNvbGx0ZW5cIiwgXCJzb2xsdGV0XCIsIFwid2lsbFwiLCBcIndpbGxzdFwiLCBcIndvbGx0XCIsIFwid29sbGVcIiwgXCJ3b2xsZXN0XCIsIFwid29sbGV0XCIsIFwid29sbHRlXCIsIFwid29sbHRlc3RcIiwgXCJ3b2xsdGVuXCIsIFwid29sbHRldFwiLCBcImxhc3NlXCIsIFwibMOkc3N0XCIsIFwibGFlc3N0XCIsIFwibMOkw590XCIsIFwibGFlw590XCIsIFwibGFzc3RcIiwgXCJsYcOfdFwiLCBcImxhc3Nlc3RcIiwgXCJsYXNzZXRcIiwgXCJsaWXDn1wiLCBcImxpZcOfZXN0XCIsIFwibGllw590XCIsIFwibGllw59lblwiLCBcImxpZcOfZVwiLCBcImxpZcOfZXRcIiwgXCJsaWVzc1wiLCBcImxpZXNzZXN0XCIsIFwibGllc3N0XCIsIFwibGllc3NlblwiLCBcImxpZXNzZVwiLCBcImxpZXNzZXRcIl07XG52YXIgb3RoZXJBdXhpbGlhcmllc0luZmluaXRpdmUgPSBbXCJoYWJlblwiLCBcImTDvHJmZW5cIiwgXCJkdWVyZmVuXCIsIFwia8O2bm5lblwiLCBcImtvZW5uZW5cIiwgXCJtw7ZnZW5cIiwgXCJtb2VnZW5cIiwgXCJtw7xzc2VuXCIsIFwibXVlc3NlblwiLCBcInNvbGxlblwiLCBcIndvbGxlblwiLCBcImxhc3NlblwiXTtcbi8vIEZvcm1zIGZyb20gJ2F1c3NlaGVuJyB3aXRoIHR3byBwYXJ0cywgbGlrZSAnc2VoZSBhdXMnLCBhcmUgbm90IGluY2x1ZGVkLCBiZWNhdXNlIHdlIHJlbW92ZSB3b3JkcyBvbiBhbiBzaW5nbGUgd29yZCBiYXNpcy5cbnZhciBjb3B1bGEgPSBbXCJibGVpYmVcIiwgXCJibGVpYnN0XCIsIFwiYmxlaWJ0XCIsIFwiYmxlaWJlc3RcIiwgXCJibGVpYmV0XCIsIFwiYmxpZWJcIiwgXCJibGllYnN0XCIsIFwiYmxpZWJ0XCIsIFwiYmxpZWJlblwiLCBcImJsaWViZVwiLCBcImJsaWViZXN0XCIsIFwiYmxpZWJldFwiLCBcImhlacOfZVwiLCBcImhlacOfdFwiLCBcImhlacOfZXN0XCIsIFwiaGVpw59ldFwiLCBcImhlaXNzZVwiLCBcImhlaXNzdFwiLCBcImhlaXNzZXN0XCIsIFwiaGVpc3NldFwiLCBcImhpZcOfXCIsIFwiaGllw59lc3RcIiwgXCJoaWXDn3RcIiwgXCJoaWXDn2VuXCIsIFwiaGllw59lXCIsIFwiaGllw59ldFwiLCBcImhpZXNzXCIsIFwiaGllc3Nlc3RcIiwgXCJoaWVzc3RcIiwgXCJoaWVzc2VuXCIsIFwiaGllc3NlXCIsIFwiaGllc3NldFwiLCBcImdpbHRzdFwiLCBcImdpbHRcIiwgXCJnZWx0ZXRcIiwgXCJnZWx0ZVwiLCBcImdlbHRlc3RcIiwgXCJnYWx0XCIsIFwiZ2FsdGVzdFwiLCBcImdhbHRzdFwiLCBcImdhbHRlblwiLCBcImdhbHRldFwiLCBcImfDpGx0ZVwiLCBcImdhZWx0ZVwiLCBcImfDtmx0ZVwiLCBcImdvZWx0ZVwiLCBcImfDpGx0ZXN0XCIsIFwiZ2FlbHRlc3RcIiwgXCJnw7ZsdGVzdFwiLCBcImdvZWx0ZXN0XCIsIFwiZ8OkbHRlblwiLCBcImdhZWx0ZW5cIiwgXCJnw7ZsdGVuXCIsIFwiZ29lbHRlblwiLCBcImfDpGx0ZXRcIiwgXCJnYWVsdGV0XCIsIFwiZ8O2bHRldFwiLCBcImdvZWx0ZXRcIiwgXCJhdXNzZWhlXCIsIFwiYXVzc2llaHN0XCIsIFwiYXVzc2llaHRcIiwgXCJhdXNzZWh0XCIsIFwiYXVzc2VoZXN0XCIsIFwiYXVzc2VoZXRcIiwgXCJhdXNzYWhcIiwgXCJhdXNzYWhzdFwiLCBcImF1c3NhaGVuXCIsIFwiYXVzc2FodFwiLCBcImF1c3PDpGhlXCIsIFwiYXVzc2FlaGVcIiwgXCJhdXNzw6RoZXN0XCIsIFwiYXVzc2FlaGVzdFwiLCBcImF1c3PDpGhzdFwiLCBcImF1c3NhZWhzdFwiLCBcImF1c3PDpGhldFwiLCBcImF1c3NhZWhldFwiLCBcImF1c3PDpGh0XCIsIFwiYXVzc2FlaHRcIiwgXCJhdXNzw6RoZW5cIiwgXCJhdXNzYWVoZW5cIiwgXCJzY2hlaW5lXCIsIFwic2NoZWluc3RcIiwgXCJzY2hlaW50XCIsIFwic2NoZWluZXN0XCIsIFwic2NoZWluZXRcIiwgXCJzY2hpZW5cIiwgXCJzY2hpZW5zdFwiLCBcInNjaGllbmVuXCIsIFwic2NoaWVudFwiLCBcInNjaGllbmVcIiwgXCJzY2hpZW5lc3RcIiwgXCJzY2hpZW5ldFwiLCBcImVyc2NoZWluZVwiLCBcImVyc2NoZWluc3RcIiwgXCJlcnNjaGVpbnRcIiwgXCJlcnNjaGVpbmVzdFwiLCBcImVyc2NoZWluZXRcIiwgXCJlcnNjaGllblwiLCBcImVyc2NoaWVuc3RcIiwgXCJlcnNjaGllbmVuXCIsIFwiZXJzY2hpZW50XCIsIFwiZXJzY2hpZW5lXCIsIFwiZXJzY2hpZW5lc3RcIiwgXCJlcnNjaGllbmV0XCJdO1xudmFyIGNvcHVsYUluZmluaXRpdmUgPSBbXCJibGVpYmVuXCIsIFwiaGVpw59lblwiLCBcImhlaXNzZW5cIiwgXCJnZWx0ZW5cIiwgXCJhdXNzZWhlblwiLCBcInNjaGVpbmVuXCIsIFwiZXJzY2hlaW5lblwiXTtcbnZhciBwcmVwb3NpdGlvbnMgPSBbXCJhXCIsIFwiw6BcIiwgXCJhYlwiLCBcImFic2VpdHNcIiwgXCJhYnrDvGdsaWNoXCIsIFwiYWJ6dWVnbGljaFwiLCBcImFsc1wiLCBcImFtXCIsIFwiYW5cIiwgXCJhbmdlbGVnZW50bGljaFwiLCBcImFuZ2VzaWNodHNcIiwgXCJhbmhhbmRcIiwgXCJhbmzDpHNzbGljaFwiLCBcImFubGFlc3NsaWNoXCIsIFwiYW5zXCIsIFwiYW5zdGF0dFwiLCBcImFuc3RlbGxlXCIsIFwiYXVmXCIsIFwiYXVmc1wiLCBcImF1ZnNlaXRlblwiLCBcImF1c1wiLCBcImF1c2dhbmdzXCIsIFwiYXVzc2NobGllw59saWNoXCIsIFwiYXVzc2NobGllc3NsaWNoXCIsIFwiYXXDn2VyaGFsYlwiLCBcImF1c3NlcmhhbGJcIiwgXCJhdXN3ZWlzbGljaFwiLCBcImJhclwiLCBcImJlaHVmc1wiLCBcImJlaVwiLCBcImJlaWRzZWl0c1wiLCBcImJlaWRlcnNlaXRzXCIsIFwiYmVpbVwiLCBcImJldHJlZmZzXCIsIFwiYmV6w7xnbGljaFwiLCBcImJlenVlZ2xpY2hcIiwgXCJiaW5uZW5cIiwgXCJiaXNcIiwgXCJjb250cmFcIiwgXCJkYW5rXCIsIFwiZGllc3NlaXRzXCIsIFwiZHVyY2hcIiwgXCJlaW5iZXrDvGdsaWNoXCIsIFwiZWluYmV6dWVnbGljaFwiLCBcImVpbmdhbmdzXCIsIFwiZWluZ2VkZW5rXCIsIFwiZWluc2NobGllw59saWNoXCIsIFwiZWluc2NobGllc3NsaWNoXCIsIFwiZW50Z2VnZW5cIiwgXCJlbnRsYW5nXCIsIFwiZXhrbHVzaXZlXCIsIFwiZmVyblwiLCBcImZlcm5hYlwiLCBcImZ1ZXJcIiwgXCJmw7xyXCIsIFwiZnVlcnNcIiwgXCJmw7xyc1wiLCBcImdlZ2VuXCIsIFwiZ2VnZW7DvGJlclwiLCBcImdlZ2VudWViZXJcIiwgXCJnZWxlZ2VudGxpY2hcIiwgXCJnZW3DpMOfXCIsIFwiZ2VtYWXDn1wiLCBcImdlblwiLCBcImdldHJldVwiLCBcImdsZWljaFwiLCBcImhhbGJlclwiLCBcImhpbnNpY2h0bGljaFwiLCBcImhpbnRlclwiLCBcImhpbnRlcm1cIiwgXCJoaW50ZXJzXCIsIFwiaW1cIiwgXCJpblwiLCBcImlua2x1c2l2ZVwiLCBcImlubWl0dGVuXCIsIFwiaW5uZXJoYWxiXCIsIFwiaW5uZXJ0XCIsIFwiaW5zXCIsIFwiamVcIiwgXCJqZW5zZWl0c1wiLCBcImtvbnRyYVwiLCBcImtyYWZ0XCIsIFwibMOkbmdzXCIsIFwibGFlbmdzXCIsIFwibMOkbmdzc2VpdHNcIiwgXCJsYWVuZ3NzZWl0c1wiLCBcImxhdXRcIiwgXCJsaW5rc1wiLCBcIm1hbmdlbHNcIiwgXCJtaW51c1wiLCBcIm1pdFwiLCBcIm1pdGhpbGZlXCIsIFwibWl0c2FtdFwiLCBcIm1pdHRlbHNcIiwgXCJuYWNoXCIsIFwibsOkY2hzdFwiLCBcIm5hZWNoc3RcIiwgXCJuYWhcIiwgXCJuYW1lbnNcIiwgXCJuZWJlblwiLCBcIm5lYnN0XCIsIFwibsO2cmRsaWNoXCIsIFwibm9lcmRsaWNoXCIsIFwibm9yZMO2c3RsaWNoXCIsIFwibm9yZG9lc3RsaWNoXCIsIFwibm9yZHdlc3RsaWNoXCIsIFwib2JlcmhhbGJcIiwgXCJvaG5lXCIsIFwiw7ZzdGxpY2hcIiwgXCJvZXN0bGljaFwiLCBcInBlclwiLCBcInBsdXNcIiwgXCJwcm9cIiwgXCJxdWVyXCIsIFwicmVjaHRzXCIsIFwicsO8Y2tzaWNodGxpY2hcIiwgXCJydWVja3NpY2h0bGljaFwiLCBcInNhbXRcIiwgXCJzZWl0ZW5zXCIsIFwic2VpdGxpY2hcIiwgXCJzZWl0d8OkcnRzXCIsIFwic2VpdHdhZXJ0c1wiLCBcInPDvGRsaWNoXCIsIFwic3VlZGxpY2hcIiwgXCJzw7xkw7ZzdGxpY2hcIiwgXCJzdWVkb2VzdGxpY2hcIiwgXCJzw7xkd2VzdGxpY2hcIiwgXCJzdWVkd2VzdGxpY2hcIiwgXCLDvGJlclwiLCBcInVlYmVyXCIsIFwiw7xiZXJtXCIsIFwidWViZXJtXCIsIFwiw7xiZXJuXCIsIFwidWViZXJuXCIsIFwiw7xiZXJzXCIsIFwidWViZXJzXCIsIFwidW1cIiwgXCJ1bXNcIiwgXCJ1bmJlc2NoYWRldFwiLCBcInVuZXJhY2h0ZXRcIiwgXCJ1bmZlcm5cIiwgXCJ1bnRlclwiLCBcInVudGVyaGFsYlwiLCBcInVudGVybVwiLCBcInVudGVyblwiLCBcInVudGVyc1wiLCBcInVud2VpdFwiLCBcInZlcm1pdHRlbHNcIiwgXCJ2ZXJtaXR0ZWxzdFwiLCBcInZlcm3DtmdlXCIsIFwidmVybW9lZ2VcIiwgXCJ2aWFcIiwgXCJ2b21cIiwgXCJ2b25cIiwgXCJ2b25zZWl0ZW5cIiwgXCJ2b3JcIiwgXCJ2b3JiZWhhbHRsaWNoXCIsIFwid2VnZW5cIiwgXCJ3aWRlclwiLCBcInplaXRcIiwgXCJ6dVwiLCBcInp1Z3Vuc3RlblwiLCBcInp1bGllYlwiLCBcInp1bGllYmVcIiwgXCJ6dW1cIiwgXCJ6dXJcIiwgXCJ6dXPDpHR6bGljaFwiLCBcInp1c2FldHpsaWNoXCIsIFwienV1bmd1bnN0ZW5cIiwgXCJ6dXdpZGVyXCIsIFwienV6w7xnbGljaFwiLCBcInp1enVlZ2xpY2hcIiwgXCJ6d2Vja3NcIiwgXCJ6d2lzY2hlblwiXTtcbi8vIE1hbnkgY29vcmRpbmF0aW5nIGNvbmp1bmN0aW9ucyBhcmUgYWxyZWFkeSBpbmNsdWRlZCBpbiB0aGUgdHJhbnNpdGlvbiB3b3JkcyBsaXN0LlxudmFyIGNvb3JkaW5hdGluZ0Nvbmp1bmN0aW9ucyA9IFtcInVuZFwiLCBcIm9kZXJcIiwgXCJ1bXNvXCJdO1xuLy8gJ25vY2gnIGlzIHBhcnQgb2YgJ3dlZGVyLi4ubm9jaCcsICdudXInIGlzIHBhcnQgb2YgJ25pY2h0IG51ci4uLnNvbmRlcm4gYXVjaCcuXG52YXIgY29ycmVsYXRpdmVDb25qdW5jdGlvbnMgPSBbXCJhdWNoXCIsIFwibm9jaFwiLCBcIm51clwiXTtcbi8vIE1hbnkgc3Vib3JkaW5hdGluZyBjb25qdW5jdGlvbnMgYXJlIGFscmVhZHkgaW5jbHVkZWQgaW4gdGhlIHByZXBvc2l0aW9ucyBsaXN0LCB0cmFuc2l0aW9uIHdvcmRzIGxpc3Qgb3IgcHJvbm9taW5hbCBhZHZlcmJzIGxpc3QuXG52YXIgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucyA9IFtcIm51blwiLCBcInNvXCIsIFwiZ2xlaWNod29obFwiXTtcbi8qXG5UaGVzZSB2ZXJicyBhcmUgZnJlcXVlbnRseSB1c2VkIGluIGludGVydmlld3MgdG8gaW5kaWNhdGUgcXVlc3Rpb25zIGFuZCBhbnN3ZXJzLiAnRnJhZ2UnIGFuZCAnZnJhZ2VuJyBhcmUgbm90IGluY2x1ZGVkLFxuYmVjYXVzZSB0aG9zZSB3b3JkcyBhcmUgYWxzbyBub3Vucy5cbiAqL1xudmFyIGludGVydmlld1ZlcmJzID0gW1wic2FnZVwiLCBcInNhZ3N0XCIsIFwic2FndFwiLCBcInNhZ2VzdFwiLCBcInNhZ2V0XCIsIFwic2FndGVcIiwgXCJzYWd0ZXN0XCIsIFwic2FndGVuXCIsIFwic2FndGV0XCIsIFwiZ2VzYWd0XCIsIFwiZnJhZ3N0XCIsIFwiZnJhZ3RcIiwgXCJmcmFnZXN0XCIsIFwiZnJhZ2V0XCIsIFwiZnJhZ3RlXCIsIFwiZnJhZ3Rlc3RcIiwgXCJmcmFndGVuXCIsIFwiZnJhZ3RldFwiLCBcImdlZnJhZ3RcIiwgXCJlcmtsw6RyZVwiLCBcImVya2zDpHJzdFwiLCBcImVya2zDpHJ0XCIsIFwiZXJrbGFlcmVcIiwgXCJlcmtsYWVyc3RcIiwgXCJlcmtsYWVydFwiLCBcImVya2zDpHJ0ZVwiLCBcImVya2zDpHJ0ZXN0XCIsIFwiZXJrbMOkcnRldFwiLCBcImVya2zDpHJ0ZW5cIiwgXCJlcmtsYWVydGVcIiwgXCJlcmtsYWVydGVzdFwiLCBcImVya2xhZXJ0ZXRcIiwgXCJlcmtsYWVydGVuXCIsIFwiZGVua2VcIiwgXCJkZW5rc3RcIiwgXCJkZW5rdFwiLCBcImRlbmtlc3RcIiwgXCJkZW5rZXRcIiwgXCJkYWNodGVcIiwgXCJkYWNodGVzdFwiLCBcImRhY2h0ZW5cIiwgXCJkYWNodGV0XCIsIFwiZMOkY2h0ZVwiLCBcImTDpGNodGVzdFwiLCBcImTDpGNodGVuXCIsIFwiZMOkY2h0ZXRcIiwgXCJkYWVjaHRlXCIsIFwiZGFlY2h0ZXN0XCIsIFwiZGFlY2h0ZW5cIiwgXCJkYWVjaHRldFwiLCBcImZpbmRlXCIsIFwiZmluZGVzdFwiLCBcImZpbmRldFwiLCBcImdlZnVuZGVuXCJdO1xudmFyIGludGVydmlld1ZlcmJzSW5maW5pdGl2ZSA9IFtcInNhZ2VuXCIsIFwiZXJrbMOkcmVuXCIsIFwiZXJrbGFlcmVuXCIsIFwiZGVua2VuXCIsIFwiZmluZGVuXCJdO1xuLy8gVGhlc2UgdHJhbnNpdGlvbiB3b3JkcyB3ZXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgbGlzdCBmb3IgdGhlIHRyYW5zaXRpb24gd29yZCBhc3Nlc3NtZW50IGZvciB2YXJpb3VzIHJlYXNvbnMuXG52YXIgYWRkaXRpb25hbFRyYW5zaXRpb25Xb3JkcyA9IFtcImV0d2FcIiwgXCJhYnNvbHV0XCIsIFwidW5iZWRpbmd0XCIsIFwid2llZGVyXCIsIFwiZGVmaW5pdGl2XCIsIFwiYmVzdGltbXRcIiwgXCJpbW1lclwiLCBcIsOkdcOfZXJzdFwiLCBcImFldcOfZXJzdFwiLCBcImjDtmNoc3RcIiwgXCJob2VjaHN0XCIsIFwic29mb3J0XCIsIFwiYXVnZW5ibGlja2xpY2hcIiwgXCJ1bWdlaGVuZFwiLCBcImRpcmVrdFwiLCBcInVubWl0dGVsYmFyXCIsIFwibsOkbWxpY2hcIiwgXCJuYWVtbGljaFwiLCBcIm5hdMO8cmxpY2hcIiwgXCJuYXR1ZXJsaWNoXCIsIFwiYmVzb25kZXJzXCIsIFwiaGF1cHRzw6RjaGxpY2hcIiwgXCJoYXVwdHNhZWNobGljaFwiLCBcImpldHp0XCIsIFwiZWJlblwiLCBcImhldXR6dXRhZ2VcIiwgXCJlaW5kZXV0aWdcIiwgXCJ3aXJrbGljaFwiLCBcImVjaHRcIiwgXCJ3YWhyaGFmdFwiLCBcImVocmxpY2hcIiwgXCJhdWZyaWNodGlnXCIsIFwid2FocmhlaXRzZ2Vtw6TDn1wiLCBcImxldHp0bGljaFwiLCBcImVpbm1hbGlnXCIsIFwidW7DvGJlcnRyZWZmbGljaFwiLCBcIm5vcm1hbGVyd2Vpc2VcIiwgXCJnZXfDtmhubGljaFwiLCBcImdld29laG5saWNoXCIsIFwiw7xibGljaGVyd2Vpc2VcIiwgXCJ1ZWJsaWNoZXJ3ZWlzZVwiLCBcInNvbnN0XCIsIFwiZmFzdFwiLCBcIm5haGV6dVwiLCBcImJlaW5haGVcIiwgXCJrbmFwcFwiLCBcImFubsOkaGVybmRcIiwgXCJhbm5hZWhlcm5kXCIsIFwiZ2VyYWRlenVcIiwgXCJiYWxkXCIsIFwidmllbGxlaWNodFwiLCBcIndhaHJzY2hlaW5saWNoXCIsIFwid29obFwiLCBcInZvcmF1c3NpY2h0bGljaFwiLCBcInp1Z2VnZWJlblwiLCBcInVyc3Byw7xuZ2xpY2hcIiwgXCJpbnNnZXNhbXRcIiwgXCJ0YXRzw6RjaGxpY2hcIiwgXCJlaWdlbnRsaWNoXCIsIFwid2FocmhhZnRpZ1wiLCBcImJlcmVpdHNcIiwgXCJzY2hvblwiLCBcIm9mdFwiLCBcImjDpHVmaWdcIiwgXCJoYWV1ZmlnXCIsIFwicmVnZWxtw6TDn2lnXCIsIFwicmVnZWxtYWXDn2lnXCIsIFwiZ2xlaWNobcOkw59pZ1wiLCBcImdsZWljaG1hZcOfaWdcIiwgXCJlaW5mYWNoXCIsIFwibGVkaWdsaWNoXCIsIFwiYmxvw59cIiwgXCJibG9zc1wiLCBcImhhbHRcIiwgXCJ3YWhsd2Vpc2VcIiwgXCJldmVudHVlbGxcIiwgXCJtYW5jaG1hbFwiLCBcInRlaWx3ZWlzZVwiLCBcIm5pZVwiLCBcIm5pZW1hbHNcIiwgXCJuaW1tZXJcIiwgXCJqZW1hbHNcIiwgXCJhbGx6ZWl0XCIsIFwiaXJnZW5kZWlubWFsXCIsIFwiYW5kZXJzXCIsIFwibW9tZW50YW5cIiwgXCJnZWdlbnfDpHJ0aWdcIiwgXCJnZWdlbndhZXJ0aWdcIiwgXCJuZWJlbmJlaVwiLCBcImFuZGVyc3dvXCIsIFwid29hbmRlcnNcIiwgXCJhbmRlcnN3b2hpblwiLCBcImFuZGVyb3J0c1wiLCBcImluc2Jlc29uZGVyZVwiLCBcIm5hbWVudGxpY2hcIiwgXCJzb25kZXJsaWNoXCIsIFwiYXVzZHLDvGNrbGljaFwiLCBcImF1c2RydWVja2xpY2hcIiwgXCJ2b2xsZW5kc1wiLCBcImvDvHJ6bGljaFwiLCBcImt1ZXJ6bGljaFwiLCBcImrDvG5nc3RcIiwgXCJqdWVuZ3N0XCIsIFwidW5sw6RuZ3N0XCIsIFwidW5sYWVuZ3N0XCIsIFwibmV1ZXJkaW5nc1wiLCBcIm5ldWxpY2hcIiwgXCJsZXR6dGVuc1wiLCBcIm5ldWVybGljaFwiLCBcInZlcmjDpGx0bmlzbcOkw59pZ1wiLCBcInZlcmhhZWx0bmlzbWFlc3NpZ1wiLCBcImRldXRsaWNoXCIsIFwia2xhclwiLCBcIm9mZmVuYmFyXCIsIFwiYW5zY2hlaW5lbmRcIiwgXCJnZW5hdVwiLCBcInUuYVwiLCBcImRhbWFsc1wiLCBcInp1bWluZGVzdFwiXTtcbnZhciBpbnRlbnNpZmllcnMgPSBbXCJzZWhyXCIsIFwicmVjaHRcIiwgXCLDvGJlcmF1c1wiLCBcInVlYmVyYXVzXCIsIFwidW5nZW1laW5cIiwgXCJ3ZWl0YXVzXCIsIFwiZWluaWdlcm1hw59lblwiLCBcImVpbmlnZXJtYXNzZW5cIiwgXCJnYW56XCIsIFwic2Nod2VyXCIsIFwidGllcmlzY2hcIiwgXCJ1bmdsZWljaFwiLCBcInppZW1saWNoXCIsIFwiw7xiZWxzdFwiLCBcInVlYmVsc3RcIiwgXCJzdGFya1wiLCBcInZvbGtvbW1lblwiLCBcImR1cmNoYXVzXCIsIFwiZ2FyXCJdO1xuLy8gVGhlc2UgdmVyYnMgY29udmV5IGxpdHRsZSBtZWFuaW5nLlxudmFyIGRlbGV4aWNhbGl6ZWRWZXJicyA9IFtcImdlc2NoaWVuZW5cIiwgXCJtZWluc3RcIiwgXCJtZWludFwiLCBcIm1laW5lc3RcIiwgXCJtZWluZXRcIiwgXCJtZWludGVcIiwgXCJtZWludGVzdFwiLCBcIm1laW50ZW5cIiwgXCJtZWludGV0XCIsIFwiZ2VtZWludFwiLCBcInN0ZWhlXCIsIFwic3RlaHN0XCIsIFwic3RlaHRcIiwgXCJnZWhlXCIsIFwiZ2Voc3RcIiwgXCJnZWh0XCIsIFwiZ2VnYW5nZW5cIiwgXCJnaW5nXCIsIFwiZ2luZ3N0XCIsIFwiZ2luZ2VuXCIsIFwiZ2luZ3RcIl07XG52YXIgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSA9IFtcInR1blwiLCBcIm1hY2hlblwiLCBcInN0ZWhlblwiLCBcIndpc3NlblwiLCBcImdlaGVuXCIsIFwia29tbWVuXCJdO1xuLy8gVGhlc2UgYWRqZWN0aXZlcyBhbmQgYWR2ZXJicyBhcmUgc28gZ2VuZXJhbCwgdGhleSBzaG91bGQgbmV2ZXIgYmUgc3VnZ2VzdGVkIGFzIGEgKHNpbmdsZSkga2V5d29yZC5cbi8vIEtleXdvcmQgY29tYmluYXRpb25zIGNvbnRhaW5pbmcgdGhlc2UgYWRqZWN0aXZlcy9hZHZlcmJzIGFyZSBmaW5lLlxudmFyIGdlbmVyYWxBZGplY3RpdmVzQWR2ZXJicyA9IFtcImVpbmVybGVpXCIsIFwiZWdhbFwiLCBcIm5ldVwiLCBcIm5ldWVcIiwgXCJuZXVlclwiLCBcIm5ldWVuXCIsIFwibmV1ZXNcIiwgXCJuZXVlbVwiLCBcIm5ldWVyZXJcIiwgXCJuZXVlcmVuXCIsIFwibmV1ZXJlbVwiLCBcIm5ldWVyZXNcIiwgXCJuZXVlcmVcIiwgXCJuZXVlc3RlclwiLCBcIm5ldXN0ZXJcIiwgXCJuZXVlc3RlblwiLCBcIm5ldXN0ZW5cIiwgXCJuZXVlc3RlbVwiLCBcIm5ldXN0ZW1cIiwgXCJuZXVlc3Rlc1wiLCBcIm5ldXN0ZXNcIiwgXCJuZXVlc3RlXCIsIFwibmV1c3RlXCIsIFwiYWx0XCIsIFwiYWx0ZXJcIiwgXCJhbHRlblwiLCBcImFsdGVtXCIsIFwiYWx0ZXNcIiwgXCJhbHRlXCIsIFwiw6RsdGVyZVwiLCBcIsOkbHRlcmVuXCIsIFwiw6RsdGVyZXJcIiwgXCLDpGx0ZXJlc1wiLCBcIsOkbHRlc3RlclwiLCBcIsOkbHRlc3RlblwiLCBcIsOkbHRlc3RlbVwiLCBcIsOkbHRlc3Rlc1wiLCBcIsOkbHRlc3RlXCIsIFwiYWVsdGVyZVwiLCBcImFlbHRlcmVuXCIsIFwiYWVsdGVyZXJcIiwgXCJhZWx0ZXJlc1wiLCBcImFlbHRlc3RlclwiLCBcImFlbHRlc3RlblwiLCBcImFlbHRlc3RlbVwiLCBcImFlbHRlc3Rlc1wiLCBcImFlbHRlc3RlXCIsIFwiZ3V0XCIsIFwiZ3V0ZXJcIiwgXCJndXRlbVwiLCBcImd1dGVuXCIsIFwiZ3V0ZXNcIiwgXCJndXRlXCIsIFwiYmVzc2VyXCIsIFwiYmVzc2VyZXJcIiwgXCJiZXNzZXJlblwiLCBcImJlc3NlcmVtXCIsIFwiYmVzc2VyZXNcIiwgXCJiZXN0ZXJcIiwgXCJiZXN0ZW5cIiwgXCJiZXN0ZW1cIiwgXCJiZXN0ZXNcIiwgXCJiZXN0ZVwiLCBcImdyw7bDn3RlXCIsIFwiZ3LDtnNzdGVcIiwgXCJncm/Dn1wiLCBcImdyb8OfZXJcIiwgXCJncm/Dn2VuXCIsIFwiZ3Jvw59lbVwiLCBcImdyb8OfZXNcIiwgXCJncm/Dn2VcIiwgXCJncm/Dn2VyZXJcIiwgXCJncm/Dn2VyZW1cIiwgXCJncm/Dn2VyZW5cIiwgXCJncm/Dn2VyZXNcIiwgXCJncm/Dn2VyZVwiLCBcImdyb8OfdGVyXCIsIFwiZ3Jvw590ZW5cIiwgXCJncm/Dn3RlbVwiLCBcImdyb8OfdGVzXCIsIFwiZ3Jvw590ZVwiLCBcImdyb3NzXCIsIFwiZ3Jvc3NlclwiLCBcImdyb3NzZW5cIiwgXCJncm9zc2VtXCIsIFwiZ3Jvc3Nlc1wiLCBcImdyb3NzZVwiLCBcImdyb3NzZXJlclwiLCBcImdyb3NzZXJlbVwiLCBcImdyb3NzZXJlblwiLCBcImdyb3NzZXJlc1wiLCBcImdyb3NzZXJlXCIsIFwiZ3Jvc3N0ZXJcIiwgXCJncm9zc3RlblwiLCBcImdyb3NzdGVtXCIsIFwiZ3Jvc3N0ZXNcIiwgXCJncm9zc3RlXCIsIFwiZWluZmFjaGVyXCIsIFwiZWluZmFjaGVuXCIsIFwiZWluZmFjaGVtXCIsIFwiZWluZmFjaGVzXCIsIFwiZWluZmFjaGVcIiwgXCJlaW5mYWNoZXJlclwiLCBcImVpbmZhY2hlcmVuXCIsIFwiZWluZmFjaGVyZW1cIiwgXCJlaW5mYWNoZXJlc1wiLCBcImVpbmZhY2hlcmVcIiwgXCJlaW5mYWNoc3RlXCIsIFwiZWluZmFjaHN0ZXJcIiwgXCJlaW5mYWNoc3RlblwiLCBcImVpbmZhY2hzdGVzXCIsIFwiZWluZmFjaHN0ZW1cIiwgXCJzY2huZWxsXCIsIFwic2NobmVsbGVyXCIsIFwic2NobmVsbGVuXCIsIFwic2NobmVsbGVtXCIsIFwic2NobmVsbGVzXCIsIFwic2NobmVsbGVcIiwgXCJzY2huZWxsZXJlXCIsIFwic2NobmVsbGVyZXJcIiwgXCJzY2huZWxsZXJlblwiLCBcInNjaG5lbGxlcmVzXCIsIFwic2NobmVsbGVyZW1cIiwgXCJzY2huZWxsc3RlclwiLCBcInNjaG5lbGxzdGVcIiwgXCJzY2huZWxsc3RlblwiLCBcInNjaG5lbGxzdGVtXCIsIFwic2NobmVsbHN0ZXNcIiwgXCJ3ZWl0XCIsIFwid2VpdGVuXCIsIFwid2VpdGVtXCIsIFwid2VpdGVzXCIsIFwid2VpdGVyZXJcIiwgXCJ3ZWl0ZXJlblwiLCBcIndlaXRlcmVtXCIsIFwid2VpdGVyZXNcIiwgXCJ3ZWl0ZXJlXCIsIFwid2VpdGVzdGVyXCIsIFwid2VpdGVzdGVuXCIsIFwid2VpdGVzdGVtXCIsIFwid2VpdGVzdGVzXCIsIFwid2VpdGVzdGVcIiwgXCJlaWdlblwiLCBcImVpZ2VuZXJcIiwgXCJlaWdlbmVuXCIsIFwiZWlnZW5lc1wiLCBcImVpZ2VuZW1cIiwgXCJlaWdlbmVcIiwgXCJlaWdlbmVyZXJcIiwgXCJlaWduZXJlclwiLCBcImVpZ2VuZXJlblwiLCBcImVpZ25lcmVuXCIsIFwiZWlnZW5lcmVtXCIsIFwiZWlnbmVyZW1cIiwgXCJlaWdlbmVyZXNcIiwgXCJlaWduZXJlc1wiLCBcImVpZ2VuZXJlXCIsIFwiZWlnbmVyZVwiLCBcImVpZ2Vuc3RlclwiLCBcImVpZ2Vuc3RlblwiLCBcImVpZ2Vuc3RlbVwiLCBcImVpZ2Vuc3Rlc1wiLCBcImVpZ2Vuc3RlXCIsIFwid2VuaWdzdGVyXCIsIFwid2VuaWdzdGVuXCIsIFwid2VuaWdzdGVtXCIsIFwid2VuaWdzdGVzXCIsIFwid2VuaWdzdGVcIiwgXCJtaW5kZXJlclwiLCBcIm1pbmRlcmVuXCIsIFwibWluZGVyZW1cIiwgXCJtaW5kZXJlXCIsIFwibWluZGVyZXNcIiwgXCJtaW5kZXN0ZXJcIiwgXCJtaW5kZXN0ZW5cIiwgXCJtaW5kZXN0ZXNcIiwgXCJtaW5kZXN0ZW1cIiwgXCJtaW5kZXN0ZVwiLCBcImxhbmdcIiwgXCJsYW5nZXJcIiwgXCJsYW5nZW5cIiwgXCJsYW5nZW1cIiwgXCJsYW5nZXNcIiwgXCJsw6RuZ2VyZXJcIiwgXCJsw6RuZ2VyZW5cIiwgXCJsw6RuZ2VyZW1cIiwgXCJsw6RuZ2VyZXNcIiwgXCJsw6RuZ2VyZVwiLCBcImzDpG5nc3RlclwiLCBcImzDpG5nc3RlblwiLCBcImzDpG5nc3RlbVwiLCBcImzDpG5nc3Rlc1wiLCBcImzDpG5nc3RlXCIsIFwibGFlbmdlcmVyXCIsIFwibGFlbmdlcmVuXCIsIFwibGFlbmdlcmVtXCIsIFwibGFlbmdlcmVzXCIsIFwibGFlbmdlcmVcIiwgXCJsYWVuZ3N0ZXJcIiwgXCJsYWVuZ3N0ZW5cIiwgXCJsYWVuZ3N0ZW1cIiwgXCJsYWVuZ3N0ZXNcIiwgXCJsYWVuZ3N0ZVwiLCBcInRpZWZcIiwgXCJ0aWVmZXJcIiwgXCJ0aWVmZW5cIiwgXCJ0aWVmZW1cIiwgXCJ0aWVmZXNcIiwgXCJ0aWVmZVwiLCBcInRpZWZlcmVyXCIsIFwidGllZmVyZW5cIiwgXCJ0aWVmZXJlbVwiLCBcInRpZWZlcmVzXCIsIFwidGllZmVyZVwiLCBcInRpZWZzdGVyXCIsIFwidGllZnN0ZW5cIiwgXCJ0aWVmc3RlbVwiLCBcInRpZWZzdGVcIiwgXCJ0aWVmc3Rlc1wiLCBcImhvY2hcIiwgXCJob2hlclwiLCBcImhvaGVuXCIsIFwiaG9oZW1cIiwgXCJob2hlc1wiLCBcImhvaGVcIiwgXCJow7ZoZXJlclwiLCBcImjDtmhlcmVcIiwgXCJow7ZoZXJlblwiLCBcImjDtmhlcmVtXCIsIFwiaMO2aGVyZXNcIiwgXCJob2VoZXJlclwiLCBcImhvZWhlcmVcIiwgXCJob2VoZXJlblwiLCBcImhvZWhlcmVtXCIsIFwiaG9laGVyZXNcIiwgXCJow7ZjaHN0ZXJcIiwgXCJow7ZjaHN0ZVwiLCBcImjDtmNoc3RlblwiLCBcImjDtmNoc3RlbVwiLCBcImjDtmNoc3Rlc1wiLCBcImhvZWNoc3RlclwiLCBcImhvZWNoc3RlXCIsIFwiaG9lY2hzdGVuXCIsIFwiaG9lY2hzdGVtXCIsIFwiaG9lY2hzdGVzXCIsIFwicmVndWzDpHJcIiwgXCJyZWd1bMOkcmVyXCIsIFwicmVndWzDpHJlblwiLCBcInJlZ3Vsw6RyZW1cIiwgXCJyZWd1bMOkcmVzXCIsIFwicmVndWzDpHJlXCIsIFwicmVndWxhZXJcIiwgXCJyZWd1bGFlcmVyXCIsIFwicmVndWxhZXJlblwiLCBcInJlZ3VsYWVyZW1cIiwgXCJyZWd1bGFlcmVzXCIsIFwicmVndWxhZXJlXCIsIFwicmVndWzDpHJlcmVyXCIsIFwicmVndWzDpHJlcmVuXCIsIFwicmVndWzDpHJlcmVtXCIsIFwicmVndWzDpHJlcmVzXCIsIFwicmVndWzDpHJlcmVcIiwgXCJyZWd1bGFlcmVyZXJcIiwgXCJyZWd1bGFlcmVyZW5cIiwgXCJyZWd1bGFlcmVyZW1cIiwgXCJyZWd1bGFlcmVyZXNcIiwgXCJyZWd1bGFlcmVyZVwiLCBcInJlZ3Vsw6Ryc3RlclwiLCBcInJlZ3Vsw6Ryc3RlblwiLCBcInJlZ3Vsw6Ryc3RlbVwiLCBcInJlZ3Vsw6Ryc3Rlc1wiLCBcInJlZ3Vsw6Ryc3RlXCIsIFwicmVndWxhZXJzdGVyXCIsIFwicmVndWxhZXJzdGVuXCIsIFwicmVndWxhZXJzdGVtXCIsIFwicmVndWxhZXJzdGVzXCIsIFwicmVndWxhZXJzdGVcIiwgXCJub3JtYWxcIiwgXCJub3JtYWxlclwiLCBcIm5vcm1hbGVuXCIsIFwibm9ybWFsZW1cIiwgXCJub3JtYWxlc1wiLCBcIm5vcm1hbGVcIiwgXCJub3JtYWxlcmVyXCIsIFwibm9ybWFsZXJlblwiLCBcIm5vcm1hbGVyZW1cIiwgXCJub3JtYWxlcmVzXCIsIFwibm9ybWFsZXJlXCIsIFwibm9ybWFsc3RlclwiLCBcIm5vcm1hbHN0ZW5cIiwgXCJub3JtYWxzdGVtXCIsIFwibm9ybWFsc3Rlc1wiLCBcIm5vcm1hbHN0ZVwiLCBcImtsZWluXCIsIFwia2xlaW5lclwiLCBcImtsZWluZW5cIiwgXCJrbGVpbmVtXCIsIFwia2xlaW5lc1wiLCBcImtsZWluZVwiLCBcImtsZWluZXJlclwiLCBcImtsZWluZXJlc1wiLCBcImtsZWluZXJlblwiLCBcImtsZWluZXJlbVwiLCBcImtsZWluZXJlXCIsIFwia2xlaW5zdGVyXCIsIFwia2xlaW5zdGVuXCIsIFwia2xlaW5zdGVtXCIsIFwia2xlaW5zdGVzXCIsIFwia2xlaW5zdGVcIiwgXCJ3aW56aWdcIiwgXCJ3aW56aWdlclwiLCBcIndpbnppZ2VuXCIsIFwid2luemlnZW1cIiwgXCJ3aW56aWdlc1wiLCBcIndpbnppZ2VyZXJcIiwgXCJ3aW56aWdlcmVuXCIsIFwid2luemlnZXJlbVwiLCBcIndpbnppZ2VyZXNcIiwgXCJ3aW56aWdlcmVcIiwgXCJ3aW56aWdzdGVyXCIsIFwid2luemlnc3RlblwiLCBcIndpbnppZ3N0ZW1cIiwgXCJ3aW56aWdzdGVcIiwgXCJ3aW56aWdzdGVzXCIsIFwic29nZW5hbm50XCIsIFwic29nZW5hbm50ZXJcIiwgXCJzb2dlbmFubnRlblwiLCBcInNvZ2VuYW5udGVtXCIsIFwic29nZW5hbm50ZXNcIiwgXCJzb2dlbmFubnRlXCIsIFwia3VyelwiLCBcImt1cnplclwiLCBcImt1cnplblwiLCBcImt1cnplbVwiLCBcImt1cnplc1wiLCBcImt1cnplXCIsIFwia8O8cnplcmVyXCIsIFwia8O8cnplcmVzXCIsIFwia8O8cnplcmVuXCIsIFwia8O8cnplcmVtXCIsIFwia8O8cnplcmVcIiwgXCJrdWVyemVyZXJcIiwgXCJrdWVyemVyZXNcIiwgXCJrdWVyemVyZW5cIiwgXCJrdWVyemVyZW1cIiwgXCJrdWVyemVyZVwiLCBcImvDvHJ6ZXN0ZXJcIiwgXCJrw7xyemVzdGVuXCIsIFwia8O8cnplc3RlbVwiLCBcImvDvHJ6ZXN0ZXNcIiwgXCJrw7xyemVzdGVcIiwgXCJrdWVyemVzdGVyXCIsIFwia3Vlcnplc3RlblwiLCBcImt1ZXJ6ZXN0ZW1cIiwgXCJrdWVyemVzdGVzXCIsIFwia3Vlcnplc3RlXCIsIFwid2lya2xpY2hlclwiLCBcIndpcmtsaWNoZW5cIiwgXCJ3aXJrbGljaGVtXCIsIFwid2lya2xpY2hlc1wiLCBcIndpcmtsaWNoZVwiLCBcIndpcmtsaWNoZXJlclwiLCBcIndpcmtsaWNoZXJlblwiLCBcIndpcmtsaWNoZXJlbVwiLCBcIndpcmtsaWNoZXJlc1wiLCBcIndpcmtsaWNoZXJlXCIsIFwid2lya2xpY2hzdGVyXCIsIFwid2lya2xpY2hzdGVuXCIsIFwid2lya2xpY2hzdGVzXCIsIFwid2lya2xpY2hzdGVtXCIsIFwid2lya2xpY2hzdGVcIiwgXCJlaWdlbnRsaWNoZXJcIiwgXCJlaWdlbnRsaWNoZW5cIiwgXCJlaWdlbnRsaWNoZW1cIiwgXCJlaWdlbnRsaWNoZXNcIiwgXCJlaWdlbnRsaWNoZVwiLCBcInNjaMO2blwiLCBcInNjaMO2bmVyXCIsIFwic2Now7ZuZW5cIiwgXCJzY2jDtm5lbVwiLCBcInNjaMO2bmVzXCIsIFwic2Now7ZuZVwiLCBcInNjaMO2bmVyZXJcIiwgXCJzY2jDtm5lcmVuXCIsIFwic2Now7ZuZXJlbVwiLCBcInNjaMO2bmVyZXNcIiwgXCJzY2jDtm5lcmVcIiwgXCJzY2jDtm5zdGVyXCIsIFwic2Now7Zuc3RlblwiLCBcInNjaMO2bnN0ZW1cIiwgXCJzY2jDtm5zdGVzXCIsIFwic2Now7Zuc3RlXCIsIFwicmVhbFwiLCBcInJlYWxlclwiLCBcInJlYWxlblwiLCBcInJlYWxlbVwiLCBcInJlYWxlc1wiLCBcInJlYWxlcmVyXCIsIFwicmVhbGVyZW5cIiwgXCJyZWFsZXJlbVwiLCBcInJlYWxlcmVzXCIsIFwicmVhbGVyZVwiLCBcInJlYWxzdGVyXCIsIFwicmVhbHN0ZW5cIiwgXCJyZWFsc3RlbVwiLCBcInJlYWxzdGVzXCIsIFwicmVhbHN0ZVwiLCBcImRlcnNlbGJlXCIsIFwiZGVuc2VsYmVuXCIsIFwiZGVtc2VsYmVuXCIsIFwiZGVzc2VsYmVuXCIsIFwiZGFzc2VsYmVcIiwgXCJkaWVzZWxiZVwiLCBcImRlcnNlbGJlblwiLCBcImRpZXNlbGJlblwiLCBcImdsZWljaGVyXCIsIFwiZ2xlaWNoZW5cIiwgXCJnbGVpY2hlbVwiLCBcImdsZWljaGVzXCIsIFwiZ2xlaWNoZVwiLCBcImdsZWljaGVyZXJcIiwgXCJnbGVpY2hlcmVuXCIsIFwiZ2xlaWNoZXJlbVwiLCBcImdsZWljaGVyZXNcIiwgXCJnbGVpY2hlcmVcIiwgXCJnbGVpY2hzdGVyXCIsIFwiZ2xlaWNoc3RlblwiLCBcImdsZWljaHN0ZW1cIiwgXCJnbGVpY2hzdGVzXCIsIFwiZ2xlaWNoc3RlXCIsIFwiYmVzdGltbXRlclwiLCBcImJlc3RpbW10ZW5cIiwgXCJiZXN0aW1tdGVtXCIsIFwiYmVzdGltbXRlc1wiLCBcImJlc3RpbW10ZVwiLCBcImJlc3RpbW10ZXJlXCIsIFwiYmVzdGltbXRlcmVyXCIsIFwiYmVzdGltbXRlcmVtXCIsIFwiYmVzdGltbXRlcmVuXCIsIFwiYmVzdGltbXRlcmVzXCIsIFwiYmVzdGltbXRlc3RlclwiLCBcImJlc3RpbW10ZXN0ZW5cIiwgXCJiZXN0aW1tdGVzdGVtXCIsIFwiYmVzdGltbXRlc3Rlc1wiLCBcImJlc3RpbW10ZXN0ZVwiLCBcIsO8YmVyd2llZ2VuZFwiLCBcInVlYmVyd2llZ2VuZFwiLCBcInp1bWVpc3RcIiwgXCJtZWlzdGVuc1wiLCBcIm1laXN0ZW5cIiwgXCJncm/Dn2VudGVpbHNcIiwgXCJncm9zc2VudGVpbHNcIiwgXCJtZWlzdGVudGVpbHNcIiwgXCJ3ZWl0aGluXCIsIFwic3TDpG5kaWdcIiwgXCJzdGFlbmRpZ1wiLCBcImxhdWZlbmRcIiwgXCJkYXVlcm5kXCIsIFwiYW5kYXVlcm5kXCIsIFwiaW1tZXJmb3J0XCIsIFwiaXJnZW5kd29cIiwgXCJpcmdlbmR3YW5uXCIsIFwiw6RobmxpY2hlclwiLCBcIsOkaG5saWNoZW5cIiwgXCLDpGhubGljaGVtXCIsIFwiw6RobmxpY2hlc1wiLCBcIsOkaG5saWNoZVwiLCBcIsOkaG5saWNoXCIsIFwiw6RobmxpY2hlcmVyXCIsIFwiw6RobmxpY2hlcmVuXCIsIFwiw6RobmxpY2hlcmVtXCIsIFwiw6RobmxpY2hlcmVzXCIsIFwiw6RobmxpY2hlcmVcIiwgXCLDpGhubGljaHN0ZXJcIiwgXCLDpGhubGljaHN0ZW5cIiwgXCLDpGhubGljaHN0ZW1cIiwgXCLDpGhubGljaHN0ZXNcIiwgXCLDpGhubGljaHN0ZVwiLCBcInNjaGxlY2h0XCIsIFwic2NobGVjaHRlclwiLCBcInNjaGxlY2h0ZW5cIiwgXCJzY2hsZWNodGVtXCIsIFwic2NobGVjaHRlc1wiLCBcInNjaGxlY2h0ZVwiLCBcInNjaGxlY2h0ZXJlclwiLCBcInNjaGxlY2h0ZXJlblwiLCBcInNjaGxlY2h0ZXJlbVwiLCBcInNjaGxlY2h0ZXJlc1wiLCBcInNjaGxlY2h0ZXJlXCIsIFwic2NobGVjaHRlc3RlclwiLCBcInNjaGxlY2h0ZXN0ZW5cIiwgXCJzY2hsZWNodGVzdGVtXCIsIFwic2NobGVjaHRlc3Rlc1wiLCBcInNjaGxlY2h0ZXN0ZVwiLCBcInNjaGxpbW1cIiwgXCJzY2hsaW1tZXJcIiwgXCJzY2hsaW1tZW5cIiwgXCJzY2hsaW1tZW1cIiwgXCJzY2hsaW1tZXNcIiwgXCJzY2hsaW1tZVwiLCBcInNjaGxpbW1lcmVyXCIsIFwic2NobGltbWVyZW5cIiwgXCJzY2hsaW1tZXJlbVwiLCBcInNjaGxpbW1lcmVzXCIsIFwic2NobGltbWVyZVwiLCBcInNjaGxpbW1zdGVyXCIsIFwic2NobGltbXN0ZW5cIiwgXCJzY2hsaW1tc3RlbVwiLCBcInNjaGxpbW1zdGVzXCIsIFwic2NobGltbXN0ZVwiLCBcInRvbGxcIiwgXCJ0b2xsZXJcIiwgXCJ0b2xsZW5cIiwgXCJ0b2xsZW1cIiwgXCJ0b2xsZXNcIiwgXCJ0b2xsZVwiLCBcInRvbGxlcmVyXCIsIFwidG9sbGVyZW5cIiwgXCJ0b2xsZXJlbVwiLCBcInRvbGxlcmVcIiwgXCJ0b2xsZXJlc1wiLCBcInRvbGxzdGVyXCIsIFwidG9sbHN0ZW5cIiwgXCJ0b2xsc3RlbVwiLCBcInRvbGxzdGVzXCIsIFwidG9sbHN0ZVwiLCBcInN1cGVyXCIsIFwibcO2Z2xpY2hlXCIsIFwibcO2Z2xpY2hlclwiLCBcIm3DtmdsaWNoZXNcIiwgXCJtw7ZnbGljaGVuXCIsIFwibcO2Z2xpY2hlbVwiLCBcIm3DtmdsaWNoXCIsIFwibW9lZ2xpY2hlXCIsIFwibW9lZ2xpY2hlclwiLCBcIm1vZWdsaWNoZXNcIiwgXCJtb2VnbGljaGVuXCIsIFwibW9lZ2xpY2hlbVwiLCBcIm1vZWdsaWNoXCIsIFwibsOkY2hzdGVuXCIsIFwibmFlY2hzdGVuXCIsIFwidm9sbFwiLCBcInZvbGxlclwiLCBcInZvbGxlblwiLCBcInZvbGxlbVwiLCBcInZvbGxlXCIsIFwidm9sbGVzXCIsIFwidm9sbGVyZXJcIiwgXCJ2b2xsZXJlblwiLCBcInZvbGxlcmVtXCIsIFwidm9sbGVyZVwiLCBcInZvbGxlcmVzXCIsIFwidm9sbHN0ZXJcIiwgXCJ2b2xsc3RlblwiLCBcInZvbGxzdGVtXCIsIFwidm9sbHN0ZVwiLCBcInZvbGxzdGVzXCIsIFwiYXXDn2VuXCIsIFwiZ2FuemVyXCIsIFwiZ2FuemVuXCIsIFwiZ2FuemVtXCIsIFwiZ2FuemVcIiwgXCJnYW56ZXNcIiwgXCJnZXJuZVwiLCBcIm9iZW5cIiwgXCJ1bnRlblwiLCBcInp1csO8Y2tcIiwgXCJ6dXJ1ZWNrXCIsIFwibmljaHRcIl07XG52YXIgaW50ZXJqZWN0aW9ucyA9IFtcImFjaFwiLCBcImFoYVwiLCBcIm9oXCIsIFwiYXVcIiwgXCJiw6RoXCIsIFwiYmFlaFwiLCBcImlnaXR0XCIsIFwiaHVjaFwiLCBcImh1cnJhXCIsIFwiaG9wcGxhXCIsIFwibmFudVwiLCBcIm9oYVwiLCBcIm9sYWxhXCIsIFwicGZ1aVwiLCBcInRqYVwiLCBcInV1cHNcIiwgXCJ3b3dcIiwgXCJncnJcIiwgXCLDpGhcIiwgXCJhZWhcIiwgXCLDpGhtXCIsIFwiYWVobVwiLCBcIsO2aG1cIiwgXCJvZWhtXCIsIFwiaG1cIiwgXCJtZWlcIiwgXCJtaG1cIiwgXCJva2F5XCIsIFwicmljaHRpZ1wiLCBcImVpamVpamVpamVpXCJdO1xuLy8gVGhlc2Ugd29yZHMgYW5kIGFiYnJldmlhdGlvbnMgYXJlIGZyZXF1ZW50bHkgdXNlZCBpbiByZWNpcGVzIGluIGxpc3RzIG9mIGluZ3JlZGllbnRzLlxudmFyIHJlY2lwZVdvcmRzID0gW1wiZ1wiLCBcImVsXCIsIFwidGxcIiwgXCJ3Z1wiLCBcImJlXCIsIFwiYmRcIiwgXCJjbFwiLCBcImRsXCIsIFwiZGFnXCIsIFwiZG9cIiwgXCJnbFwiLCBcImdyXCIsIFwia2dcIiwgXCJrbFwiLCBcImNiXCIsIFwiY2NtXCIsIFwibFwiLCBcIm1zXCIsIFwibWdcIiwgXCJtbFwiLCBcIm1pXCIsIFwicGtcIiwgXCJwclwiLCBcInBwXCIsIFwic2NcIiwgXCJzcFwiLCBcInN0XCIsIFwic2tcIiwgXCJ0YVwiLCBcInRyXCIsIFwiY21cIiwgXCJtYXNzXCJdO1xudmFyIHRpbWVXb3JkcyA9IFtcInNla3VuZGVcIiwgXCJzZWt1bmRlblwiLCBcIm1pbnV0ZVwiLCBcIm1pbnV0ZW5cIiwgXCJzdHVuZGVcIiwgXCJzdHVuZGVuXCIsIFwidWhyXCIsIFwidGFnXCIsIFwidGFnZXNcIiwgXCJ0YWdzXCIsIFwidGFnZVwiLCBcInRhZ2VuXCIsIFwid29jaGVcIiwgXCJ3b2NoZW5cIiwgXCJtb25hdFwiLCBcIm1vbmF0ZVwiLCBcIm1vbmF0ZXNcIiwgXCJtb25hdHNcIiwgXCJtb25hdGVuXCIsIFwiamFoclwiLCBcImphaHJlc1wiLCBcImphaHJzXCIsIFwiamFocmVcIiwgXCJqYWhyZW5cIiwgXCJtb3JnZW5zXCIsIFwibWl0dGFnc1wiLCBcImFiZW5kc1wiLCBcIm5hY2h0c1wiLCBcImhldXRlXCIsIFwiZ2VzdGVyblwiLCBcIm1vcmdlblwiLCBcInZvcmdlc3Rlcm5cIiwgXCLDvGJlcm1vcmdlblwiLCBcInVlYmVybW9yZ2VuXCJdO1xudmFyIHZhZ3VlTm91bnMgPSBbXCJkaW5nXCIsIFwiZGluZ2VcIiwgXCJkaW5nZXNcIiwgXCJkaW5nZXJcIiwgXCJkaW5nZXJuXCIsIFwiZGluZ2VuXCIsIFwic2FjaGVcIiwgXCJzYWNoZW5cIiwgXCJ3ZWlzZVwiLCBcIndlaXNlblwiLCBcIndhaHJzY2hlaW5saWNoa2VpdFwiLCBcInpldWdcIiwgXCJ6ZXVnZVwiLCBcInpldWdlc1wiLCBcInpldWdlblwiLCBcIm1hbFwiLCBcImVpbm1hbFwiLCBcInRlaWxcIiwgXCJ0ZWlsZVwiLCBcInRlaWxlc1wiLCBcInRlaWxlblwiLCBcInByb3plbnRcIiwgXCJwcm96ZW50c1wiLCBcInByb3plbnRlc1wiLCBcInByb3plbnRlXCIsIFwicHJvemVudGVuXCIsIFwiYmVpc3BpZWxcIiwgXCJiZWlzcGllbGVcIiwgXCJiZWlzcGllbGVzXCIsIFwiYmVpc3BpZWxzXCIsIFwiYmVpc3BpZWxlblwiLCBcImFzcGVrdFwiLCBcImFzcGVrdGVcIiwgXCJhc3Bla3Rlc1wiLCBcImFzcGVrdHNcIiwgXCJhc3Bla3RlblwiLCBcImlkZWVcIiwgXCJpZGVlblwiLCBcImFobnVuZ1wiLCBcImFobnVuZ2VuXCIsIFwidGhlbWFcIiwgXCJ0aGVtYXNcIiwgXCJ0aGVtYXRhXCIsIFwidGhlbWVuXCIsIFwiZmFsbFwiLCBcImZhbGxlXCIsIFwiZmFsbGVzXCIsIFwiZsOkbGxlXCIsIFwiZsOkbGxlblwiLCBcImZhZWxsZVwiLCBcImZhZWxsZW5cIiwgXCJtZW5zY2hcIiwgXCJtZW5zY2hlblwiLCBcImxldXRlXCJdO1xudmFyIG1pc2NlbGxhbmVvdXMgPSBbXCJuaXhcIiwgXCJuaXhlXCIsIFwibml4ZXNcIiwgXCJuaXhlblwiLCBcInVzdy5cIiwgXCJhbWVuXCIsIFwiamFcIiwgXCJuZWluXCIsIFwiZXVyb1wiXTtcbnZhciB0aXRsZXNQcmVjZWRpbmcgPSBbXCJmclwiLCBcImhyXCIsIFwiZHJcIiwgXCJwcm9mXCJdO1xudmFyIHRpdGxlc0ZvbGxvd2luZyA9IFtcImpyXCIsIFwianVuXCIsIFwic2VuXCIsIFwic3JcIl07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBUaGVzZSB3b3JkIGNhdGVnb3JpZXMgYXJlIGZpbHRlcmVkIGF0IHRoZSBiZWdpbm5pbmcgb2Ygd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQXRCZWdpbm5pbmc6IFtdLmNvbmNhdChvdGhlckF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgcGFzc2l2ZUF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSwgY29wdWxhSW5maW5pdGl2ZSwgaW50ZXJ2aWV3VmVyYnNJbmZpbml0aXZlKSxcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBhdCB0aGUgZW5kaW5nIG9mIHdvcmQgY29tYmluYXRpb25zLlxuICAgICAgICBmaWx0ZXJlZEF0RW5kaW5nOiBbXS5jb25jYXQob3JkaW5hbE51bWVyYWxzLCBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMpLFxuICAgICAgICAvLyBUaGVzZSB3b3JkIGNhdGVnb3JpZXMgYXJlIGZpbHRlcmVkIGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyBvZiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBdEJlZ2lubmluZ0FuZEVuZGluZzogW10uY29uY2F0KGFydGljbGVzLCBwcmVwb3NpdGlvbnMsIGNvb3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgZGVtb25zdHJhdGl2ZVByb25vdW5zLCBpbnRlbnNpZmllcnMsIHF1YW50aWZpZXJzKSxcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBldmVyeXdoZXJlIHdpdGhpbiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBbnl3aGVyZTogW10uY29uY2F0KHRyYW5zaXRpb25Xb3JkcywgYWR2ZXJiaWFsR2VuaXRpdmVzLCBwZXJzb25hbFByb25vdW5zTm9taW5hdGl2ZSwgcGVyc29uYWxQcm9ub3Vuc0FjY3VzYXRpdmUsIHBlcnNvbmFsUHJvbm91bnNEYXRpdmUsIHJlZmxleGl2ZVByb25vdW5zLCBpbnRlcmplY3Rpb25zLCBjYXJkaW5hbE51bWVyYWxzLCBjb3B1bGEsIGludGVydmlld1ZlcmJzLCBvdGhlckF1eGlsaWFyaWVzLCBmaWx0ZXJlZFBhc3NpdmVBdXhpbGlhcmllcywgZGVsZXhpY2FsaXplZFZlcmJzLCBpbmRlZmluaXRlUHJvbm91bnMsIGNvcnJlbGF0aXZlQ29uanVuY3Rpb25zLCBzdWJvcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBpbnRlcnJvZ2F0aXZlUHJvQWR2ZXJicywgbG9jYXRpdmVBZHZlcmJzLCBtaXNjZWxsYW5lb3VzLCBwcm9ub21pbmFsQWR2ZXJicywgcmVjaXBlV29yZHMsIHRpbWVXb3JkcywgdmFndWVOb3VucywgcmVjaXByb2NhbFByb25vdW5zLCBwb3NzZXNzaXZlUHJvbm91bnMpLFxuICAgICAgICAvLyBUaGlzIGV4cG9ydCBjb250YWlucyBhbGwgb2YgdGhlIGFib3ZlIHdvcmRzLlxuICAgICAgICBhbGw6IFtdLmNvbmNhdChhcnRpY2xlcywgY2FyZGluYWxOdW1lcmFscywgb3JkaW5hbE51bWVyYWxzLCBkZW1vbnN0cmF0aXZlUHJvbm91bnMsIHBvc3Nlc3NpdmVQcm9ub3VucywgcmVmbGV4aXZlUHJvbm91bnMsIHJlY2lwcm9jYWxQcm9ub3VucywgcGVyc29uYWxQcm9ub3Vuc05vbWluYXRpdmUsIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlLCBxdWFudGlmaWVycywgaW5kZWZpbml0ZVByb25vdW5zLCBpbnRlcnJvZ2F0aXZlUHJvQWR2ZXJicywgcHJvbm9taW5hbEFkdmVyYnMsIGxvY2F0aXZlQWR2ZXJicywgYWR2ZXJiaWFsR2VuaXRpdmVzLCBmaWx0ZXJlZFBhc3NpdmVBdXhpbGlhcmllcywgcGFzc2l2ZUF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgb3RoZXJBdXhpbGlhcmllcywgb3RoZXJBdXhpbGlhcmllc0luZmluaXRpdmUsIGNvcHVsYSwgY29wdWxhSW5maW5pdGl2ZSwgcHJlcG9zaXRpb25zLCBjb29yZGluYXRpbmdDb25qdW5jdGlvbnMsIGNvcnJlbGF0aXZlQ29uanVuY3Rpb25zLCBzdWJvcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBpbnRlcnZpZXdWZXJicywgaW50ZXJ2aWV3VmVyYnNJbmZpbml0aXZlLCB0cmFuc2l0aW9uV29yZHMsIGFkZGl0aW9uYWxUcmFuc2l0aW9uV29yZHMsIGludGVuc2lmaWVycywgZGVsZXhpY2FsaXplZFZlcmJzLCBkZWxleGljYWxpemVkVmVyYnNJbmZpbml0aXZlLCBpbnRlcmplY3Rpb25zLCBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMsIHJlY2lwZVdvcmRzLCB2YWd1ZU5vdW5zLCBtaXNjZWxsYW5lb3VzLCB0aW1lV29yZHMsIHRpdGxlc1ByZWNlZGluZywgdGl0bGVzRm9sbG93aW5nKVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb25Xb3Jkcy5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9uV29yZHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vIFRoZXNlIHBhc3NpdmUgYXV4aWxpYXJpZXMgc3RhcnQgd2l0aCBiZS0sIGdlLSBvciBlci0gZW4gYW5kIHdpdGggLXQsIGFuZCB0aGVyZWZvcmUgbG9vayBsaWtlIGEgcGFydGljaXBsZS5cblxudmFyIHBhcnRpY2lwbGVMaWtlID0gW1wiYmVrb21tc3RcIiwgXCJiZWtvbW10XCIsIFwiYmVrYW1zdFwiLCBcImJla29tbWVzdFwiLCBcImJla29tbWV0XCIsIFwiYmVrw6RtZXN0XCIsIFwiYmVrw6Rtc3RcIiwgXCJiZWvDpG1ldFwiLCBcImJla8OkbXRcIiwgXCJnZWtyaWVndFwiLCBcImdlaMO2cnN0XCIsIFwiZ2Vow7ZydFwiLCBcImdlaMO2cnRlc3RcIiwgXCJnZWjDtnJ0ZXRcIiwgXCJnZWjDtnJlc3RcIiwgXCJnZWjDtnJldFwiLCBcImVyaMOkbHRzdFwiLCBcImVyaMOkbHRcIiwgXCJlcmhhbHRldFwiLCBcImVyaGllbHRcIiwgXCJlcmhpZWx0ZXN0XCIsIFwiZXJoaWVsdHN0XCIsIFwiZXJoaWVsdGV0XCIsIFwiZXJoYWx0ZXN0XCJdO1xuLy8gVGhlc2UgYXJlIGFsbCBvdGhlciBwYXNzaXZlIGF1eGlsaWFyaWVzLlxudmFyIG90aGVyQXV4aWxpYXJpZXMgPSBbXCJ3ZXJkZVwiLCBcIndpcnN0XCIsIFwid2lyZFwiLCBcIndlcmRlblwiLCBcIndlcmRldFwiLCBcInd1cmRlXCIsIFwid2FyZFwiLCBcInd1cmRlc3RcIiwgXCJ3YXJkc3RcIiwgXCJ3dXJkZW5cIiwgXCJ3dXJkZXRcIiwgXCJ3b3JkZW5cIiwgXCJ3ZXJkZXN0XCIsIFwid8O8cmRlXCIsIFwid8O8cmRlc3RcIiwgXCJ3w7xyZGVuXCIsIFwid8O8cmRldFwiLCBcImJla29tbWVcIiwgXCJiZWtvbW1lblwiLCBcImJla2FtXCIsIFwiYmVrYW1lblwiLCBcImJla8OkbWVcIiwgXCJiZWvDpG1lblwiLCBcImtyaWVnZVwiLCBcImtyaWVnc3RcIiwgXCJrcmllZ3RcIiwgXCJrcmllZ2VuXCIsIFwia3JpZWd0ZVwiLCBcImtyaWVndGVzdFwiLCBcImtyaWVndGVuXCIsIFwia3JpZWd0ZXRcIiwgXCJrcmllZ2VzdFwiLCBcImtyaWVnZXRcIiwgXCJnZWjDtnJlXCIsIFwiZ2Vow7ZyZW5cIiwgXCJnZWjDtnJ0ZVwiLCBcImdlaMO2cnRlblwiLCBcImVyaGFsdGVcIiwgXCJlcmhhbHRlblwiLCBcImVyaGllbHRlblwiLCBcImVyaGllbHRlXCJdO1xuLy8gVGhlc2UgZmlyc3QgcGVyc29uIHBsdXJhbCBhdXhpbGlhcmllcyBhbHNvIGZ1bmN0aW9uIGFzIGFuIGluZmluaXRpdmUuXG52YXIgaW5maW5pdGl2ZUF1eGlsaWFyaWVzID0gW1wid2VyZGVuXCIsIFwiYmVrb21tZW5cIiwgXCJrcmllZ2VuXCIsIFwiZ2Vow7ZyZW5cIiwgXCJlcmhhbHRlblwiXTtcbi8qKlxuICogUmV0dXJucyBsaXN0cyB3aXRoIGF1eGlsaWFyaWVzLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgbGlzdHMgd2l0aCBhdXhpbGlhcmllcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFydGljaXBsZUxpa2U6IHBhcnRpY2lwbGVMaWtlLFxuICAgICAgICBvdGhlckF1eGlsaWFyaWVzOiBvdGhlckF1eGlsaWFyaWVzLmNvbmNhdChpbmZpbml0aXZlQXV4aWxpYXJpZXMpLFxuICAgICAgICAvLyBUaGVzZSBhdXhpbGlhcmllcyBhcmUgZmlsdGVyZWQgZnJvbSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2Ygd29yZCBjb21iaW5hdGlvbnMgaW4gdGhlIHByb21pbmVudCB3b3Jkcy5cbiAgICAgICAgZmlsdGVyZWRBdXhpbGlhcmllczogcGFydGljaXBsZUxpa2UuY29uY2F0KG90aGVyQXV4aWxpYXJpZXMpLFxuICAgICAgICAvLyBUaGVzZSBhdXhpbGlhcmllcyBhcmUgbm90IGZpbHRlcmVkIGZyb20gdGhlIGJlZ2lubmluZyBvZiB3b3JkIGNvbWJpbmF0aW9ucyBpbiB0aGUgcHJvbWluZW50IHdvcmRzLlxuICAgICAgICBpbmZpbml0aXZlQXV4aWxpYXJpZXM6IGluZmluaXRpdmVBdXhpbGlhcmllcyxcbiAgICAgICAgYWxsQXV4aWxpYXJpZXM6IHBhcnRpY2lwbGVMaWtlLmNvbmNhdChvdGhlckF1eGlsaWFyaWVzLCBpbmZpbml0aXZlQXV4aWxpYXJpZXMpXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXhpbGlhcmllcy5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1eGlsaWFyaWVzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQG1vZHVsZSBjb25maWcvdHJhbnNpdGlvbldvcmRzICovXG5cbnZhciBzaW5nbGVXb3JkcyA9IFtcImFiZXJcIiwgXCJhYnNjaGxpZcOfZW5kXCIsIFwiYWJzY2hsaWVzc2VuZFwiLCBcImFsbGRpZXdlaWxcIiwgXCJhbGxlcmRpbmdzXCIsIFwiYWxzb1wiLCBcImFuZGVyZW50ZWlsc1wiLCBcImFuZGVyZXJzZWl0c1wiLCBcImFuZGVybnRlaWxzXCIsIFwiYW5mYWVuZ2xpY2hcIiwgXCJhbmbDpG5nbGljaFwiLCBcImFuZmFuZ3NcIiwgXCJhbmdlbm9tbWVuXCIsIFwiYW5zY2hsaWVzc2VuZFwiLCBcImFuc2NobGllw59lbmRcIiwgXCJhdWZncnVuZFwiLCBcImF1c2dlbm9tbWVuXCIsIFwiYXVzc2VyZGVtXCIsIFwiYXXDn2VyZGVtXCIsIFwiYmVpc3BpZWxzd2Vpc2VcIiwgXCJiZXZvclwiLCBcImJlemllaHVuZ3N3ZWlzZVwiLCBcImJzcHdcIiwgXCJiendcIiwgXCJkLmhcIiwgXCJkYVwiLCBcImRhYmVpXCIsIFwiZGFkdXJjaFwiLCBcImRhZnVlclwiLCBcImRhZsO8clwiLCBcImRhZ2VnZW5cIiwgXCJkYWhlclwiLCBcImRhaGluZ2VnZW5cIiwgXCJkYW5hY2hcIiwgXCJkYW5uXCIsIFwiZGFyYXVmXCIsIFwiZGFydW1cIiwgXCJkYXNzXCIsIFwiZGF2b3JcIiwgXCJkYXp1XCIsIFwiZGVtZW50Z2VnZW5cIiwgXCJkZW1lbnRzcHJlY2hlbmRcIiwgXCJkZW1nZWdlbsO8YmVyXCIsIFwiZGVtZ2VnZW51ZWJlclwiLCBcImRlbWdlbWFlc3NcIiwgXCJkZW1nZW3DpMOfXCIsIFwiZGVtenVmb2xnZVwiLCBcImRlbm5cIiwgXCJkZW5ub2NoXCIsIFwiZGVyZ2VzdGFsdFwiLCBcImRlc3RvXCIsIFwiZGVzaGFsYlwiLCBcImRlc3VuZ2VhY2h0ZXRcIiwgXCJkZXN3ZWdlblwiLCBcImRvY2hcIiwgXCJkb3J0XCIsIFwiZHJpdHRlbnNcIiwgXCJlYmVuZmFsbHNcIiwgXCJlYmVuc29cIiwgXCJlbmRsaWNoXCIsIFwiZWhlXCIsIFwiZWluZXJzZWl0c1wiLCBcImVpbmVzdGVpbHNcIiwgXCJlbnRzcHJlY2hlbmRcIiwgXCJlbnR3ZWRlclwiLCBcImVyc3RcIiwgXCJlcnN0ZW5zXCIsIFwiZmFsbHNcIiwgXCJmZXJuZXJcIiwgXCJmb2xnZXJpY2h0aWdcIiwgXCJmb2xnbGljaFwiLCBcImbDvHJkZXJoaW5cIiwgXCJmdWVyZGVyaGluXCIsIFwiZ2VuYXVzb1wiLCBcImhpZXJkdXJjaFwiLCBcImhpZXJ6dVwiLCBcImhpbmdlZ2VuXCIsIFwiaW1tZXJoaW5cIiwgXCJpbmRlbVwiLCBcImluZGVzXCIsIFwiaW5kZXNzZW5cIiwgXCJpbmZvbGdlXCIsIFwiaW5mb2xnZWRlc3NlblwiLCBcImluc29mZXJuXCIsIFwiaW5zb3dlaXRcIiwgXCJpbnp3aXNjaGVuXCIsIFwiamVkZW5mYWxsc1wiLCBcImplZG9jaFwiLCBcImt1cnp1bVwiLCBcIm0uYS53XCIsIFwibWl0bmljaHRlblwiLCBcIm1pdHVudGVyXCIsIFwibcO2Z2xpY2hlcndlaXNlXCIsIFwibW9lZ2xpY2hlcndlaXNlXCIsIFwibmFjaGRlbVwiLCBcIm5lYmVuaGVyXCIsIFwibmljaHRzZGVzdG90cm90elwiLCBcIm5pY2h0c2Rlc3Rvd2VuaWdlclwiLCBcIm9iXCIsIFwib2JlbnJlaW5cIiwgXCJvYmdsZWljaFwiLCBcIm9ic2Nob25cIiwgXCJvYndvaGxcIiwgXCJvYnp3YXJcIiwgXCJvaG5laGluXCIsIFwicmljaHRpZ2Vyd2Vpc2VcIiwgXCJzY2hsaWVzc2xpY2hcIiwgXCJzY2hsaWXDn2xpY2hcIiwgXCJzZWl0XCIsIFwic2VpdGRlbVwiLCBcInNvYmFsZFwiLCBcInNvZGFzc1wiLCBcInNvIGRhc3NcIiwgXCJzb2Zlcm5cIiwgXCJzb2dhclwiLCBcInNvbGFuZ1wiLCBcInNvbGFuZ2VcIiwgXCJzb21pdFwiLCBcInNvbmRlcm5cIiwgXCJzb29mdFwiLCBcInNvdmllbFwiLCBcInNvd2VpdFwiLCBcInNvd2llXCIsIFwic293b2hsXCIsIFwic3RhdHRcIiwgXCJzdGF0dGRlc3NlblwiLCBcInRyb3R6XCIsIFwidHJvdHpkZW1cIiwgXCLDvGJlcmRpZXNcIiwgXCLDvGJyaWdlbnNcIiwgXCJ1ZWJlcmRpZXNcIiwgXCJ1ZWJyaWdlbnNcIiwgXCJ1bmdlYWNodGV0XCIsIFwidmllbG1laHJcIiwgXCJ2b3JhdXNnZXNldHp0XCIsIFwidm9yaGVyXCIsIFwid2FlaHJlbmRcIiwgXCJ3w6RocmVuZFwiLCBcInfDpGhyZW5kZGVzc2VuXCIsIFwid2FlaHJlbmRkZXNzZW5cIiwgXCJ3ZWRlclwiLCBcIndlZ2VuXCIsIFwid2VpbFwiLCBcIndlaXRlclwiLCBcIndlaXRlcmhpblwiLCBcIndlbm5cIiwgXCJ3ZW5uZ2xlaWNoXCIsIFwid2VubnNjaG9uXCIsIFwid2Vubnp3YXJcIiwgXCJ3ZXNoYWxiXCIsIFwid2lkcmlnZW5mYWxsc1wiLCBcIndpZXdvaGxcIiwgXCJ3b2JlaVwiLCBcIndvaGluZ2VnZW5cIiwgXCJ6LmJcIiwgXCJ6dWRlbVwiLCBcInp1ZXJzdFwiLCBcInp1Zm9sZ2VcIiwgXCJ6dWxldHp0XCIsIFwienVtYWxcIiwgXCJ6dXZvclwiLCBcInp3YXJcIiwgXCJ6d2VpdGVuc1wiXTtcbnZhciBtdWx0aXBsZVdvcmRzID0gW1wiYWJnZXNlaGVuIHZvblwiLCBcImFiZ2VzZWhlbiBkYXZvblwiLCBcImFscyBkYXNzXCIsIFwiYWxzIHdlbm5cIiwgXCJhbmRlcnMgYXVzZ2VkcsO8Y2t0XCIsIFwiYW5kZXJzIGF1c2dlZHJ1ZWNrdFwiLCBcImFuZGVycyBmb3JtdWxpZXJ0XCIsIFwiYW5kZXJzIGdlZmFzc3RcIiwgXCJhbmRlcnMgZ2VmcmFndFwiLCBcImFuZGVycyBnZXNhZ3RcIiwgXCJhbmRlcnMgZ2VzcHJvY2hlblwiLCBcImFuc3RhdHQgZGFzc1wiLCBcImF1Y2ggd2VublwiLCBcImF1ZiBncnVuZFwiLCBcImF1ZiBqZWRlbiBmYWxsXCIsIFwiYXVzIGRpZXNlbSBncnVuZFwiLCBcImF1c3NlciBkYXNzXCIsIFwiYXXDn2VyIGRhc3NcIiwgXCJhdXNzZXIgd2VublwiLCBcImF1w59lciB3ZW5uXCIsIFwiYmVzc2VyIGF1c2dlZHLDvGNrdFwiLCBcImJlc3NlciBhdXNnZWRydWVja3RcIiwgXCJiZXNzZXIgZm9ybXVsaWVydFwiLCBcImJlc3NlciBnZXNhZ3RcIiwgXCJiZXNzZXIgZ2VzcHJvY2hlblwiLCBcImJsb3NzIGRhc3NcIiwgXCJibG/DnyBkYXNzXCIsIFwiZGFzIGhlaXNzdFwiLCBcImRhcyBoZWnDn3RcIiwgXCJkZXMgd2VpdGVyZW5cIiwgXCJkZXNzZW4gdW5nZWFjaHRldFwiLCBcImViZW5zbyB3aWVcIiwgXCJnZW5hdXNvIHdpZVwiLCBcImdlc2Nod2VpZ2UgZGVublwiLCBcImltIGZhbGxcIiwgXCJpbSBmYWxsZVwiLCBcImltIGZvbGdlbmRlblwiLCBcImltIGdlZ2Vuc2F0eiBkYXp1XCIsIFwiaW0gZ3J1bmRlIGdlbm9tbWVuXCIsIFwiaW4gZGllc2VtIHNpbm5lXCIsIFwiamUgbmFjaGRlbVwiLCBcImt1cnogZ2VzYWd0XCIsIFwibWl0IGFuZGVyZW4gd29ydGVuXCIsIFwib2huZSBkYXNzXCIsIFwic28gZGFzc1wiLCBcInVtc28gbWVociBhbHNcIiwgXCJ1bXNvIHdlbmlnZXIgYWxzXCIsIFwidW1zbyBtZWhyLCBhbHNcIiwgXCJ1bXNvIHdlbmlnZXIsIGFsc1wiLCBcInVuYmVzY2hhZGV0IGRlc3NlblwiLCBcInVuZCB6d2FyXCIsIFwidW5nZWFjaHRldCBkZXNzZW5cIiwgXCJ1bnRlciBkZW0gc3RyaWNoXCIsIFwienVtIGJlaXNwaWVsXCJdO1xuLyoqXG4gKiBSZXR1cm5zIGxpc3RzIHdpdGggdHJhbnNpdGlvbiB3b3JkcyB0byBiZSB1c2VkIGJ5IHRoZSBhc3Nlc3NtZW50cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBvYmplY3Qgd2l0aCB0cmFuc2l0aW9uIHdvcmQgbGlzdHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNpbmdsZVdvcmRzOiBzaW5nbGVXb3JkcyxcbiAgICAgICAgbXVsdGlwbGVXb3JkczogbXVsdGlwbGVXb3JkcyxcbiAgICAgICAgYWxsV29yZHM6IHNpbmdsZVdvcmRzLmNvbmNhdChtdWx0aXBsZVdvcmRzKVxuICAgIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbldvcmRzLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbldvcmRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB0cmFuc2l0aW9uV29yZHMgPSByZXF1aXJlKFwiLi90cmFuc2l0aW9uV29yZHMuanNcIikoKS5zaW5nbGVXb3Jkcztcbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBleGNlcHRpb25zIGZvciB0aGUgcHJvbWluZW50IHdvcmRzIHJlc2VhcmNoZXIuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2JqZWN0IGZpbGxlZCB3aXRoIGV4Y2VwdGlvbiBhcnJheXMuXG4gKi9cbnZhciBhcnRpY2xlcyA9IFtcImlsXCIsIFwiaVwiLCBcImxhXCIsIFwibGVcIiwgXCJsb1wiLCBcImdsaVwiLCBcInVuXCIsIFwidW5vXCIsIFwidW5hXCJdO1xudmFyIGNhcmRpbmFsTnVtZXJhbHMgPSBbXCJkdWVcIiwgXCJ0cmVcIiwgXCJxdWF0dHJvXCIsIFwiY2lucXVlXCIsIFwic2V0dGVcIiwgXCJvdHRvXCIsIFwibm92ZVwiLCBcImRpZWNpXCIsIFwidW5kaWNpXCIsIFwiZG9kaWNpXCIsIFwidHJlZGljaVwiLCBcInF1YXR0b3JkaWNpXCIsIFwicXVpbmRpY2lcIiwgXCJzZWRpY2lcIiwgXCJkaWNpYXNzZXR0ZVwiLCBcImRpY2lvdHRvXCIsIFwiZGljaWFubm92ZVwiLCBcInZlbnRpXCIsIFwiY2VudG9cIiwgXCJtaWxsZVwiLCBcIm1pbGFcIiwgXCJkdWVtaWxhXCIsIFwidHJlbWlsYVwiLCBcInF1YXR0cm9taWxhXCIsIFwiY2lucXVlbWlsYVwiLCBcInNlaW1pbGFcIiwgXCJzZXR0ZW1pbGFcIiwgXCJvdHRvbWlsYVwiLCBcIm5vdmVtaWxhXCIsIFwiZGllY2ltaWxhXCIsIFwibWlsaW9uZVwiLCBcIm1pbGlvbmlcIiwgXCJtaWxpYXJkb1wiLCBcIm1pbGlhcmRpXCJdO1xudmFyIG9yZGluYWxOdW1lcmFscyA9IFtcInByaW1hXCIsIFwicHJpbWlcIiwgXCJwcmltZVwiLCBcInNlY29uZG9cIiwgXCJzZWNvbmRhXCIsIFwic2Vjb25kaVwiLCBcInNlY29uZGVcIiwgXCJ0ZXJ6b1wiLCBcInRlcnphXCIsIFwidGVyemlcIiwgXCJ0ZXJ6ZVwiLCBcInF1YXJ0b1wiLCBcInF1YXJ0YVwiLCBcInF1YXJ0aVwiLCBcInF1YXJ0ZVwiLCBcInF1aW50b1wiLCBcInF1aW50YVwiLCBcInF1aW50aVwiLCBcInF1aW50ZVwiLCBcInNlc3RvXCIsIFwic2VzdGFcIiwgXCJzZXN0aVwiLCBcInNlc3RlXCIsIFwic2V0dGltb1wiLCBcInNldHRpbWFcIiwgXCJzZXR0aW1pXCIsIFwic2V0dGltZVwiLCBcIm90dGF2b1wiLCBcIm90dGF2YVwiLCBcIm90dGF2aVwiLCBcIm90dGF2ZVwiLCBcIm5vbm9cIiwgXCJub25hXCIsIFwibm9uaVwiLCBcIm5vbmVcIiwgXCJkZWNpbW9cIiwgXCJkZWNpbWFcIiwgXCJkZWNpbWlcIiwgXCJkZWNpbWVcIiwgXCJ1bmRpY2VzaW1vXCIsIFwidW5kaWNlc2ltYVwiLCBcInVuZGljZXNpbWlcIiwgXCJ1bmRpY2VzaW1lXCIsIFwiZG9kaWNlc2ltb1wiLCBcImRvZGljZXNpbWFcIiwgXCJkb2RpY2VzaW1pXCIsIFwiZG9kaWNlc2ltZVwiLCBcInRyZWRpY2VzaW1vXCIsIFwidHJlZGljZXNpbWFcIiwgXCJ0cmVkaWNlc2ltaVwiLCBcInRyZWRpY2VzaW1lXCIsIFwicXVhdHRvcmRpY2VzaW1vXCIsIFwicXVhdHRvcmRpY2VzaW1hXCIsIFwicXVhdHRvcmRpY2VzaW1pXCIsIFwicXVhdHRvcmRpY2VzaW1lXCIsIFwicXVpbmRpY2VzaW1vXCIsIFwicXVpbmRpY2VzaW1hXCIsIFwicXVpbmRpY2VzaW1pXCIsIFwicXVpbmRpY2VzaW1lXCIsIFwic2VkaWNlc2ltb1wiLCBcInNlZGljZXNpbWFcIiwgXCJzZWRpY2VzaW1pXCIsIFwic2VkaWNlc2ltZVwiLCBcImRpY2lhc3NldHRlc2ltb1wiLCBcImRpY2lhc3NldHRlc2ltYVwiLCBcImRpY2lhc3NldHRlc2ltaVwiLCBcImRpY2lhc3NldHRlc2ltZVwiLCBcImRpY2lhbm5vdmVzaW1vXCIsIFwiZGljaWFubm92ZXNpbWFcIiwgXCJkaWNpYW5ub3Zlc2ltaVwiLCBcImRpY2lhbm5vdmVzaW1lXCIsIFwidmVudGVzaW1vXCIsIFwidmVudGVzaW1hXCIsIFwidmVudGVzaW1pXCIsIFwidmVudGVzaW1lXCJdO1xudmFyIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlID0gW1wiaW9cIiwgXCJ0dVwiLCBcImVnbGlcIiwgXCJlc3NvXCIsIFwibHVpXCIsIFwiZWxsYVwiLCBcImVzc2FcIiwgXCJsZWlcIiwgXCJub2lcIiwgXCJ2b2lcIiwgXCJlc3NpXCIsIFwiZXNzZVwiLCBcImxvcm9cIl07XG4vLyAnTGEnIGFuZCAnbGUnIGFyZSBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBsaXN0IG9mIGFydGljbGVzLlxudmFyIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlID0gW1wibWlcIiwgXCJ0aVwiLCBcInNpXCIsIFwiY2lcIiwgXCJ2aVwiLCBcImxpXCIsIFwibWVcIiwgXCJ0ZVwiLCBcInNlXCIsIFwiZ2xpZVwiLCBcImdsaWVsb1wiLCBcImdsaWVsYVwiLCBcImdsaWVsaVwiLCBcImdsaWVsZVwiLCBcImdsaWVuZVwiLCBcImNlXCIsIFwidmVcIl07XG52YXIgcGVyc29uYWxQcm9ub3Vuc1ByZXBvc2l0aW9uYWwgPSBbXCJzw6lcIl07XG52YXIgZGVtb25zdHJhdGl2ZVByb25vdW5zID0gW1wiY2nDslwiLCBcImNvZGVzdG9cIiwgXCJjb2Rlc3RhXCIsIFwiY29kZXN0aVwiLCBcImNvZGVzdGVcIiwgXCJjb2xlaVwiLCBcImNvbHVpXCIsIFwiY29sb3JvXCIsIFwiY29zdGVpXCIsIFwiY29zdHVpXCIsIFwiY29zdG9yb1wiLCBcIm1lZGVzaW1vXCIsIFwibWVkZXNpbWFcIiwgXCJtZWRlc2ltaVwiLCBcIm1lZGVzaW1lXCIsIFwicXVlc3RvXCIsIFwicXVlc3RhXCIsIFwicXVlc3RpXCIsIFwicXVlc3RlXCIsIFwicXVlbGxvXCIsIFwicXVlbGxhXCIsIFwicXVlbGxpXCIsIFwicXVlbGxlXCIsIFwicXVlbFwiLCBcInF1ZWlcIiwgXCJxdWVnbGlcIl07XG52YXIgcG9zc2Vzc2l2ZVByb25vdW5zID0gW1wibWlvXCIsIFwibWlhXCIsIFwibWllaVwiLCBcIm1pZVwiLCBcInR1b1wiLCBcInR1YVwiLCBcInR1b2lcIiwgXCJ0dWVcIiwgXCJzdW9cIiwgXCJzdWFcIiwgXCJzdW9pXCIsIFwic3VlXCIsIFwibm9zdHJvXCIsIFwibm9zdHJhXCIsIFwibm9zdHJpXCIsIFwibm9zdHJlXCIsIFwidm9zdHJvXCIsIFwidm9zdHJhXCIsIFwidm9zdHJpXCIsIFwidm9zdHJlXCJdO1xuLy8gQWxyZWFkeSBpbiB0aGUgbGlzdCBvZiB0cmFuc2l0aW9uIHdvcmRzOiBhcHBlbmEuXG52YXIgcXVhbnRpZmllcnMgPSBbXCJhZmZhdHRvXCIsIFwiYWxjdW5cIiwgXCJhbGN1bmFcIiwgXCJhbGN1bmVcIiwgXCJhbGN1bmlcIiwgXCJhbGN1bm9cIiwgXCJiYXN0YW50ZW1lbnRlXCIsIFwiZ3JhbmRlbWVudGVcIiwgXCJtYXNzaW1hbWVudGVcIiwgXCJtZW5vXCIsIFwibWluaW1hbWVudGVcIiwgXCJtb2x0YVwiLCBcIm1vbHRlXCIsIFwibW9sdGlcIiwgXCJtb2x0aXNzaW1vXCIsIFwibW9sdG9cIiwgXCJuZXNzdW5cIiwgXCJuZXNzdW5hXCIsIFwibmVzc3Vub1wiLCBcIm5pZW50ZVwiLCBcIm51bGxhXCIsIFwib2duaVwiLCBcInBpw7lcIiwgXCJwbydcIiwgXCJwb2NhXCIsIFwicG9jaGVcIiwgXCJwb2NoaVwiLCBcInBvY29cIiwgXCJwb2NoaXNzaW1lXCIsIFwicG9jaGlzc2ltaVwiLCBcInF1YWxjaGVcIiwgXCJxdWFsc2lhc2lcIiwgXCJxdWFsdW5xdWVcIiwgXCJxdWludGFsaVwiLCBcInJhcmFcIiwgXCJyYXJpc3NpbWFcIiwgXCJyYXJpc3NpbW9cIiwgXCJyYXJvXCIsIFwic3Blc3NvXCIsIFwic3Blc3Npc3NpbW9cIiwgXCJzdWZmaWNpZW50ZW1lbnRlXCIsIFwidGFsdW5vXCIsIFwidGFsdW5hXCIsIFwidGFsdW5pXCIsIFwidGFsdW5lXCIsIFwidGFudGFcIiwgXCJ0YW50ZVwiLCBcInRhbnRpXCIsIFwidGFudGlzc2ltZVwiLCBcInRhbnRpc3NpbWlcIiwgXCJ0YW50b1wiLCBcInRvbm5lbGxhdGVcIiwgXCJ0cm9wcGFcIiwgXCJ0cm9wcGVcIiwgXCJ0cm9wcGlcIiwgXCJ0cm9wcG9cIiwgXCJ0dXR0YVwiLCBcInR1dHRlXCIsIFwidHV0dGlcIiwgXCJ0dXR0b1wiXTtcbi8vIEFscmVhZHkgaW4gdGhlIHF1YW50aWZpZXIgbGlzdDogYWxjdW5vLCBtb2x0bywgbmVzc3VubywgcG9jbywgdGFsdW5vIHRhbnRvLCB0cm9wcG8sIHR1dHRvLCBudWxsYSwgbmllbnRlLlxudmFyIGluZGVmaW5pdGVQcm9ub3VucyA9IFtcImFsY3VuY2jDqVwiLCBcImFsY3VuY2jDqFwiLCBcImFsdHJvXCIsIFwiYWx0cmFcIiwgXCJhbHRyaVwiLCBcImFsdHJlXCIsIFwiY2VydGFcIiwgXCJjZXJ0aVwiLCBcImNlcnRlXCIsIFwiY2hlY2Now6lcIiwgXCJjaGVjY2jDqFwiLCBcImNoaWNjaGVzc2lhXCIsIFwiY2hpdW5xdWVcIiwgXCJjaWFzY3Vub1wiLCBcImNpYXNjdW5hXCIsIFwiY2lhc2N1blwiLCBcImRpdmVyc29cIiwgXCJkaXZlcnNhXCIsIFwiZGl2ZXJzaVwiLCBcImRpdmVyc2VcIiwgXCJwYXJlY2NoaW9cIiwgXCJwYXJlY2NoaWFcIiwgXCJwYXJlY2NoaVwiLCBcInBhcmVjY2hpZVwiLCBcInF1YWxjb3NhXCIsIFwicXVhbGN1bm9cIiwgXCJxdWFsY3VuYVwiLCBcInZhcmlvXCIsIFwidmFyaWFcIiwgXCJ2YXJpXCIsIFwidmFyaWVcIl07XG52YXIgaW50ZXJyb2dhdGl2ZURldGVybWluZXJzID0gW1wiY2hlXCIsIFwiY29zYVwiLCBcImN1aVwiLCBcInF1YWxcIiwgXCJxdWFsZVwiLCBcInF1YWxpXCJdO1xudmFyIGludGVycm9nYXRpdmVQcm9ub3VucyA9IFtcImNoaVwiLCBcInF1YW50YVwiLCBcInF1YW50ZVwiLCBcInF1YW50aVwiLCBcInF1YW50b1wiXTtcbnZhciBpbnRlcnJvZ2F0aXZlQWR2ZXJicyA9IFtcImNvbSfDqFwiLCBcImNvbSdlcmFcIiwgXCJjb20nZXJhbm9cIiwgXCJkb25kZVwiLCBcImQnb25kZVwiLCBcImRvdmVcIiwgXCJkb3Ynw6hcIiwgXCJkb3YnZXJhXCIsIFwiZG92J2VyYW5vXCIsIFwiZG92dW5xdWVcIl07XG4vLyAnQ2knIGFuZCAndmknIGFyZSBhbHJlYWR5IHBhcnQgb2YgdGhlIGxpc3Qgb2YgcGVyc29uYWwgcHJvbm91bnMuXG52YXIgcHJvbm9taW5hbEFkdmVyYnMgPSBbXCJuZVwiXTtcbi8vICdWaWEnIG5vdCBpbmNsdWRlZCBiZWNhdXNlIG9mIHByaW1hcnkgbWVhbmluZyAnc3RyZWV0Jy5cbnZhciBsb2NhdGl2ZUFkdmVyYnMgPSBbXCJhY2NhbnRvXCIsIFwiYWx0cm92ZVwiLCBcImF0dG9ybm9cIiwgXCJkYXBwZXJ0dXR0b1wiLCBcImdpw7lcIiwgXCJsw6BcIiwgXCJsYWdnacO5XCIsIFwibGFzc8O5XCIsIFwibMOsXCIsIFwib3Z1bnF1ZVwiLCBcInF1YVwiLCBcInF1YWdnacO5XCIsIFwicXVhc3PDuVwiLCBcInF1aVwiXTtcbi8vICdFc3NlcmUnIGlzIGFscmVhZHkgcGFydCBvZiB0aGUgb3RoZXJBdXhpbGlhcmllcyBsaXN0LlxudmFyIGZpbHRlcmVkUGFzc2l2ZUF1eGlsaWFyaWVzID0gW1widmVuZ2Fub1wiLCBcInZlbmdvXCIsIFwidmVuZ29ub1wiLCBcInZlbmlhbW9cIiwgXCJ2ZW5pYXRlXCIsIFwidmVuaW1tb1wiLCBcInZlbmlzc2VcIiwgXCJ2ZW5pc3Nlcm9cIiwgXCJ2ZW5pc3NpXCIsIFwidmVuaXNzaW1vXCIsIFwidmVuaXN0ZVwiLCBcInZlbmlzdGlcIiwgXCJ2ZW5pdGVcIiwgXCJ2ZW5pdmFcIiwgXCJ2ZW5pdmFtb1wiLCBcInZlbml2YW5vXCIsIFwidmVuaXZhdGVcIiwgXCJ2ZW5pdmlcIiwgXCJ2ZW5pdm9cIiwgXCJ2ZW5uZVwiLCBcInZlbm5lcm9cIiwgXCJ2ZW5uaVwiLCBcInZlcnLDoFwiLCBcInZlcnJhaVwiLCBcInZlcnJhbm5vXCIsIFwidmVycmViYmVcIiwgXCJ2ZXJyZWJiZXJvXCIsIFwidmVycmVpXCIsIFwidmVycmVtbW9cIiwgXCJ2ZXJyZW1vXCIsIFwidmVycmVzdGVcIiwgXCJ2ZXJyZXN0aVwiLCBcInZlcnJldGVcIiwgXCJ2ZXJyw7JcIiwgXCJ2aWVuZVwiLCBcInZpZW5pXCJdO1xudmFyIHBhc3NpdmVBdXhpbGlhcmllc0luZmluaXRpdmUgPSBbXCJ2ZW5pcmVcIiwgXCJ2ZW5pclwiXTtcbnZhciBvdGhlckF1eGlsaWFyaWVzID0gW1wiYWJiaVwiLCBcImFiYmlhXCIsIFwiYWJiaWFtb1wiLCBcImFiYmlhbm9cIiwgXCJhYmJpYXRlXCIsIFwiYWJiaWVudGVcIiwgXCJhdmVtbW9cIiwgXCJhdmVuZG9cIiwgXCJhdmVudGVcIiwgXCJhdmVzc2VcIiwgXCJhdmVzc2Vyb1wiLCBcImF2ZXNzaVwiLCBcImF2ZXNzaW1vXCIsIFwiYXZlc3RlXCIsIFwiYXZlc3RpXCIsIFwiYXZldGVcIiwgXCJhdmV2YVwiLCBcImF2ZXZhbW9cIiwgXCJhdmV2YW5vXCIsIFwiYXZldmF0ZVwiLCBcImF2ZXZpXCIsIFwiYXZldm9cIiwgXCJhdnLDoFwiLCBcImF2cmFpXCIsIFwiYXZyYW5ub1wiLCBcImF2cmViYmVcIiwgXCJhdnJlYmJlcm9cIiwgXCJhdnJlaVwiLCBcImF2cmVtbW9cIiwgXCJhdnJlbW9cIiwgXCJhdnJlc3RlXCIsIFwiYXZyZXN0aVwiLCBcImF2cmV0ZVwiLCBcImF2csOyXCIsIFwiYXZ1dG9cIiwgXCJlYmJlXCIsIFwiZWJiZXJvXCIsIFwiZWJiaVwiLCBcImhhXCIsIFwiaGFpXCIsIFwiaGFubm9cIiwgXCJob1wiLCBcInBvc3NhXCIsIFwicG9zc2Fub1wiLCBcInBvc3NpYW1vXCIsIFwicG9zc2lhdGVcIiwgXCJwb3Nzb1wiLCBcInBvc3Nvbm9cIiwgXCJwb3TDqVwiLCBcInBvdGVpXCIsIFwicG90ZW1tb1wiLCBcInBvdGVuZG9cIiwgXCJwb3RlbnRlXCIsIFwicG90ZXJvbm9cIiwgXCJwb3Rlc3NlXCIsIFwicG90ZXNzZXJvXCIsIFwicG90ZXNzaVwiLCBcInBvdGVzc2ltb1wiLCBcInBvdGVzdGVcIiwgXCJwb3Rlc3RpXCIsIFwicG90ZXRlXCIsIFwicG90ZXR0ZVwiLCBcInBvdGV0dGVyb1wiLCBcInBvdGV0dGlcIiwgXCJwb3RldmFcIiwgXCJwb3RldmFtb1wiLCBcInBvdGV2YW5vXCIsIFwicG90ZXZhdGVcIiwgXCJwb3RldmlcIiwgXCJwb3Rldm9cIiwgXCJwb3Ryw6BcIiwgXCJwb3RyYWlcIiwgXCJwb3RyYW5ub1wiLCBcInBvdHJlYmJlXCIsIFwicG90cmViYmVyb1wiLCBcInBvdHJlaVwiLCBcInBvdHJlbW1vXCIsIFwicG90cmVtb1wiLCBcInBvdHJlc3RlXCIsIFwicG90cmVzdGlcIiwgXCJwb3RyZXRlXCIsIFwicG90csOyXCIsIFwicG90dXRvXCIsIFwicHXDslwiLCBcInB1b2lcIiwgXCJ2b2dsaWFcIiwgXCJ2b2dsaWFtb1wiLCBcInZvZ2xpYW5vXCIsIFwidm9nbGlhdGVcIiwgXCJ2b2dsaW9cIiwgXCJ2b2dsaW9ub1wiLCBcInZvbGVtbW9cIiwgXCJ2b2xlbmRvXCIsIFwidm9sZW50ZVwiLCBcInZvbGVzc2VcIiwgXCJ2b2xlc3Nlcm9cIiwgXCJ2b2xlc3NpXCIsIFwidm9sZXNzaW1vXCIsIFwidm9sZXN0ZVwiLCBcInZvbGVzdGlcIiwgXCJ2b2xldGVcIiwgXCJ2b2xldmFcIiwgXCJ2b2xldmFtb1wiLCBcInZvbGV2YW5vXCIsIFwidm9sZXZhdGVcIiwgXCJ2b2xldmlcIiwgXCJ2b2xldm9cIiwgXCJ2b2xsZVwiLCBcInZvbGxlcm9cIiwgXCJ2b2xsaVwiLCBcInZvbHV0b1wiLCBcInZvcnLDoFwiLCBcInZvcnJhaVwiLCBcInZvcnJhbm5vXCIsIFwidm9ycmViYmVcIiwgXCJ2b3JyZWJiZXJvXCIsIFwidm9ycmVpXCIsIFwidm9ycmVtbW9cIiwgXCJ2b3JyZW1vXCIsIFwidm9ycmVzdGVcIiwgXCJ2b3JyZXN0aVwiLCBcInZvcnJldGVcIiwgXCJ2b3Jyw7JcIiwgXCJ2dW9pXCIsIFwidnVvbGVcIiwgXCJkZWJiYVwiLCBcImRlYmJhbm9cIiwgXCJkZWJib25vXCIsIFwiZGV2YVwiLCBcImRldmVcIiwgXCJkZXZpXCIsIFwiZGV2b1wiLCBcImRldm9ub1wiLCBcImRvYmJpYW1vXCIsIFwiZG9iYmlhdGVcIiwgXCJkb3bDqVwiLCBcImRvdmVpXCIsIFwiZG92ZW1tb1wiLCBcImRvdmVuZG9cIiwgXCJkb3Zlcm9ub1wiLCBcImRvdmVzc2VcIiwgXCJkb3Zlc3Nlcm9cIiwgXCJkb3Zlc3NpXCIsIFwiZG92ZXNzaW1vXCIsIFwiZG92ZXN0ZVwiLCBcImRvdmVzdGlcIiwgXCJkb3ZldGVcIiwgXCJkb3ZldHRlXCIsIFwiZG92ZXR0ZXJvXCIsIFwiZG92ZXR0aVwiLCBcImRvdmV2YVwiLCBcImRvdmV2YW1vXCIsIFwiZG92ZXZhbm9cIiwgXCJkb3ZldmF0ZVwiLCBcImRvdmV2aVwiLCBcImRvdmV2b1wiLCBcImRvdnLDoFwiLCBcImRvdnJhaVwiLCBcImRvdnJhbm5vXCIsIFwiZG92cmViYmVcIiwgXCJkb3ZyZWJiZXJvXCIsIFwiZG92cmVpXCIsIFwiZG92cmVtbW9cIiwgXCJkb3ZyZW1vXCIsIFwiZG92cmVzdGVcIiwgXCJkb3ZyZXN0aVwiLCBcImRvdnJldGVcIiwgXCJkb3Zyw7JcIiwgXCJkb3Z1dG9cIiwgXCJzYVwiLCBcInNhaVwiLCBcInNhbm5vXCIsIFwic2FwZW1tb1wiLCBcInNhcGVuZG9cIiwgXCJzYXBlc3NlXCIsIFwic2FwZXNzZXJvXCIsIFwic2FwZXNzaVwiLCBcInNhcGVzc2ltb1wiLCBcInNhcGVzdGVcIiwgXCJzYXBlc3RpXCIsIFwic2FwZXRlXCIsIFwic2FwZXZhXCIsIFwic2FwZXZhbW9cIiwgXCJzYXBldmFub1wiLCBcInNhcGV2YXRlXCIsIFwic2FwZXZpXCIsIFwic2FwZXZvXCIsIFwic2FwcGlcIiwgXCJzYXBwaWFcIiwgXCJzYXBwaWFtb1wiLCBcInNhcHBpYW5vXCIsIFwic2FwcGlhdGVcIiwgXCJzYXByw6BcIiwgXCJzYXByYWlcIiwgXCJzYXByYW5ub1wiLCBcInNhcHJlYmJlXCIsIFwic2FwcmViYmVyb1wiLCBcInNhcHJlaVwiLCBcInNhcHJlbW1vXCIsIFwic2FwcmVtb1wiLCBcInNhcHJlc3RlXCIsIFwic2FwcmVzdGlcIiwgXCJzYXByZXRlXCIsIFwic2FwcsOyXCIsIFwic2FwdXRvXCIsIFwic2VwcGVcIiwgXCJzZXBwZXJvXCIsIFwic2VwcGlcIiwgXCJzb1wiLCBcInNvZ2xpYVwiLCBcInNvZ2xpYW1vXCIsIFwic29nbGlhbm9cIiwgXCJzb2dsaWF0ZVwiLCBcInNvZ2xpb1wiLCBcInNvZ2xpb25vXCIsIFwic29sZXNzZVwiLCBcInNvbGVzc2Vyb1wiLCBcInNvbGVzc2lcIiwgXCJzb2xlc3NpbW9cIiwgXCJzb2xlc3RlXCIsIFwic29sZXRlXCIsIFwic29sZXZhXCIsIFwic29sZXZhbW9cIiwgXCJzb2xldmFub1wiLCBcInNvbGV2YXRlXCIsIFwic29sZXZpXCIsIFwic29sZXZvXCIsIFwic3VvbGlcIiwgXCJzdGFcIiwgXCJzdGFpXCIsIFwic3RhbmRvXCIsIFwic3Rhbm5vXCIsIFwic3RhbnRlXCIsIFwic3RhcsOgXCIsIFwic3RhcmFpXCIsIFwic3RhcmFubm9cIiwgXCJzdGFyZW1vXCIsIFwic3RhcmV0ZVwiLCBcInN0YXLDslwiLCBcInN0YXZhXCIsIFwic3RhdmFtb1wiLCBcInN0YXZhbm9cIiwgXCJzdGF2YXRlXCIsIFwic3RhdmlcIiwgXCJzdGF2b1wiLCBcInN0ZW1tb1wiLCBcInN0ZXNzZXJvXCIsIFwic3Rlc3NpbW9cIiwgXCJzdGVzdGVcIiwgXCJzdGVzdGlcIiwgXCJzdGV0dGVcIiwgXCJzdGV0dGVyb1wiLCBcInN0ZXR0aVwiLCBcInN0aWFcIiwgXCJzdGlhbW9cIiwgXCJzdGlhbm9cIiwgXCJzdGlhdGVcIiwgXCJzdG9cIl07XG52YXIgb3RoZXJBdXhpbGlhcmllc0luZmluaXRpdmUgPSBbXCJhdmVyZVwiLCBcImF2ZXJcIiwgXCJwb3RlcmVcIiwgXCJwb3RlclwiLCBcInZvbGVyZVwiLCBcInZvbGVyXCIsIFwiZG92ZXJlXCIsIFwiZG92ZXJcIiwgXCJzYXBlcmVcIiwgXCJzYXBlclwiLCBcInNvbGVyZVwiLCBcInN0YXJlXCIsIFwic3RhclwiXTtcbnZhciBjb3B1bGEgPSBbXCLDqFwiLCBcImUnXCIsIFwiZXJhXCIsIFwiZXJhbm9cIiwgXCJlcmF2YW1vXCIsIFwiZXJhdmF0ZVwiLCBcImVyaVwiLCBcImVyb1wiLCBcImVzc2VuZG9cIiwgXCJlc3NlbnRlXCIsIFwiZm9zc2VcIiwgXCJmb3NzZXJvXCIsIFwiZm9zc2lcIiwgXCJmb3NzaW1vXCIsIFwiZm9zdGVcIiwgXCJmb3N0aVwiLCBcImZ1XCIsIFwiZnVpXCIsIFwiZnVtbW9cIiwgXCJmdXJvbm9cIiwgXCJzYXLDoFwiLCBcInNhcmFpXCIsIFwic2FyYW5ub1wiLCBcInNhcmViYmVcIiwgXCJzYXJlYmJlcm9cIiwgXCJzYXJlaVwiLCBcInNhcmVtbW9cIiwgXCJzYXJlbW9cIiwgXCJzYXJlc3RlXCIsIFwic2FyZXN0aVwiLCBcInNhcmV0ZVwiLCBcInNhcsOyXCIsIFwic2VpXCIsIFwic2lhXCIsIFwic2lhbW9cIiwgXCJzaWFub1wiLCBcInNpYXRlXCIsIFwic2lldGVcIiwgXCJzaWlcIiwgXCJzb25vXCIsIFwic3RhdGFcIiwgXCJzdGF0ZVwiLCBcInN0YXRpXCIsIFwic3RhdG9cIl07XG52YXIgY29wdWxhSW5maW5pdGl2ZSA9IFtcImVzc2VyZVwiLCBcImVzc2VyXCJdO1xuLypcbidWZXJzbycgKCd0b3dhcmRzJykgbm90IGluY2x1ZGVkIGJlY2F1c2UgaXQgY2FuIGFsc28gbWVhbiAndmVyc2UnLlxuQWxyZWFkeSBpbiBvdGhlciBsaXN0czogbWFsZ3JhZG8sIG5vbm9zdGFudGUuXG4gKi9cbnZhciBwcmVwb3NpdGlvbnMgPSBbXCJkaVwiLCBcImRlbFwiLCBcImRlbGxvXCIsIFwiZGVsbGFcIiwgXCJkZWlcIiwgXCJkZWdsaVwiLCBcImRlbGxlXCIsIFwiYVwiLCBcImFkXCIsIFwiYWxcIiwgXCJhbGxvXCIsIFwiYWxsYVwiLCBcImFpXCIsIFwiYWdsaVwiLCBcImFsbGVcIiwgXCJkYVwiLCBcImRhbFwiLCBcImRhbGxvXCIsIFwiZGFsbGFcIiwgXCJkYWlcIiwgXCJkYWdsaVwiLCBcImRhbGxlXCIsIFwiaW5cIiwgXCJuZWxcIiwgXCJuZWxsb1wiLCBcIm5lbGxhXCIsIFwibmVpXCIsIFwibmVnbGlcIiwgXCJuZWxsZVwiLCBcImNvblwiLCBcImNvbFwiLCBcImNvbGxvXCIsIFwiY29sbGFcIiwgXCJjb2lcIiwgXCJjb2dsaVwiLCBcImNvbGxlXCIsIFwic3VcIiwgXCJzdWxcIiwgXCJzdWxsb1wiLCBcInN1bGxhXCIsIFwic3VpXCIsIFwic3VnbGlcIiwgXCJzdWxsZVwiLCBcInBlclwiLCBcInBlbFwiLCBcInBlbGxvXCIsIFwicGVsbGFcIiwgXCJwZWlcIiwgXCJwZWdsaVwiLCBcInRyYVwiLCBcImZyYVwiLCBcImF0dHJhdmVyc29cIiwgXCJjaXJjYVwiLCBcImNvbnRyb1wiLCBcImRhdmFudGlcIiwgXCJkZW50cm9cIiwgXCJkaWV0cm9cIiwgXCJlbnRyb1wiLCBcImVzY2x1c29cIiwgXCJmdW9yaVwiLCBcImluc2llbWVcIiwgXCJpbnRvcm5vXCIsIFwibG9udGFub1wiLCBcImx1bmdvXCIsIFwibWVkaWFudGVcIiwgXCJvbHRyZVwiLCBcInByZXNzb1wiLCBcInJhc2VudGVcIiwgXCJyaWd1YXJkb1wiLCBcInNlbnphXCIsIFwic29wcmFcIiwgXCJzb3R0b1wiLCBcInRyYW1pdGVcIiwgXCJ2aWNpbm9cIl07XG52YXIgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zID0gW1wiZVwiLCBcImVkXCIsIFwib1wiLCBcIm9wcHVyZVwiXTtcbi8qICdcblRhbGUnIGZyb20gJ3RhbGUgLi4uIHF1YWxlJy5cbidEYWxsJ2FsdHJhJyBmcm9tICdkYSB1bmEgcGFydGUuLi4gZGFsbCdhbHRyYScuXG5BbHJlYWR5IGluIG90aGVyIGxpc3RzOiB2dW9pLi4udnVvaSwgdGFudG8uLi5xdWFudG8sIHF1YW50by4uLnF1YW50bywgb3JhLi4ub3JhLCBub24gc29sby4uLm1hIGFuY2hlLCBzaWEuLi5zaWEsIG8uLi5vLFxucGnDuS4uLm1lbm8sIG7DqS4uLm7DqSwgYWx0cmV0dGFudG8uLi5jb3PDrCwgY29zw6wuLi5jb21lLlxuICovXG52YXIgY29ycmVsYXRpdmVDb25qdW5jdGlvbnMgPSBbXCJ0YWxlXCIsIFwibCd1bm9cIiwgXCJsJ2FsdHJvXCIsIFwidGFsaVwiLCBcImRhbGwnYWx0cmFcIl07XG4vKlxuQWxyZWFkeSBpbiBhbm90aGVyIGxpc3QgKHRyYW5zaXRpb24gd29yZHMsIGludGVycm9nYXRpdmUgYWR2ZXJicywgbnVtZXJhbHMsIHByZXBvc2l0aW9ucyk6XG5wZXJjaMOpLCBxdWFuZG8sIG1lbnRyZSwgYXBwZW5hIFtjaGVdLCBzZWJiZW5lLCBmaW5vLCBhZmZpbmNow6ksIGZpbmNow6ksIGRhdG8gW2NoZV0sIHZpc3RvIFtjaGVdLCBiZW5jaMOpLFxuY29tZSwgcHJpbWEgW2NoZV0sIGRvcG8sIHBlciwgc2VuemEgW2NoZV0sIGRpLCBzZW1wcmUsIG5vbm9zdGFudGUsIG1hbGdyYWRvLCBjb3PDrCBbY2hlXSwgaW4gbW9kby4uLmRhLFxudGFudG8uLi5kYSwgY29uLCBkb3ZlLCBxdWFudG8sIHBpw7kuLi5jaGUsIG1lbm8sIHBlZ2dpby4uLmNoZSwgbWVnbGlvLi4uZGksIHNlLCBjaGUsIGRpLCBhIG1lbm8gY2hlLCBzaWNjb21lLFxub2duaSB2b2x0YSBbY2hlXSwgYW5jaGUgc2UsIGNvc2ljY2jDqSwgaW52ZWNlLCBiZW5zw6wsIFthbF0gcHVudG8gW2NoZV0uXG4nTW9kbycgZnJvbSAnaW4gbW9kZ2lhY2Now6kgbyBjaGUnLlxuJ1ZvbHRhJyBmcm9tICd1bmEgdm9sdGEgY2hlLlxuRXhjbHVkZWQgYmVjYXVzZSBvZiBwcmltYXJ5IG1lYW5pbmc6IGRhbCBtb21lbnRvIGNoZSwgYWxsbyBzY29wbyBkaSwgYSBmdXJpYSBkaSAoJ2Z1cnknLCAnaGFzdGUnLCAncmFnZScpLFxuYSBmb3J6YSBkaSAoJ2ZvcmNlJyksIGEgY29uZGl6aW9uZSBjaGUgKCdjb25kaXRpb24nKS5cbiovXG52YXIgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucyA9IFtcImFuemljaMOpXCIsIFwiYW56aWNow6hcIiwgXCJmdW9yY2jDqVwiLCBcImZ1b3JjaMOoXCIsIFwiZ2lhY2Now6lcIiwgXCJnaWFjY2jDqFwiLCBcImxhZGRvdmVcIiwgXCJtb2RvXCIsIFwib3ZlXCIsIFwicXVhbG9yYVwiLCBcInF1YW50dW5xdWVcIiwgXCJ2b2x0YVwiXTtcbi8qXG5UaGVzZSB2ZXJicyBhcmUgZnJlcXVlbnRseSB1c2VkIGluIGludGVydmlld3MgdG8gaW5kaWNhdGUgcXVlc3Rpb25zIGFuZCBhbnN3ZXJzLlxuTm90IGluY2x1ZGVkOiAnbGVnZ2UnICgncmVhZHMnLCBidXQgYWxzbzogJ2xhdycpLCAnbGV0dG8nICgnKGhhcykgcmVhZCcsIGJ1dCBhbHNvOiBiZWQpLCAncHJlY2lzYScgKCdzdGF0ZXMnLCBidXQgYWxzbzogJ3ByZWNpc2UnKS5cbiAqL1xudmFyIGludGVydmlld1ZlcmJzID0gW1wiZGljZVwiLCBcImRpY29ub1wiLCBcImRpY2V2YVwiLCBcImRpY2V2YW5vXCIsIFwiZGlzc2VcIiwgXCJkaXNzZXJvXCIsIFwiZGV0dG9cIiwgXCJkb21hbmRhXCIsIFwiZG9tYW5kYW5vXCIsIFwiZG9tYW5kYXZhXCIsIFwiZG9tYW5kYXZhbm9cIiwgXCJkb21hbmTDslwiLCBcImRvbWFuZGFyb25vXCIsIFwiZG9tYW5kYXRvXCIsIFwiYWZmZXJtYVwiLCBcImFmZmVybWF0b1wiLCBcImFnZ2l1bmdlXCIsIFwiYWdnaXVudG9cIiwgXCJhbW1ldHRlXCIsIFwiYW1tZXNzb1wiLCBcImFubnVuY2lhXCIsIFwiYW5udW5jaWF0b1wiLCBcImFzc2ljdXJhXCIsIFwiYXNzaWN1cmF0b1wiLCBcImNoaWVkZVwiLCBcImNoaWVzdG9cIiwgXCJjb21tZW50YXRvXCIsIFwiY29uY2x1ZGVcIiwgXCJjb25jbHVzb1wiLCBcImNvbnRpbnVhXCIsIFwiY29udGludWF0b1wiLCBcImRlbnVuY2lhXCIsIFwiZGVudW5jaWF0b1wiLCBcImRpY2hpYXJhXCIsIFwiZGljaGlhcmF0b1wiLCBcImVzb3JkaXNjZVwiLCBcImVzb3JkaXRvXCIsIFwiaW5pemlhXCIsIFwiaW5pemlhdG9cIiwgXCJwcmVjaXNhdG9cIiwgXCJwcm9zZWd1ZVwiLCBcInByb3NlZ3VpdG9cIiwgXCJyYWNjb250YVwiLCBcInJhY2NvbnRhdG9cIiwgXCJyZWNpdGFcIiwgXCJyZWNpdGF0b1wiLCBcInJlcGxpY2FcIiwgXCJyZXBsaWNhdG9cIiwgXCJyaXNwb25kZVwiLCBcInJpc3Bvc3RvXCIsIFwicmltYXJjYVwiLCBcInJpbWFyY2F0b1wiLCBcInJpdmVsYVwiLCBcInJpdmVsYXRvXCIsIFwic2NhbmRpc2NlXCIsIFwic2NhbmRpdG9cIiwgXCJzY3JpdmVcIiwgXCJzY3JpdHRvXCIsIFwic2VnbmFsYVwiLCBcInNlZ25hbGF0b1wiLCBcInNvdHRvbGluZWFcIiwgXCJzb3R0b2xpbmVhdG9cIiwgXCJzcGllZ2FcIiwgXCJzcGllZ2F0b1wiXTtcbnZhciBpbnRlcnZpZXdWZXJic0luZmluaXRpdmUgPSBbXCJhZmZlcm1hcmVcIiwgXCJhZ2dpdW5nZXJlXCIsIFwiYW1tZXR0ZXJlXCIsIFwiYW5udW5jaWFyZVwiLCBcImFzc2ljdXJhcmVcIiwgXCJjaGllZGVyZVwiLCBcImNvbW1lbnRhcmVcIiwgXCJjb25jbHVkZXJlXCIsIFwiY29udGludWFyZVwiLCBcImRlbnVuY2lhcmVcIiwgXCJkaWNoaWFyYXJlXCIsIFwiZXNvcmRpcmVcIiwgXCJpbml6aWFyZVwiLCBcInByZWNpc2FyZVwiLCBcInByb3NlZ3VpcmVcIiwgXCJyYWNjb250YXJlXCIsIFwicmVjaXRhcmVcIiwgXCJyZXBsaWNhcmVcIiwgXCJyaXNwb25kZXJlXCIsIFwicmltYXJjYXJlXCIsIFwicml2ZWxhcmVcIiwgXCJzY2FuZGlyZVwiLCBcInNjcml2ZXJlXCIsIFwic2VnbmFsYXJlXCIsIFwic290dG9saW5lYXJlXCIsIFwic3BpZWdhcmVcIl07XG4vKlxuVGhlc2UgdHJhbnNpdGlvbiB3b3JkcyB3ZXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgbGlzdCBmb3IgdGhlIHRyYW5zaXRpb24gd29yZCBhc3Nlc3NtZW50IGZvciB2YXJpb3VzIHJlYXNvbnMuXG4nQXBwdW50bycgKCdqdXN0JywgJ2V4YWN0bHknKSBub3QgaW5jbHVkZWQgZm9yIHRoZSBzZWNvbmQgbWVhbmluZyBvZiAnbm90ZScuXG4qL1xudmFyIGFkZGl0aW9uYWxUcmFuc2l0aW9uV29yZHMgPSBbXCJldmVudHVhbG1lbnRlXCIsIFwiZm9yc2VcIiwgXCJtYWlcIiwgXCJwcm9iYWJpbG1lbnRlXCJdO1xudmFyIGludGVuc2lmaWVycyA9IFtcImFkZGlyaXR0dXJhXCIsIFwiYXNzb2x1dGFtZW50ZVwiLCBcImJlblwiLCBcImVzdHJlbWFtZW50ZVwiLCBcIm1pY2FcIiwgXCJuZW1tZW5vXCIsIFwicXVhc2lcIl07XG4vLyBUaGVzZSB2ZXJicyBjb252ZXkgbGl0dGxlIG1lYW5pbmcuXG52YXIgZGVsZXhpY2FsaXplZFZlcmJzID0gW1wiZmFcIiwgXCJmYSdcIiwgXCJmYWNjaWFcIiwgXCJmYWNjaWFtb1wiLCBcImZhY2NpYW5vXCIsIFwiZmFjY2lhdGVcIiwgXCJmYWNjaW9cIiwgXCJmYWNlbW1vXCIsIFwiZmFjZW5kb1wiLCBcImZhY2VudGVcIiwgXCJmYWNlc3NlXCIsIFwiZmFjZXNzZXJvXCIsIFwiZmFjZXNzaVwiLCBcImZhY2Vzc2ltb1wiLCBcImZhY2VzdGVcIiwgXCJmYWNlc3RpXCIsIFwiZmFjZXZhXCIsIFwiZmFjZXZhbW9cIiwgXCJmYWNldmFub1wiLCBcImZhY2V2YXRlXCIsIFwiZmFjZXZpXCIsIFwiZmFjZXZvXCIsIFwiZmFpXCIsIFwiZmFubm9cIiwgXCJmYXLDoFwiLCBcImZhcmFpXCIsIFwiZmFyYW5ub1wiLCBcImZhcmViYmVcIiwgXCJmYXJlYmJlcm9cIiwgXCJmYXJlaVwiLCBcImZhcmVtbW9cIiwgXCJmYXJlbW9cIiwgXCJmYXJlc3RlXCIsIFwiZmFyZXN0aVwiLCBcImZhcmV0ZVwiLCBcImZhcsOyXCIsIFwiZmF0ZVwiLCBcImZhdHRvXCIsIFwiZmVjZVwiLCBcImZlY2Vyb1wiLCBcImZlY2lcIiwgXCJmb1wiXTtcbnZhciBkZWxleGljYWxpemVkVmVyYnNJbmZpbml0aXZlID0gW1wiZmFyZVwiXTtcbi8qXG5UaGVzZSBhZGplY3RpdmVzIGFuZCBhZHZlcmJzIGFyZSBzbyBnZW5lcmFsLCB0aGV5IHNob3VsZCBuZXZlciBiZSBzdWdnZXN0ZWQgYXMgYSAoc2luZ2xlKSBrZXl3b3JkLlxuIEtleXdvcmQgY29tYmluYXRpb25zIGNvbnRhaW5pbmcgdGhlc2UgYWRqZWN0aXZlcy9hZHZlcmJzIGFyZSBmaW5lLlxuICovXG52YXIgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzID0gW1wiYW50ZXJpb3JlXCIsIFwiYW50ZXJpb3JpXCIsIFwicHJlY2VkZW50ZVwiLCBcInByZWNlZGVudGlcIiwgXCJmYWNpbGVcIiwgXCJmYWNpbGlcIiwgXCJmYWNpbGlzc2ltb1wiLCBcImZhY2lsaXNzaW1hXCIsIFwiZmFjaWxpc3NpbWlcIiwgXCJmYWNpbGlzc2ltZVwiLCBcInNlbXBsaWNlXCIsIFwic2VtcGxpY2lcIiwgXCJzZW1wbGljaXNzaW1hXCIsIFwic2VtcGxpY2lzc2ltb1wiLCBcInNlbXBsaWNpc3NpbWlcIiwgXCJzZW1wbGljaXNzaW1lXCIsIFwic2VtcGxpY2VtZW50ZVwiLCBcInJhcGlkb1wiLCBcInJhcGlkYVwiLCBcInJhcGlkaVwiLCBcInJhcGlkZVwiLCBcInZlbG9jZVwiLCBcInZlbG9jaVwiLCBcImRpZmZlcmVudGVcIiwgXCJkaWZmaWNpbGVcIiwgXCJkaWZmaWNpbGlcIiwgXCJkaWZmaWNpbGlzc2ltb1wiLCBcImRpZmZpY2lsaXNzaW1hXCIsIFwiZGlmZmljaWxpc3NpbWlcIiwgXCJkaWZmaWNpbGlzc2ltZVwiLCBcImJhc3NvXCIsIFwiYmFzc2FcIiwgXCJiYXNzaVwiLCBcImJhc3NlXCIsIFwiYWx0b1wiLCBcImFsdGFcIiwgXCJhbHRpXCIsIFwiYWx0ZVwiLCBcIm5vcm1hbGVcIiwgXCJub3JtYWxpXCIsIFwibm9ybWFsbWVudGVcIiwgXCJjb3J0b1wiLCBcImNvcnRhXCIsIFwiY29ydGlcIiwgXCJjb3J0ZVwiLCBcImJyZXZlXCIsIFwiYnJldmlcIiwgXCJyZWNlbnRlXCIsIFwicmVjZW50aVwiLCBcInRvdGFsZVwiLCBcInRvdGFsaVwiLCBcImNvbXBsZXRvXCIsIFwiY29tcGxldGFcIiwgXCJjb21wbGV0aVwiLCBcImNvbXBsZXRlXCIsIFwicG9zc2liaWxlXCIsIFwicG9zc2liaWxpXCIsIFwidWx0aW1vXCIsIFwidWx0aW1hXCIsIFwidWx0aW1pXCIsIFwidWx0aW1lXCIsIFwiZGlmZmVyZW50aVwiLCBcInNpbWlsZVwiLCBcInNpbWlsaVwiLCBcInByb3NzaW1vXCIsIFwicHJvc3NpbWFcIiwgXCJwcm9zc2ltaVwiLCBcInByb3NzaW1lXCIsIFwiZ2l1c3RvXCIsIFwiZ2l1c3RhXCIsIFwiZ2l1c3RpXCIsIFwiZ2l1c3RlXCIsIFwiZ2l1c3RhbWVudGVcIiwgXCJjb3NpZGRldHRvXCIsIFwiYmVuZVwiLCBcIm1lZ2xpb1wiLCBcImJlbmlzc2ltb1wiLCBcIm1hbGVcIiwgXCJwZWdnaW9cIiwgXCJtYWxpc3NpbW9cIiwgXCJjb211bmVtZW50ZVwiLCBcImNvbnN0YW50ZW1lbnRlXCIsIFwiZGlyZXR0YW1lbnRlXCIsIFwiZXNhdHRhbWVudGVcIiwgXCJmYWNpbG1lbnRlXCIsIFwiZ2VuZXJhbG1lbnRlXCIsIFwibGVnZ2VybWVudGVcIiwgXCJwZXJzb25hbG1lbnRlXCIsIFwicmVjZW50ZW1lbnRlXCIsIFwic2luY2VyYW1lbnRlXCIsIFwic29sYW1lbnRlXCIsIFwiYXZhbnRpXCIsIFwiaW5kaWV0cm9cIl07XG52YXIgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzUHJlY2VkaW5nID0gW1wibnVvdm9cIiwgXCJudW92YVwiLCBcIm51b3ZpXCIsIFwibnVvdmVcIiwgXCJ2ZWNjaGlvXCIsIFwidmVjY2hpYVwiLCBcInZlY2NoaVwiLCBcInZlY2NoaWVcIiwgXCJiZWxsb1wiLCBcImJlbGxhXCIsIFwiYmVsbGlcIiwgXCJiZWxsZVwiLCBcImJlbGxpc3NpbW9cIiwgXCJiZWxsaXNzaW1hXCIsIFwiYmVsbGlzc2ltaVwiLCBcImJlbGxpc3NpbWVcIiwgXCJidW9ub1wiLCBcImJ1b25hXCIsIFwiYnVvbmlcIiwgXCJidW9uZVwiLCBcImJ1b25pc3NpbW9cIiwgXCJidW9uaXNzaW1hXCIsIFwiYnVvbmlzc2ltaVwiLCBcImJ1b25pc3NpbWVcIiwgXCJncmFuZGVcIiwgXCJncmFuZGlcIiwgXCJncmFuZGlzc2ltb1wiLCBcImdyYW5kaXNzaW1hXCIsIFwiZ3JhbmRpc3NpbWlcIiwgXCJncmFuZGlzc2ltZVwiLCBcImx1bmdhXCIsIFwibHVuZ2hpXCIsIFwibHVuZ2hlXCIsIFwicGljY29sb1wiLCBcInBpY2NvbGFcIiwgXCJwaWNjb2xpXCIsIFwicGljY29sZVwiLCBcInBpY2NvbGlzc2ltb1wiLCBcInBpY2NvbGlzc2ltYVwiLCBcInBpY2NvbGlzc2ltaVwiLCBcInBpY2NvbGlzc2ltZVwiLCBcInByb3ByaW9cIiwgXCJwcm9wcmlhXCIsIFwicHJvcHJpXCIsIFwicHJvcHJpZVwiLCBcInNvbGl0b1wiLCBcInNvbGl0YVwiLCBcInNvbGl0aVwiLCBcInNvbGl0ZVwiLCBcInN0ZXNzb1wiLCBcInN0ZXNzYVwiLCBcInN0ZXNzaVwiLCBcInN0ZXNzZVwiXTtcbnZhciBpbnRlcmplY3Rpb25zID0gW1wiYWNjaWRlbnRpXCIsIFwiYWNjaWRlcmJhXCIsIFwiYWhcIiwgXCJhYWhcIiwgXCJhaGlcIiwgXCJhaGlhXCIsIFwiYWhpbcOpXCIsIFwiYmFoXCIsIFwiYmVoXCIsIFwiYm9oXCIsIFwiY2FcIiwgXCJjYXNwaXRhXCIsIFwiY2hpc3PDoFwiLCBcImRlJ1wiLCBcImRpYW1pbmVcIiwgXCJlY2NvXCIsIFwiZWhcIiwgXCJlaGlcIiwgXCJlZWhcIiwgXCJlaGlsw6BcIiwgXCJlaG1cIiwgXCJnbmFcIiwgXCJpaFwiLCBcIm1hZ2FyaVwiLCBcIm1hY2Now6lcIiwgXCJtYWNjaMOoXCIsIFwibWFoXCIsIFwibWhtXCIsIFwibmNhXCIsIFwibmVoXCIsIFwib2liw7JcIiwgXCJvaFwiLCBcIm9oZVwiLCBcIm9ow6lcIiwgXCJvaGlsw6FcIiwgXCJvaGliw7JcIiwgXCJvaGltw6lcIiwgXCJva2F5XCIsIFwib2tcIiwgXCJvbMOgXCIsIFwicG9oXCIsIFwicG90YVwiLCBcInB1YWhcIiwgXCJzb3Jib2xlXCIsIFwidG8nXCIsIFwidG9oXCIsIFwidHNcIiwgXCJ1ZmZcIiwgXCJ1ZmZhXCIsIFwidWhcIiwgXCJ1aGlcIl07XG4vLyBUaGVzZSB3b3JkcyBhbmQgYWJicmV2aWF0aW9ucyBhcmUgZnJlcXVlbnRseSB1c2VkIGluIHJlY2lwZXMgaW4gbGlzdHMgb2YgaW5ncmVkaWVudHMuXG52YXIgcmVjaXBlV29yZHMgPSBbXCJjY1wiLCBcImdcIiwgXCJoZ1wiLCBcImhsXCIsIFwia2dcIiwgXCJsXCIsIFwicHJzXCIsIFwicHpcIiwgXCJxLmIuXCIsIFwicWJcIiwgXCJ0YVwiLCBcInR6XCJdO1xudmFyIHRpbWVXb3JkcyA9IFtcIm1pbnV0b1wiLCBcIm1pbnV0aVwiLCBcIm9yYVwiLCBcIm9yZVwiLCBcImdpb3Jub1wiLCBcImdpb3JuaVwiLCBcImdpb3JuYXRhXCIsIFwiZ2lvcm5hdGVcIiwgXCJzZXR0aW1hbmFcIiwgXCJzZXR0aW1hbmVcIiwgXCJtZXNlXCIsIFwibWVzaVwiLCBcImFubm9cIiwgXCJhbm5pXCIsIFwib2dnaVwiLCBcImRvbWFuaVwiLCBcImllcmlcIiwgXCJzdGFtYXR0aW5hXCIsIFwic3Rhbm90dGVcIiwgXCJzdGFzZXJhXCIsIFwidGFyZGlcIl07XG4vLyBBbHJlYWR5IGluY2x1ZGVkIGluIG90aGVyIGxpc3RzLlxudmFyIHZhZ3VlTm91bnMgPSBbXCJhc3BldHRvXCIsIFwiYXNwZXR0aVwiLCBcImNhc29cIiwgXCJjYXNpXCIsIFwiY29zZVwiLCBcImlkZWFcIiwgXCJpZGVlXCIsIFwiaXN0YW56YVwiLCBcIm1hbmllcmFcIiwgXCJvZ2dldHRvXCIsIFwib2dnZXR0aVwiLCBcInBhcnRlXCIsIFwicGFydGlcIiwgXCJwZXJzb25hXCIsIFwicGVyc29uZVwiLCBcInBlenpvXCIsIFwicGV6emlcIiwgXCJwdW50b1wiLCBcInB1bnRpXCIsIFwic29ydGFcIiwgXCJzb3J0ZVwiLCBcInRlbWFcIiwgXCJ0ZW1pXCIsIFwidm9sdGVcIl07XG52YXIgbWlzY2VsbGFuZW91cyA9IFtcInPDrFwiLCBcIm5vXCIsIFwibm9uXCIsIFwi4oKsXCIsIFwiZXVyb1wiLCBcImV1cm9zXCIsIFwiZWNjXCIsIFwiZWNjZXRlcmFcIl07XG52YXIgdGl0bGVzUHJlY2VkaW5nID0gW1wic2lnLm5hXCIsIFwic2lnLnJhXCIsIFwic2lnXCIsIFwic2lnZ1wiLCBcImRyXCIsIFwiZHIuc3NhXCIsIFwiZG90dFwiLCBcImRvdHQuc3NhXCIsIFwicHJvZlwiLCBcInByb2Yuc3NhXCIsIFwiZ2VudFwiLCBcImdlbnQubW9cIiwgXCJnZW50Lm1pXCIsIFwiZ2VudC5tYVwiLCBcImdlbnQubWVcIiwgXCJlZ3JcIiwgXCJlZ3IuaVwiLCBcImVnci5pYVwiLCBcImVnci5pZVwiLCBcInByZWcubW9cIiwgXCJwcmVnLm1vXCIsIFwicHJlZy5tYVwiLCBcInByZWcubWVcIiwgXCJpbGxcIiwgXCJpbGwubW9cIiwgXCJpbGwubWlcIiwgXCJpbGwubWFcIiwgXCJpbGwubWVcIiwgXCJjYXZcIiwgXCJvblwiLCBcInNwZXR0XCJdO1xuLypcbiBFeHBvcnRzIGFsbCBmdW5jdGlvbiB3b3JkcyBjb25jYXRlbmF0ZWQsIGFuZCBzcGVjaWZpYyB3b3JkIGNhdGVnb3JpZXMgYW5kIGNhdGVnb3J5IGNvbWJpbmF0aW9uc1xuIHRvIGJlIHVzZWQgYXMgZmlsdGVycyBmb3IgdGhlIHByb21pbmVudCB3b3Jkcy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIHdvcmQgY29tYmluYXRpb25zLlxuICAgICAgICBmaWx0ZXJlZEF0QmVnaW5uaW5nOiBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMsXG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgYXQgdGhlIGVuZGluZyBvZiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBdEVuZGluZzogW10uY29uY2F0KG9yZGluYWxOdW1lcmFscywgaW50ZXJ2aWV3VmVyYnNJbmZpbml0aXZlLCBwYXNzaXZlQXV4aWxpYXJpZXNJbmZpbml0aXZlLCBvdGhlckF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgY29wdWxhSW5maW5pdGl2ZSwgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSwgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzUHJlY2VkaW5nKSxcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgb2Ygd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQXRCZWdpbm5pbmdBbmRFbmRpbmc6IFtdLmNvbmNhdChhcnRpY2xlcywgcHJlcG9zaXRpb25zLCBjb29yZGluYXRpbmdDb25qdW5jdGlvbnMsIGRlbW9uc3RyYXRpdmVQcm9ub3VucywgaW50ZW5zaWZpZXJzLCBxdWFudGlmaWVycywgcG9zc2Vzc2l2ZVByb25vdW5zKSxcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBldmVyeXdoZXJlIHdpdGhpbiB3b3JkIGNvbWJpbmF0aW9ucy5cbiAgICAgICAgZmlsdGVyZWRBbnl3aGVyZTogW10uY29uY2F0KHRyYW5zaXRpb25Xb3JkcywgcGVyc29uYWxQcm9ub3Vuc05vbWluYXRpdmUsIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlLCBwZXJzb25hbFByb25vdW5zUHJlcG9zaXRpb25hbCwgaW50ZXJqZWN0aW9ucywgY2FyZGluYWxOdW1lcmFscywgZmlsdGVyZWRQYXNzaXZlQXV4aWxpYXJpZXMsIG90aGVyQXV4aWxpYXJpZXMsIGNvcHVsYSwgaW50ZXJ2aWV3VmVyYnMsIGRlbGV4aWNhbGl6ZWRWZXJicywgaW5kZWZpbml0ZVByb25vdW5zLCBjb3JyZWxhdGl2ZUNvbmp1bmN0aW9ucywgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgaW50ZXJyb2dhdGl2ZURldGVybWluZXJzLCBpbnRlcnJvZ2F0aXZlUHJvbm91bnMsIGludGVycm9nYXRpdmVBZHZlcmJzLCBsb2NhdGl2ZUFkdmVyYnMsIG1pc2NlbGxhbmVvdXMsIHByb25vbWluYWxBZHZlcmJzLCByZWNpcGVXb3JkcywgdGltZVdvcmRzLCB2YWd1ZU5vdW5zKSxcbiAgICAgICAgLy8gVGhpcyBleHBvcnQgY29udGFpbnMgYWxsIG9mIHRoZSBhYm92ZSB3b3Jkcy5cbiAgICAgICAgYWxsOiBbXS5jb25jYXQoYXJ0aWNsZXMsIGNhcmRpbmFsTnVtZXJhbHMsIG9yZGluYWxOdW1lcmFscywgZGVtb25zdHJhdGl2ZVByb25vdW5zLCBwb3NzZXNzaXZlUHJvbm91bnMsIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlLCBwZXJzb25hbFByb25vdW5zQWNjdXNhdGl2ZSwgcGVyc29uYWxQcm9ub3Vuc1ByZXBvc2l0aW9uYWwsIHF1YW50aWZpZXJzLCBpbmRlZmluaXRlUHJvbm91bnMsIGludGVycm9nYXRpdmVQcm9ub3VucywgaW50ZXJyb2dhdGl2ZUFkdmVyYnMsIGludGVycm9nYXRpdmVEZXRlcm1pbmVycywgcHJvbm9taW5hbEFkdmVyYnMsIGxvY2F0aXZlQWR2ZXJicywgZmlsdGVyZWRQYXNzaXZlQXV4aWxpYXJpZXMsIHBhc3NpdmVBdXhpbGlhcmllc0luZmluaXRpdmUsIG90aGVyQXV4aWxpYXJpZXMsIG90aGVyQXV4aWxpYXJpZXNJbmZpbml0aXZlLCBjb3B1bGEsIGNvcHVsYUluZmluaXRpdmUsIHByZXBvc2l0aW9ucywgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBjb3JyZWxhdGl2ZUNvbmp1bmN0aW9ucywgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgaW50ZXJ2aWV3VmVyYnMsIGludGVydmlld1ZlcmJzSW5maW5pdGl2ZSwgdHJhbnNpdGlvbldvcmRzLCBhZGRpdGlvbmFsVHJhbnNpdGlvbldvcmRzLCBpbnRlbnNpZmllcnMsIGRlbGV4aWNhbGl6ZWRWZXJicywgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSwgaW50ZXJqZWN0aW9ucywgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzLCBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnNQcmVjZWRpbmcsIHJlY2lwZVdvcmRzLCB2YWd1ZU5vdW5zLCBtaXNjZWxsYW5lb3VzLCB0aW1lV29yZHMsIHRpdGxlc1ByZWNlZGluZylcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9uV29yZHMuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbldvcmRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQG1vZHVsZSBjb25maWcvdHJhbnNpdGlvbldvcmRzICovXG5cbnZhciBzaW5nbGVXb3JkcyA9IFtcImFiYmFzdGFuemFcIiwgXCJhY2Npb2NjaMOpXCIsIFwiYWNjaW9jY2jDqFwiLCBcImFkZXNzb1wiLCBcImFmZmluY2jDqVwiLCBcImFmZmluY2jDqFwiLCBcImFsbG9yYVwiLCBcImFsbWVub1wiLCBcImFscXVhbnRvXCIsIFwiYWx0cmV0dGFudG9cIiwgXCJhbHRyaW1lbnRpXCIsIFwiYW5hbG9nYW1lbnRlXCIsIFwiYW5jaGVcIiwgXCJhbmNvcmFcIiwgXCJhbnRlY2VkZW50ZW1lbnRlXCIsIFwiYW56aVwiLCBcImFueml0dXR0b1wiLCBcImFwZXJ0YW1lbnRlXCIsIFwiYXBwZW5hXCIsIFwiYXNzYWlcIiwgXCJhdHR1YWxtZW50ZVwiLCBcImJlbmNow6lcIiwgXCJiZW5jaMOoXCIsIFwiYmVuaW50ZXNvXCIsIFwiYmVuc8OsXCIsIFwiYnJldmVtZW50ZVwiLCBcImJydXNjYW1lbnRlXCIsIFwiY2Fzb21haVwiLCBcImNlbGVybWVudGVcIiwgXCJjZXJ0YW1lbnRlXCIsIFwiY2VydG9cIiwgXCJjaGlhcmFtZW50ZVwiLCBcImNpb25vbm9zdGFudGVcIiwgXCJjaW/DqVwiLCBcImNpb8OoXCIsIFwiY29tcGFyYWJpbG1lbnRlXCIsIFwiY29tZVwiLCBcImNvbXBsZXNzaXZhbWVudGVcIiwgXCJjb21wbGV0YW1lbnRlXCIsIFwiY29tdW5xdWVcIiwgXCJjb25jaXNhbWVudGVcIiwgXCJjb25jbHVkZW5kb1wiLCBcImNvbmZvcm1lbWVudGVcIiwgXCJjb25naXVudGFtZW50ZVwiLCBcImNvbnNlZ3VlbnRlbWVudGVcIiwgXCJjb25zaWRlcmFuZG9cIiwgXCJjb25zaWRlcmF0b1wiLCBcImNvbnNpZGVyZXZvbG1lbnRlXCIsIFwiY29udGVtcG9yYW5lYW1lbnRlXCIsIFwiY29udGludWFtZW50ZVwiLCBcImNvbnRyYXJpYW1lbnRlXCIsIFwiY29udHJvYmlsYW5jaWF0b1wiLCBcImNvc8OsXCIsIFwiY29zaWNjaMOpXCIsIFwiY29zaWNjaMOoXCIsIFwiZGFwcHJpbWFcIiwgXCJkYXRvXCIsIFwiZGF2dmVyb1wiLCBcImRlZmluaXRpdmFtZW50ZVwiLCBcImRldHRhZ2xpYXRhbWVudGVcIiwgXCJkaWZmZXJlbnRlbWVudGVcIiwgXCJkaXZlcnNhbWVudGVcIiwgXCJkb3BvXCIsIFwiZG9wb2RpY2jDqVwiLCBcImRvcG9kaWNow6hcIiwgXCJkdXJhbnRlXCIsIFwiZHVucXVlXCIsIFwiZWNjZXR0b1wiLCBcImVjY29tZVwiLCBcImVmZmV0dGl2YW1lbnRlXCIsIFwiZWd1YWxtZW50ZVwiLCBcImVsZW5jYW5kb1wiLCBcImVuZmF0aWNhbWVudGVcIiwgXCJlcHB1cmVcIiwgXCJlc2F1cmllbnRlbWVudGVcIiwgXCJlc3BsaWNpdGFtZW50ZVwiLCBcImVzcHJlc3NhbWVudGVcIiwgXCJlc3Rlc2FtZW50ZVwiLCBcImV2aWRlbnRlbWVudGVcIiwgXCJmaW5hbG1lbnRlXCIsIFwiZmluY2jDqVwiLCBcImZpbmNow6hcIiwgXCJmaW5vXCIsIFwiZmlub3JhXCIsIFwiZmludGFudG9cIiwgXCJmaW50YW50byBjaGVcIiwgXCJmaW50YW50b2Now6lcIiwgXCJmaW50YW50b2Now6hcIiwgXCJmb25kYW1lbnRhbG1lbnRlXCIsIFwiZnJhdHRhbnRvXCIsIFwiZnJlcXVlbnRlbWVudGVcIiwgXCJnZW5lcmFsbWVudGVcIiwgXCJnacOgXCIsIFwiZ3JhZHVhbG1lbnRlXCIsIFwiaWxsdXN0cmFuZG9cIiwgXCJpbW1hbnRpbmVudGVcIiwgXCJpbW1lZGlhdGFtZW50ZVwiLCBcImltcG9ydGFudGlzc2ltb1wiLCBcImluY29udGVzdGFiaWxtZW50ZVwiLCBcImluY3JlZGliaWxtZW50ZVwiLCBcImluZGlwZW5kZW50ZW1lbnRlXCIsIFwiaW5kaXNjdXRpYmlsbWVudGVcIiwgXCJpbmR1YmJpYW1lbnRlXCIsIFwiaW5mYXR0aVwiLCBcImluZmluZVwiLCBcImlubmFueml0dXR0b1wiLCBcImlubmVnYWJpbG1lbnRlXCIsIFwiaW5vbHRyZVwiLCBcImluc29tbWFcIiwgXCJpbnRhbnRvXCIsIFwiaW50ZXJhbWVudGVcIiwgXCJpc3RhbnRhbmVhbWVudGVcIiwgXCJpbnZlY2VcIiwgXCJsb2dpY2FtZW50ZVwiLCBcImxlbnRhbWVudGVcIiwgXCJtYVwiLCBcIm1hbGdyYWRvXCIsIFwibWFyY2F0YW1lbnRlXCIsIFwibWVtb3JhYmlsZVwiLCBcIm1lbnRyZVwiLCBcIm1vdGl2YXRhbWVudGVcIiwgXCJuYXR1cmFsbWVudGVcIiwgXCJuw6lcIiwgXCJuw6hcIiwgXCJuZWFuY2hlXCIsIFwibmVwcHVyZVwiLCBcIm5vbmNow6lcIiwgXCJub25jaMOoXCIsIFwibm9uZGltZW5vXCIsIFwibm9ub3N0YW50ZVwiLCBcIm5vdGV2b2xtZW50ZVwiLCBcIm9jY2FzaW9uYWxtZW50ZVwiLCBcIm9sdHJldHV0dG9cIiwgXCJvbmRlXCIsIFwib25lc3RhbWVudGVcIiwgXCJvc3NpYVwiLCBcIm9zdGluYXRhbWVudGVcIiwgXCJvdnZlcm9cIiwgXCJvdnZpYW1lbnRlXCIsIFwicGFyaW1lbnRpXCIsIFwicGFydGljb2xhcm1lbnRlXCIsIFwicGVyYWx0cm9cIiwgXCJwZXJjaMOpXCIsIFwicGVyY2jDqFwiLCBcInBlcmNpw7JcIiwgXCJwZXJsb21lbm9cIiwgXCJwZXLDslwiLCBcInBlcnRhbnRvXCIsIFwicGVzYW50ZW1lbnRlXCIsIFwicGl1dHRvc3RvXCIsIFwicG9pXCIsIFwicG9pY2jDqVwiLCBcInBvaWNow6hcIiwgXCJwcmF0aWNhbWVudGVcIiwgXCJwcmVjZWRlbnRlbWVudGVcIiwgXCJwcmVmZXJpYmlsbWVudGVcIiwgXCJwcmVjaXNhbWVudGVcIiwgXCJwcmVtYXR1cmFtZW50ZVwiLCBcInByZXN0b1wiLCBcInByaW1hXCIsIFwicHJpbWFyaWFtZW50ZVwiLCBcInByaW1vXCIsIFwicHJpbmNpcGFsbWVudGVcIiwgXCJwcm9udGFtZW50ZVwiLCBcInByb3Bvcnppb25hbG1lbnRlXCIsIFwicHVyZVwiLCBcInB1cmNow6lcIiwgXCJwdXJjaMOoXCIsIFwicXVhbmRvXCIsIFwicXVhbnRvXCIsIFwicXVhbnRvbWVub1wiLCBcInF1aW5kaVwiLCBcInJhcmFtZW50ZVwiLCBcInJlYWxtZW50ZVwiLCBcInJlbGF0aXZhbWVudGVcIiwgXCJyaWFzc3VtZW5kb1wiLCBcInJpZm9ybXVsYW5kb1wiLCBcInJpcGV0dXRhbWVudGVcIiwgXCJzYWx0dWFyaWFtZW50ZVwiLCBcInNjaGlldHRhbWVudGVcIiwgXCJzZWJiZW5lXCIsIFwic2Vjb25kYXJpYW1lbnRlXCIsIFwic2Vjb25kb1wiLCBcInNlbXByZVwiLCBcInNlbm7DslwiLCBcInNlZ3VlbnRlXCIsIFwic2Vuc2liaWxtZW50ZVwiLCBcInNlcHB1cmVcIiwgXCJzZXJpYW1lbnRlXCIsIFwic2ljY29tZVwiLCBcInNpY3VyYW1lbnRlXCIsIFwic2lnbmlmaWNhdGl2YW1lbnRlXCIsIFwic2ltaWxtZW50ZVwiLCBcInNpbXVsdGFuZWFtZW50ZVwiLCBcInNpbmdvbGFybWVudGVcIiwgXCJzaW50ZXRpY2FtZW50ZVwiLCBcInNvbGl0YW1lbnRlXCIsIFwic29sb1wiLCBcInNvbHRhbnRvXCIsIFwic29wcmF0dHV0dG9cIiwgXCJzb3ByYXZ2YWx1dGF0b1wiLCBcInNvcnByZW5kZW50ZW1lbnRlXCIsIFwic29zdGFuemlhbG1lbnRlXCIsIFwic290dG9saW5lYW5kb1wiLCBcInNvdHRvdmFsdXRhdG9cIiwgXCJzcGVjaWFsbWVudGVcIiwgXCJzcGVjaWZpY2FtZW50ZVwiLCBcInNwZWNpZmljYXRhbWVudGVcIiwgXCJzdWJpdGFtZW50ZVwiLCBcInN1Yml0b1wiLCBcInN1Y2Nlc3NpdmFtZW50ZVwiLCBcInN1Y2Nlc3Npdm9cIiwgXCJ0YWxtZW50ZVwiLCBcInRlcnpvXCIsIFwidG90YWxtZW50ZVwiLCBcInRyYW5uZVwiLCBcInR1dHRhdmlhXCIsIFwidWd1YWxtZW50ZVwiLCBcInVsdGVyaW9ybWVudGVcIiwgXCJ1bHRpbWFtZW50ZVwiLCBcInZlcmFtZW50ZVwiLCBcInZlcm9zaW1pbG1lbnRlXCIsIFwidmlzdG9cIl07XG52YXIgbXVsdGlwbGVXb3JkcyA9IFtcImEgYnJldmVcIiwgXCJhIGNhdXNhXCIsIFwiYSBjYXVzYSBkaVwiLCBcImEgY29uZGl6aW9uZSBjaGVcIiwgXCJhIGNvbnNlZ3VlbnphXCIsIFwiYSBjb250aSBmYXR0aVwiLCBcImEgZGlmZmVyZW56YSBkaVwiLCBcImEgZGlmZmVyZW56YSBkZWxcIiwgXCJhIGRpZmZlcmVuemEgZGVsbGFcIiwgXCJhIGRpZmZlcmVuemEgZGVpXCIsIFwiYSBkaWZmZXJlbnphIGRlZ2xpXCIsIFwiYSBkaWZmZXJlbnphIGRlbGxlXCIsIFwiYSBkaXJlIGlsIHZlcm9cIiwgXCJhIGRpcmUgbGEgdmVyaXTDoFwiLCBcImEgZGlybGEgdHV0dGFcIiwgXCJhIGRpc3BldHRvIGRpXCIsIFwiYSBsdW5nb1wiLCBcImEgbHVuZ28gdGVybWluZVwiLCBcImEgbWFnZ2lvciByYWdpb25lXCIsIFwiYSBtZW5vIGNoZSBub25cIiwgXCJhIHBhcnRlXCIsIFwiYSBwYXR0byBjaGVcIiwgXCJhIHByZXNjaW5kZXJlXCIsIFwiYSBwcmltYSB2aXN0YVwiLCBcImEgcHJvcG9zaXRvXCIsIFwiYSBxdWFsdW5xdWUgY29zdG9cIiwgXCJhIHF1YW50b1wiLCBcImEgcXVlbCBwcm9wb3NpdG9cIiwgXCJhIHF1ZWwgdGVtcG9cIiwgXCJhIHF1ZWxsJ2Vwb2NhXCIsIFwiYSBxdWVzdG8gZmluZVwiLCBcImEgcXVlc3RvIHByb3Bvc2l0b1wiLCBcImEgcXVlc3RvIHB1bnRvXCIsIFwiYSBxdWVzdG8gcmlndWFyZG9cIiwgXCJhIHF1ZXN0byBzY29wb1wiLCBcImEgcmlndWFyZG9cIiwgXCJhIHNlZ3VpcmVcIiwgXCJhIHNlZ3VpdG9cIiwgXCJhIHNvdHRvbGluZWFyZVwiLCBcImEgdGFsIGZpbmVcIiwgXCJhIHRhbCBwcm9wb3NpdG9cIiwgXCJhIHRlbXBvIGRlYml0b1wiLCBcImEgdHV0dGkgZ2xpIGVmZmV0dGlcIiwgXCJhIHR1dHRpIGkgY29zdGlcIiwgXCJhIHVuYSBwcmltYSBvY2NoaWF0YVwiLCBcImFkIGVjY2V6aW9uZSBkaVwiLCBcImFkIGVzZW1waW9cIiwgXCJhZCBlc3NlcmUgbWFsaXppb3NpXCIsIFwiYWQgZXNzZXJlIHNpbmNlcmlcIiwgXCJhZCBvZ25pIGJ1b24gY29udG9cIiwgXCJhZCBvZ25pIGNvc3RvXCIsIFwiYWQgb2duaSBtb2RvXCIsIFwiYWQgdW5hIHByaW1hIG9jY2hpYXRhXCIsIFwiYWRlc3NvIGNoZVwiLCBcImFsIGNoZVwiLCBcImFsIGNvbnRyYXJpb1wiLCBcImFsIGNvbnRyYXJpbyBkaVwiLCBcImFsIGZpbmUgZGlcIiwgXCJhbCBmaW5lIGRpIGZhcmVcIiwgXCJhbCBnaW9ybm8gZCdvZ2dpXCIsIFwiYWwgbW9tZW50b1wiLCBcImFsIG1vbWVudG8gZ2l1c3RvXCIsIFwiYWwgbW9tZW50byBvcHBvcnR1bm9cIiwgXCJhbCBwacO5IHByZXN0b1wiLCBcImFsIHBvc3RvIGRpXCIsIFwiYWwgc3VvIHBvc3RvXCIsIFwiYWwgdGVybWluZVwiLCBcImFsbCdlcG9jYVwiLCBcImFsbCdpbmZ1b3JpIGRpXCIsIFwiYWxsJ2luaXppb1wiLCBcImFsbCdvcHBvc3RvXCIsIFwiYWxsJ3VsdGltb1wiLCBcImFsbGEgZmluZVwiLCBcImFsbGEgZmluZSBkZWxsYSBmaWVyYVwiLCBcImFsbGEgbHVjZVwiLCBcImFsbGEgbHVjZSBkaVwiLCBcImFsbGEgbHVuZ2FcIiwgXCJhbGxhIG1vZGFcIiwgXCJhbGxhIHN0ZXNzYSBtYW5pZXJhXCIsIFwiYWxsbyBzY29wbyBkaVwiLCBcImFsbG8gc3Rlc3NvIG1vZG9cIiwgXCJhbGxvIHN0ZXNzbyB0ZW1wb1wiLCBcImFuY2gnZXNzb1wiLCBcImFuY2gnaW9cIiwgXCJhbmNoZSBzZVwiLCBcImFuY29yYSBwacO5XCIsIFwiYW5jb3JhIGRpIHBpw7lcIiwgXCJhc3N1bWVuZG8gY2hlXCIsIFwiYmlzb2duYSBjaGlhcmlyZSBjaGVcIiwgXCJiaXNvZ25hIGNvbnNpZGVyYXJlIGNoZVwiLCBcImNhdXNhdG8gZGFcIiwgXCJjacOyIG5vbmRpbWVub1wiLCBcImNpw7Igbm9ub3N0YW50ZVwiLCBcImNvbCB0ZW1wb1wiLCBcImNvbiBpbCB0ZW1wb1wiLCBcImNvbWUgYSBkaXJlXCIsIFwiY29tZSBhYmJpYW1vIGRpbW9zdHJhdG9cIiwgXCJjb21lIMOoIHN0YXRvIG5vdGF0b1wiLCBcImNvbWUgw6ggc3RhdG8gZGV0dG9cIiwgXCJjb21lIMOoIHN0YXRvIGRpbW9zdHJhdG9cIiwgXCJjb21lIGhhbm5vIGRldHRvXCIsIFwiY29tZSBobyBkZXR0b1wiLCBcImNvbWUgaG8gZGltb3N0cmF0b1wiLCBcImNvbWUgaG8gbm90YXRvXCIsIFwiY29tZSBwb3RldGUgbm90YXJlXCIsIFwiY29tZSBwb3RldGUgdmVkZXJlXCIsIFwiY29tZSBwdW9pIG5vdGFyZVwiLCBcImNvbWUgcHVvaSB2ZWRlcmVcIiwgXCJjb21lIHNpIMOoIGRpbW9zdHJhdG9cIiwgXCJjb21lIHNpIHB1w7IgdmVkZXJlXCIsIFwiY29tZSBzaSBwdcOyIG5vdGFyZVwiLCBcImNvbWUgc29wcmEgaW5kaWNhdG9cIiwgXCJjb211bnF1ZSBzaWFcIiwgXCJjb24gYXR0ZW56aW9uZVwiLCBcImNvbiBlbmZhc2lcIiwgXCJjb24gaWwgcmlzdWx0YXRvIGNoZVwiLCBcImNvbiBsJ29iaWV0dGl2byBkaVwiLCBcImNvbiBvc3RpbmF6aW9uZVwiLCBcImNvbiBxdWVzdGEgaW50ZW56aW9uZVwiLCBcImNvbiBxdWVzdGEgaWRlYVwiLCBcImNvbiBxdWVzdGUgaWRlZVwiLCBcImNvbiBxdWVzdG8gaW4gdGVzdGFcIiwgXCJjb24gcXVlc3RvIHNjb3BvXCIsIFwiY29zw6wgY2hlXCIsIFwiY29zw6wgZGFcIiwgXCJkJ2FsdHJhIHBhcnRlXCIsIFwiZCdhbHRybyBjYW50b1wiLCBcImQnYWx0cm8gbGF0b1wiLCBcImQnYWx0cm9uZGVcIiwgXCJkJ29yYSBpbiBhdmFudGlcIiwgXCJkJ29yYSBpbiBwb2lcIiwgXCJkYSBhbGxvcmFcIiwgXCJkYSBxdWFuZG9cIiwgXCJkYSBxdWFudG9cIiwgXCJkYSBxdWVsIG1vbWVudG9cIiwgXCJkYSBxdWVsbGEgdm9sdGFcIiwgXCJkYSBxdWVzdG8gbW9tZW50byBpbiBwb2lcIiwgXCJkYSBxdWVzdG8gbW9tZW50b1wiLCBcImRhIHF1aVwiLCBcImRhIHVsdGltb1wiLCBcImRhIHVuIGNlcnRvIHB1bnRvIGRpIHZpc3RhXCIsIFwiZGEgdW4gbGF0b1wiLCBcImRhIHVuYSBwYXJ0ZVwiLCBcImRhbGwnYWx0cm8gbGF0b1wiLCBcImRhbGwnZXBvY2FcIiwgXCJkYWwgY2hlXCIsIFwiZGF0byBjaGVcIiwgXCJkYXRvIHBlciBhc3N1bnRvIGNoZVwiLCBcImRhdmFudGkgYVwiLCBcImRlbCB0dXR0b1wiLCBcImRlbGwnZXBvY2FcIiwgXCJkZXR0byBxdWVzdG9cIiwgXCJkaSBjZXJ0b1wiLCBcImRpIGNvbHBvXCIsIFwiZGkgY29uc2VndWVuemFcIiwgXCJkaSBmYXR0b1wiLCBcImRpIGZyb250ZVwiLCBcImRpIGZyb250ZSBhXCIsIFwiZGkgbMOsIGEgcG9jb1wiLCBcImRpIHB1bnRvIGluIGJpYW5jb1wiLCBcImRpIHF1YW5kbyBpbiBxdWFuZG9cIiwgXCJkaSBxdWFudG8gbm9uIHNpYVwiLCBcImRpIHF1ZWwgdGVtcG9cIiwgXCJkaSBxdWkgYVwiLCBcImRpIHJhZG9cIiwgXCJkaSBzZWd1aXRvXCIsIFwiZGkgc2lcIiwgXCJkaSBzaWN1cm9cIiwgXCJkaSBzb2xpdG9cIiwgXCJkaSB0YW50byBpbiB0YW50b1wiLCBcImRpIHR1dHQnYWx0cmEgcGFzdGFcIiwgXCJkaSBxdWFuZG8gaW4gcXVhbmRvXCIsIFwiZGlmZmVyZW50ZSBkYVwiLCBcImRpdmVyc2FtZW50ZSBkYVwiLCBcImRpdmVyc28gZGFcIiwgXCJkb3BvdHV0dG9cIiwgXCJkb3Z1dG8gYVwiLCBcImUgYW5jaGVcIiwgXCJlIGlub2x0cmVcIiwgXCJlbnRybyBicmV2ZVwiLCBcImZlcm1vIHJlc3RhbmRvIGNoZVwiLCBcImZhY2NpYSBhIGZhY2NpYVwiLCBcImZpbiBkYVwiLCBcImZpbiBkYWxsJ2luaXppb1wiLCBcImZpbiBxdWFuZG9cIiwgXCJmaW5jaMOpIG5vblwiLCBcImZpbmNow6ggbm9uXCIsIFwiZmluIGRhbCBwcmltbyBtb21lbnRvXCIsIFwiZmluIGRhbGwnaW5pemlvXCIsIFwiZmlubyBhXCIsIFwiZmlubyBhIHF1ZXN0byBtb21lbnRvXCIsIFwiZmlubyBhZCBvZ2dpXCIsIFwiZmlubyBhaSBnaW9ybmkgbm9zdHJpXCIsIFwiZmlubyBhZGVzc29cIiwgXCJmaW5vIGEgdW4gY2VydG8gcHVudG9cIiwgXCJmaW5vIGFkZXNzb1wiLCBcImZyYSBxdWFudG9cIiwgXCJpbCBwcmltYSBwb3NzaWJpbGVcIiwgXCJpbiBhZ2dpdW50YVwiLCBcImluIGFsdHJlIHBhcm9sZVwiLCBcImluIGFsdHJpIHRlcm1pbmlcIiwgXCJpbiBhbWJvIGkgY2FzaVwiLCBcImluIGJyZXZlXCIsIFwiaW4gY2FzbyBkaVwiLCBcImluIGNvbmNsdXNpb25lXCIsIFwiaW4gY29uZm9ybWl0w6BcIiwgXCJpbiBjb25mcm9udG9cIiwgXCJpbiBjb25mcm9udG8gYVwiLCBcImluIGNvbnNlZ3VlbnphXCIsIFwiaW4gY29uc2lkZXJhemlvbmVcIiwgXCJpbiBjb25zaWRlcmF6aW9uZSBkaVwiLCBcImluIGRlZmluaXRpdmFcIiwgXCJpbiBkZXR0YWdsaW9cIiwgXCJpbXBvcnRhbnRlIHJlbmRlcnNpIGNvbnRvXCIsIFwiaW4gZWZmZXR0aVwiLCBcImluIGVudHJhbWJpIGkgY2FzaVwiLCBcImluIGZpbiBkZWkgY29udGlcIiwgXCJpbiBnZW5lcmFsZVwiLCBcImluIGdlbmVyZVwiLCBcImluIGxpbmVhIGRpIG1hc3NpbWFcIiwgXCJpbiBwb2NoZSBwYXJvbGVcIiwgXCJpbCBwacO5IHBvc3NpYmlsZVwiLCBcImluIG1hZ2dpb3IgcGFydGVcIiwgXCJpbiBtYW5pZXJhIGFuYWxvZ2FcIiwgXCJpbiBtYW5pZXJhIGNvbnZpbmNlbnRlXCIsIFwiaW4gbWFuaWVyYSBlc2F1cmllbnRlXCIsIFwiaW4gbWFuaWVyYSBlc2F1c3RpdmFcIiwgXCJpbiBtYW5pZXJhIGVzcGxpY2l0YVwiLCBcImluIG1hbmllcmEgZXZpZGVudGVcIiwgXCJpbiBtYW5pZXJhIGluY29udGVzdGFiaWxlXCIsIFwiaW4gbWFuaWVyYSBpbmRpc2N1dGliaWxlXCIsIFwiaW4gbWFuaWVyYSBpbm5lZ2FiaWxlXCIsIFwiaW4gbWFuaWVyYSBzaWduaWZpY2F0aXZhXCIsIFwiaW4gbWFuaWVyYSBzaW1pbGVcIiwgXCJpbiBtb2RvIGFsbHVzaXZvXCIsIFwiaW4gbW9kbyBhbmFsb2dvXCIsIFwiaW4gbW9kbyBjaGVcIiwgXCJpbiBtb2RvIGNvbnZpbmNlbnRlXCIsIFwiaW4gbW9kbyBkYVwiLCBcImluIG1vZG8gaWRlbnRpY29cIiwgXCJpbiBtb2RvIG5vdGV2b2xlXCIsIFwiaW4gbW9kbyBzaWduaWZpY2F0aXZvXCIsIFwiaW4gbW9kbyBzaWduaWZpY2F0aXZvXCIsIFwiaW4gbW9kbyBzaW1pbGVcIiwgXCJpbiBvZ25pIGNhc29cIiwgXCJpbiBvZ25pIG1vZG9cIiwgXCJpbiBvZ25pIG1vbWVudG9cIiwgXCJpbiBwYXJ0ZSBjb25zaWRlcmV2b2xlXCIsIFwiaW4gcGFydGkgdWd1YWxpXCIsIFwiaW4gcGFydGljb2xhcmVcIiwgXCJpbiBwYXJ0aWNvbGFyZSBwZXJcIiwgXCJpbiBwYXJ0aWNvbGFyZVwiLCBcImluIHBpw7lcIiwgXCJpbiBwcmF0aWNhXCIsIFwiaW4gcHJlY2VkZW56YVwiLCBcImluIHByaW1hIGJhdHR1dGFcIiwgXCJpbiBwcmltYSBpc3RhbnphXCIsIFwiaW4gcHJpbW8gbHVvZ29cIiwgXCJpbiByYXBwb3J0b1wiLCBcImluIHF1YWxjaGUgbW9kb1wiLCBcImluIHF1YWxzaWFzaSBtb2RvXCIsIFwiaW4gcXVhbHNpYXNpIG1vbWVudG9cIiwgXCJpbiBxdWFsdW5xdWUgbW9kb1wiLCBcImluIHF1YWx1bnF1ZSBtb21lbnRvXCIsIFwiaW4gcXVhcnRhIGJhdHR1dGFcIiwgXCJpbiBxdWFydGEgaXN0YW56YVwiLCBcImluIHF1YXJ0byBsdW9nb1wiLCBcImluIHF1ZWwgY2Fzb1wiLCBcImluIHF1ZWxsZSBjaXJjb3N0YW56ZVwiLCBcImluIHF1ZXN0YSBvY2Nhc2lvbmVcIiwgXCJpbiBxdWVzdGEgc2l0dWF6aW9uZVwiLCBcImluIHF1ZXN0byBjYXNvXCIsIFwiaW4gcXVlc3RvIGNhc28gcGFydGljb2xhcmVcIiwgXCJpbiBxdWVzdG8gaXN0YW50ZVwiLCBcImluIHF1ZXN0byBtb21lbnRvXCIsIFwiaW4gcmFyZSBvY2Nhc2lvbmlcIiwgXCJpbiByZWFsdMOgXCIsIFwiaW4gc2Vjb25kYSBiYXR0dXRhXCIsIFwiaW4gc2Vjb25kYSBpc3RhbnphXCIsIFwiaW4gc2Vjb25kbyBsdW9nb1wiLCBcImluIHNlZ3VpdG9cIiwgXCJpbiBzaW50ZXNpXCIsIFwiaW4gc29zdGFuemFcIiwgXCJpbiB0ZW1wb1wiLCBcImluIHRlcnphIGJhdHR1dGFcIiwgXCJpbiB0ZXJ6YSBpc3RhbnphXCIsIFwiaW4gdGVyem8gbHVvZ29cIiwgXCJpbiB0b3RhbGVcIiwgXCJpbiB0dXR0b1wiLCBcImluIHVndWFsIG1hbmllcmFcIiwgXCJpbiB1Z3VhbCBtaXN1cmFcIiwgXCJpbiB1Z3VhbCBtb2RvXCIsIFwiaW4gdWx0aW1hIGFuYWxpc2lcIiwgXCJpbiB1bHRpbWEgaXN0YW56YVwiLCBcImluIHVuIGFsdHJvIGNhc29cIiwgXCJpbiB1bmEgcGFyb2xhXCIsIFwiaW4gdmVyaXTDoFwiLCBcImluc2llbWUgYVwiLCBcImluc2llbWUgY29uXCIsIFwiaW52ZWNlIGNoZVwiLCBcImludmVjZSBkaVwiLCBcImxhIHByaW1hIGNvc2EgZGEgY29uc2lkZXJhcmVcIiwgXCJsYSBwcmltYSBjb3NhIGRhIHRlbmVyZSBhIG1lbnRlXCIsIFwibG8gc3Rlc3NvXCIsIFwibWVudHJlIHBvdHJlYmJlIGVzc2VyZSB2ZXJvXCIsIFwibW90aXZvIHBlciBjdWlcIiwgXCJtb3Rpdm8gcGVyIGlsIHF1YWxlXCIsIFwibmUgY29uc2VndWUgY2hlXCIsIFwibmUgZGVyaXZhIGNoZVwiLCBcIm5laSBkZXR0YWdsaVwiLCBcIm5lbCBjYXNvXCIsIFwibmVsIGNhc28gY2hlXCIsIFwibmVsIGNhc28gaW4gY3VpXCIsIFwibmVsIGNvbXBsZXNzb1wiLCBcIm5lbCBjb3JzbyBkZWxcIiwgXCJuZWwgY29yc28gZGlcIiwgXCJuZWwgZnJhdHRlbXBvXCIsIFwibmVsIGx1bmdvIHBlcmlvZG9cIiwgXCJuZWwgbWVudHJlXCIsIFwibmVsbCdldmVudHVhbGl0w6AgY2hlXCIsIFwibmVsbGEgbWlzdXJhIGluIGN1aVwiLCBcIm5lbGxhIHNwZXJhbnphIGNoZVwiLCBcIm5lbGxhIHN0ZXNzYSBtYW5pZXJhXCIsIFwibmVsbGEgc3Rlc3NhIG1pc3VyYVwiLCBcIm5lbGxvIHNwZWNpZmljb1wiLCBcIm5lbGxvIHN0ZXNzbyBtb2RvXCIsIFwibmVsbG8gc3Rlc3NvIG1vbWVudG9cIiwgXCJuZWxsbyBzdGVzc28gc3RpbGVcIiwgXCJub24gYXBwZW5hXCIsIFwibm9uIHBlciBlc3NlcmUgbWFsaXppb3NpXCIsIFwibm9uIHBpw7kgZGFcIiwgXCJub25vc3RhbnRlIGNpw7JcIiwgXCJub25vc3RhbnRlIHR1dHRvXCIsIFwib2duaSBxdWFsdm9sdGFcIiwgXCJvZ25pIHRhbnRvXCIsIFwib2duaSB2b2x0YVwiLCBcIm9sdHJlIGFcIiwgXCJvbHRyZSBhIGNpw7JcIiwgXCJvcmEgY2hlXCIsIFwicGFzc28gZG9wbyBwYXNzb1wiLCBcInBlciBjYXVzYSBkaVwiLCBcInBlciBjZXJ0b1wiLCBcInBlciBjaGlhcmV6emFcIiwgXCJwZXIgY2hpYXJpcmVcIiwgXCJwZXIgY29tZVwiLCBcInBlciBjb25jbHVkZXJlXCIsIFwicGVyIGNvbnRvIGRpXCIsIFwicGVyIGNvbnRyb1wiLCBcInBlciBjdWlcIiwgXCJwZXIgZGF2dmVyb1wiLCBcInBlciBkaSBwacO5XCIsIFwicGVyIGRpcmxhIGluIGFsdHJvIG1vZG9cIiwgXCJwZXIgZGlybGEgbWVnbGlvXCIsIFwicGVyIGRpcmxhIHR1dHRhXCIsIFwicGVyIGVzLlwiLCBcInBlciBlc2VtcGlvXCIsIFwicGVyIGVzc2VyZSBzaW5jZXJpXCIsIFwicGVyIGZhciB2ZWRlcmVcIiwgXCJwZXIgZmFybGEgYnJldmVcIiwgXCJwZXIgZmluaXJlXCIsIFwicGVyIGwnYXZ2ZW5pcmVcIiwgXCJwZXIgbCd1bHRpbWEgdm9sdGFcIiwgXCJwZXIgbGEgbWFnZ2lvciBwYXJ0ZVwiLCBcInBlciBsYSBzdGVzc2EgcmFnaW9uZVwiLCBcInBlciBsYSB2ZXJpdMOgXCIsIFwicGVyIGxvIHBpw7lcIiwgXCJwZXIgbWV0dGVyZSBpbiBsdWNlXCIsIFwicGVyIG1ldHRlcmxhIGluIGFsdHJvIG1vZG9cIiwgXCJwZXIgbm9uIGRpcmUgZGlcIiwgXCJwZXIgbm9uIHBhcmxhcmUgZGlcIiwgXCJwZXIgb3JhXCIsIFwicGVyIG92dmkgbW90aXZpXCIsIFwicGVyIHBhdXJhIGRpXCIsIFwicGVyIHBhdXJhIGRlaVwiLCBcInBlciBwYXVyYSBkZWxsZVwiLCBcInBlciBwYXVyYSBkZWdsaVwiLCBcInBlciBwcmltYSBjb3NhXCIsIFwicGVyIHF1YW50b1wiLCBcInBlciBxdWVzdGEgcmFnaW9uZVwiLCBcInBlciBxdWVzdG8gbW90aXZvXCIsIFwicGVyIHJpYXNzdW1lcmVcIiwgXCJwZXIgc290dG9saW5lYXJlXCIsIFwicGVyIHRpbW9yZVwiLCBcInBlciB0cmFycmUgbGUgY29uY2x1c2lvbmlcIiwgXCJwZXIgdWx0aW1hXCIsIFwicGVyIHVsdGltZVwiLCBcInBlciB1bHRpbWlcIiwgXCJwZXIgdWx0aW1vXCIsIFwicGVyIHZpYSBkaVwiLCBcInBlcmNow6kgc2lcIiwgXCJwZXJjaMOoIHNpXCIsIFwicGVyZmlubyBzZVwiLCBcInBpYW5vIHBpYW5vXCIsIFwicGnDuSBkaSBvZ25pIGFsdHJhIGNvc2FcIiwgXCJwacO5IGRpIHR1dHRvXCIsIFwicGnDuSBmYWNpbG1lbnRlXCIsIFwicGnDuSBpbXBvcnRhbnRlXCIsIFwicGnDuSB0YXJkaVwiLCBcInBvY28gYSBwb2NvXCIsIFwicG9jbyBkb3BvXCIsIFwicHJlbmRpYW1vIGlsIGNhc28gZGlcIiwgXCJwcmVzdG8gbyB0YXJkaVwiLCBcInByaW1hIGNoZVwiLCBcInByaW1hIGRpXCIsIFwicHJpbWEgZGkgb2duaSBjb3NhXCIsIFwicHJpbWEgZGkgdHV0dG9cIiwgXCJwcmltYSBvIGRvcG9cIiwgXCJwcmltYSBvIHBvaVwiLCBcInF1ZXN0byDDqCBwcm9iYWJpbG1lbnRlIHZlcm9cIiwgXCJxdWVzdG8gcG90cmViYmUgZXNzZXJlIHZlcm9cIiwgXCJyZXN0YW5kbyBpbnRlc28gY2hlXCIsIFwicmlhc3N1bWVuZG9cIiwgXCJxdWFudG8gcHJpbWFcIiwgXCJxdWVzdGEgdm9sdGFcIiwgXCJzZSBjb25mcm9udGF0byBjb25cIiwgXCJzZSBlIHNvbG8gc2VcIiwgXCJzZSBub1wiLCBcInNlZHV0YSBzdGFudGVcIiwgXCJzZW1wcmVjaMOpXCIsIFwic2VtcHJlY2jDqFwiLCBcInNlbXByZSBjaGVcIiwgXCJzZW56J2FsdHJvXCIsIFwic2VuemEgYWxjdW4gcmlndWFyZG9cIiwgXCJzZW56YSBkdWJiaW9cIiwgXCJzZW56J29tYnJhIGRpIGR1YmJpb1wiLCBcInNlbnphIG9tYnJhIGRpIGR1YmJpb1wiLCBcInNlbnphIHJpZ3VhcmRvIHBlclwiLCBcInNlbnphIHRyZWd1YVwiLCBcInNlbnphIHVsdGVyaW9yZSByaXRhcmRvXCIsIFwic2lhIHF1ZWwgY2hlIHNpYVwiLCBcInNvbG8gc2VcIiwgXCJzb3R0byBxdWVzdGEgbHVjZVwiLCBcInNwZXJhbmRvIGNoZVwiLCBcInN0YSB2b2x0YVwiLCBcInN1IHR1dHRvXCIsIFwic3ViaXRvIGRvcG9cIiwgXCJzdWwgc2VyaW9cIiwgXCJ0YW50byBwZXIgY29taW5jaWFyZVwiLCBcInRhbnRvIHF1YW50b1wiLCBcInRyYSBicmV2ZVwiLCBcInRyYSBsJ2FsdHJvXCIsIFwidHJhIHBvY29cIiwgXCJ0cmEgcXVhbnRvXCIsIFwidHV0dGUgbGUgdm9sdGVcIiwgXCJ0dXR0aSBpbnNpZW1lXCIsIFwidHV0dG8gYSB1biB0cmF0dG9cIiwgXCJ0dXR0byBhZCB1biB0cmF0dG9cIiwgXCJ0dXR0byBkJ3VuIHRyYXR0b1wiLCBcInR1dHRvIGNvbnNpZGVyYXRvXCIsIFwidHV0dG8gc29tbWF0b1wiLCBcInVuIHBhc3NvIGFsbGEgdm9sdGFcIiwgXCJ1biB0ZW1wb1wiLCBcInVuYSB2b2x0YVwiLCBcInVuYSB2b2x0YSBvZ25pIHRhbnRvXCIsIFwidW5pdG8gYVwiLCBcInZhIGNoaWFyaXRvIGNoZVwiLCBcInZhIGNvbnNpZGVyYXRvIGNoZVwiLCBcInZhZGEgY29tZSB2YWRhXCIsIFwidmFsZSBhIGRpcmVcIiwgXCJ2aXN0byBjaGVcIl07XG4vKipcbiAqIFJldHVybnMgbGlzdHMgd2l0aCB0cmFuc2l0aW9uIHdvcmRzIHRvIGJlIHVzZWQgYnkgdGhlIGFzc2Vzc21lbnRzLlxuICogQHJldHVybnMge09iamVjdH0gVGhlIG9iamVjdCB3aXRoIHRyYW5zaXRpb24gd29yZCBsaXN0cy5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2luZ2xlV29yZHM6IHNpbmdsZVdvcmRzLFxuICAgICAgICBtdWx0aXBsZVdvcmRzOiBtdWx0aXBsZVdvcmRzLFxuICAgICAgICBhbGxXb3Jkczogc2luZ2xlV29yZHMuY29uY2F0KG11bHRpcGxlV29yZHMpXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uV29yZHMuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2l0aW9uV29yZHMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHRyYW5zaXRpb25Xb3JkcyA9IHJlcXVpcmUoXCIuL3RyYW5zaXRpb25Xb3Jkcy5qc1wiKSgpLnNpbmdsZVdvcmRzO1xuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggZXhjZXB0aW9ucyBmb3IgdGhlIHByb21pbmVudCB3b3JkcyByZXNlYXJjaGVyXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBhcnJheSBmaWxsZWQgd2l0aCBleGNlcHRpb25zLlxuICovXG52YXIgYXJ0aWNsZXMgPSBbXCJlbFwiLCBcImxhXCIsIFwibG9zXCIsIFwibGFzXCIsIFwidW5cIiwgXCJ1bmFcIiwgXCJ1bm9zXCIsIFwidW5hc1wiXTtcbi8vIFwiVW5vXCIgaXMgYWxyZWFkeSBpbmNsdWRlZCBpbiB0aGUgYXJ0aWNsZXMuXG52YXIgY2FyZGluYWxOdW1lcmFscyA9IFtcImRvc1wiLCBcInRyZXNcIiwgXCJjdWF0cm9cIiwgXCJjaW5jb1wiLCBcInNlaXNcIiwgXCJzaWV0ZVwiLCBcIm9jaG9cIiwgXCJudWV2ZVwiLCBcImRpZXpcIiwgXCJvbmNlXCIsIFwiZG9jZVwiLCBcInRyZWNlXCIsIFwiY2F0b3JjZVwiLCBcInF1aW5jZVwiLCBcImRpZWNpc2Vpc1wiLCBcImRpZWNpc2lldGVcIiwgXCJkaWVjaW9jaG9cIiwgXCJkaWVjaW51ZXZlXCIsIFwidmVpbnRlXCIsIFwiY2llblwiLCBcImNlbnRlbmFcIiwgXCJtaWxcIiwgXCJtaWxsb25cIiwgXCJtaWxsb25lc1wiXTtcbnZhciBvcmRpbmFsTnVtZXJhbHMgPSBbXCJwcmltZXJhXCIsIFwic2VndW5kYVwiLCBcInRlcmNlcmFcIiwgXCJjdWFydG9cIiwgXCJjdWFydGFcIiwgXCJxdWludG9cIiwgXCJxdWludGFcIiwgXCJzZXh0b1wiLCBcInNleHRhXCIsIFwic2VwdGltb1wiLCBcInNlcHRpbWFcIiwgXCJvY3Rhdm9cIiwgXCJvY3RhdmFcIiwgXCJub3Zlbm9cIiwgXCJub3ZlbmFcIiwgXCJkw6ljaW1vXCIsIFwiZMOpY2ltYVwiLCBcInZpZ8Opc2ltb1wiLCBcInZpZ8Opc2ltYVwiLCBcInByaW1lcm9zXCIsIFwicHJpbWVyYXNcIiwgXCJzZWd1bmRvc1wiLCBcInNlZ3VuZGFzXCIsIFwidGVyY2Vyb3NcIiwgXCJ0ZXJjZXJhc1wiLCBcImN1YXJ0b3NcIiwgXCJjdWFydGFzXCIsIFwicXVpbnRvc1wiLCBcInF1aW50YXNcIiwgXCJzZXh0b3NcIiwgXCJzZXh0YXNcIiwgXCJzZXB0aW1vc1wiLCBcInNlcHRpbWFzXCIsIFwib2N0YXZvc1wiLCBcIm9jdGF2YXNcIiwgXCJub3Zlbm9zXCIsIFwibm92ZW5hc1wiLCBcImTDqWNpbW9zXCIsIFwiZMOpY2ltYXNcIiwgXCJ2aWfDqXNpbW9zXCIsIFwidmlnw6lzaW1hc1wiXTtcbnZhciBwZXJzb25hbFByb25vdW5zTm9taW5hdGl2ZSA9IFtcInlvXCIsIFwidMO6XCIsIFwiw6lsXCIsIFwiZWxsYVwiLCBcImVsbG9cIiwgXCJub3NvdHJvc1wiLCBcIm5vc290cmFzXCIsIFwidm9zb3Ryb3NcIiwgXCJ2b3NvdHJhc1wiLCBcInVzdGVkZXNcIiwgXCJlbGxvc1wiLCBcImVsbGFzXCJdO1xudmFyIHBlcnNvbmFsUHJvbm91bnNBY2N1c2F0aXZlID0gW1wibWVcIiwgXCJ0ZVwiLCBcImxvXCIsIFwic2VcIiwgXCJub3NcIiwgXCJvc1wiLCBcImxlc1wiXTtcbnZhciBwZXJzb25hbFByb25vdW5zUHJlcG9zaXRpb25hbCA9IFtcIm3DrVwiLCBcInRpXCIsIFwidWRcIiwgXCJ1ZHNcIiwgXCJ1c3RlZFwiLCBcInPDrVwiXTtcbnZhciBwZXJzb25hbFByb25vdW5zQ29taXRhdGl2ZSA9IFtcImNvbm1pZ29cIiwgXCJjb250aWdvXCIsIFwiY29uc2lnb1wiXTtcbnZhciBkZW1vbnN0cmF0aXZlUHJvbm91bnMgPSBbXCJlc3RlXCIsIFwiZXNlXCIsIFwiYXF1ZWxcIiwgXCJlc3RhXCIsIFwiZXNhXCIsIFwiYXF1ZWxsYVwiLCBcImVzdG9zXCIsIFwiZXNvc1wiLCBcImFxdWVsbG9zXCIsIFwiZXN0YXNcIiwgXCJlc2FzXCIsIFwiYXF1ZWxsYXNcIiwgXCJlc3RvXCIsIFwiZXNvXCIsIFwiYXF1ZWxsb1wiXTtcbnZhciBwb3NzZXNzaXZlUHJvbm91bnMgPSBbXCJtaVwiLCBcIm1pc1wiLCBcIm3DrW9cIiwgXCJtw61vc1wiLCBcIm3DrWFcIiwgXCJtw61hc1wiLCBcIm51ZXN0cm9cIiwgXCJudWVzdHJvc1wiLCBcIm51ZXN0cmFcIiwgXCJudWVzdHJhc1wiLCBcInR1eW9cIiwgXCJ0dXlvc1wiLCBcInR1eWFcIiwgXCJ0dXlhc1wiLCBcInR1XCIsIFwidHVzXCIsIFwidnVlc3Ryb1wiLCBcInZ1ZXN0cm9zXCIsIFwidnVlc3RyYVwiLCBcInZ1ZXN0cmFzXCIsIFwic3V5b1wiLCBcInN1eW9zXCIsIFwic3V5YVwiLCBcInN1eWFzXCIsIFwic3VcIiwgXCJzdXNcIl07XG52YXIgcXVhbnRpZmllcnMgPSBbXCJiYXN0YW50ZVwiLCBcImJhc3RhbnRlc1wiLCBcIm11Y2hvXCIsIFwibXVjaGFzXCIsIFwibXVjaGFcIiwgXCJtdWNob3NcIiwgXCJkZW1hc2lhZG9cIiwgXCJkZW1hc2lhZGFcIiwgXCJkZW1hc2lhZG9zXCIsIFwiZGVtYXNpYWRhc1wiLCBcInBvY29cIiwgXCJwb2NhXCIsIFwicG9jb3NcIiwgXCJwb2Nhc1wiLCBcImRlbcOhc1wiLCBcIm90cm9zXCIsIFwib3RyYXNcIiwgXCJ0b2RvXCIsIFwidG9kYVwiLCBcInRvZG9zXCIsIFwidG9kYXNcIl07XG52YXIgaW5kZWZpbml0ZVByb25vdW5zID0gW1wiYWxndWllblwiLCBcImFsZ29cIiwgXCJhbGfDum5cIiwgXCJhbGd1bm9cIiwgXCJhbGd1bmFcIiwgXCJhbGd1bm9zXCIsIFwiYWxndW5hc1wiLCBcIm5hZGllXCIsIFwibmFkYVwiLCBcIm5pbmfDum5cIiwgXCJuaW5ndW5vXCIsIFwibmluZ3VuYVwiLCBcIm5pbmd1bm9zXCIsIFwibmluZ3VuYXNcIiwgXCJ0YW50b1wiLCBcInRhbnRvc1wiLCBcInRhbnRhXCIsIFwidGFudGFzXCJdO1xudmFyIGludGVycm9nYXRpdmVEZXRlcm1pbmVycyA9IFtcImN1eWFzXCIsIFwiY3VhbFwiXTtcbnZhciBpbnRlcnJvZ2F0aXZlUHJvbm91bnMgPSBbXCJjdXlvXCJdO1xuLypcbidRdcOpJyBpcyBwYXJ0IG9mICdwb3IgcXXDqScgKCd3aHknKS4gVGhlIGNvbWJpbmF0aW9uICdxdWllbiBzZWEnICgnd2hvZXZlcicpIGlzIHNlcGFyYXRlZCBpbnRvIHR3byBlbnRyaWVzOiAncXVpZW4nIGFuZCAnc2VhJy5cbidxdWlyYScgaXMgcGFydCBvZiAnY3VhbmRvIHF1aWVyYScgKCd3aGVuZXZlcicpLlxuICovXG52YXIgaW50ZXJyb2dhdGl2ZVByb0FkdmVyYnMgPSBbXCJjb21vcXVpZXJhXCIsIFwiY3VhbGVzcXVpZXJhXCIsIFwiY3VhbHF1aWVyXCIsIFwiY3VhbnRhXCIsIFwiY3VhbnRhc1wiLCBcImN1YW50b1wiLCBcImN1YW50b3NcIiwgXCJjdcOhbFwiLCBcImN1w6FsZXNcIiwgXCJjdcOhbnRhXCIsIFwiY3XDoW50YXNcIiwgXCJjdcOhbnRvXCIsIFwiY3XDoW50b3NcIiwgXCJjw7Ntb1wiLCBcImRvbmRlcXVpZXJhXCIsIFwiZMOzbmRlXCIsIFwicXVpZW5cIiwgXCJxdWllbmVzXCIsIFwicXVpZW5xdWllcmFcIiwgXCJxdWnDqW5cIiwgXCJxdWnDqW5lc1wiLCBcInF1w6lcIl07XG52YXIgbG9jYXRpdmVBZHZlcmJzID0gW1wiYWxsw61cIiwgXCJhaMOtXCIsIFwiYWxsw6FcIiwgXCJhcXXDrVwiLCBcImFjw6FcIiwgXCJhZMOzbmRlXCIsIFwiZGVsYW50ZVwiLCBcImRldHLDoXNcIiwgXCJkZWJham9cIiwgXCJhZGVsYW50ZVwiLCBcImF0csOhc1wiLCBcImFkZW50cm9cIiwgXCJhZnVlcmFcIl07XG52YXIgb3RoZXJBdXhpbGlhcmllcyA9IFtcImhlXCIsIFwiaGFzXCIsIFwiaGFcIiwgXCJoYXlcIiwgXCJoZW1vc1wiLCBcImhhYsOpaXNcIiwgXCJoYW5cIiwgXCJodWJlXCIsIFwiaHViaXN0ZVwiLCBcImh1Ym9cIiwgXCJodWJpbW9zXCIsIFwiaHViaXN0ZWlzXCIsIFwiaHViaWVyb25cIiwgXCJoYWLDrWFcIiwgXCJoYWLDrWFzXCIsIFwiaGFiw61hbW9zXCIsIFwiaGFiw61haXNcIiwgXCJoYWLDrWFuXCIsIFwiaGFicsOtYVwiLCBcImhhYnLDrWFzXCIsIFwiaGFicsOtYWlzXCIsIFwiaGFicsOtYW5cIiwgXCJoYWJyw6lcIiwgXCJoYWJyw6FzXCIsIFwiaGFicsOhXCIsIFwiaGFicmVtb3NcIiwgXCJoYWJyw6lpc1wiLCBcImhhYnLDoW5cIiwgXCJoYXlhXCIsIFwiaGF5YXNcIiwgXCJoYXlhbW9zXCIsIFwiaGF5w6Fpc1wiLCBcImhheWFuXCIsIFwiaHViaWVyYVwiLCBcImh1YmllcmFzXCIsIFwiaHViacOpcmFtb3NcIiwgXCJodWJpZXJhaXNcIiwgXCJodWJpZXJhblwiLCBcImh1Ymllc2VcIiwgXCJodWJpZXNlc1wiLCBcImh1YmnDqXNlbW9zXCIsIFwiaHViaWVzZWlzXCIsIFwiaHViaWVzZW5cIiwgXCJodWJpZXJlXCIsIFwiaHViaWVyZXNcIiwgXCJodWJpw6lyZW1vc1wiLCBcImh1YmllcmVpc1wiLCBcImh1YmllcmVuXCIsIFwiaGFiZWRcIiwgXCJoYWJpZG9cIiwgXCJkZWJvXCIsIFwiZGViZXNcIiwgXCJkZWJlXCIsIFwiZGViZW1vc1wiLCBcImRlYsOpaXNcIiwgXCJkZWJlblwiLCBcImRlYsOtXCIsIFwiZGViaXN0ZVwiLCBcImRlYmnDs1wiLCBcImRlYmltb3NcIiwgXCJkZWJpc3RlaXNcIiwgXCJkZWJpZXJvblwiLCBcImRlYsOtYVwiLCBcImRlYsOtYXNcIiwgXCJkZWLDrWFtb3NcIiwgXCJkZWLDrWFpc1wiLCBcImRlYsOtYW5cIiwgXCJkZWJlcsOtYVwiLCBcImRlYmVyw61hc1wiLCBcImRlYmVyw61hbW9zXCIsIFwiZGViZXLDrWFpc1wiLCBcImRlYmVyw61hblwiLCBcImRlYmVyw6lcIiwgXCJkZWJlcsOhc1wiLCBcImRlYmVyw6FcIiwgXCJkZWJlcmVtb3NcIiwgXCJkZWJlcsOpaXNcIiwgXCJkZWJlcsOhblwiLCBcImRlYmFcIiwgXCJkZWJhc1wiLCBcImRlYmFtb3NcIiwgXCJkZWLDoWlzXCIsIFwiZGViYW5cIiwgXCJkZWJpZXJhXCIsIFwiZGViaWVyYXNcIiwgXCJkZWJpw6lyYW1vc1wiLCBcImRlYmllcmFpc1wiLCBcImRlYmllcmFuXCIsIFwiZGViaWVzZVwiLCBcImRlYmllc2VzXCIsIFwiZGViacOpc2Vtb3NcIiwgXCJkZWJpZXNlaXNcIiwgXCJkZWJpZXNlblwiLCBcImRlYmllcmVcIiwgXCJkZWJpZXJlc1wiLCBcImRlYmnDqXJlbW9zXCIsIFwiZGViaWVyZWlzXCIsIFwiZGViaWVyZW5cIiwgXCJkZWJlZFwiLCBcImRlYmlkb1wiLCBcImVtcGllem9cIiwgXCJlbXBpZXphc1wiLCBcImVtcGllemFcIiwgXCJlbXBlesOhaXNcIiwgXCJlbXBpZXphblwiLCBcImVtcGVjw6lcIiwgXCJlbXBlemFzdGVcIiwgXCJlbXBlesOzXCIsIFwiZW1wZXphbW9zXCIsIFwiZW1wZXphc3RlaXNcIiwgXCJlbXBlemFyb25cIiwgXCJlbXBlemFiYVwiLCBcImVtcGV6YWJhc1wiLCBcImVtcGV6w6FiYW1vc1wiLCBcImVtcGV6YWJhaXNcIiwgXCJlbXBlemFiYW5cIiwgXCJlbXBlemFyw61hXCIsIFwiZW1wZXphcsOtYXNcIiwgXCJlbXBlemFyw61hbW9zXCIsIFwiZW1wZXphcsOtYWlzXCIsIFwiZW1wZXphcsOtYW5cIiwgXCJlbXBlemFyw6lcIiwgXCJlbXBlemFyw6FzXCIsIFwiZW1wZXphcsOhXCIsIFwiZW1wZXphcmVtb3NcIiwgXCJlbXBlemFyw6lpc1wiLCBcImVtcGV6YXLDoW5cIiwgXCJlbXBpZWNlXCIsIFwiZW1waWVjZXNcIiwgXCJlbXBlY2Vtb3NcIiwgXCJlbXBlY8OpaXNcIiwgXCJlbXBpZWNlblwiLCBcImVtcGV6YXJhXCIsIFwiZW1wZXphcmFzXCIsIFwiZW1wZXrDoXJhbW9zXCIsIFwiZW1wZXphcmFpc1wiLCBcImVtcGV6YXJhblwiLCBcImVtcGV6YXNlXCIsIFwiZW1wZXphc2VzXCIsIFwiZW1wZXrDoXNlbW9zXCIsIFwiZW1wZXphc2Vpc1wiLCBcImVtcGV6YXNlblwiLCBcImVtcGV6YXJlXCIsIFwiZW1wZXphcmVzXCIsIFwiZW1wZXrDoXJlbW9zXCIsIFwiZW1wZXphcmVpc1wiLCBcImVtcGV6YXJlblwiLCBcImVtcGV6YWRcIiwgXCJlbXBlemFkb1wiLCBcImNvbWllbnpvXCIsIFwiY29taWVuemFzXCIsIFwiY29taWVuemFcIiwgXCJjb21lbnphbW9zXCIsIFwiY29tZW56w6Fpc1wiLCBcImNvbWllbnphblwiLCBcImNvbWVuY8OpXCIsIFwiY29tZW56YXN0ZVwiLCBcImNvbWVuesOzXCIsIFwiY29tZW56YXN0ZWlzXCIsIFwiY29tZW56YXJvblwiLCBcImNvbWVuemFiYVwiLCBcImNvbWVuemFiYXNcIiwgXCJjb21lbnrDoWJhbW9zXCIsIFwiY29tZW56YWJhaXNcIiwgXCJjb21lbnphYmFuXCIsIFwiY29tZW56YXLDrWFcIiwgXCJjb21lbnphcsOtYXNcIiwgXCJjb21lbnphcsOtYW1vc1wiLCBcImNvbWVuemFyw61haXNcIiwgXCJjb21lbnphcsOtYW5cIiwgXCJjb21lbnphcsOpXCIsIFwiY29tZW56YXLDoXNcIiwgXCJjb21lbnphcsOhXCIsIFwiY29tZW56YXJlbW9zXCIsIFwiY29tZW56YXLDqWlzXCIsIFwiY29tZW56YXLDoW5cIiwgXCJjb21pZW5jZVwiLCBcImNvbWllbmNlc1wiLCBcImNvbWVuY2Vtb3NcIiwgXCJjb21lbmPDqWlzXCIsIFwiY29taWVuY2VuXCIsIFwiY29tZW56YXJhXCIsIFwiY29tZW56YXJhc1wiLCBcImNvbWVuesOhcmFtb3NcIiwgXCJjb21lbnphcmFpc1wiLCBcImNvbWVuemFyYW5cIiwgXCJjb21lbnphc2VcIiwgXCJjb21lbnphc2VzXCIsIFwiY29tZW56w6FzZW1vc1wiLCBcImNvbWVuemFzZWlzXCIsIFwiY29tZW56YXNlblwiLCBcImNvbWVuemFyZVwiLCBcImNvbWVuemFyZXNcIiwgXCJjb21lbnrDoXJlbW9zXCIsIFwiY29tZW56YXJlaXNcIiwgXCJjb21lbnphcmVuXCIsIFwiY29tZW56YWRcIiwgXCJjb21lbnphZG9cIiwgXCJzaWdvXCIsIFwic2lndWVzXCIsIFwic2lndWVcIiwgXCJzZWd1aW1vc1wiLCBcInNlZ3Vpc1wiLCBcInNpZ3VlblwiLCBcInNlZ3XDrVwiLCBcInNlZ3Vpc3RlXCIsIFwic2lndWnDs1wiLCBcInNlZ3Vpc3RlaXNcIiwgXCJzaWd1aWVyb25cIiwgXCJzZWd1w61hXCIsIFwic2VndcOtYXNcIiwgXCJzZWd1w61hbW9zXCIsIFwic2VndcOtYWlzXCIsIFwic2VndcOtYW5cIiwgXCJzZWd1aXLDrWFcIiwgXCJzZWd1aXLDrWFzXCIsIFwic2VndWlyw61hbW9zXCIsIFwic2VndWlyw61haXNcIiwgXCJzZWd1aXLDrWFuXCIsIFwic2VndWlyw6lcIiwgXCJzZWd1aXLDoXNcIiwgXCJzZWd1aXLDoVwiLCBcInNlZ3VpcmVtb3NcIiwgXCJzZWd1aXLDqWlzXCIsIFwic2VndWlyw6FuXCIsIFwic2lnYVwiLCBcInNpZ2FzXCIsIFwic2lnYW1vc1wiLCBcInNpZ8OhaXNcIiwgXCJzaWdhblwiLCBcInNpZ3VpZXJhXCIsIFwic2lndWllcmFzXCIsIFwic2lndWnDqXJhbW9zXCIsIFwic2lndWllcmFpc1wiLCBcInNpZ3VpZXJhblwiLCBcInNpZ3VpZXNlXCIsIFwic2lndWllc2VzXCIsIFwic2lndWnDqXNlbW9zXCIsIFwic2lndWllc2Vpc1wiLCBcInNpZ3VpZXNlblwiLCBcInNpZ3VpZXJlXCIsIFwic2lndWllcmVzXCIsIFwic2lndWnDqXJlbW9zXCIsIFwic2lndWllcmVpc1wiLCBcInNpZ3VpZXJlblwiLCBcInNlZ3VpZFwiLCBcInNlZ3VpZG9cIiwgXCJ0ZW5nb1wiLCBcInRpZW5lc1wiLCBcInRpZW5lXCIsIFwidGVuZW1vc1wiLCBcInRlbsOpaXNcIiwgXCJ0aWVuZW5cIiwgXCJ0dXZlXCIsIFwidHV2aXN0ZVwiLCBcInR1dm9cIiwgXCJ0dXZpbW9zXCIsIFwidHV2aXN0ZWlzXCIsIFwidHV2aWVyb25cIiwgXCJ0ZW7DrWFcIiwgXCJ0ZW7DrWFzXCIsIFwidGVuw61hbW9zXCIsIFwidGVuw61haXNcIiwgXCJ0ZW7DrWFuXCIsIFwidGVuZHLDrWFcIiwgXCJ0ZW5kcsOtYXNcIiwgXCJ0ZW5kcsOtYW1vc1wiLCBcInRlbmRyw61haXNcIiwgXCJ0ZW5kcsOtYW5cIiwgXCJ0ZW5kcsOpXCIsIFwidGVuZHLDoXNcIiwgXCJ0ZW5kcsOhXCIsIFwidGVuZHJlbW9zXCIsIFwidGVuZHLDqWlzXCIsIFwidGVuZHLDoW5cIiwgXCJ0ZW5nYVwiLCBcInRlbmdhc1wiLCBcInRlbmdhbW9zXCIsIFwidGVuZ8OhaXNcIiwgXCJ0ZW5nYW5cIiwgXCJ0dXZpZXJhXCIsIFwidHV2aWVyYXNcIiwgXCJ0dXZpw6lyYW1vc1wiLCBcInR1dmllcmFpc1wiLCBcInR1dmllcmFuXCIsIFwidHV2aWVzZVwiLCBcInR1dmllc2VzXCIsIFwidHV2acOpc2Vtb3NcIiwgXCJ0dXZpZXNlaXNcIiwgXCJ0dXZpZXNlblwiLCBcInR1dmllcmVcIiwgXCJ0dXZpZXJlc1wiLCBcInR1dmnDqXJlbW9zXCIsIFwidHV2aWVyZWlzXCIsIFwidHV2aWVyZW5cIiwgXCJ0ZW5cIiwgXCJ0ZW5lZFwiLCBcInRlbmlkb1wiLCBcImFuZG9cIiwgXCJhbmRhc1wiLCBcImFuZGFtb3NcIiwgXCJhbmTDoWlzXCIsIFwiYW5kYW5cIiwgXCJhbmR1dmVcIiwgXCJhbmR1dmlzdGVcIiwgXCJhbmR1dm9cIiwgXCJhbmR1dmltb3NcIiwgXCJhbmR1dmlzdGVpc1wiLCBcImFuZHV2aWVyb25cIiwgXCJhbmRhYmFcIiwgXCJhbmRhYmFzXCIsIFwiYW5kw6FiYW1vc1wiLCBcImFuZGFiYWlzXCIsIFwiYW5kYWJhblwiLCBcImFuZGFyw61hXCIsIFwiYW5kYXLDrWFzXCIsIFwiYW5kYXLDrWFtb3NcIiwgXCJhbmRhcsOtYWlzXCIsIFwiYW5kYXLDrWFuXCIsIFwiYW5kYXLDqVwiLCBcImFuZGFyw6FzXCIsIFwiYW5kYXLDoVwiLCBcImFuZGFyZW1vc1wiLCBcImFuZGFyw6lpc1wiLCBcImFuZGFyw6FuXCIsIFwiYW5kZVwiLCBcImFuZGVzXCIsIFwiYW5kZW1vc1wiLCBcImFuZMOpaXNcIiwgXCJhbmRlblwiLCBcImFuZHV2aWVyYVwiLCBcImFuZHV2aWVyYXNcIiwgXCJhbmR1dmnDqXJhbW9zXCIsIFwiYW5kdXZpZXJhaXNcIiwgXCJhbmR1dmllcmFuXCIsIFwiYW5kdXZpZXNlXCIsIFwiYW5kdXZpZXNlc1wiLCBcImFuZHV2acOpc2Vtb3NcIiwgXCJhbmR1dmllc2Vpc1wiLCBcImFuZHV2aWVzZW5cIiwgXCJhbmR1dmllcmVcIiwgXCJhbmR1dmllcmVzXCIsIFwiYW5kdXZpw6lyZW1vc1wiLCBcImFuZHV2aWVyZWlzXCIsIFwiYW5kdXZpZXJlblwiLCBcImFuZGFkXCIsIFwiYW5kYWRvXCIsIFwicXVlZG9cIiwgXCJxdWVkYXNcIiwgXCJxdWVkYVwiLCBcInF1ZWRhbW9zXCIsIFwicXVlZMOhaXNcIiwgXCJxdWVkYW5cIiwgXCJxdWVkw6lcIiwgXCJxdWVkYXN0ZWlzXCIsIFwicXVlZGFyb25cIiwgXCJxdWVkYWJhXCIsIFwicXVlZGFiYXNcIiwgXCJxdWVkw6FiYW1vc1wiLCBcInF1ZWRhYmFpc1wiLCBcInF1ZWRhYmFuXCIsIFwicXVlZGFyw61hXCIsIFwicXVlZGFyw61hc1wiLCBcInF1ZWRhcsOtYW1vc1wiLCBcInF1ZWRhcsOtYWlzXCIsIFwicXVlZGFyw61hblwiLCBcInF1ZWRhcsOpXCIsIFwicXVlZGFyw6FzXCIsIFwicXVlZGFyw6FcIiwgXCJxdWVkYXJlbW9zXCIsIFwicXVlZGFyw6lpc1wiLCBcInF1ZWRhcsOhblwiLCBcInF1ZWRlXCIsIFwicXVlZGVzXCIsIFwicXVlZGVtb3NcIiwgXCJxdWVkw6lpc1wiLCBcInF1ZWRlblwiLCBcInF1ZWRhcmFcIiwgXCJxdWVkYXJhc1wiLCBcInF1ZWTDoXJhbW9zXCIsIFwicXVlZGFyYWlzXCIsIFwicXVlZGFyYW5cIiwgXCJxdWVkYXNlXCIsIFwicXVlZGFzZXNcIiwgXCJxdWVkw6FzZW1vc1wiLCBcInF1ZWRhc2Vpc1wiLCBcInF1ZWRhc2VuXCIsIFwicXVlZGFyZVwiLCBcInF1ZWRhcmVzXCIsIFwicXVlZMOhcmVtb3NcIiwgXCJxdWVkYXJlaXNcIiwgXCJxdWVkYXJlblwiLCBcInF1ZWRhZFwiLCBcInF1ZWRhZG9cIiwgXCJoYWxsb1wiLCBcImhhbGxhc1wiLCBcImhhbGxhXCIsIFwiaGFsbGFtb3NcIiwgXCJoYWxsw6Fpc1wiLCBcImhhbGxhblwiLCBcImhhbGzDqVwiLCBcImhhbGxhc3RlXCIsIFwiaGFsbMOzXCIsIFwiaGFsbGFzdGVpc1wiLCBcImhhbGxhcm9uXCIsIFwiaGFsbGFiYVwiLCBcImhhbGxhYmFzXCIsIFwiaGFsbMOhYmFtb3NcIiwgXCJoYWxsYWJhaXNcIiwgXCJoYWxsYWJhblwiLCBcImhhbGxhcsOtYVwiLCBcImhhbGxhcsOtYXNcIiwgXCJoYWxsYXLDrWFtb3NcIiwgXCJoYWxsYXLDrWFpc1wiLCBcImhhbGxhcsOtYW5cIiwgXCJoYWxsYXLDqVwiLCBcImhhbGxhcsOhc1wiLCBcImhhbGxhcsOhXCIsIFwiaGFsbGFyZW1vc1wiLCBcImhhbGxhcsOpaXNcIiwgXCJoYWxsYXLDoW5cIiwgXCJoYWxsZVwiLCBcImhhbGxlc1wiLCBcImhhbGxlbW9zXCIsIFwiaGFsbMOpaXNcIiwgXCJoYWxsZW5cIiwgXCJoYWxsYXJhXCIsIFwiaGFsbGFyYXNcIiwgXCJoYWxsw6FyYW1vc1wiLCBcImhhbGxhcmFpc1wiLCBcImhhbGxhcmFuXCIsIFwiaGFsbGFzZVwiLCBcImhhbGxhc2VzXCIsIFwiaGFsbMOhc2Vtb3NcIiwgXCJoYWxsYXNlaXNcIiwgXCJoYWxsYXNlblwiLCBcImhhbGxhcmVcIiwgXCJoYWxsYXJlc1wiLCBcImhhbGzDoXJlbW9zXCIsIFwiaGFsbGFyZWlzXCIsIFwiaGFsbGFyZW5cIiwgXCJoYWxsYWRcIiwgXCJoYWxsYWRvXCIsIFwidmVuZ29cIiwgXCJ2aWVuZXNcIiwgXCJ2aWVuZVwiLCBcInZlbmltb3NcIiwgXCJ2ZW5pc1wiLCBcInZpZW5lblwiLCBcInZpbmVcIiwgXCJ2aW5pc3RlXCIsIFwidmlub1wiLCBcInZpbmltb3NcIiwgXCJ2aW5pc3RlaXNcIiwgXCJ2aW5pZXJvblwiLCBcInZlbsOtYVwiLCBcInZhbsOtYXNcIiwgXCJ2ZXJuw61hbW9zXCIsIFwidmVuw61haXNcIiwgXCJ2ZW7DrWFuXCIsIFwidmVuZHLDrWFcIiwgXCJ2ZW5kcsOtYXNcIiwgXCJ2ZW5kcsOtYW1vc1wiLCBcInZlbmTDrWFpc1wiLCBcInZlbmRyw61hblwiLCBcInZlbmRyw6lcIiwgXCJ2ZW5kcsOhc1wiLCBcInZlbmRyw6FcIiwgXCJ2ZW5kcmVtb3NcIiwgXCJ2ZW5kcsOpaXNcIiwgXCJ2ZW5kcsOhblwiLCBcInZlbmdhXCIsIFwidmVuZ2FzXCIsIFwidmVuZ2Ftb3NcIiwgXCJ2ZW5nw6Fpc1wiLCBcInZlbmdhblwiLCBcInZpbmllcmFcIiwgXCJ2aW5pZXJhc1wiLCBcInZpbmnDqXJhbW9zXCIsIFwidmluaWVyYWlzXCIsIFwidmluaWVyYW5cIiwgXCJ2aW5pZXNlXCIsIFwidmluaWVzZXNcIiwgXCJ2aW5pw6lzZW1vc1wiLCBcInZpbmllc2Vpc1wiLCBcInZpbmllc2VuXCIsIFwidmluaWVyZVwiLCBcInZpbmllcmVzXCIsIFwidmluacOpcmVtb3NcIiwgXCJ2aW5pZXJlaXNcIiwgXCJ2aW5pZXJlblwiLCBcInZlblwiLCBcInZlbmlkXCIsIFwidmVuaWRvXCIsIFwiYWJyb1wiLCBcImFicmVzXCIsIFwiYWJyZVwiLCBcImFicmlzbW9zXCIsIFwiYWJyw61zXCIsIFwiYWJyZW5cIiwgXCJhYnLDrVwiLCBcImFicmlzdGVcIiwgXCJhYnJpw7NcIiwgXCJhYnJpc3RlaXNcIiwgXCJhYnJpZXJvblwiLCBcImFicsOtYVwiLCBcImFicsOtYXNcIiwgXCJhYnLDrWFpc1wiLCBcImFicsOtYW5cIiwgXCJhYnJpcsOtYVwiLCBcImFicmlyw61hc1wiLCBcImFicmlyw61hbW9zXCIsIFwiYWJyaXLDrWFpc1wiLCBcImFicmlyw61hblwiLCBcImFicmlyw6lcIiwgXCJhYnJpcsOhc1wiLCBcImFicmlyw6FcIiwgXCJhYnJpcmVtb3NcIiwgXCJhYnJpcsOpaXNcIiwgXCJhYnJpcsOhblwiLCBcImFicmFcIiwgXCJhYnJhc1wiLCBcImFicmFtb3NcIiwgXCJhYnLDoWlzXCIsIFwiYWJyYW5cIiwgXCJhYnJpZXJhXCIsIFwiYWJyaWVyYXNcIiwgXCJhYnJpw6lyYW1vc1wiLCBcImFicmllcmFpc1wiLCBcImFicmllcmFuXCIsIFwiYWJyaWVzZVwiLCBcImFicmllc2VzXCIsIFwiYWJyacOpc2Vtb3NcIiwgXCJhYnJpZXNlaXNcIiwgXCJhYnJpZXNlblwiLCBcImFicmllcmVcIiwgXCJhYnJpZXJlc1wiLCBcImFicmnDqXJlbW9zXCIsIFwiYWJyaWVyZWlzXCIsIFwiYWJyaWVyZW5cIiwgXCJhYnJpZFwiLCBcImFiaWVydG9cIiwgXCJ2b3lcIiwgXCJ2YXNcIiwgXCJ2YVwiLCBcInZhbW9zXCIsIFwidmFpc1wiLCBcInZhblwiLCBcImliYVwiLCBcImliYXNcIiwgXCLDrWJhbW9zXCIsIFwiaWJhaXNcIiwgXCJpYmFuXCIsIFwiaXLDrWFcIiwgXCJpcsOtYXNcIiwgXCJpcsOtYW1vc1wiLCBcImlyw61haXNcIiwgXCJpcsOtYW5cIiwgXCJpcsOpXCIsIFwiaXLDoXNcIiwgXCJpcsOhXCIsIFwiaXJlbW9zXCIsIFwiaXLDqWlzXCIsIFwiaXLDoW5cIiwgXCJ2YXlhXCIsIFwidmF5YXNcIiwgXCJ2YXlhbW9zXCIsIFwidmF5w6Fpc1wiLCBcInZheWFuXCIsIFwidmVcIiwgXCJpZFwiLCBcImlkb1wiLCBcImFjYWJvXCIsIFwiYWNhYmFzXCIsIFwiYWNhYmFcIiwgXCJhY2FiYW1vc1wiLCBcImFjYWLDoWlzXCIsIFwiYWNhYmFuXCIsIFwiYWNhYsOpXCIsIFwiYWNhYmFzdGVcIiwgXCJhY2Fiw7NcIiwgXCJhY2FiYXN0ZWlzXCIsIFwiYWNhYmFyb25cIiwgXCJhY2FiYWJhXCIsIFwiYWNhYmFiYXNcIiwgXCJhY2Fiw6FiYW1vc1wiLCBcImFjYWJhYmFpc1wiLCBcImFjYWJhYmFuXCIsIFwiYWNhYmFyw61hXCIsIFwiYWNhYmFyw61hc1wiLCBcImFjYWJhcsOtYW1vc1wiLCBcImFjYWJhcsOtYWlzXCIsIFwiYWNhYmFyw61hblwiLCBcImFjYWJhcsOpXCIsIFwiYWNhYmFyw6FzXCIsIFwiYWNhYmFyw6FcIiwgXCJhY2FiYXJlbW9zXCIsIFwiYWNhYmFyw6lpc1wiLCBcImFjYWJhcsOhblwiLCBcImFjYWJlXCIsIFwiYWNhYmVzXCIsIFwiYWNhYmVtb3NcIiwgXCJhY2Fiw6lpc1wiLCBcImFjYWJlblwiLCBcImFjYWJhcmFcIiwgXCJhY2FiYXJhc1wiLCBcImFjYWLDoXJhbW9zXCIsIFwiYWNhYmFyYWlzXCIsIFwiYWNhYmFyYW5cIiwgXCJhY2FiYXNlXCIsIFwiYWNhYmFzZXNcIiwgXCJhY2Fiw6FzZW1vc1wiLCBcImFjYWJhc2Vpc1wiLCBcImFjYWJhc2VuXCIsIFwiYWNhYmFyZVwiLCBcImFjYWJhcmVzXCIsIFwiYWNhYsOhcmVtb3NcIiwgXCJhY2FiYXJlaXNcIiwgXCJhY2FiYXJlblwiLCBcImFjYWJhZFwiLCBcImFjYWJhZG9cIiwgXCJsbGV2b1wiLCBcImxsZXZhc1wiLCBcImxsZXZhXCIsIFwibGxldmFtb3NcIiwgXCJsbGV2w6Fpc1wiLCBcImxsZXZhblwiLCBcImxsZXbDqVwiLCBcImxsZXZhc3RlXCIsIFwibGxldsOzXCIsIFwibGxldmFzdGVpc1wiLCBcImxsZXZhcm9uXCIsIFwibGxldmFiYVwiLCBcImxsZXZhYmFzXCIsIFwibGxldsOhYmFtb3NcIiwgXCJsbGV2YWJhaXNcIiwgXCJsbGV2YWJhblwiLCBcImxsZXZhcsOtYVwiLCBcImxsZXZhcsOtYXNcIiwgXCJsbGV2YXLDrWFtb3NcIiwgXCJsbGV2YXLDrWFpc1wiLCBcImxsZXZhcsOtYW5cIiwgXCJsbGV2YXLDqVwiLCBcImxsZXZhcsOhc1wiLCBcImxsZXZhcsOhXCIsIFwibGxldmFyZW1vc1wiLCBcImxsZXZhcsOpaXNcIiwgXCJsbGV2YXLDoW5cIiwgXCJsbGV2ZVwiLCBcImxsZXZlc1wiLCBcImxsZXZlbW9zXCIsIFwibGxldsOpaXNcIiwgXCJsbGV2ZW5cIiwgXCJsbGV2YXJhXCIsIFwibGxldmFyYXNcIiwgXCJsbGV2w6FyYW1vc1wiLCBcImxsZXZhcmFpc1wiLCBcImxsZXZhcmFuXCIsIFwibGxldmFzZVwiLCBcImxsZXZhc2VzXCIsIFwibGxldsOhc2Vtb3NcIiwgXCJsbGV2YXNlaXNcIiwgXCJsbGV2YXNlblwiLCBcImxsZXZhcmVcIiwgXCJsbGV2YXJlc1wiLCBcImxsZXbDoXJlbW9zXCIsIFwibGxldmFyZWlzXCIsIFwibGxldmFyZW5cIiwgXCJsbGV2YWRcIiwgXCJsbGV2YWRvXCIsIFwiYWxjYW56b1wiLCBcImFsY2FuemFzXCIsIFwiYWxjYW56YVwiLCBcImFsY2FuemFtb3NcIiwgXCJhbGNhbnrDoWlzXCIsIFwiYWxjYW56YW5cIiwgXCJhbGNhbmPDqVwiLCBcImFsY2FuemFzdGVcIiwgXCJhbGNhbnrDs1wiLCBcImFsY2FuemFzdGVpc1wiLCBcImFsY2FuemFyb25cIiwgXCJhbGNhbnphYmFcIiwgXCJhbGNhbnphYmFzXCIsIFwiYWxjYW56w6FiYW1vc1wiLCBcImFsY2FuemFiYWlzXCIsIFwiYWxjYW56YWJhblwiLCBcImFsY2FuemFyw61hXCIsIFwiYWxjYW56YXLDrWFzXCIsIFwiYWxjYW56YXLDrWFtb3NcIiwgXCJhbGNhbnphcsOtYWlzXCIsIFwiYWxjYW56YXLDrWFuXCIsIFwiYWxjYW56YXLDqVwiLCBcImFsY2FuemFyw6FzXCIsIFwiYWxjYW56YXLDoVwiLCBcImFsY2FuemFyZW1vc1wiLCBcImFsY2FuemFyw6lpc1wiLCBcImFsY2FuemFyw6FuXCIsIFwiYWxjYW5jZVwiLCBcImFsY2FuY2VzXCIsIFwiYWxjYW5jZW1vc1wiLCBcImFsY2FuY8OpaXNcIiwgXCJhbGNhbmNlblwiLCBcImFsY2FuemFyYVwiLCBcImFsY2FuemFyYXNcIiwgXCJhbGNhbnrDoXJhbW9zXCIsIFwiYWxjYW56YXJhaXNcIiwgXCJhbGNhbnphcmFuXCIsIFwiYWxjYW56YXNlXCIsIFwiYWxjYW56YXNlc1wiLCBcImFsY2FuesOhc2Vtb3NcIiwgXCJhbGNhbnphc2Vpc1wiLCBcImFsY2FuemFzZW5cIiwgXCJhbGNhbnphcmVcIiwgXCJhbGNhbnphcmVzXCIsIFwiYWxjYW56w6FyZW1vc1wiLCBcImFsY2FuemFyZWlzXCIsIFwiYWxjYW56YXJlblwiLCBcImFsY2FuemFkXCIsIFwiYWxjYW56YWRvXCIsIFwiZGlnb1wiLCBcImRpY2VzXCIsIFwiZGljZVwiLCBcImRlY2ltb3NcIiwgXCJkZWPDrXNcIiwgXCJkaWNlblwiLCBcImRpamVcIiwgXCJkaWppc3RlXCIsIFwiZGlqb1wiLCBcImRpamltb3NcIiwgXCJkaWppc3RlaXNcIiwgXCJkaWplcm9uXCIsIFwiZGVjw61hXCIsIFwiZGVjw61hc1wiLCBcImRlY8OtYW1vc1wiLCBcImRlY8OtYWlzXCIsIFwiZGVjw61hblwiLCBcImRpcsOtYVwiLCBcImRpcsOtYXNcIiwgXCJkaXLDrWFtb3NcIiwgXCJkaXLDrWFpc1wiLCBcImRpcsOtYW5cIiwgXCJkaXLDqVwiLCBcImRpcsOhc1wiLCBcImRpcsOhXCIsIFwiZGlyZW1vc1wiLCBcImRpcsOpaXNcIiwgXCJkaXLDoW5cIiwgXCJkaWdhXCIsIFwiZGlnYXNcIiwgXCJkaWdhbW9zXCIsIFwiZGlnw6Fpc1wiLCBcImRpZ2FuXCIsIFwiZGlqZXJhXCIsIFwiZGlqZXJhc1wiLCBcImRpasOpcmFtb3NcIiwgXCJkaWplcmFpc1wiLCBcImRpamVyYW5cIiwgXCJkaWplc2VcIiwgXCJkaWplc2VzXCIsIFwiZGlqw6lzZW1vc1wiLCBcImRpamVzZWlzXCIsIFwiZGlqZXNlblwiLCBcImRpamVyZVwiLCBcImRpamVyZXNcIiwgXCJkaWrDqXJlbW9zXCIsIFwiZGlqZXJlaXNcIiwgXCJkaWplcmVuXCIsIFwiZGlcIiwgXCJkZWNpZFwiLCBcImRpY2hvXCIsIFwiY29udGluw7pvXCIsIFwiY29udGluw7phc1wiLCBcImNvbnRpbsO6YVwiLCBcImNvbnRpbnVhbW9zXCIsIFwiY29udGludcOhaXNcIiwgXCJjb250aW7DumFuXCIsIFwiY29udGludcOpXCIsIFwiY29udGludWFzdGVcIiwgXCJjb250aW51w7NcIiwgXCJjb250aW51YXN0ZWlzXCIsIFwiY29udGludWFyb25cIiwgXCJjb250aW51YWJhXCIsIFwiY29udGludWFiYXNcIiwgXCJjb250aW51w6FiYW1vc1wiLCBcImNvbnRpbnVhYmFpc1wiLCBcImNvbnRpbnVhYmFuXCIsIFwiY29udGludWFyw61hXCIsIFwiY29udGludWFyw61hc1wiLCBcImNvbnRpbnVhcsOtYW1vc1wiLCBcImNvbnRpbnVhcsOtYWlzXCIsIFwiY29udGludWFyw61hblwiLCBcImNvbnRpbnVhcsOpXCIsIFwiY29udGludWFyw6FzXCIsIFwiY29udGludWFyw6FcIiwgXCJjb250aW51YXJlbW9zXCIsIFwiY29udGludWFyw6lpc1wiLCBcImNvbnRpbnVhcsOhblwiLCBcImNvbnRpbsO6ZVwiLCBcImNvbnRpbsO6ZXNcIiwgXCJjb250aW51ZW1vc1wiLCBcImNvbnRpbnXDqWlzXCIsIFwiY29udGluw7plblwiLCBcImNvbnRpbnVhcmFcIiwgXCJjb250aW51YXJhc1wiLCBcImNvbnRpbnXDoXJhbW9zXCIsIFwiY29udGludWFyYWlzXCIsIFwiY29udGludWFyYW5cIiwgXCJjb250aW51YXNlXCIsIFwiY29udGludWFzZXNcIiwgXCJjb250aW51w6FzZW1vc1wiLCBcImNvbnRpbnVhc2Vpc1wiLCBcImNvbnRpbnVhc2VuXCIsIFwiY29udGludWFyZVwiLCBcImNvbnRpbnVhcmVzXCIsIFwiY29udGludcOhcmVtb3NcIiwgXCJjb250aW51YXJlaXNcIiwgXCJjb250aW51YXJlblwiLCBcImNvbnRpbnVhZFwiLCBcImNvbnRpbnVhZG9cIiwgXCJyZXN1bHRvXCIsIFwicmVzdWx0YXNcIiwgXCJyZXN1bHRhXCIsIFwicmVzdWx0YW1vc1wiLCBcInJlc3VsdMOhaXNcIiwgXCJyZXN1bHRhblwiLCBcInJlc3VsdMOpXCIsIFwicmVzdWx0YXN0ZVwiLCBcInJlc3VsdMOzXCIsIFwicmVzdWx0YXN0ZWlzXCIsIFwicmVzdWx0YXJvblwiLCBcInJlc3VsdGFiYVwiLCBcInJlc3VsdGFiYXNcIiwgXCJyZXN1bHTDoWJhbW9zXCIsIFwicmVzdWx0YWJhaXNcIiwgXCJyZXN1bHRhYmFuXCIsIFwicmVzdWx0YXLDrWFcIiwgXCJyZXN1bHRhcsOtYXNcIiwgXCJyZXN1bHRhcsOtYW1vc1wiLCBcInJlc3VsdGFyw61haXNcIiwgXCJyZXN1bHRhcsOtYW5cIiwgXCJyZXN1bHRhcsOpXCIsIFwicmVzdWx0YXLDoXNcIiwgXCJyZXN1bHRhcsOhXCIsIFwicmVzdWx0YXJlbW9zXCIsIFwicmVzdWx0YXLDqWlzXCIsIFwicmVzdWx0YXLDoW5cIiwgXCJyZXN1bHRlXCIsIFwicmVzdWx0ZXNcIiwgXCJyZXN1bHRlbW9zXCIsIFwicmVzdWx0w6lpc1wiLCBcInJlc3VsdGVuXCIsIFwicmVzdWx0YXJhXCIsIFwicmVzdWx0YXJhc1wiLCBcInJlc3VsdMOhcmFtb3NcIiwgXCJyZXN1bHRhcmFpc1wiLCBcInJlc3VsdGFyYW5cIiwgXCJyZXN1bHRhc2VcIiwgXCJyZXN1bHRhc2VzXCIsIFwicmVzdWx0w6FzZW1vc1wiLCBcInJlc3VsdGFzZWlzXCIsIFwicmVzdWx0YXNlblwiLCBcInJlc3VsdGFyZVwiLCBcInJlc3VsdGFyZXNcIiwgXCJyZXN1bHTDoXJlbW9zXCIsIFwicmVzdWx0YXJlaXNcIiwgXCJyZXN1bHRhcmVuXCIsIFwicmVzdWx0YWRcIiwgXCJyZXN1bHRhZG9cIiwgXCJwdWVkb1wiLCBcInB1ZWRlc1wiLCBcInB1ZWRlXCIsIFwicG9kZW1vc1wiLCBcInBvZMOpaXNcIiwgXCJwdWVkZW5cIiwgXCJwdWRlXCIsIFwicHVkaXN0ZVwiLCBcInB1ZG9cIiwgXCJwdWRpbW9zXCIsIFwicHVkaXN0ZWlzXCIsIFwicHVkaWVyb25cIiwgXCJwb2TDrWFcIiwgXCJwb2TDrWFzXCIsIFwicG9kw61hbW9zXCIsIFwicG9kw61haXNcIiwgXCJwb2TDrWFuXCIsIFwicG9kcsOtYVwiLCBcInBvZHLDrWFzXCIsIFwicG9kcsOtYW1vc1wiLCBcInBvZHLDrWFpc1wiLCBcInBvZHLDrWFuXCIsIFwicG9kcsOpXCIsIFwicG9kcsOhc1wiLCBcInBvZHLDoVwiLCBcInBvZHJlbW9zXCIsIFwicG9kcsOpaXNcIiwgXCJwb2Ryw6FuXCIsIFwicHVlZGFcIiwgXCJwdWVkYXNcIiwgXCJwb2RhbW9zXCIsIFwicG9kw6Fpc1wiLCBcInB1ZWRhblwiLCBcInB1ZGllcmFcIiwgXCJwdWRpZXJhc1wiLCBcInB1ZGnDqXJhbW9zXCIsIFwicHVkaWVyYWlzXCIsIFwicHVkaWVyYW5cIiwgXCJwdWRpZXNlXCIsIFwicHVkaWVzZXNcIiwgXCJwdWRpw6lzZW1vc1wiLCBcInB1ZGllc2Vpc1wiLCBcInB1ZGllc2VuXCIsIFwicHVkaWVyZVwiLCBcInB1ZGllcmVzXCIsIFwicHVkacOpcmVtb3NcIiwgXCJwdWRpZXJlaXNcIiwgXCJwdWRpZXJlblwiLCBcInBvZGVkXCIsIFwicG9kaWRvXCIsIFwicXVpZXJvXCIsIFwicXVpZXJlc1wiLCBcInF1aWVyZVwiLCBcInF1ZXJlbW9zXCIsIFwicXVlcsOpaXNcIiwgXCJxdWllcmVuXCIsIFwicXVpc2VcIiwgXCJxdWlzaXN0ZVwiLCBcInF1aXNvXCIsIFwicXVpc2ltb3NcIiwgXCJxdWlzaXN0ZWlzXCIsIFwicXVpc2llcm9uXCIsIFwicXVlcsOtYVwiLCBcInF1ZXLDrWFzXCIsIFwicXVlcsOtYW1vc1wiLCBcInF1ZXLDrWFpc1wiLCBcInF1ZXLDrWFuXCIsIFwicXVlcnLDrWFcIiwgXCJxdWVycsOtYXNcIiwgXCJxdWVycsOtYW1vc1wiLCBcInF1ZXJyw61haXNcIiwgXCJxdWVycsOtYW5cIiwgXCJxdWVycsOpXCIsIFwicXVlcnLDoXNcIiwgXCJxdWVycsOhXCIsIFwicXVlcnJlbW9zXCIsIFwicXVlcnLDqWlzXCIsIFwicXVlcnLDoW5cIiwgXCJxdWllcmFcIiwgXCJxdWllcmFzXCIsIFwicXVlcmFtb3NcIiwgXCJxdWVyw6Fpc1wiLCBcInF1aWVyYW5cIiwgXCJxdWlzaWVyYVwiLCBcInF1aXNpZXJhc1wiLCBcInF1aXNpw6lyYW1vc1wiLCBcInF1aXNpZXJhaXNcIiwgXCJxdWlzaWVyYW5cIiwgXCJxdWlzaWVzZVwiLCBcInF1aXNpZXNlc1wiLCBcInF1aXNpw6lzZW1vc1wiLCBcInF1aXNpZXNlaXNcIiwgXCJxdWlzaWVzZW5cIiwgXCJxdWlzaWVyZVwiLCBcInF1aXNpZXJlc1wiLCBcInF1aXNpw6lyZW1vc1wiLCBcInF1aXNpZXJlaXNcIiwgXCJxdWlzaWVyZW5cIiwgXCJxdWVyZWRcIiwgXCJxdWVyaWRvXCIsIFwic2FiZXNcIiwgXCJzYWJlXCIsIFwic2FiZW1vc1wiLCBcInNhYsOpaXNcIiwgXCJzYWJlblwiLCBcInN1cGVcIiwgXCJzdXBpc3RlXCIsIFwic3Vwb1wiLCBcInN1cGltb3NcIiwgXCJzdXBpc3RlaXNcIiwgXCJzdXBpZXJvblwiLCBcInNhYsOtYVwiLCBcInNhYsOtYXNcIiwgXCJzYWLDrWFtb3NcIiwgXCJzYWLDrWFpc1wiLCBcInNhYsOtYW5cIiwgXCJzYWJyw61hXCIsIFwic2FicsOtYXNcIiwgXCJzYWJyw61hbW9zXCIsIFwic2FicsOtYWlzXCIsIFwic2FicsOtYW5cIiwgXCJzYWJyw6lcIiwgXCJzYWJyw6FzXCIsIFwic2FicsOhXCIsIFwic2FicmVtb3NcIiwgXCJzYWJyw6lpc1wiLCBcInNhYnLDoW5cIiwgXCJzZXBhXCIsIFwic2VwYXNcIiwgXCJzZXBhbW9zXCIsIFwic2Vww6Fpc1wiLCBcInNlcGFuXCIsIFwic3VwaWVyYVwiLCBcInN1cGllcmFzXCIsIFwic3VwacOpcmFtb3NcIiwgXCJzdXBpZXJhaXNcIiwgXCJzdXBpZXJhblwiLCBcInN1cGllc2VcIiwgXCJzdXBpZXNlc1wiLCBcInN1cGnDqXNlbW9zXCIsIFwic3VwaWVzZWlzXCIsIFwic3VwaWVzZW5cIiwgXCJzdXBpZXJlXCIsIFwic3VwaWVyZXNcIiwgXCJzdXBpw6lyZW1vc1wiLCBcInN1cGllcmVpc1wiLCBcInN1cGllcmVuXCIsIFwic2FiZWRcIiwgXCJzYWJpZG9cIiwgXCJzdWVsb1wiLCBcInN1ZWxlc1wiLCBcInN1ZWxlXCIsIFwic29sZW1vc1wiLCBcInNvbMOpaXNcIiwgXCJzdWVsZW5cIiwgXCJzb2zDrVwiLCBcInNvbGlzdGVcIiwgXCJzb2xpw7NcIiwgXCJzb2xpbW9zXCIsIFwic29saXN0ZWlzXCIsIFwic29saWVyb25cIiwgXCJzb2zDrWFcIiwgXCJzb2zDrWFzXCIsIFwic29sw61hbW9zXCIsIFwic29sw61haXNcIiwgXCJzb2zDrWFuXCIsIFwic29sZXLDrWFcIiwgXCJzb2xlcsOtYXNcIiwgXCJzb2xlcsOtYW1vc1wiLCBcInNvbGVyw61haXNcIiwgXCJzb2xlcsOtYW5cIiwgXCJzb2xlcsOpXCIsIFwic29sZXLDoXNcIiwgXCJzb2xlcsOhXCIsIFwic29sZXJlbW9zXCIsIFwic29sZXLDqWlzXCIsIFwic29sZXLDoW5cIiwgXCJzdWVsYVwiLCBcInN1ZWxhc1wiLCBcInNvbGFtb3NcIiwgXCJzb2zDoWlzXCIsIFwic3VlbGFuXCIsIFwic29saWVyYVwiLCBcInNvbGllcmFzXCIsIFwic29sacOpcmFtb3NcIiwgXCJzb2xpZXJhaXNcIiwgXCJzb2xpZXJhblwiLCBcInNvbGllc2VcIiwgXCJzb2xpZXNlc1wiLCBcInNvbGnDqXNlbW9zXCIsIFwic29saWVzZWlzXCIsIFwic29saWVzZW5cIiwgXCJzb2xpZXJlXCIsIFwic29saWVyZXNcIiwgXCJzb2xpw6lyZW1vc1wiLCBcInNvbGllcmVpc1wiLCBcInNvbGllcmVuXCIsIFwic29sZWRcIiwgXCJzb2xpZG9cIiwgXCJuZWNlc2l0b1wiLCBcIm5lY2VzaXRhc1wiLCBcIm5lY2VzaXRhbW9zXCIsIFwibmVjZXNpdMOhaXNcIiwgXCJuZWNlc2l0YW5cIiwgXCJuZWNlc2l0w6lcIiwgXCJuZWNlc2l0YXN0ZVwiLCBcIm5lY2VzaXTDs1wiLCBcIm5lY2VzaXRhc3RlaXNcIiwgXCJuZWNlc2l0YXJvblwiLCBcIm5lY2VzaXRhYmFcIiwgXCJuZWNlc2l0YWJhc1wiLCBcIm5lY2VzaXTDoWJhbW9zXCIsIFwibmVjZXNpdGFiYWlzXCIsIFwibmVjZXNpdGFiYW5cIiwgXCJuZWNlc2l0YXLDrWFcIiwgXCJuZWNlc2l0YXLDrWFzXCIsIFwibmVjZXNpdGFyw61hbW9zXCIsIFwibmVjZXNpdGFyw61haXNcIiwgXCJuZWNlc2l0YXLDrWFuXCIsIFwibmVjZXNpdGFyw6lcIiwgXCJuZWNlc2l0YXLDoXNcIiwgXCJuZWNlc2l0YXLDoVwiLCBcIm5lY2VzaXRhcmVtb3NcIiwgXCJuZWNlc2l0YXLDqWlzXCIsIFwibmVjZXNpdGFyw6FuXCIsIFwibmVjZXNpdGVcIiwgXCJuZWNlc2l0ZXNcIiwgXCJuZWNlc2l0ZW1vc1wiLCBcIm5lY2VzaXTDqWlzXCIsIFwibmVjZXNpdGVuXCIsIFwibmVjZXNpdGFyYVwiLCBcIm5lY2VzaXRhcmFzXCIsIFwibmVjZXNpdMOhcmFtb3NcIiwgXCJuZWNlc2l0YXJhaXNcIiwgXCJuZWNlc2l0YXJhblwiLCBcIm5lY2VzaXRhc2VcIiwgXCJuZWNlc2l0YXNlc1wiLCBcIm5lY2VzaXTDoXNlbW9zXCIsIFwibmVjZXNpdGFzZWlzXCIsIFwibmVjZXNpdGFzZW5cIiwgXCJuZWNlc2l0YXJlXCIsIFwibmVjZXNpdGFyZXNcIiwgXCJuZWNlc2l0w6FyZW1vc1wiLCBcIm5lY2VzaXRhcmVpc1wiLCBcIm5lY2VzaXRhcmVuXCIsIFwibmVjZXNpdGFcIiwgXCJuZWNlc2l0YWRcIiwgXCJuZWNlc2l0YWRvXCJdO1xudmFyIG90aGVyQXV4aWxpYXJpZXNJbmZpbml0aXZlID0gW1wiaGFiZXJcIiwgXCJkZWJlclwiLCBcImVtcGV6YXJcIiwgXCJjb21lbnphclwiLCBcInNlZ3VpclwiLCBcInRlbmVyXCIsIFwiYW5kYXJcIiwgXCJxdWVkYXJcIiwgXCJoYWxsYXJcIiwgXCJ2ZW5pclwiLCBcImFicmlyXCIsIFwiaXJcIiwgXCJhY2FiYXJcIiwgXCJsbGV2YXJcIiwgXCJhbGNhbnphclwiLCBcImRlY2lyXCIsIFwiY29udGludWFyXCIsIFwicmVzdWx0YXJcIiwgXCJwb2RlclwiLCBcInF1ZXJlclwiLCBcInNhYmVyXCIsIFwic29sZXJcIiwgXCJuZWNlc2l0YXJcIl07XG52YXIgY29wdWxhID0gW1wiZXN0b3lcIiwgXCJlc3TDoXNcIiwgXCJlc3TDoVwiLCBcImVzdGFtb3NcIiwgXCJlc3TDoWlzXCIsIFwiZXN0w6FuXCIsIFwiZXN0dXZlXCIsIFwiZXN0dXZpc3RlXCIsIFwiZXN0dXZvXCIsIFwiZXN0dXZpbW9zXCIsIFwiZXN0dXZpc3RlaXNcIiwgXCJlc3R1dmllcm9uXCIsIFwiZXN0dWJhXCIsIFwiZXN0YWJhc1wiLCBcImVzdMOhYmFtb3NcIiwgXCJlc3RhYmFpc1wiLCBcImVzdGFiYW5cIiwgXCJlc3RyYXLDrWFcIiwgXCJlc3RhcsOtYXNcIiwgXCJlc3RhcsOtYW1vc1wiLCBcImVzdGFyw61haXNcIiwgXCJlc3RhcsOtYW5cIiwgXCJlc3RhcsOpXCIsIFwiZXN0YXLDoXNcIiwgXCJlc3RhcsOhXCIsIFwiZXN0YXJlbW9zXCIsIFwiZXN0YXLDqWlzXCIsIFwiZXN0YXLDoW5cIiwgXCJlc3TDqVwiLCBcImVzdMOpc1wiLCBcImVzdGVtb3NcIiwgXCJlc3TDqWlzXCIsIFwiZXN0w6luXCIsIFwiZXN0dXZpZXJhXCIsIFwiZXN0dXZpZXNlXCIsIFwiZXN0dXZpZXJhc1wiLCBcImVzdHV2acOpcmFtb3NcIiwgXCJlc3R1dmllcmFpc1wiLCBcImVzdHV2aWVyYW5cIiwgXCJlc3R1dmllc2VzXCIsIFwiZXN0dXZpw6lzZW1vc1wiLCBcImVzdHV2aWVzZWlzXCIsIFwiZXN0dXZpZXNlblwiLCBcImVzdHV2aWVyZVwiLCBcImVzdHV2aWVyZXNcIiwgXCJlc3R1dmnDqXJlbW9zXCIsIFwiZXN0dXZpZXJlaXNcIiwgXCJlc3R1dmllcmVuXCIsIFwiZXN0YWRcIiwgXCJlc3RhZG9cIiwgXCJzb3lcIiwgXCJlcmVzXCIsIFwiZXNcIiwgXCJzb21vc1wiLCBcInNvaXNcIiwgXCJzb25cIiwgXCJmdWlcIiwgXCJmdWlzdGVcIiwgXCJmdWltb3NcIiwgXCJmdWlzdGVpc1wiLCBcImZ1ZXJvblwiLCBcImVyYVwiLCBcImVyYXNcIiwgXCLDqXJhbW9zXCIsIFwiZXJhaXNcIiwgXCJlcmFuXCIsIFwic2Vyw61hXCIsIFwic2Vyw61hc1wiLCBcInNlcsOtYW1vc1wiLCBcInNlcsOtYWlzXCIsIFwic2Vyw61hblwiLCBcInNlcsOpXCIsIFwic2Vyw6FzXCIsIFwic2VyZW1vc1wiLCBcInNlcsOpaXNcIiwgXCJzZXLDoW5cIiwgXCJzZWFcIiwgXCJzZWFzXCIsIFwic2VhbW9zXCIsIFwic2XDoWlzXCIsIFwic2VhblwiLCBcImZ1ZXJhc1wiLCBcImZ1w6lyYW1vc1wiLCBcImZ1ZXJhaXNcIiwgXCJmdWVyYW5cIiwgXCJmdWVzZVwiLCBcImZ1ZXNlc1wiLCBcImZ1w6lzZW1vc1wiLCBcImZ1ZXNlaXNcIiwgXCJmdWVzZW5cIiwgXCJmdWVyZVwiLCBcImZ1ZXJlc1wiLCBcImZ1w6lyZW1vc1wiLCBcImZ1ZXJlaXNcIiwgXCJmdWVyZW5cIiwgXCJzw6lcIiwgXCJzZWRcIiwgXCJzaWRvXCJdO1xudmFyIGNvcHVsYUluZmluaXRpdmUgPSBbXCJlc3RhclwiLCBcInNlclwiXTtcbnZhciBwcmVwb3NpdGlvbnMgPSBbXCJhXCIsIFwiYW50ZVwiLCBcImFiYWpvXCIsIFwiYWRvbmRlXCIsIFwiYWxcIiwgXCJhbGxlbmRlXCIsIFwiYWxyZWRlZG9yXCIsIFwiYW3DqW5cIiwgXCJhbnRlc1wiLCBcImFycmliYVwiLCBcImF1blwiLCBcImJham9cIiwgXCJjYWJlXCIsIFwiY2Fib1wiLCBcImNvblwiLCBcImNvbnRpZ29cIiwgXCJjb250cmFcIiwgXCJkZVwiLCBcImRlamFudGVcIiwgXCJkZWxcIiwgXCJkZW50cm9cIiwgXCJkZXNkZVwiLCBcImRvbmRlXCIsIFwiZHVyYW50ZVwiLCBcImVuXCIsIFwiZW5jaW1hXCIsIFwiZW50cmVcIiwgXCJleGNlcHRvXCIsIFwiZnVlcmFcIiwgXCJoYWNpYVwiLCBcImhhc3RhXCIsIFwiaW5jbHVzb1wiLCBcIm1lZGlhbnRlXCIsIFwibcOhc1wiLCBcIm9wdWVzdG9cIiwgXCJwYXJcIiwgXCJwYXJhXCIsIFwicHLDs3hpbW9cIiwgXCJzYWx2b1wiLCBcInNlZ8O6blwiLCBcInNpblwiLCBcInNvXCIsIFwic29icmVcIiwgXCJ0cmFzXCIsIFwidmVyc3VzXCIsIFwidsOtYVwiXTtcbnZhciBwcmVwb3NpdGlvbmFsQWR2ZXJicyA9IFtcImNlcmNhXCJdO1xudmFyIGNvb3JkaW5hdGluZ0Nvbmp1bmN0aW9ucyA9IFtcIm9cIiwgXCJ5XCIsIFwiZW50b25jZXNcIiwgXCJlXCIsIFwidVwiLCBcIm5pXCIsIFwiYmllblwiLCBcIm9yYVwiXTtcbi8vICdJZ3VhbCcgaXMgcGFydCBvZiAnaWd1YWwuLi5xdWUnLlxudmFyIGNvcnJlbGF0aXZlQ29uanVuY3Rpb25zID0gW1wiaWd1YWxcIl07XG52YXIgc3Vib3JkaW5hdGluZ0Nvbmp1bmN0aW9ucyA9IFtcImFwZW5hc1wiLCBcInNlZ3VuXCIsIFwicXVlXCJdO1xuLy8gVGhlc2UgdmVyYnMgYXJlIGZyZXF1ZW50bHkgdXNlZCBpbiBpbnRlcnZpZXdzIHRvIGluZGljYXRlIHF1ZXN0aW9ucyBhbmQgYW5zd2Vycy5cbi8vICdEaWpvJyBpcyBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBvdGhlckF1eGlsaWFyaWVzIGNhdGVnb3J5LlxudmFyIGludGVydmlld1ZlcmJzID0gW1wiYXB1bnRvXCIsIFwiYXB1bnRhXCIsIFwiY29uZmllc29cIiwgXCJjb25maWVzYVwiLCBcImNvbmZlc2FiYVwiLCBcInJldmVsYWRvXCIsIFwicmV2ZWxvXCIsIFwicmV2ZWxhXCIsIFwicmV2ZWxhYmFcIiwgXCJkZWNsYXJhZG9cIiwgXCJkZWNsYXJvXCIsIFwiZGVjbGFyYVwiLCBcImRlY2xhYmFcIiwgXCJzZcOxYWxvXCIsIFwic2XDsWFsYVwiLCBcInNlw7FhbGFiYVwiLCBcImRlY2xhcmFiYVwiLCBcImNvbWVudG9cIiwgXCJjb21lbnRhXCJdO1xuLy8gVGhlc2UgdHJhbnNpdGlvbiB3b3JkcyB3ZXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgbGlzdCBmb3IgdGhlIHRyYW5zaXRpb24gd29yZCBhc3Nlc3NtZW50IGZvciB2YXJpb3VzIHJlYXNvbnMuXG52YXIgYWRkaXRpb25hbFRyYW5zaXRpb25Xb3JkcyA9IFtcImLDoXNpY2FtZW50ZVwiLCBcImVzZW5jaWFsbWVudGVcIiwgXCJwcmltZXJhbWVudGVcIiwgXCJzaWVtcHJlXCIsIFwibnVuY2FcIiwgXCJhaG9yYVwiLCBcInF1aXrDoVwiLCBcImFjYXNvXCIsIFwiaW5jbHVzaXZlXCIsIFwicHJvYmFibGVtZW50ZVwiLCBcInZlcmRhZGVyYW1lbnRlXCIsIFwic2VndXJhbWVudGVcIiwgXCJqYW3DoXNcIiwgXCJvYnZpYW1lbnRlXCIsIFwiaW5kaXNjdXRpYmxlbWVudFwiLCBcImlubWVkaWF0YW1lbnRlXCIsIFwicHJldmlhbWVudGVcIl07XG52YXIgaW50ZW5zaWZpZXJzID0gW1wibXV5XCIsIFwidGFuXCIsIFwiY29tcGxldGFtZW50ZVwiLCBcInN1ZmljaWVudGVcIiwgXCJ0YWxcIiwgXCJ0YWxlc1wiXTtcbi8vIFRoZXNlIHZlcmJzIGNvbnZleSBsaXR0bGUgbWVhbmluZy5cbnZhciBkZWxleGljYWxpemVkVmVyYnMgPSBbXCJoYWdvXCIsIFwiaGFjZXNcIiwgXCJoYWNlXCIsIFwiaGFjZW1vc1wiLCBcImhhY8OpaXNcIiwgXCJoYWNlblwiLCBcImhpY2VcIiwgXCJoaWNpc3RlXCIsIFwiaGl6b1wiLCBcImhpY2ltb3NcIiwgXCJoaWNpc3RlaXNcIiwgXCJoaWNpZXJvblwiLCBcImhhY8OtYVwiLCBcImhhY8OtYXNcIiwgXCJoYWPDrWFtb3NcIiwgXCJoYWPDrWFpc1wiLCBcImhhY8OtYW5cIiwgXCJoYXLDrWEsXCIsIFwiaGFyw61hc1wiLCBcImhhcsOtYW1vc1wiLCBcImhhcsOtYWlzXCIsIFwiaGFyw61hblwiLCBcImhhcsOpXCIsIFwiaGFyw6FzXCIsIFwiaGFyw6FcIiwgXCJoYXJlbW9zXCIsIFwiaGFyw6lpc1wiLCBcImhhcsOhblwiLCBcImhhZ2FcIiwgXCJoYWdhc1wiLCBcImhhZ2Ftb3NcIiwgXCJoYWfDoWlzXCIsIFwiaGFnYW5cIiwgXCJoaWNpZXJhXCIsIFwiaGljaWVyYXNcIiwgXCJoaWNpw6lyYW1vc1wiLCBcImhpY2llcmFpc1wiLCBcImhpY2llcmFuXCIsIFwiaGljaWVzZVwiLCBcImhpY2llc2VzXCIsIFwiaGljacOpc2Vtb3NcIiwgXCJoaWNpZXNlaXNcIiwgXCJoaWNpZXNlblwiLCBcImhpY2llcmVcIiwgXCJoaWNpZXJlc1wiLCBcImhpY2nDqXJlbW9zXCIsIFwiaGljaWVyZWlzXCIsIFwiaGljaWVyZW5cIiwgXCJoYXpcIiwgXCJoYWNlZFwiLCBcImhlY2hvXCIsIFwicGFyZXpjb1wiLCBcInBhcmVjZXNcIiwgXCJwYXJlY2VcIiwgXCJwYXJlY2Vtb3NcIiwgXCJwYXJlY8OpaXNcIiwgXCJwYXJlY2VuXCIsIFwicGFyZWPDrVwiLCBcInBhcmVjaXN0ZVwiLCBcInBhcmVjacOzXCIsIFwicGFyZWNpbW9zXCIsIFwicGFyZWNpc3RlaXNcIiwgXCJwYXJlY2llcm9uXCIsIFwicGFyZWPDrWFcIiwgXCJwYXJlY8OtYXNcIiwgXCJwYXJlY8OtYW1vc1wiLCBcInBhcmVjw61haXNcIiwgXCJwYXJlY8OtYW5cIiwgXCJwYXJlY2Vyw61hXCIsIFwicGFyZWNlcsOtYXNcIiwgXCJwYXJlY2Vyw61hbW9zXCIsIFwicGFyZWNlcsOtYWlzXCIsIFwicGFyZWNlcsOtYW5cIiwgXCJwYXJlY2Vyw6lcIiwgXCJwYXJlY2Vyw6FzXCIsIFwicGFyZWNlcsOhXCIsIFwicGFyZWNlcmVtb3NcIiwgXCJwYXJlY2Vyw6lpc1wiLCBcInBhcmVjZXLDoW5cIiwgXCJwYXJlemNhXCIsIFwicGFyZXpjYXNcIiwgXCJwYXJlemNhbW9zXCIsIFwicGFyZXpjw6Fpc1wiLCBcInBhcmV6Y2FuXCIsIFwicGFyZWNpZXJhXCIsIFwicGFyZWNpZXJhc1wiLCBcInBhcmVjacOpcmFtb3NcIiwgXCJwYXJlY2llcmFpc1wiLCBcInBhcmVjaWVyYW5cIiwgXCJwYXJlY2llc2VcIiwgXCJwYXJlY2llc2VzXCIsIFwicGFyZWNpw6lzZW1vc1wiLCBcInBhcmVjaWVzZWlzXCIsIFwicGFyZWNpZXNlblwiLCBcInBhcmVjaWVyZVwiLCBcInBhcmVjaWVyZXNcIiwgXCJwYXJlY2nDqXJlbW9zXCIsIFwicGFyZWNpZXJlaXNcIiwgXCJwYXJlY2llcmVuXCIsIFwicGFyZWNlZFwiLCBcInBhcmVjaWRvXCJdO1xudmFyIGRlbGV4aWNhbGl6ZWRWZXJic0luZmluaXRpdmUgPSBbXCJoYWNlclwiLCBcInBhcmVjZXJcIl07XG4vLyBUaGVzZSBhZGplY3RpdmVzIGFuZCBhZHZlcmJzIGFyZSBzbyBnZW5lcmFsLCB0aGV5IHNob3VsZCBuZXZlciBiZSBzdWdnZXN0ZWQgYXMgYSAoc2luZ2xlKSBrZXl3b3JkLlxuLy8gS2V5d29yZCBjb21iaW5hdGlvbnMgY29udGFpbmluZyB0aGVzZSBhZGplY3RpdmVzL2FkdmVyYnMgYXJlIGZpbmUuXG52YXIgZ2VuZXJhbEFkamVjdGl2ZXNBZHZlcmJzID0gW1wiZW5mcmVudGVcIiwgXCJtZWpvclwiLCBcInBlb3JcIiwgXCJtZW5vc1wiLCBcImNsYXJvXCIsIFwiYnVlbm9cIiwgXCJudWV2b1wiLCBcIm51ZXZhXCIsIFwibnVldm9zXCIsIFwibnVldmFzXCIsIFwidmllam9cIiwgXCJ2aWVqb3NcIiwgXCJ2aWVqYVwiLCBcInZpZWphc1wiLCBcImFudGVyaW9yXCIsIFwiZ3JhbmRlXCIsIFwiZ3JhblwiLCBcImdyYW5kZXNcIiwgXCJtYXlvcmVzXCIsIFwiZsOhY2lsXCIsIFwiZsOhY2lsZXNcIiwgXCJyw6FwaWRvXCIsIFwicsOhcGlkYVwiLCBcInLDoXBpZG9zXCIsIFwicsOhcGlkYXNcIiwgXCJsZWpvc1wiLCBcImxlamFzXCIsIFwiZGlmw61jaWxcIiwgXCJkaWbDrWNpbGVzXCIsIFwicHJvcGlvXCIsIFwicHJvcGlvc1wiLCBcInByb3BpYVwiLCBcInByb3BpYXNcIiwgXCJsYXJnb1wiLCBcImxhcmdhXCIsIFwibGFyZ29zXCIsIFwibGFyZ2FzXCIsIFwiYmFqb3NcIiwgXCJiYWphXCIsIFwiYmFqYXNcIiwgXCJhbHRvXCIsIFwiYWx0YVwiLCBcImFsdG9zXCIsIFwiYWx0YXNcIiwgXCJyZWd1bGFyXCIsIFwicmVndWxhcmVzXCIsIFwibm9ybWFsXCIsIFwicGVxdWXDsW9cIiwgXCJwZXF1ZcOxYVwiLCBcInBlcXVlw7Fvc1wiLCBcInBlcXVlw7Fhc1wiLCBcImRpbWludXRhXCIsIFwiZGltaW51dG9cIiwgXCJkaW1pbnV0YXNcIiwgXCJkaW1pbnV0b3NcIiwgXCJjaGlxdWl0aXRvXCIsIFwiY2hpcXVpdGl0b3NcIiwgXCJjaGlxdWl0aXRhXCIsIFwiY2hpcXVpdGl0YXNcIiwgXCJjb3J0YVwiLCBcImNvcnRvXCIsIFwiY29ydGFzXCIsIFwiY29ydG9zXCIsIFwicHJpbmNpcGFsXCIsIFwicHJpbmNpcGFsZXNcIiwgXCJtaXNtb1wiLCBcIm1pc21vc1wiLCBcIm1pc21hXCIsIFwibWlzbWFzXCIsIFwiY2FwYXpcIiwgXCJjYXBhY2VzXCIsIFwiY2llcnRhXCIsIFwiY2llcnRvXCIsIFwiY2llcnRhc1wiLCBcImNpZXJ0b3NcIiwgXCJsbGFtYWRvXCIsIFwibGxhbWFkYVwiLCBcImxsYW1hZG9zXCIsIFwibGxhbWFkYXNcIiwgXCJtYXlvcm1lbnRlXCIsIFwicmVjaWVudGVcIiwgXCJyZWNpZW50ZXNcIiwgXCJjb21wbGV0YVwiLCBcImNvbXBsZXRvXCIsIFwiY29tcGxldGFzXCIsIFwiY29tcGxldG9zXCIsIFwiYWJzb2x1dGFcIiwgXCJhYnNvbHV0b1wiLCBcImFic29sdXRhc1wiLCBcImFic29sdXRvc1wiLCBcIsO6bHRpbWFtZW50ZVwiLCBcInBvc2libGVcIiwgXCJjb23Dum5cIiwgXCJjb23Dum5lc1wiLCBcImNvbcO6bm1lbnRlXCIsIFwiY29uc3RhbnRlbWVudGVcIiwgXCJjb250aW51YW1lbnRlXCIsIFwiZGlyZWN0YW1lbnRlXCIsIFwiZsOhY2lsbWVudGVcIiwgXCJjYXNpXCIsIFwibGlnZXJhbWVudGVcIiwgXCJlc3RpbWFcIiwgXCJlc3RpbWFkYVwiLCBcImVzdGltYWRvXCIsIFwiYXByb3hpbWFkYVwiLCBcImFwcm94aW1hZGFtZW50ZVwiLCBcIsO6bHRpbWFcIiwgXCLDumx0aW1hc1wiLCBcIsO6bHRpbW9cIiwgXCLDumx0aW1vc1wiLCBcImRpZmVyZW50ZVwiLCBcImRpZmVyZW50ZXNcIiwgXCJzaW1pbGFyXCIsIFwibWFsXCIsIFwibWFsb1wiLCBcIm1hbG9zXCIsIFwibWFsYVwiLCBcIm1hbGFzXCIsIFwicGVyZmVjdGFtZW50ZVwiLCBcImV4Y2VsZW50ZVwiLCBcImZpbmFsXCIsIFwiZ2VuZXJhbFwiXTtcbnZhciBpbnRlcmplY3Rpb25zID0gW1wiYWhcIiwgXCJlaFwiLCBcImVqZW1cIiwgXCJlbGVcIiwgXCJhY2jDrXNcIiwgXCJhZGnDs3NcIiwgXCJhZ3VyXCIsIFwiYWrDoVwiLCBcImFqYWrDoVwiLCBcImFsYVwiLCBcImFsw6FcIiwgXCJhbGJyaWNpYXNcIiwgXCJhbGVsdXlhXCIsIFwiYWxlcnRhXCIsIFwiYWxpcsOzblwiLCBcImFsw7NcIiwgXCJhbWFsYXlhXCIsIFwiYXJcIiwgXCJhcm9cIiwgXCJhcnJhcnJheVwiLCBcImFycmVcIiwgXCJhcnNhXCIsIFwiYXRhdGF5XCIsIFwiYcO6cGFcIiwgXCJheFwiLCBcImF5XCIsIFwiYXlheWF5XCIsIFwiYmFoXCIsIFwiYmFuemFpXCIsIFwiYmFyYWpvXCIsIFwiYmxhXCIsIFwiYnJhdm9cIiwgXCJidWZcIiwgXCJidW1cIiwgXCJjYVwiLCBcImNhZ3VlbmRpw7NzXCIsIFwiY2FuYXN0b3NcIiwgXCJjYXJhY2hvXCIsIFwiY2FyYWNvbGVzXCIsIFwiY2FyYWpvXCIsIFwiY2FyYW1iYVwiLCBcImNhcmFwZVwiLCBcImNhcmF5XCIsIFwiY8Ohc2NhcmFzXCIsIFwiY8Ohc3BpdGFcIiwgXCJjYXRhcGx1bVwiLCBcImNlXCIsIFwiY2hhb1wiLCBcImNoYXVcIiwgXCJjaGVcIiwgXCJjaGlzXCIsIFwiY2hpc3RcIiwgXCJjaGl0w7NuXCIsIFwiY2hvXCIsIFwiY2h1Y2hvXCIsIFwiY2h1c1wiLCBcImNpZWxvc1wiLCBcImNsb1wiLCBcImNvY2hlXCIsIFwiY29jaGlcIiwgXCJjb2pvbmVzXCIsIFwiY29uY2hvXCIsIFwiY2/DsW9cIiwgXCJjw7NyY2hvbGlzXCIsIFwiY3VjaMOtXCIsIFwiY3VpZGFkb1wiLCBcImN1elwiLCBcImRlbW9uaW9cIiwgXCJkZW1vbnRyZVwiLCBcImRlc3BhY2lvXCIsIFwiZGlhYmxvXCIsIFwiZGlhbnRyZVwiLCBcImRpb3NcIiwgXCJlYVwiLCBcImVwYVwiLCBcImVxdWlsaWN1w6FcIiwgXCJlc3TDunBpZG9cIiwgXCJldXJla2FcIiwgXCJldm9ow6lcIiwgXCJleGFjdG9cIiwgXCJmYW50w6FzdGljb1wiLCBcImZpcm1lc1wiLCBcImZvXCIsIFwiZm9ydGVcIiwgXCJndWFcIiwgXCJndWFsw6FcIiwgXCJndWFydGVcIiwgXCJndWF5XCIsIFwiaGFsYVwiLCBcImhhbGVcIiwgXCJoZVwiLCBcImhpXCIsIFwiaGluXCIsIFwiaG9sYVwiLCBcImhvcG9cIiwgXCJodWVzcXVlXCIsIFwiaHVpY2hlXCIsIFwiaHVpY2jDs1wiLCBcImh1aWZhXCIsIFwiaHVycmFcIiwgXCJodXlcIiwgXCJqYVwiLCBcImphamFqw6FcIiwgXCJqYWpheVwiLCBcImphcXVlXCIsIFwiamF1XCIsIFwiam9cIiwgXCJqb2JhclwiLCBcImpvZGVyXCIsIFwiam9sw61uXCIsIFwiam9wb1wiLCBcImxlw7FlXCIsIFwibGlzdG9cIiwgXCJtYWxoYXlhc1wiLCBcIm1hbW9sYVwiLCBcIm1lY2FjaGlzXCIsIFwibWnDqWNoaWNhXCIsIFwibW9uZG9cIiwgXCJtb3N0ZVwiLCBcIm11dGlzXCIsIFwibmFuYXlcIiwgXCJuYXJpY2VzXCIsIFwib2hcIiwgXCJvamFsw6FcIiwgXCJvam9cIiwgXCJva2F5XCIsIFwib2xlXCIsIFwib2zDqVwiLCBcIsOzcmRpZ2FcIiwgXCJvc3RlXCIsIFwib3N0cmFzXCIsIFwib3hcIiwgXCJveHRlXCIsIFwicGFmXCIsIFwicGFyZGllelwiLCBcInBhc29cIiwgXCJwdWNoYVwiLCBcInB1ZlwiLCBcInB1ZmZcIiwgXCJwdW1iYVwiLCBcInB1w7FldGFcIiwgXCJxdWlhXCIsIFwicXVpw7pib2xlXCIsIFwicmVjw7NyY2hvbGlzXCIsIFwicmVkaWV6XCIsIFwicmVkacOzc1wiLCBcInNhbHZlXCIsIFwic2Fuc2VhY2Fiw7NcIiwgXCJzbmlmZlwiLCBcInNvY29ycm9cIiwgXCJ0YVwiLCBcInRhcmFyaXJhXCIsIFwidGF0ZVwiLCBcInR1cnVyw7pcIiwgXCJ1ZlwiLCBcInVoXCIsIFwidWlcIiwgXCJ1cGFcIiwgXCJ1c3RlXCIsIFwidXlcIiwgXCJ2aWN0b3JpYVwiLCBcInbDrXRvclwiLCBcInZpdmFcIiwgXCJ6YVwiLCBcInphbWJvbWJhXCIsIFwiemFwYXRldGFcIiwgXCJ6YXBlXCIsIFwiemFzXCJdO1xuLy8gVGhlc2Ugd29yZHMgYW5kIGFiYnJldmlhdGlvbnMgYXJlIGZyZXF1ZW50bHkgdXNlZCBpbiByZWNpcGVzIGluIGxpc3RzIG9mIGluZ3JlZGllbnRzLlxudmFyIHJlY2lwZVdvcmRzID0gW1wia2dcIiwgXCJtZ1wiLCBcImdyXCIsIFwiZ1wiLCBcImttXCIsIFwibVwiLCBcImxcIiwgXCJtbFwiLCBcImNsXCJdO1xudmFyIHRpbWVXb3JkcyA9IFtcIm1pbnV0b1wiLCBcIm1pbnV0b3NcIiwgXCJob3JhXCIsIFwiaG9yYXNcIiwgXCJkw61hXCIsIFwiZMOtYXNcIiwgXCJzZW1hbmFcIiwgXCJzZW1hbmFzXCIsIFwibWVzXCIsIFwibWVzZXNcIiwgXCJhw7FvXCIsIFwiYcOxb3NcIiwgXCJob3lcIiwgXCJtYcOxYW5hXCIsIFwiYXllclwiXTtcbi8vICdQZW9wbGUnIHNob3VsZCBvbmx5IGJlIHJlbW92ZWQgaW4gY29tYmluYXRpb24gd2l0aCAnc29tZScsICdtYW55JyBhbmQgJ2ZldycgKGFuZCBpcyB0aGVyZWZvcmUgbm90IHlldCBpbmNsdWRlZCBpbiB0aGUgbGlzdCBiZWxvdykuXG52YXIgdmFndWVOb3VucyA9IFtcImNvc2FcIiwgXCJjb3Nhc1wiLCBcIm1hbmVyYVwiLCBcIm1hbmVyYXNcIiwgXCJjYXNvXCIsIFwiY2Fzb3NcIiwgXCJwaWV6YVwiLCBcInBpZXphc1wiLCBcInZlelwiLCBcInZlY2VzXCIsIFwicGFydGVcIiwgXCJwYXJ0ZXNcIiwgXCJwb3JjZW50YWplXCIsIFwiaW5zdGFuY2lhXCIsIFwiYXNwZWN0b1wiLCBcImFzcGVjdG9zXCIsIFwicHVudG9cIiwgXCJwdW50b3NcIiwgXCJvYmpldG9cIiwgXCJvYmplY3Rvc1wiLCBcInBlcnNvbmFcIiwgXCJwZXJzb25hc1wiXTtcbnZhciBtaXNjZWxsYW5lb3VzID0gW1wibm9cIiwgXCJldXJvc1wiXTtcbnZhciB0aXRsZXNQcmVjZWRpbmcgPSBbXCJzcmFcIiwgXCJzcmFzXCIsIFwic3J0YVwiLCBcInNyXCIsIFwic3Jlc1wiLCBcImRyYVwiLCBcImRyXCIsIFwicHJvZmFcIiwgXCJwcm9mXCJdO1xudmFyIHRpdGxlc0ZvbGxvd2luZyA9IFtcImpyXCIsIFwic3JcIl07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBUaGVzZSB3b3JkIGNhdGVnb3JpZXMgYXJlIGZpbHRlcmVkIGF0IHRoZSBiZWdpbm5pbmcgb2Ygd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQXRCZWdpbm5pbmc6IGdlbmVyYWxBZGplY3RpdmVzQWR2ZXJicyxcbiAgICAgICAgLy8gVGhlc2Ugd29yZCBjYXRlZ29yaWVzIGFyZSBmaWx0ZXJlZCBhdCB0aGUgZW5kaW5nIG9mIHdvcmQgY29tYmluYXRpb25zLlxuICAgICAgICBmaWx0ZXJlZEF0RW5kaW5nOiBbXS5jb25jYXQob3JkaW5hbE51bWVyYWxzLCBvdGhlckF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgY29wdWxhSW5maW5pdGl2ZSwgZGVsZXhpY2FsaXplZFZlcmJzSW5maW5pdGl2ZSksXG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIG9mIHdvcmQgY29tYmluYXRpb25zLlxuICAgICAgICBmaWx0ZXJlZEF0QmVnaW5uaW5nQW5kRW5kaW5nOiBbXS5jb25jYXQoYXJ0aWNsZXMsIHByZXBvc2l0aW9ucywgY29vcmRpbmF0aW5nQ29uanVuY3Rpb25zLCBkZW1vbnN0cmF0aXZlUHJvbm91bnMsIGludGVuc2lmaWVycywgcXVhbnRpZmllcnMsIHBvc3Nlc3NpdmVQcm9ub3VucyksXG4gICAgICAgIC8vIFRoZXNlIHdvcmQgY2F0ZWdvcmllcyBhcmUgZmlsdGVyZWQgZXZlcnl3aGVyZSB3aXRoaW4gd29yZCBjb21iaW5hdGlvbnMuXG4gICAgICAgIGZpbHRlcmVkQW55d2hlcmU6IFtdLmNvbmNhdCh0cmFuc2l0aW9uV29yZHMsIHBlcnNvbmFsUHJvbm91bnNOb21pbmF0aXZlLCBwZXJzb25hbFByb25vdW5zQWNjdXNhdGl2ZSwgcGVyc29uYWxQcm9ub3Vuc1ByZXBvc2l0aW9uYWwsIHBlcnNvbmFsUHJvbm91bnNDb21pdGF0aXZlLCBpbnRlcmplY3Rpb25zLCBjYXJkaW5hbE51bWVyYWxzLCBvdGhlckF1eGlsaWFyaWVzLCBjb3B1bGEsIGludGVydmlld1ZlcmJzLCBkZWxleGljYWxpemVkVmVyYnMsIGluZGVmaW5pdGVQcm9ub3VucywgY29ycmVsYXRpdmVDb25qdW5jdGlvbnMsIHN1Ym9yZGluYXRpbmdDb25qdW5jdGlvbnMsIGludGVycm9nYXRpdmVEZXRlcm1pbmVycywgaW50ZXJyb2dhdGl2ZVByb25vdW5zLCBpbnRlcnJvZ2F0aXZlUHJvQWR2ZXJicywgbG9jYXRpdmVBZHZlcmJzLCBtaXNjZWxsYW5lb3VzLCBwcmVwb3NpdGlvbmFsQWR2ZXJicywgcmVjaXBlV29yZHMsIHRpbWVXb3JkcywgdmFndWVOb3VucyksXG4gICAgICAgIC8vIFRoaXMgZXhwb3J0IGNvbnRhaW5zIGFsbCBvZiB0aGUgYWJvdmUgd29yZHMuXG4gICAgICAgIGFsbDogW10uY29uY2F0KGFydGljbGVzLCBjYXJkaW5hbE51bWVyYWxzLCBvcmRpbmFsTnVtZXJhbHMsIGRlbW9uc3RyYXRpdmVQcm9ub3VucywgcG9zc2Vzc2l2ZVByb25vdW5zLCBwZXJzb25hbFByb25vdW5zTm9taW5hdGl2ZSwgcGVyc29uYWxQcm9ub3Vuc0NvbWl0YXRpdmUsIHBlcnNvbmFsUHJvbm91bnNQcmVwb3NpdGlvbmFsLCBwZXJzb25hbFByb25vdW5zQWNjdXNhdGl2ZSwgcXVhbnRpZmllcnMsIGluZGVmaW5pdGVQcm9ub3VucywgaW50ZXJyb2dhdGl2ZURldGVybWluZXJzLCBpbnRlcnJvZ2F0aXZlUHJvbm91bnMsIGludGVycm9nYXRpdmVQcm9BZHZlcmJzLCBsb2NhdGl2ZUFkdmVyYnMsIHByZXBvc2l0aW9uYWxBZHZlcmJzLCBvdGhlckF1eGlsaWFyaWVzLCBvdGhlckF1eGlsaWFyaWVzSW5maW5pdGl2ZSwgY29wdWxhLCBjb3B1bGFJbmZpbml0aXZlLCBwcmVwb3NpdGlvbnMsIGNvb3JkaW5hdGluZ0Nvbmp1bmN0aW9ucywgY29ycmVsYXRpdmVDb25qdW5jdGlvbnMsIHN1Ym9yZGluYXRpbmdDb25qdW5jdGlvbnMsIGludGVydmlld1ZlcmJzLCB0cmFuc2l0aW9uV29yZHMsIGFkZGl0aW9uYWxUcmFuc2l0aW9uV29yZHMsIGludGVuc2lmaWVycywgZGVsZXhpY2FsaXplZFZlcmJzLCBkZWxleGljYWxpemVkVmVyYnNJbmZpbml0aXZlLCBpbnRlcmplY3Rpb25zLCBnZW5lcmFsQWRqZWN0aXZlc0FkdmVyYnMsIHJlY2lwZVdvcmRzLCB2YWd1ZU5vdW5zLCBtaXNjZWxsYW5lb3VzLCB0aXRsZXNQcmVjZWRpbmcsIHRpdGxlc0ZvbGxvd2luZylcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9uV29yZHMuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbldvcmRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKiogQG1vZHVsZSBjb25maWcvdHJhbnNpdGlvbldvcmRzICovXG5cbnZhciBzaW5nbGVXb3JkcyA9IFtcImFkZW3DoXNcIiwgXCJhZGljaW9uYWxcIiwgXCJhc8OtXCIsIFwiYXNpbWlzbW9cIiwgXCJhw7puXCIsIFwiYXVucXVlXCIsIFwiY2llcnRhbWVudGVcIiwgXCJjb21vXCIsIFwiY29uY2x1eWVuZG9cIiwgXCJjb25xdWVcIiwgXCJjb250cmFyaWFtZW50ZVwiLCBcImN1YW5kb1wiLCBcImRlY2lkaWRhbWVudGVcIiwgXCJkZWNpc2l2YW1lbnRlXCIsIFwiZGVzcHXDqXNcIiwgXCJkaWZlcmVudGVtZW50ZVwiLCBcImVmZWN0aXZhbWVudGVcIiwgXCJlbnRvbmNlc1wiLCBcImVzcGVjaWFsbWVudGVcIiwgXCJlc3BlY8OtZmljYW1lbnRlXCIsIFwiZXZlbnR1YWxtZW50ZVwiLCBcImV2aWRlbnRlbWVudGVcIiwgXCJmaW5hbG1lbnRlXCIsIFwiZnJlY3VlbnRlbWVudGVcIiwgXCJnZW5lcmFsbWVudGVcIiwgXCJpZ3VhbG1lbnRlXCIsIFwibMOzZ2ljYW1lbnRlXCIsIFwibHVlZ29cIiwgXCJtYXNcIiwgXCJtaWVudHJhc1wiLCBcInBlcm9cIiwgXCJwb3JcIiwgXCJwb3JxdWVcIiwgXCJwb3N0ZXJpb3JtZW50ZVwiLCBcInByaW1lcm9cIiwgXCJwcmluY2lwYWxtZW50ZVwiLCBcInByb250b1wiLCBcInByw7N4aW1hbWVudGVcIiwgXCJwdWVzXCIsIFwicmFyYW1lbnRlXCIsIFwicmVhbG1lbnRlXCIsIFwic2VndWlkYW1lbnRlXCIsIFwic2VndW5kb1wiLCBcInNlbWVqYW50ZW1lbnRlXCIsIFwic2lcIiwgXCJzaWd1aWVudGVcIiwgXCJzaW5vXCIsIFwic8O6Yml0YW1lbnRlXCIsIFwic3Vwb25nYW1vc1wiLCBcInRhbWJpw6luXCIsIFwidGFtcG9jb1wiLCBcInRlcmNlcm9cIiwgXCJ2ZXJiaWdyYWNpYVwiLCBcInZpY2UtdmVyc2FcIiwgXCJ5YVwiXTtcbnZhciBtdWx0aXBsZVdvcmRzID0gW1wiYSBjYXVzYSBkZVwiLCBcImEgY29udGludWFjacOzblwiLCBcImEgZGlmZXJlbmNpYSBkZVwiLCBcImEgZmluIGRlIGN1ZW50YXNcIiwgXCJhIGxhIGludmVyc2FcIiwgXCJhIGxhIG1pc21hIHZlelwiLCBcImEgbcOhcyBkZVwiLCBcImEgbcOhcyBkZSBlc3RvXCIsIFwiYSBtZW5vcyBxdWVcIiwgXCJhIG5vIHNlciBxdWVcIiwgXCJhIHBlc2FyIGRlXCIsIFwiYSBwZXNhciBkZSBlc29cIiwgXCJhIHBlc2FyIGRlIHRvZG9cIiwgXCJhIHBlc2VyIGRlXCIsIFwiYSBwcm9ww7NzaXRvXCIsIFwiYSBzYWJlclwiLCBcImEgdG9kbyBlc3RvXCIsIFwiYWhvcmEgYmllblwiLCBcImFsIGNvbnRyYXJpb1wiLCBcImFsIGZpbiB5IGFsIGNhYm9cIiwgXCJhbCBmaW5hbFwiLCBcImFsIGluaWNpb1wiLCBcImFsIG1pc21vIHRpZW1wb1wiLCBcImFsIHByaW5jaXBpb1wiLCBcImFudGUgdG9kb1wiLCBcImFudGVzIGJpZW5cIiwgXCJhbnRlcyBkZVwiLCBcImFudGVzIGRlIG5hZGFcIiwgXCJhbnRlcyBxdWUgbmFkYVwiLCBcImFwYXJ0ZSBkZVwiLCBcImFzIGFzw60gY29tb1wiLCBcImFzw60gY29tb1wiLCBcImFzw60gbWlzbW9cIiwgXCJhc8OtIHB1ZXNcIiwgXCJhc8OtIHF1ZVwiLCBcImFzw60geSB0b2RvXCIsIFwiYcO6biBhc8OtXCIsIFwiY2xhcm8gZXN0w6EgcXVlXCIsIFwiY2xhcm8gcXVlXCIsIFwiY2xhcm8gcXVlIHPDrVwiLCBcImNvbW8gY2FzbyB0w61waWNvXCIsIFwiY29tbyBkZWPDrWFtb3NcIiwgXCJjb21vIGVyYSBkZSBlc3BlcmFyXCIsIFwiY29tbyBlcyBkZSBlc3BlcmFyXCIsIFwiY29tbyBtdWVzdHJhXCIsIFwiY29tbyByZXN1bHRhZG9cIiwgXCJjb21vIHNlIGhhIG5vdGFkb1wiLCBcImNvbW8gc2lndWVcIiwgXCJjb21wYXJhZG8gY29uXCIsIFwiY29uIGVsIG9iamV0byBkZVwiLCBcImNvbiBlbCBwcm9ww7NzaXRvIGRlXCIsIFwiY29uIHF1ZVwiLCBcImNvbiByZWxhY2nDs24gYVwiLCBcImNvbiB0YWwgZGUgcXVlXCIsIFwiY29uIHRvZG9cIiwgXCJkYWRvIHF1ZVwiLCBcImRlIGFow61cIiwgXCJkZSBjaWVydGEgbWFuZXJhXCIsIFwiZGUgY3VhbHF1aWVyIG1hbmVyYVwiLCBcImRlIGN1YWxxdWllciBtb2RvXCIsIFwiZGUgZWxsbyByZXN1bHRhIHF1ZVwiLCBcImRlIGVzdGUgbW9kb1wiLCBcImRlIGdvbHBlXCIsIFwiZGUgaGVjaG9cIiwgXCJkZSBpZ3VhbCBtYW5lcmFcIiwgXCJkZSBpZ3VhbCBtb2RvXCIsIFwiZGUgaWd1YWxtYW5lcmFcIiwgXCJkZSBsYSBtYW5lcmEgc2lndWllbnRlXCIsIFwiZGUgbGEgbWlzbWEgZm9ybWFcIiwgXCJkZSBsYSBtaXNtYSBtYW5lcmFcIiwgXCJkZSBtYW5lcmEgc2VtZWphbnRlXCIsIFwiZGVsIG1pc21vIG1vZG9cIiwgXCJkZSBtb2RvIHF1ZVwiLCBcImRlIG51ZXZvXCIsIFwiZGUgb3RyYSBtYW5lcmFcIiwgXCJkZSBvdHJvIG1vZG9cIiwgXCJkZSBwcm9udG9cIiwgXCJkZSBxdWFscXVpZXIgbWFuZXJhXCIsIFwiZGUgcmVwZW50ZVwiLCBcImRlIHN1ZXJ0ZSBxdWVcIiwgXCJkZSB0YWwgbW9kb1wiLCBcImRlIHRvZGFzIGZvcm1hc1wiLCBcImRlIHRvZGFzIG1hbmVyYXNcIiwgXCJkZSB0b2RvcyBtb2Rvc1wiLCBcImRlIHZlcmFzXCIsIFwiZGViaWRvIGFcIiwgXCJkZWJpZG8gYSBxdWVcIiwgXCJkZWwgbWlzbW8gbW9kb1wiLCBcImRlbnRybyBkZSBwb2NvXCIsIFwiZGVzZGUgZW50b25jZXNcIiwgXCJkZXNwdcOpcyBkZVwiLCBcImRlc3B1w6lzIGRlIHRvZG9cIiwgXCJlamVtcGxvIGRlIGVzdG9cIiwgXCJlbCBjYXNvIGVzIHF1ZVwiLCBcImVuIGFxdWVsIHRpZW1wb1wiLCBcImVuIGNhbWJpb1wiLCBcImVuIGNpZXJ0byBtb2RvXCIsIFwiZW4gY29tcGFyYWNpw7NuIGNvblwiLCBcImVuIGNvbmNsdXNpw7NuXCIsIFwiZW4gY29uY3JldG9cIiwgXCJlbiBjb25mb3JtaWRhZCBjb25cIiwgXCJlbiBjb25zZWN1ZW5jaWFcIiwgXCJlbiBjb25zaWd1aWVudGVcIiwgXCJlbiBjb250cmFzdGUgY29uXCIsIFwiZW4gY3VhbHF1aWVyIGNhc29cIiwgXCJlbiBjdWFudG9cIiwgXCJlbiBjdWFudG8gYVwiLCBcImVuIGRlZmluaXRpdmFcIiwgXCJlbiBlZmVjdG9cIiwgXCJlbiBlbCBjYXNvIGRlIHF1ZVwiLCBcImVuIGVzdGUgc2VudGlkb1wiLCBcImVuIGZpblwiLCBcImVuIGZpbiBkZSBjdWVudGFzXCIsIFwiZW4gZ2VuZXJhbFwiLCBcImVuIGx1Z2FyIGRlXCIsIFwiZW4gb3RyYXMgcGFsYWJyYXNcIiwgXCJlbiBvdHJvIG9yZGVuXCIsIFwiZW4gb3Ryb3MgdMOpcm1pbm9zXCIsIFwiZW4gcGFydGljdWxhclwiLCBcImVuIHByaW1lciBsdWdhclwiLCBcImVuIHByaW1lciB0w6lybWlub1wiLCBcImVuIHByaW1lcmEgaW5zdGFuY2lhXCIsIFwiZW4gcmVhbGlkYWRcIiwgXCJlbiByZWxhY2nDs24gYVwiLCBcImVuIHJlbGFjacOzbiBjb25cIiwgXCJlbiByZXByZXNlbnRhY2nDs24gZGVcIiwgXCJlbiByZXN1bWVuXCIsIFwiZW4gcmVzdW1pZGFzIGN1ZW50YXNcIiwgXCJlbiBzZWd1bmRvIGx1Z2FyXCIsIFwiZW4gc2VndWlkYVwiLCBcImVuIHPDrW50ZXNpc1wiLCBcImVuIHN1bWFcIiwgXCJlbiB0b2RvIGNhc29cIiwgXCJlbiDDumx0aW1vIHTDqXJtaW5vXCIsIFwiZW4gdmVyZGFkXCIsIFwiZW4gdmV6IGRlXCIsIFwiZW4gdmlydHVkIGRlXCIsIFwiZW50cmUgZWxsYXMgZmlndXJhXCIsIFwiZW50cmUgZWxsb3MgZmlndXJhXCIsIFwiZXMgY2llcnRvIHF1ZVwiLCBcImVzIGRlY2lyXCIsIFwiZXMgZXZpZGVudGUgcXVlXCIsIFwiZXMgaW5jdWVzdGlvbmFibGVcIiwgXCJlcyBpbmR1ZGFibGVcIiwgXCJlcyBtw6FzXCIsIFwiZXN0w6EgY2xhcm8gcXVlXCIsIFwiZXN0byBpbmRpY2FcIiwgXCJleGNlcHRvIHNpXCIsIFwiZ2VuZXJhbG1lbnRlIHBvciBlamVtcGxvXCIsIFwiZ3JhY2lhcyBhXCIsIFwiaGFzdGEgYXF1w61cIiwgXCJoYXN0YSBjaWVydG8gcHVudG9cIiwgXCJoYXN0YSBlbCBtb21lbnRvXCIsIFwiaGF5IHF1ZSBhw7FhZGlyXCIsIFwiaWd1YWwgcXVlXCIsIFwibGEgbWF5b3IgcGFydGUgZGVsIHRpZW1wb1wiLCBcImxhIG1heW9yw61hIGRlbCB0aWVtcG9cIiwgXCJsbyBxdWUgZXMgcGVvclwiLCBcIm3DoXMgdGFyZGVcIiwgXCJtZWpvciBkaWNob1wiLCBcIm1pZW50cmFzIHRhbnRvXCIsIFwibWlyw6FuZG9sbyB0b2RvXCIsIFwibmFkaWUgcHVlZGUgaWdub3JhclwiLCBcIm5vIGZhbHRhcsOtYSBtw6FzXCIsIFwibm8gb2JzdGFudGVcIiwgXCJvIHNlYVwiLCBcIm90cmEgdmV6XCIsIFwib3RybyBhc3BlY3RvXCIsIFwicGFyIGlsdXN0cmFyXCIsIFwicGFyYSBjb25jbHVpclwiLCBcInBhcmEgY29uY2x1c2nDs25cIiwgXCJwYXJhIGNvbnRpbnVhclwiLCBcInBhcmEgZW1wZXphclwiLCBcInBhcmEgZmluYWxpemFyXCIsIFwicGFyYSBtZW5jaW9uYXIgdW5hIGNvc2FcIiwgXCJwYXJhIHF1ZVwiLCBcInBhcmEgcmVzdW1pclwiLCBcInBhcmEgdGVybWluYXJcIiwgXCJwb25nYW1vcyBwb3IgY2Fzb1wiLCBcInBvciBhw7FhZGlkdXJhXCIsIFwicG9yIGNpZXJ0b1wiLCBcInBvciBjb25zaWd1aWVudGVcIiwgXCJwb3IgZWplbXBsb1wiLCBcInBvciBlbCBjb25zaWd1aWVudGVcIiwgXCJwb3IgZWwgY29udHJhcmlvXCIsIFwicG9yIGVsIGhlY2hvIHF1ZVwiLCBcInBvciBlc29cIiwgXCJwb3IgZXN0YSByYXrDs25cIiwgXCJwb3IgZXN0b1wiLCBcInBvciBmaW5cIiwgXCJwb3IgbGEgbWF5b3IgcGFydGVcIiwgXCJwb3IgbG8gZ2VuZXJhbFwiLCBcInBvciBsbyBxdWVcIiwgXCJwb3IgbG8gdGFudG9cIiwgXCJwb3Igb3RybyBsYWRvXCIsIFwicG9yIG90cmEgcGFydGVcIiwgXCJwb3Igb3RybyBsYWRvXCIsIFwicG9yIHN1cHVlc3RvXCIsIFwicG9yIHRhbnRvXCIsIFwicG9yIMO6bHRpbW9cIiwgXCJwb3IgdW4gbGFkb1wiLCBcInBvciB1bmEgcGFydGVcIiwgXCJwcmltZXJvIHF1ZSBuYWRhXCIsIFwicHJpbWVybyBxdWUgdG9kb1wiLCBcInB1ZXMgYmllblwiLCBcInB1ZXN0byBxdWVcIiwgXCJyYXJhIHZlelwiLCBcInJlc3VsdGEgcXVlXCIsIFwic2VhIGNvbW8gc2VhXCIsIFwic2VndWlkYW1lbnRlIGVudHJlIHRhbnRvXCIsIFwic2kgYmllblwiLCBcInNpZW1wcmUgcXVlXCIsIFwic2llbXByZSB5IGN1YW5kb1wiLCBcInNpZ3VlIHF1ZVwiLCBcInNpbiBkdWRhXCIsIFwic2luIGVtYmFyZ29cIiwgXCJzaW4gaXIgbcOhcyBsZWpvc1wiLCBcInNvYnJlIHRvZG9cIiwgXCJzdXB1ZXN0byBxdWVcIiwgXCJ0YWwgY29tb1wiLCBcInRhbGVzIGNvbW9cIiwgXCJ0YW4gcHJvbnRvIGNvbW9cIiwgXCJ0YW50byBjb21vXCIsIFwidW5hIHZlelwiLCBcInlhIHF1ZVwiXTtcbi8qKlxuICogUmV0dXJucyBsaXN0cyB3aXRoIHRyYW5zaXRpb24gd29yZHMgdG8gYmUgdXNlZCBieSB0aGUgYXNzZXNzbWVudHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2JqZWN0IHdpdGggdHJhbnNpdGlvbiB3b3JkIGxpc3RzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzaW5nbGVXb3Jkczogc2luZ2xlV29yZHMsXG4gICAgICAgIG11bHRpcGxlV29yZHM6IG11bHRpcGxlV29yZHMsXG4gICAgICAgIGFsbFdvcmRzOiBzaW5nbGVXb3Jkcy5jb25jYXQobXVsdGlwbGVXb3JkcylcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zaXRpb25Xb3Jkcy5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zaXRpb25Xb3Jkcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWFwID0gcmVxdWlyZShcImxvZGFzaC9tYXBcIik7XG52YXIgaXNVbmRlZmluZWQgPSByZXF1aXJlKFwibG9kYXNoL2lzVW5kZWZpbmVkXCIpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKFwibG9kYXNoL2ZvckVhY2hcIik7XG52YXIgaXNOYU4gPSByZXF1aXJlKFwibG9kYXNoL2lzTmFOXCIpO1xudmFyIGZpbHRlciA9IHJlcXVpcmUoXCJsb2Rhc2gvZmlsdGVyXCIpO1xudmFyIGZsYXRNYXAgPSByZXF1aXJlKFwibG9kYXNoL2ZsYXRNYXBcIik7XG52YXIgaXNFbXB0eSA9IHJlcXVpcmUoXCJsb2Rhc2gvaXNFbXB0eVwiKTtcbnZhciBuZWdhdGUgPSByZXF1aXJlKFwibG9kYXNoL25lZ2F0ZVwiKTtcbnZhciBtZW1vaXplID0gcmVxdWlyZShcImxvZGFzaC9tZW1vaXplXCIpO1xudmFyIGNvcmUgPSByZXF1aXJlKFwidG9rZW5pemVyMi9jb3JlXCIpO1xudmFyIGdldEJsb2NrcyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2h0bWwuanNcIikuZ2V0QmxvY2tzO1xudmFyIG5vcm1hbGl6ZVF1b3RlcyA9IHJlcXVpcmUoXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3F1b3Rlcy5qc1wiKS5ub3JtYWxpemU7XG52YXIgdW5pZnlXaGl0ZXNwYWNlID0gcmVxdWlyZShcIi4uL3N0cmluZ1Byb2Nlc3NpbmcvdW5pZnlXaGl0ZXNwYWNlLmpzXCIpLnVuaWZ5Tm9uQnJlYWtpbmdTcGFjZTtcbi8vIEFsbCBjaGFyYWN0ZXJzIHRoYXQgaW5kaWNhdGUgYSBzZW50ZW5jZSBkZWxpbWl0ZXIuXG52YXIgZnVsbFN0b3AgPSBcIi5cIjtcbi8vIFRoZSBcXHUyMDI2IGNoYXJhY3RlciBpcyBhbiBlbGxpcHNpc1xudmFyIHNlbnRlbmNlRGVsaW1pdGVycyA9IFwiPyE7XFx1MjAyNlwiO1xudmFyIG5ld0xpbmVzID0gXCJcXG5cXHJ8XFxufFxcclwiO1xudmFyIGZ1bGxTdG9wUmVnZXggPSBuZXcgUmVnRXhwKFwiXltcIiArIGZ1bGxTdG9wICsgXCJdJFwiKTtcbnZhciBzZW50ZW5jZURlbGltaXRlclJlZ2V4ID0gbmV3IFJlZ0V4cChcIl5bXCIgKyBzZW50ZW5jZURlbGltaXRlcnMgKyBcIl0kXCIpO1xudmFyIHNlbnRlbmNlUmVnZXggPSBuZXcgUmVnRXhwKFwiXlteXCIgKyBmdWxsU3RvcCArIHNlbnRlbmNlRGVsaW1pdGVycyArIFwiPFxcXFwoXFxcXClcXFxcW1xcXFxdXSskXCIpO1xudmFyIGh0bWxTdGFydFJlZ2V4ID0gL148KFtePlxcc1xcL10rKVtePl0qPiQvbWk7XG52YXIgaHRtbEVuZFJlZ2V4ID0gL148XFwvKFtePlxcc10rKVtePl0qPiQvbWk7XG52YXIgbmV3TGluZVJlZ2V4ID0gbmV3IFJlZ0V4cChuZXdMaW5lcyk7XG52YXIgYmxvY2tTdGFydFJlZ2V4ID0gL15cXHMqW1xcW1xcKFxce11cXHMqJC87XG52YXIgYmxvY2tFbmRSZWdleCA9IC9eXFxzKltcXF1cXCl9XVxccyokLztcbnZhciB0b2tlbnMgPSBbXTtcbnZhciBzZW50ZW5jZVRva2VuaXplcjtcbi8qKlxuICogQ3JlYXRlcyBhIHRva2VuaXplciB0byBjcmVhdGUgdG9rZW5zIGZyb20gYSBzZW50ZW5jZS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVG9rZW5pemVyKCkge1xuICAgIHRva2VucyA9IFtdO1xuICAgIHNlbnRlbmNlVG9rZW5pemVyID0gY29yZShmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgIH0pO1xuICAgIHNlbnRlbmNlVG9rZW5pemVyLmFkZFJ1bGUoaHRtbFN0YXJ0UmVnZXgsIFwiaHRtbC1zdGFydFwiKTtcbiAgICBzZW50ZW5jZVRva2VuaXplci5hZGRSdWxlKGh0bWxFbmRSZWdleCwgXCJodG1sLWVuZFwiKTtcbiAgICBzZW50ZW5jZVRva2VuaXplci5hZGRSdWxlKGJsb2NrU3RhcnRSZWdleCwgXCJibG9jay1zdGFydFwiKTtcbiAgICBzZW50ZW5jZVRva2VuaXplci5hZGRSdWxlKGJsb2NrRW5kUmVnZXgsIFwiYmxvY2stZW5kXCIpO1xuICAgIHNlbnRlbmNlVG9rZW5pemVyLmFkZFJ1bGUoZnVsbFN0b3BSZWdleCwgXCJmdWxsLXN0b3BcIik7XG4gICAgc2VudGVuY2VUb2tlbml6ZXIuYWRkUnVsZShzZW50ZW5jZURlbGltaXRlclJlZ2V4LCBcInNlbnRlbmNlLWRlbGltaXRlclwiKTtcbiAgICBzZW50ZW5jZVRva2VuaXplci5hZGRSdWxlKHNlbnRlbmNlUmVnZXgsIFwic2VudGVuY2VcIik7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgYSBjZXJ0YWluIGNoYXJhY3RlciBpcyBhIGNhcGl0YWwgbGV0dGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyYWN0ZXIgVGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgY2hhcmFjdGVyIGlzIGEgY2FwaXRhbCBsZXR0ZXIuXG4gKi9cbmZ1bmN0aW9uIGlzQ2FwaXRhbExldHRlcihjaGFyYWN0ZXIpIHtcbiAgICByZXR1cm4gY2hhcmFjdGVyICE9PSBjaGFyYWN0ZXIudG9Mb2NhbGVMb3dlckNhc2UoKTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhIGNlcnRhaW4gY2hhcmFjdGVyIGlzIGEgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyYWN0ZXIgVGhlIGNoYXJhY3RlciB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgY2hhcmFjdGVyIGlzIGEgY2FwaXRhbCBsZXR0ZXIuXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKGNoYXJhY3Rlcikge1xuICAgIHJldHVybiAhaXNOYU4ocGFyc2VJbnQoY2hhcmFjdGVyLCAxMCkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGEgZ2l2ZW4gSFRNTCB0YWcgaXMgYSBicmVhayB0YWcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxUYWcgVGhlIEhUTUwgdGFnIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBIVE1MIHRhZyBpcyBhIGJyZWFrIHRhZy5cbiAqL1xuZnVuY3Rpb24gaXNCcmVha1RhZyhodG1sVGFnKSB7XG4gICAgcmV0dXJuICgvPGJyLy50ZXN0KGh0bWxUYWcpXG4gICAgKTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhIGdpdmVuIGNoYXJhY3RlciBpcyBxdW90YXRpb24gbWFyay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhcmFjdGVyIFRoZSBjaGFyYWN0ZXIgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIGdpdmVuIGNoYXJhY3RlciBpcyBhIHF1b3RhdGlvbiBtYXJrLlxuICovXG5mdW5jdGlvbiBpc1F1b3RhdGlvbihjaGFyYWN0ZXIpIHtcbiAgICBjaGFyYWN0ZXIgPSBub3JtYWxpemVRdW90ZXMoY2hhcmFjdGVyKTtcbiAgICByZXR1cm4gXCInXCIgPT09IGNoYXJhY3RlciB8fCBcIlxcXCJcIiA9PT0gY2hhcmFjdGVyO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGEgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgcHVuY3R1YXRpb24gbWFyayB0aGF0IGNhbiBiZSBhdCB0aGUgYmVnaW5uaW5nXG4gKiBvZiBhIHNlbnRlbmNlLCBsaWtlIMK/IGFuZCDCoSB1c2VkIGluIFNwYW5pc2guXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNoYXJhY3RlciBUaGUgY2hhcmFjdGVyIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiBjaGFyYWN0ZXIgaXMgYSBwdW5jdHVhdGlvbiBtYXJrLlxuICovXG5mdW5jdGlvbiBpc1B1bmN0dWF0aW9uKGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBcIsK/XCIgPT09IGNoYXJhY3RlciB8fCBcIsKhXCIgPT09IGNoYXJhY3Rlcjtcbn1cbi8qKlxuICogVG9rZW5pemVzIGEgc2VudGVuY2UsIGFzc3VtZXMgdGhhdCB0aGUgdGV4dCBoYXMgYWxyZWFkeSBiZWVuIHNwbGl0IGludG8gYmxvY2tzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHRva2VuaXplLlxuICogQHJldHVybnMge0FycmF5fSBBbiBhcnJheSBvZiB0b2tlbnMuXG4gKi9cbmZ1bmN0aW9uIHRva2VuaXplU2VudGVuY2VzKHRleHQpIHtcbiAgICBjcmVhdGVUb2tlbml6ZXIoKTtcbiAgICBzZW50ZW5jZVRva2VuaXplci5vblRleHQodGV4dCk7XG4gICAgc2VudGVuY2VUb2tlbml6ZXIuZW5kKCk7XG4gICAgcmV0dXJuIHRva2Vucztcbn1cbi8qKlxuICogUmVtb3ZlcyBkdXBsaWNhdGUgd2hpdGVzcGFjZSBmcm9tIGEgZ2l2ZW4gdGV4dC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIGR1cGxpY2F0ZSB3aGl0ZXNwYWNlLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHRleHQgd2l0aG91dCBkdXBsaWNhdGUgd2hpdGVzcGFjZS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRHVwbGljYXRlV2hpdGVzcGFjZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvXFxzKy8sIFwiIFwiKTtcbn1cbi8qKlxuICogUmV0cmlldmVzIHRoZSBuZXh0IHR3byBjaGFyYWN0ZXJzIGZyb20gYW4gYXJyYXkgd2l0aCB0aGUgdHdvIG5leHQgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IG5leHRUb2tlbnMgVGhlIHR3byBuZXh0IHRva2Vucy4gTWlnaHQgYmUgdW5kZWZpbmVkLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIG5leHQgdHdvIGNoYXJhY3RlcnMuXG4gKi9cbmZ1bmN0aW9uIGdldE5leHRUd29DaGFyYWN0ZXJzKG5leHRUb2tlbnMpIHtcbiAgICB2YXIgbmV4dCA9IFwiXCI7XG4gICAgaWYgKCFpc1VuZGVmaW5lZChuZXh0VG9rZW5zWzBdKSkge1xuICAgICAgICBuZXh0ICs9IG5leHRUb2tlbnNbMF0uc3JjO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKG5leHRUb2tlbnNbMV0pKSB7XG4gICAgICAgIG5leHQgKz0gbmV4dFRva2Vuc1sxXS5zcmM7XG4gICAgfVxuICAgIG5leHQgPSByZW1vdmVEdXBsaWNhdGVXaGl0ZXNwYWNlKG5leHQpO1xuICAgIHJldHVybiBuZXh0O1xufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHNlbnRlbmNlQmVnaW5uaW5nIGJlZ2lubmluZyBpcyBhIHZhbGlkIGJlZ2lubmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VudGVuY2VCZWdpbm5pbmcgVGhlIGJlZ2lubmluZyBvZiB0aGUgc2VudGVuY2UgdG8gdmFsaWRhdGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgdmFsaWQgYmVnaW5uaW5nLCBmYWxzZSBpZiBpdCBpcyBub3QuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRTZW50ZW5jZUJlZ2lubmluZyhzZW50ZW5jZUJlZ2lubmluZykge1xuICAgIHJldHVybiBpc0NhcGl0YWxMZXR0ZXIoc2VudGVuY2VCZWdpbm5pbmcpIHx8IGlzTnVtYmVyKHNlbnRlbmNlQmVnaW5uaW5nKSB8fCBpc1F1b3RhdGlvbihzZW50ZW5jZUJlZ2lubmluZykgfHwgaXNQdW5jdHVhdGlvbihzZW50ZW5jZUJlZ2lubmluZyk7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgdG9rZW4gaXMgYSB2YWxpZCBzZW50ZW5jZSBlbmRpbmcuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRva2VuIFRoZSB0b2tlbiB0byB2YWxpZGF0ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHRva2VuIGlzIHZhbGlkIGVuZGluZywgZmFsc2UgaWYgaXQgaXMgbm90LlxuICovXG5mdW5jdGlvbiBpc1NlbnRlbmNlU3RhcnQodG9rZW4pIHtcbiAgICByZXR1cm4gIWlzVW5kZWZpbmVkKHRva2VuKSAmJiAoXCJodG1sLXN0YXJ0XCIgPT09IHRva2VuLnR5cGUgfHwgXCJodG1sLWVuZFwiID09PSB0b2tlbi50eXBlIHx8IFwiYmxvY2stc3RhcnRcIiA9PT0gdG9rZW4udHlwZSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VudGVuY2VzIGZvciBhIGdpdmVuIGFycmF5IG9mIHRva2VucywgYXNzdW1lcyB0aGF0IHRoZSB0ZXh0IGhhcyBhbHJlYWR5IGJlZW4gc3BsaXQgaW50byBibG9ja3MuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gdG9rZW5zIFRoZSB0b2tlbnMgZnJvbSB0aGUgc2VudGVuY2UgdG9rZW5pemVyLlxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59IEEgbGlzdCBvZiBzZW50ZW5jZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFNlbnRlbmNlc0Zyb21Ub2tlbnModG9rZW5zKSB7XG4gICAgdmFyIHRva2VuU2VudGVuY2VzID0gW10sXG4gICAgICAgIGN1cnJlbnRTZW50ZW5jZSA9IFwiXCIsXG4gICAgICAgIG5leHRTZW50ZW5jZVN0YXJ0O1xuICAgIHZhciBzbGljZWQ7XG4gICAgLy8gRHJvcCB0aGUgZmlyc3QgYW5kIGxhc3QgSFRNTCB0YWcgaWYgYm90aCBhcmUgcHJlc2VudC5cbiAgICBkbyB7XG4gICAgICAgIHNsaWNlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RUb2tlbiA9IHRva2Vuc1swXTtcbiAgICAgICAgdmFyIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChmaXJzdFRva2VuLnR5cGUgPT09IFwiaHRtbC1zdGFydFwiICYmIGxhc3RUb2tlbi50eXBlID09PSBcImh0bWwtZW5kXCIpIHtcbiAgICAgICAgICAgIHRva2VucyA9IHRva2Vucy5zbGljZSgxLCB0b2tlbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBzbGljZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoc2xpY2VkICYmIHRva2Vucy5sZW5ndGggPiAxKTtcbiAgICBmb3JFYWNoKHRva2VucywgZnVuY3Rpb24gKHRva2VuLCBpKSB7XG4gICAgICAgIHZhciBoYXNOZXh0U2VudGVuY2U7XG4gICAgICAgIHZhciBuZXh0VG9rZW4gPSB0b2tlbnNbaSArIDFdO1xuICAgICAgICB2YXIgc2Vjb25kVG9OZXh0VG9rZW4gPSB0b2tlbnNbaSArIDJdO1xuICAgICAgICB2YXIgbmV4dENoYXJhY3RlcnM7XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImh0bWwtc3RhcnRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJodG1sLWVuZFwiOlxuICAgICAgICAgICAgICAgIGlmIChpc0JyZWFrVGFnKHRva2VuLnNyYykpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5TZW50ZW5jZXMucHVzaChjdXJyZW50U2VudGVuY2UpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VudGVuY2UgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZW50ZW5jZSArPSB0b2tlbi5zcmM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNlbnRlbmNlXCI6XG4gICAgICAgICAgICAgICAgY3VycmVudFNlbnRlbmNlICs9IHRva2VuLnNyYztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzZW50ZW5jZS1kZWxpbWl0ZXJcIjpcbiAgICAgICAgICAgICAgICBjdXJyZW50U2VudGVuY2UgKz0gdG9rZW4uc3JjO1xuICAgICAgICAgICAgICAgIGlmICghaXNVbmRlZmluZWQobmV4dFRva2VuKSAmJiBcImJsb2NrLWVuZFwiICE9PSBuZXh0VG9rZW4udHlwZSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlblNlbnRlbmNlcy5wdXNoKGN1cnJlbnRTZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZW50ZW5jZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImZ1bGwtc3RvcFwiOlxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZW50ZW5jZSArPSB0b2tlbi5zcmM7XG4gICAgICAgICAgICAgICAgbmV4dENoYXJhY3RlcnMgPSBnZXROZXh0VHdvQ2hhcmFjdGVycyhbbmV4dFRva2VuLCBzZWNvbmRUb05leHRUb2tlbl0pO1xuICAgICAgICAgICAgICAgIC8vIEZvciBhIG5ldyBzZW50ZW5jZSB3ZSBuZWVkIHRvIGNoZWNrIHRoZSBuZXh0IHR3byBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgIGhhc05leHRTZW50ZW5jZSA9IG5leHRDaGFyYWN0ZXJzLmxlbmd0aCA+PSAyO1xuICAgICAgICAgICAgICAgIG5leHRTZW50ZW5jZVN0YXJ0ID0gaGFzTmV4dFNlbnRlbmNlID8gbmV4dENoYXJhY3RlcnNbMV0gOiBcIlwiO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBuZXh0IGNoYXJhY3RlciBpcyBhIG51bWJlciwgbmV2ZXIgc3BsaXQuIEZvciBleGFtcGxlOiBJUHY0LW51bWJlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGhhc05leHRTZW50ZW5jZSAmJiBpc051bWJlcihuZXh0Q2hhcmFjdGVyc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE9ubHkgc3BsaXQgb24gc2VudGVuY2UgZGVsaW1pdGVycyB3aGVuIHRoZSBuZXh0IHNlbnRlbmNlIGxvb2tzIGxpa2UgdGhlIHN0YXJ0IG9mIGEgc2VudGVuY2UuXG4gICAgICAgICAgICAgICAgaWYgKGhhc05leHRTZW50ZW5jZSAmJiBpc1ZhbGlkU2VudGVuY2VCZWdpbm5pbmcobmV4dFNlbnRlbmNlU3RhcnQpIHx8IGlzU2VudGVuY2VTdGFydChuZXh0VG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuU2VudGVuY2VzLnB1c2goY3VycmVudFNlbnRlbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNlbnRlbmNlID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYmxvY2stc3RhcnRcIjpcbiAgICAgICAgICAgICAgICBjdXJyZW50U2VudGVuY2UgKz0gdG9rZW4uc3JjO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJsb2NrLWVuZFwiOlxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZW50ZW5jZSArPSB0b2tlbi5zcmM7XG4gICAgICAgICAgICAgICAgbmV4dENoYXJhY3RlcnMgPSBnZXROZXh0VHdvQ2hhcmFjdGVycyhbbmV4dFRva2VuLCBzZWNvbmRUb05leHRUb2tlbl0pO1xuICAgICAgICAgICAgICAgIC8vIEZvciBhIG5ldyBzZW50ZW5jZSB3ZSBuZWVkIHRvIGNoZWNrIHRoZSBuZXh0IHR3byBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgIGhhc05leHRTZW50ZW5jZSA9IG5leHRDaGFyYWN0ZXJzLmxlbmd0aCA+PSAyO1xuICAgICAgICAgICAgICAgIG5leHRTZW50ZW5jZVN0YXJ0ID0gaGFzTmV4dFNlbnRlbmNlID8gbmV4dENoYXJhY3RlcnNbMF0gOiBcIlwiO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBuZXh0IGNoYXJhY3RlciBpcyBhIG51bWJlciwgbmV2ZXIgc3BsaXQuIEZvciBleGFtcGxlOiBJUHY0LW51bWJlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGhhc05leHRTZW50ZW5jZSAmJiBpc051bWJlcihuZXh0Q2hhcmFjdGVyc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoYXNOZXh0U2VudGVuY2UgJiYgaXNWYWxpZFNlbnRlbmNlQmVnaW5uaW5nKG5leHRTZW50ZW5jZVN0YXJ0KSB8fCBpc1NlbnRlbmNlU3RhcnQobmV4dFRva2VuKSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlblNlbnRlbmNlcy5wdXNoKGN1cnJlbnRTZW50ZW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTZW50ZW5jZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKFwiXCIgIT09IGN1cnJlbnRTZW50ZW5jZSkge1xuICAgICAgICB0b2tlblNlbnRlbmNlcy5wdXNoKGN1cnJlbnRTZW50ZW5jZSk7XG4gICAgfVxuICAgIHRva2VuU2VudGVuY2VzID0gbWFwKHRva2VuU2VudGVuY2VzLCBmdW5jdGlvbiAoc2VudGVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHNlbnRlbmNlLnRyaW0oKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG9rZW5TZW50ZW5jZXM7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHNlbnRlbmNlcyBmcm9tIGEgY2VydGFpbiBibG9jay5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmxvY2sgVGhlIEhUTUwgaW5zaWRlIGEgSFRNTCBibG9jay5cbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBUaGUgbGlzdCBvZiBzZW50ZW5jZXMgaW4gdGhlIGJsb2NrLlxuICovXG5mdW5jdGlvbiBnZXRTZW50ZW5jZXNGcm9tQmxvY2soYmxvY2spIHtcbiAgICB2YXIgdG9rZW5zID0gdG9rZW5pemVTZW50ZW5jZXMoYmxvY2spO1xuICAgIHJldHVybiB0b2tlbnMubGVuZ3RoID09PSAwID8gW10gOiBnZXRTZW50ZW5jZXNGcm9tVG9rZW5zKHRva2Vucyk7XG59XG52YXIgZ2V0U2VudGVuY2VzRnJvbUJsb2NrQ2FjaGVkID0gbWVtb2l6ZShnZXRTZW50ZW5jZXNGcm9tQmxvY2spO1xuLyoqXG4gKiBSZXR1cm5zIHNlbnRlbmNlcyBpbiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgc3RyaW5nIHRvIGNvdW50IHNlbnRlbmNlcyBpbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gU2VudGVuY2VzIGZvdW5kIGluIHRoZSB0ZXh0LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgdGV4dCA9IHVuaWZ5V2hpdGVzcGFjZSh0ZXh0KTtcbiAgICB2YXIgc2VudGVuY2VzLFxuICAgICAgICBibG9ja3MgPSBnZXRCbG9ja3ModGV4dCk7XG4gICAgLy8gU3BsaXQgZWFjaCBibG9jayBvbiBuZXdsaW5lcy5cbiAgICBibG9ja3MgPSBmbGF0TWFwKGJsb2NrcywgZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIHJldHVybiBibG9jay5zcGxpdChuZXdMaW5lUmVnZXgpO1xuICAgIH0pO1xuICAgIHNlbnRlbmNlcyA9IGZsYXRNYXAoYmxvY2tzLCBnZXRTZW50ZW5jZXNGcm9tQmxvY2tDYWNoZWQpO1xuICAgIHJldHVybiBmaWx0ZXIoc2VudGVuY2VzLCBuZWdhdGUoaXNFbXB0eSkpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFNlbnRlbmNlcy5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFNlbnRlbmNlcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9jb3VudFdvcmRzICovXG5cbnZhciBzdHJpcFRhZ3MgPSByZXF1aXJlKFwiLi9zdHJpcEhUTUxUYWdzLmpzXCIpLnN0cmlwRnVsbFRhZ3M7XG52YXIgc3RyaXBTcGFjZXMgPSByZXF1aXJlKFwiLi9zdHJpcFNwYWNlcy5qc1wiKTtcbnZhciByZW1vdmVQdW5jdHVhdGlvbiA9IHJlcXVpcmUoXCIuL3JlbW92ZVB1bmN0dWF0aW9uLmpzXCIpO1xudmFyIG1hcCA9IHJlcXVpcmUoXCJsb2Rhc2gvbWFwXCIpO1xudmFyIGZpbHRlciA9IHJlcXVpcmUoXCJsb2Rhc2gvZmlsdGVyXCIpO1xuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggd29yZHMgdXNlZCBpbiB0aGUgdGV4dC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBiZSBjb3VudGVkLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgYXJyYXkgd2l0aCBhbGwgd29yZHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICB0ZXh0ID0gc3RyaXBTcGFjZXMoc3RyaXBUYWdzKHRleHQpKTtcbiAgICBpZiAodGV4dCA9PT0gXCJcIikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHZhciB3b3JkcyA9IHRleHQuc3BsaXQoL1xccy9nKTtcbiAgICB3b3JkcyA9IG1hcCh3b3JkcywgZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVB1bmN0dWF0aW9uKHdvcmQpO1xuICAgIH0pO1xuICAgIHJldHVybiBmaWx0ZXIod29yZHMsIGZ1bmN0aW9uICh3b3JkKSB7XG4gICAgICAgIHJldHVybiB3b3JkLnRyaW0oKSAhPT0gXCJcIjtcbiAgICB9KTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRXb3Jkcy5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFdvcmRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIE5vcm1hbGl6ZXMgc2luZ2xlIHF1b3RlcyB0byAncmVndWxhcicgcXVvdGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRleHQgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIG5vcm1hbGl6ZWQgdGV4dC5cbiAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTaW5nbGVRdW90ZXModGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1vigJjigJnigJtgXS9nLCBcIidcIik7XG59XG4vKipcbiAqIE5vcm1hbGl6ZXMgZG91YmxlIHF1b3RlcyB0byAncmVndWxhcicgcXVvdGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRleHQgdG8gbm9ybWFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIG5vcm1hbGl6ZWQgdGV4dC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRG91YmxlUXVvdGVzKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9b4oCc4oCd44Cd44Ce44Cf4oCf4oCeXS9nLCBcIlxcXCJcIik7XG59XG4vKipcbiAqIE5vcm1hbGl6ZXMgcXVvdGVzIHRvICdyZWd1bGFyJyBxdW90ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGV4dCB0byBub3JtYWxpemUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbm9ybWFsaXplZCB0ZXh0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVRdW90ZXModGV4dCkge1xuICAgIHJldHVybiBub3JtYWxpemVEb3VibGVRdW90ZXMobm9ybWFsaXplU2luZ2xlUXVvdGVzKHRleHQpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIG5vcm1hbGl6ZVNpbmdsZTogbm9ybWFsaXplU2luZ2xlUXVvdGVzLFxuICAgIG5vcm1hbGl6ZURvdWJsZTogbm9ybWFsaXplRG91YmxlUXVvdGVzLFxuICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplUXVvdGVzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVvdGVzLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVvdGVzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnZXRXb3JkcyA9IHJlcXVpcmUoXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldFdvcmRzLmpzXCIpO1xudmFyIGdldFNlbnRlbmNlcyA9IHJlcXVpcmUoXCIuLi9zdHJpbmdQcm9jZXNzaW5nL2dldFNlbnRlbmNlcy5qc1wiKTtcbnZhciBXb3JkQ29tYmluYXRpb24gPSByZXF1aXJlKFwiLi4vdmFsdWVzL1dvcmRDb21iaW5hdGlvbi5qc1wiKTtcbnZhciBub3JtYWxpemVRdW90ZXMgPSByZXF1aXJlKFwiLi4vc3RyaW5nUHJvY2Vzc2luZy9xdW90ZXMuanNcIikubm9ybWFsaXplO1xudmFyIGdlcm1hbkZ1bmN0aW9uV29yZHMgPSByZXF1aXJlKFwiLi4vcmVzZWFyY2hlcy9nZXJtYW4vZnVuY3Rpb25Xb3Jkcy5qc1wiKTtcbnZhciBlbmdsaXNoRnVuY3Rpb25Xb3JkcyA9IHJlcXVpcmUoXCIuLi9yZXNlYXJjaGVzL2VuZ2xpc2gvZnVuY3Rpb25Xb3Jkcy5qc1wiKTtcbnZhciBkdXRjaEZ1bmN0aW9uV29yZHMgPSByZXF1aXJlKFwiLi4vcmVzZWFyY2hlcy9kdXRjaC9mdW5jdGlvbldvcmRzLmpzXCIpO1xudmFyIHNwYW5pc2hGdW5jdGlvbldvcmRzID0gcmVxdWlyZShcIi4uL3Jlc2VhcmNoZXMvc3BhbmlzaC9mdW5jdGlvbldvcmRzLmpzXCIpO1xudmFyIGl0YWxpYW5GdW5jdGlvbldvcmRzID0gcmVxdWlyZShcIi4uL3Jlc2VhcmNoZXMvaXRhbGlhbi9mdW5jdGlvbldvcmRzLmpzXCIpO1xudmFyIGZyZW5jaEZ1bmN0aW9uV29yZHMgPSByZXF1aXJlKFwiLi4vcmVzZWFyY2hlcy9mcmVuY2gvZnVuY3Rpb25Xb3Jkcy5qc1wiKTtcbnZhciBnZXRMYW5ndWFnZSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2dldExhbmd1YWdlLmpzXCIpO1xudmFyIGZpbHRlciA9IHJlcXVpcmUoXCJsb2Rhc2gvZmlsdGVyXCIpO1xudmFyIG1hcCA9IHJlcXVpcmUoXCJsb2Rhc2gvbWFwXCIpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKFwibG9kYXNoL2ZvckVhY2hcIik7XG52YXIgaGFzID0gcmVxdWlyZShcImxvZGFzaC9oYXNcIik7XG52YXIgZmxhdE1hcCA9IHJlcXVpcmUoXCJsb2Rhc2gvZmxhdE1hcFwiKTtcbnZhciB2YWx1ZXMgPSByZXF1aXJlKFwibG9kYXNoL3ZhbHVlc1wiKTtcbnZhciB0YWtlID0gcmVxdWlyZShcImxvZGFzaC90YWtlXCIpO1xudmFyIGluY2x1ZGVzID0gcmVxdWlyZShcImxvZGFzaC9pbmNsdWRlc1wiKTtcbnZhciBpbnRlcnNlY3Rpb24gPSByZXF1aXJlKFwibG9kYXNoL2ludGVyc2VjdGlvblwiKTtcbnZhciBpc0VtcHR5ID0gcmVxdWlyZShcImxvZGFzaC9pc0VtcHR5XCIpO1xudmFyIGRlbnNpdHlMb3dlckxpbWl0ID0gMDtcbnZhciBkZW5zaXR5VXBwZXJMaW1pdCA9IDAuMDM7XG52YXIgcmVsZXZhbnRXb3JkTGltaXQgPSAxMDA7XG52YXIgd29yZENvdW50TG93ZXJMaW1pdCA9IDIwMDtcbi8vIEZpcnN0IGZvdXIgY2hhcmFjdGVyczogZW4gZGFzaCwgZW0gZGFzaCwgaHlwaGVuLW1pbnVzLCBhbmQgY29weXJpZ2h0IHNpZ24uXG52YXIgc3BlY2lhbENoYXJhY3RlcnMgPSBbXCLigJNcIiwgXCLigJRcIiwgXCItXCIsIFwiXFx4QTlcIiwgXCIjXCIsIFwiJVwiLCBcIi9cIiwgXCJcXFxcXCIsIFwiJFwiLCBcIuKCrFwiLCBcIsKjXCIsIFwiKlwiLCBcIuKAolwiLCBcInxcIiwgXCLihpJcIiwgXCLihpBcIiwgXCJ9XCIsIFwie1wiLCBcIi8vXCIsIFwifHxcIiwgXCJcXHUyMDBCXCJdO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB3b3JkIGNvbWJpbmF0aW9ucyBmb3IgdGhlIGdpdmVuIHRleHQgYmFzZWQgb24gdGhlIGNvbWJpbmF0aW9uIHNpemUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgdG8gcmV0cmlldmUgY29tYmluYXRpb25zIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb21iaW5hdGlvblNpemUgVGhlIHNpemUgb2YgdGhlIGNvbWJpbmF0aW9ucyB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0aW9uV29yZHMgVGhlIGZ1bmN0aW9uIGNvbnRhaW5pbmcgdGhlIGxpc3RzIG9mIGZ1bmN0aW9uIHdvcmRzLlxuICogQHJldHVybnMge1dvcmRDb21iaW5hdGlvbltdfSBBbGwgd29yZCBjb21iaW5hdGlvbnMgZm9yIHRoZSBnaXZlbiB0ZXh0LlxuICovXG5mdW5jdGlvbiBnZXRXb3JkQ29tYmluYXRpb25zKHRleHQsIGNvbWJpbmF0aW9uU2l6ZSwgZnVuY3Rpb25Xb3Jkcykge1xuICAgIHZhciBzZW50ZW5jZXMgPSBnZXRTZW50ZW5jZXModGV4dCk7XG4gICAgdmFyIHdvcmRzID0gdm9pZCAwLFxuICAgICAgICBjb21iaW5hdGlvbiA9IHZvaWQgMDtcbiAgICByZXR1cm4gZmxhdE1hcChzZW50ZW5jZXMsIGZ1bmN0aW9uIChzZW50ZW5jZSkge1xuICAgICAgICBzZW50ZW5jZSA9IHNlbnRlbmNlLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIHNlbnRlbmNlID0gbm9ybWFsaXplUXVvdGVzKHNlbnRlbmNlKTtcbiAgICAgICAgd29yZHMgPSBnZXRXb3JkcyhzZW50ZW5jZSk7XG4gICAgICAgIHJldHVybiBmaWx0ZXIobWFwKHdvcmRzLCBmdW5jdGlvbiAod29yZCwgaSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIHN0aWxsIGVub3VnaCB3b3JkcyBpbiB0aGUgc2VudGVuY2UgdG8gc2xpY2Ugb2YuXG4gICAgICAgICAgICBpZiAoaSArIGNvbWJpbmF0aW9uU2l6ZSAtIDEgPCB3b3Jkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb21iaW5hdGlvbiA9IHdvcmRzLnNsaWNlKGksIGkgKyBjb21iaW5hdGlvblNpemUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV29yZENvbWJpbmF0aW9uKGNvbWJpbmF0aW9uLCAwLCBmdW5jdGlvbldvcmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIG9jY3VycmVuY2VzIGZvciBhIGxpc3Qgb2Ygd29yZCBjb21iaW5hdGlvbnMuXG4gKlxuICogQHBhcmFtIHtXb3JkQ29tYmluYXRpb25bXX0gd29yZENvbWJpbmF0aW9ucyBUaGUgd29yZCBjb21iaW5hdGlvbnMgdG8gY2FsY3VsYXRlIG9jY3VycmVuY2VzIGZvci5cbiAqIEByZXR1cm5zIHtXb3JkQ29tYmluYXRpb25bXX0gV29yZCBjb21iaW5hdGlvbnMgd2l0aCB0aGVpciByZXNwZWN0aXZlIG9jY3VycmVuY2VzLlxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVPY2N1cnJlbmNlcyh3b3JkQ29tYmluYXRpb25zKSB7XG4gICAgdmFyIG9jY3VycmVuY2VzID0ge307XG4gICAgZm9yRWFjaCh3b3JkQ29tYmluYXRpb25zLCBmdW5jdGlvbiAod29yZENvbWJpbmF0aW9uKSB7XG4gICAgICAgIHZhciBjb21iaW5hdGlvbiA9IHdvcmRDb21iaW5hdGlvbi5nZXRDb21iaW5hdGlvbigpO1xuICAgICAgICBpZiAoIWhhcyhvY2N1cnJlbmNlcywgY29tYmluYXRpb24pKSB7XG4gICAgICAgICAgICBvY2N1cnJlbmNlc1tjb21iaW5hdGlvbl0gPSB3b3JkQ29tYmluYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgb2NjdXJyZW5jZXNbY29tYmluYXRpb25dLmluY3JlbWVudE9jY3VycmVuY2VzKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHZhbHVlcyhvY2N1cnJlbmNlcyk7XG59XG4vKipcbiAqIFJldHVybnMgb25seSB0aGUgcmVsZXZhbnQgY29tYmluYXRpb25zIGZyb20gYSBsaXN0IG9mIHdvcmQgY29tYmluYXRpb25zLiBBc3N1bWVzXG4gKiBvY2N1cnJlbmNlcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxjdWxhdGVkLlxuICpcbiAqIEBwYXJhbSB7V29yZENvbWJpbmF0aW9uW119IHdvcmRDb21iaW5hdGlvbnMgQSBsaXN0IG9mIHdvcmQgY29tYmluYXRpb25zLlxuICogQHJldHVybnMge1dvcmRDb21iaW5hdGlvbltdfSBPbmx5IHJlbGV2YW50IHdvcmQgY29tYmluYXRpb25zLlxuICovXG5mdW5jdGlvbiBnZXRSZWxldmFudENvbWJpbmF0aW9ucyh3b3JkQ29tYmluYXRpb25zKSB7XG4gICAgd29yZENvbWJpbmF0aW9ucyA9IHdvcmRDb21iaW5hdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChjb21iaW5hdGlvbikge1xuICAgICAgICByZXR1cm4gY29tYmluYXRpb24uZ2V0T2NjdXJyZW5jZXMoKSAhPT0gMSAmJiBjb21iaW5hdGlvbi5nZXRSZWxldmFuY2UoKSAhPT0gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gd29yZENvbWJpbmF0aW9ucztcbn1cbi8qKlxuICogU29ydHMgY29tYmluYXRpb25zIGJhc2VkIG9uIHRoZWlyIHJlbGV2YW5jZSBhbmQgbGVuZ3RoLlxuICpcbiAqIEBwYXJhbSB7V29yZENvbWJpbmF0aW9uW119IHdvcmRDb21iaW5hdGlvbnMgVGhlIGNvbWJpbmF0aW9ucyB0byBzb3J0LlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHNvcnRDb21iaW5hdGlvbnMod29yZENvbWJpbmF0aW9ucykge1xuICAgIHdvcmRDb21iaW5hdGlvbnMuc29ydChmdW5jdGlvbiAoY29tYmluYXRpb25BLCBjb21iaW5hdGlvbkIpIHtcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSBjb21iaW5hdGlvbkIuZ2V0UmVsZXZhbmNlKCkgLSBjb21iaW5hdGlvbkEuZ2V0UmVsZXZhbmNlKCk7XG4gICAgICAgIC8vIFRoZSBjb21iaW5hdGlvbiB3aXRoIHRoZSBoaWdoZXN0IHJlbGV2YW5jZSBjb21lcyBmaXJzdC5cbiAgICAgICAgaWYgKGRpZmZlcmVuY2UgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkaWZmZXJlbmNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluIGNhc2Ugb2YgYSB0aWUgb24gcmVsZXZhbmNlLCB0aGUgbG9uZ2VzdCBjb21iaW5hdGlvbiBjb21lcyBmaXJzdC5cbiAgICAgICAgcmV0dXJuIGNvbWJpbmF0aW9uQi5nZXRMZW5ndGgoKSAtIGNvbWJpbmF0aW9uQS5nZXRMZW5ndGgoKTtcbiAgICB9KTtcbn1cbi8qKlxuICogRmlsdGVycyB3b3JkIGNvbWJpbmF0aW9ucyB0aGF0IGNvbnNpc3Qgb2YgYSBzaW5nbGUgb25lLWNoYXJhY3RlciB3b3JkLlxuICpcbiAqIEBwYXJhbSB7V29yZENvbWJpbmF0aW9uW119IHdvcmRDb21iaW5hdGlvbnMgVGhlIHdvcmQgY29tYmluYXRpb25zIHRvIGZpbHRlci5cbiAqIEByZXR1cm5zIHtXb3JkQ29tYmluYXRpb25bXX0gRmlsdGVyZWQgd29yZCBjb21iaW5hdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlck9uZUNoYXJhY3RlcldvcmRDb21iaW5hdGlvbnMod29yZENvbWJpbmF0aW9ucykge1xuICAgIHJldHVybiB3b3JkQ29tYmluYXRpb25zLmZpbHRlcihmdW5jdGlvbiAoY29tYmluYXRpb24pIHtcbiAgICAgICAgcmV0dXJuICEoY29tYmluYXRpb24uZ2V0TGVuZ3RoKCkgPT09IDEgJiYgY29tYmluYXRpb24uZ2V0V29yZHMoKVswXS5sZW5ndGggPD0gMSk7XG4gICAgfSk7XG59XG4vKipcbiAqIEZpbHRlcnMgd29yZCBjb21iaW5hdGlvbnMgY29udGFpbmluZyBjZXJ0YWluIGZ1bmN0aW9uIHdvcmRzIGF0IGFueSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1dvcmRDb21iaW5hdGlvbltdfSB3b3JkQ29tYmluYXRpb25zIFRoZSB3b3JkIGNvbWJpbmF0aW9ucyB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge2FycmF5fSBmdW5jdGlvbldvcmRzIFRoZSBsaXN0IG9mIGZ1bmN0aW9uIHdvcmRzLlxuICogQHJldHVybnMge1dvcmRDb21iaW5hdGlvbltdfSBGaWx0ZXJlZCB3b3JkIGNvbWJpbmF0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyRnVuY3Rpb25Xb3Jkc0FueXdoZXJlKHdvcmRDb21iaW5hdGlvbnMsIGZ1bmN0aW9uV29yZHMpIHtcbiAgICByZXR1cm4gd29yZENvbWJpbmF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGNvbWJpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBpc0VtcHR5KGludGVyc2VjdGlvbihmdW5jdGlvbldvcmRzLCBjb21iaW5hdGlvbi5nZXRXb3JkcygpKSk7XG4gICAgfSk7XG59XG4vKipcbiAqIEZpbHRlcnMgd29yZCBjb21iaW5hdGlvbnMgYmVnaW5uaW5nIHdpdGggY2VydGFpbiBmdW5jdGlvbiB3b3Jkcy5cbiAqXG4gKiBAcGFyYW0ge1dvcmRDb21iaW5hdGlvbltdfSB3b3JkQ29tYmluYXRpb25zIFRoZSB3b3JkIGNvbWJpbmF0aW9ucyB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge2FycmF5fSBmdW5jdGlvbldvcmRzIFRoZSBsaXN0IG9mIGZ1bmN0aW9uIHdvcmRzLlxuICogQHJldHVybnMge1dvcmRDb21iaW5hdGlvbltdfSBGaWx0ZXJlZCB3b3JkIGNvbWJpbmF0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyRnVuY3Rpb25Xb3Jkc0F0QmVnaW5uaW5nKHdvcmRDb21iaW5hdGlvbnMsIGZ1bmN0aW9uV29yZHMpIHtcbiAgICByZXR1cm4gd29yZENvbWJpbmF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGNvbWJpbmF0aW9uKSB7XG4gICAgICAgIHJldHVybiAhaW5jbHVkZXMoZnVuY3Rpb25Xb3JkcywgY29tYmluYXRpb24uZ2V0V29yZHMoKVswXSk7XG4gICAgfSk7XG59XG4vKipcbiAqIEZpbHRlcnMgd29yZCBjb21iaW5hdGlvbnMgZW5kaW5nIHdpdGggY2VydGFpbiBmdW5jdGlvbiB3b3Jkcy5cbiAqXG4gKiBAcGFyYW0ge1dvcmRDb21iaW5hdGlvbltdfSB3b3JkQ29tYmluYXRpb25zIFRoZSB3b3JkIGNvbWJpbmF0aW9ucyB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge2FycmF5fSBmdW5jdGlvbldvcmRzIFRoZSBsaXN0IG9mIGZ1bmN0aW9uIHdvcmRzLlxuICogQHJldHVybnMge1dvcmRDb21iaW5hdGlvbltdfSBGaWx0ZXJlZCB3b3JkIGNvbWJpbmF0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyRnVuY3Rpb25Xb3Jkc0F0RW5kaW5nKHdvcmRDb21iaW5hdGlvbnMsIGZ1bmN0aW9uV29yZHMpIHtcbiAgICByZXR1cm4gd29yZENvbWJpbmF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGNvbWJpbmF0aW9uKSB7XG4gICAgICAgIHZhciB3b3JkcyA9IGNvbWJpbmF0aW9uLmdldFdvcmRzKCk7XG4gICAgICAgIHZhciBsYXN0V29yZEluZGV4ID0gd29yZHMubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuICFpbmNsdWRlcyhmdW5jdGlvbldvcmRzLCB3b3Jkc1tsYXN0V29yZEluZGV4XSk7XG4gICAgfSk7XG59XG4vKipcbiAqIEZpbHRlcnMgd29yZCBjb21iaW5hdGlvbnMgYmVnaW5uaW5nIGFuZCBlbmRpbmcgd2l0aCBjZXJ0YWluIGZ1bmN0aW9uIHdvcmRzLlxuICpcbiAqIEBwYXJhbSB7V29yZENvbWJpbmF0aW9uW119IHdvcmRDb21iaW5hdGlvbnMgVGhlIHdvcmQgY29tYmluYXRpb25zIHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7QXJyYXl9IGZ1bmN0aW9uV29yZHMgVGhlIGxpc3Qgb2YgZnVuY3Rpb24gd29yZHMuXG4gKiBAcmV0dXJucyB7V29yZENvbWJpbmF0aW9uW119IEZpbHRlcmVkIHdvcmQgY29tYmluYXRpb25zLlxuICovXG5mdW5jdGlvbiBmaWx0ZXJGdW5jdGlvbldvcmRzQXRCZWdpbm5pbmdBbmRFbmRpbmcod29yZENvbWJpbmF0aW9ucywgZnVuY3Rpb25Xb3Jkcykge1xuICAgIHdvcmRDb21iaW5hdGlvbnMgPSBmaWx0ZXJGdW5jdGlvbldvcmRzQXRCZWdpbm5pbmcod29yZENvbWJpbmF0aW9ucywgZnVuY3Rpb25Xb3Jkcyk7XG4gICAgd29yZENvbWJpbmF0aW9ucyA9IGZpbHRlckZ1bmN0aW9uV29yZHNBdEVuZGluZyh3b3JkQ29tYmluYXRpb25zLCBmdW5jdGlvbldvcmRzKTtcbiAgICByZXR1cm4gd29yZENvbWJpbmF0aW9ucztcbn1cbi8qKlxuICogRmlsdGVycyB3b3JkIGNvbWJpbmF0aW9ucyBiYXNlZCBvbiBrZXl3b3JkIGRlbnNpdHkgaWYgdGhlIHdvcmQgY291bnQgaXMgMjAwIG9yIG92ZXIuXG4gKlxuICogQHBhcmFtIHtXb3JkQ29tYmluYXRpb25bXX0gd29yZENvbWJpbmF0aW9ucyBUaGUgd29yZCBjb21iaW5hdGlvbnMgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtudW1iZXJ9IHdvcmRDb3VudCBUaGUgbnVtYmVyIG9mIHdvcmRzIGluIHRoZSB0b3RhbCB0ZXh0LlxuICogQHBhcmFtIHtudW1iZXJ9IGRlbnNpdHlMb3dlckxpbWl0IFRoZSBsb3dlciBsaW1pdCBvZiBrZXl3b3JkIGRlbnNpdHkuXG4gKiBAcGFyYW0ge251bWJlcn0gZGVuc2l0eVVwcGVyTGltaXQgVGhlIHVwcGVyIGxpbWl0IG9mIGtleXdvcmQgZGVuc2l0eS5cbiAqIEByZXR1cm5zIHtXb3JkQ29tYmluYXRpb25bXX0gRmlsdGVyZWQgd29yZCBjb21iaW5hdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlck9uRGVuc2l0eSh3b3JkQ29tYmluYXRpb25zLCB3b3JkQ291bnQsIGRlbnNpdHlMb3dlckxpbWl0LCBkZW5zaXR5VXBwZXJMaW1pdCkge1xuICAgIHJldHVybiB3b3JkQ29tYmluYXRpb25zLmZpbHRlcihmdW5jdGlvbiAoY29tYmluYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmF0aW9uLmdldERlbnNpdHkod29yZENvdW50KSA+PSBkZW5zaXR5TG93ZXJMaW1pdCAmJiBjb21iaW5hdGlvbi5nZXREZW5zaXR5KHdvcmRDb3VudCkgPCBkZW5zaXR5VXBwZXJMaW1pdDtcbiAgICB9KTtcbn1cbi8qKlxuICogRmlsdGVycyB0aGUgbGlzdCBvZiB3b3JkIGNvbWJpbmF0aW9uIG9iamVjdHMgYmFzZWQgb24gdGhlIGxhbmd1YWdlLXNwZWNpZmljIGZ1bmN0aW9uIHdvcmQgZmlsdGVycy5cbiAqIFdvcmQgY29tYmluYXRpb25zIHdpdGggc3BlY2lmaWMgcGFydHMgb2Ygc3BlZWNoIGFyZSByZW1vdmVkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGNvbWJpbmF0aW9ucyBUaGUgbGlzdCBvZiB3b3JkIGNvbWJpbmF0aW9uIG9iamVjdHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvbldvcmRzIFRoZSBmdW5jdGlvbiBjb250YWluaW5nIHRoZSBsaXN0cyBvZiBmdW5jdGlvbiB3b3Jkcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gVGhlIGZpbHRlcmVkIGxpc3Qgb2Ygd29yZCBjb21iaW5hdGlvbiBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBmaWx0ZXJGdW5jdGlvbldvcmRzKGNvbWJpbmF0aW9ucywgZnVuY3Rpb25Xb3Jkcykge1xuICAgIGNvbWJpbmF0aW9ucyA9IGZpbHRlckZ1bmN0aW9uV29yZHNBbnl3aGVyZShjb21iaW5hdGlvbnMsIGZ1bmN0aW9uV29yZHMoKS5maWx0ZXJlZEFueXdoZXJlKTtcbiAgICBjb21iaW5hdGlvbnMgPSBmaWx0ZXJGdW5jdGlvbldvcmRzQXRCZWdpbm5pbmdBbmRFbmRpbmcoY29tYmluYXRpb25zLCBmdW5jdGlvbldvcmRzKCkuZmlsdGVyZWRBdEJlZ2lubmluZ0FuZEVuZGluZyk7XG4gICAgY29tYmluYXRpb25zID0gZmlsdGVyRnVuY3Rpb25Xb3Jkc0F0RW5kaW5nKGNvbWJpbmF0aW9ucywgZnVuY3Rpb25Xb3JkcygpLmZpbHRlcmVkQXRFbmRpbmcpO1xuICAgIGNvbWJpbmF0aW9ucyA9IGZpbHRlckZ1bmN0aW9uV29yZHNBdEJlZ2lubmluZyhjb21iaW5hdGlvbnMsIGZ1bmN0aW9uV29yZHMoKS5maWx0ZXJlZEF0QmVnaW5uaW5nKTtcbiAgICByZXR1cm4gY29tYmluYXRpb25zO1xufVxuLyoqXG4gKiBGaWx0ZXJzIHRoZSBsaXN0IG9mIHdvcmQgY29tYmluYXRpb24gb2JqZWN0cyBiYXNlZCBvbiBmdW5jdGlvbiB3b3JkIGZpbHRlcnMsIGEgc3BlY2lhbCBjaGFyYWN0ZXIgZmlsdGVyIGFuZFxuICogYSBvbmUtY2hhcmFjdGVyIGZpbHRlci5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBjb21iaW5hdGlvbnMgVGhlIGxpc3Qgb2Ygd29yZCBjb21iaW5hdGlvbiBvYmplY3RzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25Xb3JkcyBUaGUgZnVuY3Rpb24gY29udGFpbmluZyB0aGUgbGlzdHMgb2YgZnVuY3Rpb24gd29yZHMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBmaWx0ZXJlZCBsaXN0IG9mIHdvcmQgY29tYmluYXRpb24gb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyQ29tYmluYXRpb25zKGNvbWJpbmF0aW9ucywgZnVuY3Rpb25Xb3Jkcykge1xuICAgIGNvbWJpbmF0aW9ucyA9IGZpbHRlckZ1bmN0aW9uV29yZHNBbnl3aGVyZShjb21iaW5hdGlvbnMsIHNwZWNpYWxDaGFyYWN0ZXJzKTtcbiAgICBjb21iaW5hdGlvbnMgPSBmaWx0ZXJPbmVDaGFyYWN0ZXJXb3JkQ29tYmluYXRpb25zKGNvbWJpbmF0aW9ucyk7XG4gICAgY29tYmluYXRpb25zID0gZmlsdGVyRnVuY3Rpb25Xb3Jkcyhjb21iaW5hdGlvbnMsIGZ1bmN0aW9uV29yZHMpO1xuICAgIHJldHVybiBjb21iaW5hdGlvbnM7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHJlbGV2YW50IHdvcmRzIGluIGEgZ2l2ZW4gdGV4dC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byByZXRyaWV2ZSB0aGUgcmVsZXZhbnQgd29yZHMgb2YuXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYWxlIFRoZSBwYXBlcidzIGxvY2FsZS5cbiAqIEByZXR1cm5zIHtXb3JkQ29tYmluYXRpb25bXX0gQWxsIHJlbGV2YW50IHdvcmRzIHNvcnRlZCBhbmQgZmlsdGVyZWQgZm9yIHRoaXMgdGV4dC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVsZXZhbnRXb3Jkcyh0ZXh0LCBsb2NhbGUpIHtcbiAgICB2YXIgZnVuY3Rpb25Xb3JkcyA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKGdldExhbmd1YWdlKGxvY2FsZSkpIHtcbiAgICAgICAgY2FzZSBcImRlXCI6XG4gICAgICAgICAgICBmdW5jdGlvbldvcmRzID0gZ2VybWFuRnVuY3Rpb25Xb3JkcztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibmxcIjpcbiAgICAgICAgICAgIGZ1bmN0aW9uV29yZHMgPSBkdXRjaEZ1bmN0aW9uV29yZHM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZyXCI6XG4gICAgICAgICAgICBmdW5jdGlvbldvcmRzID0gZnJlbmNoRnVuY3Rpb25Xb3JkcztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZXNcIjpcbiAgICAgICAgICAgIGZ1bmN0aW9uV29yZHMgPSBzcGFuaXNoRnVuY3Rpb25Xb3JkcztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaXRcIjpcbiAgICAgICAgICAgIGZ1bmN0aW9uV29yZHMgPSBpdGFsaWFuRnVuY3Rpb25Xb3JkcztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICBjYXNlIFwiZW5cIjpcbiAgICAgICAgICAgIGZ1bmN0aW9uV29yZHMgPSBlbmdsaXNoRnVuY3Rpb25Xb3JkcztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgd29yZHMgPSBnZXRXb3JkQ29tYmluYXRpb25zKHRleHQsIDEsIGZ1bmN0aW9uV29yZHMoKS5hbGwpO1xuICAgIHZhciB3b3JkQ291bnQgPSB3b3Jkcy5sZW5ndGg7XG4gICAgdmFyIG9uZVdvcmRDb21iaW5hdGlvbnMgPSBnZXRSZWxldmFudENvbWJpbmF0aW9ucyhjYWxjdWxhdGVPY2N1cnJlbmNlcyh3b3JkcykpO1xuICAgIHNvcnRDb21iaW5hdGlvbnMob25lV29yZENvbWJpbmF0aW9ucyk7XG4gICAgb25lV29yZENvbWJpbmF0aW9ucyA9IHRha2Uob25lV29yZENvbWJpbmF0aW9ucywgMTAwKTtcbiAgICB2YXIgb25lV29yZFJlbGV2YW5jZU1hcCA9IHt9O1xuICAgIGZvckVhY2gob25lV29yZENvbWJpbmF0aW9ucywgZnVuY3Rpb24gKGNvbWJpbmF0aW9uKSB7XG4gICAgICAgIG9uZVdvcmRSZWxldmFuY2VNYXBbY29tYmluYXRpb24uZ2V0Q29tYmluYXRpb24oKV0gPSBjb21iaW5hdGlvbi5nZXRSZWxldmFuY2UoZnVuY3Rpb25Xb3Jkcyk7XG4gICAgfSk7XG4gICAgdmFyIHR3b1dvcmRDb21iaW5hdGlvbnMgPSBjYWxjdWxhdGVPY2N1cnJlbmNlcyhnZXRXb3JkQ29tYmluYXRpb25zKHRleHQsIDIsIGZ1bmN0aW9uV29yZHMoKS5hbGwpKTtcbiAgICB2YXIgdGhyZWVXb3JkQ29tYmluYXRpb25zID0gY2FsY3VsYXRlT2NjdXJyZW5jZXMoZ2V0V29yZENvbWJpbmF0aW9ucyh0ZXh0LCAzLCBmdW5jdGlvbldvcmRzKCkuYWxsKSk7XG4gICAgdmFyIGZvdXJXb3JkQ29tYmluYXRpb25zID0gY2FsY3VsYXRlT2NjdXJyZW5jZXMoZ2V0V29yZENvbWJpbmF0aW9ucyh0ZXh0LCA0LCBmdW5jdGlvbldvcmRzKCkuYWxsKSk7XG4gICAgdmFyIGZpdmVXb3JkQ29tYmluYXRpb25zID0gY2FsY3VsYXRlT2NjdXJyZW5jZXMoZ2V0V29yZENvbWJpbmF0aW9ucyh0ZXh0LCA1LCBmdW5jdGlvbldvcmRzKCkuYWxsKSk7XG4gICAgdmFyIGNvbWJpbmF0aW9ucyA9IG9uZVdvcmRDb21iaW5hdGlvbnMuY29uY2F0KHR3b1dvcmRDb21iaW5hdGlvbnMsIHRocmVlV29yZENvbWJpbmF0aW9ucywgZm91cldvcmRDb21iaW5hdGlvbnMsIGZpdmVXb3JkQ29tYmluYXRpb25zKTtcbiAgICBjb21iaW5hdGlvbnMgPSBmaWx0ZXJDb21iaW5hdGlvbnMoY29tYmluYXRpb25zLCBmdW5jdGlvbldvcmRzKTtcbiAgICBmb3JFYWNoKGNvbWJpbmF0aW9ucywgZnVuY3Rpb24gKGNvbWJpbmF0aW9uKSB7XG4gICAgICAgIGNvbWJpbmF0aW9uLnNldFJlbGV2YW50V29yZHMob25lV29yZFJlbGV2YW5jZU1hcCk7XG4gICAgfSk7XG4gICAgY29tYmluYXRpb25zID0gZ2V0UmVsZXZhbnRDb21iaW5hdGlvbnMoY29tYmluYXRpb25zLCB3b3JkQ291bnQpO1xuICAgIHNvcnRDb21iaW5hdGlvbnMoY29tYmluYXRpb25zKTtcbiAgICBpZiAod29yZENvdW50ID49IHdvcmRDb3VudExvd2VyTGltaXQpIHtcbiAgICAgICAgY29tYmluYXRpb25zID0gZmlsdGVyT25EZW5zaXR5KGNvbWJpbmF0aW9ucywgd29yZENvdW50LCBkZW5zaXR5TG93ZXJMaW1pdCwgZGVuc2l0eVVwcGVyTGltaXQpO1xuICAgIH1cbiAgICByZXR1cm4gdGFrZShjb21iaW5hdGlvbnMsIHJlbGV2YW50V29yZExpbWl0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldFdvcmRDb21iaW5hdGlvbnM6IGdldFdvcmRDb21iaW5hdGlvbnMsXG4gICAgZ2V0UmVsZXZhbnRXb3JkczogZ2V0UmVsZXZhbnRXb3JkcyxcbiAgICBjYWxjdWxhdGVPY2N1cnJlbmNlczogY2FsY3VsYXRlT2NjdXJyZW5jZXMsXG4gICAgZ2V0UmVsZXZhbnRDb21iaW5hdGlvbnM6IGdldFJlbGV2YW50Q29tYmluYXRpb25zLFxuICAgIHNvcnRDb21iaW5hdGlvbnM6IHNvcnRDb21iaW5hdGlvbnMsXG4gICAgZmlsdGVyRnVuY3Rpb25Xb3Jkc0F0RW5kaW5nOiBmaWx0ZXJGdW5jdGlvbldvcmRzQXRFbmRpbmcsXG4gICAgZmlsdGVyRnVuY3Rpb25Xb3Jkc0F0QmVnaW5uaW5nOiBmaWx0ZXJGdW5jdGlvbldvcmRzQXRCZWdpbm5pbmcsXG4gICAgZmlsdGVyRnVuY3Rpb25Xb3JkczogZmlsdGVyRnVuY3Rpb25Xb3Jkc0F0QmVnaW5uaW5nQW5kRW5kaW5nLFxuICAgIGZpbHRlckZ1bmN0aW9uV29yZHNBbnl3aGVyZTogZmlsdGVyRnVuY3Rpb25Xb3Jkc0FueXdoZXJlLFxuICAgIGZpbHRlck9uRGVuc2l0eTogZmlsdGVyT25EZW5zaXR5LFxuICAgIGZpbHRlck9uZUNoYXJhY3RlcldvcmRDb21iaW5hdGlvbnM6IGZpbHRlck9uZUNoYXJhY3RlcldvcmRDb21iaW5hdGlvbnNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWxldmFudFdvcmRzLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVsZXZhbnRXb3Jkcy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLy8gUmVwbGFjZSBhbGwgb3RoZXIgcHVuY3R1YXRpb24gY2hhcmFjdGVycyBhdCB0aGUgYmVnaW5uaW5nIG9yIGF0IHRoZSBlbmQgb2YgYSB3b3JkLlxuXG52YXIgcHVuY3R1YXRpb25SZWdleFN0cmluZyA9IFwiW1xcXFxcXHUyMDEzXFxcXC1cXFxcKFxcXFwpX1xcXFxbXFxcXF1cXHUyMDE5XFx1MjAxQ1xcdTIwMURcXFwiJy4/ITo7LFxceEJGXFx4QTFcXHhBQlxceEJCXFx1MjAxNFxceEQ3KyZdK1wiO1xudmFyIHB1bmN0dWF0aW9uUmVnZXhTdGFydCA9IG5ldyBSZWdFeHAoXCJeXCIgKyBwdW5jdHVhdGlvblJlZ2V4U3RyaW5nKTtcbnZhciBwdW5jdHVhdGlvblJlZ2V4RW5kID0gbmV3IFJlZ0V4cChwdW5jdHVhdGlvblJlZ2V4U3RyaW5nICsgXCIkXCIpO1xuLyoqXG4gKiBSZXBsYWNlcyBwdW5jdHVhdGlvbiBjaGFyYWN0ZXJzIGZyb20gdGhlIGdpdmVuIHRleHQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHJlbW92ZSB0aGUgcHVuY3R1YXRpb24gY2hhcmFjdGVycyBmb3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHNhbml0aXplZCB0ZXh0LlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UocHVuY3R1YXRpb25SZWdleFN0YXJ0LCBcIlwiKTtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShwdW5jdHVhdGlvblJlZ2V4RW5kLCBcIlwiKTtcbiAgcmV0dXJuIHRleHQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlUHVuY3R1YXRpb24uanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmVQdW5jdHVhdGlvbi5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9zdHJpcEhUTUxUYWdzICovXG5cbnZhciBzdHJpcFNwYWNlcyA9IHJlcXVpcmUoXCIuLi9zdHJpbmdQcm9jZXNzaW5nL3N0cmlwU3BhY2VzLmpzXCIpO1xudmFyIGJsb2NrRWxlbWVudHMgPSByZXF1aXJlKFwiLi4vaGVscGVycy9odG1sLmpzXCIpLmJsb2NrRWxlbWVudHM7XG52YXIgYmxvY2tFbGVtZW50U3RhcnRSZWdleCA9IG5ldyBSZWdFeHAoXCJePChcIiArIGJsb2NrRWxlbWVudHMuam9pbihcInxcIikgKyBcIilbXj5dKj8+XCIsIFwiaVwiKTtcbnZhciBibG9ja0VsZW1lbnRFbmRSZWdleCA9IG5ldyBSZWdFeHAoXCI8LyhcIiArIGJsb2NrRWxlbWVudHMuam9pbihcInxcIikgKyBcIilbXj5dKj8+JFwiLCBcImlcIik7XG4vKipcbiAqIFN0cmlwIGluY29tcGxldGUgdGFncyB3aXRoaW4gYSB0ZXh0LiBTdHJpcHMgYW4gZW5kdGFnIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBzdHJpbmcgYW5kIHRoZSBzdGFydCB0YWcgYXQgdGhlIGVuZCBvZiBhXG4gKiBzdGFydCBvZiBhIHN0cmluZy5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHN0cmlwIHRoZSBIVE1MLXRhZ3MgZnJvbSBhdCB0aGUgYmVnaW4gYW5kIGVuZC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSB0ZXh0IHdpdGhvdXQgSFRNTC10YWdzIGF0IHRoZSBiZWdpbiBhbmQgZW5kLlxuICovXG52YXIgc3RyaXBJbmNvbXBsZXRlVGFncyA9IGZ1bmN0aW9uIHN0cmlwSW5jb21wbGV0ZVRhZ3ModGV4dCkge1xuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL14oPFxcLyhbXj5dKyk+KSsvaSwgXCJcIik7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvKDwoW15cXC8+XSspPikrJC9pLCBcIlwiKTtcbiAgICByZXR1cm4gdGV4dDtcbn07XG4vKipcbiAqIFJlbW92ZXMgdGhlIGJsb2NrIGVsZW1lbnQgdGFncyBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmcgYW5kIHJldHVybnMgdGhpcyBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHVuZm9ybWF0dGVkIHN0cmluZy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0ZXh0IHdpdGggcmVtb3ZlZCBIVE1MIGJlZ2luIGFuZCBlbmQgYmxvY2sgZWxlbWVudHNcbiAqL1xudmFyIHN0cmlwQmxvY2tUYWdzQXRTdGFydEVuZCA9IGZ1bmN0aW9uIHN0cmlwQmxvY2tUYWdzQXRTdGFydEVuZCh0ZXh0KSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZShibG9ja0VsZW1lbnRTdGFydFJlZ2V4LCBcIlwiKTtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGJsb2NrRWxlbWVudEVuZFJlZ2V4LCBcIlwiKTtcbiAgICByZXR1cm4gdGV4dDtcbn07XG4vKipcbiAqIFN0cmlwIEhUTUwtdGFncyBmcm9tIHRleHRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byBzdHJpcCB0aGUgSFRNTC10YWdzIGZyb20uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgdGV4dCB3aXRob3V0IEhUTUwtdGFncy5cbiAqL1xudmFyIHN0cmlwRnVsbFRhZ3MgPSBmdW5jdGlvbiBzdHJpcEZ1bGxUYWdzKHRleHQpIHtcbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZywgXCIgXCIpO1xuICAgIHRleHQgPSBzdHJpcFNwYWNlcyh0ZXh0KTtcbiAgICByZXR1cm4gdGV4dDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBzdHJpcEZ1bGxUYWdzOiBzdHJpcEZ1bGxUYWdzLFxuICAgIHN0cmlwSW5jb21wbGV0ZVRhZ3M6IHN0cmlwSW5jb21wbGV0ZVRhZ3MsXG4gICAgc3RyaXBCbG9ja1RhZ3NBdFN0YXJ0RW5kOiBzdHJpcEJsb2NrVGFnc0F0U3RhcnRFbmRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpcEhUTUxUYWdzLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaXBIVE1MVGFncy5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqIEBtb2R1bGUgc3RyaW5nUHJvY2Vzc2luZy9zdHJpcFNwYWNlcyAqL1xuLyoqXG4gKiBTdHJpcCBkb3VibGUgc3BhY2VzIGZyb20gdGV4dFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHN0cmlwIHNwYWNlcyBmcm9tLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHRleHQgd2l0aG91dCBkb3VibGUgc3BhY2VzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIC8vIFJlcGxhY2UgbXVsdGlwbGUgc3BhY2VzIHdpdGggc2luZ2xlIHNwYWNlXG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxzezIsfS9nLCBcIiBcIik7XG4gICAgLy8gUmVwbGFjZSBzcGFjZXMgZm9sbG93ZWQgYnkgcGVyaW9kcyB3aXRoIG9ubHkgdGhlIHBlcmlvZC5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHNcXC4vZywgXCIuXCIpO1xuICAgIC8vIFJlbW92ZSBmaXJzdC9sYXN0IGNoYXJhY3RlciBpZiBzcGFjZVxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpO1xuICAgIHJldHVybiB0ZXh0O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmlwU3BhY2VzLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaXBTcGFjZXMuanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKiBAbW9kdWxlIHN0cmluZ1Byb2Nlc3NpbmcvdW5pZnlXaGl0ZXNwYWNlICovXG4vKipcbiAqIFJlcGxhY2VzIGEgbm9uIGJyZWFraW5nIHNwYWNlIHdpdGggYSBub3JtYWwgc3BhY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBzdHJpbmcgdG8gcmVwbGFjZSB0aGUgbm9uIGJyZWFraW5nIHNwYWNlIGluLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHRleHQgd2l0aCB1bmlmaWVkIHNwYWNlcy5cbiAqL1xuXG52YXIgdW5pZnlOb25CcmVha2luZ1NwYWNlID0gZnVuY3Rpb24gdW5pZnlOb25CcmVha2luZ1NwYWNlKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC8mbmJzcDsvZywgXCIgXCIpO1xufTtcbi8qKlxuICogUmVwbGFjZXMgYWxsIHdoaXRlc3BhY2VzIHdpdGggYSBub3JtYWwgc3BhY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBzdHJpbmcgdG8gcmVwbGFjZSB0aGUgbm9uIGJyZWFraW5nIHNwYWNlIGluLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHRleHQgd2l0aCB1bmlmaWVkIHNwYWNlcy5cbiAqL1xudmFyIHVuaWZ5V2hpdGVTcGFjZSA9IGZ1bmN0aW9uIHVuaWZ5V2hpdGVTcGFjZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvXFxzL2csIFwiIFwiKTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGFsbCB3aGl0ZXNwYWNlIHRvIHNwYWNlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB0byByZXBsYWNlIHNwYWNlcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0ZXh0IHdpdGggdW5pZmllZCBzcGFjZXMuXG4gKi9cbnZhciB1bmlmeUFsbFNwYWNlcyA9IGZ1bmN0aW9uIHVuaWZ5QWxsU3BhY2VzKHRleHQpIHtcbiAgICB0ZXh0ID0gdW5pZnlOb25CcmVha2luZ1NwYWNlKHRleHQpO1xuICAgIHJldHVybiB1bmlmeVdoaXRlU3BhY2UodGV4dCk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdW5pZnlOb25CcmVha2luZ1NwYWNlOiB1bmlmeU5vbkJyZWFraW5nU3BhY2UsXG4gICAgdW5pZnlXaGl0ZVNwYWNlOiB1bmlmeVdoaXRlU3BhY2UsXG4gICAgdW5pZnlBbGxTcGFjZXM6IHVuaWZ5QWxsU3BhY2VzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pZnlXaGl0ZXNwYWNlLmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pZnlXaGl0ZXNwYWNlLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZShcImxvZGFzaC9mb3JFYWNoXCIpO1xudmFyIGhhcyA9IHJlcXVpcmUoXCJsb2Rhc2gvaGFzXCIpO1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBnaXZlbiB3b3JkIGlzIGEgZnVuY3Rpb24gd29yZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gd29yZCBUaGUgd29yZCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0aW9uV29yZHMgVGhlIGZ1bmN0aW9uIGNvbnRhaW5pbmcgdGhlIGxpc3RzIG9mIGZ1bmN0aW9uIHdvcmRzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSB3b3JkIGlzIGEgZnVuY3Rpb24gd29yZC5cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbldvcmQod29yZCwgZnVuY3Rpb25Xb3Jkcykge1xuICAgIHJldHVybiAtMSAhPT0gZnVuY3Rpb25Xb3Jkcy5pbmRleE9mKHdvcmQudG9Mb2NhbGVMb3dlckNhc2UoKSk7XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSB3b3JkIGNvbWJpbmF0aW9uIGluIHRoZSBjb250ZXh0IG9mIHJlbGV2YW50IHdvcmRzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IHdvcmRzIFRoZSBsaXN0IG9mIHdvcmRzIHRoYXQgdGhpcyBjb21iaW5hdGlvbiBjb25zaXN0cyBvZi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb2NjdXJyZW5jZXNdIFRoZSBudW1iZXIgb2Ygb2NjdXJyZW5jZXMsIGRlZmF1bHRzIHRvIDAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jdGlvbldvcmRzIFRoZSBmdW5jdGlvbiBjb250YWluaW5nIHRoZSBsaXN0cyBvZiBmdW5jdGlvbiB3b3Jkcy5cbiAqL1xuZnVuY3Rpb24gV29yZENvbWJpbmF0aW9uKHdvcmRzLCBvY2N1cnJlbmNlcywgZnVuY3Rpb25Xb3Jkcykge1xuICAgIHRoaXMuX3dvcmRzID0gd29yZHM7XG4gICAgdGhpcy5fbGVuZ3RoID0gd29yZHMubGVuZ3RoO1xuICAgIHRoaXMuX29jY3VycmVuY2VzID0gb2NjdXJyZW5jZXMgfHwgMDtcbiAgICB0aGlzLl9mdW5jdGlvbldvcmRzID0gZnVuY3Rpb25Xb3Jkcztcbn1cbldvcmRDb21iaW5hdGlvbi5sZW5ndGhCb251cyA9IHtcbiAgICAyOiAzLFxuICAgIDM6IDcsXG4gICAgNDogMTIsXG4gICAgNTogMThcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgcmVsZXZhbmNlIGJhc2VkIG9uIHRoZSBsZW5ndGggb2YgdGhpcyBjb21iaW5hdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYmFzZSByZWxldmFuY2UgYmFzZWQgb24gdGhlIGxlbmd0aC5cbiAqL1xuV29yZENvbWJpbmF0aW9uLnByb3RvdHlwZS5nZXRMZW5ndGhCb251cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaGFzKFdvcmRDb21iaW5hdGlvbi5sZW5ndGhCb251cywgdGhpcy5fbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gV29yZENvbWJpbmF0aW9uLmxlbmd0aEJvbnVzW3RoaXMuX2xlbmd0aF07XG4gICAgfVxuICAgIHJldHVybiAwO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgbGlzdCB3aXRoIHdvcmRzLlxuICpcbiAqIEByZXR1cm5zIHthcnJheX0gVGhlIGxpc3Qgd2l0aCB3b3Jkcy5cbiAqL1xuV29yZENvbWJpbmF0aW9uLnByb3RvdHlwZS5nZXRXb3JkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd29yZHM7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB3b3JkIGNvbWJpbmF0aW9uIGxlbmd0aC5cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgd29yZCBjb21iaW5hdGlvbiBsZW5ndGguXG4gKi9cbldvcmRDb21iaW5hdGlvbi5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb21iaW5hdGlvbiBhcyBpdCBvY2N1cnMgaW4gdGhlIHRleHQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmF0aW9uLlxuICovXG5Xb3JkQ29tYmluYXRpb24ucHJvdG90eXBlLmdldENvbWJpbmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93b3Jkcy5qb2luKFwiIFwiKTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGFtb3VudCBvZiBvY2N1cnJlbmNlcyBvZiB0aGlzIHdvcmQgY29tYmluYXRpb24uXG4gKlxuICogQHJldHVybnMge251bWJlcn0gVGhlIGFtb3VudCBvZiBvY2N1cnJlbmNlcy5cbiAqL1xuV29yZENvbWJpbmF0aW9uLnByb3RvdHlwZS5nZXRPY2N1cnJlbmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fb2NjdXJyZW5jZXM7XG59O1xuLyoqXG4gKiBJbmNyZW1lbnRzIHRoZSBvY2N1cnJlbmNlcy5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuV29yZENvbWJpbmF0aW9uLnByb3RvdHlwZS5pbmNyZW1lbnRPY2N1cnJlbmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9vY2N1cnJlbmNlcyArPSAxO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgcmVsZXZhbmNlIG9mIHRoZSBsZW5ndGguXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHJlbGV2YW50V29yZFBlcmNlbnRhZ2UgVGhlIHJlbGV2YW5jZSBvZiB0aGUgd29yZHMgd2l0aGluIHRoZSBjb21iaW5hdGlvbi5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxldmFuY2UgYmFzZWQgb24gdGhlIGxlbmd0aCBhbmQgdGhlIHdvcmQgcmVsZXZhbmNlLlxuICovXG5Xb3JkQ29tYmluYXRpb24ucHJvdG90eXBlLmdldE11bHRpcGxpZXIgPSBmdW5jdGlvbiAocmVsZXZhbnRXb3JkUGVyY2VudGFnZSkge1xuICAgIHZhciBsZW5ndGhCb251cyA9IHRoaXMuZ2V0TGVuZ3RoQm9udXMoKTtcbiAgICAvLyBUaGUgcmVsZXZhbmNlIHNjYWxlcyBsaW5lYXJseSBmcm9tIHRoZSByZWxldmFuY2Ugb2Ygb25lIHdvcmQgdG8gdGhlIG1heGltdW0uXG4gICAgcmV0dXJuIDEgKyByZWxldmFudFdvcmRQZXJjZW50YWdlICogbGVuZ3RoQm9udXM7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGlmIHRoZSBnaXZlbiB3b3JkIGlzIGEgcmVsZXZhbnQgd29yZCBiYXNlZCBvbiB0aGUgZ2l2ZW4gd29yZCByZWxldmFuY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHdvcmQgVGhlIHdvcmQgdG8gY2hlY2sgaWYgaXQgaXMgcmVsZXZhbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgaXQgaXMgcmVsZXZhbnQuXG4gKi9cbldvcmRDb21iaW5hdGlvbi5wcm90b3R5cGUuaXNSZWxldmFudFdvcmQgPSBmdW5jdGlvbiAod29yZCkge1xuICAgIHJldHVybiBoYXModGhpcy5fcmVsZXZhbnRXb3Jkcywgd29yZCk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWxldmFuY2Ugb2YgdGhlIHdvcmRzIHdpdGhpbiB0aGlzIGNvbWJpbmF0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBwZXJjZW50YWdlIG9mIHJlbGV2YW50IHdvcmRzIGluc2lkZSB0aGlzIGNvbWJpbmF0aW9uLlxuICovXG5Xb3JkQ29tYmluYXRpb24ucHJvdG90eXBlLmdldFJlbGV2YW50V29yZFBlcmNlbnRhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlbGV2YW50V29yZENvdW50ID0gMCxcbiAgICAgICAgd29yZFJlbGV2YW5jZSA9IDE7XG4gICAgaWYgKHRoaXMuX2xlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yRWFjaCh0aGlzLl93b3JkcywgZnVuY3Rpb24gKHdvcmQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmVsZXZhbnRXb3JkKHdvcmQpKSB7XG4gICAgICAgICAgICAgICAgcmVsZXZhbnRXb3JkQ291bnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgd29yZFJlbGV2YW5jZSA9IHJlbGV2YW50V29yZENvdW50IC8gdGhpcy5fbGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gd29yZFJlbGV2YW5jZTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHJlbGV2YW5jZSBmb3IgdGhpcyB3b3JkIGNvbWJpbmF0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxldmFuY2Ugb2YgdGhpcyB3b3JkIGNvbWJpbmF0aW9uLlxuICovXG5Xb3JkQ29tYmluYXRpb24ucHJvdG90eXBlLmdldFJlbGV2YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd29yZHMubGVuZ3RoID09PSAxICYmIGlzRnVuY3Rpb25Xb3JkKHRoaXMuX3dvcmRzWzBdLCB0aGlzLl9mdW5jdGlvbldvcmRzKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIHdvcmRSZWxldmFuY2UgPSB0aGlzLmdldFJlbGV2YW50V29yZFBlcmNlbnRhZ2UoKTtcbiAgICBpZiAod29yZFJlbGV2YW5jZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0TXVsdGlwbGllcih3b3JkUmVsZXZhbmNlKSAqIHRoaXMuX29jY3VycmVuY2VzO1xufTtcbi8qKlxuICogU2V0cyB0aGUgcmVsZXZhbmNlIG9mIHNpbmdsZSB3b3Jkc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWxldmFudFdvcmRzIEEgbWFwcGluZyBmcm9tIGEgd29yZCB0byBhIHJlbGV2YW5jZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5Xb3JkQ29tYmluYXRpb24ucHJvdG90eXBlLnNldFJlbGV2YW50V29yZHMgPSBmdW5jdGlvbiAocmVsZXZhbnRXb3Jkcykge1xuICAgIHRoaXMuX3JlbGV2YW50V29yZHMgPSByZWxldmFudFdvcmRzO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgZGVuc2l0eSBvZiB0aGlzIGNvbWJpbmF0aW9uIHdpdGhpbiB0aGUgdGV4dC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gd29yZENvdW50IFRoZSB3b3JkIGNvdW50IG9mIHRoZSB0ZXh0IHRoaXMgY29tYmluYXRpb24gd2FzIGZvdW5kIGluLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIGRlbnNpdHkgb2YgdGhpcyBjb21iaW5hdGlvbi5cbiAqL1xuV29yZENvbWJpbmF0aW9uLnByb3RvdHlwZS5nZXREZW5zaXR5ID0gZnVuY3Rpb24gKHdvcmRDb3VudCkge1xuICAgIHJldHVybiB0aGlzLl9vY2N1cnJlbmNlcyAvIHdvcmRDb3VudDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFdvcmRDb21iaW5hdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdvcmRDb21iaW5hdGlvbi5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdvcmRDb21iaW5hdGlvbi5qcy5tYXBcbiJdfQ==
